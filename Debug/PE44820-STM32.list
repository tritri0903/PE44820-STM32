
PE44820-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017020  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ad0  080171d0  080171d0  000271d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aca0  0801aca0  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801aca0  0801aca0  0002aca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aca8  0801aca8  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aca8  0801aca8  0002aca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801acac  0801acac  0002acac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801acb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f4  2**0
                  CONTENTS
 10 .bss          0000ac8c  200001f8  200001f8  000301f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000ae84  2000ae84  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025690  00000000  00000000  00030267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000061f2  00000000  00000000  000558f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019b8  00000000  00000000  0005baf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001471  00000000  00000000  0005d4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003438f  00000000  00000000  0005e919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002b8bb  00000000  00000000  00092ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f3c6e  00000000  00000000  000be563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008068  00000000  00000000  001b21d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  001ba23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080171b8 	.word	0x080171b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	080171b8 	.word	0x080171b8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>:
#include "main.h"
#include "PE43xx.h"


PE43xx::PE43xx(GPIO_TypeDef* si_port, GPIO_InitTypeDef si_pin, GPIO_TypeDef* le_port, GPIO_InitTypeDef le_pin, GPIO_TypeDef* clk_port, GPIO_InitTypeDef clk_pin, uint8_t data, uint8_t type)
 8001030:	b082      	sub	sp, #8
 8001032:	b5b0      	push	{r4, r5, r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
 800103c:	f107 0118 	add.w	r1, r7, #24
 8001040:	e881 000c 	stmia.w	r1, {r2, r3}
{

	_si_pin = si_pin;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	1d1c      	adds	r4, r3, #4
 8001048:	f107 0518 	add.w	r5, r7, #24
 800104c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001050:	682b      	ldr	r3, [r5, #0]
 8001052:	6023      	str	r3, [r4, #0]
	_le_pin = le_pin;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f103 0418 	add.w	r4, r3, #24
 800105a:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800105e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001062:	682b      	ldr	r3, [r5, #0]
 8001064:	6023      	str	r3, [r4, #0]
	_clk_pin = clk_pin;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800106c:	f107 0548 	add.w	r5, r7, #72	; 0x48
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	682b      	ldr	r3, [r5, #0]
 8001076:	6023      	str	r3, [r4, #0]

	_si_port = si_port;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
	_le_port = le_port;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001082:	645a      	str	r2, [r3, #68]	; 0x44
	_clk_port = clk_port;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001088:	649a      	str	r2, [r3, #72]	; 0x48

	begin();
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f808 	bl	80010a0 <_ZN6PE43xx5beginEv>
}
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800109c:	b002      	add	sp, #8
 800109e:	4770      	bx	lr

080010a0 <_ZN6PE43xx5beginEv>:


void PE43xx::begin() {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    // set pins
	HAL_GPIO_WritePin(_si_port, _si_pin.Pin, GPIO_PIN_RESET);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	f003 ff81 	bl	8004fbc <HAL_GPIO_WritePin>

    // set our internal max and step values
    switch (_type) {
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b0c      	cmp	r3, #12
 80010c0:	d006      	beq.n	80010d0 <_ZN6PE43xx5beginEv+0x30>
 80010c2:	2b0c      	cmp	r3, #12
 80010c4:	dc14      	bgt.n	80010f0 <_ZN6PE43xx5beginEv+0x50>
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d002      	beq.n	80010d0 <_ZN6PE43xx5beginEv+0x30>
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d008      	beq.n	80010e0 <_ZN6PE43xx5beginEv+0x40>
 80010ce:	e00f      	b.n	80010f0 <_ZN6PE43xx5beginEv+0x50>
        case PE4302:
        case PE4312:
            _max = 31.5;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <_ZN6PE43xx5beginEv+0x74>)
 80010d4:	655a      	str	r2, [r3, #84]	; 0x54
            _step = 0.5;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80010dc:	651a      	str	r2, [r3, #80]	; 0x50
            break;
 80010de:	e00f      	b.n	8001100 <_ZN6PE43xx5beginEv+0x60>
        case PE4306:
            _max = 30;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <_ZN6PE43xx5beginEv+0x78>)
 80010e4:	655a      	str	r2, [r3, #84]	; 0x54
            _step = 1;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010ec:	651a      	str	r2, [r3, #80]	; 0x50
            break;
 80010ee:	e007      	b.n	8001100 <_ZN6PE43xx5beginEv+0x60>
        default:
            _step = 1;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010f6:	651a      	str	r2, [r3, #80]	; 0x50
            _max = 30;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a07      	ldr	r2, [pc, #28]	; (8001118 <_ZN6PE43xx5beginEv+0x78>)
 80010fc:	655a      	str	r2, [r3, #84]	; 0x54
            break;
 80010fe:	bf00      	nop
    }

    // set level to 0
    setLevel(0);
 8001100:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800111c <_ZN6PE43xx5beginEv+0x7c>
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f80b 	bl	8001120 <_ZN6PE43xx8setLevelEf>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	41fc0000 	.word	0x41fc0000
 8001118:	41f00000 	.word	0x41f00000
 800111c:	00000000 	.word	0x00000000

08001120 <_ZN6PE43xx8setLevelEf>:

bool PE43xx::setLevel(float level) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	ed87 0a00 	vstr	s0, [r7]
    // bounds check
    if(level < 0 || level > getMax() ) {
 800112c:	edd7 7a00 	vldr	s15, [r7]
 8001130:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	d40b      	bmi.n	8001152 <_ZN6PE43xx8setLevelEf+0x32>
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f879 	bl	8001232 <_ZN6PE43xx6getMaxEv>
 8001140:	eeb0 7a40 	vmov.f32	s14, s0
 8001144:	edd7 7a00 	vldr	s15, [r7]
 8001148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	dd01      	ble.n	8001156 <_ZN6PE43xx8setLevelEf+0x36>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <_ZN6PE43xx8setLevelEf+0x38>
 8001156:	2300      	movs	r3, #0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <_ZN6PE43xx8setLevelEf+0x40>
        return false;
 800115c:	2300      	movs	r3, #0
 800115e:	e006      	b.n	800116e <_ZN6PE43xx8setLevelEf+0x4e>
    }

    _level = level;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	64da      	str	r2, [r3, #76]	; 0x4c
    _writeLevel();
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f805 	bl	8001176 <_ZN6PE43xx11_writeLevelEv>

    return true;
 800116c:	2301      	movs	r3, #1
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <_ZN6PE43xx11_writeLevelEv>:

void PE43xx::_writeLevel() {
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
    //  1    1   1   1   1  => 31db

    // so the big different is that one can set the .5 bit or not

    // get the integer part, it will be the same for both chips
    int intlevel = int(_level);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001188:	ee17 3a90 	vmov	r3, s15
 800118c:	613b      	str	r3, [r7, #16]
    // default to 6 bits
    int bits = 6;
 800118e:	2306      	movs	r3, #6
 8001190:	60fb      	str	r3, [r7, #12]
            bitWrite(intlevel, 0, 0);
        }
    }*/

    // LE and CLOCK down to get the chip listen
    HAL_GPIO_WritePin(_le_port, _le_pin.Pin, GPIO_PIN_RESET);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	b29b      	uxth	r3, r3
 800119c:	2200      	movs	r2, #0
 800119e:	4619      	mov	r1, r3
 80011a0:	f003 ff0c 	bl	8004fbc <HAL_GPIO_WritePin>
    HAL_Delay(3);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f002 fa31 	bl	800360c <HAL_Delay>

    // Write the level out MSB first
    int b;
    for (int bit = bits; bit >= 0; bit--) {
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	e030      	b.n	8001212 <_ZN6PE43xx11_writeLevelEv+0x9c>
        b = ((intlevel << 1) >> bit) & 0x01;
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	005a      	lsls	r2, r3, #1
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa42 f303 	asr.w	r3, r2, r3
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]

        HAL_GPIO_WritePin(_clk_port, _clk_pin.Pin, GPIO_PIN_SET);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	2201      	movs	r2, #1
 80011cc:	4619      	mov	r1, r3
 80011ce:	f003 fef5 	bl	8004fbc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(_si_port, _si_pin.Pin, (b != 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	b299      	uxth	r1, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <_ZN6PE43xx11_writeLevelEv+0x70>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <_ZN6PE43xx11_writeLevelEv+0x72>
 80011e6:	2300      	movs	r3, #0
 80011e8:	461a      	mov	r2, r3
 80011ea:	f003 fee7 	bl	8004fbc <HAL_GPIO_WritePin>

        HAL_Delay(1);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f002 fa0c 	bl	800360c <HAL_Delay>

        HAL_GPIO_WritePin(_clk_port, _clk_pin.Pin, GPIO_PIN_RESET);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	2200      	movs	r2, #0
 8001200:	4619      	mov	r1, r3
 8001202:	f003 fedb 	bl	8004fbc <HAL_GPIO_WritePin>

        HAL_Delay(1);
 8001206:	2001      	movs	r0, #1
 8001208:	f002 fa00 	bl	800360c <HAL_Delay>
    for (int bit = bits; bit >= 0; bit--) {
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3b01      	subs	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2b00      	cmp	r3, #0
 8001216:	dacb      	bge.n	80011b0 <_ZN6PE43xx11_writeLevelEv+0x3a>
    }

    // toggle LE to latch
    HAL_GPIO_WritePin(_le_port, _le_pin.Pin, GPIO_PIN_SET);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	b29b      	uxth	r3, r3
 8001222:	2201      	movs	r2, #1
 8001224:	4619      	mov	r1, r3
 8001226:	f003 fec9 	bl	8004fbc <HAL_GPIO_WritePin>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_ZN6PE43xx6getMaxEv>:
// getters
float PE43xx::getLevel() {
    return _level;
}

float PE43xx::getMax() {
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
    return _max;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123e:	ee07 3a90 	vmov	s15, r3
}
 8001242:	eeb0 0a67 	vmov.f32	s0, s15
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>:
  /**
   * @brief Delay ~109nS function with nop function at F_CPU=64MHz
   *
   * @param val The delay circle(s). Delay time = 109.375nS * val.
   */
  inline void _PS_delay_100ns(uint32_t val)
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
    while (val-- > 0)
    {
      __asm__("nop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\t");
    }
#else
    HAL_Delay(val);
 800125a:	6838      	ldr	r0, [r7, #0]
 800125c:	f002 f9d6 	bl	800360c <HAL_Delay>
#endif
  }
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>:
#include "PhaseShifter.h"
#include "mapping.h"

#define abs(x) ((x) > 0 ? (x) : -(x))

PhaseShifter::PhaseShifter(GPIO_TypeDef* si_port, GPIO_InitTypeDef si_pin, GPIO_TypeDef* le_port, GPIO_InitTypeDef le_pin, GPIO_TypeDef* clk_port, GPIO_InitTypeDef clk_pin, uint8_t address, mode_e mode)
 8001268:	b082      	sub	sp, #8
 800126a:	b5b0      	push	{r4, r5, r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
 8001274:	f107 0118 	add.w	r1, r7, #24
 8001278:	e881 000c 	stmia.w	r1, {r2, r3}
{
  this->_data.raw = 0;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	801a      	strh	r2, [r3, #0]
  this->_address = address;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001288:	709a      	strb	r2, [r3, #2]
  this->_mode = mode;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001290:	70da      	strb	r2, [r3, #3]

  this->_si_pin = si_pin;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	1d1c      	adds	r4, r3, #4
 8001296:	f107 0518 	add.w	r5, r7, #24
 800129a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800129c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129e:	682b      	ldr	r3, [r5, #0]
 80012a0:	6023      	str	r3, [r4, #0]
  this->_le_pin = le_pin;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f103 0418 	add.w	r4, r3, #24
 80012a8:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80012ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b0:	682b      	ldr	r3, [r5, #0]
 80012b2:	6023      	str	r3, [r4, #0]
  this->_clk_pin = clk_pin;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80012ba:	f107 0548 	add.w	r5, r7, #72	; 0x48
 80012be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c2:	682b      	ldr	r3, [r5, #0]
 80012c4:	6023      	str	r3, [r4, #0]

  this->_si_port = si_port;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	641a      	str	r2, [r3, #64]	; 0x40
  this->_le_port = le_port;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44
  this->_clk_port = clk_port;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012d6:	649a      	str	r2, [r3, #72]	; 0x48

  begin();
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 f808 	bl	80012ee <_ZN12PhaseShifter5beginEv>
}
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80012ea:	b002      	add	sp, #8
 80012ec:	4770      	bx	lr

080012ee <_ZN12PhaseShifter5beginEv>:

void PhaseShifter::begin(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  /* GPIOs Initialize */
	//HAL_GPIO_Init(&this->_si_port, &this->_si_pin);
	HAL_GPIO_WritePin(this->_si_port, this->_si_pin.Pin, GPIO_PIN_RESET);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	f003 fe5a 	bl	8004fbc <HAL_GPIO_WritePin>

	//HAL_GPIO_Init(this->_le_port, this->_le_pin);
	HAL_GPIO_WritePin(this->_le_port, this->_le_pin.Pin, GPIO_PIN_RESET);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	b29b      	uxth	r3, r3
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	f003 fe51 	bl	8004fbc <HAL_GPIO_WritePin>

	//HAL_GPIO_Init(this->_clk_port,this->_clk_pin);
	HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_SET);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001322:	b29b      	uxth	r3, r3
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	f003 fe48 	bl	8004fbc <HAL_GPIO_WritePin>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_ZN12PhaseShifter12dataShiftOutEh6data_u>:

void PhaseShifter::dataShiftOut(uint8_t addr, data_u data)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	803a      	strh	r2, [r7, #0]
 8001340:	70fb      	strb	r3, [r7, #3]
  int8_t bit_index;

  HAL_GPIO_WritePin(this->_le_port, this->_le_pin.Pin, GPIO_PIN_RESET);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	b29b      	uxth	r3, r3
 800134c:	2200      	movs	r2, #0
 800134e:	4619      	mov	r1, r3
 8001350:	f003 fe34 	bl	8004fbc <HAL_GPIO_WritePin>
  _PS_delay_100ns(1); // Tsettle > 10ns
 8001354:	2101      	movs	r1, #1
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ff7a 	bl	8001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>

  // Data
  for (bit_index = 0; bit_index < 8; bit_index++)
 800135c:	2300      	movs	r3, #0
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	e031      	b.n	80013c6 <_ZN12PhaseShifter12dataShiftOutEh6data_u+0x92>
  {
	  HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_SET);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136a:	b29b      	uxth	r3, r3
 800136c:	2201      	movs	r2, #1
 800136e:	4619      	mov	r1, r3
 8001370:	f003 fe24 	bl	8004fbc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(this->_si_port, this->_si_pin.Pin,(((data.data.data >> bit_index) & 0x01) != 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	b299      	uxth	r1, r3
 800137e:	783b      	ldrb	r3, [r7, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	fa42 f303 	asr.w	r3, r2, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	461a      	mov	r2, r3
 8001394:	f003 fe12 	bl	8004fbc <HAL_GPIO_WritePin>

    _PS_delay_100ns(3); // Tclkh > 30ns
 8001398:	2103      	movs	r1, #3
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff58 	bl	8001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>

	HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_RESET);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	f003 fe05 	bl	8004fbc <HAL_GPIO_WritePin>
    _PS_delay_100ns(3); // Tclkl > 30ns
 80013b2:	2103      	movs	r1, #3
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff4b 	bl	8001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>
  for (bit_index = 0; bit_index < 8; bit_index++)
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	2b07      	cmp	r3, #7
 80013cc:	ddc9      	ble.n	8001362 <_ZN12PhaseShifter12dataShiftOutEh6data_u+0x2e>
  }

  // OPT
  HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_SET);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2201      	movs	r2, #1
 80013da:	4619      	mov	r1, r3
 80013dc:	f003 fdee 	bl	8004fbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(this->_si_port, this->_si_pin.Pin, (data.data.opt != 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	b299      	uxth	r1, r3
 80013ea:	787b      	ldrb	r3, [r7, #1]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	461a      	mov	r2, r3
 80013f4:	f003 fde2 	bl	8004fbc <HAL_GPIO_WritePin>
  _PS_delay_100ns(3); // Tclkh > 30ns
 80013f8:	2103      	movs	r1, #3
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ff28 	bl	8001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>

  HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_RESET);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	b29b      	uxth	r3, r3
 800140a:	2200      	movs	r2, #0
 800140c:	4619      	mov	r1, r3
 800140e:	f003 fdd5 	bl	8004fbc <HAL_GPIO_WritePin>
  _PS_delay_100ns(3); // Tclkl > 30ns
 8001412:	2103      	movs	r1, #3
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff1b 	bl	8001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>

  // Address
  for (bit_index = 0; bit_index < 4; bit_index++)
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	e030      	b.n	8001482 <_ZN12PhaseShifter12dataShiftOutEh6data_u+0x14e>
  {
	  HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_SET);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	b29b      	uxth	r3, r3
 800142a:	2201      	movs	r2, #1
 800142c:	4619      	mov	r1, r3
 800142e:	f003 fdc5 	bl	8004fbc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(this->_si_port, this->_si_pin.Pin, (((addr >> bit_index) & 0x01) != 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	b299      	uxth	r1, r3
 800143c:	78fa      	ldrb	r2, [r7, #3]
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	fa42 f303 	asr.w	r3, r2, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	f003 fdb4 	bl	8004fbc <HAL_GPIO_WritePin>
    _PS_delay_100ns(3); // Tclkh > 30ns
 8001454:	2103      	movs	r1, #3
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fefa 	bl	8001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>

    HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_RESET);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	b29b      	uxth	r3, r3
 8001466:	2200      	movs	r2, #0
 8001468:	4619      	mov	r1, r3
 800146a:	f003 fda7 	bl	8004fbc <HAL_GPIO_WritePin>
    _PS_delay_100ns(3); // Tclkl > 30ns
 800146e:	2103      	movs	r1, #3
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff feed 	bl	8001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>
  for (bit_index = 0; bit_index < 4; bit_index++)
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	3301      	adds	r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001486:	2b03      	cmp	r3, #3
 8001488:	ddca      	ble.n	8001420 <_ZN12PhaseShifter12dataShiftOutEh6data_u+0xec>
  }

  // Reset SI & SLK Pin
  HAL_GPIO_WritePin(this->_si_port, this->_si_pin.Pin, GPIO_PIN_RESET);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	b29b      	uxth	r3, r3
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	f003 fd90 	bl	8004fbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_SET);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	2201      	movs	r2, #1
 80014a8:	4619      	mov	r1, r3
 80014aa:	f003 fd87 	bl	8004fbc <HAL_GPIO_WritePin>

  _PS_delay_100ns(1); // Tsettle > 10ns
 80014ae:	2101      	movs	r1, #1
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff fecd 	bl	8001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>
  HAL_GPIO_WritePin(this->_le_port, this->_le_pin.Pin, GPIO_PIN_SET);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	2201      	movs	r2, #1
 80014c2:	4619      	mov	r1, r3
 80014c4:	f003 fd7a 	bl	8004fbc <HAL_GPIO_WritePin>
}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_ZN12PhaseShifter9findAngleEf6mode_ePf>:

uint16_t PhaseShifter::findAngle(float angle, mode_e mode, float *foundAngle)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80014dc:	460b      	mov	r3, r1
 80014de:	603a      	str	r2, [r7, #0]
 80014e0:	71fb      	strb	r3, [r7, #7]
  uint16_t idx = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	83fb      	strh	r3, [r7, #30]
  int16_t targetAngle = angle * 10;
 80014e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80014ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f6:	ee17 3a90 	vmov	r3, s15
 80014fa:	837b      	strh	r3, [r7, #26]

  for (idx = 0; idx <= 255; idx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	83fb      	strh	r3, [r7, #30]
 8001500:	e00a      	b.n	8001518 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x48>
  {
    if (targetAngle <= PHASE_SHIFT_VALUE[idx])
 8001502:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001506:	8bfa      	ldrh	r2, [r7, #30]
 8001508:	4937      	ldr	r1, [pc, #220]	; (80015e8 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x118>)
 800150a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800150e:	4293      	cmp	r3, r2
 8001510:	dd06      	ble.n	8001520 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x50>
  for (idx = 0; idx <= 255; idx++)
 8001512:	8bfb      	ldrh	r3, [r7, #30]
 8001514:	3301      	adds	r3, #1
 8001516:	83fb      	strh	r3, [r7, #30]
 8001518:	8bfb      	ldrh	r3, [r7, #30]
 800151a:	2bff      	cmp	r3, #255	; 0xff
 800151c:	d9f1      	bls.n	8001502 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x32>
 800151e:	e000      	b.n	8001522 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x52>
    {
      break;
 8001520:	bf00      	nop
    }
  }

  if ((idx != 0) && (idx != 255))
 8001522:	8bfb      	ldrh	r3, [r7, #30]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d020      	beq.n	800156a <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x9a>
 8001528:	8bfb      	ldrh	r3, [r7, #30]
 800152a:	2bff      	cmp	r3, #255	; 0xff
 800152c:	d01d      	beq.n	800156a <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x9a>
  {
    uint16_t value1 = abs(targetAngle - PHASE_SHIFT_VALUE[idx - 1]);
 800152e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001532:	8bfa      	ldrh	r2, [r7, #30]
 8001534:	3a01      	subs	r2, #1
 8001536:	492c      	ldr	r1, [pc, #176]	; (80015e8 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x118>)
 8001538:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800153c:	1a9b      	subs	r3, r3, r2
 800153e:	2b00      	cmp	r3, #0
 8001540:	bfb8      	it	lt
 8001542:	425b      	neglt	r3, r3
 8001544:	833b      	strh	r3, [r7, #24]
    uint16_t value2 = abs(targetAngle - PHASE_SHIFT_VALUE[idx]);
 8001546:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800154a:	8bfa      	ldrh	r2, [r7, #30]
 800154c:	4926      	ldr	r1, [pc, #152]	; (80015e8 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x118>)
 800154e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	bfb8      	it	lt
 8001558:	425b      	neglt	r3, r3
 800155a:	82fb      	strh	r3, [r7, #22]

    if (value1 < value2)
 800155c:	8b3a      	ldrh	r2, [r7, #24]
 800155e:	8afb      	ldrh	r3, [r7, #22]
 8001560:	429a      	cmp	r2, r3
 8001562:	d202      	bcs.n	800156a <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x9a>
    {
      idx -= 1;
 8001564:	8bfb      	ldrh	r3, [r7, #30]
 8001566:	3b01      	subs	r3, #1
 8001568:	83fb      	strh	r3, [r7, #30]
    }
  }
  if (foundAngle != NULL)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d014      	beq.n	800159a <_ZN12PhaseShifter9findAngleEf6mode_ePf+0xca>
  {
    (*foundAngle) = PHASE_SHIFT_VALUE[idx] / 10.0;
 8001570:	8bfb      	ldrh	r3, [r7, #30]
 8001572:	4a1d      	ldr	r2, [pc, #116]	; (80015e8 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x118>)
 8001574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe fff3 	bl	8000564 <__aeabi_i2d>
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x11c>)
 8001584:	f7ff f982 	bl	800088c <__aeabi_ddiv>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fb4a 	bl	8000c28 <__aeabi_d2f>
 8001594:	4602      	mov	r2, r0
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	601a      	str	r2, [r3, #0]
  }

  uint16_t retVal = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	83bb      	strh	r3, [r7, #28]
  switch (mode)
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d012      	beq.n	80015ca <_ZN12PhaseShifter9findAngleEf6mode_ePf+0xfa>
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	dc16      	bgt.n	80015d6 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x106>
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0xe2>
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d006      	beq.n	80015be <_ZN12PhaseShifter9findAngleEf6mode_ePf+0xee>
 80015b0:	e011      	b.n	80015d6 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x106>
  {
  case MODE_BINARY_WEIGHTED:
    retVal = BINARY_WEIGHTED_DATA[idx];
 80015b2:	8bfb      	ldrh	r3, [r7, #30]
 80015b4:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x120>)
 80015b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ba:	83bb      	strh	r3, [r7, #28]
    break;
 80015bc:	e00e      	b.n	80015dc <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x10c>
  case MODE_OPT_1700_2200:
    retVal = OPT_1700_2200_DATA[idx];
 80015be:	8bfb      	ldrh	r3, [r7, #30]
 80015c0:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x124>)
 80015c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015c6:	83bb      	strh	r3, [r7, #28]
    break;
 80015c8:	e008      	b.n	80015dc <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x10c>
  case MODE_OPT_2600:
    retVal = OPT_2600_DATA[idx];
 80015ca:	8bfb      	ldrh	r3, [r7, #30]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x128>)
 80015ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015d2:	83bb      	strh	r3, [r7, #28]
    break;
 80015d4:	e002      	b.n	80015dc <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x10c>
  default:
    retVal = 0x0000;
 80015d6:	2300      	movs	r3, #0
 80015d8:	83bb      	strh	r3, [r7, #28]
    break;
 80015da:	bf00      	nop
  }

  return retVal;
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	08019cdc 	.word	0x08019cdc
 80015ec:	40240000 	.word	0x40240000
 80015f0:	0801a2dc 	.word	0x0801a2dc
 80015f4:	08019edc 	.word	0x08019edc
 80015f8:	0801a0dc 	.word	0x0801a0dc

080015fc <_ZN12PhaseShifter8setAngleEf>:

float PhaseShifter::setAngle(float angle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	ed87 0a00 	vstr	s0, [r7]
  float foundAngle = 0;
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]

  if (angle < 0)
 800160e:	edd7 7a00 	vldr	s15, [r7]
 8001612:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161a:	d502      	bpl.n	8001622 <_ZN12PhaseShifter8setAngleEf+0x26>
    angle = 0;
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	603b      	str	r3, [r7, #0]
  for (;angle > 360;){
 8001622:	e007      	b.n	8001634 <_ZN12PhaseShifter8setAngleEf+0x38>
	 angle -= 360;
 8001624:	edd7 7a00 	vldr	s15, [r7]
 8001628:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001680 <_ZN12PhaseShifter8setAngleEf+0x84>
 800162c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001630:	edc7 7a00 	vstr	s15, [r7]
  for (;angle > 360;){
 8001634:	edd7 7a00 	vldr	s15, [r7]
 8001638:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001680 <_ZN12PhaseShifter8setAngleEf+0x84>
 800163c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001644:	dcee      	bgt.n	8001624 <_ZN12PhaseShifter8setAngleEf+0x28>
  }


  this->_data.raw = findAngle(angle, this->_mode, &foundAngle);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	78db      	ldrb	r3, [r3, #3]
 800164a:	f107 020c 	add.w	r2, r7, #12
 800164e:	4619      	mov	r1, r3
 8001650:	ed97 0a00 	vldr	s0, [r7]
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff3b 	bl	80014d0 <_ZN12PhaseShifter9findAngleEf6mode_ePf>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	801a      	strh	r2, [r3, #0]
  this->dataShiftOut(this->_address, this->_data);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7899      	ldrb	r1, [r3, #2]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	881a      	ldrh	r2, [r3, #0]
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fe62 	bl	8001334 <_ZN12PhaseShifter12dataShiftOutEh6data_u>

  return foundAngle;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	ee07 3a90 	vmov	s15, r3
}
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	43b40000 	.word	0x43b40000
 8001684:	00000000 	.word	0x00000000

08001688 <_Z22calculate_phase_shiftsdddiPd>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Fonction pour calculer le déphasage de chaque antenne
void calculate_phase_shifts(double angle_of_attack, double wavelength, double distance, int num_antennas, double phase_shifts[]) {
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	ed87 0b06 	vstr	d0, [r7, #24]
 8001692:	ed87 1b04 	vstr	d1, [r7, #16]
 8001696:	ed87 2b02 	vstr	d2, [r7, #8]
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
    for (int n = 0; n < num_antennas; n++) {
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
 80016a2:	e03d      	b.n	8001720 <_Z22calculate_phase_shiftsdddiPd+0x98>
        phase_shifts[n] = (2 * PI * distance / wavelength) * n * sin(angle_of_attack) * 57.3;
 80016a4:	a324      	add	r3, pc, #144	; (adr r3, 8001738 <_Z22calculate_phase_shiftsdddiPd+0xb0>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016ae:	f7fe ffc3 	bl	8000638 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016be:	f7ff f8e5 	bl	800088c <__aeabi_ddiv>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4614      	mov	r4, r2
 80016c8:	461d      	mov	r5, r3
 80016ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016cc:	f7fe ff4a 	bl	8000564 <__aeabi_i2d>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe ffae 	bl	8000638 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4614      	mov	r4, r2
 80016e2:	461d      	mov	r5, r3
 80016e4:	ed97 0b06 	vldr	d0, [r7, #24]
 80016e8:	f010 fb7a 	bl	8011de0 <sin>
 80016ec:	ec53 2b10 	vmov	r2, r3, d0
 80016f0:	4620      	mov	r0, r4
 80016f2:	4629      	mov	r1, r5
 80016f4:	f7fe ffa0 	bl	8000638 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	18d4      	adds	r4, r2, r3
 8001708:	a30d      	add	r3, pc, #52	; (adr r3, 8001740 <_Z22calculate_phase_shiftsdddiPd+0xb8>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7fe ff93 	bl	8000638 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	e9c4 2300 	strd	r2, r3, [r4]
    for (int n = 0; n < num_antennas; n++) {
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	3301      	adds	r3, #1
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
 8001720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	429a      	cmp	r2, r3
 8001726:	dbbd      	blt.n	80016a4 <_Z22calculate_phase_shiftsdddiPd+0x1c>
    }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	; 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bdb0      	pop	{r4, r5, r7, pc}
 8001732:	bf00      	nop
 8001734:	f3af 8000 	nop.w
 8001738:	54442d18 	.word	0x54442d18
 800173c:	401921fb 	.word	0x401921fb
 8001740:	66666666 	.word	0x66666666
 8001744:	404ca666 	.word	0x404ca666

08001748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174a:	ed2d 8b02 	vpush	{d8}
 800174e:	f2ad 7d2c 	subw	sp, sp, #1836	; 0x72c
 8001752:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001754:	f001 fee8 	bl	8003528 <HAL_Init>

  /* USER CODE BEGIN Init */

  GPIO_InitTypeDef GPIO_InitStruct_Si = {
 8001758:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
 8001768:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800176c:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 8001770:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001774:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
		  .Pin = SI_Pin,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le = {
 8001778:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
 8001788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178c:	f8c7 36a0 	str.w	r3, [r7, #1696]	; 0x6a0
 8001790:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001794:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
		  .Pin = LE_Pin,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Clk = {
 8001798:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017ac:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 80017b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017b4:	f8c7 3690 	str.w	r3, [r7, #1680]	; 0x690
		  .Pin = CLK_Pin,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Si_Att = {
 80017b8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
 80017c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017cc:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678
 80017d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017d4:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
		  .Pin = SDI_Att_Pin,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Clk_Att = {
 80017d8:	f207 6364 	addw	r3, r7, #1636	; 0x664
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
 80017e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017ec:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 80017f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017f4:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
		  .Pin = CLK_Att_Pin,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att_A = {
 80017f8:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
 8001808:	2308      	movs	r3, #8
 800180a:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 800180e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001812:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
		  .Pin = LE_ATT_PIN_A,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att_B = {
 8001816:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
 8001826:	2308      	movs	r3, #8
 8001828:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 800182c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001830:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
		  .Pin = LE_ATT_PIN_B,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att_C = {
 8001834:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
 8001844:	2309      	movs	r3, #9
 8001846:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 800184a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800184e:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
		  .Pin = LE_ATT_PIN_C,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att_D = {
 8001852:	f207 6314 	addw	r3, r7, #1556	; 0x614
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
 8001862:	230c      	movs	r3, #12
 8001864:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8001868:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800186c:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
		  .Pin = LE_ATT_PIN_D,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att_E = {
 8001870:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
 8001880:	2308      	movs	r3, #8
 8001882:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
 8001886:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800188a:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
		  .Pin = LE_ATT_PIN_E,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att_F = {
 800188e:	f207 53ec 	addw	r3, r7, #1516	; 0x5ec
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	611a      	str	r2, [r3, #16]
 800189e:	230e      	movs	r3, #14
 80018a0:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 80018a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018a8:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
		  .Pin = LE_ATT_PIN_F,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att_G = {
 80018ac:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 80018b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80018b4:	461a      	mov	r2, r3
 80018b6:	2300      	movs	r3, #0
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	6053      	str	r3, [r2, #4]
 80018bc:	6093      	str	r3, [r2, #8]
 80018be:	60d3      	str	r3, [r2, #12]
 80018c0:	6113      	str	r3, [r2, #16]
 80018c2:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 80018c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80018ca:	220b      	movs	r2, #11
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 80018d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80018d6:	f44f 1204 	mov.w	r2, #2162688	; 0x210000
 80018da:	605a      	str	r2, [r3, #4]
		  .Pin = LE_ATT_PIN_G,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att_H = {
 80018dc:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 80018e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018e4:	461a      	mov	r2, r3
 80018e6:	2300      	movs	r3, #0
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	6053      	str	r3, [r2, #4]
 80018ec:	6093      	str	r3, [r2, #8]
 80018ee:	60d3      	str	r3, [r2, #12]
 80018f0:	6113      	str	r3, [r2, #16]
 80018f2:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 80018f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8001902:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001906:	f44f 1204 	mov.w	r2, #2162688	; 0x210000
 800190a:	605a      	str	r2, [r3, #4]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800190c:	f000 fc5a 	bl	80021c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001910:	f000 fda4 	bl	800245c <_ZL12MX_GPIO_Initv>
  //MX_ETH_Init();
  MX_USART3_UART_Init();
 8001914:	f000 fd42 	bl	800239c <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8001918:	f000 fd6e 	bl	80023f8 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_SPI1_Init();
 800191c:	f000 fcc6 	bl	80022ac <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8001920:	f000 fd00 	bl	8002324 <_ZL12MX_SPI2_Initv>
  MX_LWIP_Init();
 8001924:	f005 f89e 	bl	8006a64 <MX_LWIP_Init>
  //MX_LWIP_Init();
  /* USER CODE BEGIN 2 */

  server_pcb = tcp_server_init();
 8001928:	f001 f99e 	bl	8002c68 <_Z15tcp_server_initv>
 800192c:	4603      	mov	r3, r0
 800192e:	4aab      	ldr	r2, [pc, #684]	; (8001bdc <main+0x494>)
 8001930:	6013      	str	r3, [r2, #0]

  char *cmd, *arg, *option;
  char serial_output[100] = "";
 8001932:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8001936:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	3304      	adds	r3, #4
 8001940:	2260      	movs	r2, #96	; 0x60
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f013 f903 	bl	8014b50 <memset>

  antenna_distance = 0.05;
 800194a:	4ba5      	ldr	r3, [pc, #660]	; (8001be0 <main+0x498>)
 800194c:	4aa5      	ldr	r2, [pc, #660]	; (8001be4 <main+0x49c>)
 800194e:	601a      	str	r2, [r3, #0]

  PhaseShifter pe44820_A = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x000, MODE_BINARY_WEIGHTED);
 8001950:	f207 5614 	addw	r6, r7, #1300	; 0x514
 8001954:	2300      	movs	r3, #0
 8001956:	9310      	str	r3, [sp, #64]	; 0x40
 8001958:	2300      	movs	r3, #0
 800195a:	930f      	str	r3, [sp, #60]	; 0x3c
 800195c:	ad0a      	add	r5, sp, #40	; 0x28
 800195e:	f207 648c 	addw	r4, r7, #1676	; 0x68c
 8001962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	602b      	str	r3, [r5, #0]
 800196a:	4b9f      	ldr	r3, [pc, #636]	; (8001be8 <main+0x4a0>)
 800196c:	9309      	str	r3, [sp, #36]	; 0x24
 800196e:	ad04      	add	r5, sp, #16
 8001970:	f507 64d4 	add.w	r4, r7, #1696	; 0x6a0
 8001974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	602b      	str	r3, [r5, #0]
 800197c:	4b9b      	ldr	r3, [pc, #620]	; (8001bec <main+0x4a4>)
 800197e:	9303      	str	r3, [sp, #12]
 8001980:	466c      	mov	r4, sp
 8001982:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 8001986:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800198a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800198e:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 8001992:	cb0c      	ldmia	r3, {r2, r3}
 8001994:	4994      	ldr	r1, [pc, #592]	; (8001be8 <main+0x4a0>)
 8001996:	4630      	mov	r0, r6
 8001998:	f7ff fc66 	bl	8001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>
  PhaseShifter pe44820_B = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x001, MODE_BINARY_WEIGHTED);
 800199c:	f507 6699 	add.w	r6, r7, #1224	; 0x4c8
 80019a0:	2300      	movs	r3, #0
 80019a2:	9310      	str	r3, [sp, #64]	; 0x40
 80019a4:	2301      	movs	r3, #1
 80019a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80019a8:	ad0a      	add	r5, sp, #40	; 0x28
 80019aa:	f207 648c 	addw	r4, r7, #1676	; 0x68c
 80019ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	602b      	str	r3, [r5, #0]
 80019b6:	4b8c      	ldr	r3, [pc, #560]	; (8001be8 <main+0x4a0>)
 80019b8:	9309      	str	r3, [sp, #36]	; 0x24
 80019ba:	ad04      	add	r5, sp, #16
 80019bc:	f507 64d4 	add.w	r4, r7, #1696	; 0x6a0
 80019c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	602b      	str	r3, [r5, #0]
 80019c8:	4b88      	ldr	r3, [pc, #544]	; (8001bec <main+0x4a4>)
 80019ca:	9303      	str	r3, [sp, #12]
 80019cc:	466c      	mov	r4, sp
 80019ce:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 80019d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019da:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 80019de:	cb0c      	ldmia	r3, {r2, r3}
 80019e0:	4981      	ldr	r1, [pc, #516]	; (8001be8 <main+0x4a0>)
 80019e2:	4630      	mov	r0, r6
 80019e4:	f7ff fc40 	bl	8001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>
  PhaseShifter pe44820_C = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x002, MODE_BINARY_WEIGHTED);
 80019e8:	f207 467c 	addw	r6, r7, #1148	; 0x47c
 80019ec:	2300      	movs	r3, #0
 80019ee:	9310      	str	r3, [sp, #64]	; 0x40
 80019f0:	2302      	movs	r3, #2
 80019f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80019f4:	ad0a      	add	r5, sp, #40	; 0x28
 80019f6:	f207 648c 	addw	r4, r7, #1676	; 0x68c
 80019fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	602b      	str	r3, [r5, #0]
 8001a02:	4b79      	ldr	r3, [pc, #484]	; (8001be8 <main+0x4a0>)
 8001a04:	9309      	str	r3, [sp, #36]	; 0x24
 8001a06:	ad04      	add	r5, sp, #16
 8001a08:	f507 64d4 	add.w	r4, r7, #1696	; 0x6a0
 8001a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	602b      	str	r3, [r5, #0]
 8001a14:	4b75      	ldr	r3, [pc, #468]	; (8001bec <main+0x4a4>)
 8001a16:	9303      	str	r3, [sp, #12]
 8001a18:	466c      	mov	r4, sp
 8001a1a:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 8001a1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a26:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 8001a2a:	cb0c      	ldmia	r3, {r2, r3}
 8001a2c:	496e      	ldr	r1, [pc, #440]	; (8001be8 <main+0x4a0>)
 8001a2e:	4630      	mov	r0, r6
 8001a30:	f7ff fc1a 	bl	8001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>
  PhaseShifter pe44820_D = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x003, MODE_BINARY_WEIGHTED);
 8001a34:	f507 6686 	add.w	r6, r7, #1072	; 0x430
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9310      	str	r3, [sp, #64]	; 0x40
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001a40:	ad0a      	add	r5, sp, #40	; 0x28
 8001a42:	f207 648c 	addw	r4, r7, #1676	; 0x68c
 8001a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	602b      	str	r3, [r5, #0]
 8001a4e:	4b66      	ldr	r3, [pc, #408]	; (8001be8 <main+0x4a0>)
 8001a50:	9309      	str	r3, [sp, #36]	; 0x24
 8001a52:	ad04      	add	r5, sp, #16
 8001a54:	f507 64d4 	add.w	r4, r7, #1696	; 0x6a0
 8001a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	602b      	str	r3, [r5, #0]
 8001a60:	4b62      	ldr	r3, [pc, #392]	; (8001bec <main+0x4a4>)
 8001a62:	9303      	str	r3, [sp, #12]
 8001a64:	466c      	mov	r4, sp
 8001a66:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 8001a6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a72:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 8001a76:	cb0c      	ldmia	r3, {r2, r3}
 8001a78:	495b      	ldr	r1, [pc, #364]	; (8001be8 <main+0x4a0>)
 8001a7a:	4630      	mov	r0, r6
 8001a7c:	f7ff fbf4 	bl	8001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>
  PhaseShifter pe44820_E = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x004, MODE_BINARY_WEIGHTED);
 8001a80:	f507 7679 	add.w	r6, r7, #996	; 0x3e4
 8001a84:	2300      	movs	r3, #0
 8001a86:	9310      	str	r3, [sp, #64]	; 0x40
 8001a88:	2304      	movs	r3, #4
 8001a8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8001a8c:	ad0a      	add	r5, sp, #40	; 0x28
 8001a8e:	f207 648c 	addw	r4, r7, #1676	; 0x68c
 8001a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	602b      	str	r3, [r5, #0]
 8001a9a:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <main+0x4a0>)
 8001a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8001a9e:	ad04      	add	r5, sp, #16
 8001aa0:	f507 64d4 	add.w	r4, r7, #1696	; 0x6a0
 8001aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	602b      	str	r3, [r5, #0]
 8001aac:	4b4f      	ldr	r3, [pc, #316]	; (8001bec <main+0x4a4>)
 8001aae:	9303      	str	r3, [sp, #12]
 8001ab0:	466c      	mov	r4, sp
 8001ab2:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 8001ab6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001aba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001abe:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 8001ac2:	cb0c      	ldmia	r3, {r2, r3}
 8001ac4:	4948      	ldr	r1, [pc, #288]	; (8001be8 <main+0x4a0>)
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f7ff fbce 	bl	8001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>
  PhaseShifter pe44820_F = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x005, MODE_BINARY_WEIGHTED);
 8001acc:	f507 7666 	add.w	r6, r7, #920	; 0x398
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9310      	str	r3, [sp, #64]	; 0x40
 8001ad4:	2305      	movs	r3, #5
 8001ad6:	930f      	str	r3, [sp, #60]	; 0x3c
 8001ad8:	ad0a      	add	r5, sp, #40	; 0x28
 8001ada:	f207 648c 	addw	r4, r7, #1676	; 0x68c
 8001ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	602b      	str	r3, [r5, #0]
 8001ae6:	4b40      	ldr	r3, [pc, #256]	; (8001be8 <main+0x4a0>)
 8001ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8001aea:	ad04      	add	r5, sp, #16
 8001aec:	f507 64d4 	add.w	r4, r7, #1696	; 0x6a0
 8001af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	602b      	str	r3, [r5, #0]
 8001af8:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <main+0x4a4>)
 8001afa:	9303      	str	r3, [sp, #12]
 8001afc:	466c      	mov	r4, sp
 8001afe:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 8001b02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b0a:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 8001b0e:	cb0c      	ldmia	r3, {r2, r3}
 8001b10:	4935      	ldr	r1, [pc, #212]	; (8001be8 <main+0x4a0>)
 8001b12:	4630      	mov	r0, r6
 8001b14:	f7ff fba8 	bl	8001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>
  PhaseShifter pe44820_G = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x006, MODE_BINARY_WEIGHTED);
 8001b18:	f507 7653 	add.w	r6, r7, #844	; 0x34c
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9310      	str	r3, [sp, #64]	; 0x40
 8001b20:	2306      	movs	r3, #6
 8001b22:	930f      	str	r3, [sp, #60]	; 0x3c
 8001b24:	ad0a      	add	r5, sp, #40	; 0x28
 8001b26:	f207 648c 	addw	r4, r7, #1676	; 0x68c
 8001b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	602b      	str	r3, [r5, #0]
 8001b32:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <main+0x4a0>)
 8001b34:	9309      	str	r3, [sp, #36]	; 0x24
 8001b36:	ad04      	add	r5, sp, #16
 8001b38:	f507 64d4 	add.w	r4, r7, #1696	; 0x6a0
 8001b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	602b      	str	r3, [r5, #0]
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <main+0x4a4>)
 8001b46:	9303      	str	r3, [sp, #12]
 8001b48:	466c      	mov	r4, sp
 8001b4a:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 8001b4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b56:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 8001b5a:	cb0c      	ldmia	r3, {r2, r3}
 8001b5c:	4922      	ldr	r1, [pc, #136]	; (8001be8 <main+0x4a0>)
 8001b5e:	4630      	mov	r0, r6
 8001b60:	f7ff fb82 	bl	8001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>
  PhaseShifter pe44820_H = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x007, MODE_BINARY_WEIGHTED);
 8001b64:	f507 7640 	add.w	r6, r7, #768	; 0x300
 8001b68:	2300      	movs	r3, #0
 8001b6a:	9310      	str	r3, [sp, #64]	; 0x40
 8001b6c:	2307      	movs	r3, #7
 8001b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001b70:	ad0a      	add	r5, sp, #40	; 0x28
 8001b72:	f207 648c 	addw	r4, r7, #1676	; 0x68c
 8001b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	602b      	str	r3, [r5, #0]
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <main+0x4a0>)
 8001b80:	9309      	str	r3, [sp, #36]	; 0x24
 8001b82:	ad04      	add	r5, sp, #16
 8001b84:	f507 64d4 	add.w	r4, r7, #1696	; 0x6a0
 8001b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	602b      	str	r3, [r5, #0]
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <main+0x4a4>)
 8001b92:	9303      	str	r3, [sp, #12]
 8001b94:	466c      	mov	r4, sp
 8001b96:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 8001b9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ba2:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 8001ba6:	cb0c      	ldmia	r3, {r2, r3}
 8001ba8:	490f      	ldr	r1, [pc, #60]	; (8001be8 <main+0x4a0>)
 8001baa:	4630      	mov	r0, r6
 8001bac:	f7ff fb5c 	bl	8001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>


  PE43xx pe4312_A = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, LE_ATT_PORT_A, GPIO_InitStruct_Le_Att_A, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001bb0:	f507 762a 	add.w	r6, r7, #680	; 0x2a8
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9310      	str	r3, [sp, #64]	; 0x40
 8001bb8:	2300      	movs	r3, #0
 8001bba:	930f      	str	r3, [sp, #60]	; 0x3c
 8001bbc:	ad0a      	add	r5, sp, #40	; 0x28
 8001bbe:	f207 6464 	addw	r4, r7, #1636	; 0x664
 8001bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc6:	6823      	ldr	r3, [r4, #0]
 8001bc8:	602b      	str	r3, [r5, #0]
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <main+0x4a8>)
 8001bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8001bce:	ad04      	add	r5, sp, #16
 8001bd0:	f507 64ca 	add.w	r4, r7, #1616	; 0x650
 8001bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	e00b      	b.n	8001bf4 <main+0x4ac>
 8001bdc:	20000864 	.word	0x20000864
 8001be0:	20000860 	.word	0x20000860
 8001be4:	3d4ccccd 	.word	0x3d4ccccd
 8001be8:	40020c00 	.word	0x40020c00
 8001bec:	40021400 	.word	0x40021400
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	602b      	str	r3, [r5, #0]
 8001bf6:	4bb3      	ldr	r3, [pc, #716]	; (8001ec4 <main+0x77c>)
 8001bf8:	9303      	str	r3, [sp, #12]
 8001bfa:	466c      	mov	r4, sp
 8001bfc:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8001c00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c08:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8001c0c:	cb0c      	ldmia	r3, {r2, r3}
 8001c0e:	49ae      	ldr	r1, [pc, #696]	; (8001ec8 <main+0x780>)
 8001c10:	4630      	mov	r0, r6
 8001c12:	f7ff fa0d 	bl	8001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>
  PE43xx pe4312_B = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, LE_ATT_PORT_B, GPIO_InitStruct_Le_Att_B, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001c16:	f507 7614 	add.w	r6, r7, #592	; 0x250
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9310      	str	r3, [sp, #64]	; 0x40
 8001c1e:	2300      	movs	r3, #0
 8001c20:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c22:	ad0a      	add	r5, sp, #40	; 0x28
 8001c24:	f207 6464 	addw	r4, r7, #1636	; 0x664
 8001c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	602b      	str	r3, [r5, #0]
 8001c30:	4ba5      	ldr	r3, [pc, #660]	; (8001ec8 <main+0x780>)
 8001c32:	9309      	str	r3, [sp, #36]	; 0x24
 8001c34:	ad04      	add	r5, sp, #16
 8001c36:	f207 643c 	addw	r4, r7, #1596	; 0x63c
 8001c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	602b      	str	r3, [r5, #0]
 8001c42:	4ba2      	ldr	r3, [pc, #648]	; (8001ecc <main+0x784>)
 8001c44:	9303      	str	r3, [sp, #12]
 8001c46:	466c      	mov	r4, sp
 8001c48:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8001c4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c54:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8001c58:	cb0c      	ldmia	r3, {r2, r3}
 8001c5a:	499b      	ldr	r1, [pc, #620]	; (8001ec8 <main+0x780>)
 8001c5c:	4630      	mov	r0, r6
 8001c5e:	f7ff f9e7 	bl	8001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>
  PE43xx pe4312_C = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, LE_ATT_PORT_C, GPIO_InitStruct_Le_Att_C, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001c62:	f507 76fc 	add.w	r6, r7, #504	; 0x1f8
 8001c66:	2300      	movs	r3, #0
 8001c68:	9310      	str	r3, [sp, #64]	; 0x40
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c6e:	ad0a      	add	r5, sp, #40	; 0x28
 8001c70:	f207 6464 	addw	r4, r7, #1636	; 0x664
 8001c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	602b      	str	r3, [r5, #0]
 8001c7c:	4b92      	ldr	r3, [pc, #584]	; (8001ec8 <main+0x780>)
 8001c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8001c80:	ad04      	add	r5, sp, #16
 8001c82:	f507 64c5 	add.w	r4, r7, #1576	; 0x628
 8001c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	602b      	str	r3, [r5, #0]
 8001c8e:	4b8f      	ldr	r3, [pc, #572]	; (8001ecc <main+0x784>)
 8001c90:	9303      	str	r3, [sp, #12]
 8001c92:	466c      	mov	r4, sp
 8001c94:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8001c98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ca0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8001ca4:	cb0c      	ldmia	r3, {r2, r3}
 8001ca6:	4988      	ldr	r1, [pc, #544]	; (8001ec8 <main+0x780>)
 8001ca8:	4630      	mov	r0, r6
 8001caa:	f7ff f9c1 	bl	8001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>
  PE43xx pe4312_D = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, LE_ATT_PORT_D, GPIO_InitStruct_Le_Att_D, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001cae:	f507 76d0 	add.w	r6, r7, #416	; 0x1a0
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	9310      	str	r3, [sp, #64]	; 0x40
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8001cba:	ad0a      	add	r5, sp, #40	; 0x28
 8001cbc:	f207 6464 	addw	r4, r7, #1636	; 0x664
 8001cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cc4:	6823      	ldr	r3, [r4, #0]
 8001cc6:	602b      	str	r3, [r5, #0]
 8001cc8:	4b7f      	ldr	r3, [pc, #508]	; (8001ec8 <main+0x780>)
 8001cca:	9309      	str	r3, [sp, #36]	; 0x24
 8001ccc:	ad04      	add	r5, sp, #16
 8001cce:	f207 6414 	addw	r4, r7, #1556	; 0x614
 8001cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	602b      	str	r3, [r5, #0]
 8001cda:	4b7d      	ldr	r3, [pc, #500]	; (8001ed0 <main+0x788>)
 8001cdc:	9303      	str	r3, [sp, #12]
 8001cde:	466c      	mov	r4, sp
 8001ce0:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8001ce4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ce8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cec:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8001cf0:	cb0c      	ldmia	r3, {r2, r3}
 8001cf2:	4975      	ldr	r1, [pc, #468]	; (8001ec8 <main+0x780>)
 8001cf4:	4630      	mov	r0, r6
 8001cf6:	f7ff f99b 	bl	8001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>
  PE43xx pe4312_E = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, LE_ATT_PORT_E, GPIO_InitStruct_Le_Att_E, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001cfa:	f507 76a4 	add.w	r6, r7, #328	; 0x148
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9310      	str	r3, [sp, #64]	; 0x40
 8001d02:	2300      	movs	r3, #0
 8001d04:	930f      	str	r3, [sp, #60]	; 0x3c
 8001d06:	ad0a      	add	r5, sp, #40	; 0x28
 8001d08:	f207 6464 	addw	r4, r7, #1636	; 0x664
 8001d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	602b      	str	r3, [r5, #0]
 8001d14:	4b6c      	ldr	r3, [pc, #432]	; (8001ec8 <main+0x780>)
 8001d16:	9309      	str	r3, [sp, #36]	; 0x24
 8001d18:	ad04      	add	r5, sp, #16
 8001d1a:	f507 64c0 	add.w	r4, r7, #1536	; 0x600
 8001d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	602b      	str	r3, [r5, #0]
 8001d26:	4b68      	ldr	r3, [pc, #416]	; (8001ec8 <main+0x780>)
 8001d28:	9303      	str	r3, [sp, #12]
 8001d2a:	466c      	mov	r4, sp
 8001d2c:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8001d30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d38:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8001d3c:	cb0c      	ldmia	r3, {r2, r3}
 8001d3e:	4962      	ldr	r1, [pc, #392]	; (8001ec8 <main+0x780>)
 8001d40:	4630      	mov	r0, r6
 8001d42:	f7ff f975 	bl	8001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>
  PE43xx pe4312_F = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, LE_ATT_PORT_F, GPIO_InitStruct_Le_Att_F, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001d46:	f107 06f0 	add.w	r6, r7, #240	; 0xf0
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	9310      	str	r3, [sp, #64]	; 0x40
 8001d4e:	2300      	movs	r3, #0
 8001d50:	930f      	str	r3, [sp, #60]	; 0x3c
 8001d52:	ad0a      	add	r5, sp, #40	; 0x28
 8001d54:	f207 6464 	addw	r4, r7, #1636	; 0x664
 8001d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	602b      	str	r3, [r5, #0]
 8001d60:	4b59      	ldr	r3, [pc, #356]	; (8001ec8 <main+0x780>)
 8001d62:	9309      	str	r3, [sp, #36]	; 0x24
 8001d64:	ad04      	add	r5, sp, #16
 8001d66:	f207 54ec 	addw	r4, r7, #1516	; 0x5ec
 8001d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	602b      	str	r3, [r5, #0]
 8001d72:	4b55      	ldr	r3, [pc, #340]	; (8001ec8 <main+0x780>)
 8001d74:	9303      	str	r3, [sp, #12]
 8001d76:	466c      	mov	r4, sp
 8001d78:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8001d7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d84:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8001d88:	cb0c      	ldmia	r3, {r2, r3}
 8001d8a:	494f      	ldr	r1, [pc, #316]	; (8001ec8 <main+0x780>)
 8001d8c:	4630      	mov	r0, r6
 8001d8e:	f7ff f94f 	bl	8001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>
  PE43xx pe4312_G = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, LE_ATT_PORT_G, GPIO_InitStruct_Le_Att_G, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001d92:	f107 0698 	add.w	r6, r7, #152	; 0x98
 8001d96:	2300      	movs	r3, #0
 8001d98:	9310      	str	r3, [sp, #64]	; 0x40
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8001d9e:	ad0a      	add	r5, sp, #40	; 0x28
 8001da0:	f207 6464 	addw	r4, r7, #1636	; 0x664
 8001da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da8:	6823      	ldr	r3, [r4, #0]
 8001daa:	602b      	str	r3, [r5, #0]
 8001dac:	4b46      	ldr	r3, [pc, #280]	; (8001ec8 <main+0x780>)
 8001dae:	9309      	str	r3, [sp, #36]	; 0x24
 8001db0:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8001db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001db8:	ac04      	add	r4, sp, #16
 8001dba:	461d      	mov	r5, r3
 8001dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc0:	682b      	ldr	r3, [r5, #0]
 8001dc2:	6023      	str	r3, [r4, #0]
 8001dc4:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <main+0x784>)
 8001dc6:	9303      	str	r3, [sp, #12]
 8001dc8:	466c      	mov	r4, sp
 8001dca:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8001dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001dd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001dd6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8001dda:	cb0c      	ldmia	r3, {r2, r3}
 8001ddc:	493a      	ldr	r1, [pc, #232]	; (8001ec8 <main+0x780>)
 8001dde:	4630      	mov	r0, r6
 8001de0:	f7ff f926 	bl	8001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>
  PE43xx pe4312_H = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, LE_ATT_PORT_H, GPIO_InitStruct_Le_Att_H, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001de4:	f107 0640 	add.w	r6, r7, #64	; 0x40
 8001de8:	2300      	movs	r3, #0
 8001dea:	9310      	str	r3, [sp, #64]	; 0x40
 8001dec:	2300      	movs	r3, #0
 8001dee:	930f      	str	r3, [sp, #60]	; 0x3c
 8001df0:	ad0a      	add	r5, sp, #40	; 0x28
 8001df2:	f207 6464 	addw	r4, r7, #1636	; 0x664
 8001df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	602b      	str	r3, [r5, #0]
 8001dfe:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <main+0x780>)
 8001e00:	9309      	str	r3, [sp, #36]	; 0x24
 8001e02:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8001e06:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e0a:	ac04      	add	r4, sp, #16
 8001e0c:	461d      	mov	r5, r3
 8001e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e12:	682b      	ldr	r3, [r5, #0]
 8001e14:	6023      	str	r3, [r4, #0]
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <main+0x78c>)
 8001e18:	9303      	str	r3, [sp, #12]
 8001e1a:	466c      	mov	r4, sp
 8001e1c:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8001e20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e28:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8001e2c:	cb0c      	ldmia	r3, {r2, r3}
 8001e2e:	4926      	ldr	r1, [pc, #152]	; (8001ec8 <main+0x780>)
 8001e30:	4630      	mov	r0, r6
 8001e32:	f7ff f8fd 	bl	8001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>

  HAL_GPIO_WritePin(GPIOC, LE_Att_Pin, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e3c:	4821      	ldr	r0, [pc, #132]	; (8001ec4 <main+0x77c>)
 8001e3e:	f003 f8bd 	bl	8004fbc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8001e42:	f004 ff4f 	bl	8006ce4 <MX_LWIP_Process>
	  if(input[0] != '\0'){
 8001e46:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <main+0x790>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f9      	beq.n	8001e42 <main+0x6fa>

	  		  cmd = strtok(input, " ");
 8001e4e:	4923      	ldr	r1, [pc, #140]	; (8001edc <main+0x794>)
 8001e50:	4821      	ldr	r0, [pc, #132]	; (8001ed8 <main+0x790>)
 8001e52:	f012 febd 	bl	8014bd0 <strtok>
 8001e56:	f8c7 06dc 	str.w	r0, [r7, #1756]	; 0x6dc
	  		  arg = strtok(NULL, " ");
 8001e5a:	4920      	ldr	r1, [pc, #128]	; (8001edc <main+0x794>)
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f012 feb7 	bl	8014bd0 <strtok>
 8001e62:	f8c7 06d8 	str.w	r0, [r7, #1752]	; 0x6d8
	  		  option = strtok(NULL, " ");
 8001e66:	491d      	ldr	r1, [pc, #116]	; (8001edc <main+0x794>)
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f012 feb1 	bl	8014bd0 <strtok>
 8001e6e:	f8c7 06d4 	str.w	r0, [r7, #1748]	; 0x6d4

	  		  if(!strcmp(cmd, "BEAM")){
 8001e72:	491b      	ldr	r1, [pc, #108]	; (8001ee0 <main+0x798>)
 8001e74:	f8d7 06dc 	ldr.w	r0, [r7, #1756]	; 0x6dc
 8001e78:	f7fe f9ba 	bl	80001f0 <strcmp>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 812d 	bne.w	80020de <main+0x996>
	  			const char *test_message = "Hello, this is a test message!";
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <main+0x79c>)
 8001e86:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
	  			  tcp_server_send_message(server_pcb, test_message);
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <main+0x7a0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f8d7 16cc 	ldr.w	r1, [r7, #1740]	; 0x6cc
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fea2 	bl	8002bdc <_Z23tcp_server_send_messageP7tcp_pcbPKc>
	  			  strncpy(serial_output, "Command Received\n\r", 21);
 8001e98:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8001e9c:	2215      	movs	r2, #21
 8001e9e:	4913      	ldr	r1, [pc, #76]	; (8001eec <main+0x7a4>)
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f012 fe82 	bl	8014baa <strncpy>
	  			  int value = strtol(arg, NULL, 10);
 8001ea6:	220a      	movs	r2, #10
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	f8d7 06d8 	ldr.w	r0, [r7, #1752]	; 0x6d8
 8001eae:	f011 ffc7 	bl	8013e40 <strtol>
 8001eb2:	f8c7 06c8 	str.w	r0, [r7, #1736]	; 0x6c8
	  			  if(value){
 8001eb6:	f8d7 36c8 	ldr.w	r3, [r7, #1736]	; 0x6c8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8152 	beq.w	8002164 <main+0xa1c>
 8001ec0:	e016      	b.n	8001ef0 <main+0x7a8>
 8001ec2:	bf00      	nop
 8001ec4:	40020800 	.word	0x40020800
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	40021400 	.word	0x40021400
 8001ed4:	40021800 	.word	0x40021800
 8001ed8:	200007f0 	.word	0x200007f0
 8001edc:	080171d0 	.word	0x080171d0
 8001ee0:	080171d4 	.word	0x080171d4
 8001ee4:	080171dc 	.word	0x080171dc
 8001ee8:	20000864 	.word	0x20000864
 8001eec:	080171fc 	.word	0x080171fc
					// Convertir l'angle d'attaque en radians
					angle_of_attack = value * PI / 180.0;
 8001ef0:	f8d7 06c8 	ldr.w	r0, [r7, #1736]	; 0x6c8
 8001ef4:	f7fe fb36 	bl	8000564 <__aeabi_i2d>
 8001ef8:	a3b0      	add	r3, pc, #704	; (adr r3, 80021bc <main+0xa74>)
 8001efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efe:	f7fe fb9b 	bl	8000638 <__aeabi_dmul>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	4ba2      	ldr	r3, [pc, #648]	; (8002198 <main+0xa50>)
 8001f10:	f7fe fcbc 	bl	800088c <__aeabi_ddiv>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	49a0      	ldr	r1, [pc, #640]	; (800219c <main+0xa54>)
 8001f1a:	e9c1 2300 	strd	r2, r3, [r1]

					// Tableau pour stocker les déphasages
					double phase_shifts[8];

					// Calculer les déphasages
					calculate_phase_shifts(angle_of_attack, 0.03, antenna_distance, 8, phase_shifts);
 8001f1e:	4b9f      	ldr	r3, [pc, #636]	; (800219c <main+0xa54>)
 8001f20:	ed93 8b00 	vldr	d8, [r3]
 8001f24:	4b9e      	ldr	r3, [pc, #632]	; (80021a0 <main+0xa58>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fb2d 	bl	8000588 <__aeabi_f2d>
 8001f2e:	4604      	mov	r4, r0
 8001f30:	460d      	mov	r5, r1
 8001f32:	463b      	mov	r3, r7
 8001f34:	4619      	mov	r1, r3
 8001f36:	2008      	movs	r0, #8
 8001f38:	ec45 4b12 	vmov	d2, r4, r5
 8001f3c:	ed9f 1b94 	vldr	d1, [pc, #592]	; 8002190 <main+0xa48>
 8001f40:	eeb0 0a48 	vmov.f32	s0, s16
 8001f44:	eef0 0a68 	vmov.f32	s1, s17
 8001f48:	f7ff fb9e 	bl	8001688 <_Z22calculate_phase_shiftsdddiPd>
					pe44820_A.setAngle(phase_shifts[0]);
 8001f4c:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8001f50:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f7fe fe64 	bl	8000c28 <__aeabi_d2f>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f207 5314 	addw	r3, r7, #1300	; 0x514
 8001f66:	ee00 2a10 	vmov	s0, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fb46 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
					pe44820_B.setAngle(phase_shifts[1]);
 8001f70:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8001f74:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8001f78:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7fe fe52 	bl	8000c28 <__aeabi_d2f>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8001f8a:	ee00 2a10 	vmov	s0, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fb34 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_C.setAngle(phase_shifts[2]);
 8001f94:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8001f98:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8001f9c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f7fe fe40 	bl	8000c28 <__aeabi_d2f>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8001fae:	ee00 2a10 	vmov	s0, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fb22 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_D.setAngle(phase_shifts[3]);
 8001fb8:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8001fbc:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8001fc0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f7fe fe2e 	bl	8000c28 <__aeabi_d2f>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001fd2:	ee00 2a10 	vmov	s0, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fb10 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_E.setAngle(phase_shifts[4]);
 8001fdc:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8001fe0:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8001fe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	f7fe fe1c 	bl	8000c28 <__aeabi_d2f>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 8001ff6:	ee00 2a10 	vmov	s0, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fafe 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_F.setAngle(phase_shifts[5]);
 8002000:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8002004:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8002008:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fe0a 	bl	8000c28 <__aeabi_d2f>
 8002014:	4602      	mov	r2, r0
 8002016:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800201a:	ee00 2a10 	vmov	s0, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff faec 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_G.setAngle(phase_shifts[6]);
 8002024:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8002028:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 800202c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fdf8 	bl	8000c28 <__aeabi_d2f>
 8002038:	4602      	mov	r2, r0
 800203a:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800203e:	ee00 2a10 	vmov	s0, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fada 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_H.setAngle(phase_shifts[7]);
 8002048:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800204c:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8002050:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	f7fe fde6 	bl	8000c28 <__aeabi_d2f>
 800205c:	4602      	mov	r2, r0
 800205e:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002062:	ee00 2a10 	vmov	s0, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fac8 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe4312_A.setLevel(30);
 800206c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8002070:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff f853 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_B.setLevel(30);
 800207a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800207e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff f84c 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_C.setLevel(30);
 8002088:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800208c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff f845 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_D.setLevel(30);
 8002096:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800209a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f83e 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_E.setLevel(30);
 80020a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80020a8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff f837 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_F.setLevel(30);
 80020b2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80020b6:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff f830 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_G.setLevel(30);
 80020c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020c4:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff f829 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_H.setLevel(30);
 80020ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020d2:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f822 	bl	8001120 <_ZN6PE43xx8setLevelEf>
 80020dc:	e042      	b.n	8002164 <main+0xa1c>
	  			  }

	  		  }
	  		  else if(!strcmp(cmd, "ANT_DIS")){
 80020de:	4931      	ldr	r1, [pc, #196]	; (80021a4 <main+0xa5c>)
 80020e0:	f8d7 06dc 	ldr.w	r0, [r7, #1756]	; 0x6dc
 80020e4:	f7fe f884 	bl	80001f0 <strcmp>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d133      	bne.n	8002156 <main+0xa0e>
	  			  float value = strtof(arg, NULL);
 80020ee:	2100      	movs	r1, #0
 80020f0:	f8d7 06d8 	ldr.w	r0, [r7, #1752]	; 0x6d8
 80020f4:	f011 fdbc 	bl	8013c70 <strtof>
 80020f8:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80020fc:	ed83 0a00 	vstr	s0, [r3]
	  			  antenna_distance = value;
 8002100:	4a27      	ldr	r2, [pc, #156]	; (80021a0 <main+0xa58>)
 8002102:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6013      	str	r3, [r2, #0]
	  			strncpy(serial_output, "Antenna distance set to ", 25);
 800210a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800210e:	4a26      	ldr	r2, [pc, #152]	; (80021a8 <main+0xa60>)
 8002110:	461c      	mov	r4, r3
 8002112:	4615      	mov	r5, r2
 8002114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002118:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800211c:	c403      	stmia	r4!, {r0, r1}
 800211e:	7022      	strb	r2, [r4, #0]
	  			strncat(serial_output, arg, 5);
 8002120:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8002124:	2205      	movs	r2, #5
 8002126:	f8d7 16d8 	ldr.w	r1, [r7, #1752]	; 0x6d8
 800212a:	4618      	mov	r0, r3
 800212c:	f012 fd18 	bl	8014b60 <strncat>
	  			strncat(serial_output, " meter \n\r", 11);
 8002130:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe f8bb 	bl	80002b0 <strlen>
 800213a:	4603      	mov	r3, r0
 800213c:	461a      	mov	r2, r3
 800213e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8002142:	4413      	add	r3, r2
 8002144:	4919      	ldr	r1, [pc, #100]	; (80021ac <main+0xa64>)
 8002146:	461a      	mov	r2, r3
 8002148:	460b      	mov	r3, r1
 800214a:	cb03      	ldmia	r3!, {r0, r1}
 800214c:	6010      	str	r0, [r2, #0]
 800214e:	6051      	str	r1, [r2, #4]
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	8113      	strh	r3, [r2, #8]
 8002154:	e006      	b.n	8002164 <main+0xa1c>
	  		  }
	  		  else{
	  			  strncpy(serial_output, "Unknown Command\n\r", 20);
 8002156:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800215a:	2214      	movs	r2, #20
 800215c:	4914      	ldr	r1, [pc, #80]	; (80021b0 <main+0xa68>)
 800215e:	4618      	mov	r0, r3
 8002160:	f012 fd23 	bl	8014baa <strncpy>
	  		  }

	  		  HAL_UART_Transmit(&huart3, (const uint8_t*)serial_output, sizeof(serial_output), 10);
 8002164:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8002168:	230a      	movs	r3, #10
 800216a:	2264      	movs	r2, #100	; 0x64
 800216c:	4811      	ldr	r0, [pc, #68]	; (80021b4 <main+0xa6c>)
 800216e:	f003 fdbe 	bl	8005cee <HAL_UART_Transmit>
	  		  memset (serial_output, '\0', 100);
 8002172:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8002176:	2264      	movs	r2, #100	; 0x64
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f012 fce8 	bl	8014b50 <memset>
	  		  memset (input, '\0', 100);
 8002180:	2264      	movs	r2, #100	; 0x64
 8002182:	2100      	movs	r1, #0
 8002184:	480c      	ldr	r0, [pc, #48]	; (80021b8 <main+0xa70>)
 8002186:	f012 fce3 	bl	8014b50 <memset>
	  	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800218a:	e65a      	b.n	8001e42 <main+0x6fa>
 800218c:	f3af 8000 	nop.w
 8002190:	eb851eb8 	.word	0xeb851eb8
 8002194:	3f9eb851 	.word	0x3f9eb851
 8002198:	40668000 	.word	0x40668000
 800219c:	20000858 	.word	0x20000858
 80021a0:	20000860 	.word	0x20000860
 80021a4:	08017210 	.word	0x08017210
 80021a8:	08017218 	.word	0x08017218
 80021ac:	08017234 	.word	0x08017234
 80021b0:	08017240 	.word	0x08017240
 80021b4:	200002c4 	.word	0x200002c4
 80021b8:	200007f0 	.word	0x200007f0
 80021bc:	54442d18 	.word	0x54442d18
 80021c0:	400921fb 	.word	0x400921fb

080021c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b094      	sub	sp, #80	; 0x50
 80021c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ca:	f107 0320 	add.w	r3, r7, #32
 80021ce:	2230      	movs	r2, #48	; 0x30
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f012 fcbc 	bl	8014b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d8:	f107 030c 	add.w	r3, r7, #12
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e8:	2300      	movs	r3, #0
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <_Z18SystemClock_Configv+0xe0>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	4a2c      	ldr	r2, [pc, #176]	; (80022a4 <_Z18SystemClock_Configv+0xe0>)
 80021f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f6:	6413      	str	r3, [r2, #64]	; 0x40
 80021f8:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <_Z18SystemClock_Configv+0xe0>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002204:	2300      	movs	r3, #0
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <_Z18SystemClock_Configv+0xe4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a26      	ldr	r2, [pc, #152]	; (80022a8 <_Z18SystemClock_Configv+0xe4>)
 800220e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <_Z18SystemClock_Configv+0xe4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002220:	2301      	movs	r3, #1
 8002222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002224:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800222a:	2302      	movs	r3, #2
 800222c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800222e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002232:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002234:	2304      	movs	r3, #4
 8002236:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002238:	23a8      	movs	r3, #168	; 0xa8
 800223a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800223c:	2302      	movs	r3, #2
 800223e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002240:	2307      	movs	r3, #7
 8002242:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002244:	f107 0320 	add.w	r3, r7, #32
 8002248:	4618      	mov	r0, r3
 800224a:	f002 ffdf 	bl	800520c <HAL_RCC_OscConfig>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf14      	ite	ne
 8002254:	2301      	movne	r3, #1
 8002256:	2300      	moveq	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800225e:	f000 fa21 	bl	80026a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002262:	230f      	movs	r3, #15
 8002264:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002266:	2302      	movs	r3, #2
 8002268:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800226e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002272:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002278:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800227a:	f107 030c 	add.w	r3, r7, #12
 800227e:	2105      	movs	r1, #5
 8002280:	4618      	mov	r0, r3
 8002282:	f003 fa3b 	bl	80056fc <HAL_RCC_ClockConfig>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf14      	ite	ne
 800228c:	2301      	movne	r3, #1
 800228e:	2300      	moveq	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8002296:	f000 fa05 	bl	80026a4 <Error_Handler>
  }
}
 800229a:	bf00      	nop
 800229c:	3750      	adds	r7, #80	; 0x50
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40007000 	.word	0x40007000

080022ac <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <_ZL12MX_SPI1_Initv+0x70>)
 80022b2:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <_ZL12MX_SPI1_Initv+0x74>)
 80022b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <_ZL12MX_SPI1_Initv+0x70>)
 80022b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <_ZL12MX_SPI1_Initv+0x70>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <_ZL12MX_SPI1_Initv+0x70>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ca:	4b14      	ldr	r3, [pc, #80]	; (800231c <_ZL12MX_SPI1_Initv+0x70>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <_ZL12MX_SPI1_Initv+0x70>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <_ZL12MX_SPI1_Initv+0x70>)
 80022d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <_ZL12MX_SPI1_Initv+0x70>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022e4:	4b0d      	ldr	r3, [pc, #52]	; (800231c <_ZL12MX_SPI1_Initv+0x70>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022ea:	4b0c      	ldr	r3, [pc, #48]	; (800231c <_ZL12MX_SPI1_Initv+0x70>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <_ZL12MX_SPI1_Initv+0x70>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <_ZL12MX_SPI1_Initv+0x70>)
 80022f8:	220a      	movs	r2, #10
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022fc:	4807      	ldr	r0, [pc, #28]	; (800231c <_ZL12MX_SPI1_Initv+0x70>)
 80022fe:	f003 fc1d 	bl	8005b3c <HAL_SPI_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf14      	ite	ne
 8002308:	2301      	movne	r3, #1
 800230a:	2300      	moveq	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8002312:	f000 f9c7 	bl	80026a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000214 	.word	0x20000214
 8002320:	40013000 	.word	0x40013000

08002324 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <_ZL12MX_SPI2_Initv+0x70>)
 800232a:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <_ZL12MX_SPI2_Initv+0x74>)
 800232c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800232e:	4b19      	ldr	r3, [pc, #100]	; (8002394 <_ZL12MX_SPI2_Initv+0x70>)
 8002330:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002334:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <_ZL12MX_SPI2_Initv+0x70>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800233c:	4b15      	ldr	r3, [pc, #84]	; (8002394 <_ZL12MX_SPI2_Initv+0x70>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <_ZL12MX_SPI2_Initv+0x70>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <_ZL12MX_SPI2_Initv+0x70>)
 800234a:	2200      	movs	r2, #0
 800234c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <_ZL12MX_SPI2_Initv+0x70>)
 8002350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002354:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <_ZL12MX_SPI2_Initv+0x70>)
 8002358:	2200      	movs	r2, #0
 800235a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <_ZL12MX_SPI2_Initv+0x70>)
 800235e:	2200      	movs	r2, #0
 8002360:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <_ZL12MX_SPI2_Initv+0x70>)
 8002364:	2200      	movs	r2, #0
 8002366:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <_ZL12MX_SPI2_Initv+0x70>)
 800236a:	2200      	movs	r2, #0
 800236c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <_ZL12MX_SPI2_Initv+0x70>)
 8002370:	220a      	movs	r2, #10
 8002372:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002374:	4807      	ldr	r0, [pc, #28]	; (8002394 <_ZL12MX_SPI2_Initv+0x70>)
 8002376:	f003 fbe1 	bl	8005b3c <HAL_SPI_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf14      	ite	ne
 8002380:	2301      	movne	r3, #1
 8002382:	2300      	moveq	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 800238a:	f000 f98b 	bl	80026a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	2000026c 	.word	0x2000026c
 8002398:	40003800 	.word	0x40003800

0800239c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80023a2:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <_ZL19MX_USART3_UART_Initv+0x58>)
 80023a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023a6:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80023a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023b4:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80023c2:	220c      	movs	r2, #12
 80023c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023d2:	4807      	ldr	r0, [pc, #28]	; (80023f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80023d4:	f003 fc3b 	bl	8005c4e <HAL_UART_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	bf14      	ite	ne
 80023de:	2301      	movne	r3, #1
 80023e0:	2300      	moveq	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80023e8:	f000 f95c 	bl	80026a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200002c4 	.word	0x200002c4
 80023f4:	40004800 	.word	0x40004800

080023f8 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80023fc:	4b16      	ldr	r3, [pc, #88]	; (8002458 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80023fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002402:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8002406:	2204      	movs	r2, #4
 8002408:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800240c:	2202      	movs	r2, #2
 800240e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8002412:	2200      	movs	r2, #0
 8002414:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8002418:	2202      	movs	r2, #2
 800241a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800241e:	2201      	movs	r2, #1
 8002420:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8002424:	2200      	movs	r2, #0
 8002426:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800242a:	2200      	movs	r2, #0
 800242c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8002430:	2201      	movs	r2, #1
 8002432:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8002436:	2200      	movs	r2, #0
 8002438:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800243a:	4807      	ldr	r0, [pc, #28]	; (8002458 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800243c:	f002 fdd7 	bl	8004fee <HAL_PCD_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	bf14      	ite	ne
 8002446:	2301      	movne	r3, #1
 8002448:	2300      	moveq	r3, #0
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 8002450:	f000 f928 	bl	80026a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	2000030c 	.word	0x2000030c

0800245c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08e      	sub	sp, #56	; 0x38
 8002460:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	60da      	str	r2, [r3, #12]
 8002470:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]
 8002476:	4b84      	ldr	r3, [pc, #528]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a83      	ldr	r2, [pc, #524]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b81      	ldr	r3, [pc, #516]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	623b      	str	r3, [r7, #32]
 800248c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	4b7d      	ldr	r3, [pc, #500]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a7c      	ldr	r2, [pc, #496]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 8002498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b7a      	ldr	r3, [pc, #488]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	61fb      	str	r3, [r7, #28]
 80024a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	4b76      	ldr	r3, [pc, #472]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a75      	ldr	r2, [pc, #468]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b73      	ldr	r3, [pc, #460]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a6e      	ldr	r2, [pc, #440]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b6c      	ldr	r3, [pc, #432]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	4b68      	ldr	r3, [pc, #416]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a67      	ldr	r2, [pc, #412]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 80024ec:	f043 0320 	orr.w	r3, r3, #32
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b65      	ldr	r3, [pc, #404]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b61      	ldr	r3, [pc, #388]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a60      	ldr	r2, [pc, #384]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 8002508:	f043 0310 	orr.w	r3, r3, #16
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b5e      	ldr	r3, [pc, #376]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	4b5a      	ldr	r3, [pc, #360]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a59      	ldr	r2, [pc, #356]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 8002524:	f043 0308 	orr.w	r3, r3, #8
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b57      	ldr	r3, [pc, #348]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	4b53      	ldr	r3, [pc, #332]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a52      	ldr	r2, [pc, #328]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 8002540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b50      	ldr	r3, [pc, #320]	; (8002688 <_ZL12MX_GPIO_Initv+0x22c>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002552:	2200      	movs	r2, #0
 8002554:	f244 0181 	movw	r1, #16513	; 0x4081
 8002558:	484c      	ldr	r0, [pc, #304]	; (800268c <_ZL12MX_GPIO_Initv+0x230>)
 800255a:	f002 fd2f 	bl	8004fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LE_GPIO_Port, LE_Pin, GPIO_PIN_RESET);
 800255e:	2200      	movs	r2, #0
 8002560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002564:	484a      	ldr	r0, [pc, #296]	; (8002690 <_ZL12MX_GPIO_Initv+0x234>)
 8002566:	f002 fd29 	bl	8004fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SDI_Att_Pin|CLK_Att_Pin, GPIO_PIN_RESET);
 800256a:	2200      	movs	r2, #0
 800256c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8002570:	4848      	ldr	r0, [pc, #288]	; (8002694 <_ZL12MX_GPIO_Initv+0x238>)
 8002572:	f002 fd23 	bl	8004fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SI_Pin|CLK_Pin, GPIO_PIN_RESET);
 8002576:	2200      	movs	r2, #0
 8002578:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800257c:	4846      	ldr	r0, [pc, #280]	; (8002698 <_ZL12MX_GPIO_Initv+0x23c>)
 800257e:	f002 fd1d 	bl	8004fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002582:	2200      	movs	r2, #0
 8002584:	2140      	movs	r1, #64	; 0x40
 8002586:	4845      	ldr	r0, [pc, #276]	; (800269c <_ZL12MX_GPIO_Initv+0x240>)
 8002588:	f002 fd18 	bl	8004fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LE_Att_GPIO_Port, LE_Att_Pin, GPIO_PIN_RESET);
 800258c:	2200      	movs	r2, #0
 800258e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002592:	4843      	ldr	r0, [pc, #268]	; (80026a0 <_ZL12MX_GPIO_Initv+0x244>)
 8002594:	f002 fd12 	bl	8004fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800259e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80025a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ac:	4619      	mov	r1, r3
 80025ae:	483c      	ldr	r0, [pc, #240]	; (80026a0 <_ZL12MX_GPIO_Initv+0x244>)
 80025b0:	f002 fb58 	bl	8004c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80025b4:	f244 0381 	movw	r3, #16513	; 0x4081
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ba:	2301      	movs	r3, #1
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	2300      	movs	r3, #0
 80025c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ca:	4619      	mov	r1, r3
 80025cc:	482f      	ldr	r0, [pc, #188]	; (800268c <_ZL12MX_GPIO_Initv+0x230>)
 80025ce:	f002 fb49 	bl	8004c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LE_Pin */
  GPIO_InitStruct.Pin = LE_Pin;
 80025d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d8:	2301      	movs	r3, #1
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2300      	movs	r3, #0
 80025e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LE_GPIO_Port, &GPIO_InitStruct);
 80025e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e8:	4619      	mov	r1, r3
 80025ea:	4829      	ldr	r0, [pc, #164]	; (8002690 <_ZL12MX_GPIO_Initv+0x234>)
 80025ec:	f002 fb3a 	bl	8004c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDI_Att_Pin CLK_Att_Pin */
  GPIO_InitStruct.Pin = SDI_Att_Pin|CLK_Att_Pin;
 80025f0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2300      	movs	r3, #0
 8002600:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002606:	4619      	mov	r1, r3
 8002608:	4822      	ldr	r0, [pc, #136]	; (8002694 <_ZL12MX_GPIO_Initv+0x238>)
 800260a:	f002 fb2b 	bl	8004c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SI_Pin CLK_Pin */
  GPIO_InitStruct.Pin = SI_Pin|CLK_Pin;
 800260e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002614:	2301      	movs	r3, #1
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002624:	4619      	mov	r1, r3
 8002626:	481c      	ldr	r0, [pc, #112]	; (8002698 <_ZL12MX_GPIO_Initv+0x23c>)
 8002628:	f002 fb1c 	bl	8004c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800262c:	2340      	movs	r3, #64	; 0x40
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002630:	2301      	movs	r3, #1
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2300      	movs	r3, #0
 800263a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800263c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002640:	4619      	mov	r1, r3
 8002642:	4816      	ldr	r0, [pc, #88]	; (800269c <_ZL12MX_GPIO_Initv+0x240>)
 8002644:	f002 fb0e 	bl	8004c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800264c:	2300      	movs	r3, #0
 800264e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002658:	4619      	mov	r1, r3
 800265a:	4810      	ldr	r0, [pc, #64]	; (800269c <_ZL12MX_GPIO_Initv+0x240>)
 800265c:	f002 fb02 	bl	8004c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LE_Att_Pin */
  GPIO_InitStruct.Pin = LE_Att_Pin;
 8002660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002666:	2301      	movs	r3, #1
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LE_Att_GPIO_Port, &GPIO_InitStruct);
 8002672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002676:	4619      	mov	r1, r3
 8002678:	4809      	ldr	r0, [pc, #36]	; (80026a0 <_ZL12MX_GPIO_Initv+0x244>)
 800267a:	f002 faf3 	bl	8004c64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800267e:	bf00      	nop
 8002680:	3738      	adds	r7, #56	; 0x38
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800
 800268c:	40020400 	.word	0x40020400
 8002690:	40021400 	.word	0x40021400
 8002694:	40021000 	.word	0x40021000
 8002698:	40020c00 	.word	0x40020c00
 800269c:	40021800 	.word	0x40021800
 80026a0:	40020800 	.word	0x40020800

080026a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026a8:	b672      	cpsid	i
}
 80026aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026ac:	e7fe      	b.n	80026ac <Error_Handler+0x8>
	...

080026b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_MspInit+0x4c>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a0f      	ldr	r2, [pc, #60]	; (80026fc <HAL_MspInit+0x4c>)
 80026c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <HAL_MspInit+0x4c>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_MspInit+0x4c>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a08      	ldr	r2, [pc, #32]	; (80026fc <HAL_MspInit+0x4c>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_MspInit+0x4c>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800

08002700 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08e      	sub	sp, #56	; 0x38
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a50      	ldr	r2, [pc, #320]	; (8002860 <HAL_SPI_MspInit+0x160>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d14a      	bne.n	80027b8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
 8002726:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <HAL_SPI_MspInit+0x164>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	4a4e      	ldr	r2, [pc, #312]	; (8002864 <HAL_SPI_MspInit+0x164>)
 800272c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002730:	6453      	str	r3, [r2, #68]	; 0x44
 8002732:	4b4c      	ldr	r3, [pc, #304]	; (8002864 <HAL_SPI_MspInit+0x164>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800273a:	623b      	str	r3, [r7, #32]
 800273c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	4b48      	ldr	r3, [pc, #288]	; (8002864 <HAL_SPI_MspInit+0x164>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a47      	ldr	r2, [pc, #284]	; (8002864 <HAL_SPI_MspInit+0x164>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b45      	ldr	r3, [pc, #276]	; (8002864 <HAL_SPI_MspInit+0x164>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	4b41      	ldr	r3, [pc, #260]	; (8002864 <HAL_SPI_MspInit+0x164>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a40      	ldr	r2, [pc, #256]	; (8002864 <HAL_SPI_MspInit+0x164>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <HAL_SPI_MspInit+0x164>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002776:	2320      	movs	r3, #32
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002782:	2303      	movs	r3, #3
 8002784:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002786:	2305      	movs	r3, #5
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800278e:	4619      	mov	r1, r3
 8002790:	4835      	ldr	r0, [pc, #212]	; (8002868 <HAL_SPI_MspInit+0x168>)
 8002792:	f002 fa67 	bl	8004c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002796:	2320      	movs	r3, #32
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a2:	2303      	movs	r3, #3
 80027a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027a6:	2305      	movs	r3, #5
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ae:	4619      	mov	r1, r3
 80027b0:	482e      	ldr	r0, [pc, #184]	; (800286c <HAL_SPI_MspInit+0x16c>)
 80027b2:	f002 fa57 	bl	8004c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80027b6:	e04f      	b.n	8002858 <HAL_SPI_MspInit+0x158>
  else if(hspi->Instance==SPI2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a2c      	ldr	r2, [pc, #176]	; (8002870 <HAL_SPI_MspInit+0x170>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d14a      	bne.n	8002858 <HAL_SPI_MspInit+0x158>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	4b27      	ldr	r3, [pc, #156]	; (8002864 <HAL_SPI_MspInit+0x164>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	4a26      	ldr	r2, [pc, #152]	; (8002864 <HAL_SPI_MspInit+0x164>)
 80027cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d0:	6413      	str	r3, [r2, #64]	; 0x40
 80027d2:	4b24      	ldr	r3, [pc, #144]	; (8002864 <HAL_SPI_MspInit+0x164>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <HAL_SPI_MspInit+0x164>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <HAL_SPI_MspInit+0x164>)
 80027e8:	f043 0304 	orr.w	r3, r3, #4
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <HAL_SPI_MspInit+0x164>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_SPI_MspInit+0x164>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a18      	ldr	r2, [pc, #96]	; (8002864 <HAL_SPI_MspInit+0x164>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b16      	ldr	r3, [pc, #88]	; (8002864 <HAL_SPI_MspInit+0x164>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002816:	2308      	movs	r3, #8
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002822:	2303      	movs	r3, #3
 8002824:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002826:	2305      	movs	r3, #5
 8002828:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800282a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282e:	4619      	mov	r1, r3
 8002830:	4810      	ldr	r0, [pc, #64]	; (8002874 <HAL_SPI_MspInit+0x174>)
 8002832:	f002 fa17 	bl	8004c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002844:	2303      	movs	r3, #3
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002848:	2305      	movs	r3, #5
 800284a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002850:	4619      	mov	r1, r3
 8002852:	4806      	ldr	r0, [pc, #24]	; (800286c <HAL_SPI_MspInit+0x16c>)
 8002854:	f002 fa06 	bl	8004c64 <HAL_GPIO_Init>
}
 8002858:	bf00      	nop
 800285a:	3738      	adds	r7, #56	; 0x38
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40013000 	.word	0x40013000
 8002864:	40023800 	.word	0x40023800
 8002868:	40020000 	.word	0x40020000
 800286c:	40020400 	.word	0x40020400
 8002870:	40003800 	.word	0x40003800
 8002874:	40020800 	.word	0x40020800

08002878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a19      	ldr	r2, [pc, #100]	; (80028fc <HAL_UART_MspInit+0x84>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d12c      	bne.n	80028f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	4b18      	ldr	r3, [pc, #96]	; (8002900 <HAL_UART_MspInit+0x88>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a17      	ldr	r2, [pc, #92]	; (8002900 <HAL_UART_MspInit+0x88>)
 80028a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_UART_MspInit+0x88>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_UART_MspInit+0x88>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a10      	ldr	r2, [pc, #64]	; (8002900 <HAL_UART_MspInit+0x88>)
 80028c0:	f043 0308 	orr.w	r3, r3, #8
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <HAL_UART_MspInit+0x88>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80028d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e0:	2303      	movs	r3, #3
 80028e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028e4:	2307      	movs	r3, #7
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4619      	mov	r1, r3
 80028ee:	4805      	ldr	r0, [pc, #20]	; (8002904 <HAL_UART_MspInit+0x8c>)
 80028f0:	f002 f9b8 	bl	8004c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028f4:	bf00      	nop
 80028f6:	3728      	adds	r7, #40	; 0x28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40004800 	.word	0x40004800
 8002900:	40023800 	.word	0x40023800
 8002904:	40020c00 	.word	0x40020c00

08002908 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	; 0x28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002928:	d13f      	bne.n	80029aa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <HAL_PCD_MspInit+0xac>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a20      	ldr	r2, [pc, #128]	; (80029b4 <HAL_PCD_MspInit+0xac>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <HAL_PCD_MspInit+0xac>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002946:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800294a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002958:	230a      	movs	r3, #10
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	4619      	mov	r1, r3
 8002962:	4815      	ldr	r0, [pc, #84]	; (80029b8 <HAL_PCD_MspInit+0xb0>)
 8002964:	f002 f97e 	bl	8004c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800296c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	480e      	ldr	r0, [pc, #56]	; (80029b8 <HAL_PCD_MspInit+0xb0>)
 800297e:	f002 f971 	bl	8004c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <HAL_PCD_MspInit+0xac>)
 8002984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <HAL_PCD_MspInit+0xac>)
 8002988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298c:	6353      	str	r3, [r2, #52]	; 0x34
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_PCD_MspInit+0xac>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <HAL_PCD_MspInit+0xac>)
 8002998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800299c:	6453      	str	r3, [r2, #68]	; 0x44
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_PCD_MspInit+0xac>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80029aa:	bf00      	nop
 80029ac:	3728      	adds	r7, #40	; 0x28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40020000 	.word	0x40020000

080029bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029c0:	e7fe      	b.n	80029c0 <NMI_Handler+0x4>

080029c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c6:	e7fe      	b.n	80029c6 <HardFault_Handler+0x4>

080029c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029cc:	e7fe      	b.n	80029cc <MemManage_Handler+0x4>

080029ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d2:	e7fe      	b.n	80029d2 <BusFault_Handler+0x4>

080029d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d8:	e7fe      	b.n	80029d8 <UsageFault_Handler+0x4>

080029da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a08:	f000 fde0 	bl	80035cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <ETH_IRQHandler+0x10>)
 8002a16:	f001 fa3d 	bl	8003e94 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	2000567c 	.word	0x2000567c

08002a24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return 1;
 8002a28:	2301      	movs	r3, #1
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <_kill>:

int _kill(int pid, int sig)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a3e:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <_kill+0x20>)
 8002a40:	2216      	movs	r2, #22
 8002a42:	601a      	str	r2, [r3, #0]
  return -1;
 8002a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	20000b3c 	.word	0x20000b3c

08002a58 <_exit>:

void _exit (int status)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a60:	f04f 31ff 	mov.w	r1, #4294967295
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff ffe5 	bl	8002a34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a6a:	e7fe      	b.n	8002a6a <_exit+0x12>

08002a6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	e00a      	b.n	8002a94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a7e:	f3af 8000 	nop.w
 8002a82:	4601      	mov	r1, r0
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	60ba      	str	r2, [r7, #8]
 8002a8a:	b2ca      	uxtb	r2, r1
 8002a8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3301      	adds	r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	dbf0      	blt.n	8002a7e <_read+0x12>
  }

  return len;
 8002a9c:	687b      	ldr	r3, [r7, #4]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b086      	sub	sp, #24
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	e009      	b.n	8002acc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	60ba      	str	r2, [r7, #8]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	dbf1      	blt.n	8002ab8 <_write+0x12>
  }
  return len;
 8002ad4:	687b      	ldr	r3, [r7, #4]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <_close>:

int _close(int file)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b06:	605a      	str	r2, [r3, #4]
  return 0;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <_isatty>:

int _isatty(int file)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b1e:	2301      	movs	r3, #1
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b50:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <_sbrk+0x5c>)
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <_sbrk+0x60>)
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b5c:	4b13      	ldr	r3, [pc, #76]	; (8002bac <_sbrk+0x64>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d102      	bne.n	8002b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <_sbrk+0x64>)
 8002b66:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <_sbrk+0x68>)
 8002b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <_sbrk+0x64>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d205      	bcs.n	8002b84 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <_sbrk+0x6c>)
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b82:	e009      	b.n	8002b98 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <_sbrk+0x64>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <_sbrk+0x64>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	4a06      	ldr	r2, [pc, #24]	; (8002bac <_sbrk+0x64>)
 8002b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b96:	68fb      	ldr	r3, [r7, #12]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	20030000 	.word	0x20030000
 8002ba8:	00000400 	.word	0x00000400
 8002bac:	20000868 	.word	0x20000868
 8002bb0:	2000ae88 	.word	0x2000ae88
 8002bb4:	20000b3c 	.word	0x20000b3c

08002bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <SystemInit+0x20>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	4a05      	ldr	r2, [pc, #20]	; (8002bd8 <SystemInit+0x20>)
 8002bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <_Z23tcp_server_send_messageP7tcp_pcbPKc>:
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es);
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es);


/* Function to send a message over the TCP connection */
void tcp_server_send_message(struct tcp_pcb *tpcb, const char *message) {
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
    struct pbuf *p;
    err_t wr_err;

    /* Allocate pbuf for sending the message */
    p = pbuf_alloc(PBUF_TRANSPORT, strlen(message), PBUF_POOL);
 8002be6:	6838      	ldr	r0, [r7, #0]
 8002be8:	f7fd fb62 	bl	80002b0 <strlen>
 8002bec:	4603      	mov	r3, r0
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	2036      	movs	r0, #54	; 0x36
 8002bf8:	f005 fcc2 	bl	8008580 <pbuf_alloc>
 8002bfc:	60f8      	str	r0, [r7, #12]
    if (p != NULL) {
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d026      	beq.n	8002c52 <_Z23tcp_server_send_messageP7tcp_pcbPKc+0x76>
        /* Copy the message into the pbuf payload */
        memcpy(p->payload, message, strlen(message));
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685c      	ldr	r4, [r3, #4]
 8002c08:	6838      	ldr	r0, [r7, #0]
 8002c0a:	f7fd fb51 	bl	80002b0 <strlen>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	461a      	mov	r2, r3
 8002c12:	6839      	ldr	r1, [r7, #0]
 8002c14:	4620      	mov	r0, r4
 8002c16:	f012 f8be 	bl	8014d96 <memcpy>

        /* Send the message */
        wr_err = tcp_write(tpcb, p->payload, p->len, TCP_WRITE_FLAG_COPY);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6859      	ldr	r1, [r3, #4]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	895a      	ldrh	r2, [r3, #10]
 8002c22:	2301      	movs	r3, #1
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f00a fd21 	bl	800d66c <tcp_write>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	72fb      	strb	r3, [r7, #11]
        if (wr_err == ERR_OK) {
 8002c2e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <_Z23tcp_server_send_messageP7tcp_pcbPKc+0x62>
            tcp_output(tpcb);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f00b fb02 	bl	800e240 <tcp_output>
 8002c3c:	e005      	b.n	8002c4a <_Z23tcp_server_send_messageP7tcp_pcbPKc+0x6e>
        } else {
            /* Handle the error */
            printf("Error sending message: %d\n", wr_err);
 8002c3e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002c42:	4619      	mov	r1, r3
 8002c44:	4806      	ldr	r0, [pc, #24]	; (8002c60 <_Z23tcp_server_send_messageP7tcp_pcbPKc+0x84>)
 8002c46:	f011 fe2d 	bl	80148a4 <iprintf>
        }

        /* Free the pbuf */
        pbuf_free(p);
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f005 ff7c 	bl	8008b48 <pbuf_free>
    } else {
        /* Handle the error */
        printf("Error allocating pbuf\n");
    }
}
 8002c50:	e002      	b.n	8002c58 <_Z23tcp_server_send_messageP7tcp_pcbPKc+0x7c>
        printf("Error allocating pbuf\n");
 8002c52:	4804      	ldr	r0, [pc, #16]	; (8002c64 <_Z23tcp_server_send_messageP7tcp_pcbPKc+0x88>)
 8002c54:	f011 fe8c 	bl	8014970 <puts>
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd90      	pop	{r4, r7, pc}
 8002c60:	08017254 	.word	0x08017254
 8002c64:	08017270 	.word	0x08017270

08002c68 <_Z15tcp_server_initv>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

struct tcp_pcb* tcp_server_init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8002c6e:	f007 fdb3 	bl	800a7d8 <tcp_new>
 8002c72:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 110);
 8002c74:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <_Z15tcp_server_initv+0x50>)
 8002c76:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 7);
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	2207      	movs	r2, #7
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f006 fd06 	bl	8009690 <tcp_bind>
 8002c84:	4603      	mov	r3, r0
 8002c86:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8002c88:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <_Z15tcp_server_initv+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8002c90:	21ff      	movs	r1, #255	; 0xff
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f006 fdb4 	bl	8009800 <tcp_listen_with_backlog>
 8002c98:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8002c9a:	4908      	ldr	r1, [pc, #32]	; (8002cbc <_Z15tcp_server_initv+0x54>)
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f007 fe1b 	bl	800a8d8 <tcp_accept>
 8002ca2:	e003      	b.n	8002cac <_Z15tcp_server_initv+0x44>
	}
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
 8002ca4:	68f9      	ldr	r1, [r7, #12]
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	f005 f8d8 	bl	8007e5c <memp_free>
	}
	return tpcb;
 8002cac:	68fb      	ldr	r3, [r7, #12]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	6e01a8c0 	.word	0x6e01a8c0
 8002cbc:	08002cc1 	.word	0x08002cc1

08002cc0 <_ZL17tcp_server_acceptPvP7tcp_pcba>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8002cce:	2101      	movs	r1, #1
 8002cd0:	68b8      	ldr	r0, [r7, #8]
 8002cd2:	f007 fb8f 	bl	800a3f4 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8002cd6:	200c      	movs	r0, #12
 8002cd8:	f004 fec0 	bl	8007a5c <mem_malloc>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4a1e      	ldr	r2, [pc, #120]	; (8002d58 <_ZL17tcp_server_acceptPvP7tcp_pcba+0x98>)
 8002ce0:	6013      	str	r3, [r2, #0]
  if (es != NULL)
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <_ZL17tcp_server_acceptPvP7tcp_pcba+0x98>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d028      	beq.n	8002d3c <_ZL17tcp_server_acceptPvP7tcp_pcba+0x7c>
  {
    es->state = ES_ACCEPTED;
 8002cea:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <_ZL17tcp_server_acceptPvP7tcp_pcba+0x98>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8002cf2:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <_ZL17tcp_server_acceptPvP7tcp_pcba+0x98>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8002cfa:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <_ZL17tcp_server_acceptPvP7tcp_pcba+0x98>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <_ZL17tcp_server_acceptPvP7tcp_pcba+0x98>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]

    server_pcb = newpcb;
 8002d0a:	4a14      	ldr	r2, [pc, #80]	; (8002d5c <_ZL17tcp_server_acceptPvP7tcp_pcba+0x9c>)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	6013      	str	r3, [r2, #0]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <_ZL17tcp_server_acceptPvP7tcp_pcba+0x98>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4619      	mov	r1, r3
 8002d16:	68b8      	ldr	r0, [r7, #8]
 8002d18:	f007 fd66 	bl	800a7e8 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8002d1c:	4910      	ldr	r1, [pc, #64]	; (8002d60 <_ZL17tcp_server_acceptPvP7tcp_pcba+0xa0>)
 8002d1e:	68b8      	ldr	r0, [r7, #8]
 8002d20:	f007 fd74 	bl	800a80c <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8002d24:	490f      	ldr	r1, [pc, #60]	; (8002d64 <_ZL17tcp_server_acceptPvP7tcp_pcba+0xa4>)
 8002d26:	68b8      	ldr	r0, [r7, #8]
 8002d28:	f007 fdb4 	bl	800a894 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	490e      	ldr	r1, [pc, #56]	; (8002d68 <_ZL17tcp_server_acceptPvP7tcp_pcba+0xa8>)
 8002d30:	68b8      	ldr	r0, [r7, #8]
 8002d32:	f007 fde9 	bl	800a908 <tcp_poll>

    ret_err = ERR_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	75fb      	strb	r3, [r7, #23]
 8002d3a:	e007      	b.n	8002d4c <_ZL17tcp_server_acceptPvP7tcp_pcba+0x8c>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <_ZL17tcp_server_acceptPvP7tcp_pcba+0x98>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4619      	mov	r1, r3
 8002d42:	68b8      	ldr	r0, [r7, #8]
 8002d44:	f000 f99f 	bl	8003086 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct>
    /* return memory error */
    ret_err = ERR_MEM;
 8002d48:	23ff      	movs	r3, #255	; 0xff
 8002d4a:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8002d4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	2000086c 	.word	0x2000086c
 8002d5c:	20000864 	.word	0x20000864
 8002d60:	08002d6d 	.word	0x08002d6d
 8002d64:	08002ed9 	.word	0x08002ed9
 8002d68:	08002f09 	.word	0x08002f09

08002d6c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	70fb      	strb	r3, [r7, #3]

  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d105      	bne.n	8002d8c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x20>
 8002d80:	4b4f      	ldr	r3, [pc, #316]	; (8002ec0 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x154>)
 8002d82:	22d3      	movs	r2, #211	; 0xd3
 8002d84:	494f      	ldr	r1, [pc, #316]	; (8002ec4 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x158>)
 8002d86:	4850      	ldr	r0, [pc, #320]	; (8002ec8 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x15c>)
 8002d88:	f011 fd8c 	bl	80148a4 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8002d8c:	4a4f      	ldr	r2, [pc, #316]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6013      	str	r3, [r2, #0]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d11c      	bne.n	8002dd2 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x66>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8002d98:	4b4c      	ldr	r3, [pc, #304]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8002da0:	4b4a      	ldr	r3, [pc, #296]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x4c>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8002daa:	4b48      	ldr	r3, [pc, #288]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4619      	mov	r1, r3
 8002db0:	68b8      	ldr	r0, [r7, #8]
 8002db2:	f000 f968 	bl	8003086 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct>
 8002db6:	e009      	b.n	8002dcc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x60>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8002db8:	4945      	ldr	r1, [pc, #276]	; (8002ed0 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x164>)
 8002dba:	68b8      	ldr	r0, [r7, #8]
 8002dbc:	f007 fd48 	bl	800a850 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8002dc0:	4b42      	ldr	r3, [pc, #264]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	68b8      	ldr	r0, [r7, #8]
 8002dc8:	f000 f90a 	bl	8002fe0 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct>
    }
    ret_err = ERR_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	75fb      	strb	r3, [r7, #23]
 8002dd0:	e070      	b.n	8002eb4 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x148>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8002dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00c      	beq.n	8002df4 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x88>
  {
    /* free received pbuf*/
    if (p != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d006      	beq.n	8002dee <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x82>
    {
      es->p = NULL;
 8002de0:	4b3a      	ldr	r3, [pc, #232]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f005 fead 	bl	8008b48 <pbuf_free>
    }
    ret_err = err;
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	75fb      	strb	r3, [r7, #23]
 8002df2:	e05f      	b.n	8002eb4 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x148>
  }
  else if(es->state == ES_ACCEPTED)
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d115      	bne.n	8002e2a <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0xbe>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8002dfe:	4b33      	ldr	r3, [pc, #204]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2202      	movs	r2, #2
 8002e04:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8002e06:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8002e0e:	4930      	ldr	r1, [pc, #192]	; (8002ed0 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x164>)
 8002e10:	68b8      	ldr	r0, [r7, #8]
 8002e12:	f007 fd1d 	bl	800a850 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es, "Okay");
 8002e16:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a2e      	ldr	r2, [pc, #184]	; (8002ed4 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x168>)
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	68b8      	ldr	r0, [r7, #8]
 8002e20:	f000 f958 	bl	80030d4 <_Z17tcp_server_handleP7tcp_pcbP17tcp_server_structPKc>

    ret_err = ERR_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	75fb      	strb	r3, [r7, #23]
 8002e28:	e044      	b.n	8002eb4 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x148>
  }
  else if (es->state == ES_RECEIVED)
 8002e2a:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d11b      	bne.n	8002e6c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x100>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8002e34:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10b      	bne.n	8002e56 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0xea>
    {
      es->p = p;
 8002e3e:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es, "Okay");
 8002e46:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a22      	ldr	r2, [pc, #136]	; (8002ed4 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x168>)
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	68b8      	ldr	r0, [r7, #8]
 8002e50:	f000 f940 	bl	80030d4 <_Z17tcp_server_handleP7tcp_pcbP17tcp_server_structPKc>
 8002e54:	e007      	b.n	8002e66 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0xfa>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8002e56:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	613b      	str	r3, [r7, #16]
      pbuf_chain(ptr,p);
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	6938      	ldr	r0, [r7, #16]
 8002e62:	f005 ff89 	bl	8008d78 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	75fb      	strb	r3, [r7, #23]
 8002e6a:	e023      	b.n	8002eb4 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x148>
  }
  else if(es->state == ES_CLOSING)
 8002e6c:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d10f      	bne.n	8002e96 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x12a>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	891b      	ldrh	r3, [r3, #8]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	68b8      	ldr	r0, [r7, #8]
 8002e7e:	f006 fdd5 	bl	8009a2c <tcp_recved>
    es->p = NULL;
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2200      	movs	r2, #0
 8002e88:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f005 fe5c 	bl	8008b48 <pbuf_free>
    ret_err = ERR_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	75fb      	strb	r3, [r7, #23]
 8002e94:	e00e      	b.n	8002eb4 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x148>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	891b      	ldrh	r3, [r3, #8]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	68b8      	ldr	r0, [r7, #8]
 8002e9e:	f006 fdc5 	bl	8009a2c <tcp_recved>
    es->p = NULL;
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f005 fe4c 	bl	8008b48 <pbuf_free>
    ret_err = ERR_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8002eb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	08017288 	.word	0x08017288
 8002ec4:	080172a8 	.word	0x080172a8
 8002ec8:	080172b4 	.word	0x080172b4
 8002ecc:	2000086c 	.word	0x2000086c
 8002ed0:	08002f7d 	.word	0x08002f7d
 8002ed4:	080172dc 	.word	0x080172dc

08002ed8 <_ZL16tcp_server_errorPva>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]


  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8002ee4:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <_ZL16tcp_server_errorPva+0x2c>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6013      	str	r3, [r2, #0]
  if (es != NULL)
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <_ZL16tcp_server_errorPva+0x2c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d004      	beq.n	8002efc <_ZL16tcp_server_errorPva+0x24>
  {
    /*  free es structure */
    mem_free(es);
 8002ef2:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <_ZL16tcp_server_errorPva+0x2c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f004 fc4a 	bl	8007790 <mem_free>
  }
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	2000086c 	.word	0x2000086c

08002f08 <_ZL15tcp_server_pollPvP7tcp_pcb>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  err_t ret_err;


  es = (struct tcp_server_struct *)arg;
 8002f12:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <_ZL15tcp_server_pollPvP7tcp_pcb+0x6c>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6013      	str	r3, [r2, #0]
  if (es != NULL)
 8002f18:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <_ZL15tcp_server_pollPvP7tcp_pcb+0x6c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01d      	beq.n	8002f5c <_ZL15tcp_server_pollPvP7tcp_pcb+0x54>
  {
    if (es->p != NULL)
 8002f20:	4b14      	ldr	r3, [pc, #80]	; (8002f74 <_ZL15tcp_server_pollPvP7tcp_pcb+0x6c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <_ZL15tcp_server_pollPvP7tcp_pcb+0x38>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8002f2a:	4913      	ldr	r1, [pc, #76]	; (8002f78 <_ZL15tcp_server_pollPvP7tcp_pcb+0x70>)
 8002f2c:	6838      	ldr	r0, [r7, #0]
 8002f2e:	f007 fc8f 	bl	800a850 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8002f32:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <_ZL15tcp_server_pollPvP7tcp_pcb+0x6c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4619      	mov	r1, r3
 8002f38:	6838      	ldr	r0, [r7, #0]
 8002f3a:	f000 f851 	bl	8002fe0 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct>
 8002f3e:	e00a      	b.n	8002f56 <_ZL15tcp_server_pollPvP7tcp_pcb+0x4e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <_ZL15tcp_server_pollPvP7tcp_pcb+0x6c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d105      	bne.n	8002f56 <_ZL15tcp_server_pollPvP7tcp_pcb+0x4e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <_ZL15tcp_server_pollPvP7tcp_pcb+0x6c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	6838      	ldr	r0, [r7, #0]
 8002f52:	f000 f898 	bl	8003086 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct>
      }
    }
    ret_err = ERR_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
 8002f5a:	e004      	b.n	8002f66 <_ZL15tcp_server_pollPvP7tcp_pcb+0x5e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8002f5c:	6838      	ldr	r0, [r7, #0]
 8002f5e:	f006 fb8b 	bl	8009678 <tcp_abort>
    ret_err = ERR_ABRT;
 8002f62:	23f3      	movs	r3, #243	; 0xf3
 8002f64:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	2000086c 	.word	0x2000086c
 8002f78:	08002f7d 	.word	0x08002f7d

08002f7c <_ZL15tcp_server_sentPvP7tcp_pcbt>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	4613      	mov	r3, r2
 8002f88:	80fb      	strh	r3, [r7, #6]


  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8002f8a:	4a13      	ldr	r2, [pc, #76]	; (8002fd8 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x5c>)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6013      	str	r3, [r2, #0]
  es->retries = 0;
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x5c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2200      	movs	r2, #0
 8002f96:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x5c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x3c>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8002fa2:	490e      	ldr	r1, [pc, #56]	; (8002fdc <_ZL15tcp_server_sentPvP7tcp_pcbt+0x60>)
 8002fa4:	68b8      	ldr	r0, [r7, #8]
 8002fa6:	f007 fc53 	bl	800a850 <tcp_sent>
    tcp_server_send(tpcb, es);
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x5c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	68b8      	ldr	r0, [r7, #8]
 8002fb2:	f000 f815 	bl	8002fe0 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct>
 8002fb6:	e00a      	b.n	8002fce <_ZL15tcp_server_sentPvP7tcp_pcbt+0x52>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8002fb8:	4b07      	ldr	r3, [pc, #28]	; (8002fd8 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x5c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d105      	bne.n	8002fce <_ZL15tcp_server_sentPvP7tcp_pcbt+0x52>
      tcp_server_connection_close(tpcb, es);
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x5c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	68b8      	ldr	r0, [r7, #8]
 8002fca:	f000 f85c 	bl	8003086 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct>
  }
  return ERR_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	2000086c 	.word	0x2000086c
 8002fdc:	08002f7d 	.word	0x08002f7d

08002fe0 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8002fee:	e036      	b.n	800305e <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	6859      	ldr	r1, [r3, #4]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	895a      	ldrh	r2, [r3, #10]
 8002ffe:	2301      	movs	r3, #1
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f00a fb33 	bl	800d66c <tcp_write>
 8003006:	4603      	mov	r3, r0
 8003008:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 800300a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d11d      	bne.n	800304e <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	895b      	ldrh	r3, [r3, #10]
 8003016:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d004      	beq.n	8003032 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f005 fe2b 	bl	8008c88 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8003032:	6938      	ldr	r0, [r7, #16]
 8003034:	f005 fd88 	bl	8008b48 <pbuf_free>
 8003038:	4603      	mov	r3, r0
 800303a:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 800303c:	7b7b      	ldrb	r3, [r7, #13]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f7      	beq.n	8003032 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8003042:	89fb      	ldrh	r3, [r7, #14]
 8003044:	4619      	mov	r1, r3
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f006 fcf0 	bl	8009a2c <tcp_recved>
 800304c:	e007      	b.n	800305e <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x7e>
   }
   else if(wr_err == ERR_MEM)
 800304e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d102      	bne.n	800305e <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	609a      	str	r2, [r3, #8]
         (es->p != NULL) &&
 800305e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10b      	bne.n	800307e <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x9e>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 800306a:	2b00      	cmp	r3, #0
 800306c:	d007      	beq.n	800307e <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	895a      	ldrh	r2, [r3, #10]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 800307a:	429a      	cmp	r2, r3
 800307c:	d9b8      	bls.n	8002ff0 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 800307e:	bf00      	nop
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8003090:	2100      	movs	r1, #0
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f007 fba8 	bl	800a7e8 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8003098:	2100      	movs	r1, #0
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f007 fbd8 	bl	800a850 <tcp_sent>
  tcp_recv(tpcb, NULL);
 80030a0:	2100      	movs	r1, #0
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f007 fbb2 	bl	800a80c <tcp_recv>
  tcp_err(tpcb, NULL);
 80030a8:	2100      	movs	r1, #0
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f007 fbf2 	bl	800a894 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 80030b0:	2200      	movs	r2, #0
 80030b2:	2100      	movs	r1, #0
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f007 fc27 	bl	800a908 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct+0x40>
  {
    mem_free(es);
 80030c0:	6838      	ldr	r0, [r7, #0]
 80030c2:	f004 fb65 	bl	8007790 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f006 f9ec 	bl	80094a4 <tcp_close>
}
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_Z17tcp_server_handleP7tcp_pcbP17tcp_server_structPKc>:

/* Handle the incoming TCP Data */

void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es, const char* ans)
{
 80030d4:	b5b0      	push	{r4, r5, r7, lr}
 80030d6:	b0a2      	sub	sp, #136	; 0x88
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
	struct tcp_server_struct *esTx;

    // Allouer de la mémoire pour esTx
    esTx = (struct tcp_server_struct *)malloc(sizeof(struct tcp_server_struct));
 80030e0:	200c      	movs	r0, #12
 80030e2:	f00f febd 	bl	8012e60 <malloc>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (esTx == NULL) {
 80030ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 8086 	beq.w	8003202 <_Z17tcp_server_handleP7tcp_pcbP17tcp_server_structPKc+0x12e>
        // Gérer l'échec de l'allocation mémoire
        return;
    }

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	67bb      	str	r3, [r7, #120]	; 0x78
	uint16_t inPort = tpcb->remote_port;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8b1b      	ldrh	r3, [r3, #24]
 8003100:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8003104:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003108:	4618      	mov	r0, r3
 800310a:	f00d fec5 	bl	8010e98 <ip4addr_ntoa>
 800310e:	67f8      	str	r0, [r7, #124]	; 0x7c

	esTx->state = es->state;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	781a      	ldrb	r2, [r3, #0]
 8003114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003118:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003122:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800312c:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 800312e:	f107 0314 	add.w	r3, r7, #20
 8003132:	2264      	movs	r2, #100	; 0x64
 8003134:	2100      	movs	r1, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f011 fd0a 	bl	8014b50 <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	6859      	ldr	r1, [r3, #4]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	891b      	ldrh	r3, [r3, #8]
 8003148:	461a      	mov	r2, r3
 800314a:	f107 0314 	add.w	r3, r7, #20
 800314e:	4618      	mov	r0, r3
 8003150:	f011 fd2b 	bl	8014baa <strncpy>
	strncpy(input, buf, strlen(buf));
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd f8a9 	bl	80002b0 <strlen>
 800315e:	4602      	mov	r2, r0
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	4619      	mov	r1, r3
 8003166:	4829      	ldr	r0, [pc, #164]	; (800320c <_Z17tcp_server_handleP7tcp_pcbP17tcp_server_structPKc+0x138>)
 8003168:	f011 fd1f 	bl	8014baa <strncpy>
	strcat (buf, " -> Command Received\n");
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd f89d 	bl	80002b0 <strlen>
 8003176:	4603      	mov	r3, r0
 8003178:	461a      	mov	r2, r3
 800317a:	f107 0314 	add.w	r3, r7, #20
 800317e:	4413      	add	r3, r2
 8003180:	4a23      	ldr	r2, [pc, #140]	; (8003210 <_Z17tcp_server_handleP7tcp_pcbP17tcp_server_structPKc+0x13c>)
 8003182:	461d      	mov	r5, r3
 8003184:	4614      	mov	r4, r2
 8003186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003188:	6028      	str	r0, [r5, #0]
 800318a:	6069      	str	r1, [r5, #4]
 800318c:	60aa      	str	r2, [r5, #8]
 800318e:	60eb      	str	r3, [r5, #12]
 8003190:	6820      	ldr	r0, [r4, #0]
 8003192:	6128      	str	r0, [r5, #16]
 8003194:	88a3      	ldrh	r3, [r4, #4]
 8003196:	82ab      	strh	r3, [r5, #20]


	esTx->p->payload = (void *)buf;
 8003198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f107 0214 	add.w	r2, r7, #20
 80031a2:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	891a      	ldrh	r2, [r3, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	895b      	ldrh	r3, [r3, #10]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	b29c      	uxth	r4, r3
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fd f879 	bl	80002b0 <strlen>
 80031be:	4603      	mov	r3, r0
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4422      	add	r2, r4
 80031ca:	b292      	uxth	r2, r2
 80031cc:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 80031ce:	f107 0314 	add.w	r3, r7, #20
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f86c 	bl	80002b0 <strlen>
 80031d8:	4602      	mov	r2, r0
 80031da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	b292      	uxth	r2, r2
 80031e2:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 80031e4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f7ff fef9 	bl	8002fe0 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct>

	pbuf_free(es->p);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f005 fca8 	bl	8008b48 <pbuf_free>

	free(esTx);
 80031f8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80031fc:	f00f fe38 	bl	8012e70 <free>
 8003200:	e000      	b.n	8003204 <_Z17tcp_server_handleP7tcp_pcbP17tcp_server_structPKc+0x130>
        return;
 8003202:	bf00      	nop

}
 8003204:	3788      	adds	r7, #136	; 0x88
 8003206:	46bd      	mov	sp, r7
 8003208:	bdb0      	pop	{r4, r5, r7, pc}
 800320a:	bf00      	nop
 800320c:	200007f0 	.word	0x200007f0
 8003210:	080172e4 	.word	0x080172e4

08003214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800324c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003218:	f7ff fcce 	bl	8002bb8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800321c:	480c      	ldr	r0, [pc, #48]	; (8003250 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800321e:	490d      	ldr	r1, [pc, #52]	; (8003254 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003220:	4a0d      	ldr	r2, [pc, #52]	; (8003258 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003224:	e002      	b.n	800322c <LoopCopyDataInit>

08003226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800322a:	3304      	adds	r3, #4

0800322c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800322c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800322e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003230:	d3f9      	bcc.n	8003226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003232:	4a0a      	ldr	r2, [pc, #40]	; (800325c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003234:	4c0a      	ldr	r4, [pc, #40]	; (8003260 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003238:	e001      	b.n	800323e <LoopFillZerobss>

0800323a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800323a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800323c:	3204      	adds	r2, #4

0800323e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800323e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003240:	d3fb      	bcc.n	800323a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003242:	f011 fd81 	bl	8014d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003246:	f7fe fa7f 	bl	8001748 <main>
  bx  lr    
 800324a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800324c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003254:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003258:	0801acb0 	.word	0x0801acb0
  ldr r2, =_sbss
 800325c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003260:	2000ae84 	.word	0x2000ae84

08003264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003264:	e7fe      	b.n	8003264 <ADC_IRQHandler>

08003266 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <LAN8742_RegisterBusIO+0x28>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <LAN8742_RegisterBusIO+0x28>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <LAN8742_RegisterBusIO+0x28>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d102      	bne.n	8003294 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800328e:	f04f 33ff 	mov.w	r3, #4294967295
 8003292:	e014      	b.n	80032be <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d17c      	bne.n	80033e4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	e01c      	b.n	800333e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f107 0208 	add.w	r2, r7, #8
 800330c:	2112      	movs	r1, #18
 800330e:	6978      	ldr	r0, [r7, #20]
 8003310:	4798      	blx	r3
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	da03      	bge.n	8003320 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8003318:	f06f 0304 	mvn.w	r3, #4
 800331c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800331e:	e00b      	b.n	8003338 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	429a      	cmp	r2, r3
 800332a:	d105      	bne.n	8003338 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
         break;
 8003336:	e005      	b.n	8003344 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3301      	adds	r3, #1
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b1f      	cmp	r3, #31
 8003342:	d9df      	bls.n	8003304 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b1f      	cmp	r3, #31
 800334a:	d902      	bls.n	8003352 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800334c:	f06f 0302 	mvn.w	r3, #2
 8003350:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d145      	bne.n	80033e4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6810      	ldr	r0, [r2, #0]
 8003360:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003364:	2100      	movs	r1, #0
 8003366:	4798      	blx	r3
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	db37      	blt.n	80033de <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6810      	ldr	r0, [r2, #0]
 8003376:	f107 0208 	add.w	r2, r7, #8
 800337a:	2100      	movs	r1, #0
 800337c:	4798      	blx	r3
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	db28      	blt.n	80033d6 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	4798      	blx	r3
 800338a:	4603      	mov	r3, r0
 800338c:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800338e:	e01c      	b.n	80033ca <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	4798      	blx	r3
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80033a2:	d80e      	bhi.n	80033c2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6810      	ldr	r0, [r2, #0]
 80033ac:	f107 0208 	add.w	r2, r7, #8
 80033b0:	2100      	movs	r1, #0
 80033b2:	4798      	blx	r3
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	da07      	bge.n	80033ca <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 80033ba:	f06f 0304 	mvn.w	r3, #4
 80033be:	613b      	str	r3, [r7, #16]
                 break;
 80033c0:	e010      	b.n	80033e4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80033c2:	f06f 0301 	mvn.w	r3, #1
 80033c6:	613b      	str	r3, [r7, #16]
               break;
 80033c8:	e00c      	b.n	80033e4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1dd      	bne.n	8003390 <LAN8742_Init+0xc6>
 80033d4:	e006      	b.n	80033e4 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80033d6:	f06f 0304 	mvn.w	r3, #4
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	e002      	b.n	80033e4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80033de:	f06f 0303 	mvn.w	r3, #3
 80033e2:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d112      	bne.n	8003410 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	4798      	blx	r3
 80033f0:	4603      	mov	r3, r0
 80033f2:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80033f4:	bf00      	nop
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	4798      	blx	r3
 80033fc:	4603      	mov	r3, r0
 80033fe:	461a      	mov	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003408:	d9f5      	bls.n	80033f6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	605a      	str	r2, [r3, #4]
   }

   return status;
 8003410:	693b      	ldr	r3, [r7, #16]
 }
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6810      	ldr	r0, [r2, #0]
 800342e:	f107 020c 	add.w	r2, r7, #12
 8003432:	2101      	movs	r1, #1
 8003434:	4798      	blx	r3
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	da02      	bge.n	8003442 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800343c:	f06f 0304 	mvn.w	r3, #4
 8003440:	e06e      	b.n	8003520 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6810      	ldr	r0, [r2, #0]
 800344a:	f107 020c 	add.w	r2, r7, #12
 800344e:	2101      	movs	r1, #1
 8003450:	4798      	blx	r3
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	da02      	bge.n	800345e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003458:	f06f 0304 	mvn.w	r3, #4
 800345c:	e060      	b.n	8003520 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8003468:	2301      	movs	r3, #1
 800346a:	e059      	b.n	8003520 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6810      	ldr	r0, [r2, #0]
 8003474:	f107 020c 	add.w	r2, r7, #12
 8003478:	2100      	movs	r1, #0
 800347a:	4798      	blx	r3
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	da02      	bge.n	8003488 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003482:	f06f 0304 	mvn.w	r3, #4
 8003486:	e04b      	b.n	8003520 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d11b      	bne.n	80034ca <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d006      	beq.n	80034aa <LAN8742_GetLinkState+0x90>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80034a6:	2302      	movs	r3, #2
 80034a8:	e03a      	b.n	8003520 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e033      	b.n	8003520 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80034c2:	2304      	movs	r3, #4
 80034c4:	e02c      	b.n	8003520 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80034c6:	2305      	movs	r3, #5
 80034c8:	e02a      	b.n	8003520 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6810      	ldr	r0, [r2, #0]
 80034d2:	f107 020c 	add.w	r2, r7, #12
 80034d6:	211f      	movs	r1, #31
 80034d8:	4798      	blx	r3
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	da02      	bge.n	80034e6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80034e0:	f06f 0304 	mvn.w	r3, #4
 80034e4:	e01c      	b.n	8003520 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80034f0:	2306      	movs	r3, #6
 80034f2:	e015      	b.n	8003520 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 031c 	and.w	r3, r3, #28
 80034fa:	2b18      	cmp	r3, #24
 80034fc:	d101      	bne.n	8003502 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80034fe:	2302      	movs	r3, #2
 8003500:	e00e      	b.n	8003520 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 031c 	and.w	r3, r3, #28
 8003508:	2b08      	cmp	r3, #8
 800350a:	d101      	bne.n	8003510 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800350c:	2303      	movs	r3, #3
 800350e:	e007      	b.n	8003520 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 031c 	and.w	r3, r3, #28
 8003516:	2b14      	cmp	r3, #20
 8003518:	d101      	bne.n	800351e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800351a:	2304      	movs	r3, #4
 800351c:	e000      	b.n	8003520 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800351e:	2305      	movs	r3, #5
    }
  }
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800352c:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <HAL_Init+0x40>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a0d      	ldr	r2, [pc, #52]	; (8003568 <HAL_Init+0x40>)
 8003532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_Init+0x40>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <HAL_Init+0x40>)
 800353e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <HAL_Init+0x40>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a07      	ldr	r2, [pc, #28]	; (8003568 <HAL_Init+0x40>)
 800354a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003550:	2003      	movs	r0, #3
 8003552:	f000 f94f 	bl	80037f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003556:	200f      	movs	r0, #15
 8003558:	f000 f808 	bl	800356c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800355c:	f7ff f8a8 	bl	80026b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40023c00 	.word	0x40023c00

0800356c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003574:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <HAL_InitTick+0x54>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_InitTick+0x58>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	4619      	mov	r1, r3
 800357e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003582:	fbb3 f3f1 	udiv	r3, r3, r1
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f967 	bl	800385e <HAL_SYSTICK_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e00e      	b.n	80035b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b0f      	cmp	r3, #15
 800359e:	d80a      	bhi.n	80035b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035a0:	2200      	movs	r2, #0
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295
 80035a8:	f000 f92f 	bl	800380a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035ac:	4a06      	ldr	r2, [pc, #24]	; (80035c8 <HAL_InitTick+0x5c>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e000      	b.n	80035b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20000000 	.word	0x20000000
 80035c4:	20000008 	.word	0x20000008
 80035c8:	20000004 	.word	0x20000004

080035cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_IncTick+0x20>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_IncTick+0x24>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4413      	add	r3, r2
 80035dc:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <HAL_IncTick+0x24>)
 80035de:	6013      	str	r3, [r2, #0]
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000008 	.word	0x20000008
 80035f0:	20000b44 	.word	0x20000b44

080035f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return uwTick;
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <HAL_GetTick+0x14>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000b44 	.word	0x20000b44

0800360c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003614:	f7ff ffee 	bl	80035f4 <HAL_GetTick>
 8003618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d005      	beq.n	8003632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003626:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <HAL_Delay+0x44>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4413      	add	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003632:	bf00      	nop
 8003634:	f7ff ffde 	bl	80035f4 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	429a      	cmp	r2, r3
 8003642:	d8f7      	bhi.n	8003634 <HAL_Delay+0x28>
  {
  }
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20000008 	.word	0x20000008

08003654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003664:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <__NVIC_SetPriorityGrouping+0x44>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003670:	4013      	ands	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800367c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003686:	4a04      	ldr	r2, [pc, #16]	; (8003698 <__NVIC_SetPriorityGrouping+0x44>)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	60d3      	str	r3, [r2, #12]
}
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a0:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <__NVIC_GetPriorityGrouping+0x18>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	0a1b      	lsrs	r3, r3, #8
 80036a6:	f003 0307 	and.w	r3, r3, #7
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	db0b      	blt.n	80036e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	f003 021f 	and.w	r2, r3, #31
 80036d0:	4907      	ldr	r1, [pc, #28]	; (80036f0 <__NVIC_EnableIRQ+0x38>)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	2001      	movs	r0, #1
 80036da:	fa00 f202 	lsl.w	r2, r0, r2
 80036de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	e000e100 	.word	0xe000e100

080036f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	6039      	str	r1, [r7, #0]
 80036fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	2b00      	cmp	r3, #0
 8003706:	db0a      	blt.n	800371e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	b2da      	uxtb	r2, r3
 800370c:	490c      	ldr	r1, [pc, #48]	; (8003740 <__NVIC_SetPriority+0x4c>)
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	0112      	lsls	r2, r2, #4
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	440b      	add	r3, r1
 8003718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800371c:	e00a      	b.n	8003734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	b2da      	uxtb	r2, r3
 8003722:	4908      	ldr	r1, [pc, #32]	; (8003744 <__NVIC_SetPriority+0x50>)
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	3b04      	subs	r3, #4
 800372c:	0112      	lsls	r2, r2, #4
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	440b      	add	r3, r1
 8003732:	761a      	strb	r2, [r3, #24]
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	e000e100 	.word	0xe000e100
 8003744:	e000ed00 	.word	0xe000ed00

08003748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	; 0x24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f1c3 0307 	rsb	r3, r3, #7
 8003762:	2b04      	cmp	r3, #4
 8003764:	bf28      	it	cs
 8003766:	2304      	movcs	r3, #4
 8003768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3304      	adds	r3, #4
 800376e:	2b06      	cmp	r3, #6
 8003770:	d902      	bls.n	8003778 <NVIC_EncodePriority+0x30>
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	3b03      	subs	r3, #3
 8003776:	e000      	b.n	800377a <NVIC_EncodePriority+0x32>
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800377c:	f04f 32ff 	mov.w	r2, #4294967295
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43da      	mvns	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	401a      	ands	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003790:	f04f 31ff 	mov.w	r1, #4294967295
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	fa01 f303 	lsl.w	r3, r1, r3
 800379a:	43d9      	mvns	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a0:	4313      	orrs	r3, r2
         );
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3724      	adds	r7, #36	; 0x24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
	...

080037b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037c0:	d301      	bcc.n	80037c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037c2:	2301      	movs	r3, #1
 80037c4:	e00f      	b.n	80037e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037c6:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <SysTick_Config+0x40>)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ce:	210f      	movs	r1, #15
 80037d0:	f04f 30ff 	mov.w	r0, #4294967295
 80037d4:	f7ff ff8e 	bl	80036f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <SysTick_Config+0x40>)
 80037da:	2200      	movs	r2, #0
 80037dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037de:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <SysTick_Config+0x40>)
 80037e0:	2207      	movs	r2, #7
 80037e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	e000e010 	.word	0xe000e010

080037f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff ff29 	bl	8003654 <__NVIC_SetPriorityGrouping>
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800380a:	b580      	push	{r7, lr}
 800380c:	b086      	sub	sp, #24
 800380e:	af00      	add	r7, sp, #0
 8003810:	4603      	mov	r3, r0
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800381c:	f7ff ff3e 	bl	800369c <__NVIC_GetPriorityGrouping>
 8003820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	6978      	ldr	r0, [r7, #20]
 8003828:	f7ff ff8e 	bl	8003748 <NVIC_EncodePriority>
 800382c:	4602      	mov	r2, r0
 800382e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003832:	4611      	mov	r1, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff ff5d 	bl	80036f4 <__NVIC_SetPriority>
}
 800383a:	bf00      	nop
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	4603      	mov	r3, r0
 800384a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800384c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff ff31 	bl	80036b8 <__NVIC_EnableIRQ>
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b082      	sub	sp, #8
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff ffa2 	bl	80037b0 <SysTick_Config>
 800386c:	4603      	mov	r3, r0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e06c      	b.n	8003964 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003890:	2b00      	cmp	r3, #0
 8003892:	d106      	bne.n	80038a2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2223      	movs	r2, #35	; 0x23
 8003898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f003 fbdd 	bl	800705c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	4b31      	ldr	r3, [pc, #196]	; (800396c <HAL_ETH_Init+0xf4>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	4a30      	ldr	r2, [pc, #192]	; (800396c <HAL_ETH_Init+0xf4>)
 80038ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038b0:	6453      	str	r3, [r2, #68]	; 0x44
 80038b2:	4b2e      	ldr	r3, [pc, #184]	; (800396c <HAL_ETH_Init+0xf4>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80038be:	4b2c      	ldr	r3, [pc, #176]	; (8003970 <HAL_ETH_Init+0xf8>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4a2b      	ldr	r2, [pc, #172]	; (8003970 <HAL_ETH_Init+0xf8>)
 80038c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038c8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80038ca:	4b29      	ldr	r3, [pc, #164]	; (8003970 <HAL_ETH_Init+0xf8>)
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	4927      	ldr	r1, [pc, #156]	; (8003970 <HAL_ETH_Init+0xf8>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <HAL_ETH_Init+0xf8>)
 80038da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038f4:	f7ff fe7e 	bl	80035f4 <HAL_GetTick>
 80038f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80038fa:	e011      	b.n	8003920 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80038fc:	f7ff fe7a 	bl	80035f4 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800390a:	d909      	bls.n	8003920 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2204      	movs	r2, #4
 8003910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	22e0      	movs	r2, #224	; 0xe0
 8003918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e021      	b.n	8003964 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e4      	bne.n	80038fc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fef0 	bl	8004718 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 ff97 	bl	800486c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 ffed 	bl	800491e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	461a      	mov	r2, r3
 800394a:	2100      	movs	r1, #0
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 ff55 	bl	80047fc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2210      	movs	r2, #16
 800395e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40023800 	.word	0x40023800
 8003970:	40013800 	.word	0x40013800

08003974 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003982:	2b10      	cmp	r3, #16
 8003984:	d150      	bne.n	8003a28 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2223      	movs	r2, #35	; 0x23
 800398a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2204      	movs	r2, #4
 8003992:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f9fd 	bl	8003d94 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0208 	orr.w	r2, r2, #8
 80039a8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80039b2:	2001      	movs	r0, #1
 80039b4:	f7ff fe2a 	bl	800360c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0204 	orr.w	r2, r2, #4
 80039ce:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80039d8:	2001      	movs	r0, #1
 80039da:	f7ff fe17 	bl	800360c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fd36 	bl	8004458 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a02:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	f043 0302 	orr.w	r3, r3, #2
 8003a16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a1a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2223      	movs	r2, #35	; 0x23
 8003a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	e000      	b.n	8003a2a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
  }
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a40:	2b23      	cmp	r3, #35	; 0x23
 8003a42:	d14a      	bne.n	8003ada <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2223      	movs	r2, #35	; 0x23
 8003a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a62:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	f023 0302 	bic.w	r3, r3, #2
 8003a76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a7a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0204 	bic.w	r2, r2, #4
 8003a8a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a94:	2001      	movs	r0, #1
 8003a96:	f7ff fdb9 	bl	800360c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fcd8 	bl	8004458 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0208 	bic.w	r2, r2, #8
 8003ab6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	f7ff fda3 	bl	800360c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2210      	movs	r2, #16
 8003ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	f043 0201 	orr.w	r2, r3, #1
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e07c      	b.n	8003c04 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b10:	2b23      	cmp	r3, #35	; 0x23
 8003b12:	d176      	bne.n	8003c02 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003b14:	2200      	movs	r2, #0
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 ff6d 	bl	80049f8 <ETH_Prepare_Tx_Descriptors>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d009      	beq.n	8003b38 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2a:	f043 0202 	orr.w	r2, r3, #2
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e065      	b.n	8003c04 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8003b38:	f3bf 8f4f 	dsb	sy
}
 8003b3c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3206      	adds	r2, #6
 8003b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b4a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	629a      	str	r2, [r3, #40]	; 0x28
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d904      	bls.n	8003b68 <HAL_ETH_Transmit+0x84>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	1f1a      	subs	r2, r3, #4
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3106      	adds	r1, #6
 8003b74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b7c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003b7e:	f7ff fd39 	bl	80035f4 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003b84:	e037      	b.n	8003bf6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d011      	beq.n	8003bbc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9e:	f043 0208 	orr.w	r2, r3, #8
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e023      	b.n	8003c04 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d018      	beq.n	8003bf6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bc4:	f7ff fd16 	bl	80035f4 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d302      	bcc.n	8003bda <HAL_ETH_Transmit+0xf6>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10d      	bne.n	8003bf6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be0:	f043 0204 	orr.w	r2, r3, #4
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003bf0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e006      	b.n	8003c04 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	dbc3      	blt.n	8003b86 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
  }
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d109      	bne.n	8003c38 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	f043 0201 	orr.w	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0a8      	b.n	8003d8a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c3e:	2b23      	cmp	r3, #35	; 0x23
 8003c40:	d001      	beq.n	8003c46 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e0a1      	b.n	8003d8a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	3212      	adds	r2, #18
 8003c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c56:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c5c:	f1c3 0304 	rsb	r3, r3, #4
 8003c60:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003c62:	e06a      	b.n	8003d3a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	699a      	ldr	r2, [r3, #24]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d103      	bne.n	8003c94 <HAL_ETH_ReadData+0x88>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d040      	beq.n	8003d16 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00c      	beq.n	8003cd8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	0c1b      	lsrs	r3, r3, #16
 8003cc4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003cc8:	3b04      	subs	r3, #4
 8003cca:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f003 fb89 	bl	800740c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	441a      	add	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	2200      	movs	r2, #0
 8003d14:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d902      	bls.n	8003d28 <HAL_ETH_ReadData+0x11c>
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3b04      	subs	r3, #4
 8003d26:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	3212      	adds	r2, #18
 8003d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d32:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	3301      	adds	r3, #1
 8003d38:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	db06      	blt.n	8003d50 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d202      	bcs.n	8003d50 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d089      	beq.n	8003c64 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	441a      	add	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f815 	bl	8003d94 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d108      	bne.n	8003d88 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	e000      	b.n	8003d8a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003da0:	2301      	movs	r3, #1
 8003da2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003da8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	3212      	adds	r2, #18
 8003db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dba:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003dbc:	e03d      	b.n	8003e3a <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d112      	bne.n	8003dec <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003dc6:	f107 0308 	add.w	r3, r7, #8
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f003 faee 	bl	80073ac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d102      	bne.n	8003ddc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	74fb      	strb	r3, [r7, #19]
 8003dda:	e007      	b.n	8003dec <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	461a      	mov	r2, r3
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	461a      	mov	r2, r3
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003dec:	7cfb      	ldrb	r3, [r7, #19]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d023      	beq.n	8003e3a <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d103      	bne.n	8003e02 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4a24      	ldr	r2, [pc, #144]	; (8003e90 <ETH_UpdateDescriptor+0xfc>)
 8003dfe:	605a      	str	r2, [r3, #4]
 8003e00:	e003      	b.n	8003e0a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003e08:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d902      	bls.n	8003e28 <ETH_UpdateDescriptor+0x94>
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	3b04      	subs	r3, #4
 8003e26:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	3212      	adds	r2, #18
 8003e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e32:	617b      	str	r3, [r7, #20]
      desccount--;
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <ETH_UpdateDescriptor+0xb2>
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1bb      	bne.n	8003dbe <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d01a      	beq.n	8003e86 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	3301      	adds	r3, #1
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003e5a:	f3bf 8f5f 	dmb	sy
}
 8003e5e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6919      	ldr	r1, [r3, #16]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	18ca      	adds	r2, r1, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e78:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003e86:	bf00      	nop
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	80004600 	.word	0x80004600

08003e94 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eaa:	2b40      	cmp	r3, #64	; 0x40
 8003eac:	d112      	bne.n	8003ed4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	d109      	bne.n	8003ed4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4b50      	ldr	r3, [pc, #320]	; (800400c <HAL_ETH_IRQHandler+0x178>)
 8003ecc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f8ac 	bl	800402c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d113      	bne.n	8003f0e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d10a      	bne.n	8003f0e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f00:	461a      	mov	r2, r3
 8003f02:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003f06:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f885 	bl	8004018 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f20:	d14c      	bne.n	8003fbc <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f34:	d142      	bne.n	8003fbc <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3c:	f043 0208 	orr.w	r2, r3, #8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f58:	d11a      	bne.n	8003f90 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f62:	695a      	ldr	r2, [r3, #20]
 8003f64:	4b2a      	ldr	r3, [pc, #168]	; (8004010 <HAL_ETH_IRQHandler+0x17c>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003f80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f84:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	22e0      	movs	r2, #224	; 0xe0
 8003f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003f8e:	e012      	b.n	8003fb6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f98:	695a      	ldr	r2, [r3, #20]
 8003f9a:	f248 6380 	movw	r3, #34432	; 0x8680
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f248 6380 	movw	r3, #34432	; 0x8680
 8003fb4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f842 	bl	8004040 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d10e      	bne.n	8003fe8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f83a 	bl	8004054 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <HAL_ETH_IRQHandler+0x180>)
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d006      	beq.n	8004002 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003ff4:	4b07      	ldr	r3, [pc, #28]	; (8004014 <HAL_ETH_IRQHandler+0x180>)
 8003ff6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003ffa:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f833 	bl	8004068 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	00010040 	.word	0x00010040
 8004010:	007e2000 	.word	0x007e2000
 8004014:	40013c00 	.word	0x40013c00

08004018 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f003 031c 	and.w	r3, r3, #28
 8004098:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	02db      	lsls	r3, r3, #11
 800409e:	b29b      	uxth	r3, r3
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	019b      	lsls	r3, r3, #6
 80040aa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f023 0302 	bic.w	r3, r3, #2
 80040ba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80040cc:	f7ff fa92 	bl	80035f4 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80040d2:	e00d      	b.n	80040f0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80040d4:	f7ff fa8e 	bl	80035f4 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e2:	d301      	bcc.n	80040e8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e010      	b.n	800410a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1ec      	bne.n	80040d4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	b29b      	uxth	r3, r3
 8004102:	461a      	mov	r2, r3
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f003 031c 	and.w	r3, r3, #28
 800412e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	02db      	lsls	r3, r3, #11
 8004134:	b29b      	uxth	r3, r3
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	019b      	lsls	r3, r3, #6
 8004140:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f043 0302 	orr.w	r3, r3, #2
 8004150:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800416c:	f7ff fa42 	bl	80035f4 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004172:	e00d      	b.n	8004190 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004174:	f7ff fa3e 	bl	80035f4 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004182:	d301      	bcc.n	8004188 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e009      	b.n	800419c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1ec      	bne.n	8004174 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0d9      	b.n	800436c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	bf14      	ite	ne
 80041c6:	2301      	movne	r3, #1
 80041c8:	2300      	moveq	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf0c      	ite	eq
 80041f0:	2301      	moveq	r3, #1
 80041f2:	2300      	movne	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8004208:	2b00      	cmp	r3, #0
 800420a:	bf14      	ite	ne
 800420c:	2301      	movne	r3, #1
 800420e:	2300      	moveq	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004222:	2b00      	cmp	r3, #0
 8004224:	bf0c      	ite	eq
 8004226:	2301      	moveq	r3, #1
 8004228:	2300      	movne	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf14      	ite	ne
 8004240:	2301      	movne	r3, #1
 8004242:	2300      	moveq	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004272:	2b00      	cmp	r3, #0
 8004274:	bf0c      	ite	eq
 8004276:	2301      	moveq	r3, #1
 8004278:	2300      	movne	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800428c:	2b00      	cmp	r3, #0
 800428e:	bf0c      	ite	eq
 8004290:	2301      	moveq	r3, #1
 8004292:	2300      	movne	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bf14      	ite	ne
 80042aa:	2301      	movne	r3, #1
 80042ac:	2300      	moveq	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bf14      	ite	ne
 80042d2:	2301      	movne	r3, #1
 80042d4:	2300      	moveq	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf14      	ite	ne
 80042ec:	2301      	movne	r3, #1
 80042ee:	2300      	moveq	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	b29a      	uxth	r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	bf14      	ite	ne
 8004340:	2301      	movne	r3, #1
 8004342:	2300      	moveq	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	461a      	mov	r2, r3
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004358:	2b00      	cmp	r3, #0
 800435a:	bf14      	ite	ne
 800435c:	2301      	movne	r3, #1
 800435e:	2300      	moveq	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e00b      	b.n	80043a4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004392:	2b10      	cmp	r3, #16
 8004394:	d105      	bne.n	80043a2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004396:	6839      	ldr	r1, [r7, #0]
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f883 	bl	80044a4 <ETH_SetMACConfig>

    return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
  }
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 031c 	bic.w	r3, r3, #28
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80043c4:	f001 fb86 	bl	8005ad4 <HAL_RCC_GetHCLKFreq>
 80043c8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4a1d      	ldr	r2, [pc, #116]	; (8004444 <HAL_ETH_SetMDIOClockRange+0x98>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d908      	bls.n	80043e4 <HAL_ETH_SetMDIOClockRange+0x38>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4a1c      	ldr	r2, [pc, #112]	; (8004448 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d804      	bhi.n	80043e4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f043 0308 	orr.w	r3, r3, #8
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	e027      	b.n	8004434 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4a18      	ldr	r2, [pc, #96]	; (8004448 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d908      	bls.n	80043fe <HAL_ETH_SetMDIOClockRange+0x52>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4a17      	ldr	r2, [pc, #92]	; (800444c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d204      	bcs.n	80043fe <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f043 030c 	orr.w	r3, r3, #12
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	e01a      	b.n	8004434 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4a12      	ldr	r2, [pc, #72]	; (800444c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d303      	bcc.n	800440e <HAL_ETH_SetMDIOClockRange+0x62>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4a11      	ldr	r2, [pc, #68]	; (8004450 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d911      	bls.n	8004432 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	4a0f      	ldr	r2, [pc, #60]	; (8004450 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d908      	bls.n	8004428 <HAL_ETH_SetMDIOClockRange+0x7c>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4a0e      	ldr	r2, [pc, #56]	; (8004454 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d804      	bhi.n	8004428 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f043 0304 	orr.w	r3, r3, #4
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	e005      	b.n	8004434 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f043 0310 	orr.w	r3, r3, #16
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	e000      	b.n	8004434 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004432:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	611a      	str	r2, [r3, #16]
}
 800443c:	bf00      	nop
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	01312cff 	.word	0x01312cff
 8004448:	02160ebf 	.word	0x02160ebf
 800444c:	03938700 	.word	0x03938700
 8004450:	05f5e0ff 	.word	0x05f5e0ff
 8004454:	08f0d17f 	.word	0x08f0d17f

08004458 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004476:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800447a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004488:	2001      	movs	r0, #1
 800448a:	f7ff f8bf 	bl	800360c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004498:	6193      	str	r3, [r2, #24]
}
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4b51      	ldr	r3, [pc, #324]	; (8004600 <ETH_SetMACConfig+0x15c>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	7c1b      	ldrb	r3, [r3, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d102      	bne.n	80044cc <ETH_SetMACConfig+0x28>
 80044c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80044ca:	e000      	b.n	80044ce <ETH_SetMACConfig+0x2a>
 80044cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	7c5b      	ldrb	r3, [r3, #17]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d102      	bne.n	80044dc <ETH_SetMACConfig+0x38>
 80044d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044da:	e000      	b.n	80044de <ETH_SetMACConfig+0x3a>
 80044dc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80044de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80044e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	7fdb      	ldrb	r3, [r3, #31]
 80044ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80044ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80044f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	7f92      	ldrb	r2, [r2, #30]
 80044f8:	2a00      	cmp	r2, #0
 80044fa:	d102      	bne.n	8004502 <ETH_SetMACConfig+0x5e>
 80044fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004500:	e000      	b.n	8004504 <ETH_SetMACConfig+0x60>
 8004502:	2200      	movs	r2, #0
                        macconf->Speed |
 8004504:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	7f1b      	ldrb	r3, [r3, #28]
 800450a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800450c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004512:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	791b      	ldrb	r3, [r3, #4]
 8004518:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800451a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004522:	2a00      	cmp	r2, #0
 8004524:	d102      	bne.n	800452c <ETH_SetMACConfig+0x88>
 8004526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800452a:	e000      	b.n	800452e <ETH_SetMACConfig+0x8a>
 800452c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800452e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	7bdb      	ldrb	r3, [r3, #15]
 8004534:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004536:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800453c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004544:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004546:	4313      	orrs	r3, r2
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800455e:	2001      	movs	r0, #1
 8004560:	f7ff f854 	bl	800360c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	f64f 7341 	movw	r3, #65345	; 0xff41
 800457a:	4013      	ands	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004582:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800458a:	2a00      	cmp	r2, #0
 800458c:	d101      	bne.n	8004592 <ETH_SetMACConfig+0xee>
 800458e:	2280      	movs	r2, #128	; 0x80
 8004590:	e000      	b.n	8004594 <ETH_SetMACConfig+0xf0>
 8004592:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004594:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800459a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80045a2:	2a01      	cmp	r2, #1
 80045a4:	d101      	bne.n	80045aa <ETH_SetMACConfig+0x106>
 80045a6:	2208      	movs	r2, #8
 80045a8:	e000      	b.n	80045ac <ETH_SetMACConfig+0x108>
 80045aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80045ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80045b4:	2a01      	cmp	r2, #1
 80045b6:	d101      	bne.n	80045bc <ETH_SetMACConfig+0x118>
 80045b8:	2204      	movs	r2, #4
 80045ba:	e000      	b.n	80045be <ETH_SetMACConfig+0x11a>
 80045bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80045be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80045c6:	2a01      	cmp	r2, #1
 80045c8:	d101      	bne.n	80045ce <ETH_SetMACConfig+0x12a>
 80045ca:	2202      	movs	r2, #2
 80045cc:	e000      	b.n	80045d0 <ETH_SetMACConfig+0x12c>
 80045ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80045d0:	4313      	orrs	r3, r2
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80045e8:	2001      	movs	r0, #1
 80045ea:	f7ff f80f 	bl	800360c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	619a      	str	r2, [r3, #24]
}
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	ff20810f 	.word	0xff20810f

08004604 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4b3d      	ldr	r3, [pc, #244]	; (8004714 <ETH_SetDMAConfig+0x110>)
 800461e:	4013      	ands	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	7b1b      	ldrb	r3, [r3, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d102      	bne.n	8004630 <ETH_SetDMAConfig+0x2c>
 800462a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800462e:	e000      	b.n	8004632 <ETH_SetDMAConfig+0x2e>
 8004630:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	7b5b      	ldrb	r3, [r3, #13]
 8004636:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004638:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	7f52      	ldrb	r2, [r2, #29]
 800463e:	2a00      	cmp	r2, #0
 8004640:	d102      	bne.n	8004648 <ETH_SetDMAConfig+0x44>
 8004642:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004646:	e000      	b.n	800464a <ETH_SetDMAConfig+0x46>
 8004648:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800464a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	7b9b      	ldrb	r3, [r3, #14]
 8004650:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004652:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004658:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	7f1b      	ldrb	r3, [r3, #28]
 800465e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004660:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	7f9b      	ldrb	r3, [r3, #30]
 8004666:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004668:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800466e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004676:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004678:	4313      	orrs	r3, r2
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004688:	461a      	mov	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800469a:	2001      	movs	r0, #1
 800469c:	f7fe ffb6 	bl	800360c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a8:	461a      	mov	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	791b      	ldrb	r3, [r3, #4]
 80046b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80046b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80046be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80046c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80046ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80046d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80046dc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046ea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80046f8:	2001      	movs	r0, #1
 80046fa:	f7fe ff87 	bl	800360c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004706:	461a      	mov	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6013      	str	r3, [r2, #0]
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	f8de3f23 	.word	0xf8de3f23

08004718 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b0a6      	sub	sp, #152	; 0x98
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004720:	2301      	movs	r3, #1
 8004722:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004726:	2301      	movs	r3, #1
 8004728:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800472c:	2300      	movs	r3, #0
 800472e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004730:	2300      	movs	r3, #0
 8004732:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800473c:	2300      	movs	r3, #0
 800473e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004748:	2300      	movs	r3, #0
 800474a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800474e:	2300      	movs	r3, #0
 8004750:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004754:	2300      	movs	r3, #0
 8004756:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004758:	2300      	movs	r3, #0
 800475a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800475e:	2300      	movs	r3, #0
 8004760:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004762:	2300      	movs	r3, #0
 8004764:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004768:	2300      	movs	r3, #0
 800476a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800476e:	2300      	movs	r3, #0
 8004770:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004774:	2300      	movs	r3, #0
 8004776:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800477a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800477e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004780:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004784:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004786:	2300      	movs	r3, #0
 8004788:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800478c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004790:	4619      	mov	r1, r3
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff fe86 	bl	80044a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004798:	2301      	movs	r3, #1
 800479a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800479c:	2301      	movs	r3, #1
 800479e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80047a0:	2301      	movs	r3, #1
 80047a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80047a6:	2301      	movs	r3, #1
 80047a8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80047ae:	2300      	movs	r3, #0
 80047b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80047b4:	2300      	movs	r3, #0
 80047b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80047ba:	2300      	movs	r3, #0
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80047c4:	2301      	movs	r3, #1
 80047c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80047c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047cc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80047ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047d2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80047d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80047da:	2301      	movs	r3, #1
 80047dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80047e8:	f107 0308 	add.w	r3, r7, #8
 80047ec:	4619      	mov	r1, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff ff08 	bl	8004604 <ETH_SetDMAConfig>
}
 80047f4:	bf00      	nop
 80047f6:	3798      	adds	r7, #152	; 0x98
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3305      	adds	r3, #5
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	3204      	adds	r2, #4
 8004814:	7812      	ldrb	r2, [r2, #0]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	4b11      	ldr	r3, [pc, #68]	; (8004864 <ETH_MACAddressConfig+0x68>)
 800481e:	4413      	add	r3, r2
 8004820:	461a      	mov	r2, r3
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3303      	adds	r3, #3
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	061a      	lsls	r2, r3, #24
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3302      	adds	r3, #2
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	041b      	lsls	r3, r3, #16
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3301      	adds	r3, #1
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	021b      	lsls	r3, r3, #8
 8004840:	4313      	orrs	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	7812      	ldrb	r2, [r2, #0]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <ETH_MACAddressConfig+0x6c>)
 800484e:	4413      	add	r3, r2
 8004850:	461a      	mov	r2, r3
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	6013      	str	r3, [r2, #0]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40028040 	.word	0x40028040
 8004868:	40028044 	.word	0x40028044

0800486c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	e03e      	b.n	80048f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68d9      	ldr	r1, [r3, #12]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	440b      	add	r3, r1
 800488a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2200      	movs	r2, #0
 8004896:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2200      	movs	r2, #0
 800489c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2200      	movs	r2, #0
 80048a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	3206      	adds	r2, #6
 80048ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d80c      	bhi.n	80048dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68d9      	ldr	r1, [r3, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	440b      	add	r3, r1
 80048d4:	461a      	mov	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	60da      	str	r2, [r3, #12]
 80048da:	e004      	b.n	80048e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	461a      	mov	r2, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3301      	adds	r3, #1
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d9bd      	bls.n	800487a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004910:	611a      	str	r2, [r3, #16]
}
 8004912:	bf00      	nop
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800491e:	b480      	push	{r7}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	e046      	b.n	80049ba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6919      	ldr	r1, [r3, #16]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4613      	mov	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	440b      	add	r3, r1
 800493c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2200      	movs	r2, #0
 8004948:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2200      	movs	r2, #0
 800494e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2200      	movs	r2, #0
 8004954:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2200      	movs	r2, #0
 800495a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2200      	movs	r2, #0
 8004960:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004968:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004970:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800497e:	68b9      	ldr	r1, [r7, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	3212      	adds	r2, #18
 8004986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b02      	cmp	r3, #2
 800498e:	d80c      	bhi.n	80049aa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6919      	ldr	r1, [r3, #16]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	440b      	add	r3, r1
 80049a2:	461a      	mov	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	60da      	str	r2, [r3, #12]
 80049a8:	e004      	b.n	80049b4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	461a      	mov	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3301      	adds	r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d9b5      	bls.n	800492c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ea:	60da      	str	r2, [r3, #12]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b08d      	sub	sp, #52	; 0x34
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3318      	adds	r3, #24
 8004a08:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a22:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a3a:	d007      	beq.n	8004a4c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	3304      	adds	r3, #4
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e103      	b.n	8004c58 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	3301      	adds	r3, #1
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004a68:	f023 031f 	bic.w	r3, r3, #31
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	6852      	ldr	r2, [r2, #4]
 8004a70:	431a      	orrs	r2, r3
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d008      	beq.n	8004a94 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	431a      	orrs	r2, r3
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004ad6:	f3bf 8f5f 	dmb	sy
}
 8004ada:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004ae8:	e084      	b.n	8004bf4 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d006      	beq.n	8004b0a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	e005      	b.n	8004b16 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	3301      	adds	r3, #1
 8004b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d902      	bls.n	8004b28 <ETH_Prepare_Tx_Descriptors+0x130>
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	3b04      	subs	r3, #4
 8004b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b30:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b4a:	d007      	beq.n	8004b5c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	3304      	adds	r3, #4
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d029      	beq.n	8004bb0 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b68:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b6e:	e019      	b.n	8004ba4 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8004b70:	f3bf 8f5f 	dmb	sy
}
 8004b74:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b84:	3301      	adds	r3, #1
 8004b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d902      	bls.n	8004b94 <ETH_Prepare_Tx_Descriptors+0x19c>
 8004b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b90:	3b04      	subs	r3, #4
 8004b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d3e1      	bcc.n	8004b70 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8004bac:	2302      	movs	r3, #2
 8004bae:	e053      	b.n	8004c58 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004bce:	f023 031f 	bic.w	r3, r3, #31
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	6852      	ldr	r2, [r2, #4]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	3301      	adds	r3, #1
 8004be0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004be2:	f3bf 8f5f 	dmb	sy
}
 8004be6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f47f af76 	bne.w	8004aea <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d006      	beq.n	8004c12 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	e005      	b.n	8004c1e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c2e:	6979      	ldr	r1, [r7, #20]
 8004c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c32:	3304      	adds	r3, #4
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c3e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c40:	b672      	cpsid	i
}
 8004c42:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004c52:	b662      	cpsie	i
}
 8004c54:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3734      	adds	r7, #52	; 0x34
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b089      	sub	sp, #36	; 0x24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61fb      	str	r3, [r7, #28]
 8004c7e:	e177      	b.n	8004f70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c80:	2201      	movs	r2, #1
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4013      	ands	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	f040 8166 	bne.w	8004f6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d005      	beq.n	8004cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d130      	bne.n	8004d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cec:	2201      	movs	r2, #1
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	f003 0201 	and.w	r2, r3, #1
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d017      	beq.n	8004d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	2203      	movs	r2, #3
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	43db      	mvns	r3, r3
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f003 0303 	and.w	r3, r3, #3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d123      	bne.n	8004da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	08da      	lsrs	r2, r3, #3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3208      	adds	r2, #8
 8004d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	220f      	movs	r2, #15
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4013      	ands	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	691a      	ldr	r2, [r3, #16]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	08da      	lsrs	r2, r3, #3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3208      	adds	r2, #8
 8004da2:	69b9      	ldr	r1, [r7, #24]
 8004da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	2203      	movs	r2, #3
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	43db      	mvns	r3, r3
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 0203 	and.w	r2, r3, #3
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 80c0 	beq.w	8004f6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	4b66      	ldr	r3, [pc, #408]	; (8004f88 <HAL_GPIO_Init+0x324>)
 8004df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df2:	4a65      	ldr	r2, [pc, #404]	; (8004f88 <HAL_GPIO_Init+0x324>)
 8004df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004df8:	6453      	str	r3, [r2, #68]	; 0x44
 8004dfa:	4b63      	ldr	r3, [pc, #396]	; (8004f88 <HAL_GPIO_Init+0x324>)
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e06:	4a61      	ldr	r2, [pc, #388]	; (8004f8c <HAL_GPIO_Init+0x328>)
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	089b      	lsrs	r3, r3, #2
 8004e0c:	3302      	adds	r3, #2
 8004e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	220f      	movs	r2, #15
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	43db      	mvns	r3, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4013      	ands	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a58      	ldr	r2, [pc, #352]	; (8004f90 <HAL_GPIO_Init+0x32c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d037      	beq.n	8004ea2 <HAL_GPIO_Init+0x23e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a57      	ldr	r2, [pc, #348]	; (8004f94 <HAL_GPIO_Init+0x330>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d031      	beq.n	8004e9e <HAL_GPIO_Init+0x23a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a56      	ldr	r2, [pc, #344]	; (8004f98 <HAL_GPIO_Init+0x334>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d02b      	beq.n	8004e9a <HAL_GPIO_Init+0x236>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a55      	ldr	r2, [pc, #340]	; (8004f9c <HAL_GPIO_Init+0x338>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d025      	beq.n	8004e96 <HAL_GPIO_Init+0x232>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a54      	ldr	r2, [pc, #336]	; (8004fa0 <HAL_GPIO_Init+0x33c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01f      	beq.n	8004e92 <HAL_GPIO_Init+0x22e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a53      	ldr	r2, [pc, #332]	; (8004fa4 <HAL_GPIO_Init+0x340>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d019      	beq.n	8004e8e <HAL_GPIO_Init+0x22a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a52      	ldr	r2, [pc, #328]	; (8004fa8 <HAL_GPIO_Init+0x344>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <HAL_GPIO_Init+0x226>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a51      	ldr	r2, [pc, #324]	; (8004fac <HAL_GPIO_Init+0x348>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00d      	beq.n	8004e86 <HAL_GPIO_Init+0x222>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a50      	ldr	r2, [pc, #320]	; (8004fb0 <HAL_GPIO_Init+0x34c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d007      	beq.n	8004e82 <HAL_GPIO_Init+0x21e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a4f      	ldr	r2, [pc, #316]	; (8004fb4 <HAL_GPIO_Init+0x350>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d101      	bne.n	8004e7e <HAL_GPIO_Init+0x21a>
 8004e7a:	2309      	movs	r3, #9
 8004e7c:	e012      	b.n	8004ea4 <HAL_GPIO_Init+0x240>
 8004e7e:	230a      	movs	r3, #10
 8004e80:	e010      	b.n	8004ea4 <HAL_GPIO_Init+0x240>
 8004e82:	2308      	movs	r3, #8
 8004e84:	e00e      	b.n	8004ea4 <HAL_GPIO_Init+0x240>
 8004e86:	2307      	movs	r3, #7
 8004e88:	e00c      	b.n	8004ea4 <HAL_GPIO_Init+0x240>
 8004e8a:	2306      	movs	r3, #6
 8004e8c:	e00a      	b.n	8004ea4 <HAL_GPIO_Init+0x240>
 8004e8e:	2305      	movs	r3, #5
 8004e90:	e008      	b.n	8004ea4 <HAL_GPIO_Init+0x240>
 8004e92:	2304      	movs	r3, #4
 8004e94:	e006      	b.n	8004ea4 <HAL_GPIO_Init+0x240>
 8004e96:	2303      	movs	r3, #3
 8004e98:	e004      	b.n	8004ea4 <HAL_GPIO_Init+0x240>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e002      	b.n	8004ea4 <HAL_GPIO_Init+0x240>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <HAL_GPIO_Init+0x240>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	f002 0203 	and.w	r2, r2, #3
 8004eaa:	0092      	lsls	r2, r2, #2
 8004eac:	4093      	lsls	r3, r2
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004eb4:	4935      	ldr	r1, [pc, #212]	; (8004f8c <HAL_GPIO_Init+0x328>)
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	089b      	lsrs	r3, r3, #2
 8004eba:	3302      	adds	r3, #2
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ec2:	4b3d      	ldr	r3, [pc, #244]	; (8004fb8 <HAL_GPIO_Init+0x354>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ee6:	4a34      	ldr	r2, [pc, #208]	; (8004fb8 <HAL_GPIO_Init+0x354>)
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004eec:	4b32      	ldr	r3, [pc, #200]	; (8004fb8 <HAL_GPIO_Init+0x354>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f10:	4a29      	ldr	r2, [pc, #164]	; (8004fb8 <HAL_GPIO_Init+0x354>)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f16:	4b28      	ldr	r3, [pc, #160]	; (8004fb8 <HAL_GPIO_Init+0x354>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	4013      	ands	r3, r2
 8004f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f3a:	4a1f      	ldr	r2, [pc, #124]	; (8004fb8 <HAL_GPIO_Init+0x354>)
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f40:	4b1d      	ldr	r3, [pc, #116]	; (8004fb8 <HAL_GPIO_Init+0x354>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f64:	4a14      	ldr	r2, [pc, #80]	; (8004fb8 <HAL_GPIO_Init+0x354>)
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	2b0f      	cmp	r3, #15
 8004f74:	f67f ae84 	bls.w	8004c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f78:	bf00      	nop
 8004f7a:	bf00      	nop
 8004f7c:	3724      	adds	r7, #36	; 0x24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	40013800 	.word	0x40013800
 8004f90:	40020000 	.word	0x40020000
 8004f94:	40020400 	.word	0x40020400
 8004f98:	40020800 	.word	0x40020800
 8004f9c:	40020c00 	.word	0x40020c00
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40021400 	.word	0x40021400
 8004fa8:	40021800 	.word	0x40021800
 8004fac:	40021c00 	.word	0x40021c00
 8004fb0:	40022000 	.word	0x40022000
 8004fb4:	40022400 	.word	0x40022400
 8004fb8:	40013c00 	.word	0x40013c00

08004fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	807b      	strh	r3, [r7, #2]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fcc:	787b      	ldrb	r3, [r7, #1]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fd2:	887a      	ldrh	r2, [r7, #2]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fd8:	e003      	b.n	8004fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fda:	887b      	ldrh	r3, [r7, #2]
 8004fdc:	041a      	lsls	r2, r3, #16
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	619a      	str	r2, [r3, #24]
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b086      	sub	sp, #24
 8004ff2:	af02      	add	r7, sp, #8
 8004ff4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e101      	b.n	8005204 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d106      	bne.n	8005020 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7fd fc74 	bl	8002908 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2203      	movs	r2, #3
 8005024:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800502e:	d102      	bne.n	8005036 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f001 fa76 	bl	800652c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	7c1a      	ldrb	r2, [r3, #16]
 8005048:	f88d 2000 	strb.w	r2, [sp]
 800504c:	3304      	adds	r3, #4
 800504e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005050:	f001 fa08 	bl	8006464 <USB_CoreInit>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e0ce      	b.n	8005204 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2100      	movs	r1, #0
 800506c:	4618      	mov	r0, r3
 800506e:	f001 fa6e 	bl	800654e <USB_SetCurrentMode>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0bf      	b.n	8005204 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005084:	2300      	movs	r3, #0
 8005086:	73fb      	strb	r3, [r7, #15]
 8005088:	e04a      	b.n	8005120 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800508a:	7bfa      	ldrb	r2, [r7, #15]
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	440b      	add	r3, r1
 8005098:	3315      	adds	r3, #21
 800509a:	2201      	movs	r2, #1
 800509c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800509e:	7bfa      	ldrb	r2, [r7, #15]
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	3314      	adds	r3, #20
 80050ae:	7bfa      	ldrb	r2, [r7, #15]
 80050b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050b2:	7bfa      	ldrb	r2, [r7, #15]
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	b298      	uxth	r0, r3
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	332e      	adds	r3, #46	; 0x2e
 80050c6:	4602      	mov	r2, r0
 80050c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050ca:	7bfa      	ldrb	r2, [r7, #15]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	3318      	adds	r3, #24
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050de:	7bfa      	ldrb	r2, [r7, #15]
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	331c      	adds	r3, #28
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050f2:	7bfa      	ldrb	r2, [r7, #15]
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	3320      	adds	r3, #32
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005106:	7bfa      	ldrb	r2, [r7, #15]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	4413      	add	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	3324      	adds	r3, #36	; 0x24
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	3301      	adds	r3, #1
 800511e:	73fb      	strb	r3, [r7, #15]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	791b      	ldrb	r3, [r3, #4]
 8005124:	7bfa      	ldrb	r2, [r7, #15]
 8005126:	429a      	cmp	r2, r3
 8005128:	d3af      	bcc.n	800508a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]
 800512e:	e044      	b.n	80051ba <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005130:	7bfa      	ldrb	r2, [r7, #15]
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	4613      	mov	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	f203 2355 	addw	r3, r3, #597	; 0x255
 8005142:	2200      	movs	r2, #0
 8005144:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005146:	7bfa      	ldrb	r2, [r7, #15]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8005158:	7bfa      	ldrb	r2, [r7, #15]
 800515a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800515c:	7bfa      	ldrb	r2, [r7, #15]
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800516e:	2200      	movs	r2, #0
 8005170:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005172:	7bfa      	ldrb	r2, [r7, #15]
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005188:	7bfa      	ldrb	r2, [r7, #15]
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800519e:	7bfa      	ldrb	r2, [r7, #15]
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	4613      	mov	r3, r2
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	440b      	add	r3, r1
 80051ac:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
 80051b6:	3301      	adds	r3, #1
 80051b8:	73fb      	strb	r3, [r7, #15]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	791b      	ldrb	r3, [r3, #4]
 80051be:	7bfa      	ldrb	r2, [r7, #15]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d3b5      	bcc.n	8005130 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	7c1a      	ldrb	r2, [r3, #16]
 80051cc:	f88d 2000 	strb.w	r2, [sp]
 80051d0:	3304      	adds	r3, #4
 80051d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051d4:	f001 fa08 	bl	80065e8 <USB_DevInit>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d005      	beq.n	80051ea <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e00c      	b.n	8005204 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f001 fbd0 	bl	80069a2 <USB_DevDisconnect>

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e267      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d075      	beq.n	8005316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800522a:	4b88      	ldr	r3, [pc, #544]	; (800544c <HAL_RCC_OscConfig+0x240>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 030c 	and.w	r3, r3, #12
 8005232:	2b04      	cmp	r3, #4
 8005234:	d00c      	beq.n	8005250 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005236:	4b85      	ldr	r3, [pc, #532]	; (800544c <HAL_RCC_OscConfig+0x240>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800523e:	2b08      	cmp	r3, #8
 8005240:	d112      	bne.n	8005268 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005242:	4b82      	ldr	r3, [pc, #520]	; (800544c <HAL_RCC_OscConfig+0x240>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800524a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800524e:	d10b      	bne.n	8005268 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005250:	4b7e      	ldr	r3, [pc, #504]	; (800544c <HAL_RCC_OscConfig+0x240>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d05b      	beq.n	8005314 <HAL_RCC_OscConfig+0x108>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d157      	bne.n	8005314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e242      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005270:	d106      	bne.n	8005280 <HAL_RCC_OscConfig+0x74>
 8005272:	4b76      	ldr	r3, [pc, #472]	; (800544c <HAL_RCC_OscConfig+0x240>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a75      	ldr	r2, [pc, #468]	; (800544c <HAL_RCC_OscConfig+0x240>)
 8005278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	e01d      	b.n	80052bc <HAL_RCC_OscConfig+0xb0>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005288:	d10c      	bne.n	80052a4 <HAL_RCC_OscConfig+0x98>
 800528a:	4b70      	ldr	r3, [pc, #448]	; (800544c <HAL_RCC_OscConfig+0x240>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a6f      	ldr	r2, [pc, #444]	; (800544c <HAL_RCC_OscConfig+0x240>)
 8005290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	4b6d      	ldr	r3, [pc, #436]	; (800544c <HAL_RCC_OscConfig+0x240>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a6c      	ldr	r2, [pc, #432]	; (800544c <HAL_RCC_OscConfig+0x240>)
 800529c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	e00b      	b.n	80052bc <HAL_RCC_OscConfig+0xb0>
 80052a4:	4b69      	ldr	r3, [pc, #420]	; (800544c <HAL_RCC_OscConfig+0x240>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a68      	ldr	r2, [pc, #416]	; (800544c <HAL_RCC_OscConfig+0x240>)
 80052aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	4b66      	ldr	r3, [pc, #408]	; (800544c <HAL_RCC_OscConfig+0x240>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a65      	ldr	r2, [pc, #404]	; (800544c <HAL_RCC_OscConfig+0x240>)
 80052b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d013      	beq.n	80052ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c4:	f7fe f996 	bl	80035f4 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052cc:	f7fe f992 	bl	80035f4 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b64      	cmp	r3, #100	; 0x64
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e207      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052de:	4b5b      	ldr	r3, [pc, #364]	; (800544c <HAL_RCC_OscConfig+0x240>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0xc0>
 80052ea:	e014      	b.n	8005316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ec:	f7fe f982 	bl	80035f4 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052f4:	f7fe f97e 	bl	80035f4 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b64      	cmp	r3, #100	; 0x64
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e1f3      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005306:	4b51      	ldr	r3, [pc, #324]	; (800544c <HAL_RCC_OscConfig+0x240>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0xe8>
 8005312:	e000      	b.n	8005316 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d063      	beq.n	80053ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005322:	4b4a      	ldr	r3, [pc, #296]	; (800544c <HAL_RCC_OscConfig+0x240>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 030c 	and.w	r3, r3, #12
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800532e:	4b47      	ldr	r3, [pc, #284]	; (800544c <HAL_RCC_OscConfig+0x240>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005336:	2b08      	cmp	r3, #8
 8005338:	d11c      	bne.n	8005374 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800533a:	4b44      	ldr	r3, [pc, #272]	; (800544c <HAL_RCC_OscConfig+0x240>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d116      	bne.n	8005374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005346:	4b41      	ldr	r3, [pc, #260]	; (800544c <HAL_RCC_OscConfig+0x240>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d005      	beq.n	800535e <HAL_RCC_OscConfig+0x152>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d001      	beq.n	800535e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e1c7      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535e:	4b3b      	ldr	r3, [pc, #236]	; (800544c <HAL_RCC_OscConfig+0x240>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	4937      	ldr	r1, [pc, #220]	; (800544c <HAL_RCC_OscConfig+0x240>)
 800536e:	4313      	orrs	r3, r2
 8005370:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005372:	e03a      	b.n	80053ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d020      	beq.n	80053be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800537c:	4b34      	ldr	r3, [pc, #208]	; (8005450 <HAL_RCC_OscConfig+0x244>)
 800537e:	2201      	movs	r2, #1
 8005380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005382:	f7fe f937 	bl	80035f4 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800538a:	f7fe f933 	bl	80035f4 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e1a8      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800539c:	4b2b      	ldr	r3, [pc, #172]	; (800544c <HAL_RCC_OscConfig+0x240>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0f0      	beq.n	800538a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a8:	4b28      	ldr	r3, [pc, #160]	; (800544c <HAL_RCC_OscConfig+0x240>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	4925      	ldr	r1, [pc, #148]	; (800544c <HAL_RCC_OscConfig+0x240>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	600b      	str	r3, [r1, #0]
 80053bc:	e015      	b.n	80053ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053be:	4b24      	ldr	r3, [pc, #144]	; (8005450 <HAL_RCC_OscConfig+0x244>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c4:	f7fe f916 	bl	80035f4 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053cc:	f7fe f912 	bl	80035f4 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e187      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053de:	4b1b      	ldr	r3, [pc, #108]	; (800544c <HAL_RCC_OscConfig+0x240>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f0      	bne.n	80053cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d036      	beq.n	8005464 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d016      	beq.n	800542c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053fe:	4b15      	ldr	r3, [pc, #84]	; (8005454 <HAL_RCC_OscConfig+0x248>)
 8005400:	2201      	movs	r2, #1
 8005402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005404:	f7fe f8f6 	bl	80035f4 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800540c:	f7fe f8f2 	bl	80035f4 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e167      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <HAL_RCC_OscConfig+0x240>)
 8005420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCC_OscConfig+0x200>
 800542a:	e01b      	b.n	8005464 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <HAL_RCC_OscConfig+0x248>)
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005432:	f7fe f8df 	bl	80035f4 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005438:	e00e      	b.n	8005458 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800543a:	f7fe f8db 	bl	80035f4 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d907      	bls.n	8005458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e150      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
 800544c:	40023800 	.word	0x40023800
 8005450:	42470000 	.word	0x42470000
 8005454:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005458:	4b88      	ldr	r3, [pc, #544]	; (800567c <HAL_RCC_OscConfig+0x470>)
 800545a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1ea      	bne.n	800543a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8097 	beq.w	80055a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005472:	2300      	movs	r3, #0
 8005474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005476:	4b81      	ldr	r3, [pc, #516]	; (800567c <HAL_RCC_OscConfig+0x470>)
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10f      	bne.n	80054a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005482:	2300      	movs	r3, #0
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	4b7d      	ldr	r3, [pc, #500]	; (800567c <HAL_RCC_OscConfig+0x470>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	4a7c      	ldr	r2, [pc, #496]	; (800567c <HAL_RCC_OscConfig+0x470>)
 800548c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005490:	6413      	str	r3, [r2, #64]	; 0x40
 8005492:	4b7a      	ldr	r3, [pc, #488]	; (800567c <HAL_RCC_OscConfig+0x470>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549a:	60bb      	str	r3, [r7, #8]
 800549c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800549e:	2301      	movs	r3, #1
 80054a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a2:	4b77      	ldr	r3, [pc, #476]	; (8005680 <HAL_RCC_OscConfig+0x474>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d118      	bne.n	80054e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ae:	4b74      	ldr	r3, [pc, #464]	; (8005680 <HAL_RCC_OscConfig+0x474>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a73      	ldr	r2, [pc, #460]	; (8005680 <HAL_RCC_OscConfig+0x474>)
 80054b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ba:	f7fe f89b 	bl	80035f4 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c2:	f7fe f897 	bl	80035f4 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e10c      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d4:	4b6a      	ldr	r3, [pc, #424]	; (8005680 <HAL_RCC_OscConfig+0x474>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0f0      	beq.n	80054c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d106      	bne.n	80054f6 <HAL_RCC_OscConfig+0x2ea>
 80054e8:	4b64      	ldr	r3, [pc, #400]	; (800567c <HAL_RCC_OscConfig+0x470>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ec:	4a63      	ldr	r2, [pc, #396]	; (800567c <HAL_RCC_OscConfig+0x470>)
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	6713      	str	r3, [r2, #112]	; 0x70
 80054f4:	e01c      	b.n	8005530 <HAL_RCC_OscConfig+0x324>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b05      	cmp	r3, #5
 80054fc:	d10c      	bne.n	8005518 <HAL_RCC_OscConfig+0x30c>
 80054fe:	4b5f      	ldr	r3, [pc, #380]	; (800567c <HAL_RCC_OscConfig+0x470>)
 8005500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005502:	4a5e      	ldr	r2, [pc, #376]	; (800567c <HAL_RCC_OscConfig+0x470>)
 8005504:	f043 0304 	orr.w	r3, r3, #4
 8005508:	6713      	str	r3, [r2, #112]	; 0x70
 800550a:	4b5c      	ldr	r3, [pc, #368]	; (800567c <HAL_RCC_OscConfig+0x470>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550e:	4a5b      	ldr	r2, [pc, #364]	; (800567c <HAL_RCC_OscConfig+0x470>)
 8005510:	f043 0301 	orr.w	r3, r3, #1
 8005514:	6713      	str	r3, [r2, #112]	; 0x70
 8005516:	e00b      	b.n	8005530 <HAL_RCC_OscConfig+0x324>
 8005518:	4b58      	ldr	r3, [pc, #352]	; (800567c <HAL_RCC_OscConfig+0x470>)
 800551a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551c:	4a57      	ldr	r2, [pc, #348]	; (800567c <HAL_RCC_OscConfig+0x470>)
 800551e:	f023 0301 	bic.w	r3, r3, #1
 8005522:	6713      	str	r3, [r2, #112]	; 0x70
 8005524:	4b55      	ldr	r3, [pc, #340]	; (800567c <HAL_RCC_OscConfig+0x470>)
 8005526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005528:	4a54      	ldr	r2, [pc, #336]	; (800567c <HAL_RCC_OscConfig+0x470>)
 800552a:	f023 0304 	bic.w	r3, r3, #4
 800552e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d015      	beq.n	8005564 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005538:	f7fe f85c 	bl	80035f4 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800553e:	e00a      	b.n	8005556 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005540:	f7fe f858 	bl	80035f4 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	f241 3288 	movw	r2, #5000	; 0x1388
 800554e:	4293      	cmp	r3, r2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e0cb      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005556:	4b49      	ldr	r3, [pc, #292]	; (800567c <HAL_RCC_OscConfig+0x470>)
 8005558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0ee      	beq.n	8005540 <HAL_RCC_OscConfig+0x334>
 8005562:	e014      	b.n	800558e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005564:	f7fe f846 	bl	80035f4 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800556a:	e00a      	b.n	8005582 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800556c:	f7fe f842 	bl	80035f4 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f241 3288 	movw	r2, #5000	; 0x1388
 800557a:	4293      	cmp	r3, r2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e0b5      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005582:	4b3e      	ldr	r3, [pc, #248]	; (800567c <HAL_RCC_OscConfig+0x470>)
 8005584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1ee      	bne.n	800556c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800558e:	7dfb      	ldrb	r3, [r7, #23]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d105      	bne.n	80055a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005594:	4b39      	ldr	r3, [pc, #228]	; (800567c <HAL_RCC_OscConfig+0x470>)
 8005596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005598:	4a38      	ldr	r2, [pc, #224]	; (800567c <HAL_RCC_OscConfig+0x470>)
 800559a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800559e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80a1 	beq.w	80056ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055aa:	4b34      	ldr	r3, [pc, #208]	; (800567c <HAL_RCC_OscConfig+0x470>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 030c 	and.w	r3, r3, #12
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d05c      	beq.n	8005670 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d141      	bne.n	8005642 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055be:	4b31      	ldr	r3, [pc, #196]	; (8005684 <HAL_RCC_OscConfig+0x478>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c4:	f7fe f816 	bl	80035f4 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055cc:	f7fe f812 	bl	80035f4 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e087      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055de:	4b27      	ldr	r3, [pc, #156]	; (800567c <HAL_RCC_OscConfig+0x470>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1f0      	bne.n	80055cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69da      	ldr	r2, [r3, #28]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	019b      	lsls	r3, r3, #6
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	085b      	lsrs	r3, r3, #1
 8005602:	3b01      	subs	r3, #1
 8005604:	041b      	lsls	r3, r3, #16
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	061b      	lsls	r3, r3, #24
 800560e:	491b      	ldr	r1, [pc, #108]	; (800567c <HAL_RCC_OscConfig+0x470>)
 8005610:	4313      	orrs	r3, r2
 8005612:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005614:	4b1b      	ldr	r3, [pc, #108]	; (8005684 <HAL_RCC_OscConfig+0x478>)
 8005616:	2201      	movs	r2, #1
 8005618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561a:	f7fd ffeb 	bl	80035f4 <HAL_GetTick>
 800561e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005622:	f7fd ffe7 	bl	80035f4 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e05c      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005634:	4b11      	ldr	r3, [pc, #68]	; (800567c <HAL_RCC_OscConfig+0x470>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0f0      	beq.n	8005622 <HAL_RCC_OscConfig+0x416>
 8005640:	e054      	b.n	80056ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005642:	4b10      	ldr	r3, [pc, #64]	; (8005684 <HAL_RCC_OscConfig+0x478>)
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005648:	f7fd ffd4 	bl	80035f4 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005650:	f7fd ffd0 	bl	80035f4 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e045      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005662:	4b06      	ldr	r3, [pc, #24]	; (800567c <HAL_RCC_OscConfig+0x470>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f0      	bne.n	8005650 <HAL_RCC_OscConfig+0x444>
 800566e:	e03d      	b.n	80056ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d107      	bne.n	8005688 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e038      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
 800567c:	40023800 	.word	0x40023800
 8005680:	40007000 	.word	0x40007000
 8005684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005688:	4b1b      	ldr	r3, [pc, #108]	; (80056f8 <HAL_RCC_OscConfig+0x4ec>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d028      	beq.n	80056e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d121      	bne.n	80056e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d11a      	bne.n	80056e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056b8:	4013      	ands	r3, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d111      	bne.n	80056e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	085b      	lsrs	r3, r3, #1
 80056d0:	3b01      	subs	r3, #1
 80056d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d107      	bne.n	80056e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d001      	beq.n	80056ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	40023800 	.word	0x40023800

080056fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e0cc      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005710:	4b68      	ldr	r3, [pc, #416]	; (80058b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 030f 	and.w	r3, r3, #15
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	429a      	cmp	r2, r3
 800571c:	d90c      	bls.n	8005738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800571e:	4b65      	ldr	r3, [pc, #404]	; (80058b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005726:	4b63      	ldr	r3, [pc, #396]	; (80058b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d001      	beq.n	8005738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e0b8      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d020      	beq.n	8005786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005750:	4b59      	ldr	r3, [pc, #356]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4a58      	ldr	r2, [pc, #352]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800575a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005768:	4b53      	ldr	r3, [pc, #332]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	4a52      	ldr	r2, [pc, #328]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005774:	4b50      	ldr	r3, [pc, #320]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	494d      	ldr	r1, [pc, #308]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	4313      	orrs	r3, r2
 8005784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d044      	beq.n	800581c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d107      	bne.n	80057aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800579a:	4b47      	ldr	r3, [pc, #284]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d119      	bne.n	80057da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e07f      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d003      	beq.n	80057ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d107      	bne.n	80057ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ba:	4b3f      	ldr	r3, [pc, #252]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e06f      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ca:	4b3b      	ldr	r3, [pc, #236]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e067      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057da:	4b37      	ldr	r3, [pc, #220]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f023 0203 	bic.w	r2, r3, #3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	4934      	ldr	r1, [pc, #208]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057ec:	f7fd ff02 	bl	80035f4 <HAL_GetTick>
 80057f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057f2:	e00a      	b.n	800580a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f4:	f7fd fefe 	bl	80035f4 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005802:	4293      	cmp	r3, r2
 8005804:	d901      	bls.n	800580a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e04f      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800580a:	4b2b      	ldr	r3, [pc, #172]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 020c 	and.w	r2, r3, #12
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	429a      	cmp	r2, r3
 800581a:	d1eb      	bne.n	80057f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800581c:	4b25      	ldr	r3, [pc, #148]	; (80058b4 <HAL_RCC_ClockConfig+0x1b8>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d20c      	bcs.n	8005844 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582a:	4b22      	ldr	r3, [pc, #136]	; (80058b4 <HAL_RCC_ClockConfig+0x1b8>)
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005832:	4b20      	ldr	r3, [pc, #128]	; (80058b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d001      	beq.n	8005844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e032      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d008      	beq.n	8005862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005850:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4916      	ldr	r1, [pc, #88]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	4313      	orrs	r3, r2
 8005860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d009      	beq.n	8005882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800586e:	4b12      	ldr	r3, [pc, #72]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	490e      	ldr	r1, [pc, #56]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	4313      	orrs	r3, r2
 8005880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005882:	f000 f821 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 8005886:	4602      	mov	r2, r0
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	091b      	lsrs	r3, r3, #4
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	490a      	ldr	r1, [pc, #40]	; (80058bc <HAL_RCC_ClockConfig+0x1c0>)
 8005894:	5ccb      	ldrb	r3, [r1, r3]
 8005896:	fa22 f303 	lsr.w	r3, r2, r3
 800589a:	4a09      	ldr	r2, [pc, #36]	; (80058c0 <HAL_RCC_ClockConfig+0x1c4>)
 800589c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800589e:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <HAL_RCC_ClockConfig+0x1c8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fd fe62 	bl	800356c <HAL_InitTick>

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40023c00 	.word	0x40023c00
 80058b8:	40023800 	.word	0x40023800
 80058bc:	0801a4dc 	.word	0x0801a4dc
 80058c0:	20000000 	.word	0x20000000
 80058c4:	20000004 	.word	0x20000004

080058c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058cc:	b094      	sub	sp, #80	; 0x50
 80058ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	647b      	str	r3, [r7, #68]	; 0x44
 80058d4:	2300      	movs	r3, #0
 80058d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d8:	2300      	movs	r3, #0
 80058da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058e0:	4b79      	ldr	r3, [pc, #484]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 030c 	and.w	r3, r3, #12
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d00d      	beq.n	8005908 <HAL_RCC_GetSysClockFreq+0x40>
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	f200 80e1 	bhi.w	8005ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <HAL_RCC_GetSysClockFreq+0x34>
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	d003      	beq.n	8005902 <HAL_RCC_GetSysClockFreq+0x3a>
 80058fa:	e0db      	b.n	8005ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058fc:	4b73      	ldr	r3, [pc, #460]	; (8005acc <HAL_RCC_GetSysClockFreq+0x204>)
 80058fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005900:	e0db      	b.n	8005aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005902:	4b73      	ldr	r3, [pc, #460]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005904:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005906:	e0d8      	b.n	8005aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005908:	4b6f      	ldr	r3, [pc, #444]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005910:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005912:	4b6d      	ldr	r3, [pc, #436]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d063      	beq.n	80059e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800591e:	4b6a      	ldr	r3, [pc, #424]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	099b      	lsrs	r3, r3, #6
 8005924:	2200      	movs	r2, #0
 8005926:	63bb      	str	r3, [r7, #56]	; 0x38
 8005928:	63fa      	str	r2, [r7, #60]	; 0x3c
 800592a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005930:	633b      	str	r3, [r7, #48]	; 0x30
 8005932:	2300      	movs	r3, #0
 8005934:	637b      	str	r3, [r7, #52]	; 0x34
 8005936:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800593a:	4622      	mov	r2, r4
 800593c:	462b      	mov	r3, r5
 800593e:	f04f 0000 	mov.w	r0, #0
 8005942:	f04f 0100 	mov.w	r1, #0
 8005946:	0159      	lsls	r1, r3, #5
 8005948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800594c:	0150      	lsls	r0, r2, #5
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4621      	mov	r1, r4
 8005954:	1a51      	subs	r1, r2, r1
 8005956:	6139      	str	r1, [r7, #16]
 8005958:	4629      	mov	r1, r5
 800595a:	eb63 0301 	sbc.w	r3, r3, r1
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800596c:	4659      	mov	r1, fp
 800596e:	018b      	lsls	r3, r1, #6
 8005970:	4651      	mov	r1, sl
 8005972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005976:	4651      	mov	r1, sl
 8005978:	018a      	lsls	r2, r1, #6
 800597a:	4651      	mov	r1, sl
 800597c:	ebb2 0801 	subs.w	r8, r2, r1
 8005980:	4659      	mov	r1, fp
 8005982:	eb63 0901 	sbc.w	r9, r3, r1
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800599a:	4690      	mov	r8, r2
 800599c:	4699      	mov	r9, r3
 800599e:	4623      	mov	r3, r4
 80059a0:	eb18 0303 	adds.w	r3, r8, r3
 80059a4:	60bb      	str	r3, [r7, #8]
 80059a6:	462b      	mov	r3, r5
 80059a8:	eb49 0303 	adc.w	r3, r9, r3
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059ba:	4629      	mov	r1, r5
 80059bc:	024b      	lsls	r3, r1, #9
 80059be:	4621      	mov	r1, r4
 80059c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059c4:	4621      	mov	r1, r4
 80059c6:	024a      	lsls	r2, r1, #9
 80059c8:	4610      	mov	r0, r2
 80059ca:	4619      	mov	r1, r3
 80059cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ce:	2200      	movs	r2, #0
 80059d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059d8:	f7fb f976 	bl	8000cc8 <__aeabi_uldivmod>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	4613      	mov	r3, r2
 80059e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e4:	e058      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059e6:	4b38      	ldr	r3, [pc, #224]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	099b      	lsrs	r3, r3, #6
 80059ec:	2200      	movs	r2, #0
 80059ee:	4618      	mov	r0, r3
 80059f0:	4611      	mov	r1, r2
 80059f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059f6:	623b      	str	r3, [r7, #32]
 80059f8:	2300      	movs	r3, #0
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
 80059fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a00:	4642      	mov	r2, r8
 8005a02:	464b      	mov	r3, r9
 8005a04:	f04f 0000 	mov.w	r0, #0
 8005a08:	f04f 0100 	mov.w	r1, #0
 8005a0c:	0159      	lsls	r1, r3, #5
 8005a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a12:	0150      	lsls	r0, r2, #5
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4641      	mov	r1, r8
 8005a1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a1e:	4649      	mov	r1, r9
 8005a20:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	f04f 0300 	mov.w	r3, #0
 8005a2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a38:	ebb2 040a 	subs.w	r4, r2, sl
 8005a3c:	eb63 050b 	sbc.w	r5, r3, fp
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	00eb      	lsls	r3, r5, #3
 8005a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a4e:	00e2      	lsls	r2, r4, #3
 8005a50:	4614      	mov	r4, r2
 8005a52:	461d      	mov	r5, r3
 8005a54:	4643      	mov	r3, r8
 8005a56:	18e3      	adds	r3, r4, r3
 8005a58:	603b      	str	r3, [r7, #0]
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	eb45 0303 	adc.w	r3, r5, r3
 8005a60:	607b      	str	r3, [r7, #4]
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a6e:	4629      	mov	r1, r5
 8005a70:	028b      	lsls	r3, r1, #10
 8005a72:	4621      	mov	r1, r4
 8005a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a78:	4621      	mov	r1, r4
 8005a7a:	028a      	lsls	r2, r1, #10
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a82:	2200      	movs	r2, #0
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	61fa      	str	r2, [r7, #28]
 8005a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a8c:	f7fb f91c 	bl	8000cc8 <__aeabi_uldivmod>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4613      	mov	r3, r2
 8005a96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a98:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	0c1b      	lsrs	r3, r3, #16
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005aa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ab2:	e002      	b.n	8005aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <HAL_RCC_GetSysClockFreq+0x204>)
 8005ab6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3750      	adds	r7, #80	; 0x50
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ac6:	bf00      	nop
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	00f42400 	.word	0x00f42400
 8005ad0:	007a1200 	.word	0x007a1200

08005ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ad8:	4b03      	ldr	r3, [pc, #12]	; (8005ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ada:	681b      	ldr	r3, [r3, #0]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	20000000 	.word	0x20000000

08005aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005af0:	f7ff fff0 	bl	8005ad4 <HAL_RCC_GetHCLKFreq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	0a9b      	lsrs	r3, r3, #10
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	4903      	ldr	r1, [pc, #12]	; (8005b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b02:	5ccb      	ldrb	r3, [r1, r3]
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	0801a4ec 	.word	0x0801a4ec

08005b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b18:	f7ff ffdc 	bl	8005ad4 <HAL_RCC_GetHCLKFreq>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	0b5b      	lsrs	r3, r3, #13
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	4903      	ldr	r1, [pc, #12]	; (8005b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b2a:	5ccb      	ldrb	r3, [r1, r3]
 8005b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40023800 	.word	0x40023800
 8005b38:	0801a4ec 	.word	0x0801a4ec

08005b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e07b      	b.n	8005c46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d108      	bne.n	8005b68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b5e:	d009      	beq.n	8005b74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	61da      	str	r2, [r3, #28]
 8005b66:	e005      	b.n	8005b74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fc fdb6 	bl	8002700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005baa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf8:	ea42 0103 	orr.w	r1, r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	f003 0104 	and.w	r1, r3, #4
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	f003 0210 	and.w	r2, r3, #16
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69da      	ldr	r2, [r3, #28]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e042      	b.n	8005ce6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d106      	bne.n	8005c7a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7fc fdff 	bl	8002878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2224      	movs	r2, #36	; 0x24
 8005c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f972 	bl	8005f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691a      	ldr	r2, [r3, #16]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ca6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cb6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b08a      	sub	sp, #40	; 0x28
 8005cf2:	af02      	add	r7, sp, #8
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	603b      	str	r3, [r7, #0]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	d175      	bne.n	8005dfa <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <HAL_UART_Transmit+0x2c>
 8005d14:	88fb      	ldrh	r3, [r7, #6]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e06e      	b.n	8005dfc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2221      	movs	r2, #33	; 0x21
 8005d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d2c:	f7fd fc62 	bl	80035f4 <HAL_GetTick>
 8005d30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	88fa      	ldrh	r2, [r7, #6]
 8005d36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	88fa      	ldrh	r2, [r7, #6]
 8005d3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d46:	d108      	bne.n	8005d5a <HAL_UART_Transmit+0x6c>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d104      	bne.n	8005d5a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d50:	2300      	movs	r3, #0
 8005d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	61bb      	str	r3, [r7, #24]
 8005d58:	e003      	b.n	8005d62 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d62:	e02e      	b.n	8005dc2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2180      	movs	r1, #128	; 0x80
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f848 	bl	8005e04 <UART_WaitOnFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e03a      	b.n	8005dfc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10b      	bne.n	8005da4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	461a      	mov	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d9a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	3302      	adds	r3, #2
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	e007      	b.n	8005db4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	781a      	ldrb	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	3301      	adds	r3, #1
 8005db2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1cb      	bne.n	8005d64 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2140      	movs	r1, #64	; 0x40
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 f814 	bl	8005e04 <UART_WaitOnFlagUntilTimeout>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d005      	beq.n	8005dee <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e006      	b.n	8005dfc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	e000      	b.n	8005dfc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005dfa:	2302      	movs	r3, #2
  }
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3720      	adds	r7, #32
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	4613      	mov	r3, r2
 8005e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e14:	e03b      	b.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1c:	d037      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e1e:	f7fd fbe9 	bl	80035f4 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	6a3a      	ldr	r2, [r7, #32]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d302      	bcc.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e03a      	b.n	8005eae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d023      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2b80      	cmp	r3, #128	; 0x80
 8005e4a:	d020      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d01d      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d116      	bne.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f81d 	bl	8005eb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2208      	movs	r2, #8
 8005e80:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e00f      	b.n	8005eae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4013      	ands	r3, r2
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	bf0c      	ite	eq
 8005e9e:	2301      	moveq	r3, #1
 8005ea0:	2300      	movne	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d0b4      	beq.n	8005e16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b095      	sub	sp, #84	; 0x54
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	330c      	adds	r3, #12
 8005ec4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	330c      	adds	r3, #12
 8005edc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ede:	643a      	str	r2, [r7, #64]	; 0x40
 8005ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ee4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e5      	bne.n	8005ebe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3314      	adds	r3, #20
 8005ef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	f023 0301 	bic.w	r3, r3, #1
 8005f08:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3314      	adds	r3, #20
 8005f10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f1a:	e841 2300 	strex	r3, r2, [r1]
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1e5      	bne.n	8005ef2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d119      	bne.n	8005f62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	330c      	adds	r3, #12
 8005f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f023 0310 	bic.w	r3, r3, #16
 8005f44:	647b      	str	r3, [r7, #68]	; 0x44
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	330c      	adds	r3, #12
 8005f4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f4e:	61ba      	str	r2, [r7, #24]
 8005f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	6979      	ldr	r1, [r7, #20]
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e5      	bne.n	8005f2e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f70:	bf00      	nop
 8005f72:	3754      	adds	r7, #84	; 0x54
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f80:	b0c0      	sub	sp, #256	; 0x100
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f98:	68d9      	ldr	r1, [r3, #12]
 8005f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	ea40 0301 	orr.w	r3, r0, r1
 8005fa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fd4:	f021 010c 	bic.w	r1, r1, #12
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fe2:	430b      	orrs	r3, r1
 8005fe4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff6:	6999      	ldr	r1, [r3, #24]
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	ea40 0301 	orr.w	r3, r0, r1
 8006002:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	4b8f      	ldr	r3, [pc, #572]	; (8006248 <UART_SetConfig+0x2cc>)
 800600c:	429a      	cmp	r2, r3
 800600e:	d005      	beq.n	800601c <UART_SetConfig+0xa0>
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	4b8d      	ldr	r3, [pc, #564]	; (800624c <UART_SetConfig+0x2d0>)
 8006018:	429a      	cmp	r2, r3
 800601a:	d104      	bne.n	8006026 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800601c:	f7ff fd7a 	bl	8005b14 <HAL_RCC_GetPCLK2Freq>
 8006020:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006024:	e003      	b.n	800602e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006026:	f7ff fd61 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 800602a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800602e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006038:	f040 810c 	bne.w	8006254 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800603c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006040:	2200      	movs	r2, #0
 8006042:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006046:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800604a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800604e:	4622      	mov	r2, r4
 8006050:	462b      	mov	r3, r5
 8006052:	1891      	adds	r1, r2, r2
 8006054:	65b9      	str	r1, [r7, #88]	; 0x58
 8006056:	415b      	adcs	r3, r3
 8006058:	65fb      	str	r3, [r7, #92]	; 0x5c
 800605a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800605e:	4621      	mov	r1, r4
 8006060:	eb12 0801 	adds.w	r8, r2, r1
 8006064:	4629      	mov	r1, r5
 8006066:	eb43 0901 	adc.w	r9, r3, r1
 800606a:	f04f 0200 	mov.w	r2, #0
 800606e:	f04f 0300 	mov.w	r3, #0
 8006072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800607a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800607e:	4690      	mov	r8, r2
 8006080:	4699      	mov	r9, r3
 8006082:	4623      	mov	r3, r4
 8006084:	eb18 0303 	adds.w	r3, r8, r3
 8006088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800608c:	462b      	mov	r3, r5
 800608e:	eb49 0303 	adc.w	r3, r9, r3
 8006092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060aa:	460b      	mov	r3, r1
 80060ac:	18db      	adds	r3, r3, r3
 80060ae:	653b      	str	r3, [r7, #80]	; 0x50
 80060b0:	4613      	mov	r3, r2
 80060b2:	eb42 0303 	adc.w	r3, r2, r3
 80060b6:	657b      	str	r3, [r7, #84]	; 0x54
 80060b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060c0:	f7fa fe02 	bl	8000cc8 <__aeabi_uldivmod>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4b61      	ldr	r3, [pc, #388]	; (8006250 <UART_SetConfig+0x2d4>)
 80060ca:	fba3 2302 	umull	r2, r3, r3, r2
 80060ce:	095b      	lsrs	r3, r3, #5
 80060d0:	011c      	lsls	r4, r3, #4
 80060d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060e4:	4642      	mov	r2, r8
 80060e6:	464b      	mov	r3, r9
 80060e8:	1891      	adds	r1, r2, r2
 80060ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80060ec:	415b      	adcs	r3, r3
 80060ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060f4:	4641      	mov	r1, r8
 80060f6:	eb12 0a01 	adds.w	sl, r2, r1
 80060fa:	4649      	mov	r1, r9
 80060fc:	eb43 0b01 	adc.w	fp, r3, r1
 8006100:	f04f 0200 	mov.w	r2, #0
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800610c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006114:	4692      	mov	sl, r2
 8006116:	469b      	mov	fp, r3
 8006118:	4643      	mov	r3, r8
 800611a:	eb1a 0303 	adds.w	r3, sl, r3
 800611e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006122:	464b      	mov	r3, r9
 8006124:	eb4b 0303 	adc.w	r3, fp, r3
 8006128:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006138:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800613c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006140:	460b      	mov	r3, r1
 8006142:	18db      	adds	r3, r3, r3
 8006144:	643b      	str	r3, [r7, #64]	; 0x40
 8006146:	4613      	mov	r3, r2
 8006148:	eb42 0303 	adc.w	r3, r2, r3
 800614c:	647b      	str	r3, [r7, #68]	; 0x44
 800614e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006152:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006156:	f7fa fdb7 	bl	8000cc8 <__aeabi_uldivmod>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4611      	mov	r1, r2
 8006160:	4b3b      	ldr	r3, [pc, #236]	; (8006250 <UART_SetConfig+0x2d4>)
 8006162:	fba3 2301 	umull	r2, r3, r3, r1
 8006166:	095b      	lsrs	r3, r3, #5
 8006168:	2264      	movs	r2, #100	; 0x64
 800616a:	fb02 f303 	mul.w	r3, r2, r3
 800616e:	1acb      	subs	r3, r1, r3
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006176:	4b36      	ldr	r3, [pc, #216]	; (8006250 <UART_SetConfig+0x2d4>)
 8006178:	fba3 2302 	umull	r2, r3, r3, r2
 800617c:	095b      	lsrs	r3, r3, #5
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006184:	441c      	add	r4, r3
 8006186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800618a:	2200      	movs	r2, #0
 800618c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006190:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006194:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006198:	4642      	mov	r2, r8
 800619a:	464b      	mov	r3, r9
 800619c:	1891      	adds	r1, r2, r2
 800619e:	63b9      	str	r1, [r7, #56]	; 0x38
 80061a0:	415b      	adcs	r3, r3
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061a8:	4641      	mov	r1, r8
 80061aa:	1851      	adds	r1, r2, r1
 80061ac:	6339      	str	r1, [r7, #48]	; 0x30
 80061ae:	4649      	mov	r1, r9
 80061b0:	414b      	adcs	r3, r1
 80061b2:	637b      	str	r3, [r7, #52]	; 0x34
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	f04f 0300 	mov.w	r3, #0
 80061bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061c0:	4659      	mov	r1, fp
 80061c2:	00cb      	lsls	r3, r1, #3
 80061c4:	4651      	mov	r1, sl
 80061c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ca:	4651      	mov	r1, sl
 80061cc:	00ca      	lsls	r2, r1, #3
 80061ce:	4610      	mov	r0, r2
 80061d0:	4619      	mov	r1, r3
 80061d2:	4603      	mov	r3, r0
 80061d4:	4642      	mov	r2, r8
 80061d6:	189b      	adds	r3, r3, r2
 80061d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061dc:	464b      	mov	r3, r9
 80061de:	460a      	mov	r2, r1
 80061e0:	eb42 0303 	adc.w	r3, r2, r3
 80061e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061fc:	460b      	mov	r3, r1
 80061fe:	18db      	adds	r3, r3, r3
 8006200:	62bb      	str	r3, [r7, #40]	; 0x28
 8006202:	4613      	mov	r3, r2
 8006204:	eb42 0303 	adc.w	r3, r2, r3
 8006208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800620a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800620e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006212:	f7fa fd59 	bl	8000cc8 <__aeabi_uldivmod>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	4b0d      	ldr	r3, [pc, #52]	; (8006250 <UART_SetConfig+0x2d4>)
 800621c:	fba3 1302 	umull	r1, r3, r3, r2
 8006220:	095b      	lsrs	r3, r3, #5
 8006222:	2164      	movs	r1, #100	; 0x64
 8006224:	fb01 f303 	mul.w	r3, r1, r3
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	3332      	adds	r3, #50	; 0x32
 800622e:	4a08      	ldr	r2, [pc, #32]	; (8006250 <UART_SetConfig+0x2d4>)
 8006230:	fba2 2303 	umull	r2, r3, r2, r3
 8006234:	095b      	lsrs	r3, r3, #5
 8006236:	f003 0207 	and.w	r2, r3, #7
 800623a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4422      	add	r2, r4
 8006242:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006244:	e106      	b.n	8006454 <UART_SetConfig+0x4d8>
 8006246:	bf00      	nop
 8006248:	40011000 	.word	0x40011000
 800624c:	40011400 	.word	0x40011400
 8006250:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006258:	2200      	movs	r2, #0
 800625a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800625e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006262:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006266:	4642      	mov	r2, r8
 8006268:	464b      	mov	r3, r9
 800626a:	1891      	adds	r1, r2, r2
 800626c:	6239      	str	r1, [r7, #32]
 800626e:	415b      	adcs	r3, r3
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
 8006272:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006276:	4641      	mov	r1, r8
 8006278:	1854      	adds	r4, r2, r1
 800627a:	4649      	mov	r1, r9
 800627c:	eb43 0501 	adc.w	r5, r3, r1
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	00eb      	lsls	r3, r5, #3
 800628a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800628e:	00e2      	lsls	r2, r4, #3
 8006290:	4614      	mov	r4, r2
 8006292:	461d      	mov	r5, r3
 8006294:	4643      	mov	r3, r8
 8006296:	18e3      	adds	r3, r4, r3
 8006298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800629c:	464b      	mov	r3, r9
 800629e:	eb45 0303 	adc.w	r3, r5, r3
 80062a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062c2:	4629      	mov	r1, r5
 80062c4:	008b      	lsls	r3, r1, #2
 80062c6:	4621      	mov	r1, r4
 80062c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062cc:	4621      	mov	r1, r4
 80062ce:	008a      	lsls	r2, r1, #2
 80062d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062d4:	f7fa fcf8 	bl	8000cc8 <__aeabi_uldivmod>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4b60      	ldr	r3, [pc, #384]	; (8006460 <UART_SetConfig+0x4e4>)
 80062de:	fba3 2302 	umull	r2, r3, r3, r2
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	011c      	lsls	r4, r3, #4
 80062e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80062f8:	4642      	mov	r2, r8
 80062fa:	464b      	mov	r3, r9
 80062fc:	1891      	adds	r1, r2, r2
 80062fe:	61b9      	str	r1, [r7, #24]
 8006300:	415b      	adcs	r3, r3
 8006302:	61fb      	str	r3, [r7, #28]
 8006304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006308:	4641      	mov	r1, r8
 800630a:	1851      	adds	r1, r2, r1
 800630c:	6139      	str	r1, [r7, #16]
 800630e:	4649      	mov	r1, r9
 8006310:	414b      	adcs	r3, r1
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	f04f 0300 	mov.w	r3, #0
 800631c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006320:	4659      	mov	r1, fp
 8006322:	00cb      	lsls	r3, r1, #3
 8006324:	4651      	mov	r1, sl
 8006326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800632a:	4651      	mov	r1, sl
 800632c:	00ca      	lsls	r2, r1, #3
 800632e:	4610      	mov	r0, r2
 8006330:	4619      	mov	r1, r3
 8006332:	4603      	mov	r3, r0
 8006334:	4642      	mov	r2, r8
 8006336:	189b      	adds	r3, r3, r2
 8006338:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800633c:	464b      	mov	r3, r9
 800633e:	460a      	mov	r2, r1
 8006340:	eb42 0303 	adc.w	r3, r2, r3
 8006344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	67bb      	str	r3, [r7, #120]	; 0x78
 8006352:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	f04f 0300 	mov.w	r3, #0
 800635c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006360:	4649      	mov	r1, r9
 8006362:	008b      	lsls	r3, r1, #2
 8006364:	4641      	mov	r1, r8
 8006366:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800636a:	4641      	mov	r1, r8
 800636c:	008a      	lsls	r2, r1, #2
 800636e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006372:	f7fa fca9 	bl	8000cc8 <__aeabi_uldivmod>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4611      	mov	r1, r2
 800637c:	4b38      	ldr	r3, [pc, #224]	; (8006460 <UART_SetConfig+0x4e4>)
 800637e:	fba3 2301 	umull	r2, r3, r3, r1
 8006382:	095b      	lsrs	r3, r3, #5
 8006384:	2264      	movs	r2, #100	; 0x64
 8006386:	fb02 f303 	mul.w	r3, r2, r3
 800638a:	1acb      	subs	r3, r1, r3
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	3332      	adds	r3, #50	; 0x32
 8006390:	4a33      	ldr	r2, [pc, #204]	; (8006460 <UART_SetConfig+0x4e4>)
 8006392:	fba2 2303 	umull	r2, r3, r2, r3
 8006396:	095b      	lsrs	r3, r3, #5
 8006398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800639c:	441c      	add	r4, r3
 800639e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a2:	2200      	movs	r2, #0
 80063a4:	673b      	str	r3, [r7, #112]	; 0x70
 80063a6:	677a      	str	r2, [r7, #116]	; 0x74
 80063a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063ac:	4642      	mov	r2, r8
 80063ae:	464b      	mov	r3, r9
 80063b0:	1891      	adds	r1, r2, r2
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	415b      	adcs	r3, r3
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063bc:	4641      	mov	r1, r8
 80063be:	1851      	adds	r1, r2, r1
 80063c0:	6039      	str	r1, [r7, #0]
 80063c2:	4649      	mov	r1, r9
 80063c4:	414b      	adcs	r3, r1
 80063c6:	607b      	str	r3, [r7, #4]
 80063c8:	f04f 0200 	mov.w	r2, #0
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063d4:	4659      	mov	r1, fp
 80063d6:	00cb      	lsls	r3, r1, #3
 80063d8:	4651      	mov	r1, sl
 80063da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063de:	4651      	mov	r1, sl
 80063e0:	00ca      	lsls	r2, r1, #3
 80063e2:	4610      	mov	r0, r2
 80063e4:	4619      	mov	r1, r3
 80063e6:	4603      	mov	r3, r0
 80063e8:	4642      	mov	r2, r8
 80063ea:	189b      	adds	r3, r3, r2
 80063ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80063ee:	464b      	mov	r3, r9
 80063f0:	460a      	mov	r2, r1
 80063f2:	eb42 0303 	adc.w	r3, r2, r3
 80063f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	663b      	str	r3, [r7, #96]	; 0x60
 8006402:	667a      	str	r2, [r7, #100]	; 0x64
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	f04f 0300 	mov.w	r3, #0
 800640c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006410:	4649      	mov	r1, r9
 8006412:	008b      	lsls	r3, r1, #2
 8006414:	4641      	mov	r1, r8
 8006416:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800641a:	4641      	mov	r1, r8
 800641c:	008a      	lsls	r2, r1, #2
 800641e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006422:	f7fa fc51 	bl	8000cc8 <__aeabi_uldivmod>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4b0d      	ldr	r3, [pc, #52]	; (8006460 <UART_SetConfig+0x4e4>)
 800642c:	fba3 1302 	umull	r1, r3, r3, r2
 8006430:	095b      	lsrs	r3, r3, #5
 8006432:	2164      	movs	r1, #100	; 0x64
 8006434:	fb01 f303 	mul.w	r3, r1, r3
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	011b      	lsls	r3, r3, #4
 800643c:	3332      	adds	r3, #50	; 0x32
 800643e:	4a08      	ldr	r2, [pc, #32]	; (8006460 <UART_SetConfig+0x4e4>)
 8006440:	fba2 2303 	umull	r2, r3, r2, r3
 8006444:	095b      	lsrs	r3, r3, #5
 8006446:	f003 020f 	and.w	r2, r3, #15
 800644a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4422      	add	r2, r4
 8006452:	609a      	str	r2, [r3, #8]
}
 8006454:	bf00      	nop
 8006456:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800645a:	46bd      	mov	sp, r7
 800645c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006460:	51eb851f 	.word	0x51eb851f

08006464 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006464:	b084      	sub	sp, #16
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	f107 001c 	add.w	r0, r7, #28
 8006472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006476:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800647a:	2b01      	cmp	r3, #1
 800647c:	d123      	bne.n	80064c6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006482:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d105      	bne.n	80064ba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 faa0 	bl	8006a00 <USB_CoreReset>
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]
 80064c4:	e01b      	b.n	80064fe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fa94 	bl	8006a00 <USB_CoreReset>
 80064d8:	4603      	mov	r3, r0
 80064da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d106      	bne.n	80064f2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	639a      	str	r2, [r3, #56]	; 0x38
 80064f0:	e005      	b.n	80064fe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064fe:	7fbb      	ldrb	r3, [r7, #30]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d10b      	bne.n	800651c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f043 0206 	orr.w	r2, r3, #6
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f043 0220 	orr.w	r2, r3, #32
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800651c:	7bfb      	ldrb	r3, [r7, #15]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006528:	b004      	add	sp, #16
 800652a:	4770      	bx	lr

0800652c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f023 0201 	bic.w	r2, r3, #1
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	460b      	mov	r3, r1
 8006558:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d115      	bne.n	800659c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800657c:	200a      	movs	r0, #10
 800657e:	f7fd f845 	bl	800360c <HAL_Delay>
      ms += 10U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	330a      	adds	r3, #10
 8006586:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fa2b 	bl	80069e4 <USB_GetMode>
 800658e:	4603      	mov	r3, r0
 8006590:	2b01      	cmp	r3, #1
 8006592:	d01e      	beq.n	80065d2 <USB_SetCurrentMode+0x84>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2bc7      	cmp	r3, #199	; 0xc7
 8006598:	d9f0      	bls.n	800657c <USB_SetCurrentMode+0x2e>
 800659a:	e01a      	b.n	80065d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d115      	bne.n	80065ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80065ae:	200a      	movs	r0, #10
 80065b0:	f7fd f82c 	bl	800360c <HAL_Delay>
      ms += 10U;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	330a      	adds	r3, #10
 80065b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fa12 	bl	80069e4 <USB_GetMode>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d005      	beq.n	80065d2 <USB_SetCurrentMode+0x84>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2bc7      	cmp	r3, #199	; 0xc7
 80065ca:	d9f0      	bls.n	80065ae <USB_SetCurrentMode+0x60>
 80065cc:	e001      	b.n	80065d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e005      	b.n	80065de <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2bc8      	cmp	r3, #200	; 0xc8
 80065d6:	d101      	bne.n	80065dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e000      	b.n	80065de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065e8:	b084      	sub	sp, #16
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b086      	sub	sp, #24
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006602:	2300      	movs	r3, #0
 8006604:	613b      	str	r3, [r7, #16]
 8006606:	e009      	b.n	800661c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	3340      	adds	r3, #64	; 0x40
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	2200      	movs	r2, #0
 8006614:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	3301      	adds	r3, #1
 800661a:	613b      	str	r3, [r7, #16]
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2b0e      	cmp	r3, #14
 8006620:	d9f2      	bls.n	8006608 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006622:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006626:	2b00      	cmp	r3, #0
 8006628:	d11c      	bne.n	8006664 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006638:	f043 0302 	orr.w	r3, r3, #2
 800663c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006642:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	639a      	str	r2, [r3, #56]	; 0x38
 8006662:	e00b      	b.n	800667c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006674:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006682:	461a      	mov	r2, r3
 8006684:	2300      	movs	r3, #0
 8006686:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006688:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800668c:	2b01      	cmp	r3, #1
 800668e:	d10d      	bne.n	80066ac <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006694:	2b00      	cmp	r3, #0
 8006696:	d104      	bne.n	80066a2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006698:	2100      	movs	r1, #0
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f968 	bl	8006970 <USB_SetDevSpeed>
 80066a0:	e008      	b.n	80066b4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066a2:	2101      	movs	r1, #1
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f963 	bl	8006970 <USB_SetDevSpeed>
 80066aa:	e003      	b.n	80066b4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066ac:	2103      	movs	r1, #3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f95e 	bl	8006970 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066b4:	2110      	movs	r1, #16
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f8fa 	bl	80068b0 <USB_FlushTxFifo>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f924 	bl	8006914 <USB_FlushRxFifo>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066dc:	461a      	mov	r2, r3
 80066de:	2300      	movs	r3, #0
 80066e0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e8:	461a      	mov	r2, r3
 80066ea:	2300      	movs	r3, #0
 80066ec:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f4:	461a      	mov	r2, r3
 80066f6:	2300      	movs	r3, #0
 80066f8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066fa:	2300      	movs	r3, #0
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	e043      	b.n	8006788 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006716:	d118      	bne.n	800674a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10a      	bne.n	8006734 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672a:	461a      	mov	r2, r3
 800672c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	e013      	b.n	800675c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	461a      	mov	r2, r3
 8006742:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	e008      	b.n	800675c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006756:	461a      	mov	r2, r3
 8006758:	2300      	movs	r3, #0
 800675a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006768:	461a      	mov	r2, r3
 800676a:	2300      	movs	r3, #0
 800676c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677a:	461a      	mov	r2, r3
 800677c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006780:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	3301      	adds	r3, #1
 8006786:	613b      	str	r3, [r7, #16]
 8006788:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800678c:	461a      	mov	r2, r3
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	4293      	cmp	r3, r2
 8006792:	d3b5      	bcc.n	8006700 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006794:	2300      	movs	r3, #0
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	e043      	b.n	8006822 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067b0:	d118      	bne.n	80067e4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c4:	461a      	mov	r2, r3
 80067c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	e013      	b.n	80067f6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067da:	461a      	mov	r2, r3
 80067dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	e008      	b.n	80067f6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f0:	461a      	mov	r2, r3
 80067f2:	2300      	movs	r3, #0
 80067f4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006802:	461a      	mov	r2, r3
 8006804:	2300      	movs	r3, #0
 8006806:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006814:	461a      	mov	r2, r3
 8006816:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800681a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	3301      	adds	r3, #1
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006826:	461a      	mov	r2, r3
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	4293      	cmp	r3, r2
 800682c:	d3b5      	bcc.n	800679a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800683c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006840:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800684e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006850:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006854:	2b00      	cmp	r3, #0
 8006856:	d105      	bne.n	8006864 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	f043 0210 	orr.w	r2, r3, #16
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699a      	ldr	r2, [r3, #24]
 8006868:	4b10      	ldr	r3, [pc, #64]	; (80068ac <USB_DevInit+0x2c4>)
 800686a:	4313      	orrs	r3, r2
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006870:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f043 0208 	orr.w	r2, r3, #8
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006884:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006888:	2b01      	cmp	r3, #1
 800688a:	d107      	bne.n	800689c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006894:	f043 0304 	orr.w	r3, r3, #4
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800689c:	7dfb      	ldrb	r3, [r7, #23]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068a8:	b004      	add	sp, #16
 80068aa:	4770      	bx	lr
 80068ac:	803c3800 	.word	0x803c3800

080068b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3301      	adds	r3, #1
 80068c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80068ca:	d901      	bls.n	80068d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e01b      	b.n	8006908 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	daf2      	bge.n	80068be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	019b      	lsls	r3, r3, #6
 80068e0:	f043 0220 	orr.w	r2, r3, #32
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3301      	adds	r3, #1
 80068ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80068f4:	d901      	bls.n	80068fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e006      	b.n	8006908 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b20      	cmp	r3, #32
 8006904:	d0f0      	beq.n	80068e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3301      	adds	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800692c:	d901      	bls.n	8006932 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e018      	b.n	8006964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	daf2      	bge.n	8006920 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2210      	movs	r2, #16
 8006942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3301      	adds	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006950:	d901      	bls.n	8006956 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e006      	b.n	8006964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f003 0310 	and.w	r3, r3, #16
 800695e:	2b10      	cmp	r3, #16
 8006960:	d0f0      	beq.n	8006944 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	68f9      	ldr	r1, [r7, #12]
 800698c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006990:	4313      	orrs	r3, r2
 8006992:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b085      	sub	sp, #20
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069bc:	f023 0303 	bic.w	r3, r3, #3
 80069c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069d0:	f043 0302 	orr.w	r3, r3, #2
 80069d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	f003 0301 	and.w	r3, r3, #1
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006a18:	d901      	bls.n	8006a1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e01b      	b.n	8006a56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	daf2      	bge.n	8006a0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f043 0201 	orr.w	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006a42:	d901      	bls.n	8006a48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e006      	b.n	8006a56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d0f0      	beq.n	8006a36 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
	...

08006a64 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006a6a:	4b87      	ldr	r3, [pc, #540]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006a6c:	22c0      	movs	r2, #192	; 0xc0
 8006a6e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006a70:	4b85      	ldr	r3, [pc, #532]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006a72:	22a8      	movs	r2, #168	; 0xa8
 8006a74:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8006a76:	4b84      	ldr	r3, [pc, #528]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006a78:	2201      	movs	r2, #1
 8006a7a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 110;
 8006a7c:	4b82      	ldr	r3, [pc, #520]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006a7e:	226e      	movs	r2, #110	; 0x6e
 8006a80:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006a82:	4b82      	ldr	r3, [pc, #520]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006a84:	22ff      	movs	r2, #255	; 0xff
 8006a86:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006a88:	4b80      	ldr	r3, [pc, #512]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006a8a:	22ff      	movs	r2, #255	; 0xff
 8006a8c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006a8e:	4b7f      	ldr	r3, [pc, #508]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006a90:	22ff      	movs	r2, #255	; 0xff
 8006a92:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006a94:	4b7d      	ldr	r3, [pc, #500]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8006a9a:	4b7d      	ldr	r3, [pc, #500]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006a9c:	22c0      	movs	r2, #192	; 0xc0
 8006a9e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006aa0:	4b7b      	ldr	r3, [pc, #492]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006aa2:	22a8      	movs	r2, #168	; 0xa8
 8006aa4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8006aa6:	4b7a      	ldr	r3, [pc, #488]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006aac:	4b78      	ldr	r3, [pc, #480]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006aae:	2201      	movs	r2, #1
 8006ab0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8006ab2:	f000 fd19 	bl	80074e8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006ab6:	4b74      	ldr	r3, [pc, #464]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	061a      	lsls	r2, r3, #24
 8006abc:	4b72      	ldr	r3, [pc, #456]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006abe:	785b      	ldrb	r3, [r3, #1]
 8006ac0:	041b      	lsls	r3, r3, #16
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	4b70      	ldr	r3, [pc, #448]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006ac6:	789b      	ldrb	r3, [r3, #2]
 8006ac8:	021b      	lsls	r3, r3, #8
 8006aca:	4313      	orrs	r3, r2
 8006acc:	4a6e      	ldr	r2, [pc, #440]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006ace:	78d2      	ldrb	r2, [r2, #3]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	061a      	lsls	r2, r3, #24
 8006ad4:	4b6c      	ldr	r3, [pc, #432]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	0619      	lsls	r1, r3, #24
 8006ada:	4b6b      	ldr	r3, [pc, #428]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006adc:	785b      	ldrb	r3, [r3, #1]
 8006ade:	041b      	lsls	r3, r3, #16
 8006ae0:	4319      	orrs	r1, r3
 8006ae2:	4b69      	ldr	r3, [pc, #420]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006ae4:	789b      	ldrb	r3, [r3, #2]
 8006ae6:	021b      	lsls	r3, r3, #8
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	4967      	ldr	r1, [pc, #412]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006aec:	78c9      	ldrb	r1, [r1, #3]
 8006aee:	430b      	orrs	r3, r1
 8006af0:	021b      	lsls	r3, r3, #8
 8006af2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006af6:	431a      	orrs	r2, r3
 8006af8:	4b63      	ldr	r3, [pc, #396]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	0619      	lsls	r1, r3, #24
 8006afe:	4b62      	ldr	r3, [pc, #392]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006b00:	785b      	ldrb	r3, [r3, #1]
 8006b02:	041b      	lsls	r3, r3, #16
 8006b04:	4319      	orrs	r1, r3
 8006b06:	4b60      	ldr	r3, [pc, #384]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006b08:	789b      	ldrb	r3, [r3, #2]
 8006b0a:	021b      	lsls	r3, r3, #8
 8006b0c:	430b      	orrs	r3, r1
 8006b0e:	495e      	ldr	r1, [pc, #376]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006b10:	78c9      	ldrb	r1, [r1, #3]
 8006b12:	430b      	orrs	r3, r1
 8006b14:	0a1b      	lsrs	r3, r3, #8
 8006b16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	4b5a      	ldr	r3, [pc, #360]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	0619      	lsls	r1, r3, #24
 8006b22:	4b59      	ldr	r3, [pc, #356]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006b24:	785b      	ldrb	r3, [r3, #1]
 8006b26:	041b      	lsls	r3, r3, #16
 8006b28:	4319      	orrs	r1, r3
 8006b2a:	4b57      	ldr	r3, [pc, #348]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006b2c:	789b      	ldrb	r3, [r3, #2]
 8006b2e:	021b      	lsls	r3, r3, #8
 8006b30:	430b      	orrs	r3, r1
 8006b32:	4955      	ldr	r1, [pc, #340]	; (8006c88 <MX_LWIP_Init+0x224>)
 8006b34:	78c9      	ldrb	r1, [r1, #3]
 8006b36:	430b      	orrs	r3, r1
 8006b38:	0e1b      	lsrs	r3, r3, #24
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	4a55      	ldr	r2, [pc, #340]	; (8006c94 <MX_LWIP_Init+0x230>)
 8006b3e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006b40:	4b52      	ldr	r3, [pc, #328]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	061a      	lsls	r2, r3, #24
 8006b46:	4b51      	ldr	r3, [pc, #324]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	4b4f      	ldr	r3, [pc, #316]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006b50:	789b      	ldrb	r3, [r3, #2]
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	4313      	orrs	r3, r2
 8006b56:	4a4d      	ldr	r2, [pc, #308]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006b58:	78d2      	ldrb	r2, [r2, #3]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	061a      	lsls	r2, r3, #24
 8006b5e:	4b4b      	ldr	r3, [pc, #300]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	0619      	lsls	r1, r3, #24
 8006b64:	4b49      	ldr	r3, [pc, #292]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006b66:	785b      	ldrb	r3, [r3, #1]
 8006b68:	041b      	lsls	r3, r3, #16
 8006b6a:	4319      	orrs	r1, r3
 8006b6c:	4b47      	ldr	r3, [pc, #284]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006b6e:	789b      	ldrb	r3, [r3, #2]
 8006b70:	021b      	lsls	r3, r3, #8
 8006b72:	430b      	orrs	r3, r1
 8006b74:	4945      	ldr	r1, [pc, #276]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006b76:	78c9      	ldrb	r1, [r1, #3]
 8006b78:	430b      	orrs	r3, r1
 8006b7a:	021b      	lsls	r3, r3, #8
 8006b7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b80:	431a      	orrs	r2, r3
 8006b82:	4b42      	ldr	r3, [pc, #264]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	0619      	lsls	r1, r3, #24
 8006b88:	4b40      	ldr	r3, [pc, #256]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006b8a:	785b      	ldrb	r3, [r3, #1]
 8006b8c:	041b      	lsls	r3, r3, #16
 8006b8e:	4319      	orrs	r1, r3
 8006b90:	4b3e      	ldr	r3, [pc, #248]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006b92:	789b      	ldrb	r3, [r3, #2]
 8006b94:	021b      	lsls	r3, r3, #8
 8006b96:	430b      	orrs	r3, r1
 8006b98:	493c      	ldr	r1, [pc, #240]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006b9a:	78c9      	ldrb	r1, [r1, #3]
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	4b39      	ldr	r3, [pc, #228]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	0619      	lsls	r1, r3, #24
 8006bac:	4b37      	ldr	r3, [pc, #220]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	041b      	lsls	r3, r3, #16
 8006bb2:	4319      	orrs	r1, r3
 8006bb4:	4b35      	ldr	r3, [pc, #212]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006bb6:	789b      	ldrb	r3, [r3, #2]
 8006bb8:	021b      	lsls	r3, r3, #8
 8006bba:	430b      	orrs	r3, r1
 8006bbc:	4933      	ldr	r1, [pc, #204]	; (8006c8c <MX_LWIP_Init+0x228>)
 8006bbe:	78c9      	ldrb	r1, [r1, #3]
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	0e1b      	lsrs	r3, r3, #24
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	4a34      	ldr	r2, [pc, #208]	; (8006c98 <MX_LWIP_Init+0x234>)
 8006bc8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006bca:	4b31      	ldr	r3, [pc, #196]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	061a      	lsls	r2, r3, #24
 8006bd0:	4b2f      	ldr	r3, [pc, #188]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006bd2:	785b      	ldrb	r3, [r3, #1]
 8006bd4:	041b      	lsls	r3, r3, #16
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	4b2d      	ldr	r3, [pc, #180]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006bda:	789b      	ldrb	r3, [r3, #2]
 8006bdc:	021b      	lsls	r3, r3, #8
 8006bde:	4313      	orrs	r3, r2
 8006be0:	4a2b      	ldr	r2, [pc, #172]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006be2:	78d2      	ldrb	r2, [r2, #3]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	061a      	lsls	r2, r3, #24
 8006be8:	4b29      	ldr	r3, [pc, #164]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	0619      	lsls	r1, r3, #24
 8006bee:	4b28      	ldr	r3, [pc, #160]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006bf0:	785b      	ldrb	r3, [r3, #1]
 8006bf2:	041b      	lsls	r3, r3, #16
 8006bf4:	4319      	orrs	r1, r3
 8006bf6:	4b26      	ldr	r3, [pc, #152]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006bf8:	789b      	ldrb	r3, [r3, #2]
 8006bfa:	021b      	lsls	r3, r3, #8
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	4924      	ldr	r1, [pc, #144]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006c00:	78c9      	ldrb	r1, [r1, #3]
 8006c02:	430b      	orrs	r3, r1
 8006c04:	021b      	lsls	r3, r3, #8
 8006c06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	4b20      	ldr	r3, [pc, #128]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	0619      	lsls	r1, r3, #24
 8006c12:	4b1f      	ldr	r3, [pc, #124]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006c14:	785b      	ldrb	r3, [r3, #1]
 8006c16:	041b      	lsls	r3, r3, #16
 8006c18:	4319      	orrs	r1, r3
 8006c1a:	4b1d      	ldr	r3, [pc, #116]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006c1c:	789b      	ldrb	r3, [r3, #2]
 8006c1e:	021b      	lsls	r3, r3, #8
 8006c20:	430b      	orrs	r3, r1
 8006c22:	491b      	ldr	r1, [pc, #108]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006c24:	78c9      	ldrb	r1, [r1, #3]
 8006c26:	430b      	orrs	r3, r1
 8006c28:	0a1b      	lsrs	r3, r3, #8
 8006c2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	4b17      	ldr	r3, [pc, #92]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	0619      	lsls	r1, r3, #24
 8006c36:	4b16      	ldr	r3, [pc, #88]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006c38:	785b      	ldrb	r3, [r3, #1]
 8006c3a:	041b      	lsls	r3, r3, #16
 8006c3c:	4319      	orrs	r1, r3
 8006c3e:	4b14      	ldr	r3, [pc, #80]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006c40:	789b      	ldrb	r3, [r3, #2]
 8006c42:	021b      	lsls	r3, r3, #8
 8006c44:	430b      	orrs	r3, r1
 8006c46:	4912      	ldr	r1, [pc, #72]	; (8006c90 <MX_LWIP_Init+0x22c>)
 8006c48:	78c9      	ldrb	r1, [r1, #3]
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	0e1b      	lsrs	r3, r3, #24
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	4a12      	ldr	r2, [pc, #72]	; (8006c9c <MX_LWIP_Init+0x238>)
 8006c52:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8006c54:	4b12      	ldr	r3, [pc, #72]	; (8006ca0 <MX_LWIP_Init+0x23c>)
 8006c56:	9302      	str	r3, [sp, #8]
 8006c58:	4b12      	ldr	r3, [pc, #72]	; (8006ca4 <MX_LWIP_Init+0x240>)
 8006c5a:	9301      	str	r3, [sp, #4]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	4b0e      	ldr	r3, [pc, #56]	; (8006c9c <MX_LWIP_Init+0x238>)
 8006c62:	4a0d      	ldr	r2, [pc, #52]	; (8006c98 <MX_LWIP_Init+0x234>)
 8006c64:	490b      	ldr	r1, [pc, #44]	; (8006c94 <MX_LWIP_Init+0x230>)
 8006c66:	4810      	ldr	r0, [pc, #64]	; (8006ca8 <MX_LWIP_Init+0x244>)
 8006c68:	f001 f92a 	bl	8007ec0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006c6c:	480e      	ldr	r0, [pc, #56]	; (8006ca8 <MX_LWIP_Init+0x244>)
 8006c6e:	f001 fad9 	bl	8008224 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006c72:	480d      	ldr	r0, [pc, #52]	; (8006ca8 <MX_LWIP_Init+0x244>)
 8006c74:	f001 fae6 	bl	8008244 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006c78:	490c      	ldr	r1, [pc, #48]	; (8006cac <MX_LWIP_Init+0x248>)
 8006c7a:	480b      	ldr	r0, [pc, #44]	; (8006ca8 <MX_LWIP_Init+0x244>)
 8006c7c:	f001 fbe4 	bl	8008448 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006c80:	bf00      	nop
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000b8c 	.word	0x20000b8c
 8006c8c:	20000b88 	.word	0x20000b88
 8006c90:	20000b48 	.word	0x20000b48
 8006c94:	20000b80 	.word	0x20000b80
 8006c98:	20000b90 	.word	0x20000b90
 8006c9c:	20000b94 	.word	0x20000b94
 8006ca0:	08011c35 	.word	0x08011c35
 8006ca4:	08006fbd 	.word	0x08006fbd
 8006ca8:	20000b4c 	.word	0x20000b4c
 8006cac:	08006d01 	.word	0x08006d01

08006cb0 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8006cb8:	f7fc fc9c 	bl	80035f4 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	4b08      	ldr	r3, [pc, #32]	; (8006ce0 <Ethernet_Link_Periodic_Handle+0x30>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b63      	cmp	r3, #99	; 0x63
 8006cc6:	d907      	bls.n	8006cd8 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8006cc8:	f7fc fc94 	bl	80035f4 <HAL_GetTick>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	4a04      	ldr	r2, [pc, #16]	; (8006ce0 <Ethernet_Link_Periodic_Handle+0x30>)
 8006cd0:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fade 	bl	8007294 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	20000b84 	.word	0x20000b84

08006ce4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8006ce8:	4804      	ldr	r0, [pc, #16]	; (8006cfc <MX_LWIP_Process+0x18>)
 8006cea:	f000 f947 	bl	8006f7c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8006cee:	f008 fb25 	bl	800f33c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8006cf2:	4802      	ldr	r0, [pc, #8]	; (8006cfc <MX_LWIP_Process+0x18>)
 8006cf4:	f7ff ffdc 	bl	8006cb0 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8006cf8:	bf00      	nop
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	20000b4c 	.word	0x20000b4c

08006d00 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006d20:	4b40      	ldr	r3, [pc, #256]	; (8006e24 <low_level_init+0x110>)
 8006d22:	4a41      	ldr	r2, [pc, #260]	; (8006e28 <low_level_init+0x114>)
 8006d24:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006d26:	2300      	movs	r3, #0
 8006d28:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006d2a:	2380      	movs	r3, #128	; 0x80
 8006d2c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006d2e:	23e1      	movs	r3, #225	; 0xe1
 8006d30:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006d32:	2300      	movs	r3, #0
 8006d34:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006d36:	2300      	movs	r3, #0
 8006d38:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006d3e:	4a39      	ldr	r2, [pc, #228]	; (8006e24 <low_level_init+0x110>)
 8006d40:	f107 0308 	add.w	r3, r7, #8
 8006d44:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006d46:	4b37      	ldr	r3, [pc, #220]	; (8006e24 <low_level_init+0x110>)
 8006d48:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006d4c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006d4e:	4b35      	ldr	r3, [pc, #212]	; (8006e24 <low_level_init+0x110>)
 8006d50:	4a36      	ldr	r2, [pc, #216]	; (8006e2c <low_level_init+0x118>)
 8006d52:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006d54:	4b33      	ldr	r3, [pc, #204]	; (8006e24 <low_level_init+0x110>)
 8006d56:	4a36      	ldr	r2, [pc, #216]	; (8006e30 <low_level_init+0x11c>)
 8006d58:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006d5a:	4b32      	ldr	r3, [pc, #200]	; (8006e24 <low_level_init+0x110>)
 8006d5c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006d60:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006d62:	4830      	ldr	r0, [pc, #192]	; (8006e24 <low_level_init+0x110>)
 8006d64:	f7fc fd88 	bl	8003878 <HAL_ETH_Init>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006d6c:	2238      	movs	r2, #56	; 0x38
 8006d6e:	2100      	movs	r1, #0
 8006d70:	4830      	ldr	r0, [pc, #192]	; (8006e34 <low_level_init+0x120>)
 8006d72:	f00d feed 	bl	8014b50 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006d76:	4b2f      	ldr	r3, [pc, #188]	; (8006e34 <low_level_init+0x120>)
 8006d78:	2221      	movs	r2, #33	; 0x21
 8006d7a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006d7c:	4b2d      	ldr	r3, [pc, #180]	; (8006e34 <low_level_init+0x120>)
 8006d7e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006d82:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006d84:	4b2b      	ldr	r3, [pc, #172]	; (8006e34 <low_level_init+0x120>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006d8a:	482b      	ldr	r0, [pc, #172]	; (8006e38 <low_level_init+0x124>)
 8006d8c:	f000 ff60 	bl	8007c50 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2206      	movs	r2, #6
 8006d94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006d98:	4b22      	ldr	r3, [pc, #136]	; (8006e24 <low_level_init+0x110>)
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	781a      	ldrb	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006da4:	4b1f      	ldr	r3, [pc, #124]	; (8006e24 <low_level_init+0x110>)
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	785a      	ldrb	r2, [r3, #1]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006db0:	4b1c      	ldr	r3, [pc, #112]	; (8006e24 <low_level_init+0x110>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	789a      	ldrb	r2, [r3, #2]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006dbc:	4b19      	ldr	r3, [pc, #100]	; (8006e24 <low_level_init+0x110>)
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	78da      	ldrb	r2, [r3, #3]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006dc8:	4b16      	ldr	r3, [pc, #88]	; (8006e24 <low_level_init+0x110>)
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	791a      	ldrb	r2, [r3, #4]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006dd4:	4b13      	ldr	r3, [pc, #76]	; (8006e24 <low_level_init+0x110>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	795a      	ldrb	r2, [r3, #5]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006de6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006dee:	f043 030a 	orr.w	r3, r3, #10
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006dfa:	4910      	ldr	r1, [pc, #64]	; (8006e3c <low_level_init+0x128>)
 8006dfc:	4810      	ldr	r0, [pc, #64]	; (8006e40 <low_level_init+0x12c>)
 8006dfe:	f7fc fa32 	bl	8003266 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8006e02:	480f      	ldr	r0, [pc, #60]	; (8006e40 <low_level_init+0x12c>)
 8006e04:	f7fc fa61 	bl	80032ca <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d103      	bne.n	8006e16 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fa40 	bl	8007294 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006e14:	e001      	b.n	8006e1a <low_level_init+0x106>
    Error_Handler();
 8006e16:	f7fb fc45 	bl	80026a4 <Error_Handler>
}
 8006e1a:	bf00      	nop
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	2000567c 	.word	0x2000567c
 8006e28:	40028000 	.word	0x40028000
 8006e2c:	20000b98 	.word	0x20000b98
 8006e30:	200055bc 	.word	0x200055bc
 8006e34:	2000572c 	.word	0x2000572c
 8006e38:	0801a4f4 	.word	0x0801a4f4
 8006e3c:	2000000c 	.word	0x2000000c
 8006e40:	2000565c 	.word	0x2000565c

08006e44 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b092      	sub	sp, #72	; 0x48
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006e5c:	f107 030c 	add.w	r3, r7, #12
 8006e60:	2230      	movs	r2, #48	; 0x30
 8006e62:	2100      	movs	r1, #0
 8006e64:	4618      	mov	r0, r3
 8006e66:	f00d fe73 	bl	8014b50 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006e6a:	f107 030c 	add.w	r3, r7, #12
 8006e6e:	2230      	movs	r2, #48	; 0x30
 8006e70:	2100      	movs	r1, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f00d fe6c 	bl	8014b50 <memset>

  for(q = p; q != NULL; q = q->next)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e7c:	e045      	b.n	8006f0a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d902      	bls.n	8006e8a <low_level_output+0x46>
      return ERR_IF;
 8006e84:	f06f 030b 	mvn.w	r3, #11
 8006e88:	e055      	b.n	8006f36 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8006e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e8c:	6859      	ldr	r1, [r3, #4]
 8006e8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e90:	4613      	mov	r3, r2
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	3348      	adds	r3, #72	; 0x48
 8006e9a:	443b      	add	r3, r7
 8006e9c:	3b3c      	subs	r3, #60	; 0x3c
 8006e9e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea2:	895b      	ldrh	r3, [r3, #10]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	4413      	add	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	3348      	adds	r3, #72	; 0x48
 8006eb2:	443b      	add	r3, r7
 8006eb4:	3b38      	subs	r3, #56	; 0x38
 8006eb6:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d011      	beq.n	8006ee2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ec0:	1e5a      	subs	r2, r3, #1
 8006ec2:	f107 000c 	add.w	r0, r7, #12
 8006ec6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ec8:	460b      	mov	r3, r1
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	440b      	add	r3, r1
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	18c1      	adds	r1, r0, r3
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	4413      	add	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	3348      	adds	r3, #72	; 0x48
 8006edc:	443b      	add	r3, r7
 8006ede:	3b34      	subs	r3, #52	; 0x34
 8006ee0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d109      	bne.n	8006efe <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eec:	4613      	mov	r3, r2
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	3348      	adds	r3, #72	; 0x48
 8006ef6:	443b      	add	r3, r7
 8006ef8:	3b34      	subs	r3, #52	; 0x34
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f00:	3301      	adds	r3, #1
 8006f02:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	643b      	str	r3, [r7, #64]	; 0x40
 8006f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1b6      	bne.n	8006e7e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	891b      	ldrh	r3, [r3, #8]
 8006f14:	461a      	mov	r2, r3
 8006f16:	4b0a      	ldr	r3, [pc, #40]	; (8006f40 <low_level_output+0xfc>)
 8006f18:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006f1a:	4a09      	ldr	r2, [pc, #36]	; (8006f40 <low_level_output+0xfc>)
 8006f1c:	f107 030c 	add.w	r3, r7, #12
 8006f20:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006f22:	4a07      	ldr	r2, [pc, #28]	; (8006f40 <low_level_output+0xfc>)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8006f28:	2214      	movs	r2, #20
 8006f2a:	4905      	ldr	r1, [pc, #20]	; (8006f40 <low_level_output+0xfc>)
 8006f2c:	4805      	ldr	r0, [pc, #20]	; (8006f44 <low_level_output+0x100>)
 8006f2e:	f7fc fdd9 	bl	8003ae4 <HAL_ETH_Transmit>

  return errval;
 8006f32:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3748      	adds	r7, #72	; 0x48
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	2000572c 	.word	0x2000572c
 8006f44:	2000567c 	.word	0x2000567c

08006f48 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006f50:	2300      	movs	r3, #0
 8006f52:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006f54:	4b07      	ldr	r3, [pc, #28]	; (8006f74 <low_level_input+0x2c>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d105      	bne.n	8006f68 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006f5c:	f107 030c 	add.w	r3, r7, #12
 8006f60:	4619      	mov	r1, r3
 8006f62:	4805      	ldr	r0, [pc, #20]	; (8006f78 <low_level_input+0x30>)
 8006f64:	f7fc fe52 	bl	8003c0c <HAL_ETH_ReadData>
  }

  return p;
 8006f68:	68fb      	ldr	r3, [r7, #12]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	20000874 	.word	0x20000874
 8006f78:	2000567c 	.word	0x2000567c

08006f7c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff ffdd 	bl	8006f48 <low_level_input>
 8006f8e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	4798      	blx	r3
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d002      	beq.n	8006fac <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f001 fdce 	bl	8008b48 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1ea      	bne.n	8006f88 <ethernetif_input+0xc>
}
 8006fb2:	bf00      	nop
 8006fb4:	bf00      	nop
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d106      	bne.n	8006fd8 <ethernetif_init+0x1c>
 8006fca:	4b0e      	ldr	r3, [pc, #56]	; (8007004 <ethernetif_init+0x48>)
 8006fcc:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8006fd0:	490d      	ldr	r1, [pc, #52]	; (8007008 <ethernetif_init+0x4c>)
 8006fd2:	480e      	ldr	r0, [pc, #56]	; (800700c <ethernetif_init+0x50>)
 8006fd4:	f00d fc66 	bl	80148a4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2273      	movs	r2, #115	; 0x73
 8006fdc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2274      	movs	r2, #116	; 0x74
 8006fe4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a09      	ldr	r2, [pc, #36]	; (8007010 <ethernetif_init+0x54>)
 8006fec:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a08      	ldr	r2, [pc, #32]	; (8007014 <ethernetif_init+0x58>)
 8006ff2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fe8d 	bl	8006d14 <low_level_init>

  return ERR_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	080172fc 	.word	0x080172fc
 8007008:	08017318 	.word	0x08017318
 800700c:	08017328 	.word	0x08017328
 8007010:	0800ffcd 	.word	0x0800ffcd
 8007014:	08006e45 	.word	0x08006e45

08007018 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007024:	68f9      	ldr	r1, [r7, #12]
 8007026:	4807      	ldr	r0, [pc, #28]	; (8007044 <pbuf_free_custom+0x2c>)
 8007028:	f000 fef4 	bl	8007e14 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800702c:	4b06      	ldr	r3, [pc, #24]	; (8007048 <pbuf_free_custom+0x30>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d102      	bne.n	800703a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007034:	4b04      	ldr	r3, [pc, #16]	; (8007048 <pbuf_free_custom+0x30>)
 8007036:	2200      	movs	r2, #0
 8007038:	701a      	strb	r2, [r3, #0]
  }
}
 800703a:	bf00      	nop
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	0801a4f4 	.word	0x0801a4f4
 8007048:	20000874 	.word	0x20000874

0800704c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007050:	f7fc fad0 	bl	80035f4 <HAL_GetTick>
 8007054:	4603      	mov	r3, r0
}
 8007056:	4618      	mov	r0, r3
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b08e      	sub	sp, #56	; 0x38
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	605a      	str	r2, [r3, #4]
 800706e:	609a      	str	r2, [r3, #8]
 8007070:	60da      	str	r2, [r3, #12]
 8007072:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a59      	ldr	r2, [pc, #356]	; (80071e0 <HAL_ETH_MspInit+0x184>)
 800707a:	4293      	cmp	r3, r2
 800707c:	f040 80ac 	bne.w	80071d8 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007080:	2300      	movs	r3, #0
 8007082:	623b      	str	r3, [r7, #32]
 8007084:	4b57      	ldr	r3, [pc, #348]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 8007086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007088:	4a56      	ldr	r2, [pc, #344]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 800708a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800708e:	6313      	str	r3, [r2, #48]	; 0x30
 8007090:	4b54      	ldr	r3, [pc, #336]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 8007092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007098:	623b      	str	r3, [r7, #32]
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	2300      	movs	r3, #0
 800709e:	61fb      	str	r3, [r7, #28]
 80070a0:	4b50      	ldr	r3, [pc, #320]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 80070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a4:	4a4f      	ldr	r2, [pc, #316]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 80070a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070aa:	6313      	str	r3, [r2, #48]	; 0x30
 80070ac:	4b4d      	ldr	r3, [pc, #308]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070b4:	61fb      	str	r3, [r7, #28]
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	2300      	movs	r3, #0
 80070ba:	61bb      	str	r3, [r7, #24]
 80070bc:	4b49      	ldr	r3, [pc, #292]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 80070be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c0:	4a48      	ldr	r2, [pc, #288]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 80070c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070c6:	6313      	str	r3, [r2, #48]	; 0x30
 80070c8:	4b46      	ldr	r3, [pc, #280]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 80070ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070d0:	61bb      	str	r3, [r7, #24]
 80070d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070d4:	2300      	movs	r3, #0
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	4b42      	ldr	r3, [pc, #264]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 80070da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070dc:	4a41      	ldr	r2, [pc, #260]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 80070de:	f043 0304 	orr.w	r3, r3, #4
 80070e2:	6313      	str	r3, [r2, #48]	; 0x30
 80070e4:	4b3f      	ldr	r3, [pc, #252]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 80070e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	617b      	str	r3, [r7, #20]
 80070ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070f0:	2300      	movs	r3, #0
 80070f2:	613b      	str	r3, [r7, #16]
 80070f4:	4b3b      	ldr	r3, [pc, #236]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 80070f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f8:	4a3a      	ldr	r2, [pc, #232]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 80070fa:	f043 0301 	orr.w	r3, r3, #1
 80070fe:	6313      	str	r3, [r2, #48]	; 0x30
 8007100:	4b38      	ldr	r3, [pc, #224]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 8007102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	613b      	str	r3, [r7, #16]
 800710a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800710c:	2300      	movs	r3, #0
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	4b34      	ldr	r3, [pc, #208]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 8007112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007114:	4a33      	ldr	r2, [pc, #204]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 8007116:	f043 0302 	orr.w	r3, r3, #2
 800711a:	6313      	str	r3, [r2, #48]	; 0x30
 800711c:	4b31      	ldr	r3, [pc, #196]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 800711e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007128:	2300      	movs	r3, #0
 800712a:	60bb      	str	r3, [r7, #8]
 800712c:	4b2d      	ldr	r3, [pc, #180]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 800712e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007130:	4a2c      	ldr	r2, [pc, #176]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 8007132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007136:	6313      	str	r3, [r2, #48]	; 0x30
 8007138:	4b2a      	ldr	r3, [pc, #168]	; (80071e4 <HAL_ETH_MspInit+0x188>)
 800713a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007140:	60bb      	str	r3, [r7, #8]
 8007142:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007144:	2332      	movs	r3, #50	; 0x32
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007148:	2302      	movs	r3, #2
 800714a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800714c:	2300      	movs	r3, #0
 800714e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007150:	2303      	movs	r3, #3
 8007152:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007154:	230b      	movs	r3, #11
 8007156:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800715c:	4619      	mov	r1, r3
 800715e:	4822      	ldr	r0, [pc, #136]	; (80071e8 <HAL_ETH_MspInit+0x18c>)
 8007160:	f7fd fd80 	bl	8004c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007164:	2386      	movs	r3, #134	; 0x86
 8007166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007168:	2302      	movs	r3, #2
 800716a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800716c:	2300      	movs	r3, #0
 800716e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007170:	2303      	movs	r3, #3
 8007172:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007174:	230b      	movs	r3, #11
 8007176:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800717c:	4619      	mov	r1, r3
 800717e:	481b      	ldr	r0, [pc, #108]	; (80071ec <HAL_ETH_MspInit+0x190>)
 8007180:	f7fd fd70 	bl	8004c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800718a:	2302      	movs	r3, #2
 800718c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800718e:	2300      	movs	r3, #0
 8007190:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007192:	2303      	movs	r3, #3
 8007194:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007196:	230b      	movs	r3, #11
 8007198:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800719a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800719e:	4619      	mov	r1, r3
 80071a0:	4813      	ldr	r0, [pc, #76]	; (80071f0 <HAL_ETH_MspInit+0x194>)
 80071a2:	f7fd fd5f 	bl	8004c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80071a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ac:	2302      	movs	r3, #2
 80071ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071b4:	2303      	movs	r3, #3
 80071b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80071b8:	230b      	movs	r3, #11
 80071ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80071bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071c0:	4619      	mov	r1, r3
 80071c2:	480c      	ldr	r0, [pc, #48]	; (80071f4 <HAL_ETH_MspInit+0x198>)
 80071c4:	f7fd fd4e 	bl	8004c64 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80071c8:	2200      	movs	r2, #0
 80071ca:	2100      	movs	r1, #0
 80071cc:	203d      	movs	r0, #61	; 0x3d
 80071ce:	f7fc fb1c 	bl	800380a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80071d2:	203d      	movs	r0, #61	; 0x3d
 80071d4:	f7fc fb35 	bl	8003842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80071d8:	bf00      	nop
 80071da:	3738      	adds	r7, #56	; 0x38
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	40028000 	.word	0x40028000
 80071e4:	40023800 	.word	0x40023800
 80071e8:	40020800 	.word	0x40020800
 80071ec:	40020000 	.word	0x40020000
 80071f0:	40020400 	.word	0x40020400
 80071f4:	40021800 	.word	0x40021800

080071f8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80071fc:	4802      	ldr	r0, [pc, #8]	; (8007208 <ETH_PHY_IO_Init+0x10>)
 80071fe:	f7fd f8d5 	bl	80043ac <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	bd80      	pop	{r7, pc}
 8007208:	2000567c 	.word	0x2000567c

0800720c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
  return 0;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	68f9      	ldr	r1, [r7, #12]
 800722e:	4807      	ldr	r0, [pc, #28]	; (800724c <ETH_PHY_IO_ReadReg+0x30>)
 8007230:	f7fc ff24 	bl	800407c <HAL_ETH_ReadPHYRegister>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800723a:	f04f 33ff 	mov.w	r3, #4294967295
 800723e:	e000      	b.n	8007242 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	2000567c 	.word	0x2000567c

08007250 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	68f9      	ldr	r1, [r7, #12]
 8007262:	4807      	ldr	r0, [pc, #28]	; (8007280 <ETH_PHY_IO_WriteReg+0x30>)
 8007264:	f7fc ff55 	bl	8004112 <HAL_ETH_WritePHYRegister>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800726e:	f04f 33ff 	mov.w	r3, #4294967295
 8007272:	e000      	b.n	8007276 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	2000567c 	.word	0x2000567c

08007284 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007288:	f7fc f9b4 	bl	80035f4 <HAL_GetTick>
 800728c:	4603      	mov	r3, r0
}
 800728e:	4618      	mov	r0, r3
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b0a0      	sub	sp, #128	; 0x80
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800729c:	f107 030c 	add.w	r3, r7, #12
 80072a0:	2264      	movs	r2, #100	; 0x64
 80072a2:	2100      	movs	r1, #0
 80072a4:	4618      	mov	r0, r3
 80072a6:	f00d fc53 	bl	8014b50 <memset>
  int32_t PHYLinkState = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072b2:	2300      	movs	r3, #0
 80072b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80072b6:	2300      	movs	r3, #0
 80072b8:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80072ba:	483a      	ldr	r0, [pc, #232]	; (80073a4 <ethernet_link_check_state+0x110>)
 80072bc:	f7fc f8ad 	bl	800341a <LAN8742_GetLinkState>
 80072c0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072c8:	089b      	lsrs	r3, r3, #2
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00c      	beq.n	80072ee <ethernet_link_check_state+0x5a>
 80072d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	dc09      	bgt.n	80072ee <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80072da:	4833      	ldr	r0, [pc, #204]	; (80073a8 <ethernet_link_check_state+0x114>)
 80072dc:	f7fc fba9 	bl	8003a32 <HAL_ETH_Stop>
    netif_set_down(netif);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 f81b 	bl	800831c <netif_set_down>
    netif_set_link_down(netif);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f001 f87e 	bl	80083e8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80072ec:	e055      	b.n	800739a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d14e      	bne.n	800739a <ethernet_link_check_state+0x106>
 80072fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072fe:	2b01      	cmp	r3, #1
 8007300:	dd4b      	ble.n	800739a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8007302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007304:	3b02      	subs	r3, #2
 8007306:	2b03      	cmp	r3, #3
 8007308:	d82a      	bhi.n	8007360 <ethernet_link_check_state+0xcc>
 800730a:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <ethernet_link_check_state+0x7c>)
 800730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007310:	08007321 	.word	0x08007321
 8007314:	08007333 	.word	0x08007333
 8007318:	08007343 	.word	0x08007343
 800731c:	08007353 	.word	0x08007353
      duplex = ETH_FULLDUPLEX_MODE;
 8007320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007324:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007326:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800732a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800732c:	2301      	movs	r3, #1
 800732e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007330:	e017      	b.n	8007362 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007332:	2300      	movs	r3, #0
 8007334:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007336:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800733a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800733c:	2301      	movs	r3, #1
 800733e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007340:	e00f      	b.n	8007362 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8007342:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007346:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007348:	2300      	movs	r3, #0
 800734a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800734c:	2301      	movs	r3, #1
 800734e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007350:	e007      	b.n	8007362 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007352:	2300      	movs	r3, #0
 8007354:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007356:	2300      	movs	r3, #0
 8007358:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800735a:	2301      	movs	r3, #1
 800735c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800735e:	e000      	b.n	8007362 <ethernet_link_check_state+0xce>
      break;
 8007360:	bf00      	nop
    if(linkchanged)
 8007362:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d018      	beq.n	800739a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007368:	f107 030c 	add.w	r3, r7, #12
 800736c:	4619      	mov	r1, r3
 800736e:	480e      	ldr	r0, [pc, #56]	; (80073a8 <ethernet_link_check_state+0x114>)
 8007370:	f7fc ff18 	bl	80041a4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007374:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007376:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8007378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800737a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800737c:	f107 030c 	add.w	r3, r7, #12
 8007380:	4619      	mov	r1, r3
 8007382:	4809      	ldr	r0, [pc, #36]	; (80073a8 <ethernet_link_check_state+0x114>)
 8007384:	f7fc fff8 	bl	8004378 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007388:	4807      	ldr	r0, [pc, #28]	; (80073a8 <ethernet_link_check_state+0x114>)
 800738a:	f7fc faf3 	bl	8003974 <HAL_ETH_Start>
      netif_set_up(netif);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 ff58 	bl	8008244 <netif_set_up>
      netif_set_link_up(netif);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fff3 	bl	8008380 <netif_set_link_up>
}
 800739a:	bf00      	nop
 800739c:	3780      	adds	r7, #128	; 0x80
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	2000565c 	.word	0x2000565c
 80073a8:	2000567c 	.word	0x2000567c

080073ac <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af02      	add	r7, sp, #8
 80073b2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80073b4:	4812      	ldr	r0, [pc, #72]	; (8007400 <HAL_ETH_RxAllocateCallback+0x54>)
 80073b6:	f000 fcbf 	bl	8007d38 <memp_malloc_pool>
 80073ba:	60f8      	str	r0, [r7, #12]
  if (p)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d014      	beq.n	80073ec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f103 0220 	add.w	r2, r3, #32
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4a0d      	ldr	r2, [pc, #52]	; (8007404 <HAL_ETH_RxAllocateCallback+0x58>)
 80073d0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80073da:	9201      	str	r2, [sp, #4]
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2241      	movs	r2, #65	; 0x41
 80073e2:	2100      	movs	r1, #0
 80073e4:	2000      	movs	r0, #0
 80073e6:	f001 f9f5 	bl	80087d4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80073ea:	e005      	b.n	80073f8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80073ec:	4b06      	ldr	r3, [pc, #24]	; (8007408 <HAL_ETH_RxAllocateCallback+0x5c>)
 80073ee:	2201      	movs	r2, #1
 80073f0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]
}
 80073f8:	bf00      	nop
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	0801a4f4 	.word	0x0801a4f4
 8007404:	08007019 	.word	0x08007019
 8007408:	20000874 	.word	0x20000874

0800740c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800740c:	b480      	push	{r7}
 800740e:	b089      	sub	sp, #36	; 0x24
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007422:	2300      	movs	r3, #0
 8007424:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3b20      	subs	r3, #32
 800742a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	2200      	movs	r2, #0
 8007436:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	887a      	ldrh	r2, [r7, #2]
 800743c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d103      	bne.n	800744e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	69fa      	ldr	r2, [r7, #28]
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	e003      	b.n	8007456 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	69fa      	ldr	r2, [r7, #28]
 8007454:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	69fa      	ldr	r2, [r7, #28]
 800745a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	61fb      	str	r3, [r7, #28]
 8007462:	e009      	b.n	8007478 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	891a      	ldrh	r2, [r3, #8]
 8007468:	887b      	ldrh	r3, [r7, #2]
 800746a:	4413      	add	r3, r2
 800746c:	b29a      	uxth	r2, r3
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	61fb      	str	r3, [r7, #28]
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1f2      	bne.n	8007464 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800747e:	bf00      	nop
 8007480:	bf00      	nop
 8007482:	3724      	adds	r7, #36	; 0x24
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	4603      	mov	r3, r0
 8007494:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007496:	88fb      	ldrh	r3, [r7, #6]
 8007498:	021b      	lsls	r3, r3, #8
 800749a:	b21a      	sxth	r2, r3
 800749c:	88fb      	ldrh	r3, [r7, #6]
 800749e:	0a1b      	lsrs	r3, r3, #8
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	b21b      	sxth	r3, r3
 80074a4:	4313      	orrs	r3, r2
 80074a6:	b21b      	sxth	r3, r3
 80074a8:	b29b      	uxth	r3, r3
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	061a      	lsls	r2, r3, #24
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	021b      	lsls	r3, r3, #8
 80074c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	0a1b      	lsrs	r3, r3, #8
 80074d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	0e1b      	lsrs	r3, r3, #24
 80074da:	4313      	orrs	r3, r2
}
 80074dc:	4618      	mov	r0, r3
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80074ee:	2300      	movs	r3, #0
 80074f0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80074f2:	f000 f8d5 	bl	80076a0 <mem_init>
  memp_init();
 80074f6:	f000 fbdb 	bl	8007cb0 <memp_init>
  pbuf_init();
  netif_init();
 80074fa:	f000 fcd9 	bl	8007eb0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80074fe:	f007 ff5f 	bl	800f3c0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007502:	f001 fdbf 	bl	8009084 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007506:	f007 fed1 	bl	800f2ac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800750a:	bf00      	nop
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800751e:	4b05      	ldr	r3, [pc, #20]	; (8007534 <ptr_to_mem+0x20>)
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	88fb      	ldrh	r3, [r7, #6]
 8007524:	4413      	add	r3, r2
}
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	20000878 	.word	0x20000878

08007538 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007540:	4b05      	ldr	r3, [pc, #20]	; (8007558 <mem_to_ptr+0x20>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	b29b      	uxth	r3, r3
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	20000878 	.word	0x20000878

0800755c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800755c:	b590      	push	{r4, r7, lr}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007564:	4b45      	ldr	r3, [pc, #276]	; (800767c <plug_holes+0x120>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	429a      	cmp	r2, r3
 800756c:	d206      	bcs.n	800757c <plug_holes+0x20>
 800756e:	4b44      	ldr	r3, [pc, #272]	; (8007680 <plug_holes+0x124>)
 8007570:	f240 12df 	movw	r2, #479	; 0x1df
 8007574:	4943      	ldr	r1, [pc, #268]	; (8007684 <plug_holes+0x128>)
 8007576:	4844      	ldr	r0, [pc, #272]	; (8007688 <plug_holes+0x12c>)
 8007578:	f00d f994 	bl	80148a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800757c:	4b43      	ldr	r3, [pc, #268]	; (800768c <plug_holes+0x130>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	429a      	cmp	r2, r3
 8007584:	d306      	bcc.n	8007594 <plug_holes+0x38>
 8007586:	4b3e      	ldr	r3, [pc, #248]	; (8007680 <plug_holes+0x124>)
 8007588:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800758c:	4940      	ldr	r1, [pc, #256]	; (8007690 <plug_holes+0x134>)
 800758e:	483e      	ldr	r0, [pc, #248]	; (8007688 <plug_holes+0x12c>)
 8007590:	f00d f988 	bl	80148a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	791b      	ldrb	r3, [r3, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d006      	beq.n	80075aa <plug_holes+0x4e>
 800759c:	4b38      	ldr	r3, [pc, #224]	; (8007680 <plug_holes+0x124>)
 800759e:	f240 12e1 	movw	r2, #481	; 0x1e1
 80075a2:	493c      	ldr	r1, [pc, #240]	; (8007694 <plug_holes+0x138>)
 80075a4:	4838      	ldr	r0, [pc, #224]	; (8007688 <plug_holes+0x12c>)
 80075a6:	f00d f97d 	bl	80148a4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80075b2:	d906      	bls.n	80075c2 <plug_holes+0x66>
 80075b4:	4b32      	ldr	r3, [pc, #200]	; (8007680 <plug_holes+0x124>)
 80075b6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80075ba:	4937      	ldr	r1, [pc, #220]	; (8007698 <plug_holes+0x13c>)
 80075bc:	4832      	ldr	r0, [pc, #200]	; (8007688 <plug_holes+0x12c>)
 80075be:	f00d f971 	bl	80148a4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7ff ffa4 	bl	8007514 <ptr_to_mem>
 80075cc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d024      	beq.n	8007620 <plug_holes+0xc4>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	791b      	ldrb	r3, [r3, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d120      	bne.n	8007620 <plug_holes+0xc4>
 80075de:	4b2b      	ldr	r3, [pc, #172]	; (800768c <plug_holes+0x130>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d01b      	beq.n	8007620 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80075e8:	4b2c      	ldr	r3, [pc, #176]	; (800769c <plug_holes+0x140>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d102      	bne.n	80075f8 <plug_holes+0x9c>
      lfree = mem;
 80075f2:	4a2a      	ldr	r2, [pc, #168]	; (800769c <plug_holes+0x140>)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	881a      	ldrh	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007608:	d00a      	beq.n	8007620 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	4618      	mov	r0, r3
 8007610:	f7ff ff80 	bl	8007514 <ptr_to_mem>
 8007614:	4604      	mov	r4, r0
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7ff ff8e 	bl	8007538 <mem_to_ptr>
 800761c:	4603      	mov	r3, r0
 800761e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	885b      	ldrh	r3, [r3, #2]
 8007624:	4618      	mov	r0, r3
 8007626:	f7ff ff75 	bl	8007514 <ptr_to_mem>
 800762a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	429a      	cmp	r2, r3
 8007632:	d01f      	beq.n	8007674 <plug_holes+0x118>
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	791b      	ldrb	r3, [r3, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d11b      	bne.n	8007674 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800763c:	4b17      	ldr	r3, [pc, #92]	; (800769c <plug_holes+0x140>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	429a      	cmp	r2, r3
 8007644:	d102      	bne.n	800764c <plug_holes+0xf0>
      lfree = pmem;
 8007646:	4a15      	ldr	r2, [pc, #84]	; (800769c <plug_holes+0x140>)
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	881a      	ldrh	r2, [r3, #0]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800765c:	d00a      	beq.n	8007674 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff ff56 	bl	8007514 <ptr_to_mem>
 8007668:	4604      	mov	r4, r0
 800766a:	68b8      	ldr	r0, [r7, #8]
 800766c:	f7ff ff64 	bl	8007538 <mem_to_ptr>
 8007670:	4603      	mov	r3, r0
 8007672:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007674:	bf00      	nop
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	bd90      	pop	{r4, r7, pc}
 800767c:	20000878 	.word	0x20000878
 8007680:	08017350 	.word	0x08017350
 8007684:	08017380 	.word	0x08017380
 8007688:	08017398 	.word	0x08017398
 800768c:	2000087c 	.word	0x2000087c
 8007690:	080173c0 	.word	0x080173c0
 8007694:	080173dc 	.word	0x080173dc
 8007698:	080173f8 	.word	0x080173f8
 800769c:	20000880 	.word	0x20000880

080076a0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80076a6:	4b18      	ldr	r3, [pc, #96]	; (8007708 <mem_init+0x68>)
 80076a8:	3303      	adds	r3, #3
 80076aa:	f023 0303 	bic.w	r3, r3, #3
 80076ae:	461a      	mov	r2, r3
 80076b0:	4b16      	ldr	r3, [pc, #88]	; (800770c <mem_init+0x6c>)
 80076b2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80076b4:	4b15      	ldr	r3, [pc, #84]	; (800770c <mem_init+0x6c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80076c0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80076ce:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80076d2:	f7ff ff1f 	bl	8007514 <ptr_to_mem>
 80076d6:	4603      	mov	r3, r0
 80076d8:	4a0d      	ldr	r2, [pc, #52]	; (8007710 <mem_init+0x70>)
 80076da:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80076dc:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <mem_init+0x70>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2201      	movs	r2, #1
 80076e2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80076e4:	4b0a      	ldr	r3, [pc, #40]	; (8007710 <mem_init+0x70>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80076ec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80076ee:	4b08      	ldr	r3, [pc, #32]	; (8007710 <mem_init+0x70>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80076f6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80076f8:	4b04      	ldr	r3, [pc, #16]	; (800770c <mem_init+0x6c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a05      	ldr	r2, [pc, #20]	; (8007714 <mem_init+0x74>)
 80076fe:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007700:	bf00      	nop
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	2000577c 	.word	0x2000577c
 800770c:	20000878 	.word	0x20000878
 8007710:	2000087c 	.word	0x2000087c
 8007714:	20000880 	.word	0x20000880

08007718 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff ff09 	bl	8007538 <mem_to_ptr>
 8007726:	4603      	mov	r3, r0
 8007728:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f7ff fef0 	bl	8007514 <ptr_to_mem>
 8007734:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	885b      	ldrh	r3, [r3, #2]
 800773a:	4618      	mov	r0, r3
 800773c:	f7ff feea 	bl	8007514 <ptr_to_mem>
 8007740:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800774a:	d818      	bhi.n	800777e <mem_link_valid+0x66>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	885b      	ldrh	r3, [r3, #2]
 8007750:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007754:	d813      	bhi.n	800777e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800775a:	8afa      	ldrh	r2, [r7, #22]
 800775c:	429a      	cmp	r2, r3
 800775e:	d004      	beq.n	800776a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	8afa      	ldrh	r2, [r7, #22]
 8007766:	429a      	cmp	r2, r3
 8007768:	d109      	bne.n	800777e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800776a:	4b08      	ldr	r3, [pc, #32]	; (800778c <mem_link_valid+0x74>)
 800776c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	429a      	cmp	r2, r3
 8007772:	d006      	beq.n	8007782 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	885b      	ldrh	r3, [r3, #2]
 8007778:	8afa      	ldrh	r2, [r7, #22]
 800777a:	429a      	cmp	r2, r3
 800777c:	d001      	beq.n	8007782 <mem_link_valid+0x6a>
    return 0;
 800777e:	2300      	movs	r3, #0
 8007780:	e000      	b.n	8007784 <mem_link_valid+0x6c>
  }
  return 1;
 8007782:	2301      	movs	r3, #1
}
 8007784:	4618      	mov	r0, r3
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	2000087c 	.word	0x2000087c

08007790 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d04c      	beq.n	8007838 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f003 0303 	and.w	r3, r3, #3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d007      	beq.n	80077b8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80077a8:	4b25      	ldr	r3, [pc, #148]	; (8007840 <mem_free+0xb0>)
 80077aa:	f240 2273 	movw	r2, #627	; 0x273
 80077ae:	4925      	ldr	r1, [pc, #148]	; (8007844 <mem_free+0xb4>)
 80077b0:	4825      	ldr	r0, [pc, #148]	; (8007848 <mem_free+0xb8>)
 80077b2:	f00d f877 	bl	80148a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80077b6:	e040      	b.n	800783a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3b08      	subs	r3, #8
 80077bc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80077be:	4b23      	ldr	r3, [pc, #140]	; (800784c <mem_free+0xbc>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d306      	bcc.n	80077d6 <mem_free+0x46>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f103 020c 	add.w	r2, r3, #12
 80077ce:	4b20      	ldr	r3, [pc, #128]	; (8007850 <mem_free+0xc0>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d907      	bls.n	80077e6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80077d6:	4b1a      	ldr	r3, [pc, #104]	; (8007840 <mem_free+0xb0>)
 80077d8:	f240 227f 	movw	r2, #639	; 0x27f
 80077dc:	491d      	ldr	r1, [pc, #116]	; (8007854 <mem_free+0xc4>)
 80077de:	481a      	ldr	r0, [pc, #104]	; (8007848 <mem_free+0xb8>)
 80077e0:	f00d f860 	bl	80148a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80077e4:	e029      	b.n	800783a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	791b      	ldrb	r3, [r3, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d107      	bne.n	80077fe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80077ee:	4b14      	ldr	r3, [pc, #80]	; (8007840 <mem_free+0xb0>)
 80077f0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80077f4:	4918      	ldr	r1, [pc, #96]	; (8007858 <mem_free+0xc8>)
 80077f6:	4814      	ldr	r0, [pc, #80]	; (8007848 <mem_free+0xb8>)
 80077f8:	f00d f854 	bl	80148a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80077fc:	e01d      	b.n	800783a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f7ff ff8a 	bl	8007718 <mem_link_valid>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d107      	bne.n	800781a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800780a:	4b0d      	ldr	r3, [pc, #52]	; (8007840 <mem_free+0xb0>)
 800780c:	f240 2295 	movw	r2, #661	; 0x295
 8007810:	4912      	ldr	r1, [pc, #72]	; (800785c <mem_free+0xcc>)
 8007812:	480d      	ldr	r0, [pc, #52]	; (8007848 <mem_free+0xb8>)
 8007814:	f00d f846 	bl	80148a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007818:	e00f      	b.n	800783a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007820:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <mem_free+0xd0>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	429a      	cmp	r2, r3
 8007828:	d202      	bcs.n	8007830 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800782a:	4a0d      	ldr	r2, [pc, #52]	; (8007860 <mem_free+0xd0>)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f7ff fe93 	bl	800755c <plug_holes>
 8007836:	e000      	b.n	800783a <mem_free+0xaa>
    return;
 8007838:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	08017350 	.word	0x08017350
 8007844:	08017424 	.word	0x08017424
 8007848:	08017398 	.word	0x08017398
 800784c:	20000878 	.word	0x20000878
 8007850:	2000087c 	.word	0x2000087c
 8007854:	08017448 	.word	0x08017448
 8007858:	08017464 	.word	0x08017464
 800785c:	0801748c 	.word	0x0801748c
 8007860:	20000880 	.word	0x20000880

08007864 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	460b      	mov	r3, r1
 800786e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007870:	887b      	ldrh	r3, [r7, #2]
 8007872:	3303      	adds	r3, #3
 8007874:	b29b      	uxth	r3, r3
 8007876:	f023 0303 	bic.w	r3, r3, #3
 800787a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800787c:	8bfb      	ldrh	r3, [r7, #30]
 800787e:	2b0b      	cmp	r3, #11
 8007880:	d801      	bhi.n	8007886 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007882:	230c      	movs	r3, #12
 8007884:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007886:	8bfb      	ldrh	r3, [r7, #30]
 8007888:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800788c:	d803      	bhi.n	8007896 <mem_trim+0x32>
 800788e:	8bfa      	ldrh	r2, [r7, #30]
 8007890:	887b      	ldrh	r3, [r7, #2]
 8007892:	429a      	cmp	r2, r3
 8007894:	d201      	bcs.n	800789a <mem_trim+0x36>
    return NULL;
 8007896:	2300      	movs	r3, #0
 8007898:	e0cc      	b.n	8007a34 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800789a:	4b68      	ldr	r3, [pc, #416]	; (8007a3c <mem_trim+0x1d8>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d304      	bcc.n	80078ae <mem_trim+0x4a>
 80078a4:	4b66      	ldr	r3, [pc, #408]	; (8007a40 <mem_trim+0x1dc>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d306      	bcc.n	80078bc <mem_trim+0x58>
 80078ae:	4b65      	ldr	r3, [pc, #404]	; (8007a44 <mem_trim+0x1e0>)
 80078b0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80078b4:	4964      	ldr	r1, [pc, #400]	; (8007a48 <mem_trim+0x1e4>)
 80078b6:	4865      	ldr	r0, [pc, #404]	; (8007a4c <mem_trim+0x1e8>)
 80078b8:	f00c fff4 	bl	80148a4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80078bc:	4b5f      	ldr	r3, [pc, #380]	; (8007a3c <mem_trim+0x1d8>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d304      	bcc.n	80078d0 <mem_trim+0x6c>
 80078c6:	4b5e      	ldr	r3, [pc, #376]	; (8007a40 <mem_trim+0x1dc>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d301      	bcc.n	80078d4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	e0af      	b.n	8007a34 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3b08      	subs	r3, #8
 80078d8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80078da:	69b8      	ldr	r0, [r7, #24]
 80078dc:	f7ff fe2c 	bl	8007538 <mem_to_ptr>
 80078e0:	4603      	mov	r3, r0
 80078e2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	881a      	ldrh	r2, [r3, #0]
 80078e8:	8afb      	ldrh	r3, [r7, #22]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	3b08      	subs	r3, #8
 80078f0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80078f2:	8bfa      	ldrh	r2, [r7, #30]
 80078f4:	8abb      	ldrh	r3, [r7, #20]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d906      	bls.n	8007908 <mem_trim+0xa4>
 80078fa:	4b52      	ldr	r3, [pc, #328]	; (8007a44 <mem_trim+0x1e0>)
 80078fc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007900:	4953      	ldr	r1, [pc, #332]	; (8007a50 <mem_trim+0x1ec>)
 8007902:	4852      	ldr	r0, [pc, #328]	; (8007a4c <mem_trim+0x1e8>)
 8007904:	f00c ffce 	bl	80148a4 <iprintf>
  if (newsize > size) {
 8007908:	8bfa      	ldrh	r2, [r7, #30]
 800790a:	8abb      	ldrh	r3, [r7, #20]
 800790c:	429a      	cmp	r2, r3
 800790e:	d901      	bls.n	8007914 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007910:	2300      	movs	r3, #0
 8007912:	e08f      	b.n	8007a34 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007914:	8bfa      	ldrh	r2, [r7, #30]
 8007916:	8abb      	ldrh	r3, [r7, #20]
 8007918:	429a      	cmp	r2, r3
 800791a:	d101      	bne.n	8007920 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	e089      	b.n	8007a34 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff fdf5 	bl	8007514 <ptr_to_mem>
 800792a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	791b      	ldrb	r3, [r3, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d13f      	bne.n	80079b4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800793c:	d106      	bne.n	800794c <mem_trim+0xe8>
 800793e:	4b41      	ldr	r3, [pc, #260]	; (8007a44 <mem_trim+0x1e0>)
 8007940:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007944:	4943      	ldr	r1, [pc, #268]	; (8007a54 <mem_trim+0x1f0>)
 8007946:	4841      	ldr	r0, [pc, #260]	; (8007a4c <mem_trim+0x1e8>)
 8007948:	f00c ffac 	bl	80148a4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	881b      	ldrh	r3, [r3, #0]
 8007950:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007952:	8afa      	ldrh	r2, [r7, #22]
 8007954:	8bfb      	ldrh	r3, [r7, #30]
 8007956:	4413      	add	r3, r2
 8007958:	b29b      	uxth	r3, r3
 800795a:	3308      	adds	r3, #8
 800795c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800795e:	4b3e      	ldr	r3, [pc, #248]	; (8007a58 <mem_trim+0x1f4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	429a      	cmp	r2, r3
 8007966:	d106      	bne.n	8007976 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007968:	89fb      	ldrh	r3, [r7, #14]
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff fdd2 	bl	8007514 <ptr_to_mem>
 8007970:	4603      	mov	r3, r0
 8007972:	4a39      	ldr	r2, [pc, #228]	; (8007a58 <mem_trim+0x1f4>)
 8007974:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007976:	89fb      	ldrh	r3, [r7, #14]
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff fdcb 	bl	8007514 <ptr_to_mem>
 800797e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	2200      	movs	r2, #0
 8007984:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	89ba      	ldrh	r2, [r7, #12]
 800798a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	8afa      	ldrh	r2, [r7, #22]
 8007990:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	89fa      	ldrh	r2, [r7, #14]
 8007996:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80079a0:	d047      	beq.n	8007a32 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff fdb4 	bl	8007514 <ptr_to_mem>
 80079ac:	4602      	mov	r2, r0
 80079ae:	89fb      	ldrh	r3, [r7, #14]
 80079b0:	8053      	strh	r3, [r2, #2]
 80079b2:	e03e      	b.n	8007a32 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80079b4:	8bfb      	ldrh	r3, [r7, #30]
 80079b6:	f103 0214 	add.w	r2, r3, #20
 80079ba:	8abb      	ldrh	r3, [r7, #20]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d838      	bhi.n	8007a32 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80079c0:	8afa      	ldrh	r2, [r7, #22]
 80079c2:	8bfb      	ldrh	r3, [r7, #30]
 80079c4:	4413      	add	r3, r2
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	3308      	adds	r3, #8
 80079ca:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80079d4:	d106      	bne.n	80079e4 <mem_trim+0x180>
 80079d6:	4b1b      	ldr	r3, [pc, #108]	; (8007a44 <mem_trim+0x1e0>)
 80079d8:	f240 3216 	movw	r2, #790	; 0x316
 80079dc:	491d      	ldr	r1, [pc, #116]	; (8007a54 <mem_trim+0x1f0>)
 80079de:	481b      	ldr	r0, [pc, #108]	; (8007a4c <mem_trim+0x1e8>)
 80079e0:	f00c ff60 	bl	80148a4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80079e4:	89fb      	ldrh	r3, [r7, #14]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff fd94 	bl	8007514 <ptr_to_mem>
 80079ec:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80079ee:	4b1a      	ldr	r3, [pc, #104]	; (8007a58 <mem_trim+0x1f4>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d202      	bcs.n	80079fe <mem_trim+0x19a>
      lfree = mem2;
 80079f8:	4a17      	ldr	r2, [pc, #92]	; (8007a58 <mem_trim+0x1f4>)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	2200      	movs	r2, #0
 8007a02:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	881a      	ldrh	r2, [r3, #0]
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	8afa      	ldrh	r2, [r7, #22]
 8007a10:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	89fa      	ldrh	r2, [r7, #14]
 8007a16:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007a20:	d007      	beq.n	8007a32 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7ff fd74 	bl	8007514 <ptr_to_mem>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	89fb      	ldrh	r3, [r7, #14]
 8007a30:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007a32:	687b      	ldr	r3, [r7, #4]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3720      	adds	r7, #32
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	20000878 	.word	0x20000878
 8007a40:	2000087c 	.word	0x2000087c
 8007a44:	08017350 	.word	0x08017350
 8007a48:	080174c0 	.word	0x080174c0
 8007a4c:	08017398 	.word	0x08017398
 8007a50:	080174d8 	.word	0x080174d8
 8007a54:	080174f8 	.word	0x080174f8
 8007a58:	20000880 	.word	0x20000880

08007a5c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	4603      	mov	r3, r0
 8007a64:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007a66:	88fb      	ldrh	r3, [r7, #6]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d101      	bne.n	8007a70 <mem_malloc+0x14>
    return NULL;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	e0d9      	b.n	8007c24 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007a70:	88fb      	ldrh	r3, [r7, #6]
 8007a72:	3303      	adds	r3, #3
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	f023 0303 	bic.w	r3, r3, #3
 8007a7a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007a7c:	8bbb      	ldrh	r3, [r7, #28]
 8007a7e:	2b0b      	cmp	r3, #11
 8007a80:	d801      	bhi.n	8007a86 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007a82:	230c      	movs	r3, #12
 8007a84:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007a86:	8bbb      	ldrh	r3, [r7, #28]
 8007a88:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007a8c:	d803      	bhi.n	8007a96 <mem_malloc+0x3a>
 8007a8e:	8bba      	ldrh	r2, [r7, #28]
 8007a90:	88fb      	ldrh	r3, [r7, #6]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d201      	bcs.n	8007a9a <mem_malloc+0x3e>
    return NULL;
 8007a96:	2300      	movs	r3, #0
 8007a98:	e0c4      	b.n	8007c24 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007a9a:	4b64      	ldr	r3, [pc, #400]	; (8007c2c <mem_malloc+0x1d0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff fd4a 	bl	8007538 <mem_to_ptr>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	83fb      	strh	r3, [r7, #30]
 8007aa8:	e0b4      	b.n	8007c14 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007aaa:	8bfb      	ldrh	r3, [r7, #30]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7ff fd31 	bl	8007514 <ptr_to_mem>
 8007ab2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	791b      	ldrb	r3, [r3, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f040 80a4 	bne.w	8007c06 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	8bfb      	ldrh	r3, [r7, #30]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	f1a3 0208 	sub.w	r2, r3, #8
 8007acc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	f0c0 8099 	bcc.w	8007c06 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	881b      	ldrh	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	8bfb      	ldrh	r3, [r7, #30]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	f1a3 0208 	sub.w	r2, r3, #8
 8007ae2:	8bbb      	ldrh	r3, [r7, #28]
 8007ae4:	3314      	adds	r3, #20
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d333      	bcc.n	8007b52 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007aea:	8bfa      	ldrh	r2, [r7, #30]
 8007aec:	8bbb      	ldrh	r3, [r7, #28]
 8007aee:	4413      	add	r3, r2
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	3308      	adds	r3, #8
 8007af4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007af6:	8a7b      	ldrh	r3, [r7, #18]
 8007af8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007afc:	d106      	bne.n	8007b0c <mem_malloc+0xb0>
 8007afe:	4b4c      	ldr	r3, [pc, #304]	; (8007c30 <mem_malloc+0x1d4>)
 8007b00:	f240 3287 	movw	r2, #903	; 0x387
 8007b04:	494b      	ldr	r1, [pc, #300]	; (8007c34 <mem_malloc+0x1d8>)
 8007b06:	484c      	ldr	r0, [pc, #304]	; (8007c38 <mem_malloc+0x1dc>)
 8007b08:	f00c fecc 	bl	80148a4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007b0c:	8a7b      	ldrh	r3, [r7, #18]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff fd00 	bl	8007514 <ptr_to_mem>
 8007b14:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	881a      	ldrh	r2, [r3, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8bfa      	ldrh	r2, [r7, #30]
 8007b28:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	8a7a      	ldrh	r2, [r7, #18]
 8007b2e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	2201      	movs	r2, #1
 8007b34:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007b3e:	d00b      	beq.n	8007b58 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7ff fce5 	bl	8007514 <ptr_to_mem>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	8a7b      	ldrh	r3, [r7, #18]
 8007b4e:	8053      	strh	r3, [r2, #2]
 8007b50:	e002      	b.n	8007b58 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2201      	movs	r2, #1
 8007b56:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007b58:	4b34      	ldr	r3, [pc, #208]	; (8007c2c <mem_malloc+0x1d0>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d127      	bne.n	8007bb2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8007b62:	4b32      	ldr	r3, [pc, #200]	; (8007c2c <mem_malloc+0x1d0>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007b68:	e005      	b.n	8007b76 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7ff fcd0 	bl	8007514 <ptr_to_mem>
 8007b74:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	791b      	ldrb	r3, [r3, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d004      	beq.n	8007b88 <mem_malloc+0x12c>
 8007b7e:	4b2f      	ldr	r3, [pc, #188]	; (8007c3c <mem_malloc+0x1e0>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69ba      	ldr	r2, [r7, #24]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d1f0      	bne.n	8007b6a <mem_malloc+0x10e>
          }
          lfree = cur;
 8007b88:	4a28      	ldr	r2, [pc, #160]	; (8007c2c <mem_malloc+0x1d0>)
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007b8e:	4b27      	ldr	r3, [pc, #156]	; (8007c2c <mem_malloc+0x1d0>)
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	4b2a      	ldr	r3, [pc, #168]	; (8007c3c <mem_malloc+0x1e0>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d00b      	beq.n	8007bb2 <mem_malloc+0x156>
 8007b9a:	4b24      	ldr	r3, [pc, #144]	; (8007c2c <mem_malloc+0x1d0>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	791b      	ldrb	r3, [r3, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d006      	beq.n	8007bb2 <mem_malloc+0x156>
 8007ba4:	4b22      	ldr	r3, [pc, #136]	; (8007c30 <mem_malloc+0x1d4>)
 8007ba6:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007baa:	4925      	ldr	r1, [pc, #148]	; (8007c40 <mem_malloc+0x1e4>)
 8007bac:	4822      	ldr	r0, [pc, #136]	; (8007c38 <mem_malloc+0x1dc>)
 8007bae:	f00c fe79 	bl	80148a4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007bb2:	8bba      	ldrh	r2, [r7, #28]
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	3308      	adds	r3, #8
 8007bba:	4a20      	ldr	r2, [pc, #128]	; (8007c3c <mem_malloc+0x1e0>)
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d906      	bls.n	8007bd0 <mem_malloc+0x174>
 8007bc2:	4b1b      	ldr	r3, [pc, #108]	; (8007c30 <mem_malloc+0x1d4>)
 8007bc4:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007bc8:	491e      	ldr	r1, [pc, #120]	; (8007c44 <mem_malloc+0x1e8>)
 8007bca:	481b      	ldr	r0, [pc, #108]	; (8007c38 <mem_malloc+0x1dc>)
 8007bcc:	f00c fe6a 	bl	80148a4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d006      	beq.n	8007be8 <mem_malloc+0x18c>
 8007bda:	4b15      	ldr	r3, [pc, #84]	; (8007c30 <mem_malloc+0x1d4>)
 8007bdc:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007be0:	4919      	ldr	r1, [pc, #100]	; (8007c48 <mem_malloc+0x1ec>)
 8007be2:	4815      	ldr	r0, [pc, #84]	; (8007c38 <mem_malloc+0x1dc>)
 8007be4:	f00c fe5e 	bl	80148a4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f003 0303 	and.w	r3, r3, #3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d006      	beq.n	8007c00 <mem_malloc+0x1a4>
 8007bf2:	4b0f      	ldr	r3, [pc, #60]	; (8007c30 <mem_malloc+0x1d4>)
 8007bf4:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007bf8:	4914      	ldr	r1, [pc, #80]	; (8007c4c <mem_malloc+0x1f0>)
 8007bfa:	480f      	ldr	r0, [pc, #60]	; (8007c38 <mem_malloc+0x1dc>)
 8007bfc:	f00c fe52 	bl	80148a4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	3308      	adds	r3, #8
 8007c04:	e00e      	b.n	8007c24 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007c06:	8bfb      	ldrh	r3, [r7, #30]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7ff fc83 	bl	8007514 <ptr_to_mem>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007c14:	8bfa      	ldrh	r2, [r7, #30]
 8007c16:	8bbb      	ldrh	r3, [r7, #28]
 8007c18:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	f4ff af44 	bcc.w	8007aaa <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3720      	adds	r7, #32
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	20000880 	.word	0x20000880
 8007c30:	08017350 	.word	0x08017350
 8007c34:	080174f8 	.word	0x080174f8
 8007c38:	08017398 	.word	0x08017398
 8007c3c:	2000087c 	.word	0x2000087c
 8007c40:	0801750c 	.word	0x0801750c
 8007c44:	08017528 	.word	0x08017528
 8007c48:	08017558 	.word	0x08017558
 8007c4c:	08017588 	.word	0x08017588

08007c50 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	3303      	adds	r3, #3
 8007c66:	f023 0303 	bic.w	r3, r3, #3
 8007c6a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	e011      	b.n	8007c96 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3301      	adds	r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	885b      	ldrh	r3, [r3, #2]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	dbe7      	blt.n	8007c72 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007ca2:	bf00      	nop
 8007ca4:	bf00      	nop
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	80fb      	strh	r3, [r7, #6]
 8007cba:	e009      	b.n	8007cd0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007cbc:	88fb      	ldrh	r3, [r7, #6]
 8007cbe:	4a08      	ldr	r2, [pc, #32]	; (8007ce0 <memp_init+0x30>)
 8007cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7ff ffc3 	bl	8007c50 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007cca:	88fb      	ldrh	r3, [r7, #6]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	80fb      	strh	r3, [r7, #6]
 8007cd0:	88fb      	ldrh	r3, [r7, #6]
 8007cd2:	2b08      	cmp	r3, #8
 8007cd4:	d9f2      	bls.n	8007cbc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007cd6:	bf00      	nop
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	0801a56c 	.word	0x0801a56c

08007ce4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d012      	beq.n	8007d20 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	6812      	ldr	r2, [r2, #0]
 8007d02:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f003 0303 	and.w	r3, r3, #3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d006      	beq.n	8007d1c <do_memp_malloc_pool+0x38>
 8007d0e:	4b07      	ldr	r3, [pc, #28]	; (8007d2c <do_memp_malloc_pool+0x48>)
 8007d10:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007d14:	4906      	ldr	r1, [pc, #24]	; (8007d30 <do_memp_malloc_pool+0x4c>)
 8007d16:	4807      	ldr	r0, [pc, #28]	; (8007d34 <do_memp_malloc_pool+0x50>)
 8007d18:	f00c fdc4 	bl	80148a4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	e000      	b.n	8007d22 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	080175ac 	.word	0x080175ac
 8007d30:	080175dc 	.word	0x080175dc
 8007d34:	08017600 	.word	0x08017600

08007d38 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d106      	bne.n	8007d54 <memp_malloc_pool+0x1c>
 8007d46:	4b0a      	ldr	r3, [pc, #40]	; (8007d70 <memp_malloc_pool+0x38>)
 8007d48:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8007d4c:	4909      	ldr	r1, [pc, #36]	; (8007d74 <memp_malloc_pool+0x3c>)
 8007d4e:	480a      	ldr	r0, [pc, #40]	; (8007d78 <memp_malloc_pool+0x40>)
 8007d50:	f00c fda8 	bl	80148a4 <iprintf>
  if (desc == NULL) {
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <memp_malloc_pool+0x26>
    return NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e003      	b.n	8007d66 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff ffc0 	bl	8007ce4 <do_memp_malloc_pool>
 8007d64:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	080175ac 	.word	0x080175ac
 8007d74:	08017628 	.word	0x08017628
 8007d78:	08017600 	.word	0x08017600

08007d7c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	4603      	mov	r3, r0
 8007d84:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007d86:	79fb      	ldrb	r3, [r7, #7]
 8007d88:	2b08      	cmp	r3, #8
 8007d8a:	d908      	bls.n	8007d9e <memp_malloc+0x22>
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <memp_malloc+0x3c>)
 8007d8e:	f240 1257 	movw	r2, #343	; 0x157
 8007d92:	490a      	ldr	r1, [pc, #40]	; (8007dbc <memp_malloc+0x40>)
 8007d94:	480a      	ldr	r0, [pc, #40]	; (8007dc0 <memp_malloc+0x44>)
 8007d96:	f00c fd85 	bl	80148a4 <iprintf>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	e008      	b.n	8007db0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	4a08      	ldr	r2, [pc, #32]	; (8007dc4 <memp_malloc+0x48>)
 8007da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff ff9c 	bl	8007ce4 <do_memp_malloc_pool>
 8007dac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007dae:	68fb      	ldr	r3, [r7, #12]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	080175ac 	.word	0x080175ac
 8007dbc:	0801763c 	.word	0x0801763c
 8007dc0:	08017600 	.word	0x08017600
 8007dc4:	0801a56c 	.word	0x0801a56c

08007dc8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	f003 0303 	and.w	r3, r3, #3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d006      	beq.n	8007dea <do_memp_free_pool+0x22>
 8007ddc:	4b0a      	ldr	r3, [pc, #40]	; (8007e08 <do_memp_free_pool+0x40>)
 8007dde:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007de2:	490a      	ldr	r1, [pc, #40]	; (8007e0c <do_memp_free_pool+0x44>)
 8007de4:	480a      	ldr	r0, [pc, #40]	; (8007e10 <do_memp_free_pool+0x48>)
 8007de6:	f00c fd5d 	bl	80148a4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007e00:	bf00      	nop
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	080175ac 	.word	0x080175ac
 8007e0c:	0801765c 	.word	0x0801765c
 8007e10:	08017600 	.word	0x08017600

08007e14 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d106      	bne.n	8007e32 <memp_free_pool+0x1e>
 8007e24:	4b0a      	ldr	r3, [pc, #40]	; (8007e50 <memp_free_pool+0x3c>)
 8007e26:	f240 1295 	movw	r2, #405	; 0x195
 8007e2a:	490a      	ldr	r1, [pc, #40]	; (8007e54 <memp_free_pool+0x40>)
 8007e2c:	480a      	ldr	r0, [pc, #40]	; (8007e58 <memp_free_pool+0x44>)
 8007e2e:	f00c fd39 	bl	80148a4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d007      	beq.n	8007e48 <memp_free_pool+0x34>
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d004      	beq.n	8007e48 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7ff ffc1 	bl	8007dc8 <do_memp_free_pool>
 8007e46:	e000      	b.n	8007e4a <memp_free_pool+0x36>
    return;
 8007e48:	bf00      	nop
}
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	080175ac 	.word	0x080175ac
 8007e54:	08017628 	.word	0x08017628
 8007e58:	08017600 	.word	0x08017600

08007e5c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	6039      	str	r1, [r7, #0]
 8007e66:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	2b08      	cmp	r3, #8
 8007e6c:	d907      	bls.n	8007e7e <memp_free+0x22>
 8007e6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ea0 <memp_free+0x44>)
 8007e70:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007e74:	490b      	ldr	r1, [pc, #44]	; (8007ea4 <memp_free+0x48>)
 8007e76:	480c      	ldr	r0, [pc, #48]	; (8007ea8 <memp_free+0x4c>)
 8007e78:	f00c fd14 	bl	80148a4 <iprintf>
 8007e7c:	e00c      	b.n	8007e98 <memp_free+0x3c>

  if (mem == NULL) {
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d008      	beq.n	8007e96 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007e84:	79fb      	ldrb	r3, [r7, #7]
 8007e86:	4a09      	ldr	r2, [pc, #36]	; (8007eac <memp_free+0x50>)
 8007e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff ff9a 	bl	8007dc8 <do_memp_free_pool>
 8007e94:	e000      	b.n	8007e98 <memp_free+0x3c>
    return;
 8007e96:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	080175ac 	.word	0x080175ac
 8007ea4:	0801767c 	.word	0x0801767c
 8007ea8:	08017600 	.word	0x08017600
 8007eac:	0801a56c 	.word	0x0801a56c

08007eb0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007eb4:	bf00      	nop
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
	...

08007ec0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d108      	bne.n	8007ee6 <netif_add+0x26>
 8007ed4:	4b57      	ldr	r3, [pc, #348]	; (8008034 <netif_add+0x174>)
 8007ed6:	f240 1227 	movw	r2, #295	; 0x127
 8007eda:	4957      	ldr	r1, [pc, #348]	; (8008038 <netif_add+0x178>)
 8007edc:	4857      	ldr	r0, [pc, #348]	; (800803c <netif_add+0x17c>)
 8007ede:	f00c fce1 	bl	80148a4 <iprintf>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	e0a2      	b.n	800802c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d108      	bne.n	8007efe <netif_add+0x3e>
 8007eec:	4b51      	ldr	r3, [pc, #324]	; (8008034 <netif_add+0x174>)
 8007eee:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007ef2:	4953      	ldr	r1, [pc, #332]	; (8008040 <netif_add+0x180>)
 8007ef4:	4851      	ldr	r0, [pc, #324]	; (800803c <netif_add+0x17c>)
 8007ef6:	f00c fcd5 	bl	80148a4 <iprintf>
 8007efa:	2300      	movs	r3, #0
 8007efc:	e096      	b.n	800802c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007f04:	4b4f      	ldr	r3, [pc, #316]	; (8008044 <netif_add+0x184>)
 8007f06:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007f0e:	4b4d      	ldr	r3, [pc, #308]	; (8008044 <netif_add+0x184>)
 8007f10:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007f18:	4b4a      	ldr	r3, [pc, #296]	; (8008044 <netif_add+0x184>)
 8007f1a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4a45      	ldr	r2, [pc, #276]	; (8008048 <netif_add+0x188>)
 8007f32:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6a3a      	ldr	r2, [r7, #32]
 8007f4c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007f4e:	4b3f      	ldr	r3, [pc, #252]	; (800804c <netif_add+0x18c>)
 8007f50:	781a      	ldrb	r2, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f5c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	68b9      	ldr	r1, [r7, #8]
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 f913 	bl	8008190 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	4798      	blx	r3
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <netif_add+0xba>
    return NULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	e058      	b.n	800802c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f80:	2bff      	cmp	r3, #255	; 0xff
 8007f82:	d103      	bne.n	8007f8c <netif_add+0xcc>
        netif->num = 0;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007f90:	4b2f      	ldr	r3, [pc, #188]	; (8008050 <netif_add+0x190>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	e02b      	b.n	8007ff0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d106      	bne.n	8007fae <netif_add+0xee>
 8007fa0:	4b24      	ldr	r3, [pc, #144]	; (8008034 <netif_add+0x174>)
 8007fa2:	f240 128b 	movw	r2, #395	; 0x18b
 8007fa6:	492b      	ldr	r1, [pc, #172]	; (8008054 <netif_add+0x194>)
 8007fa8:	4824      	ldr	r0, [pc, #144]	; (800803c <netif_add+0x17c>)
 8007faa:	f00c fc7b 	bl	80148a4 <iprintf>
        num_netifs++;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	2bff      	cmp	r3, #255	; 0xff
 8007fb8:	dd06      	ble.n	8007fc8 <netif_add+0x108>
 8007fba:	4b1e      	ldr	r3, [pc, #120]	; (8008034 <netif_add+0x174>)
 8007fbc:	f240 128d 	movw	r2, #397	; 0x18d
 8007fc0:	4925      	ldr	r1, [pc, #148]	; (8008058 <netif_add+0x198>)
 8007fc2:	481e      	ldr	r0, [pc, #120]	; (800803c <netif_add+0x17c>)
 8007fc4:	f00c fc6e 	bl	80148a4 <iprintf>
        if (netif2->num == netif->num) {
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d108      	bne.n	8007fea <netif_add+0x12a>
          netif->num++;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fde:	3301      	adds	r3, #1
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007fe8:	e005      	b.n	8007ff6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	617b      	str	r3, [r7, #20]
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1d0      	bne.n	8007f98 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1be      	bne.n	8007f7a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008002:	2bfe      	cmp	r3, #254	; 0xfe
 8008004:	d103      	bne.n	800800e <netif_add+0x14e>
    netif_num = 0;
 8008006:	4b11      	ldr	r3, [pc, #68]	; (800804c <netif_add+0x18c>)
 8008008:	2200      	movs	r2, #0
 800800a:	701a      	strb	r2, [r3, #0]
 800800c:	e006      	b.n	800801c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008014:	3301      	adds	r3, #1
 8008016:	b2da      	uxtb	r2, r3
 8008018:	4b0c      	ldr	r3, [pc, #48]	; (800804c <netif_add+0x18c>)
 800801a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800801c:	4b0c      	ldr	r3, [pc, #48]	; (8008050 <netif_add+0x190>)
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008024:	4a0a      	ldr	r2, [pc, #40]	; (8008050 <netif_add+0x190>)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800802a:	68fb      	ldr	r3, [r7, #12]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3718      	adds	r7, #24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	08017698 	.word	0x08017698
 8008038:	0801772c 	.word	0x0801772c
 800803c:	080176e8 	.word	0x080176e8
 8008040:	08017748 	.word	0x08017748
 8008044:	0801a5d0 	.word	0x0801a5d0
 8008048:	0800846b 	.word	0x0800846b
 800804c:	200008a8 	.word	0x200008a8
 8008050:	2000ae58 	.word	0x2000ae58
 8008054:	0801776c 	.word	0x0801776c
 8008058:	08017780 	.word	0x08017780

0800805c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f002 fdf3 	bl	800ac54 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f007 fb2f 	bl	800f6d4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
	...

08008080 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d106      	bne.n	80080a0 <netif_do_set_ipaddr+0x20>
 8008092:	4b1d      	ldr	r3, [pc, #116]	; (8008108 <netif_do_set_ipaddr+0x88>)
 8008094:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008098:	491c      	ldr	r1, [pc, #112]	; (800810c <netif_do_set_ipaddr+0x8c>)
 800809a:	481d      	ldr	r0, [pc, #116]	; (8008110 <netif_do_set_ipaddr+0x90>)
 800809c:	f00c fc02 	bl	80148a4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d106      	bne.n	80080b4 <netif_do_set_ipaddr+0x34>
 80080a6:	4b18      	ldr	r3, [pc, #96]	; (8008108 <netif_do_set_ipaddr+0x88>)
 80080a8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80080ac:	4917      	ldr	r1, [pc, #92]	; (800810c <netif_do_set_ipaddr+0x8c>)
 80080ae:	4818      	ldr	r0, [pc, #96]	; (8008110 <netif_do_set_ipaddr+0x90>)
 80080b0:	f00c fbf8 	bl	80148a4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3304      	adds	r3, #4
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d01c      	beq.n	80080fc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3304      	adds	r3, #4
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80080d2:	f107 0314 	add.w	r3, r7, #20
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff ffbf 	bl	800805c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <netif_do_set_ipaddr+0x6a>
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	e000      	b.n	80080ec <netif_do_set_ipaddr+0x6c>
 80080ea:	2300      	movs	r3, #0
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80080f0:	2101      	movs	r1, #1
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 f8d2 	bl	800829c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80080f8:	2301      	movs	r3, #1
 80080fa:	e000      	b.n	80080fe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3718      	adds	r7, #24
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	08017698 	.word	0x08017698
 800810c:	080177b0 	.word	0x080177b0
 8008110:	080176e8 	.word	0x080176e8

08008114 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3308      	adds	r3, #8
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d00a      	beq.n	8008144 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d002      	beq.n	800813a <netif_do_set_netmask+0x26>
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	e000      	b.n	800813c <netif_do_set_netmask+0x28>
 800813a:	2300      	movs	r3, #0
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008140:	2301      	movs	r3, #1
 8008142:	e000      	b.n	8008146 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008152:	b480      	push	{r7}
 8008154:	b085      	sub	sp, #20
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	330c      	adds	r3, #12
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	429a      	cmp	r2, r3
 800816a:	d00a      	beq.n	8008182 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <netif_do_set_gw+0x26>
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	e000      	b.n	800817a <netif_do_set_gw+0x28>
 8008178:	2300      	movs	r3, #0
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800817e:	2301      	movs	r3, #1
 8008180:	e000      	b.n	8008184 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b088      	sub	sp, #32
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80081ac:	4b1c      	ldr	r3, [pc, #112]	; (8008220 <netif_set_addr+0x90>)
 80081ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80081b6:	4b1a      	ldr	r3, [pc, #104]	; (8008220 <netif_set_addr+0x90>)
 80081b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80081c0:	4b17      	ldr	r3, [pc, #92]	; (8008220 <netif_set_addr+0x90>)
 80081c2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <netif_set_addr+0x42>
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <netif_set_addr+0x46>
 80081d2:	2301      	movs	r3, #1
 80081d4:	e000      	b.n	80081d8 <netif_set_addr+0x48>
 80081d6:	2300      	movs	r3, #0
 80081d8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d006      	beq.n	80081ee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80081e0:	f107 0310 	add.w	r3, r7, #16
 80081e4:	461a      	mov	r2, r3
 80081e6:	68b9      	ldr	r1, [r7, #8]
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f7ff ff49 	bl	8008080 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80081ee:	69fa      	ldr	r2, [r7, #28]
 80081f0:	6879      	ldr	r1, [r7, #4]
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f7ff ff8e 	bl	8008114 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f7ff ffa8 	bl	8008152 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d106      	bne.n	8008216 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008208:	f107 0310 	add.w	r3, r7, #16
 800820c:	461a      	mov	r2, r3
 800820e:	68b9      	ldr	r1, [r7, #8]
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f7ff ff35 	bl	8008080 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008216:	bf00      	nop
 8008218:	3720      	adds	r7, #32
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	0801a5d0 	.word	0x0801a5d0

08008224 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800822c:	4a04      	ldr	r2, [pc, #16]	; (8008240 <netif_set_default+0x1c>)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008232:	bf00      	nop
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	2000ae5c 	.word	0x2000ae5c

08008244 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d107      	bne.n	8008262 <netif_set_up+0x1e>
 8008252:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <netif_set_up+0x4c>)
 8008254:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008258:	490e      	ldr	r1, [pc, #56]	; (8008294 <netif_set_up+0x50>)
 800825a:	480f      	ldr	r0, [pc, #60]	; (8008298 <netif_set_up+0x54>)
 800825c:	f00c fb22 	bl	80148a4 <iprintf>
 8008260:	e013      	b.n	800828a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10c      	bne.n	800828a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008276:	f043 0301 	orr.w	r3, r3, #1
 800827a:	b2da      	uxtb	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008282:	2103      	movs	r1, #3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f809 	bl	800829c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	08017698 	.word	0x08017698
 8008294:	08017820 	.word	0x08017820
 8008298:	080176e8 	.word	0x080176e8

0800829c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d106      	bne.n	80082bc <netif_issue_reports+0x20>
 80082ae:	4b18      	ldr	r3, [pc, #96]	; (8008310 <netif_issue_reports+0x74>)
 80082b0:	f240 326d 	movw	r2, #877	; 0x36d
 80082b4:	4917      	ldr	r1, [pc, #92]	; (8008314 <netif_issue_reports+0x78>)
 80082b6:	4818      	ldr	r0, [pc, #96]	; (8008318 <netif_issue_reports+0x7c>)
 80082b8:	f00c faf4 	bl	80148a4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80082c2:	f003 0304 	and.w	r3, r3, #4
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d01e      	beq.n	8008308 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80082d0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d017      	beq.n	8008308 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80082d8:	78fb      	ldrb	r3, [r7, #3]
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d013      	beq.n	800830a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3304      	adds	r3, #4
 80082e6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00e      	beq.n	800830a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80082f2:	f003 0308 	and.w	r3, r3, #8
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d007      	beq.n	800830a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	3304      	adds	r3, #4
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f008 f951 	bl	80105a8 <etharp_request>
 8008306:	e000      	b.n	800830a <netif_issue_reports+0x6e>
    return;
 8008308:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	08017698 	.word	0x08017698
 8008314:	0801783c 	.word	0x0801783c
 8008318:	080176e8 	.word	0x080176e8

0800831c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d107      	bne.n	800833a <netif_set_down+0x1e>
 800832a:	4b12      	ldr	r3, [pc, #72]	; (8008374 <netif_set_down+0x58>)
 800832c:	f240 329b 	movw	r2, #923	; 0x39b
 8008330:	4911      	ldr	r1, [pc, #68]	; (8008378 <netif_set_down+0x5c>)
 8008332:	4812      	ldr	r0, [pc, #72]	; (800837c <netif_set_down+0x60>)
 8008334:	f00c fab6 	bl	80148a4 <iprintf>
 8008338:	e019      	b.n	800836e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	d012      	beq.n	800836e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800834e:	f023 0301 	bic.w	r3, r3, #1
 8008352:	b2da      	uxtb	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008360:	f003 0308 	and.w	r3, r3, #8
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f007 fcdb 	bl	800fd24 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	08017698 	.word	0x08017698
 8008378:	08017860 	.word	0x08017860
 800837c:	080176e8 	.word	0x080176e8

08008380 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d107      	bne.n	800839e <netif_set_link_up+0x1e>
 800838e:	4b13      	ldr	r3, [pc, #76]	; (80083dc <netif_set_link_up+0x5c>)
 8008390:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008394:	4912      	ldr	r1, [pc, #72]	; (80083e0 <netif_set_link_up+0x60>)
 8008396:	4813      	ldr	r0, [pc, #76]	; (80083e4 <netif_set_link_up+0x64>)
 8008398:	f00c fa84 	bl	80148a4 <iprintf>
 800839c:	e01b      	b.n	80083d6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d114      	bne.n	80083d6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80083b2:	f043 0304 	orr.w	r3, r3, #4
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80083be:	2103      	movs	r1, #3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7ff ff6b 	bl	800829c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <netif_set_link_up+0x56>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	08017698 	.word	0x08017698
 80083e0:	08017880 	.word	0x08017880
 80083e4:	080176e8 	.word	0x080176e8

080083e8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d107      	bne.n	8008406 <netif_set_link_down+0x1e>
 80083f6:	4b11      	ldr	r3, [pc, #68]	; (800843c <netif_set_link_down+0x54>)
 80083f8:	f240 4206 	movw	r2, #1030	; 0x406
 80083fc:	4910      	ldr	r1, [pc, #64]	; (8008440 <netif_set_link_down+0x58>)
 80083fe:	4811      	ldr	r0, [pc, #68]	; (8008444 <netif_set_link_down+0x5c>)
 8008400:	f00c fa50 	bl	80148a4 <iprintf>
 8008404:	e017      	b.n	8008436 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800840c:	f003 0304 	and.w	r3, r3, #4
 8008410:	2b00      	cmp	r3, #0
 8008412:	d010      	beq.n	8008436 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800841a:	f023 0304 	bic.w	r3, r3, #4
 800841e:	b2da      	uxtb	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d003      	beq.n	8008436 <netif_set_link_down+0x4e>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	08017698 	.word	0x08017698
 8008440:	080178a4 	.word	0x080178a4
 8008444:	080176e8 	.word	0x080176e8

08008448 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	61da      	str	r2, [r3, #28]
  }
}
 800845e:	bf00      	nop
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800846a:	b480      	push	{r7}
 800846c:	b085      	sub	sp, #20
 800846e:	af00      	add	r7, sp, #0
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008476:	f06f 030b 	mvn.w	r3, #11
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
	...

08008488 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008492:	79fb      	ldrb	r3, [r7, #7]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d013      	beq.n	80084c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008498:	4b0d      	ldr	r3, [pc, #52]	; (80084d0 <netif_get_by_index+0x48>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	e00c      	b.n	80084ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084a6:	3301      	adds	r3, #1
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	79fa      	ldrb	r2, [r7, #7]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d101      	bne.n	80084b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	e006      	b.n	80084c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	60fb      	str	r3, [r7, #12]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1ef      	bne.n	80084a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	2000ae58 	.word	0x2000ae58

080084d4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80084da:	4b0c      	ldr	r3, [pc, #48]	; (800850c <pbuf_free_ooseq+0x38>)
 80084dc:	2200      	movs	r2, #0
 80084de:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80084e0:	4b0b      	ldr	r3, [pc, #44]	; (8008510 <pbuf_free_ooseq+0x3c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	607b      	str	r3, [r7, #4]
 80084e6:	e00a      	b.n	80084fe <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d003      	beq.n	80084f8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f002 fbed 	bl	800acd0 <tcp_free_ooseq>
      return;
 80084f6:	e005      	b.n	8008504 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	607b      	str	r3, [r7, #4]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1f1      	bne.n	80084e8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	2000ae60 	.word	0x2000ae60
 8008510:	2000ae68 	.word	0x2000ae68

08008514 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008514:	b480      	push	{r7}
 8008516:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008518:	4b03      	ldr	r3, [pc, #12]	; (8008528 <pbuf_pool_is_empty+0x14>)
 800851a:	2201      	movs	r2, #1
 800851c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800851e:	bf00      	nop
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	2000ae60 	.word	0x2000ae60

0800852c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	4611      	mov	r1, r2
 8008538:	461a      	mov	r2, r3
 800853a:	460b      	mov	r3, r1
 800853c:	80fb      	strh	r3, [r7, #6]
 800853e:	4613      	mov	r3, r2
 8008540:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	88fa      	ldrh	r2, [r7, #6]
 8008552:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	88ba      	ldrh	r2, [r7, #4]
 8008558:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800855a:	8b3b      	ldrh	r3, [r7, #24]
 800855c:	b2da      	uxtb	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	7f3a      	ldrb	r2, [r7, #28]
 8008566:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2201      	movs	r2, #1
 800856c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	73da      	strb	r2, [r3, #15]
}
 8008574:	bf00      	nop
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b08c      	sub	sp, #48	; 0x30
 8008584:	af02      	add	r7, sp, #8
 8008586:	4603      	mov	r3, r0
 8008588:	71fb      	strb	r3, [r7, #7]
 800858a:	460b      	mov	r3, r1
 800858c:	80bb      	strh	r3, [r7, #4]
 800858e:	4613      	mov	r3, r2
 8008590:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008592:	79fb      	ldrb	r3, [r7, #7]
 8008594:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008596:	887b      	ldrh	r3, [r7, #2]
 8008598:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800859c:	d07f      	beq.n	800869e <pbuf_alloc+0x11e>
 800859e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80085a2:	f300 80c8 	bgt.w	8008736 <pbuf_alloc+0x1b6>
 80085a6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80085aa:	d010      	beq.n	80085ce <pbuf_alloc+0x4e>
 80085ac:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80085b0:	f300 80c1 	bgt.w	8008736 <pbuf_alloc+0x1b6>
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d002      	beq.n	80085be <pbuf_alloc+0x3e>
 80085b8:	2b41      	cmp	r3, #65	; 0x41
 80085ba:	f040 80bc 	bne.w	8008736 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80085be:	887a      	ldrh	r2, [r7, #2]
 80085c0:	88bb      	ldrh	r3, [r7, #4]
 80085c2:	4619      	mov	r1, r3
 80085c4:	2000      	movs	r0, #0
 80085c6:	f000 f8d1 	bl	800876c <pbuf_alloc_reference>
 80085ca:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80085cc:	e0bd      	b.n	800874a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80085d2:	2300      	movs	r3, #0
 80085d4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80085d6:	88bb      	ldrh	r3, [r7, #4]
 80085d8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80085da:	2008      	movs	r0, #8
 80085dc:	f7ff fbce 	bl	8007d7c <memp_malloc>
 80085e0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d109      	bne.n	80085fc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80085e8:	f7ff ff94 	bl	8008514 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80085f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085f4:	f000 faa8 	bl	8008b48 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80085f8:	2300      	movs	r3, #0
 80085fa:	e0a7      	b.n	800874c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80085fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80085fe:	3303      	adds	r3, #3
 8008600:	b29b      	uxth	r3, r3
 8008602:	f023 0303 	bic.w	r3, r3, #3
 8008606:	b29b      	uxth	r3, r3
 8008608:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800860c:	b29b      	uxth	r3, r3
 800860e:	8b7a      	ldrh	r2, [r7, #26]
 8008610:	4293      	cmp	r3, r2
 8008612:	bf28      	it	cs
 8008614:	4613      	movcs	r3, r2
 8008616:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008618:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800861a:	3310      	adds	r3, #16
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	4413      	add	r3, r2
 8008620:	3303      	adds	r3, #3
 8008622:	f023 0303 	bic.w	r3, r3, #3
 8008626:	4618      	mov	r0, r3
 8008628:	89f9      	ldrh	r1, [r7, #14]
 800862a:	8b7a      	ldrh	r2, [r7, #26]
 800862c:	2300      	movs	r3, #0
 800862e:	9301      	str	r3, [sp, #4]
 8008630:	887b      	ldrh	r3, [r7, #2]
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	460b      	mov	r3, r1
 8008636:	4601      	mov	r1, r0
 8008638:	6938      	ldr	r0, [r7, #16]
 800863a:	f7ff ff77 	bl	800852c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f003 0303 	and.w	r3, r3, #3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d006      	beq.n	8008658 <pbuf_alloc+0xd8>
 800864a:	4b42      	ldr	r3, [pc, #264]	; (8008754 <pbuf_alloc+0x1d4>)
 800864c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008650:	4941      	ldr	r1, [pc, #260]	; (8008758 <pbuf_alloc+0x1d8>)
 8008652:	4842      	ldr	r0, [pc, #264]	; (800875c <pbuf_alloc+0x1dc>)
 8008654:	f00c f926 	bl	80148a4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008658:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800865a:	3303      	adds	r3, #3
 800865c:	f023 0303 	bic.w	r3, r3, #3
 8008660:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008664:	d106      	bne.n	8008674 <pbuf_alloc+0xf4>
 8008666:	4b3b      	ldr	r3, [pc, #236]	; (8008754 <pbuf_alloc+0x1d4>)
 8008668:	f44f 7281 	mov.w	r2, #258	; 0x102
 800866c:	493c      	ldr	r1, [pc, #240]	; (8008760 <pbuf_alloc+0x1e0>)
 800866e:	483b      	ldr	r0, [pc, #236]	; (800875c <pbuf_alloc+0x1dc>)
 8008670:	f00c f918 	bl	80148a4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	2b00      	cmp	r3, #0
 8008678:	d102      	bne.n	8008680 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	627b      	str	r3, [r7, #36]	; 0x24
 800867e:	e002      	b.n	8008686 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800868a:	8b7a      	ldrh	r2, [r7, #26]
 800868c:	89fb      	ldrh	r3, [r7, #14]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008692:	2300      	movs	r3, #0
 8008694:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008696:	8b7b      	ldrh	r3, [r7, #26]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d19e      	bne.n	80085da <pbuf_alloc+0x5a>
      break;
 800869c:	e055      	b.n	800874a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800869e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80086a0:	3303      	adds	r3, #3
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	f023 0303 	bic.w	r3, r3, #3
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	88bb      	ldrh	r3, [r7, #4]
 80086ac:	3303      	adds	r3, #3
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f023 0303 	bic.w	r3, r3, #3
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	4413      	add	r3, r2
 80086b8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80086ba:	8b3b      	ldrh	r3, [r7, #24]
 80086bc:	3310      	adds	r3, #16
 80086be:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80086c0:	8b3a      	ldrh	r2, [r7, #24]
 80086c2:	88bb      	ldrh	r3, [r7, #4]
 80086c4:	3303      	adds	r3, #3
 80086c6:	f023 0303 	bic.w	r3, r3, #3
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d306      	bcc.n	80086dc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80086ce:	8afa      	ldrh	r2, [r7, #22]
 80086d0:	88bb      	ldrh	r3, [r7, #4]
 80086d2:	3303      	adds	r3, #3
 80086d4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80086d8:	429a      	cmp	r2, r3
 80086da:	d201      	bcs.n	80086e0 <pbuf_alloc+0x160>
        return NULL;
 80086dc:	2300      	movs	r3, #0
 80086de:	e035      	b.n	800874c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80086e0:	8afb      	ldrh	r3, [r7, #22]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7ff f9ba 	bl	8007a5c <mem_malloc>
 80086e8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <pbuf_alloc+0x174>
        return NULL;
 80086f0:	2300      	movs	r3, #0
 80086f2:	e02b      	b.n	800874c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80086f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80086f6:	3310      	adds	r3, #16
 80086f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086fa:	4413      	add	r3, r2
 80086fc:	3303      	adds	r3, #3
 80086fe:	f023 0303 	bic.w	r3, r3, #3
 8008702:	4618      	mov	r0, r3
 8008704:	88b9      	ldrh	r1, [r7, #4]
 8008706:	88ba      	ldrh	r2, [r7, #4]
 8008708:	2300      	movs	r3, #0
 800870a:	9301      	str	r3, [sp, #4]
 800870c:	887b      	ldrh	r3, [r7, #2]
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	460b      	mov	r3, r1
 8008712:	4601      	mov	r1, r0
 8008714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008716:	f7ff ff09 	bl	800852c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d010      	beq.n	8008748 <pbuf_alloc+0x1c8>
 8008726:	4b0b      	ldr	r3, [pc, #44]	; (8008754 <pbuf_alloc+0x1d4>)
 8008728:	f44f 7291 	mov.w	r2, #290	; 0x122
 800872c:	490d      	ldr	r1, [pc, #52]	; (8008764 <pbuf_alloc+0x1e4>)
 800872e:	480b      	ldr	r0, [pc, #44]	; (800875c <pbuf_alloc+0x1dc>)
 8008730:	f00c f8b8 	bl	80148a4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008734:	e008      	b.n	8008748 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008736:	4b07      	ldr	r3, [pc, #28]	; (8008754 <pbuf_alloc+0x1d4>)
 8008738:	f240 1227 	movw	r2, #295	; 0x127
 800873c:	490a      	ldr	r1, [pc, #40]	; (8008768 <pbuf_alloc+0x1e8>)
 800873e:	4807      	ldr	r0, [pc, #28]	; (800875c <pbuf_alloc+0x1dc>)
 8008740:	f00c f8b0 	bl	80148a4 <iprintf>
      return NULL;
 8008744:	2300      	movs	r3, #0
 8008746:	e001      	b.n	800874c <pbuf_alloc+0x1cc>
      break;
 8008748:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800874c:	4618      	mov	r0, r3
 800874e:	3728      	adds	r7, #40	; 0x28
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	080178c8 	.word	0x080178c8
 8008758:	080178f8 	.word	0x080178f8
 800875c:	08017928 	.word	0x08017928
 8008760:	08017950 	.word	0x08017950
 8008764:	08017984 	.word	0x08017984
 8008768:	080179b0 	.word	0x080179b0

0800876c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af02      	add	r7, sp, #8
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	807b      	strh	r3, [r7, #2]
 8008778:	4613      	mov	r3, r2
 800877a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800877c:	883b      	ldrh	r3, [r7, #0]
 800877e:	2b41      	cmp	r3, #65	; 0x41
 8008780:	d009      	beq.n	8008796 <pbuf_alloc_reference+0x2a>
 8008782:	883b      	ldrh	r3, [r7, #0]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d006      	beq.n	8008796 <pbuf_alloc_reference+0x2a>
 8008788:	4b0f      	ldr	r3, [pc, #60]	; (80087c8 <pbuf_alloc_reference+0x5c>)
 800878a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800878e:	490f      	ldr	r1, [pc, #60]	; (80087cc <pbuf_alloc_reference+0x60>)
 8008790:	480f      	ldr	r0, [pc, #60]	; (80087d0 <pbuf_alloc_reference+0x64>)
 8008792:	f00c f887 	bl	80148a4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008796:	2007      	movs	r0, #7
 8008798:	f7ff faf0 	bl	8007d7c <memp_malloc>
 800879c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80087a4:	2300      	movs	r3, #0
 80087a6:	e00b      	b.n	80087c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80087a8:	8879      	ldrh	r1, [r7, #2]
 80087aa:	887a      	ldrh	r2, [r7, #2]
 80087ac:	2300      	movs	r3, #0
 80087ae:	9301      	str	r3, [sp, #4]
 80087b0:	883b      	ldrh	r3, [r7, #0]
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	460b      	mov	r3, r1
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7ff feb7 	bl	800852c <pbuf_init_alloced_pbuf>
  return p;
 80087be:	68fb      	ldr	r3, [r7, #12]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	080178c8 	.word	0x080178c8
 80087cc:	080179cc 	.word	0x080179cc
 80087d0:	08017928 	.word	0x08017928

080087d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af02      	add	r7, sp, #8
 80087da:	607b      	str	r3, [r7, #4]
 80087dc:	4603      	mov	r3, r0
 80087de:	73fb      	strb	r3, [r7, #15]
 80087e0:	460b      	mov	r3, r1
 80087e2:	81bb      	strh	r3, [r7, #12]
 80087e4:	4613      	mov	r3, r2
 80087e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80087ec:	8a7b      	ldrh	r3, [r7, #18]
 80087ee:	3303      	adds	r3, #3
 80087f0:	f023 0203 	bic.w	r2, r3, #3
 80087f4:	89bb      	ldrh	r3, [r7, #12]
 80087f6:	441a      	add	r2, r3
 80087f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d901      	bls.n	8008802 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80087fe:	2300      	movs	r3, #0
 8008800:	e018      	b.n	8008834 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d007      	beq.n	8008818 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008808:	8a7b      	ldrh	r3, [r7, #18]
 800880a:	3303      	adds	r3, #3
 800880c:	f023 0303 	bic.w	r3, r3, #3
 8008810:	6a3a      	ldr	r2, [r7, #32]
 8008812:	4413      	add	r3, r2
 8008814:	617b      	str	r3, [r7, #20]
 8008816:	e001      	b.n	800881c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008818:	2300      	movs	r3, #0
 800881a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	89b9      	ldrh	r1, [r7, #12]
 8008820:	89ba      	ldrh	r2, [r7, #12]
 8008822:	2302      	movs	r3, #2
 8008824:	9301      	str	r3, [sp, #4]
 8008826:	897b      	ldrh	r3, [r7, #10]
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	460b      	mov	r3, r1
 800882c:	6979      	ldr	r1, [r7, #20]
 800882e:	f7ff fe7d 	bl	800852c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008832:	687b      	ldr	r3, [r7, #4]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <pbuf_realloc+0x20>
 800884e:	4b3a      	ldr	r3, [pc, #232]	; (8008938 <pbuf_realloc+0xfc>)
 8008850:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008854:	4939      	ldr	r1, [pc, #228]	; (800893c <pbuf_realloc+0x100>)
 8008856:	483a      	ldr	r0, [pc, #232]	; (8008940 <pbuf_realloc+0x104>)
 8008858:	f00c f824 	bl	80148a4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	891b      	ldrh	r3, [r3, #8]
 8008860:	887a      	ldrh	r2, [r7, #2]
 8008862:	429a      	cmp	r2, r3
 8008864:	d263      	bcs.n	800892e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	891a      	ldrh	r2, [r3, #8]
 800886a:	887b      	ldrh	r3, [r7, #2]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008870:	887b      	ldrh	r3, [r7, #2]
 8008872:	817b      	strh	r3, [r7, #10]
  q = p;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008878:	e018      	b.n	80088ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	895b      	ldrh	r3, [r3, #10]
 800887e:	897a      	ldrh	r2, [r7, #10]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	891a      	ldrh	r2, [r3, #8]
 8008888:	893b      	ldrh	r3, [r7, #8]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	b29a      	uxth	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d106      	bne.n	80088ac <pbuf_realloc+0x70>
 800889e:	4b26      	ldr	r3, [pc, #152]	; (8008938 <pbuf_realloc+0xfc>)
 80088a0:	f240 12af 	movw	r2, #431	; 0x1af
 80088a4:	4927      	ldr	r1, [pc, #156]	; (8008944 <pbuf_realloc+0x108>)
 80088a6:	4826      	ldr	r0, [pc, #152]	; (8008940 <pbuf_realloc+0x104>)
 80088a8:	f00b fffc 	bl	80148a4 <iprintf>
  while (rem_len > q->len) {
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	895b      	ldrh	r3, [r3, #10]
 80088b0:	897a      	ldrh	r2, [r7, #10]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d8e1      	bhi.n	800887a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	7b1b      	ldrb	r3, [r3, #12]
 80088ba:	f003 030f 	and.w	r3, r3, #15
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d121      	bne.n	8008906 <pbuf_realloc+0xca>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	895b      	ldrh	r3, [r3, #10]
 80088c6:	897a      	ldrh	r2, [r7, #10]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d01c      	beq.n	8008906 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	7b5b      	ldrb	r3, [r3, #13]
 80088d0:	f003 0302 	and.w	r3, r3, #2
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d116      	bne.n	8008906 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	897b      	ldrh	r3, [r7, #10]
 80088e4:	4413      	add	r3, r2
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	4619      	mov	r1, r3
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f7fe ffba 	bl	8007864 <mem_trim>
 80088f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d106      	bne.n	8008906 <pbuf_realloc+0xca>
 80088f8:	4b0f      	ldr	r3, [pc, #60]	; (8008938 <pbuf_realloc+0xfc>)
 80088fa:	f240 12bd 	movw	r2, #445	; 0x1bd
 80088fe:	4912      	ldr	r1, [pc, #72]	; (8008948 <pbuf_realloc+0x10c>)
 8008900:	480f      	ldr	r0, [pc, #60]	; (8008940 <pbuf_realloc+0x104>)
 8008902:	f00b ffcf 	bl	80148a4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	897a      	ldrh	r2, [r7, #10]
 800890a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	895a      	ldrh	r2, [r3, #10]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d004      	beq.n	8008926 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4618      	mov	r0, r3
 8008922:	f000 f911 	bl	8008b48 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	e000      	b.n	8008930 <pbuf_realloc+0xf4>
    return;
 800892e:	bf00      	nop

}
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	080178c8 	.word	0x080178c8
 800893c:	080179e0 	.word	0x080179e0
 8008940:	08017928 	.word	0x08017928
 8008944:	080179f8 	.word	0x080179f8
 8008948:	08017a10 	.word	0x08017a10

0800894c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	4613      	mov	r3, r2
 8008958:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d106      	bne.n	800896e <pbuf_add_header_impl+0x22>
 8008960:	4b2b      	ldr	r3, [pc, #172]	; (8008a10 <pbuf_add_header_impl+0xc4>)
 8008962:	f240 12df 	movw	r2, #479	; 0x1df
 8008966:	492b      	ldr	r1, [pc, #172]	; (8008a14 <pbuf_add_header_impl+0xc8>)
 8008968:	482b      	ldr	r0, [pc, #172]	; (8008a18 <pbuf_add_header_impl+0xcc>)
 800896a:	f00b ff9b 	bl	80148a4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d003      	beq.n	800897c <pbuf_add_header_impl+0x30>
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800897a:	d301      	bcc.n	8008980 <pbuf_add_header_impl+0x34>
    return 1;
 800897c:	2301      	movs	r3, #1
 800897e:	e043      	b.n	8008a08 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <pbuf_add_header_impl+0x3e>
    return 0;
 8008986:	2300      	movs	r3, #0
 8008988:	e03e      	b.n	8008a08 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	891a      	ldrh	r2, [r3, #8]
 8008992:	8a7b      	ldrh	r3, [r7, #18]
 8008994:	4413      	add	r3, r2
 8008996:	b29b      	uxth	r3, r3
 8008998:	8a7a      	ldrh	r2, [r7, #18]
 800899a:	429a      	cmp	r2, r3
 800899c:	d901      	bls.n	80089a2 <pbuf_add_header_impl+0x56>
    return 1;
 800899e:	2301      	movs	r3, #1
 80089a0:	e032      	b.n	8008a08 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	7b1b      	ldrb	r3, [r3, #12]
 80089a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80089a8:	8a3b      	ldrh	r3, [r7, #16]
 80089aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00c      	beq.n	80089cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	425b      	negs	r3, r3
 80089ba:	4413      	add	r3, r2
 80089bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3310      	adds	r3, #16
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d20d      	bcs.n	80089e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e01d      	b.n	8008a08 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80089cc:	79fb      	ldrb	r3, [r7, #7]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d006      	beq.n	80089e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	685a      	ldr	r2, [r3, #4]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	425b      	negs	r3, r3
 80089da:	4413      	add	r3, r2
 80089dc:	617b      	str	r3, [r7, #20]
 80089de:	e001      	b.n	80089e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e011      	b.n	8008a08 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	895a      	ldrh	r2, [r3, #10]
 80089ee:	8a7b      	ldrh	r3, [r7, #18]
 80089f0:	4413      	add	r3, r2
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	891a      	ldrh	r2, [r3, #8]
 80089fc:	8a7b      	ldrh	r3, [r7, #18]
 80089fe:	4413      	add	r3, r2
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	811a      	strh	r2, [r3, #8]


  return 0;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3718      	adds	r7, #24
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	080178c8 	.word	0x080178c8
 8008a14:	08017a2c 	.word	0x08017a2c
 8008a18:	08017928 	.word	0x08017928

08008a1c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008a26:	2200      	movs	r2, #0
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7ff ff8e 	bl	800894c <pbuf_add_header_impl>
 8008a30:	4603      	mov	r3, r0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
	...

08008a3c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d106      	bne.n	8008a5a <pbuf_remove_header+0x1e>
 8008a4c:	4b20      	ldr	r3, [pc, #128]	; (8008ad0 <pbuf_remove_header+0x94>)
 8008a4e:	f240 224b 	movw	r2, #587	; 0x24b
 8008a52:	4920      	ldr	r1, [pc, #128]	; (8008ad4 <pbuf_remove_header+0x98>)
 8008a54:	4820      	ldr	r0, [pc, #128]	; (8008ad8 <pbuf_remove_header+0x9c>)
 8008a56:	f00b ff25 	bl	80148a4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d003      	beq.n	8008a68 <pbuf_remove_header+0x2c>
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a66:	d301      	bcc.n	8008a6c <pbuf_remove_header+0x30>
    return 1;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e02c      	b.n	8008ac6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <pbuf_remove_header+0x3a>
    return 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	e027      	b.n	8008ac6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	895b      	ldrh	r3, [r3, #10]
 8008a7e:	89fa      	ldrh	r2, [r7, #14]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d908      	bls.n	8008a96 <pbuf_remove_header+0x5a>
 8008a84:	4b12      	ldr	r3, [pc, #72]	; (8008ad0 <pbuf_remove_header+0x94>)
 8008a86:	f240 2255 	movw	r2, #597	; 0x255
 8008a8a:	4914      	ldr	r1, [pc, #80]	; (8008adc <pbuf_remove_header+0xa0>)
 8008a8c:	4812      	ldr	r0, [pc, #72]	; (8008ad8 <pbuf_remove_header+0x9c>)
 8008a8e:	f00b ff09 	bl	80148a4 <iprintf>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e017      	b.n	8008ac6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	441a      	add	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	895a      	ldrh	r2, [r3, #10]
 8008aac:	89fb      	ldrh	r3, [r7, #14]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	891a      	ldrh	r2, [r3, #8]
 8008aba:	89fb      	ldrh	r3, [r7, #14]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	080178c8 	.word	0x080178c8
 8008ad4:	08017a2c 	.word	0x08017a2c
 8008ad8:	08017928 	.word	0x08017928
 8008adc:	08017a38 	.word	0x08017a38

08008ae0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	807b      	strh	r3, [r7, #2]
 8008aec:	4613      	mov	r3, r2
 8008aee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008af0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	da08      	bge.n	8008b0a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008af8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008afc:	425b      	negs	r3, r3
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff ff9b 	bl	8008a3c <pbuf_remove_header>
 8008b06:	4603      	mov	r3, r0
 8008b08:	e007      	b.n	8008b1a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008b0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b0e:	787a      	ldrb	r2, [r7, #1]
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7ff ff1a 	bl	800894c <pbuf_add_header_impl>
 8008b18:	4603      	mov	r3, r0
  }
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b082      	sub	sp, #8
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008b2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b32:	2201      	movs	r2, #1
 8008b34:	4619      	mov	r1, r3
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7ff ffd2 	bl	8008ae0 <pbuf_header_impl>
 8008b3c:	4603      	mov	r3, r0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10b      	bne.n	8008b6e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d106      	bne.n	8008b6a <pbuf_free+0x22>
 8008b5c:	4b38      	ldr	r3, [pc, #224]	; (8008c40 <pbuf_free+0xf8>)
 8008b5e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008b62:	4938      	ldr	r1, [pc, #224]	; (8008c44 <pbuf_free+0xfc>)
 8008b64:	4838      	ldr	r0, [pc, #224]	; (8008c48 <pbuf_free+0x100>)
 8008b66:	f00b fe9d 	bl	80148a4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	e063      	b.n	8008c36 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008b72:	e05c      	b.n	8008c2e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	7b9b      	ldrb	r3, [r3, #14]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d106      	bne.n	8008b8a <pbuf_free+0x42>
 8008b7c:	4b30      	ldr	r3, [pc, #192]	; (8008c40 <pbuf_free+0xf8>)
 8008b7e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008b82:	4932      	ldr	r1, [pc, #200]	; (8008c4c <pbuf_free+0x104>)
 8008b84:	4830      	ldr	r0, [pc, #192]	; (8008c48 <pbuf_free+0x100>)
 8008b86:	f00b fe8d 	bl	80148a4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	7b9b      	ldrb	r3, [r3, #14]
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	739a      	strb	r2, [r3, #14]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	7b9b      	ldrb	r3, [r3, #14]
 8008b9a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008b9c:	7dbb      	ldrb	r3, [r7, #22]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d143      	bne.n	8008c2a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	7b1b      	ldrb	r3, [r3, #12]
 8008bac:	f003 030f 	and.w	r3, r3, #15
 8008bb0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	7b5b      	ldrb	r3, [r3, #13]
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d011      	beq.n	8008be2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d106      	bne.n	8008bd8 <pbuf_free+0x90>
 8008bca:	4b1d      	ldr	r3, [pc, #116]	; (8008c40 <pbuf_free+0xf8>)
 8008bcc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008bd0:	491f      	ldr	r1, [pc, #124]	; (8008c50 <pbuf_free+0x108>)
 8008bd2:	481d      	ldr	r0, [pc, #116]	; (8008c48 <pbuf_free+0x100>)
 8008bd4:	f00b fe66 	bl	80148a4 <iprintf>
        pc->custom_free_function(p);
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	4798      	blx	r3
 8008be0:	e01d      	b.n	8008c1e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d104      	bne.n	8008bf2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008be8:	6879      	ldr	r1, [r7, #4]
 8008bea:	2008      	movs	r0, #8
 8008bec:	f7ff f936 	bl	8007e5c <memp_free>
 8008bf0:	e015      	b.n	8008c1e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d104      	bne.n	8008c02 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008bf8:	6879      	ldr	r1, [r7, #4]
 8008bfa:	2007      	movs	r0, #7
 8008bfc:	f7ff f92e 	bl	8007e5c <memp_free>
 8008c00:	e00d      	b.n	8008c1e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d103      	bne.n	8008c10 <pbuf_free+0xc8>
          mem_free(p);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7fe fdc1 	bl	8007790 <mem_free>
 8008c0e:	e006      	b.n	8008c1e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008c10:	4b0b      	ldr	r3, [pc, #44]	; (8008c40 <pbuf_free+0xf8>)
 8008c12:	f240 320f 	movw	r2, #783	; 0x30f
 8008c16:	490f      	ldr	r1, [pc, #60]	; (8008c54 <pbuf_free+0x10c>)
 8008c18:	480b      	ldr	r0, [pc, #44]	; (8008c48 <pbuf_free+0x100>)
 8008c1a:	f00b fe43 	bl	80148a4 <iprintf>
        }
      }
      count++;
 8008c1e:	7dfb      	ldrb	r3, [r7, #23]
 8008c20:	3301      	adds	r3, #1
 8008c22:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	607b      	str	r3, [r7, #4]
 8008c28:	e001      	b.n	8008c2e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d19f      	bne.n	8008b74 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	080178c8 	.word	0x080178c8
 8008c44:	08017a2c 	.word	0x08017a2c
 8008c48:	08017928 	.word	0x08017928
 8008c4c:	08017a58 	.word	0x08017a58
 8008c50:	08017a70 	.word	0x08017a70
 8008c54:	08017a94 	.word	0x08017a94

08008c58 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008c64:	e005      	b.n	8008c72 <pbuf_clen+0x1a>
    ++len;
 8008c66:	89fb      	ldrh	r3, [r7, #14]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1f6      	bne.n	8008c66 <pbuf_clen+0xe>
  }
  return len;
 8008c78:	89fb      	ldrh	r3, [r7, #14]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3714      	adds	r7, #20
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
	...

08008c88 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d010      	beq.n	8008cb8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	7b9b      	ldrb	r3, [r3, #14]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	7b9b      	ldrb	r3, [r3, #14]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d106      	bne.n	8008cb8 <pbuf_ref+0x30>
 8008caa:	4b05      	ldr	r3, [pc, #20]	; (8008cc0 <pbuf_ref+0x38>)
 8008cac:	f240 3242 	movw	r2, #834	; 0x342
 8008cb0:	4904      	ldr	r1, [pc, #16]	; (8008cc4 <pbuf_ref+0x3c>)
 8008cb2:	4805      	ldr	r0, [pc, #20]	; (8008cc8 <pbuf_ref+0x40>)
 8008cb4:	f00b fdf6 	bl	80148a4 <iprintf>
  }
}
 8008cb8:	bf00      	nop
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	080178c8 	.word	0x080178c8
 8008cc4:	08017aa8 	.word	0x08017aa8
 8008cc8:	08017928 	.word	0x08017928

08008ccc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <pbuf_cat+0x16>
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d107      	bne.n	8008cf2 <pbuf_cat+0x26>
 8008ce2:	4b20      	ldr	r3, [pc, #128]	; (8008d64 <pbuf_cat+0x98>)
 8008ce4:	f240 3259 	movw	r2, #857	; 0x359
 8008ce8:	491f      	ldr	r1, [pc, #124]	; (8008d68 <pbuf_cat+0x9c>)
 8008cea:	4820      	ldr	r0, [pc, #128]	; (8008d6c <pbuf_cat+0xa0>)
 8008cec:	f00b fdda 	bl	80148a4 <iprintf>
 8008cf0:	e034      	b.n	8008d5c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	60fb      	str	r3, [r7, #12]
 8008cf6:	e00a      	b.n	8008d0e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	891a      	ldrh	r2, [r3, #8]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	891b      	ldrh	r3, [r3, #8]
 8008d00:	4413      	add	r3, r2
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	60fb      	str	r3, [r7, #12]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1f0      	bne.n	8008cf8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	891a      	ldrh	r2, [r3, #8]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	895b      	ldrh	r3, [r3, #10]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d006      	beq.n	8008d30 <pbuf_cat+0x64>
 8008d22:	4b10      	ldr	r3, [pc, #64]	; (8008d64 <pbuf_cat+0x98>)
 8008d24:	f240 3262 	movw	r2, #866	; 0x362
 8008d28:	4911      	ldr	r1, [pc, #68]	; (8008d70 <pbuf_cat+0xa4>)
 8008d2a:	4810      	ldr	r0, [pc, #64]	; (8008d6c <pbuf_cat+0xa0>)
 8008d2c:	f00b fdba 	bl	80148a4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d006      	beq.n	8008d46 <pbuf_cat+0x7a>
 8008d38:	4b0a      	ldr	r3, [pc, #40]	; (8008d64 <pbuf_cat+0x98>)
 8008d3a:	f240 3263 	movw	r2, #867	; 0x363
 8008d3e:	490d      	ldr	r1, [pc, #52]	; (8008d74 <pbuf_cat+0xa8>)
 8008d40:	480a      	ldr	r0, [pc, #40]	; (8008d6c <pbuf_cat+0xa0>)
 8008d42:	f00b fdaf 	bl	80148a4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	891a      	ldrh	r2, [r3, #8]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	891b      	ldrh	r3, [r3, #8]
 8008d4e:	4413      	add	r3, r2
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	080178c8 	.word	0x080178c8
 8008d68:	08017abc 	.word	0x08017abc
 8008d6c:	08017928 	.word	0x08017928
 8008d70:	08017af4 	.word	0x08017af4
 8008d74:	08017b24 	.word	0x08017b24

08008d78 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7ff ffa1 	bl	8008ccc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008d8a:	6838      	ldr	r0, [r7, #0]
 8008d8c:	f7ff ff7c 	bl	8008c88 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008d90:	bf00      	nop
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008da2:	2300      	movs	r3, #0
 8008da4:	617b      	str	r3, [r7, #20]
 8008da6:	2300      	movs	r3, #0
 8008da8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d008      	beq.n	8008dc2 <pbuf_copy+0x2a>
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d005      	beq.n	8008dc2 <pbuf_copy+0x2a>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	891a      	ldrh	r2, [r3, #8]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	891b      	ldrh	r3, [r3, #8]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d209      	bcs.n	8008dd6 <pbuf_copy+0x3e>
 8008dc2:	4b57      	ldr	r3, [pc, #348]	; (8008f20 <pbuf_copy+0x188>)
 8008dc4:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008dc8:	4956      	ldr	r1, [pc, #344]	; (8008f24 <pbuf_copy+0x18c>)
 8008dca:	4857      	ldr	r0, [pc, #348]	; (8008f28 <pbuf_copy+0x190>)
 8008dcc:	f00b fd6a 	bl	80148a4 <iprintf>
 8008dd0:	f06f 030f 	mvn.w	r3, #15
 8008dd4:	e09f      	b.n	8008f16 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	895b      	ldrh	r3, [r3, #10]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	1ad2      	subs	r2, r2, r3
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	895b      	ldrh	r3, [r3, #10]
 8008de4:	4619      	mov	r1, r3
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	1acb      	subs	r3, r1, r3
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d306      	bcc.n	8008dfc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	895b      	ldrh	r3, [r3, #10]
 8008df2:	461a      	mov	r2, r3
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	60fb      	str	r3, [r7, #12]
 8008dfa:	e005      	b.n	8008e08 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	895b      	ldrh	r3, [r3, #10]
 8008e00:	461a      	mov	r2, r3
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	18d0      	adds	r0, r2, r3
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	4413      	add	r3, r2
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	f00b ffbb 	bl	8014d96 <memcpy>
    offset_to += len;
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	4413      	add	r3, r2
 8008e26:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	895b      	ldrh	r3, [r3, #10]
 8008e34:	461a      	mov	r2, r3
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d906      	bls.n	8008e4a <pbuf_copy+0xb2>
 8008e3c:	4b38      	ldr	r3, [pc, #224]	; (8008f20 <pbuf_copy+0x188>)
 8008e3e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008e42:	493a      	ldr	r1, [pc, #232]	; (8008f2c <pbuf_copy+0x194>)
 8008e44:	4838      	ldr	r0, [pc, #224]	; (8008f28 <pbuf_copy+0x190>)
 8008e46:	f00b fd2d 	bl	80148a4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	895b      	ldrh	r3, [r3, #10]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d906      	bls.n	8008e64 <pbuf_copy+0xcc>
 8008e56:	4b32      	ldr	r3, [pc, #200]	; (8008f20 <pbuf_copy+0x188>)
 8008e58:	f240 32da 	movw	r2, #986	; 0x3da
 8008e5c:	4934      	ldr	r1, [pc, #208]	; (8008f30 <pbuf_copy+0x198>)
 8008e5e:	4832      	ldr	r0, [pc, #200]	; (8008f28 <pbuf_copy+0x190>)
 8008e60:	f00b fd20 	bl	80148a4 <iprintf>
    if (offset_from >= p_from->len) {
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	895b      	ldrh	r3, [r3, #10]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d304      	bcc.n	8008e7a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	895b      	ldrh	r3, [r3, #10]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d114      	bne.n	8008eb0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008e86:	2300      	movs	r3, #0
 8008e88:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10c      	bne.n	8008eb0 <pbuf_copy+0x118>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d009      	beq.n	8008eb0 <pbuf_copy+0x118>
 8008e9c:	4b20      	ldr	r3, [pc, #128]	; (8008f20 <pbuf_copy+0x188>)
 8008e9e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008ea2:	4924      	ldr	r1, [pc, #144]	; (8008f34 <pbuf_copy+0x19c>)
 8008ea4:	4820      	ldr	r0, [pc, #128]	; (8008f28 <pbuf_copy+0x190>)
 8008ea6:	f00b fcfd 	bl	80148a4 <iprintf>
 8008eaa:	f06f 030f 	mvn.w	r3, #15
 8008eae:	e032      	b.n	8008f16 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d013      	beq.n	8008ede <pbuf_copy+0x146>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	895a      	ldrh	r2, [r3, #10]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	891b      	ldrh	r3, [r3, #8]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d10d      	bne.n	8008ede <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d009      	beq.n	8008ede <pbuf_copy+0x146>
 8008eca:	4b15      	ldr	r3, [pc, #84]	; (8008f20 <pbuf_copy+0x188>)
 8008ecc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008ed0:	4919      	ldr	r1, [pc, #100]	; (8008f38 <pbuf_copy+0x1a0>)
 8008ed2:	4815      	ldr	r0, [pc, #84]	; (8008f28 <pbuf_copy+0x190>)
 8008ed4:	f00b fce6 	bl	80148a4 <iprintf>
 8008ed8:	f06f 0305 	mvn.w	r3, #5
 8008edc:	e01b      	b.n	8008f16 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d013      	beq.n	8008f0c <pbuf_copy+0x174>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	895a      	ldrh	r2, [r3, #10]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	891b      	ldrh	r3, [r3, #8]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d10d      	bne.n	8008f0c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d009      	beq.n	8008f0c <pbuf_copy+0x174>
 8008ef8:	4b09      	ldr	r3, [pc, #36]	; (8008f20 <pbuf_copy+0x188>)
 8008efa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008efe:	490e      	ldr	r1, [pc, #56]	; (8008f38 <pbuf_copy+0x1a0>)
 8008f00:	4809      	ldr	r0, [pc, #36]	; (8008f28 <pbuf_copy+0x190>)
 8008f02:	f00b fccf 	bl	80148a4 <iprintf>
 8008f06:	f06f 0305 	mvn.w	r3, #5
 8008f0a:	e004      	b.n	8008f16 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f47f af61 	bne.w	8008dd6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3718      	adds	r7, #24
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	080178c8 	.word	0x080178c8
 8008f24:	08017b70 	.word	0x08017b70
 8008f28:	08017928 	.word	0x08017928
 8008f2c:	08017ba0 	.word	0x08017ba0
 8008f30:	08017bb8 	.word	0x08017bb8
 8008f34:	08017bd4 	.word	0x08017bd4
 8008f38:	08017be4 	.word	0x08017be4

08008f3c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b088      	sub	sp, #32
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	4611      	mov	r1, r2
 8008f48:	461a      	mov	r2, r3
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	80fb      	strh	r3, [r7, #6]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008f56:	2300      	movs	r3, #0
 8008f58:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d108      	bne.n	8008f72 <pbuf_copy_partial+0x36>
 8008f60:	4b2b      	ldr	r3, [pc, #172]	; (8009010 <pbuf_copy_partial+0xd4>)
 8008f62:	f240 420a 	movw	r2, #1034	; 0x40a
 8008f66:	492b      	ldr	r1, [pc, #172]	; (8009014 <pbuf_copy_partial+0xd8>)
 8008f68:	482b      	ldr	r0, [pc, #172]	; (8009018 <pbuf_copy_partial+0xdc>)
 8008f6a:	f00b fc9b 	bl	80148a4 <iprintf>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	e04a      	b.n	8009008 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d108      	bne.n	8008f8a <pbuf_copy_partial+0x4e>
 8008f78:	4b25      	ldr	r3, [pc, #148]	; (8009010 <pbuf_copy_partial+0xd4>)
 8008f7a:	f240 420b 	movw	r2, #1035	; 0x40b
 8008f7e:	4927      	ldr	r1, [pc, #156]	; (800901c <pbuf_copy_partial+0xe0>)
 8008f80:	4825      	ldr	r0, [pc, #148]	; (8009018 <pbuf_copy_partial+0xdc>)
 8008f82:	f00b fc8f 	bl	80148a4 <iprintf>
 8008f86:	2300      	movs	r3, #0
 8008f88:	e03e      	b.n	8009008 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	61fb      	str	r3, [r7, #28]
 8008f8e:	e034      	b.n	8008ffa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008f90:	88bb      	ldrh	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00a      	beq.n	8008fac <pbuf_copy_partial+0x70>
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	895b      	ldrh	r3, [r3, #10]
 8008f9a:	88ba      	ldrh	r2, [r7, #4]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d305      	bcc.n	8008fac <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	895b      	ldrh	r3, [r3, #10]
 8008fa4:	88ba      	ldrh	r2, [r7, #4]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	80bb      	strh	r3, [r7, #4]
 8008faa:	e023      	b.n	8008ff4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	895a      	ldrh	r2, [r3, #10]
 8008fb0:	88bb      	ldrh	r3, [r7, #4]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008fb6:	8b3a      	ldrh	r2, [r7, #24]
 8008fb8:	88fb      	ldrh	r3, [r7, #6]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d901      	bls.n	8008fc2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008fbe:	88fb      	ldrh	r3, [r7, #6]
 8008fc0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008fc2:	8b7b      	ldrh	r3, [r7, #26]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	18d0      	adds	r0, r2, r3
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	88bb      	ldrh	r3, [r7, #4]
 8008fce:	4413      	add	r3, r2
 8008fd0:	8b3a      	ldrh	r2, [r7, #24]
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	f00b fedf 	bl	8014d96 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008fd8:	8afa      	ldrh	r2, [r7, #22]
 8008fda:	8b3b      	ldrh	r3, [r7, #24]
 8008fdc:	4413      	add	r3, r2
 8008fde:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008fe0:	8b7a      	ldrh	r2, [r7, #26]
 8008fe2:	8b3b      	ldrh	r3, [r7, #24]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008fe8:	88fa      	ldrh	r2, [r7, #6]
 8008fea:	8b3b      	ldrh	r3, [r7, #24]
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	61fb      	str	r3, [r7, #28]
 8008ffa:	88fb      	ldrh	r3, [r7, #6]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d002      	beq.n	8009006 <pbuf_copy_partial+0xca>
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1c4      	bne.n	8008f90 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009006:	8afb      	ldrh	r3, [r7, #22]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3720      	adds	r7, #32
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	080178c8 	.word	0x080178c8
 8009014:	08017c10 	.word	0x08017c10
 8009018:	08017928 	.word	0x08017928
 800901c:	08017c30 	.word	0x08017c30

08009020 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	4603      	mov	r3, r0
 8009028:	603a      	str	r2, [r7, #0]
 800902a:	71fb      	strb	r3, [r7, #7]
 800902c:	460b      	mov	r3, r1
 800902e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	8919      	ldrh	r1, [r3, #8]
 8009034:	88ba      	ldrh	r2, [r7, #4]
 8009036:	79fb      	ldrb	r3, [r7, #7]
 8009038:	4618      	mov	r0, r3
 800903a:	f7ff faa1 	bl	8008580 <pbuf_alloc>
 800903e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <pbuf_clone+0x2a>
    return NULL;
 8009046:	2300      	movs	r3, #0
 8009048:	e011      	b.n	800906e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f7ff fea3 	bl	8008d98 <pbuf_copy>
 8009052:	4603      	mov	r3, r0
 8009054:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009056:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d006      	beq.n	800906c <pbuf_clone+0x4c>
 800905e:	4b06      	ldr	r3, [pc, #24]	; (8009078 <pbuf_clone+0x58>)
 8009060:	f240 5224 	movw	r2, #1316	; 0x524
 8009064:	4905      	ldr	r1, [pc, #20]	; (800907c <pbuf_clone+0x5c>)
 8009066:	4806      	ldr	r0, [pc, #24]	; (8009080 <pbuf_clone+0x60>)
 8009068:	f00b fc1c 	bl	80148a4 <iprintf>
  return q;
 800906c:	68fb      	ldr	r3, [r7, #12]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	080178c8 	.word	0x080178c8
 800907c:	08017d3c 	.word	0x08017d3c
 8009080:	08017928 	.word	0x08017928

08009084 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009088:	f009 ffa6 	bl	8012fd8 <rand>
 800908c:	4603      	mov	r3, r0
 800908e:	b29b      	uxth	r3, r3
 8009090:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009094:	b29b      	uxth	r3, r3
 8009096:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800909a:	b29a      	uxth	r2, r3
 800909c:	4b01      	ldr	r3, [pc, #4]	; (80090a4 <tcp_init+0x20>)
 800909e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80090a0:	bf00      	nop
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	20000020 	.word	0x20000020

080090a8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	7d1b      	ldrb	r3, [r3, #20]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d105      	bne.n	80090c4 <tcp_free+0x1c>
 80090b8:	4b06      	ldr	r3, [pc, #24]	; (80090d4 <tcp_free+0x2c>)
 80090ba:	22d4      	movs	r2, #212	; 0xd4
 80090bc:	4906      	ldr	r1, [pc, #24]	; (80090d8 <tcp_free+0x30>)
 80090be:	4807      	ldr	r0, [pc, #28]	; (80090dc <tcp_free+0x34>)
 80090c0:	f00b fbf0 	bl	80148a4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	2001      	movs	r0, #1
 80090c8:	f7fe fec8 	bl	8007e5c <memp_free>
}
 80090cc:	bf00      	nop
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	08017dc8 	.word	0x08017dc8
 80090d8:	08017df8 	.word	0x08017df8
 80090dc:	08017e0c 	.word	0x08017e0c

080090e0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	7d1b      	ldrb	r3, [r3, #20]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d105      	bne.n	80090fc <tcp_free_listen+0x1c>
 80090f0:	4b06      	ldr	r3, [pc, #24]	; (800910c <tcp_free_listen+0x2c>)
 80090f2:	22df      	movs	r2, #223	; 0xdf
 80090f4:	4906      	ldr	r1, [pc, #24]	; (8009110 <tcp_free_listen+0x30>)
 80090f6:	4807      	ldr	r0, [pc, #28]	; (8009114 <tcp_free_listen+0x34>)
 80090f8:	f00b fbd4 	bl	80148a4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80090fc:	6879      	ldr	r1, [r7, #4]
 80090fe:	2002      	movs	r0, #2
 8009100:	f7fe feac 	bl	8007e5c <memp_free>
}
 8009104:	bf00      	nop
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	08017dc8 	.word	0x08017dc8
 8009110:	08017e34 	.word	0x08017e34
 8009114:	08017e0c 	.word	0x08017e0c

08009118 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800911c:	f001 f85c 	bl	800a1d8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009120:	4b07      	ldr	r3, [pc, #28]	; (8009140 <tcp_tmr+0x28>)
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	3301      	adds	r3, #1
 8009126:	b2da      	uxtb	r2, r3
 8009128:	4b05      	ldr	r3, [pc, #20]	; (8009140 <tcp_tmr+0x28>)
 800912a:	701a      	strb	r2, [r3, #0]
 800912c:	4b04      	ldr	r3, [pc, #16]	; (8009140 <tcp_tmr+0x28>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009138:	f000 fd0e 	bl	8009b58 <tcp_slowtmr>
  }
}
 800913c:	bf00      	nop
 800913e:	bd80      	pop	{r7, pc}
 8009140:	200008a9 	.word	0x200008a9

08009144 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d105      	bne.n	8009160 <tcp_remove_listener+0x1c>
 8009154:	4b0d      	ldr	r3, [pc, #52]	; (800918c <tcp_remove_listener+0x48>)
 8009156:	22ff      	movs	r2, #255	; 0xff
 8009158:	490d      	ldr	r1, [pc, #52]	; (8009190 <tcp_remove_listener+0x4c>)
 800915a:	480e      	ldr	r0, [pc, #56]	; (8009194 <tcp_remove_listener+0x50>)
 800915c:	f00b fba2 	bl	80148a4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	60fb      	str	r3, [r7, #12]
 8009164:	e00a      	b.n	800917c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	429a      	cmp	r2, r3
 800916e:	d102      	bne.n	8009176 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	60fb      	str	r3, [r7, #12]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1f1      	bne.n	8009166 <tcp_remove_listener+0x22>
    }
  }
}
 8009182:	bf00      	nop
 8009184:	bf00      	nop
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	08017dc8 	.word	0x08017dc8
 8009190:	08017e50 	.word	0x08017e50
 8009194:	08017e0c 	.word	0x08017e0c

08009198 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d106      	bne.n	80091b4 <tcp_listen_closed+0x1c>
 80091a6:	4b14      	ldr	r3, [pc, #80]	; (80091f8 <tcp_listen_closed+0x60>)
 80091a8:	f240 1211 	movw	r2, #273	; 0x111
 80091ac:	4913      	ldr	r1, [pc, #76]	; (80091fc <tcp_listen_closed+0x64>)
 80091ae:	4814      	ldr	r0, [pc, #80]	; (8009200 <tcp_listen_closed+0x68>)
 80091b0:	f00b fb78 	bl	80148a4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	7d1b      	ldrb	r3, [r3, #20]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d006      	beq.n	80091ca <tcp_listen_closed+0x32>
 80091bc:	4b0e      	ldr	r3, [pc, #56]	; (80091f8 <tcp_listen_closed+0x60>)
 80091be:	f44f 7289 	mov.w	r2, #274	; 0x112
 80091c2:	4910      	ldr	r1, [pc, #64]	; (8009204 <tcp_listen_closed+0x6c>)
 80091c4:	480e      	ldr	r0, [pc, #56]	; (8009200 <tcp_listen_closed+0x68>)
 80091c6:	f00b fb6d 	bl	80148a4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80091ca:	2301      	movs	r3, #1
 80091cc:	60fb      	str	r3, [r7, #12]
 80091ce:	e00b      	b.n	80091e8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80091d0:	4a0d      	ldr	r2, [pc, #52]	; (8009208 <tcp_listen_closed+0x70>)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	4618      	mov	r0, r3
 80091de:	f7ff ffb1 	bl	8009144 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3301      	adds	r3, #1
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	d9f0      	bls.n	80091d0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80091ee:	bf00      	nop
 80091f0:	bf00      	nop
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	08017dc8 	.word	0x08017dc8
 80091fc:	08017e78 	.word	0x08017e78
 8009200:	08017e0c 	.word	0x08017e0c
 8009204:	08017e84 	.word	0x08017e84
 8009208:	0801a5a8 	.word	0x0801a5a8

0800920c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800920c:	b5b0      	push	{r4, r5, r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af04      	add	r7, sp, #16
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d106      	bne.n	800922c <tcp_close_shutdown+0x20>
 800921e:	4b63      	ldr	r3, [pc, #396]	; (80093ac <tcp_close_shutdown+0x1a0>)
 8009220:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009224:	4962      	ldr	r1, [pc, #392]	; (80093b0 <tcp_close_shutdown+0x1a4>)
 8009226:	4863      	ldr	r0, [pc, #396]	; (80093b4 <tcp_close_shutdown+0x1a8>)
 8009228:	f00b fb3c 	bl	80148a4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800922c:	78fb      	ldrb	r3, [r7, #3]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d066      	beq.n	8009300 <tcp_close_shutdown+0xf4>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	7d1b      	ldrb	r3, [r3, #20]
 8009236:	2b04      	cmp	r3, #4
 8009238:	d003      	beq.n	8009242 <tcp_close_shutdown+0x36>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	7d1b      	ldrb	r3, [r3, #20]
 800923e:	2b07      	cmp	r3, #7
 8009240:	d15e      	bne.n	8009300 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009246:	2b00      	cmp	r3, #0
 8009248:	d104      	bne.n	8009254 <tcp_close_shutdown+0x48>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800924e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009252:	d055      	beq.n	8009300 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	8b5b      	ldrh	r3, [r3, #26]
 8009258:	f003 0310 	and.w	r3, r3, #16
 800925c:	2b00      	cmp	r3, #0
 800925e:	d106      	bne.n	800926e <tcp_close_shutdown+0x62>
 8009260:	4b52      	ldr	r3, [pc, #328]	; (80093ac <tcp_close_shutdown+0x1a0>)
 8009262:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009266:	4954      	ldr	r1, [pc, #336]	; (80093b8 <tcp_close_shutdown+0x1ac>)
 8009268:	4852      	ldr	r0, [pc, #328]	; (80093b4 <tcp_close_shutdown+0x1a8>)
 800926a:	f00b fb1b 	bl	80148a4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009276:	687d      	ldr	r5, [r7, #4]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	3304      	adds	r3, #4
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	8ad2      	ldrh	r2, [r2, #22]
 8009280:	6879      	ldr	r1, [r7, #4]
 8009282:	8b09      	ldrh	r1, [r1, #24]
 8009284:	9102      	str	r1, [sp, #8]
 8009286:	9201      	str	r2, [sp, #4]
 8009288:	9300      	str	r3, [sp, #0]
 800928a:	462b      	mov	r3, r5
 800928c:	4622      	mov	r2, r4
 800928e:	4601      	mov	r1, r0
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f005 fd89 	bl	800eda8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f001 fb66 	bl	800a968 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800929c:	4b47      	ldr	r3, [pc, #284]	; (80093bc <tcp_close_shutdown+0x1b0>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d105      	bne.n	80092b2 <tcp_close_shutdown+0xa6>
 80092a6:	4b45      	ldr	r3, [pc, #276]	; (80093bc <tcp_close_shutdown+0x1b0>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	4a43      	ldr	r2, [pc, #268]	; (80093bc <tcp_close_shutdown+0x1b0>)
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	e013      	b.n	80092da <tcp_close_shutdown+0xce>
 80092b2:	4b42      	ldr	r3, [pc, #264]	; (80093bc <tcp_close_shutdown+0x1b0>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	60fb      	str	r3, [r7, #12]
 80092b8:	e00c      	b.n	80092d4 <tcp_close_shutdown+0xc8>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d104      	bne.n	80092ce <tcp_close_shutdown+0xc2>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68da      	ldr	r2, [r3, #12]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	60da      	str	r2, [r3, #12]
 80092cc:	e005      	b.n	80092da <tcp_close_shutdown+0xce>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1ef      	bne.n	80092ba <tcp_close_shutdown+0xae>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	60da      	str	r2, [r3, #12]
 80092e0:	4b37      	ldr	r3, [pc, #220]	; (80093c0 <tcp_close_shutdown+0x1b4>)
 80092e2:	2201      	movs	r2, #1
 80092e4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80092e6:	4b37      	ldr	r3, [pc, #220]	; (80093c4 <tcp_close_shutdown+0x1b8>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d102      	bne.n	80092f6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80092f0:	f003 fffe 	bl	800d2f0 <tcp_trigger_input_pcb_close>
 80092f4:	e002      	b.n	80092fc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7ff fed6 	bl	80090a8 <tcp_free>
      }
      return ERR_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	e050      	b.n	80093a2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	7d1b      	ldrb	r3, [r3, #20]
 8009304:	2b02      	cmp	r3, #2
 8009306:	d03b      	beq.n	8009380 <tcp_close_shutdown+0x174>
 8009308:	2b02      	cmp	r3, #2
 800930a:	dc44      	bgt.n	8009396 <tcp_close_shutdown+0x18a>
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <tcp_close_shutdown+0x10a>
 8009310:	2b01      	cmp	r3, #1
 8009312:	d02a      	beq.n	800936a <tcp_close_shutdown+0x15e>
 8009314:	e03f      	b.n	8009396 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	8adb      	ldrh	r3, [r3, #22]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d021      	beq.n	8009362 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800931e:	4b2a      	ldr	r3, [pc, #168]	; (80093c8 <tcp_close_shutdown+0x1bc>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	429a      	cmp	r2, r3
 8009326:	d105      	bne.n	8009334 <tcp_close_shutdown+0x128>
 8009328:	4b27      	ldr	r3, [pc, #156]	; (80093c8 <tcp_close_shutdown+0x1bc>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	4a26      	ldr	r2, [pc, #152]	; (80093c8 <tcp_close_shutdown+0x1bc>)
 8009330:	6013      	str	r3, [r2, #0]
 8009332:	e013      	b.n	800935c <tcp_close_shutdown+0x150>
 8009334:	4b24      	ldr	r3, [pc, #144]	; (80093c8 <tcp_close_shutdown+0x1bc>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	60bb      	str	r3, [r7, #8]
 800933a:	e00c      	b.n	8009356 <tcp_close_shutdown+0x14a>
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	429a      	cmp	r2, r3
 8009344:	d104      	bne.n	8009350 <tcp_close_shutdown+0x144>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	68da      	ldr	r2, [r3, #12]
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	60da      	str	r2, [r3, #12]
 800934e:	e005      	b.n	800935c <tcp_close_shutdown+0x150>
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	60bb      	str	r3, [r7, #8]
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1ef      	bne.n	800933c <tcp_close_shutdown+0x130>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7ff fea0 	bl	80090a8 <tcp_free>
      break;
 8009368:	e01a      	b.n	80093a0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7ff ff14 	bl	8009198 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009370:	6879      	ldr	r1, [r7, #4]
 8009372:	4816      	ldr	r0, [pc, #88]	; (80093cc <tcp_close_shutdown+0x1c0>)
 8009374:	f001 fb48 	bl	800aa08 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7ff feb1 	bl	80090e0 <tcp_free_listen>
      break;
 800937e:	e00f      	b.n	80093a0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009380:	6879      	ldr	r1, [r7, #4]
 8009382:	480e      	ldr	r0, [pc, #56]	; (80093bc <tcp_close_shutdown+0x1b0>)
 8009384:	f001 fb40 	bl	800aa08 <tcp_pcb_remove>
 8009388:	4b0d      	ldr	r3, [pc, #52]	; (80093c0 <tcp_close_shutdown+0x1b4>)
 800938a:	2201      	movs	r2, #1
 800938c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7ff fe8a 	bl	80090a8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009394:	e004      	b.n	80093a0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f81a 	bl	80093d0 <tcp_close_shutdown_fin>
 800939c:	4603      	mov	r3, r0
 800939e:	e000      	b.n	80093a2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bdb0      	pop	{r4, r5, r7, pc}
 80093aa:	bf00      	nop
 80093ac:	08017dc8 	.word	0x08017dc8
 80093b0:	08017e9c 	.word	0x08017e9c
 80093b4:	08017e0c 	.word	0x08017e0c
 80093b8:	08017ebc 	.word	0x08017ebc
 80093bc:	2000ae68 	.word	0x2000ae68
 80093c0:	2000ae64 	.word	0x2000ae64
 80093c4:	2000ae7c 	.word	0x2000ae7c
 80093c8:	2000ae74 	.word	0x2000ae74
 80093cc:	2000ae70 	.word	0x2000ae70

080093d0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d106      	bne.n	80093ec <tcp_close_shutdown_fin+0x1c>
 80093de:	4b2e      	ldr	r3, [pc, #184]	; (8009498 <tcp_close_shutdown_fin+0xc8>)
 80093e0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80093e4:	492d      	ldr	r1, [pc, #180]	; (800949c <tcp_close_shutdown_fin+0xcc>)
 80093e6:	482e      	ldr	r0, [pc, #184]	; (80094a0 <tcp_close_shutdown_fin+0xd0>)
 80093e8:	f00b fa5c 	bl	80148a4 <iprintf>

  switch (pcb->state) {
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	7d1b      	ldrb	r3, [r3, #20]
 80093f0:	2b07      	cmp	r3, #7
 80093f2:	d020      	beq.n	8009436 <tcp_close_shutdown_fin+0x66>
 80093f4:	2b07      	cmp	r3, #7
 80093f6:	dc2b      	bgt.n	8009450 <tcp_close_shutdown_fin+0x80>
 80093f8:	2b03      	cmp	r3, #3
 80093fa:	d002      	beq.n	8009402 <tcp_close_shutdown_fin+0x32>
 80093fc:	2b04      	cmp	r3, #4
 80093fe:	d00d      	beq.n	800941c <tcp_close_shutdown_fin+0x4c>
 8009400:	e026      	b.n	8009450 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f004 fdde 	bl	800dfc4 <tcp_send_fin>
 8009408:	4603      	mov	r3, r0
 800940a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800940c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d11f      	bne.n	8009454 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2205      	movs	r2, #5
 8009418:	751a      	strb	r2, [r3, #20]
      }
      break;
 800941a:	e01b      	b.n	8009454 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f004 fdd1 	bl	800dfc4 <tcp_send_fin>
 8009422:	4603      	mov	r3, r0
 8009424:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d114      	bne.n	8009458 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2205      	movs	r2, #5
 8009432:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009434:	e010      	b.n	8009458 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f004 fdc4 	bl	800dfc4 <tcp_send_fin>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d109      	bne.n	800945c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2209      	movs	r2, #9
 800944c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800944e:	e005      	b.n	800945c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	e01c      	b.n	800948e <tcp_close_shutdown_fin+0xbe>
      break;
 8009454:	bf00      	nop
 8009456:	e002      	b.n	800945e <tcp_close_shutdown_fin+0x8e>
      break;
 8009458:	bf00      	nop
 800945a:	e000      	b.n	800945e <tcp_close_shutdown_fin+0x8e>
      break;
 800945c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800945e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d103      	bne.n	800946e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f004 feea 	bl	800e240 <tcp_output>
 800946c:	e00d      	b.n	800948a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800946e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009476:	d108      	bne.n	800948a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	8b5b      	ldrh	r3, [r3, #26]
 800947c:	f043 0308 	orr.w	r3, r3, #8
 8009480:	b29a      	uxth	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	e001      	b.n	800948e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800948a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	08017dc8 	.word	0x08017dc8
 800949c:	08017e78 	.word	0x08017e78
 80094a0:	08017e0c 	.word	0x08017e0c

080094a4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d109      	bne.n	80094c6 <tcp_close+0x22>
 80094b2:	4b0f      	ldr	r3, [pc, #60]	; (80094f0 <tcp_close+0x4c>)
 80094b4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80094b8:	490e      	ldr	r1, [pc, #56]	; (80094f4 <tcp_close+0x50>)
 80094ba:	480f      	ldr	r0, [pc, #60]	; (80094f8 <tcp_close+0x54>)
 80094bc:	f00b f9f2 	bl	80148a4 <iprintf>
 80094c0:	f06f 030f 	mvn.w	r3, #15
 80094c4:	e00f      	b.n	80094e6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	7d1b      	ldrb	r3, [r3, #20]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d006      	beq.n	80094dc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	8b5b      	ldrh	r3, [r3, #26]
 80094d2:	f043 0310 	orr.w	r3, r3, #16
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80094dc:	2101      	movs	r1, #1
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7ff fe94 	bl	800920c <tcp_close_shutdown>
 80094e4:	4603      	mov	r3, r0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	08017dc8 	.word	0x08017dc8
 80094f4:	08017ed8 	.word	0x08017ed8
 80094f8:	08017e0c 	.word	0x08017e0c

080094fc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08e      	sub	sp, #56	; 0x38
 8009500:	af04      	add	r7, sp, #16
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d107      	bne.n	800951c <tcp_abandon+0x20>
 800950c:	4b52      	ldr	r3, [pc, #328]	; (8009658 <tcp_abandon+0x15c>)
 800950e:	f240 223d 	movw	r2, #573	; 0x23d
 8009512:	4952      	ldr	r1, [pc, #328]	; (800965c <tcp_abandon+0x160>)
 8009514:	4852      	ldr	r0, [pc, #328]	; (8009660 <tcp_abandon+0x164>)
 8009516:	f00b f9c5 	bl	80148a4 <iprintf>
 800951a:	e099      	b.n	8009650 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	7d1b      	ldrb	r3, [r3, #20]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d106      	bne.n	8009532 <tcp_abandon+0x36>
 8009524:	4b4c      	ldr	r3, [pc, #304]	; (8009658 <tcp_abandon+0x15c>)
 8009526:	f44f 7210 	mov.w	r2, #576	; 0x240
 800952a:	494e      	ldr	r1, [pc, #312]	; (8009664 <tcp_abandon+0x168>)
 800952c:	484c      	ldr	r0, [pc, #304]	; (8009660 <tcp_abandon+0x164>)
 800952e:	f00b f9b9 	bl	80148a4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	7d1b      	ldrb	r3, [r3, #20]
 8009536:	2b0a      	cmp	r3, #10
 8009538:	d107      	bne.n	800954a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800953a:	6879      	ldr	r1, [r7, #4]
 800953c:	484a      	ldr	r0, [pc, #296]	; (8009668 <tcp_abandon+0x16c>)
 800953e:	f001 fa63 	bl	800aa08 <tcp_pcb_remove>
    tcp_free(pcb);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7ff fdb0 	bl	80090a8 <tcp_free>
 8009548:	e082      	b.n	8009650 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800954a:	2300      	movs	r3, #0
 800954c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009556:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009564:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	7d1b      	ldrb	r3, [r3, #20]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d126      	bne.n	80095c2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	8adb      	ldrh	r3, [r3, #22]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d02e      	beq.n	80095da <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800957c:	4b3b      	ldr	r3, [pc, #236]	; (800966c <tcp_abandon+0x170>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	429a      	cmp	r2, r3
 8009584:	d105      	bne.n	8009592 <tcp_abandon+0x96>
 8009586:	4b39      	ldr	r3, [pc, #228]	; (800966c <tcp_abandon+0x170>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	4a37      	ldr	r2, [pc, #220]	; (800966c <tcp_abandon+0x170>)
 800958e:	6013      	str	r3, [r2, #0]
 8009590:	e013      	b.n	80095ba <tcp_abandon+0xbe>
 8009592:	4b36      	ldr	r3, [pc, #216]	; (800966c <tcp_abandon+0x170>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	61fb      	str	r3, [r7, #28]
 8009598:	e00c      	b.n	80095b4 <tcp_abandon+0xb8>
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d104      	bne.n	80095ae <tcp_abandon+0xb2>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68da      	ldr	r2, [r3, #12]
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	60da      	str	r2, [r3, #12]
 80095ac:	e005      	b.n	80095ba <tcp_abandon+0xbe>
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	61fb      	str	r3, [r7, #28]
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1ef      	bne.n	800959a <tcp_abandon+0x9e>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	60da      	str	r2, [r3, #12]
 80095c0:	e00b      	b.n	80095da <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	8adb      	ldrh	r3, [r3, #22]
 80095ca:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80095cc:	6879      	ldr	r1, [r7, #4]
 80095ce:	4828      	ldr	r0, [pc, #160]	; (8009670 <tcp_abandon+0x174>)
 80095d0:	f001 fa1a 	bl	800aa08 <tcp_pcb_remove>
 80095d4:	4b27      	ldr	r3, [pc, #156]	; (8009674 <tcp_abandon+0x178>)
 80095d6:	2201      	movs	r2, #1
 80095d8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d004      	beq.n	80095ec <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e6:	4618      	mov	r0, r3
 80095e8:	f000 fed6 	bl	800a398 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d004      	beq.n	80095fe <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 fecd 	bl	800a398 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009602:	2b00      	cmp	r3, #0
 8009604:	d004      	beq.n	8009610 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800960a:	4618      	mov	r0, r3
 800960c:	f000 fec4 	bl	800a398 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00e      	beq.n	8009634 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009616:	6879      	ldr	r1, [r7, #4]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	3304      	adds	r3, #4
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	8b12      	ldrh	r2, [r2, #24]
 8009620:	9202      	str	r2, [sp, #8]
 8009622:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009624:	9201      	str	r2, [sp, #4]
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	460b      	mov	r3, r1
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	69b9      	ldr	r1, [r7, #24]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f005 fbba 	bl	800eda8 <tcp_rst>
    }
    last_state = pcb->state;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	7d1b      	ldrb	r3, [r3, #20]
 8009638:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7ff fd34 	bl	80090a8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d004      	beq.n	8009650 <tcp_abandon+0x154>
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f06f 010c 	mvn.w	r1, #12
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	4798      	blx	r3
  }
}
 8009650:	3728      	adds	r7, #40	; 0x28
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	08017dc8 	.word	0x08017dc8
 800965c:	08017f0c 	.word	0x08017f0c
 8009660:	08017e0c 	.word	0x08017e0c
 8009664:	08017f28 	.word	0x08017f28
 8009668:	2000ae78 	.word	0x2000ae78
 800966c:	2000ae74 	.word	0x2000ae74
 8009670:	2000ae68 	.word	0x2000ae68
 8009674:	2000ae64 	.word	0x2000ae64

08009678 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009680:	2101      	movs	r1, #1
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f7ff ff3a 	bl	80094fc <tcp_abandon>
}
 8009688:	bf00      	nop
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	4613      	mov	r3, r2
 800969c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800969e:	2304      	movs	r3, #4
 80096a0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80096a8:	4b3e      	ldr	r3, [pc, #248]	; (80097a4 <tcp_bind+0x114>)
 80096aa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d109      	bne.n	80096c6 <tcp_bind+0x36>
 80096b2:	4b3d      	ldr	r3, [pc, #244]	; (80097a8 <tcp_bind+0x118>)
 80096b4:	f240 22a9 	movw	r2, #681	; 0x2a9
 80096b8:	493c      	ldr	r1, [pc, #240]	; (80097ac <tcp_bind+0x11c>)
 80096ba:	483d      	ldr	r0, [pc, #244]	; (80097b0 <tcp_bind+0x120>)
 80096bc:	f00b f8f2 	bl	80148a4 <iprintf>
 80096c0:	f06f 030f 	mvn.w	r3, #15
 80096c4:	e06a      	b.n	800979c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	7d1b      	ldrb	r3, [r3, #20]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d009      	beq.n	80096e2 <tcp_bind+0x52>
 80096ce:	4b36      	ldr	r3, [pc, #216]	; (80097a8 <tcp_bind+0x118>)
 80096d0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80096d4:	4937      	ldr	r1, [pc, #220]	; (80097b4 <tcp_bind+0x124>)
 80096d6:	4836      	ldr	r0, [pc, #216]	; (80097b0 <tcp_bind+0x120>)
 80096d8:	f00b f8e4 	bl	80148a4 <iprintf>
 80096dc:	f06f 0305 	mvn.w	r3, #5
 80096e0:	e05c      	b.n	800979c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80096e2:	88fb      	ldrh	r3, [r7, #6]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d109      	bne.n	80096fc <tcp_bind+0x6c>
    port = tcp_new_port();
 80096e8:	f000 f9f0 	bl	8009acc <tcp_new_port>
 80096ec:	4603      	mov	r3, r0
 80096ee:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80096f0:	88fb      	ldrh	r3, [r7, #6]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d135      	bne.n	8009762 <tcp_bind+0xd2>
      return ERR_BUF;
 80096f6:	f06f 0301 	mvn.w	r3, #1
 80096fa:	e04f      	b.n	800979c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80096fc:	2300      	movs	r3, #0
 80096fe:	61fb      	str	r3, [r7, #28]
 8009700:	e02b      	b.n	800975a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009702:	4a2d      	ldr	r2, [pc, #180]	; (80097b8 <tcp_bind+0x128>)
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	61bb      	str	r3, [r7, #24]
 800970e:	e01e      	b.n	800974e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	8adb      	ldrh	r3, [r3, #22]
 8009714:	88fa      	ldrh	r2, [r7, #6]
 8009716:	429a      	cmp	r2, r3
 8009718:	d116      	bne.n	8009748 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800971a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800971c:	2b00      	cmp	r3, #0
 800971e:	d010      	beq.n	8009742 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00c      	beq.n	8009742 <tcp_bind+0xb2>
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d009      	beq.n	8009742 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d005      	beq.n	8009742 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800973e:	429a      	cmp	r2, r3
 8009740:	d102      	bne.n	8009748 <tcp_bind+0xb8>
              return ERR_USE;
 8009742:	f06f 0307 	mvn.w	r3, #7
 8009746:	e029      	b.n	800979c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	61bb      	str	r3, [r7, #24]
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1dd      	bne.n	8009710 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	3301      	adds	r3, #1
 8009758:	61fb      	str	r3, [r7, #28]
 800975a:	69fa      	ldr	r2, [r7, #28]
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	429a      	cmp	r2, r3
 8009760:	dbcf      	blt.n	8009702 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00c      	beq.n	8009782 <tcp_bind+0xf2>
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d008      	beq.n	8009782 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d002      	beq.n	800977c <tcp_bind+0xec>
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	e000      	b.n	800977e <tcp_bind+0xee>
 800977c:	2300      	movs	r3, #0
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	88fa      	ldrh	r2, [r7, #6]
 8009786:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009788:	4b0c      	ldr	r3, [pc, #48]	; (80097bc <tcp_bind+0x12c>)
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	60da      	str	r2, [r3, #12]
 8009790:	4a0a      	ldr	r2, [pc, #40]	; (80097bc <tcp_bind+0x12c>)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	f005 fcc9 	bl	800f12c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3720      	adds	r7, #32
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	0801a5d0 	.word	0x0801a5d0
 80097a8:	08017dc8 	.word	0x08017dc8
 80097ac:	08017f5c 	.word	0x08017f5c
 80097b0:	08017e0c 	.word	0x08017e0c
 80097b4:	08017f74 	.word	0x08017f74
 80097b8:	0801a5a8 	.word	0x0801a5a8
 80097bc:	2000ae74 	.word	0x2000ae74

080097c0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	4613      	mov	r3, r2
 80097cc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d106      	bne.n	80097e2 <tcp_accept_null+0x22>
 80097d4:	4b07      	ldr	r3, [pc, #28]	; (80097f4 <tcp_accept_null+0x34>)
 80097d6:	f240 320f 	movw	r2, #783	; 0x30f
 80097da:	4907      	ldr	r1, [pc, #28]	; (80097f8 <tcp_accept_null+0x38>)
 80097dc:	4807      	ldr	r0, [pc, #28]	; (80097fc <tcp_accept_null+0x3c>)
 80097de:	f00b f861 	bl	80148a4 <iprintf>

  tcp_abort(pcb);
 80097e2:	68b8      	ldr	r0, [r7, #8]
 80097e4:	f7ff ff48 	bl	8009678 <tcp_abort>

  return ERR_ABRT;
 80097e8:	f06f 030c 	mvn.w	r3, #12
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	08017dc8 	.word	0x08017dc8
 80097f8:	08017f9c 	.word	0x08017f9c
 80097fc:	08017e0c 	.word	0x08017e0c

08009800 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	460b      	mov	r3, r1
 800980a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800980c:	78fb      	ldrb	r3, [r7, #3]
 800980e:	2200      	movs	r2, #0
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f806 	bl	8009824 <tcp_listen_with_backlog_and_err>
 8009818:	4603      	mov	r3, r0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b088      	sub	sp, #32
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	460b      	mov	r3, r1
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8009832:	2300      	movs	r3, #0
 8009834:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d109      	bne.n	8009850 <tcp_listen_with_backlog_and_err+0x2c>
 800983c:	4b47      	ldr	r3, [pc, #284]	; (800995c <tcp_listen_with_backlog_and_err+0x138>)
 800983e:	f240 3259 	movw	r2, #857	; 0x359
 8009842:	4947      	ldr	r1, [pc, #284]	; (8009960 <tcp_listen_with_backlog_and_err+0x13c>)
 8009844:	4847      	ldr	r0, [pc, #284]	; (8009964 <tcp_listen_with_backlog_and_err+0x140>)
 8009846:	f00b f82d 	bl	80148a4 <iprintf>
 800984a:	23f0      	movs	r3, #240	; 0xf0
 800984c:	76fb      	strb	r3, [r7, #27]
 800984e:	e079      	b.n	8009944 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	7d1b      	ldrb	r3, [r3, #20]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d009      	beq.n	800986c <tcp_listen_with_backlog_and_err+0x48>
 8009858:	4b40      	ldr	r3, [pc, #256]	; (800995c <tcp_listen_with_backlog_and_err+0x138>)
 800985a:	f240 325a 	movw	r2, #858	; 0x35a
 800985e:	4942      	ldr	r1, [pc, #264]	; (8009968 <tcp_listen_with_backlog_and_err+0x144>)
 8009860:	4840      	ldr	r0, [pc, #256]	; (8009964 <tcp_listen_with_backlog_and_err+0x140>)
 8009862:	f00b f81f 	bl	80148a4 <iprintf>
 8009866:	23f1      	movs	r3, #241	; 0xf1
 8009868:	76fb      	strb	r3, [r7, #27]
 800986a:	e06b      	b.n	8009944 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	7d1b      	ldrb	r3, [r3, #20]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d104      	bne.n	800987e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009878:	23f7      	movs	r3, #247	; 0xf7
 800987a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800987c:	e062      	b.n	8009944 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800987e:	2002      	movs	r0, #2
 8009880:	f7fe fa7c 	bl	8007d7c <memp_malloc>
 8009884:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d102      	bne.n	8009892 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800988c:	23ff      	movs	r3, #255	; 0xff
 800988e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009890:	e058      	b.n	8009944 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	691a      	ldr	r2, [r3, #16]
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	8ada      	ldrh	r2, [r3, #22]
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	2201      	movs	r2, #1
 80098a6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	7d5a      	ldrb	r2, [r3, #21]
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	7a5a      	ldrb	r2, [r3, #9]
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	2200      	movs	r2, #0
 80098bc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	7ada      	ldrb	r2, [r3, #11]
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	7a9a      	ldrb	r2, [r3, #10]
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	8adb      	ldrh	r3, [r3, #22]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d021      	beq.n	8009922 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80098de:	4b23      	ldr	r3, [pc, #140]	; (800996c <tcp_listen_with_backlog_and_err+0x148>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d105      	bne.n	80098f4 <tcp_listen_with_backlog_and_err+0xd0>
 80098e8:	4b20      	ldr	r3, [pc, #128]	; (800996c <tcp_listen_with_backlog_and_err+0x148>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	4a1f      	ldr	r2, [pc, #124]	; (800996c <tcp_listen_with_backlog_and_err+0x148>)
 80098f0:	6013      	str	r3, [r2, #0]
 80098f2:	e013      	b.n	800991c <tcp_listen_with_backlog_and_err+0xf8>
 80098f4:	4b1d      	ldr	r3, [pc, #116]	; (800996c <tcp_listen_with_backlog_and_err+0x148>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	617b      	str	r3, [r7, #20]
 80098fa:	e00c      	b.n	8009916 <tcp_listen_with_backlog_and_err+0xf2>
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	429a      	cmp	r2, r3
 8009904:	d104      	bne.n	8009910 <tcp_listen_with_backlog_and_err+0xec>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	60da      	str	r2, [r3, #12]
 800990e:	e005      	b.n	800991c <tcp_listen_with_backlog_and_err+0xf8>
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	617b      	str	r3, [r7, #20]
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1ef      	bne.n	80098fc <tcp_listen_with_backlog_and_err+0xd8>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f7ff fbc0 	bl	80090a8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	4a11      	ldr	r2, [pc, #68]	; (8009970 <tcp_listen_with_backlog_and_err+0x14c>)
 800992c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800992e:	4b11      	ldr	r3, [pc, #68]	; (8009974 <tcp_listen_with_backlog_and_err+0x150>)
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	60da      	str	r2, [r3, #12]
 8009936:	4a0f      	ldr	r2, [pc, #60]	; (8009974 <tcp_listen_with_backlog_and_err+0x150>)
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	6013      	str	r3, [r2, #0]
 800993c:	f005 fbf6 	bl	800f12c <tcp_timer_needed>
  res = ERR_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d002      	beq.n	8009950 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	7efa      	ldrb	r2, [r7, #27]
 800994e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8009950:	69fb      	ldr	r3, [r7, #28]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3720      	adds	r7, #32
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	08017dc8 	.word	0x08017dc8
 8009960:	08017fbc 	.word	0x08017fbc
 8009964:	08017e0c 	.word	0x08017e0c
 8009968:	08017fec 	.word	0x08017fec
 800996c:	2000ae74 	.word	0x2000ae74
 8009970:	080097c1 	.word	0x080097c1
 8009974:	2000ae70 	.word	0x2000ae70

08009978 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d106      	bne.n	8009994 <tcp_update_rcv_ann_wnd+0x1c>
 8009986:	4b25      	ldr	r3, [pc, #148]	; (8009a1c <tcp_update_rcv_ann_wnd+0xa4>)
 8009988:	f240 32a6 	movw	r2, #934	; 0x3a6
 800998c:	4924      	ldr	r1, [pc, #144]	; (8009a20 <tcp_update_rcv_ann_wnd+0xa8>)
 800998e:	4825      	ldr	r0, [pc, #148]	; (8009a24 <tcp_update_rcv_ann_wnd+0xac>)
 8009990:	f00a ff88 	bl	80148a4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800999c:	4413      	add	r3, r2
 800999e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80099a8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80099ac:	bf28      	it	cs
 80099ae:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80099b2:	b292      	uxth	r2, r2
 80099b4:	4413      	add	r3, r2
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	db08      	blt.n	80099d0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	e020      	b.n	8009a12 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	dd03      	ble.n	80099e6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80099e4:	e014      	b.n	8009a10 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099f8:	d306      	bcc.n	8009a08 <tcp_update_rcv_ann_wnd+0x90>
 80099fa:	4b08      	ldr	r3, [pc, #32]	; (8009a1c <tcp_update_rcv_ann_wnd+0xa4>)
 80099fc:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009a00:	4909      	ldr	r1, [pc, #36]	; (8009a28 <tcp_update_rcv_ann_wnd+0xb0>)
 8009a02:	4808      	ldr	r0, [pc, #32]	; (8009a24 <tcp_update_rcv_ann_wnd+0xac>)
 8009a04:	f00a ff4e 	bl	80148a4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009a10:	2300      	movs	r3, #0
  }
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	08017dc8 	.word	0x08017dc8
 8009a20:	08018024 	.word	0x08018024
 8009a24:	08017e0c 	.word	0x08017e0c
 8009a28:	08018048 	.word	0x08018048

08009a2c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	460b      	mov	r3, r1
 8009a36:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d107      	bne.n	8009a4e <tcp_recved+0x22>
 8009a3e:	4b1f      	ldr	r3, [pc, #124]	; (8009abc <tcp_recved+0x90>)
 8009a40:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009a44:	491e      	ldr	r1, [pc, #120]	; (8009ac0 <tcp_recved+0x94>)
 8009a46:	481f      	ldr	r0, [pc, #124]	; (8009ac4 <tcp_recved+0x98>)
 8009a48:	f00a ff2c 	bl	80148a4 <iprintf>
 8009a4c:	e032      	b.n	8009ab4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	7d1b      	ldrb	r3, [r3, #20]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d106      	bne.n	8009a64 <tcp_recved+0x38>
 8009a56:	4b19      	ldr	r3, [pc, #100]	; (8009abc <tcp_recved+0x90>)
 8009a58:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009a5c:	491a      	ldr	r1, [pc, #104]	; (8009ac8 <tcp_recved+0x9c>)
 8009a5e:	4819      	ldr	r0, [pc, #100]	; (8009ac4 <tcp_recved+0x98>)
 8009a60:	f00a ff20 	bl	80148a4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009a68:	887b      	ldrh	r3, [r7, #2]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009a6e:	89fb      	ldrh	r3, [r7, #14]
 8009a70:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009a74:	d804      	bhi.n	8009a80 <tcp_recved+0x54>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a7a:	89fa      	ldrh	r2, [r7, #14]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d204      	bcs.n	8009a8a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009a86:	851a      	strh	r2, [r3, #40]	; 0x28
 8009a88:	e002      	b.n	8009a90 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	89fa      	ldrh	r2, [r7, #14]
 8009a8e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f7ff ff71 	bl	8009978 <tcp_update_rcv_ann_wnd>
 8009a96:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009a9e:	d309      	bcc.n	8009ab4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	8b5b      	ldrh	r3, [r3, #26]
 8009aa4:	f043 0302 	orr.w	r3, r3, #2
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f004 fbc6 	bl	800e240 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	08017dc8 	.word	0x08017dc8
 8009ac0:	08018064 	.word	0x08018064
 8009ac4:	08017e0c 	.word	0x08017e0c
 8009ac8:	0801807c 	.word	0x0801807c

08009acc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8009ad6:	4b1e      	ldr	r3, [pc, #120]	; (8009b50 <tcp_new_port+0x84>)
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	3301      	adds	r3, #1
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	4b1c      	ldr	r3, [pc, #112]	; (8009b50 <tcp_new_port+0x84>)
 8009ae0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8009ae2:	4b1b      	ldr	r3, [pc, #108]	; (8009b50 <tcp_new_port+0x84>)
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d103      	bne.n	8009af6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8009aee:	4b18      	ldr	r3, [pc, #96]	; (8009b50 <tcp_new_port+0x84>)
 8009af0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009af4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009af6:	2300      	movs	r3, #0
 8009af8:	71fb      	strb	r3, [r7, #7]
 8009afa:	e01e      	b.n	8009b3a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009afc:	79fb      	ldrb	r3, [r7, #7]
 8009afe:	4a15      	ldr	r2, [pc, #84]	; (8009b54 <tcp_new_port+0x88>)
 8009b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	603b      	str	r3, [r7, #0]
 8009b08:	e011      	b.n	8009b2e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	8ada      	ldrh	r2, [r3, #22]
 8009b0e:	4b10      	ldr	r3, [pc, #64]	; (8009b50 <tcp_new_port+0x84>)
 8009b10:	881b      	ldrh	r3, [r3, #0]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d108      	bne.n	8009b28 <tcp_new_port+0x5c>
        n++;
 8009b16:	88bb      	ldrh	r3, [r7, #4]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009b1c:	88bb      	ldrh	r3, [r7, #4]
 8009b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b22:	d3d8      	bcc.n	8009ad6 <tcp_new_port+0xa>
          return 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	e00d      	b.n	8009b44 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	603b      	str	r3, [r7, #0]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1ea      	bne.n	8009b0a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009b34:	79fb      	ldrb	r3, [r7, #7]
 8009b36:	3301      	adds	r3, #1
 8009b38:	71fb      	strb	r3, [r7, #7]
 8009b3a:	79fb      	ldrb	r3, [r7, #7]
 8009b3c:	2b03      	cmp	r3, #3
 8009b3e:	d9dd      	bls.n	8009afc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009b40:	4b03      	ldr	r3, [pc, #12]	; (8009b50 <tcp_new_port+0x84>)
 8009b42:	881b      	ldrh	r3, [r3, #0]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	20000020 	.word	0x20000020
 8009b54:	0801a5a8 	.word	0x0801a5a8

08009b58 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009b58:	b5b0      	push	{r4, r5, r7, lr}
 8009b5a:	b090      	sub	sp, #64	; 0x40
 8009b5c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009b64:	4b94      	ldr	r3, [pc, #592]	; (8009db8 <tcp_slowtmr+0x260>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	4a93      	ldr	r2, [pc, #588]	; (8009db8 <tcp_slowtmr+0x260>)
 8009b6c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009b6e:	4b93      	ldr	r3, [pc, #588]	; (8009dbc <tcp_slowtmr+0x264>)
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	3301      	adds	r3, #1
 8009b74:	b2da      	uxtb	r2, r3
 8009b76:	4b91      	ldr	r3, [pc, #580]	; (8009dbc <tcp_slowtmr+0x264>)
 8009b78:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8009b7e:	4b90      	ldr	r3, [pc, #576]	; (8009dc0 <tcp_slowtmr+0x268>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009b84:	e29f      	b.n	800a0c6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b88:	7d1b      	ldrb	r3, [r3, #20]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d106      	bne.n	8009b9c <tcp_slowtmr+0x44>
 8009b8e:	4b8d      	ldr	r3, [pc, #564]	; (8009dc4 <tcp_slowtmr+0x26c>)
 8009b90:	f240 42be 	movw	r2, #1214	; 0x4be
 8009b94:	498c      	ldr	r1, [pc, #560]	; (8009dc8 <tcp_slowtmr+0x270>)
 8009b96:	488d      	ldr	r0, [pc, #564]	; (8009dcc <tcp_slowtmr+0x274>)
 8009b98:	f00a fe84 	bl	80148a4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9e:	7d1b      	ldrb	r3, [r3, #20]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d106      	bne.n	8009bb2 <tcp_slowtmr+0x5a>
 8009ba4:	4b87      	ldr	r3, [pc, #540]	; (8009dc4 <tcp_slowtmr+0x26c>)
 8009ba6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009baa:	4989      	ldr	r1, [pc, #548]	; (8009dd0 <tcp_slowtmr+0x278>)
 8009bac:	4887      	ldr	r0, [pc, #540]	; (8009dcc <tcp_slowtmr+0x274>)
 8009bae:	f00a fe79 	bl	80148a4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb4:	7d1b      	ldrb	r3, [r3, #20]
 8009bb6:	2b0a      	cmp	r3, #10
 8009bb8:	d106      	bne.n	8009bc8 <tcp_slowtmr+0x70>
 8009bba:	4b82      	ldr	r3, [pc, #520]	; (8009dc4 <tcp_slowtmr+0x26c>)
 8009bbc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009bc0:	4984      	ldr	r1, [pc, #528]	; (8009dd4 <tcp_slowtmr+0x27c>)
 8009bc2:	4882      	ldr	r0, [pc, #520]	; (8009dcc <tcp_slowtmr+0x274>)
 8009bc4:	f00a fe6e 	bl	80148a4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bca:	7f9a      	ldrb	r2, [r3, #30]
 8009bcc:	4b7b      	ldr	r3, [pc, #492]	; (8009dbc <tcp_slowtmr+0x264>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d105      	bne.n	8009be0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8009bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8009bde:	e272      	b.n	800a0c6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009be0:	4b76      	ldr	r3, [pc, #472]	; (8009dbc <tcp_slowtmr+0x264>)
 8009be2:	781a      	ldrb	r2, [r3, #0]
 8009be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf6:	7d1b      	ldrb	r3, [r3, #20]
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d10a      	bne.n	8009c12 <tcp_slowtmr+0xba>
 8009bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c02:	2b05      	cmp	r3, #5
 8009c04:	d905      	bls.n	8009c12 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8009c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c10:	e11e      	b.n	8009e50 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c18:	2b0b      	cmp	r3, #11
 8009c1a:	d905      	bls.n	8009c28 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c20:	3301      	adds	r3, #1
 8009c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c26:	e113      	b.n	8009e50 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d075      	beq.n	8009d1e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d006      	beq.n	8009c48 <tcp_slowtmr+0xf0>
 8009c3a:	4b62      	ldr	r3, [pc, #392]	; (8009dc4 <tcp_slowtmr+0x26c>)
 8009c3c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009c40:	4965      	ldr	r1, [pc, #404]	; (8009dd8 <tcp_slowtmr+0x280>)
 8009c42:	4862      	ldr	r0, [pc, #392]	; (8009dcc <tcp_slowtmr+0x274>)
 8009c44:	f00a fe2e 	bl	80148a4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d106      	bne.n	8009c5e <tcp_slowtmr+0x106>
 8009c50:	4b5c      	ldr	r3, [pc, #368]	; (8009dc4 <tcp_slowtmr+0x26c>)
 8009c52:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009c56:	4961      	ldr	r1, [pc, #388]	; (8009ddc <tcp_slowtmr+0x284>)
 8009c58:	485c      	ldr	r0, [pc, #368]	; (8009dcc <tcp_slowtmr+0x274>)
 8009c5a:	f00a fe23 	bl	80148a4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c60:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009c64:	2b0b      	cmp	r3, #11
 8009c66:	d905      	bls.n	8009c74 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c72:	e0ed      	b.n	8009e50 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c76:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	4a58      	ldr	r2, [pc, #352]	; (8009de0 <tcp_slowtmr+0x288>)
 8009c7e:	5cd3      	ldrb	r3, [r2, r3]
 8009c80:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c84:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009c88:	7c7a      	ldrb	r2, [r7, #17]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d907      	bls.n	8009c9e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8009c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009c94:	3301      	adds	r3, #1
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8009c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009ca4:	7c7a      	ldrb	r2, [r7, #17]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	f200 80d2 	bhi.w	8009e50 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009cac:	2301      	movs	r3, #1
 8009cae:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8009cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d108      	bne.n	8009ccc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cbc:	f005 f968 	bl	800ef90 <tcp_zero_window_probe>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d014      	beq.n	8009cf0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	623b      	str	r3, [r7, #32]
 8009cca:	e011      	b.n	8009cf0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cd6:	f004 f82d 	bl	800dd34 <tcp_split_unsent_seg>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d107      	bne.n	8009cf0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8009ce0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ce2:	f004 faad 	bl	800e240 <tcp_output>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009cec:	2300      	movs	r3, #0
 8009cee:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f000 80ac 	beq.w	8009e50 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d02:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009d06:	2b06      	cmp	r3, #6
 8009d08:	f200 80a2 	bhi.w	8009e50 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009d12:	3301      	adds	r3, #1
 8009d14:	b2da      	uxtb	r2, r3
 8009d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d18:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009d1c:	e098      	b.n	8009e50 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d20:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	db0f      	blt.n	8009d48 <tcp_slowtmr+0x1f0>
 8009d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009d2e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d008      	beq.n	8009d48 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8009d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d38:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	3301      	adds	r3, #1
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	b21a      	sxth	r2, r3
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d50:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009d54:	429a      	cmp	r2, r3
 8009d56:	db7b      	blt.n	8009e50 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009d58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d5a:	f004 fd65 	bl	800e828 <tcp_rexmit_rto_prepare>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d007      	beq.n	8009d74 <tcp_slowtmr+0x21c>
 8009d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d171      	bne.n	8009e50 <tcp_slowtmr+0x2f8>
 8009d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d06d      	beq.n	8009e50 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8009d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d76:	7d1b      	ldrb	r3, [r3, #20]
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d03a      	beq.n	8009df2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d82:	2b0c      	cmp	r3, #12
 8009d84:	bf28      	it	cs
 8009d86:	230c      	movcs	r3, #12
 8009d88:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009d90:	10db      	asrs	r3, r3, #3
 8009d92:	b21b      	sxth	r3, r3
 8009d94:	461a      	mov	r2, r3
 8009d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d98:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009d9c:	4413      	add	r3, r2
 8009d9e:	7efa      	ldrb	r2, [r7, #27]
 8009da0:	4910      	ldr	r1, [pc, #64]	; (8009de4 <tcp_slowtmr+0x28c>)
 8009da2:	5c8a      	ldrb	r2, [r1, r2]
 8009da4:	4093      	lsls	r3, r2
 8009da6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009dae:	4293      	cmp	r3, r2
 8009db0:	dc1a      	bgt.n	8009de8 <tcp_slowtmr+0x290>
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	b21a      	sxth	r2, r3
 8009db6:	e019      	b.n	8009dec <tcp_slowtmr+0x294>
 8009db8:	2000ae6c 	.word	0x2000ae6c
 8009dbc:	200008aa 	.word	0x200008aa
 8009dc0:	2000ae68 	.word	0x2000ae68
 8009dc4:	08017dc8 	.word	0x08017dc8
 8009dc8:	0801810c 	.word	0x0801810c
 8009dcc:	08017e0c 	.word	0x08017e0c
 8009dd0:	08018138 	.word	0x08018138
 8009dd4:	08018164 	.word	0x08018164
 8009dd8:	08018194 	.word	0x08018194
 8009ddc:	080181c8 	.word	0x080181c8
 8009de0:	0801a5a0 	.word	0x0801a5a0
 8009de4:	0801a590 	.word	0x0801a590
 8009de8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8009df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df4:	2200      	movs	r2, #0
 8009df6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009e04:	4293      	cmp	r3, r2
 8009e06:	bf28      	it	cs
 8009e08:	4613      	movcs	r3, r2
 8009e0a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009e0c:	8a7b      	ldrh	r3, [r7, #18]
 8009e0e:	085b      	lsrs	r3, r3, #1
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e22:	005b      	lsls	r3, r3, #1
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d206      	bcs.n	8009e38 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e2e:	005b      	lsls	r3, r3, #1
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8009e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e44:	2200      	movs	r2, #0
 8009e46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009e4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e4c:	f004 fd5c 	bl	800e908 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e52:	7d1b      	ldrb	r3, [r3, #20]
 8009e54:	2b06      	cmp	r3, #6
 8009e56:	d111      	bne.n	8009e7c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5a:	8b5b      	ldrh	r3, [r3, #26]
 8009e5c:	f003 0310 	and.w	r3, r3, #16
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00b      	beq.n	8009e7c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009e64:	4b9d      	ldr	r3, [pc, #628]	; (800a0dc <tcp_slowtmr+0x584>)
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6a:	6a1b      	ldr	r3, [r3, #32]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	2b28      	cmp	r3, #40	; 0x28
 8009e70:	d904      	bls.n	8009e7c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e76:	3301      	adds	r3, #1
 8009e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7e:	7a5b      	ldrb	r3, [r3, #9]
 8009e80:	f003 0308 	and.w	r3, r3, #8
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d04c      	beq.n	8009f22 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8009e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009e8c:	2b04      	cmp	r3, #4
 8009e8e:	d003      	beq.n	8009e98 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e92:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009e94:	2b07      	cmp	r3, #7
 8009e96:	d144      	bne.n	8009f22 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009e98:	4b90      	ldr	r3, [pc, #576]	; (800a0dc <tcp_slowtmr+0x584>)
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ea8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8009eac:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009eb0:	498b      	ldr	r1, [pc, #556]	; (800a0e0 <tcp_slowtmr+0x588>)
 8009eb2:	fba1 1303 	umull	r1, r3, r1, r3
 8009eb6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d90a      	bls.n	8009ed2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8009ec6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009eca:	3301      	adds	r3, #1
 8009ecc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009ed0:	e027      	b.n	8009f22 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009ed2:	4b82      	ldr	r3, [pc, #520]	; (800a0dc <tcp_slowtmr+0x584>)
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ede:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009ee8:	4618      	mov	r0, r3
 8009eea:	4b7e      	ldr	r3, [pc, #504]	; (800a0e4 <tcp_slowtmr+0x58c>)
 8009eec:	fb00 f303 	mul.w	r3, r0, r3
 8009ef0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009ef2:	497b      	ldr	r1, [pc, #492]	; (800a0e0 <tcp_slowtmr+0x588>)
 8009ef4:	fba1 1303 	umull	r1, r3, r1, r3
 8009ef8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d911      	bls.n	8009f22 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8009efe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f00:	f005 f806 	bl	800ef10 <tcp_keepalive>
 8009f04:	4603      	mov	r3, r0
 8009f06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009f0a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d107      	bne.n	8009f22 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8009f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f14:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009f18:	3301      	adds	r3, #1
 8009f1a:	b2da      	uxtb	r2, r3
 8009f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d011      	beq.n	8009f4e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009f2a:	4b6c      	ldr	r3, [pc, #432]	; (800a0dc <tcp_slowtmr+0x584>)
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	1ad2      	subs	r2, r2, r3
 8009f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f36:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	005b      	lsls	r3, r3, #1
 8009f40:	440b      	add	r3, r1
 8009f42:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d302      	bcc.n	8009f4e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009f48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f4a:	f000 fec1 	bl	800acd0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f50:	7d1b      	ldrb	r3, [r3, #20]
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d10b      	bne.n	8009f6e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009f56:	4b61      	ldr	r3, [pc, #388]	; (800a0dc <tcp_slowtmr+0x584>)
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	2b28      	cmp	r3, #40	; 0x28
 8009f62:	d904      	bls.n	8009f6e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f68:	3301      	adds	r3, #1
 8009f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f70:	7d1b      	ldrb	r3, [r3, #20]
 8009f72:	2b09      	cmp	r3, #9
 8009f74:	d10b      	bne.n	8009f8e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009f76:	4b59      	ldr	r3, [pc, #356]	; (800a0dc <tcp_slowtmr+0x584>)
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	2bf0      	cmp	r3, #240	; 0xf0
 8009f82:	d904      	bls.n	8009f8e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8009f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f88:	3301      	adds	r3, #1
 8009f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d060      	beq.n	800a058 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f9c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009f9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fa0:	f000 fce2 	bl	800a968 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d010      	beq.n	8009fcc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009faa:	4b4f      	ldr	r3, [pc, #316]	; (800a0e8 <tcp_slowtmr+0x590>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d106      	bne.n	8009fc2 <tcp_slowtmr+0x46a>
 8009fb4:	4b4d      	ldr	r3, [pc, #308]	; (800a0ec <tcp_slowtmr+0x594>)
 8009fb6:	f240 526d 	movw	r2, #1389	; 0x56d
 8009fba:	494d      	ldr	r1, [pc, #308]	; (800a0f0 <tcp_slowtmr+0x598>)
 8009fbc:	484d      	ldr	r0, [pc, #308]	; (800a0f4 <tcp_slowtmr+0x59c>)
 8009fbe:	f00a fc71 	bl	80148a4 <iprintf>
        prev->next = pcb->next;
 8009fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc4:	68da      	ldr	r2, [r3, #12]
 8009fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc8:	60da      	str	r2, [r3, #12]
 8009fca:	e00f      	b.n	8009fec <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009fcc:	4b46      	ldr	r3, [pc, #280]	; (800a0e8 <tcp_slowtmr+0x590>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d006      	beq.n	8009fe4 <tcp_slowtmr+0x48c>
 8009fd6:	4b45      	ldr	r3, [pc, #276]	; (800a0ec <tcp_slowtmr+0x594>)
 8009fd8:	f240 5271 	movw	r2, #1393	; 0x571
 8009fdc:	4946      	ldr	r1, [pc, #280]	; (800a0f8 <tcp_slowtmr+0x5a0>)
 8009fde:	4845      	ldr	r0, [pc, #276]	; (800a0f4 <tcp_slowtmr+0x59c>)
 8009fe0:	f00a fc60 	bl	80148a4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	4a3f      	ldr	r2, [pc, #252]	; (800a0e8 <tcp_slowtmr+0x590>)
 8009fea:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009fec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d013      	beq.n	800a01c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009ffc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a000:	3304      	adds	r3, #4
 800a002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a004:	8ad2      	ldrh	r2, [r2, #22]
 800a006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a008:	8b09      	ldrh	r1, [r1, #24]
 800a00a:	9102      	str	r1, [sp, #8]
 800a00c:	9201      	str	r2, [sp, #4]
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	462b      	mov	r3, r5
 800a012:	4622      	mov	r2, r4
 800a014:	4601      	mov	r1, r0
 800a016:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a018:	f004 fec6 	bl	800eda8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a024:	7d1b      	ldrb	r3, [r3, #20]
 800a026:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a02a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a032:	6838      	ldr	r0, [r7, #0]
 800a034:	f7ff f838 	bl	80090a8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a038:	4b30      	ldr	r3, [pc, #192]	; (800a0fc <tcp_slowtmr+0x5a4>)
 800a03a:	2200      	movs	r2, #0
 800a03c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d004      	beq.n	800a04e <tcp_slowtmr+0x4f6>
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f06f 010c 	mvn.w	r1, #12
 800a04a:	68b8      	ldr	r0, [r7, #8]
 800a04c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a04e:	4b2b      	ldr	r3, [pc, #172]	; (800a0fc <tcp_slowtmr+0x5a4>)
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d037      	beq.n	800a0c6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800a056:	e590      	b.n	8009b7a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a064:	7f1b      	ldrb	r3, [r3, #28]
 800a066:	3301      	adds	r3, #1
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a070:	7f1a      	ldrb	r2, [r3, #28]
 800a072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a074:	7f5b      	ldrb	r3, [r3, #29]
 800a076:	429a      	cmp	r2, r3
 800a078:	d325      	bcc.n	800a0c6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07c:	2200      	movs	r2, #0
 800a07e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a080:	4b1e      	ldr	r3, [pc, #120]	; (800a0fc <tcp_slowtmr+0x5a4>)
 800a082:	2200      	movs	r2, #0
 800a084:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00b      	beq.n	800a0a8 <tcp_slowtmr+0x550>
 800a090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a098:	6912      	ldr	r2, [r2, #16]
 800a09a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a09c:	4610      	mov	r0, r2
 800a09e:	4798      	blx	r3
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a0a6:	e002      	b.n	800a0ae <tcp_slowtmr+0x556>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a0ae:	4b13      	ldr	r3, [pc, #76]	; (800a0fc <tcp_slowtmr+0x5a4>)
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d000      	beq.n	800a0b8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800a0b6:	e560      	b.n	8009b7a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a0b8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d102      	bne.n	800a0c6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800a0c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0c2:	f004 f8bd 	bl	800e240 <tcp_output>
  while (pcb != NULL) {
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f47f ad5c 	bne.w	8009b86 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a0d2:	4b0b      	ldr	r3, [pc, #44]	; (800a100 <tcp_slowtmr+0x5a8>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a0d8:	e067      	b.n	800a1aa <tcp_slowtmr+0x652>
 800a0da:	bf00      	nop
 800a0dc:	2000ae6c 	.word	0x2000ae6c
 800a0e0:	10624dd3 	.word	0x10624dd3
 800a0e4:	000124f8 	.word	0x000124f8
 800a0e8:	2000ae68 	.word	0x2000ae68
 800a0ec:	08017dc8 	.word	0x08017dc8
 800a0f0:	08018200 	.word	0x08018200
 800a0f4:	08017e0c 	.word	0x08017e0c
 800a0f8:	0801822c 	.word	0x0801822c
 800a0fc:	2000ae64 	.word	0x2000ae64
 800a100:	2000ae78 	.word	0x2000ae78
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a106:	7d1b      	ldrb	r3, [r3, #20]
 800a108:	2b0a      	cmp	r3, #10
 800a10a:	d006      	beq.n	800a11a <tcp_slowtmr+0x5c2>
 800a10c:	4b2b      	ldr	r3, [pc, #172]	; (800a1bc <tcp_slowtmr+0x664>)
 800a10e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a112:	492b      	ldr	r1, [pc, #172]	; (800a1c0 <tcp_slowtmr+0x668>)
 800a114:	482b      	ldr	r0, [pc, #172]	; (800a1c4 <tcp_slowtmr+0x66c>)
 800a116:	f00a fbc5 	bl	80148a4 <iprintf>
    pcb_remove = 0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a120:	4b29      	ldr	r3, [pc, #164]	; (800a1c8 <tcp_slowtmr+0x670>)
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a126:	6a1b      	ldr	r3, [r3, #32]
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	2bf0      	cmp	r3, #240	; 0xf0
 800a12c:	d904      	bls.n	800a138 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a12e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a132:	3301      	adds	r3, #1
 800a134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d02f      	beq.n	800a1a0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a140:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a142:	f000 fc11 	bl	800a968 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d010      	beq.n	800a16e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a14c:	4b1f      	ldr	r3, [pc, #124]	; (800a1cc <tcp_slowtmr+0x674>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a152:	429a      	cmp	r2, r3
 800a154:	d106      	bne.n	800a164 <tcp_slowtmr+0x60c>
 800a156:	4b19      	ldr	r3, [pc, #100]	; (800a1bc <tcp_slowtmr+0x664>)
 800a158:	f240 52af 	movw	r2, #1455	; 0x5af
 800a15c:	491c      	ldr	r1, [pc, #112]	; (800a1d0 <tcp_slowtmr+0x678>)
 800a15e:	4819      	ldr	r0, [pc, #100]	; (800a1c4 <tcp_slowtmr+0x66c>)
 800a160:	f00a fba0 	bl	80148a4 <iprintf>
        prev->next = pcb->next;
 800a164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a166:	68da      	ldr	r2, [r3, #12]
 800a168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16a:	60da      	str	r2, [r3, #12]
 800a16c:	e00f      	b.n	800a18e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a16e:	4b17      	ldr	r3, [pc, #92]	; (800a1cc <tcp_slowtmr+0x674>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a174:	429a      	cmp	r2, r3
 800a176:	d006      	beq.n	800a186 <tcp_slowtmr+0x62e>
 800a178:	4b10      	ldr	r3, [pc, #64]	; (800a1bc <tcp_slowtmr+0x664>)
 800a17a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a17e:	4915      	ldr	r1, [pc, #84]	; (800a1d4 <tcp_slowtmr+0x67c>)
 800a180:	4810      	ldr	r0, [pc, #64]	; (800a1c4 <tcp_slowtmr+0x66c>)
 800a182:	f00a fb8f 	bl	80148a4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	4a10      	ldr	r2, [pc, #64]	; (800a1cc <tcp_slowtmr+0x674>)
 800a18c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a190:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a198:	69f8      	ldr	r0, [r7, #28]
 800a19a:	f7fe ff85 	bl	80090a8 <tcp_free>
 800a19e:	e004      	b.n	800a1aa <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1a9      	bne.n	800a104 <tcp_slowtmr+0x5ac>
    }
  }
}
 800a1b0:	bf00      	nop
 800a1b2:	bf00      	nop
 800a1b4:	3730      	adds	r7, #48	; 0x30
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bdb0      	pop	{r4, r5, r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	08017dc8 	.word	0x08017dc8
 800a1c0:	08018258 	.word	0x08018258
 800a1c4:	08017e0c 	.word	0x08017e0c
 800a1c8:	2000ae6c 	.word	0x2000ae6c
 800a1cc:	2000ae78 	.word	0x2000ae78
 800a1d0:	08018288 	.word	0x08018288
 800a1d4:	080182b0 	.word	0x080182b0

0800a1d8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a1de:	4b2d      	ldr	r3, [pc, #180]	; (800a294 <tcp_fasttmr+0xbc>)
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	4b2b      	ldr	r3, [pc, #172]	; (800a294 <tcp_fasttmr+0xbc>)
 800a1e8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a1ea:	4b2b      	ldr	r3, [pc, #172]	; (800a298 <tcp_fasttmr+0xc0>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a1f0:	e048      	b.n	800a284 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	7f9a      	ldrb	r2, [r3, #30]
 800a1f6:	4b27      	ldr	r3, [pc, #156]	; (800a294 <tcp_fasttmr+0xbc>)
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d03f      	beq.n	800a27e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a1fe:	4b25      	ldr	r3, [pc, #148]	; (800a294 <tcp_fasttmr+0xbc>)
 800a200:	781a      	ldrb	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	8b5b      	ldrh	r3, [r3, #26]
 800a20a:	f003 0301 	and.w	r3, r3, #1
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d010      	beq.n	800a234 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	8b5b      	ldrh	r3, [r3, #26]
 800a216:	f043 0302 	orr.w	r3, r3, #2
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f004 f80d 	bl	800e240 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	8b5b      	ldrh	r3, [r3, #26]
 800a22a:	f023 0303 	bic.w	r3, r3, #3
 800a22e:	b29a      	uxth	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	8b5b      	ldrh	r3, [r3, #26]
 800a238:	f003 0308 	and.w	r3, r3, #8
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d009      	beq.n	800a254 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	8b5b      	ldrh	r3, [r3, #26]
 800a244:	f023 0308 	bic.w	r3, r3, #8
 800a248:	b29a      	uxth	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f7ff f8be 	bl	80093d0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00a      	beq.n	800a278 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a262:	4b0e      	ldr	r3, [pc, #56]	; (800a29c <tcp_fasttmr+0xc4>)
 800a264:	2200      	movs	r2, #0
 800a266:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f819 	bl	800a2a0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a26e:	4b0b      	ldr	r3, [pc, #44]	; (800a29c <tcp_fasttmr+0xc4>)
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d000      	beq.n	800a278 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a276:	e7b8      	b.n	800a1ea <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	607b      	str	r3, [r7, #4]
 800a27c:	e002      	b.n	800a284 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1b3      	bne.n	800a1f2 <tcp_fasttmr+0x1a>
    }
  }
}
 800a28a:	bf00      	nop
 800a28c:	bf00      	nop
 800a28e:	3708      	adds	r7, #8
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	200008aa 	.word	0x200008aa
 800a298:	2000ae68 	.word	0x2000ae68
 800a29c:	2000ae64 	.word	0x2000ae64

0800a2a0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a2a0:	b590      	push	{r4, r7, lr}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d109      	bne.n	800a2c2 <tcp_process_refused_data+0x22>
 800a2ae:	4b37      	ldr	r3, [pc, #220]	; (800a38c <tcp_process_refused_data+0xec>)
 800a2b0:	f240 6209 	movw	r2, #1545	; 0x609
 800a2b4:	4936      	ldr	r1, [pc, #216]	; (800a390 <tcp_process_refused_data+0xf0>)
 800a2b6:	4837      	ldr	r0, [pc, #220]	; (800a394 <tcp_process_refused_data+0xf4>)
 800a2b8:	f00a faf4 	bl	80148a4 <iprintf>
 800a2bc:	f06f 030f 	mvn.w	r3, #15
 800a2c0:	e060      	b.n	800a384 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2c6:	7b5b      	ldrb	r3, [r3, #13]
 800a2c8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2ce:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00b      	beq.n	800a2f8 <tcp_process_refused_data+0x58>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6918      	ldr	r0, [r3, #16]
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	6879      	ldr	r1, [r7, #4]
 800a2f0:	47a0      	blx	r4
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	73fb      	strb	r3, [r7, #15]
 800a2f6:	e007      	b.n	800a308 <tcp_process_refused_data+0x68>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	6879      	ldr	r1, [r7, #4]
 800a2fe:	2000      	movs	r0, #0
 800a300:	f000 f8c2 	bl	800a488 <tcp_recv_null>
 800a304:	4603      	mov	r3, r0
 800a306:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d12a      	bne.n	800a366 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a310:	7bbb      	ldrb	r3, [r7, #14]
 800a312:	f003 0320 	and.w	r3, r3, #32
 800a316:	2b00      	cmp	r3, #0
 800a318:	d033      	beq.n	800a382 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a31e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a322:	d005      	beq.n	800a330 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a328:	3301      	adds	r3, #1
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00b      	beq.n	800a352 <tcp_process_refused_data+0xb2>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6918      	ldr	r0, [r3, #16]
 800a344:	2300      	movs	r3, #0
 800a346:	2200      	movs	r2, #0
 800a348:	6879      	ldr	r1, [r7, #4]
 800a34a:	47a0      	blx	r4
 800a34c:	4603      	mov	r3, r0
 800a34e:	73fb      	strb	r3, [r7, #15]
 800a350:	e001      	b.n	800a356 <tcp_process_refused_data+0xb6>
 800a352:	2300      	movs	r3, #0
 800a354:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a35a:	f113 0f0d 	cmn.w	r3, #13
 800a35e:	d110      	bne.n	800a382 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a360:	f06f 030c 	mvn.w	r3, #12
 800a364:	e00e      	b.n	800a384 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a36a:	f113 0f0d 	cmn.w	r3, #13
 800a36e:	d102      	bne.n	800a376 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a370:	f06f 030c 	mvn.w	r3, #12
 800a374:	e006      	b.n	800a384 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a37c:	f06f 0304 	mvn.w	r3, #4
 800a380:	e000      	b.n	800a384 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd90      	pop	{r4, r7, pc}
 800a38c:	08017dc8 	.word	0x08017dc8
 800a390:	080182d8 	.word	0x080182d8
 800a394:	08017e0c 	.word	0x08017e0c

0800a398 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a3a0:	e007      	b.n	800a3b2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 f80a 	bl	800a3c2 <tcp_seg_free>
    seg = next;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1f4      	bne.n	800a3a2 <tcp_segs_free+0xa>
  }
}
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b082      	sub	sp, #8
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00c      	beq.n	800a3ea <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d004      	beq.n	800a3e2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7fe fbb3 	bl	8008b48 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a3e2:	6879      	ldr	r1, [r7, #4]
 800a3e4:	2003      	movs	r0, #3
 800a3e6:	f7fd fd39 	bl	8007e5c <memp_free>
  }
}
 800a3ea:	bf00      	nop
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
	...

0800a3f4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d107      	bne.n	800a416 <tcp_setprio+0x22>
 800a406:	4b07      	ldr	r3, [pc, #28]	; (800a424 <tcp_setprio+0x30>)
 800a408:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800a40c:	4906      	ldr	r1, [pc, #24]	; (800a428 <tcp_setprio+0x34>)
 800a40e:	4807      	ldr	r0, [pc, #28]	; (800a42c <tcp_setprio+0x38>)
 800a410:	f00a fa48 	bl	80148a4 <iprintf>
 800a414:	e002      	b.n	800a41c <tcp_setprio+0x28>

  pcb->prio = prio;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	78fa      	ldrb	r2, [r7, #3]
 800a41a:	755a      	strb	r2, [r3, #21]
}
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	08017dc8 	.word	0x08017dc8
 800a428:	08018300 	.word	0x08018300
 800a42c:	08017e0c 	.word	0x08017e0c

0800a430 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d106      	bne.n	800a44c <tcp_seg_copy+0x1c>
 800a43e:	4b0f      	ldr	r3, [pc, #60]	; (800a47c <tcp_seg_copy+0x4c>)
 800a440:	f240 6282 	movw	r2, #1666	; 0x682
 800a444:	490e      	ldr	r1, [pc, #56]	; (800a480 <tcp_seg_copy+0x50>)
 800a446:	480f      	ldr	r0, [pc, #60]	; (800a484 <tcp_seg_copy+0x54>)
 800a448:	f00a fa2c 	bl	80148a4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a44c:	2003      	movs	r0, #3
 800a44e:	f7fd fc95 	bl	8007d7c <memp_malloc>
 800a452:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d101      	bne.n	800a45e <tcp_seg_copy+0x2e>
    return NULL;
 800a45a:	2300      	movs	r3, #0
 800a45c:	e00a      	b.n	800a474 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a45e:	2210      	movs	r2, #16
 800a460:	6879      	ldr	r1, [r7, #4]
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f00a fc97 	bl	8014d96 <memcpy>
  pbuf_ref(cseg->p);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fe fc0b 	bl	8008c88 <pbuf_ref>
  return cseg;
 800a472:	68fb      	ldr	r3, [r7, #12]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	08017dc8 	.word	0x08017dc8
 800a480:	0801831c 	.word	0x0801831c
 800a484:	08017e0c 	.word	0x08017e0c

0800a488 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d109      	bne.n	800a4b0 <tcp_recv_null+0x28>
 800a49c:	4b12      	ldr	r3, [pc, #72]	; (800a4e8 <tcp_recv_null+0x60>)
 800a49e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a4a2:	4912      	ldr	r1, [pc, #72]	; (800a4ec <tcp_recv_null+0x64>)
 800a4a4:	4812      	ldr	r0, [pc, #72]	; (800a4f0 <tcp_recv_null+0x68>)
 800a4a6:	f00a f9fd 	bl	80148a4 <iprintf>
 800a4aa:	f06f 030f 	mvn.w	r3, #15
 800a4ae:	e016      	b.n	800a4de <tcp_recv_null+0x56>

  if (p != NULL) {
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d009      	beq.n	800a4ca <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	891b      	ldrh	r3, [r3, #8]
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	68b8      	ldr	r0, [r7, #8]
 800a4be:	f7ff fab5 	bl	8009a2c <tcp_recved>
    pbuf_free(p);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7fe fb40 	bl	8008b48 <pbuf_free>
 800a4c8:	e008      	b.n	800a4dc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a4ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d104      	bne.n	800a4dc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a4d2:	68b8      	ldr	r0, [r7, #8]
 800a4d4:	f7fe ffe6 	bl	80094a4 <tcp_close>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	e000      	b.n	800a4de <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	08017dc8 	.word	0x08017dc8
 800a4ec:	08018338 	.word	0x08018338
 800a4f0:	08017e0c 	.word	0x08017e0c

0800a4f4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a4fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a502:	2b00      	cmp	r3, #0
 800a504:	db01      	blt.n	800a50a <tcp_kill_prio+0x16>
 800a506:	79fb      	ldrb	r3, [r7, #7]
 800a508:	e000      	b.n	800a50c <tcp_kill_prio+0x18>
 800a50a:	237f      	movs	r3, #127	; 0x7f
 800a50c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a50e:	7afb      	ldrb	r3, [r7, #11]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d034      	beq.n	800a57e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a514:	7afb      	ldrb	r3, [r7, #11]
 800a516:	3b01      	subs	r3, #1
 800a518:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a51e:	2300      	movs	r3, #0
 800a520:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a522:	4b19      	ldr	r3, [pc, #100]	; (800a588 <tcp_kill_prio+0x94>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	617b      	str	r3, [r7, #20]
 800a528:	e01f      	b.n	800a56a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	7d5b      	ldrb	r3, [r3, #21]
 800a52e:	7afa      	ldrb	r2, [r7, #11]
 800a530:	429a      	cmp	r2, r3
 800a532:	d80c      	bhi.n	800a54e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a538:	7afa      	ldrb	r2, [r7, #11]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d112      	bne.n	800a564 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a53e:	4b13      	ldr	r3, [pc, #76]	; (800a58c <tcp_kill_prio+0x98>)
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	6a1b      	ldr	r3, [r3, #32]
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d80a      	bhi.n	800a564 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a54e:	4b0f      	ldr	r3, [pc, #60]	; (800a58c <tcp_kill_prio+0x98>)
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	1ad3      	subs	r3, r2, r3
 800a558:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	7d5b      	ldrb	r3, [r3, #21]
 800a562:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	617b      	str	r3, [r7, #20]
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1dc      	bne.n	800a52a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d004      	beq.n	800a580 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a576:	6938      	ldr	r0, [r7, #16]
 800a578:	f7ff f87e 	bl	8009678 <tcp_abort>
 800a57c:	e000      	b.n	800a580 <tcp_kill_prio+0x8c>
    return;
 800a57e:	bf00      	nop
  }
}
 800a580:	3718      	adds	r7, #24
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	2000ae68 	.word	0x2000ae68
 800a58c:	2000ae6c 	.word	0x2000ae6c

0800a590 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
 800a596:	4603      	mov	r3, r0
 800a598:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a59a:	79fb      	ldrb	r3, [r7, #7]
 800a59c:	2b08      	cmp	r3, #8
 800a59e:	d009      	beq.n	800a5b4 <tcp_kill_state+0x24>
 800a5a0:	79fb      	ldrb	r3, [r7, #7]
 800a5a2:	2b09      	cmp	r3, #9
 800a5a4:	d006      	beq.n	800a5b4 <tcp_kill_state+0x24>
 800a5a6:	4b1a      	ldr	r3, [pc, #104]	; (800a610 <tcp_kill_state+0x80>)
 800a5a8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a5ac:	4919      	ldr	r1, [pc, #100]	; (800a614 <tcp_kill_state+0x84>)
 800a5ae:	481a      	ldr	r0, [pc, #104]	; (800a618 <tcp_kill_state+0x88>)
 800a5b0:	f00a f978 	bl	80148a4 <iprintf>

  inactivity = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5bc:	4b17      	ldr	r3, [pc, #92]	; (800a61c <tcp_kill_state+0x8c>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	617b      	str	r3, [r7, #20]
 800a5c2:	e017      	b.n	800a5f4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	7d1b      	ldrb	r3, [r3, #20]
 800a5c8:	79fa      	ldrb	r2, [r7, #7]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d10f      	bne.n	800a5ee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a5ce:	4b14      	ldr	r3, [pc, #80]	; (800a620 <tcp_kill_state+0x90>)
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d807      	bhi.n	800a5ee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a5de:	4b10      	ldr	r3, [pc, #64]	; (800a620 <tcp_kill_state+0x90>)
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1e4      	bne.n	800a5c4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d003      	beq.n	800a608 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a600:	2100      	movs	r1, #0
 800a602:	6938      	ldr	r0, [r7, #16]
 800a604:	f7fe ff7a 	bl	80094fc <tcp_abandon>
  }
}
 800a608:	bf00      	nop
 800a60a:	3718      	adds	r7, #24
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	08017dc8 	.word	0x08017dc8
 800a614:	08018354 	.word	0x08018354
 800a618:	08017e0c 	.word	0x08017e0c
 800a61c:	2000ae68 	.word	0x2000ae68
 800a620:	2000ae6c 	.word	0x2000ae6c

0800a624 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a62e:	2300      	movs	r3, #0
 800a630:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a632:	4b12      	ldr	r3, [pc, #72]	; (800a67c <tcp_kill_timewait+0x58>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	60fb      	str	r3, [r7, #12]
 800a638:	e012      	b.n	800a660 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a63a:	4b11      	ldr	r3, [pc, #68]	; (800a680 <tcp_kill_timewait+0x5c>)
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	429a      	cmp	r2, r3
 800a648:	d807      	bhi.n	800a65a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a64a:	4b0d      	ldr	r3, [pc, #52]	; (800a680 <tcp_kill_timewait+0x5c>)
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6a1b      	ldr	r3, [r3, #32]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	60fb      	str	r3, [r7, #12]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1e9      	bne.n	800a63a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a66c:	68b8      	ldr	r0, [r7, #8]
 800a66e:	f7ff f803 	bl	8009678 <tcp_abort>
  }
}
 800a672:	bf00      	nop
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	2000ae78 	.word	0x2000ae78
 800a680:	2000ae6c 	.word	0x2000ae6c

0800a684 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a68a:	4b10      	ldr	r3, [pc, #64]	; (800a6cc <tcp_handle_closepend+0x48>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a690:	e014      	b.n	800a6bc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	8b5b      	ldrh	r3, [r3, #26]
 800a69c:	f003 0308 	and.w	r3, r3, #8
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d009      	beq.n	800a6b8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	8b5b      	ldrh	r3, [r3, #26]
 800a6a8:	f023 0308 	bic.w	r3, r3, #8
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7fe fe8c 	bl	80093d0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1e7      	bne.n	800a692 <tcp_handle_closepend+0xe>
  }
}
 800a6c2:	bf00      	nop
 800a6c4:	bf00      	nop
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	2000ae68 	.word	0x2000ae68

0800a6d0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a6da:	2001      	movs	r0, #1
 800a6dc:	f7fd fb4e 	bl	8007d7c <memp_malloc>
 800a6e0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d126      	bne.n	800a736 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a6e8:	f7ff ffcc 	bl	800a684 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a6ec:	f7ff ff9a 	bl	800a624 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a6f0:	2001      	movs	r0, #1
 800a6f2:	f7fd fb43 	bl	8007d7c <memp_malloc>
 800a6f6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d11b      	bne.n	800a736 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a6fe:	2009      	movs	r0, #9
 800a700:	f7ff ff46 	bl	800a590 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a704:	2001      	movs	r0, #1
 800a706:	f7fd fb39 	bl	8007d7c <memp_malloc>
 800a70a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d111      	bne.n	800a736 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a712:	2008      	movs	r0, #8
 800a714:	f7ff ff3c 	bl	800a590 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a718:	2001      	movs	r0, #1
 800a71a:	f7fd fb2f 	bl	8007d7c <memp_malloc>
 800a71e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d107      	bne.n	800a736 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a726:	79fb      	ldrb	r3, [r7, #7]
 800a728:	4618      	mov	r0, r3
 800a72a:	f7ff fee3 	bl	800a4f4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a72e:	2001      	movs	r0, #1
 800a730:	f7fd fb24 	bl	8007d7c <memp_malloc>
 800a734:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d03f      	beq.n	800a7bc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a73c:	229c      	movs	r2, #156	; 0x9c
 800a73e:	2100      	movs	r1, #0
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f00a fa05 	bl	8014b50 <memset>
    pcb->prio = prio;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	79fa      	ldrb	r2, [r7, #7]
 800a74a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a752:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a75c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	22ff      	movs	r2, #255	; 0xff
 800a76a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a772:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2206      	movs	r2, #6
 800a778:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2206      	movs	r2, #6
 800a780:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a788:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2201      	movs	r2, #1
 800a78e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a792:	4b0d      	ldr	r3, [pc, #52]	; (800a7c8 <tcp_alloc+0xf8>)
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a79a:	4b0c      	ldr	r3, [pc, #48]	; (800a7cc <tcp_alloc+0xfc>)
 800a79c:	781a      	ldrb	r2, [r3, #0]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a7a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	4a08      	ldr	r2, [pc, #32]	; (800a7d0 <tcp_alloc+0x100>)
 800a7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	4a07      	ldr	r2, [pc, #28]	; (800a7d4 <tcp_alloc+0x104>)
 800a7b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	2000ae6c 	.word	0x2000ae6c
 800a7cc:	200008aa 	.word	0x200008aa
 800a7d0:	0800a489 	.word	0x0800a489
 800a7d4:	006ddd00 	.word	0x006ddd00

0800a7d8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800a7dc:	2040      	movs	r0, #64	; 0x40
 800a7de:	f7ff ff77 	bl	800a6d0 <tcp_alloc>
 800a7e2:	4603      	mov	r3, r0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d002      	beq.n	800a7fe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	683a      	ldr	r2, [r7, #0]
 800a7fc:	611a      	str	r2, [r3, #16]
  }
}
 800a7fe:	bf00      	nop
 800a800:	370c      	adds	r7, #12
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
	...

0800a80c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00e      	beq.n	800a83a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	7d1b      	ldrb	r3, [r3, #20]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d106      	bne.n	800a832 <tcp_recv+0x26>
 800a824:	4b07      	ldr	r3, [pc, #28]	; (800a844 <tcp_recv+0x38>)
 800a826:	f240 72df 	movw	r2, #2015	; 0x7df
 800a82a:	4907      	ldr	r1, [pc, #28]	; (800a848 <tcp_recv+0x3c>)
 800a82c:	4807      	ldr	r0, [pc, #28]	; (800a84c <tcp_recv+0x40>)
 800a82e:	f00a f839 	bl	80148a4 <iprintf>
    pcb->recv = recv;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	683a      	ldr	r2, [r7, #0]
 800a836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800a83a:	bf00      	nop
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	08017dc8 	.word	0x08017dc8
 800a848:	08018364 	.word	0x08018364
 800a84c:	08017e0c 	.word	0x08017e0c

0800a850 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00e      	beq.n	800a87e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	7d1b      	ldrb	r3, [r3, #20]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d106      	bne.n	800a876 <tcp_sent+0x26>
 800a868:	4b07      	ldr	r3, [pc, #28]	; (800a888 <tcp_sent+0x38>)
 800a86a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800a86e:	4907      	ldr	r1, [pc, #28]	; (800a88c <tcp_sent+0x3c>)
 800a870:	4807      	ldr	r0, [pc, #28]	; (800a890 <tcp_sent+0x40>)
 800a872:	f00a f817 	bl	80148a4 <iprintf>
    pcb->sent = sent;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	683a      	ldr	r2, [r7, #0]
 800a87a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800a87e:	bf00      	nop
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	08017dc8 	.word	0x08017dc8
 800a88c:	0801838c 	.word	0x0801838c
 800a890:	08017e0c 	.word	0x08017e0c

0800a894 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00e      	beq.n	800a8c2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	7d1b      	ldrb	r3, [r3, #20]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d106      	bne.n	800a8ba <tcp_err+0x26>
 800a8ac:	4b07      	ldr	r3, [pc, #28]	; (800a8cc <tcp_err+0x38>)
 800a8ae:	f640 020d 	movw	r2, #2061	; 0x80d
 800a8b2:	4907      	ldr	r1, [pc, #28]	; (800a8d0 <tcp_err+0x3c>)
 800a8b4:	4807      	ldr	r0, [pc, #28]	; (800a8d4 <tcp_err+0x40>)
 800a8b6:	f009 fff5 	bl	80148a4 <iprintf>
    pcb->errf = err;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	683a      	ldr	r2, [r7, #0]
 800a8be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800a8c2:	bf00      	nop
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	08017dc8 	.word	0x08017dc8
 800a8d0:	080183b4 	.word	0x080183b4
 800a8d4:	08017e0c 	.word	0x08017e0c

0800a8d8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d008      	beq.n	800a8fa <tcp_accept+0x22>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	7d1b      	ldrb	r3, [r3, #20]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d104      	bne.n	800a8fa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	619a      	str	r2, [r3, #24]
  }
}
 800a8fa:	bf00      	nop
 800a8fc:	3714      	adds	r7, #20
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
	...

0800a908 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	4613      	mov	r3, r2
 800a914:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d107      	bne.n	800a92c <tcp_poll+0x24>
 800a91c:	4b0e      	ldr	r3, [pc, #56]	; (800a958 <tcp_poll+0x50>)
 800a91e:	f640 023d 	movw	r2, #2109	; 0x83d
 800a922:	490e      	ldr	r1, [pc, #56]	; (800a95c <tcp_poll+0x54>)
 800a924:	480e      	ldr	r0, [pc, #56]	; (800a960 <tcp_poll+0x58>)
 800a926:	f009 ffbd 	bl	80148a4 <iprintf>
 800a92a:	e011      	b.n	800a950 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	7d1b      	ldrb	r3, [r3, #20]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d106      	bne.n	800a942 <tcp_poll+0x3a>
 800a934:	4b08      	ldr	r3, [pc, #32]	; (800a958 <tcp_poll+0x50>)
 800a936:	f640 023e 	movw	r2, #2110	; 0x83e
 800a93a:	490a      	ldr	r1, [pc, #40]	; (800a964 <tcp_poll+0x5c>)
 800a93c:	4808      	ldr	r0, [pc, #32]	; (800a960 <tcp_poll+0x58>)
 800a93e:	f009 ffb1 	bl	80148a4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	79fa      	ldrb	r2, [r7, #7]
 800a94e:	775a      	strb	r2, [r3, #29]
}
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	08017dc8 	.word	0x08017dc8
 800a95c:	080183dc 	.word	0x080183dc
 800a960:	08017e0c 	.word	0x08017e0c
 800a964:	080183f4 	.word	0x080183f4

0800a968 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d107      	bne.n	800a986 <tcp_pcb_purge+0x1e>
 800a976:	4b21      	ldr	r3, [pc, #132]	; (800a9fc <tcp_pcb_purge+0x94>)
 800a978:	f640 0251 	movw	r2, #2129	; 0x851
 800a97c:	4920      	ldr	r1, [pc, #128]	; (800aa00 <tcp_pcb_purge+0x98>)
 800a97e:	4821      	ldr	r0, [pc, #132]	; (800aa04 <tcp_pcb_purge+0x9c>)
 800a980:	f009 ff90 	bl	80148a4 <iprintf>
 800a984:	e037      	b.n	800a9f6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	7d1b      	ldrb	r3, [r3, #20]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d033      	beq.n	800a9f6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a992:	2b0a      	cmp	r3, #10
 800a994:	d02f      	beq.n	800a9f6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d02b      	beq.n	800a9f6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d007      	beq.n	800a9b6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fe f8cc 	bl	8008b48 <pbuf_free>
      pcb->refused_data = NULL;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d002      	beq.n	800a9c4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f986 	bl	800acd0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9ca:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7ff fce1 	bl	800a398 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff fcdc 	bl	800a398 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	66da      	str	r2, [r3, #108]	; 0x6c
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a9f6:	3708      	adds	r7, #8
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	08017dc8 	.word	0x08017dc8
 800aa00:	08018414 	.word	0x08018414
 800aa04:	08017e0c 	.word	0x08017e0c

0800aa08 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d106      	bne.n	800aa26 <tcp_pcb_remove+0x1e>
 800aa18:	4b3e      	ldr	r3, [pc, #248]	; (800ab14 <tcp_pcb_remove+0x10c>)
 800aa1a:	f640 0283 	movw	r2, #2179	; 0x883
 800aa1e:	493e      	ldr	r1, [pc, #248]	; (800ab18 <tcp_pcb_remove+0x110>)
 800aa20:	483e      	ldr	r0, [pc, #248]	; (800ab1c <tcp_pcb_remove+0x114>)
 800aa22:	f009 ff3f 	bl	80148a4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d106      	bne.n	800aa3a <tcp_pcb_remove+0x32>
 800aa2c:	4b39      	ldr	r3, [pc, #228]	; (800ab14 <tcp_pcb_remove+0x10c>)
 800aa2e:	f640 0284 	movw	r2, #2180	; 0x884
 800aa32:	493b      	ldr	r1, [pc, #236]	; (800ab20 <tcp_pcb_remove+0x118>)
 800aa34:	4839      	ldr	r0, [pc, #228]	; (800ab1c <tcp_pcb_remove+0x114>)
 800aa36:	f009 ff35 	bl	80148a4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d105      	bne.n	800aa50 <tcp_pcb_remove+0x48>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68da      	ldr	r2, [r3, #12]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	601a      	str	r2, [r3, #0]
 800aa4e:	e013      	b.n	800aa78 <tcp_pcb_remove+0x70>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	60fb      	str	r3, [r7, #12]
 800aa56:	e00c      	b.n	800aa72 <tcp_pcb_remove+0x6a>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d104      	bne.n	800aa6c <tcp_pcb_remove+0x64>
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	68da      	ldr	r2, [r3, #12]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	60da      	str	r2, [r3, #12]
 800aa6a:	e005      	b.n	800aa78 <tcp_pcb_remove+0x70>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	60fb      	str	r3, [r7, #12]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1ef      	bne.n	800aa58 <tcp_pcb_remove+0x50>
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800aa7e:	6838      	ldr	r0, [r7, #0]
 800aa80:	f7ff ff72 	bl	800a968 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	7d1b      	ldrb	r3, [r3, #20]
 800aa88:	2b0a      	cmp	r3, #10
 800aa8a:	d013      	beq.n	800aab4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d00f      	beq.n	800aab4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	8b5b      	ldrh	r3, [r3, #26]
 800aa98:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d009      	beq.n	800aab4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	8b5b      	ldrh	r3, [r3, #26]
 800aaa4:	f043 0302 	orr.w	r3, r3, #2
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800aaae:	6838      	ldr	r0, [r7, #0]
 800aab0:	f003 fbc6 	bl	800e240 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	7d1b      	ldrb	r3, [r3, #20]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d020      	beq.n	800aafe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d006      	beq.n	800aad2 <tcp_pcb_remove+0xca>
 800aac4:	4b13      	ldr	r3, [pc, #76]	; (800ab14 <tcp_pcb_remove+0x10c>)
 800aac6:	f640 0293 	movw	r2, #2195	; 0x893
 800aaca:	4916      	ldr	r1, [pc, #88]	; (800ab24 <tcp_pcb_remove+0x11c>)
 800aacc:	4813      	ldr	r0, [pc, #76]	; (800ab1c <tcp_pcb_remove+0x114>)
 800aace:	f009 fee9 	bl	80148a4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d006      	beq.n	800aae8 <tcp_pcb_remove+0xe0>
 800aada:	4b0e      	ldr	r3, [pc, #56]	; (800ab14 <tcp_pcb_remove+0x10c>)
 800aadc:	f640 0294 	movw	r2, #2196	; 0x894
 800aae0:	4911      	ldr	r1, [pc, #68]	; (800ab28 <tcp_pcb_remove+0x120>)
 800aae2:	480e      	ldr	r0, [pc, #56]	; (800ab1c <tcp_pcb_remove+0x114>)
 800aae4:	f009 fede 	bl	80148a4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d006      	beq.n	800aafe <tcp_pcb_remove+0xf6>
 800aaf0:	4b08      	ldr	r3, [pc, #32]	; (800ab14 <tcp_pcb_remove+0x10c>)
 800aaf2:	f640 0296 	movw	r2, #2198	; 0x896
 800aaf6:	490d      	ldr	r1, [pc, #52]	; (800ab2c <tcp_pcb_remove+0x124>)
 800aaf8:	4808      	ldr	r0, [pc, #32]	; (800ab1c <tcp_pcb_remove+0x114>)
 800aafa:	f009 fed3 	bl	80148a4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	2200      	movs	r2, #0
 800ab02:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	2200      	movs	r2, #0
 800ab08:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ab0a:	bf00      	nop
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	08017dc8 	.word	0x08017dc8
 800ab18:	08018430 	.word	0x08018430
 800ab1c:	08017e0c 	.word	0x08017e0c
 800ab20:	0801844c 	.word	0x0801844c
 800ab24:	0801846c 	.word	0x0801846c
 800ab28:	08018484 	.word	0x08018484
 800ab2c:	080184a0 	.word	0x080184a0

0800ab30 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d106      	bne.n	800ab4c <tcp_next_iss+0x1c>
 800ab3e:	4b0a      	ldr	r3, [pc, #40]	; (800ab68 <tcp_next_iss+0x38>)
 800ab40:	f640 02af 	movw	r2, #2223	; 0x8af
 800ab44:	4909      	ldr	r1, [pc, #36]	; (800ab6c <tcp_next_iss+0x3c>)
 800ab46:	480a      	ldr	r0, [pc, #40]	; (800ab70 <tcp_next_iss+0x40>)
 800ab48:	f009 feac 	bl	80148a4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ab4c:	4b09      	ldr	r3, [pc, #36]	; (800ab74 <tcp_next_iss+0x44>)
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	4b09      	ldr	r3, [pc, #36]	; (800ab78 <tcp_next_iss+0x48>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4413      	add	r3, r2
 800ab56:	4a07      	ldr	r2, [pc, #28]	; (800ab74 <tcp_next_iss+0x44>)
 800ab58:	6013      	str	r3, [r2, #0]
  return iss;
 800ab5a:	4b06      	ldr	r3, [pc, #24]	; (800ab74 <tcp_next_iss+0x44>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	08017dc8 	.word	0x08017dc8
 800ab6c:	080184b8 	.word	0x080184b8
 800ab70:	08017e0c 	.word	0x08017e0c
 800ab74:	20000024 	.word	0x20000024
 800ab78:	2000ae6c 	.word	0x2000ae6c

0800ab7c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
 800ab88:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d106      	bne.n	800ab9e <tcp_eff_send_mss_netif+0x22>
 800ab90:	4b14      	ldr	r3, [pc, #80]	; (800abe4 <tcp_eff_send_mss_netif+0x68>)
 800ab92:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ab96:	4914      	ldr	r1, [pc, #80]	; (800abe8 <tcp_eff_send_mss_netif+0x6c>)
 800ab98:	4814      	ldr	r0, [pc, #80]	; (800abec <tcp_eff_send_mss_netif+0x70>)
 800ab9a:	f009 fe83 	bl	80148a4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800aba4:	89fb      	ldrh	r3, [r7, #14]
 800aba6:	e019      	b.n	800abdc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800abac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800abae:	8afb      	ldrh	r3, [r7, #22]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d012      	beq.n	800abda <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800abb4:	2328      	movs	r3, #40	; 0x28
 800abb6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800abb8:	8afa      	ldrh	r2, [r7, #22]
 800abba:	8abb      	ldrh	r3, [r7, #20]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d904      	bls.n	800abca <tcp_eff_send_mss_netif+0x4e>
 800abc0:	8afa      	ldrh	r2, [r7, #22]
 800abc2:	8abb      	ldrh	r3, [r7, #20]
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	e000      	b.n	800abcc <tcp_eff_send_mss_netif+0x50>
 800abca:	2300      	movs	r3, #0
 800abcc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800abce:	8a7a      	ldrh	r2, [r7, #18]
 800abd0:	89fb      	ldrh	r3, [r7, #14]
 800abd2:	4293      	cmp	r3, r2
 800abd4:	bf28      	it	cs
 800abd6:	4613      	movcs	r3, r2
 800abd8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800abda:	89fb      	ldrh	r3, [r7, #14]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3718      	adds	r7, #24
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	08017dc8 	.word	0x08017dc8
 800abe8:	080184d4 	.word	0x080184d4
 800abec:	08017e0c 	.word	0x08017e0c

0800abf0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d119      	bne.n	800ac38 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ac04:	4b10      	ldr	r3, [pc, #64]	; (800ac48 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ac06:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ac0a:	4910      	ldr	r1, [pc, #64]	; (800ac4c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ac0c:	4810      	ldr	r0, [pc, #64]	; (800ac50 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ac0e:	f009 fe49 	bl	80148a4 <iprintf>

  while (pcb != NULL) {
 800ac12:	e011      	b.n	800ac38 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d108      	bne.n	800ac32 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f7fe fd26 	bl	8009678 <tcp_abort>
      pcb = next;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	60fb      	str	r3, [r7, #12]
 800ac30:	e002      	b.n	800ac38 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1ea      	bne.n	800ac14 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ac3e:	bf00      	nop
 800ac40:	bf00      	nop
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	08017dc8 	.word	0x08017dc8
 800ac4c:	080184fc 	.word	0x080184fc
 800ac50:	08017e0c 	.word	0x08017e0c

0800ac54 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d02a      	beq.n	800acba <tcp_netif_ip_addr_changed+0x66>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d026      	beq.n	800acba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ac6c:	4b15      	ldr	r3, [pc, #84]	; (800acc4 <tcp_netif_ip_addr_changed+0x70>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4619      	mov	r1, r3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff ffbc 	bl	800abf0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ac78:	4b13      	ldr	r3, [pc, #76]	; (800acc8 <tcp_netif_ip_addr_changed+0x74>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7ff ffb6 	bl	800abf0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d017      	beq.n	800acba <tcp_netif_ip_addr_changed+0x66>
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d013      	beq.n	800acba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ac92:	4b0e      	ldr	r3, [pc, #56]	; (800accc <tcp_netif_ip_addr_changed+0x78>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	60fb      	str	r3, [r7, #12]
 800ac98:	e00c      	b.n	800acb4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d103      	bne.n	800acae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	60fb      	str	r3, [r7, #12]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1ef      	bne.n	800ac9a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800acba:	bf00      	nop
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	2000ae68 	.word	0x2000ae68
 800acc8:	2000ae74 	.word	0x2000ae74
 800accc:	2000ae70 	.word	0x2000ae70

0800acd0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d007      	beq.n	800acf0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7ff fb57 	bl	800a398 <tcp_segs_free>
    pcb->ooseq = NULL;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800acf0:	bf00      	nop
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800acf8:	b590      	push	{r4, r7, lr}
 800acfa:	b08d      	sub	sp, #52	; 0x34
 800acfc:	af04      	add	r7, sp, #16
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d105      	bne.n	800ad14 <tcp_input+0x1c>
 800ad08:	4b9b      	ldr	r3, [pc, #620]	; (800af78 <tcp_input+0x280>)
 800ad0a:	2283      	movs	r2, #131	; 0x83
 800ad0c:	499b      	ldr	r1, [pc, #620]	; (800af7c <tcp_input+0x284>)
 800ad0e:	489c      	ldr	r0, [pc, #624]	; (800af80 <tcp_input+0x288>)
 800ad10:	f009 fdc8 	bl	80148a4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	4a9a      	ldr	r2, [pc, #616]	; (800af84 <tcp_input+0x28c>)
 800ad1a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	895b      	ldrh	r3, [r3, #10]
 800ad20:	2b13      	cmp	r3, #19
 800ad22:	f240 83d1 	bls.w	800b4c8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ad26:	4b98      	ldr	r3, [pc, #608]	; (800af88 <tcp_input+0x290>)
 800ad28:	695b      	ldr	r3, [r3, #20]
 800ad2a:	4a97      	ldr	r2, [pc, #604]	; (800af88 <tcp_input+0x290>)
 800ad2c:	6812      	ldr	r2, [r2, #0]
 800ad2e:	4611      	mov	r1, r2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f006 f86f 	bl	8010e14 <ip4_addr_isbroadcast_u32>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f040 83c7 	bne.w	800b4cc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ad3e:	4b92      	ldr	r3, [pc, #584]	; (800af88 <tcp_input+0x290>)
 800ad40:	695b      	ldr	r3, [r3, #20]
 800ad42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ad46:	2be0      	cmp	r3, #224	; 0xe0
 800ad48:	f000 83c0 	beq.w	800b4cc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ad4c:	4b8d      	ldr	r3, [pc, #564]	; (800af84 <tcp_input+0x28c>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	899b      	ldrh	r3, [r3, #12]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7fc fb99 	bl	800748c <lwip_htons>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	0b1b      	lsrs	r3, r3, #12
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ad66:	7cbb      	ldrb	r3, [r7, #18]
 800ad68:	2b13      	cmp	r3, #19
 800ad6a:	f240 83b1 	bls.w	800b4d0 <tcp_input+0x7d8>
 800ad6e:	7cbb      	ldrb	r3, [r7, #18]
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	891b      	ldrh	r3, [r3, #8]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	f200 83aa 	bhi.w	800b4d0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ad7c:	7cbb      	ldrb	r3, [r7, #18]
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	3b14      	subs	r3, #20
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	4b81      	ldr	r3, [pc, #516]	; (800af8c <tcp_input+0x294>)
 800ad86:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ad88:	4b81      	ldr	r3, [pc, #516]	; (800af90 <tcp_input+0x298>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	895a      	ldrh	r2, [r3, #10]
 800ad92:	7cbb      	ldrb	r3, [r7, #18]
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d309      	bcc.n	800adae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ad9a:	4b7c      	ldr	r3, [pc, #496]	; (800af8c <tcp_input+0x294>)
 800ad9c:	881a      	ldrh	r2, [r3, #0]
 800ad9e:	4b7d      	ldr	r3, [pc, #500]	; (800af94 <tcp_input+0x29c>)
 800ada0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ada2:	7cbb      	ldrb	r3, [r7, #18]
 800ada4:	4619      	mov	r1, r3
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f7fd fe48 	bl	8008a3c <pbuf_remove_header>
 800adac:	e04e      	b.n	800ae4c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d105      	bne.n	800adc2 <tcp_input+0xca>
 800adb6:	4b70      	ldr	r3, [pc, #448]	; (800af78 <tcp_input+0x280>)
 800adb8:	22c2      	movs	r2, #194	; 0xc2
 800adba:	4977      	ldr	r1, [pc, #476]	; (800af98 <tcp_input+0x2a0>)
 800adbc:	4870      	ldr	r0, [pc, #448]	; (800af80 <tcp_input+0x288>)
 800adbe:	f009 fd71 	bl	80148a4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800adc2:	2114      	movs	r1, #20
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f7fd fe39 	bl	8008a3c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	895a      	ldrh	r2, [r3, #10]
 800adce:	4b71      	ldr	r3, [pc, #452]	; (800af94 <tcp_input+0x29c>)
 800add0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800add2:	4b6e      	ldr	r3, [pc, #440]	; (800af8c <tcp_input+0x294>)
 800add4:	881a      	ldrh	r2, [r3, #0]
 800add6:	4b6f      	ldr	r3, [pc, #444]	; (800af94 <tcp_input+0x29c>)
 800add8:	881b      	ldrh	r3, [r3, #0]
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800adde:	4b6d      	ldr	r3, [pc, #436]	; (800af94 <tcp_input+0x29c>)
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	4619      	mov	r1, r3
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7fd fe29 	bl	8008a3c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	895b      	ldrh	r3, [r3, #10]
 800adf0:	8a3a      	ldrh	r2, [r7, #16]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	f200 836e 	bhi.w	800b4d4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	4a64      	ldr	r2, [pc, #400]	; (800af90 <tcp_input+0x298>)
 800ae00:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	8a3a      	ldrh	r2, [r7, #16]
 800ae08:	4611      	mov	r1, r2
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fd fe16 	bl	8008a3c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	891a      	ldrh	r2, [r3, #8]
 800ae14:	8a3b      	ldrh	r3, [r7, #16]
 800ae16:	1ad3      	subs	r3, r2, r3
 800ae18:	b29a      	uxth	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	895b      	ldrh	r3, [r3, #10]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d005      	beq.n	800ae32 <tcp_input+0x13a>
 800ae26:	4b54      	ldr	r3, [pc, #336]	; (800af78 <tcp_input+0x280>)
 800ae28:	22df      	movs	r2, #223	; 0xdf
 800ae2a:	495c      	ldr	r1, [pc, #368]	; (800af9c <tcp_input+0x2a4>)
 800ae2c:	4854      	ldr	r0, [pc, #336]	; (800af80 <tcp_input+0x288>)
 800ae2e:	f009 fd39 	bl	80148a4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	891a      	ldrh	r2, [r3, #8]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	891b      	ldrh	r3, [r3, #8]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d005      	beq.n	800ae4c <tcp_input+0x154>
 800ae40:	4b4d      	ldr	r3, [pc, #308]	; (800af78 <tcp_input+0x280>)
 800ae42:	22e0      	movs	r2, #224	; 0xe0
 800ae44:	4956      	ldr	r1, [pc, #344]	; (800afa0 <tcp_input+0x2a8>)
 800ae46:	484e      	ldr	r0, [pc, #312]	; (800af80 <tcp_input+0x288>)
 800ae48:	f009 fd2c 	bl	80148a4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ae4c:	4b4d      	ldr	r3, [pc, #308]	; (800af84 <tcp_input+0x28c>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	881b      	ldrh	r3, [r3, #0]
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	4a4b      	ldr	r2, [pc, #300]	; (800af84 <tcp_input+0x28c>)
 800ae56:	6814      	ldr	r4, [r2, #0]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7fc fb17 	bl	800748c <lwip_htons>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ae62:	4b48      	ldr	r3, [pc, #288]	; (800af84 <tcp_input+0x28c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	885b      	ldrh	r3, [r3, #2]
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	4a46      	ldr	r2, [pc, #280]	; (800af84 <tcp_input+0x28c>)
 800ae6c:	6814      	ldr	r4, [r2, #0]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fc fb0c 	bl	800748c <lwip_htons>
 800ae74:	4603      	mov	r3, r0
 800ae76:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ae78:	4b42      	ldr	r3, [pc, #264]	; (800af84 <tcp_input+0x28c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	4a41      	ldr	r2, [pc, #260]	; (800af84 <tcp_input+0x28c>)
 800ae80:	6814      	ldr	r4, [r2, #0]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fc fb17 	bl	80074b6 <lwip_htonl>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	6063      	str	r3, [r4, #4]
 800ae8c:	6863      	ldr	r3, [r4, #4]
 800ae8e:	4a45      	ldr	r2, [pc, #276]	; (800afa4 <tcp_input+0x2ac>)
 800ae90:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ae92:	4b3c      	ldr	r3, [pc, #240]	; (800af84 <tcp_input+0x28c>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	4a3a      	ldr	r2, [pc, #232]	; (800af84 <tcp_input+0x28c>)
 800ae9a:	6814      	ldr	r4, [r2, #0]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7fc fb0a 	bl	80074b6 <lwip_htonl>
 800aea2:	4603      	mov	r3, r0
 800aea4:	60a3      	str	r3, [r4, #8]
 800aea6:	68a3      	ldr	r3, [r4, #8]
 800aea8:	4a3f      	ldr	r2, [pc, #252]	; (800afa8 <tcp_input+0x2b0>)
 800aeaa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800aeac:	4b35      	ldr	r3, [pc, #212]	; (800af84 <tcp_input+0x28c>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	89db      	ldrh	r3, [r3, #14]
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	4a33      	ldr	r2, [pc, #204]	; (800af84 <tcp_input+0x28c>)
 800aeb6:	6814      	ldr	r4, [r2, #0]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fc fae7 	bl	800748c <lwip_htons>
 800aebe:	4603      	mov	r3, r0
 800aec0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800aec2:	4b30      	ldr	r3, [pc, #192]	; (800af84 <tcp_input+0x28c>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	899b      	ldrh	r3, [r3, #12]
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7fc fade 	bl	800748c <lwip_htons>
 800aed0:	4603      	mov	r3, r0
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aed8:	b2da      	uxtb	r2, r3
 800aeda:	4b34      	ldr	r3, [pc, #208]	; (800afac <tcp_input+0x2b4>)
 800aedc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	891a      	ldrh	r2, [r3, #8]
 800aee2:	4b33      	ldr	r3, [pc, #204]	; (800afb0 <tcp_input+0x2b8>)
 800aee4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800aee6:	4b31      	ldr	r3, [pc, #196]	; (800afac <tcp_input+0x2b4>)
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	f003 0303 	and.w	r3, r3, #3
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00c      	beq.n	800af0c <tcp_input+0x214>
    tcplen++;
 800aef2:	4b2f      	ldr	r3, [pc, #188]	; (800afb0 <tcp_input+0x2b8>)
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	3301      	adds	r3, #1
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	4b2d      	ldr	r3, [pc, #180]	; (800afb0 <tcp_input+0x2b8>)
 800aefc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	891a      	ldrh	r2, [r3, #8]
 800af02:	4b2b      	ldr	r3, [pc, #172]	; (800afb0 <tcp_input+0x2b8>)
 800af04:	881b      	ldrh	r3, [r3, #0]
 800af06:	429a      	cmp	r2, r3
 800af08:	f200 82e6 	bhi.w	800b4d8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800af0c:	2300      	movs	r3, #0
 800af0e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800af10:	4b28      	ldr	r3, [pc, #160]	; (800afb4 <tcp_input+0x2bc>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	61fb      	str	r3, [r7, #28]
 800af16:	e09d      	b.n	800b054 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	7d1b      	ldrb	r3, [r3, #20]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d105      	bne.n	800af2c <tcp_input+0x234>
 800af20:	4b15      	ldr	r3, [pc, #84]	; (800af78 <tcp_input+0x280>)
 800af22:	22fb      	movs	r2, #251	; 0xfb
 800af24:	4924      	ldr	r1, [pc, #144]	; (800afb8 <tcp_input+0x2c0>)
 800af26:	4816      	ldr	r0, [pc, #88]	; (800af80 <tcp_input+0x288>)
 800af28:	f009 fcbc 	bl	80148a4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	7d1b      	ldrb	r3, [r3, #20]
 800af30:	2b0a      	cmp	r3, #10
 800af32:	d105      	bne.n	800af40 <tcp_input+0x248>
 800af34:	4b10      	ldr	r3, [pc, #64]	; (800af78 <tcp_input+0x280>)
 800af36:	22fc      	movs	r2, #252	; 0xfc
 800af38:	4920      	ldr	r1, [pc, #128]	; (800afbc <tcp_input+0x2c4>)
 800af3a:	4811      	ldr	r0, [pc, #68]	; (800af80 <tcp_input+0x288>)
 800af3c:	f009 fcb2 	bl	80148a4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	7d1b      	ldrb	r3, [r3, #20]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d105      	bne.n	800af54 <tcp_input+0x25c>
 800af48:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <tcp_input+0x280>)
 800af4a:	22fd      	movs	r2, #253	; 0xfd
 800af4c:	491c      	ldr	r1, [pc, #112]	; (800afc0 <tcp_input+0x2c8>)
 800af4e:	480c      	ldr	r0, [pc, #48]	; (800af80 <tcp_input+0x288>)
 800af50:	f009 fca8 	bl	80148a4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	7a1b      	ldrb	r3, [r3, #8]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d033      	beq.n	800afc4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	7a1a      	ldrb	r2, [r3, #8]
 800af60:	4b09      	ldr	r3, [pc, #36]	; (800af88 <tcp_input+0x290>)
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af68:	3301      	adds	r3, #1
 800af6a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d029      	beq.n	800afc4 <tcp_input+0x2cc>
      prev = pcb;
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	61bb      	str	r3, [r7, #24]
      continue;
 800af74:	e06b      	b.n	800b04e <tcp_input+0x356>
 800af76:	bf00      	nop
 800af78:	08018530 	.word	0x08018530
 800af7c:	08018564 	.word	0x08018564
 800af80:	0801857c 	.word	0x0801857c
 800af84:	200008bc 	.word	0x200008bc
 800af88:	20005764 	.word	0x20005764
 800af8c:	200008c0 	.word	0x200008c0
 800af90:	200008c4 	.word	0x200008c4
 800af94:	200008c2 	.word	0x200008c2
 800af98:	080185a4 	.word	0x080185a4
 800af9c:	080185b4 	.word	0x080185b4
 800afa0:	080185c0 	.word	0x080185c0
 800afa4:	200008cc 	.word	0x200008cc
 800afa8:	200008d0 	.word	0x200008d0
 800afac:	200008d8 	.word	0x200008d8
 800afb0:	200008d6 	.word	0x200008d6
 800afb4:	2000ae68 	.word	0x2000ae68
 800afb8:	080185e0 	.word	0x080185e0
 800afbc:	08018608 	.word	0x08018608
 800afc0:	08018634 	.word	0x08018634
    }

    if (pcb->remote_port == tcphdr->src &&
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	8b1a      	ldrh	r2, [r3, #24]
 800afc8:	4b72      	ldr	r3, [pc, #456]	; (800b194 <tcp_input+0x49c>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	b29b      	uxth	r3, r3
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d13a      	bne.n	800b04a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	8ada      	ldrh	r2, [r3, #22]
 800afd8:	4b6e      	ldr	r3, [pc, #440]	; (800b194 <tcp_input+0x49c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	885b      	ldrh	r3, [r3, #2]
 800afde:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d132      	bne.n	800b04a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	685a      	ldr	r2, [r3, #4]
 800afe8:	4b6b      	ldr	r3, [pc, #428]	; (800b198 <tcp_input+0x4a0>)
 800afea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800afec:	429a      	cmp	r2, r3
 800afee:	d12c      	bne.n	800b04a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	4b68      	ldr	r3, [pc, #416]	; (800b198 <tcp_input+0x4a0>)
 800aff6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aff8:	429a      	cmp	r2, r3
 800affa:	d126      	bne.n	800b04a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	69fa      	ldr	r2, [r7, #28]
 800b002:	429a      	cmp	r2, r3
 800b004:	d106      	bne.n	800b014 <tcp_input+0x31c>
 800b006:	4b65      	ldr	r3, [pc, #404]	; (800b19c <tcp_input+0x4a4>)
 800b008:	f240 120d 	movw	r2, #269	; 0x10d
 800b00c:	4964      	ldr	r1, [pc, #400]	; (800b1a0 <tcp_input+0x4a8>)
 800b00e:	4865      	ldr	r0, [pc, #404]	; (800b1a4 <tcp_input+0x4ac>)
 800b010:	f009 fc48 	bl	80148a4 <iprintf>
      if (prev != NULL) {
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00a      	beq.n	800b030 <tcp_input+0x338>
        prev->next = pcb->next;
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b022:	4b61      	ldr	r3, [pc, #388]	; (800b1a8 <tcp_input+0x4b0>)
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b02a:	4a5f      	ldr	r2, [pc, #380]	; (800b1a8 <tcp_input+0x4b0>)
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	69fa      	ldr	r2, [r7, #28]
 800b036:	429a      	cmp	r2, r3
 800b038:	d111      	bne.n	800b05e <tcp_input+0x366>
 800b03a:	4b58      	ldr	r3, [pc, #352]	; (800b19c <tcp_input+0x4a4>)
 800b03c:	f240 1215 	movw	r2, #277	; 0x115
 800b040:	495a      	ldr	r1, [pc, #360]	; (800b1ac <tcp_input+0x4b4>)
 800b042:	4858      	ldr	r0, [pc, #352]	; (800b1a4 <tcp_input+0x4ac>)
 800b044:	f009 fc2e 	bl	80148a4 <iprintf>
      break;
 800b048:	e009      	b.n	800b05e <tcp_input+0x366>
    }
    prev = pcb;
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	61fb      	str	r3, [r7, #28]
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	2b00      	cmp	r3, #0
 800b058:	f47f af5e 	bne.w	800af18 <tcp_input+0x220>
 800b05c:	e000      	b.n	800b060 <tcp_input+0x368>
      break;
 800b05e:	bf00      	nop
  }

  if (pcb == NULL) {
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	2b00      	cmp	r3, #0
 800b064:	f040 80aa 	bne.w	800b1bc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b068:	4b51      	ldr	r3, [pc, #324]	; (800b1b0 <tcp_input+0x4b8>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	61fb      	str	r3, [r7, #28]
 800b06e:	e03f      	b.n	800b0f0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	7d1b      	ldrb	r3, [r3, #20]
 800b074:	2b0a      	cmp	r3, #10
 800b076:	d006      	beq.n	800b086 <tcp_input+0x38e>
 800b078:	4b48      	ldr	r3, [pc, #288]	; (800b19c <tcp_input+0x4a4>)
 800b07a:	f240 121f 	movw	r2, #287	; 0x11f
 800b07e:	494d      	ldr	r1, [pc, #308]	; (800b1b4 <tcp_input+0x4bc>)
 800b080:	4848      	ldr	r0, [pc, #288]	; (800b1a4 <tcp_input+0x4ac>)
 800b082:	f009 fc0f 	bl	80148a4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	7a1b      	ldrb	r3, [r3, #8]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d009      	beq.n	800b0a2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	7a1a      	ldrb	r2, [r3, #8]
 800b092:	4b41      	ldr	r3, [pc, #260]	; (800b198 <tcp_input+0x4a0>)
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b09a:	3301      	adds	r3, #1
 800b09c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d122      	bne.n	800b0e8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	8b1a      	ldrh	r2, [r3, #24]
 800b0a6:	4b3b      	ldr	r3, [pc, #236]	; (800b194 <tcp_input+0x49c>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	881b      	ldrh	r3, [r3, #0]
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d11b      	bne.n	800b0ea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	8ada      	ldrh	r2, [r3, #22]
 800b0b6:	4b37      	ldr	r3, [pc, #220]	; (800b194 <tcp_input+0x49c>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	885b      	ldrh	r3, [r3, #2]
 800b0bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d113      	bne.n	800b0ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	685a      	ldr	r2, [r3, #4]
 800b0c6:	4b34      	ldr	r3, [pc, #208]	; (800b198 <tcp_input+0x4a0>)
 800b0c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d10d      	bne.n	800b0ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	4b31      	ldr	r3, [pc, #196]	; (800b198 <tcp_input+0x4a0>)
 800b0d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d107      	bne.n	800b0ea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b0da:	69f8      	ldr	r0, [r7, #28]
 800b0dc:	f000 fb56 	bl	800b78c <tcp_timewait_input>
        }
        pbuf_free(p);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7fd fd31 	bl	8008b48 <pbuf_free>
        return;
 800b0e6:	e1fd      	b.n	800b4e4 <tcp_input+0x7ec>
        continue;
 800b0e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	61fb      	str	r3, [r7, #28]
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d1bc      	bne.n	800b070 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b0fa:	4b2f      	ldr	r3, [pc, #188]	; (800b1b8 <tcp_input+0x4c0>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	617b      	str	r3, [r7, #20]
 800b100:	e02a      	b.n	800b158 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	7a1b      	ldrb	r3, [r3, #8]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00c      	beq.n	800b124 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	7a1a      	ldrb	r2, [r3, #8]
 800b10e:	4b22      	ldr	r3, [pc, #136]	; (800b198 <tcp_input+0x4a0>)
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b116:	3301      	adds	r3, #1
 800b118:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d002      	beq.n	800b124 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	61bb      	str	r3, [r7, #24]
        continue;
 800b122:	e016      	b.n	800b152 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	8ada      	ldrh	r2, [r3, #22]
 800b128:	4b1a      	ldr	r3, [pc, #104]	; (800b194 <tcp_input+0x49c>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	885b      	ldrh	r3, [r3, #2]
 800b12e:	b29b      	uxth	r3, r3
 800b130:	429a      	cmp	r2, r3
 800b132:	d10c      	bne.n	800b14e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	4b17      	ldr	r3, [pc, #92]	; (800b198 <tcp_input+0x4a0>)
 800b13a:	695b      	ldr	r3, [r3, #20]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d00f      	beq.n	800b160 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00d      	beq.n	800b162 <tcp_input+0x46a>
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d009      	beq.n	800b162 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	617b      	str	r3, [r7, #20]
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1d1      	bne.n	800b102 <tcp_input+0x40a>
 800b15e:	e000      	b.n	800b162 <tcp_input+0x46a>
            break;
 800b160:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d029      	beq.n	800b1bc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00a      	beq.n	800b184 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	68da      	ldr	r2, [r3, #12]
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b176:	4b10      	ldr	r3, [pc, #64]	; (800b1b8 <tcp_input+0x4c0>)
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b17e:	4a0e      	ldr	r2, [pc, #56]	; (800b1b8 <tcp_input+0x4c0>)
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b184:	6978      	ldr	r0, [r7, #20]
 800b186:	f000 fa03 	bl	800b590 <tcp_listen_input>
      }
      pbuf_free(p);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7fd fcdc 	bl	8008b48 <pbuf_free>
      return;
 800b190:	e1a8      	b.n	800b4e4 <tcp_input+0x7ec>
 800b192:	bf00      	nop
 800b194:	200008bc 	.word	0x200008bc
 800b198:	20005764 	.word	0x20005764
 800b19c:	08018530 	.word	0x08018530
 800b1a0:	0801865c 	.word	0x0801865c
 800b1a4:	0801857c 	.word	0x0801857c
 800b1a8:	2000ae68 	.word	0x2000ae68
 800b1ac:	08018688 	.word	0x08018688
 800b1b0:	2000ae78 	.word	0x2000ae78
 800b1b4:	080186b4 	.word	0x080186b4
 800b1b8:	2000ae70 	.word	0x2000ae70
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f000 8158 	beq.w	800b474 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b1c4:	4b95      	ldr	r3, [pc, #596]	; (800b41c <tcp_input+0x724>)
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	891a      	ldrh	r2, [r3, #8]
 800b1ce:	4b93      	ldr	r3, [pc, #588]	; (800b41c <tcp_input+0x724>)
 800b1d0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b1d2:	4a92      	ldr	r2, [pc, #584]	; (800b41c <tcp_input+0x724>)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b1d8:	4b91      	ldr	r3, [pc, #580]	; (800b420 <tcp_input+0x728>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a8f      	ldr	r2, [pc, #572]	; (800b41c <tcp_input+0x724>)
 800b1de:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b1e0:	4b90      	ldr	r3, [pc, #576]	; (800b424 <tcp_input+0x72c>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b1e6:	4b90      	ldr	r3, [pc, #576]	; (800b428 <tcp_input+0x730>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b1ec:	4b8f      	ldr	r3, [pc, #572]	; (800b42c <tcp_input+0x734>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b1f2:	4b8f      	ldr	r3, [pc, #572]	; (800b430 <tcp_input+0x738>)
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	f003 0308 	and.w	r3, r3, #8
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d006      	beq.n	800b20c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	7b5b      	ldrb	r3, [r3, #13]
 800b202:	f043 0301 	orr.w	r3, r3, #1
 800b206:	b2da      	uxtb	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b210:	2b00      	cmp	r3, #0
 800b212:	d017      	beq.n	800b244 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b214:	69f8      	ldr	r0, [r7, #28]
 800b216:	f7ff f843 	bl	800a2a0 <tcp_process_refused_data>
 800b21a:	4603      	mov	r3, r0
 800b21c:	f113 0f0d 	cmn.w	r3, #13
 800b220:	d007      	beq.n	800b232 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00c      	beq.n	800b244 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b22a:	4b82      	ldr	r3, [pc, #520]	; (800b434 <tcp_input+0x73c>)
 800b22c:	881b      	ldrh	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d008      	beq.n	800b244 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b236:	2b00      	cmp	r3, #0
 800b238:	f040 80e3 	bne.w	800b402 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b23c:	69f8      	ldr	r0, [r7, #28]
 800b23e:	f003 fe05 	bl	800ee4c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b242:	e0de      	b.n	800b402 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b244:	4a7c      	ldr	r2, [pc, #496]	; (800b438 <tcp_input+0x740>)
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b24a:	69f8      	ldr	r0, [r7, #28]
 800b24c:	f000 fb18 	bl	800b880 <tcp_process>
 800b250:	4603      	mov	r3, r0
 800b252:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b254:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b258:	f113 0f0d 	cmn.w	r3, #13
 800b25c:	f000 80d3 	beq.w	800b406 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b260:	4b71      	ldr	r3, [pc, #452]	; (800b428 <tcp_input+0x730>)
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	f003 0308 	and.w	r3, r3, #8
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d015      	beq.n	800b298 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b272:	2b00      	cmp	r3, #0
 800b274:	d008      	beq.n	800b288 <tcp_input+0x590>
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b27c:	69fa      	ldr	r2, [r7, #28]
 800b27e:	6912      	ldr	r2, [r2, #16]
 800b280:	f06f 010d 	mvn.w	r1, #13
 800b284:	4610      	mov	r0, r2
 800b286:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b288:	69f9      	ldr	r1, [r7, #28]
 800b28a:	486c      	ldr	r0, [pc, #432]	; (800b43c <tcp_input+0x744>)
 800b28c:	f7ff fbbc 	bl	800aa08 <tcp_pcb_remove>
        tcp_free(pcb);
 800b290:	69f8      	ldr	r0, [r7, #28]
 800b292:	f7fd ff09 	bl	80090a8 <tcp_free>
 800b296:	e0da      	b.n	800b44e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b298:	2300      	movs	r3, #0
 800b29a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b29c:	4b63      	ldr	r3, [pc, #396]	; (800b42c <tcp_input+0x734>)
 800b29e:	881b      	ldrh	r3, [r3, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d01d      	beq.n	800b2e0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b2a4:	4b61      	ldr	r3, [pc, #388]	; (800b42c <tcp_input+0x734>)
 800b2a6:	881b      	ldrh	r3, [r3, #0]
 800b2a8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00a      	beq.n	800b2ca <tcp_input+0x5d2>
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2ba:	69fa      	ldr	r2, [r7, #28]
 800b2bc:	6910      	ldr	r0, [r2, #16]
 800b2be:	89fa      	ldrh	r2, [r7, #14]
 800b2c0:	69f9      	ldr	r1, [r7, #28]
 800b2c2:	4798      	blx	r3
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	74fb      	strb	r3, [r7, #19]
 800b2c8:	e001      	b.n	800b2ce <tcp_input+0x5d6>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b2ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b2d2:	f113 0f0d 	cmn.w	r3, #13
 800b2d6:	f000 8098 	beq.w	800b40a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b2da:	4b54      	ldr	r3, [pc, #336]	; (800b42c <tcp_input+0x734>)
 800b2dc:	2200      	movs	r2, #0
 800b2de:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b2e0:	69f8      	ldr	r0, [r7, #28]
 800b2e2:	f000 f915 	bl	800b510 <tcp_input_delayed_close>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f040 8090 	bne.w	800b40e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b2ee:	4b4d      	ldr	r3, [pc, #308]	; (800b424 <tcp_input+0x72c>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d041      	beq.n	800b37a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d006      	beq.n	800b30c <tcp_input+0x614>
 800b2fe:	4b50      	ldr	r3, [pc, #320]	; (800b440 <tcp_input+0x748>)
 800b300:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b304:	494f      	ldr	r1, [pc, #316]	; (800b444 <tcp_input+0x74c>)
 800b306:	4850      	ldr	r0, [pc, #320]	; (800b448 <tcp_input+0x750>)
 800b308:	f009 facc 	bl	80148a4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	8b5b      	ldrh	r3, [r3, #26]
 800b310:	f003 0310 	and.w	r3, r3, #16
 800b314:	2b00      	cmp	r3, #0
 800b316:	d008      	beq.n	800b32a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b318:	4b42      	ldr	r3, [pc, #264]	; (800b424 <tcp_input+0x72c>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fd fc13 	bl	8008b48 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b322:	69f8      	ldr	r0, [r7, #28]
 800b324:	f7fe f9a8 	bl	8009678 <tcp_abort>
            goto aborted;
 800b328:	e091      	b.n	800b44e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00c      	beq.n	800b34e <tcp_input+0x656>
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	6918      	ldr	r0, [r3, #16]
 800b33e:	4b39      	ldr	r3, [pc, #228]	; (800b424 <tcp_input+0x72c>)
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	2300      	movs	r3, #0
 800b344:	69f9      	ldr	r1, [r7, #28]
 800b346:	47a0      	blx	r4
 800b348:	4603      	mov	r3, r0
 800b34a:	74fb      	strb	r3, [r7, #19]
 800b34c:	e008      	b.n	800b360 <tcp_input+0x668>
 800b34e:	4b35      	ldr	r3, [pc, #212]	; (800b424 <tcp_input+0x72c>)
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	2300      	movs	r3, #0
 800b354:	69f9      	ldr	r1, [r7, #28]
 800b356:	2000      	movs	r0, #0
 800b358:	f7ff f896 	bl	800a488 <tcp_recv_null>
 800b35c:	4603      	mov	r3, r0
 800b35e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b360:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b364:	f113 0f0d 	cmn.w	r3, #13
 800b368:	d053      	beq.n	800b412 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b36a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d003      	beq.n	800b37a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b372:	4b2c      	ldr	r3, [pc, #176]	; (800b424 <tcp_input+0x72c>)
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b37a:	4b2b      	ldr	r3, [pc, #172]	; (800b428 <tcp_input+0x730>)
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	f003 0320 	and.w	r3, r3, #32
 800b382:	2b00      	cmp	r3, #0
 800b384:	d030      	beq.n	800b3e8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d009      	beq.n	800b3a2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b392:	7b5a      	ldrb	r2, [r3, #13]
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b398:	f042 0220 	orr.w	r2, r2, #32
 800b39c:	b2d2      	uxtb	r2, r2
 800b39e:	735a      	strb	r2, [r3, #13]
 800b3a0:	e022      	b.n	800b3e8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b3aa:	d005      	beq.n	800b3b8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00b      	beq.n	800b3da <tcp_input+0x6e2>
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	6918      	ldr	r0, [r3, #16]
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	69f9      	ldr	r1, [r7, #28]
 800b3d2:	47a0      	blx	r4
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	74fb      	strb	r3, [r7, #19]
 800b3d8:	e001      	b.n	800b3de <tcp_input+0x6e6>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b3de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3e2:	f113 0f0d 	cmn.w	r3, #13
 800b3e6:	d016      	beq.n	800b416 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b3e8:	4b13      	ldr	r3, [pc, #76]	; (800b438 <tcp_input+0x740>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b3ee:	69f8      	ldr	r0, [r7, #28]
 800b3f0:	f000 f88e 	bl	800b510 <tcp_input_delayed_close>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d128      	bne.n	800b44c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b3fa:	69f8      	ldr	r0, [r7, #28]
 800b3fc:	f002 ff20 	bl	800e240 <tcp_output>
 800b400:	e025      	b.n	800b44e <tcp_input+0x756>
        goto aborted;
 800b402:	bf00      	nop
 800b404:	e023      	b.n	800b44e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b406:	bf00      	nop
 800b408:	e021      	b.n	800b44e <tcp_input+0x756>
              goto aborted;
 800b40a:	bf00      	nop
 800b40c:	e01f      	b.n	800b44e <tcp_input+0x756>
          goto aborted;
 800b40e:	bf00      	nop
 800b410:	e01d      	b.n	800b44e <tcp_input+0x756>
            goto aborted;
 800b412:	bf00      	nop
 800b414:	e01b      	b.n	800b44e <tcp_input+0x756>
              goto aborted;
 800b416:	bf00      	nop
 800b418:	e019      	b.n	800b44e <tcp_input+0x756>
 800b41a:	bf00      	nop
 800b41c:	200008ac 	.word	0x200008ac
 800b420:	200008bc 	.word	0x200008bc
 800b424:	200008dc 	.word	0x200008dc
 800b428:	200008d9 	.word	0x200008d9
 800b42c:	200008d4 	.word	0x200008d4
 800b430:	200008d8 	.word	0x200008d8
 800b434:	200008d6 	.word	0x200008d6
 800b438:	2000ae7c 	.word	0x2000ae7c
 800b43c:	2000ae68 	.word	0x2000ae68
 800b440:	08018530 	.word	0x08018530
 800b444:	080186e4 	.word	0x080186e4
 800b448:	0801857c 	.word	0x0801857c
          goto aborted;
 800b44c:	bf00      	nop
    tcp_input_pcb = NULL;
 800b44e:	4b27      	ldr	r3, [pc, #156]	; (800b4ec <tcp_input+0x7f4>)
 800b450:	2200      	movs	r2, #0
 800b452:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b454:	4b26      	ldr	r3, [pc, #152]	; (800b4f0 <tcp_input+0x7f8>)
 800b456:	2200      	movs	r2, #0
 800b458:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b45a:	4b26      	ldr	r3, [pc, #152]	; (800b4f4 <tcp_input+0x7fc>)
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d03f      	beq.n	800b4e2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b462:	4b24      	ldr	r3, [pc, #144]	; (800b4f4 <tcp_input+0x7fc>)
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	4618      	mov	r0, r3
 800b468:	f7fd fb6e 	bl	8008b48 <pbuf_free>
      inseg.p = NULL;
 800b46c:	4b21      	ldr	r3, [pc, #132]	; (800b4f4 <tcp_input+0x7fc>)
 800b46e:	2200      	movs	r2, #0
 800b470:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b472:	e036      	b.n	800b4e2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b474:	4b20      	ldr	r3, [pc, #128]	; (800b4f8 <tcp_input+0x800>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	899b      	ldrh	r3, [r3, #12]
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7fc f805 	bl	800748c <lwip_htons>
 800b482:	4603      	mov	r3, r0
 800b484:	b2db      	uxtb	r3, r3
 800b486:	f003 0304 	and.w	r3, r3, #4
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d118      	bne.n	800b4c0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b48e:	4b1b      	ldr	r3, [pc, #108]	; (800b4fc <tcp_input+0x804>)
 800b490:	6819      	ldr	r1, [r3, #0]
 800b492:	4b1b      	ldr	r3, [pc, #108]	; (800b500 <tcp_input+0x808>)
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	461a      	mov	r2, r3
 800b498:	4b1a      	ldr	r3, [pc, #104]	; (800b504 <tcp_input+0x80c>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b49e:	4b16      	ldr	r3, [pc, #88]	; (800b4f8 <tcp_input+0x800>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4a2:	885b      	ldrh	r3, [r3, #2]
 800b4a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b4a6:	4a14      	ldr	r2, [pc, #80]	; (800b4f8 <tcp_input+0x800>)
 800b4a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4aa:	8812      	ldrh	r2, [r2, #0]
 800b4ac:	b292      	uxth	r2, r2
 800b4ae:	9202      	str	r2, [sp, #8]
 800b4b0:	9301      	str	r3, [sp, #4]
 800b4b2:	4b15      	ldr	r3, [pc, #84]	; (800b508 <tcp_input+0x810>)
 800b4b4:	9300      	str	r3, [sp, #0]
 800b4b6:	4b15      	ldr	r3, [pc, #84]	; (800b50c <tcp_input+0x814>)
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	f003 fc74 	bl	800eda8 <tcp_rst>
    pbuf_free(p);
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f7fd fb41 	bl	8008b48 <pbuf_free>
  return;
 800b4c6:	e00c      	b.n	800b4e2 <tcp_input+0x7ea>
    goto dropped;
 800b4c8:	bf00      	nop
 800b4ca:	e006      	b.n	800b4da <tcp_input+0x7e2>
    goto dropped;
 800b4cc:	bf00      	nop
 800b4ce:	e004      	b.n	800b4da <tcp_input+0x7e2>
    goto dropped;
 800b4d0:	bf00      	nop
 800b4d2:	e002      	b.n	800b4da <tcp_input+0x7e2>
      goto dropped;
 800b4d4:	bf00      	nop
 800b4d6:	e000      	b.n	800b4da <tcp_input+0x7e2>
      goto dropped;
 800b4d8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f7fd fb34 	bl	8008b48 <pbuf_free>
 800b4e0:	e000      	b.n	800b4e4 <tcp_input+0x7ec>
  return;
 800b4e2:	bf00      	nop
}
 800b4e4:	3724      	adds	r7, #36	; 0x24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd90      	pop	{r4, r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	2000ae7c 	.word	0x2000ae7c
 800b4f0:	200008dc 	.word	0x200008dc
 800b4f4:	200008ac 	.word	0x200008ac
 800b4f8:	200008bc 	.word	0x200008bc
 800b4fc:	200008d0 	.word	0x200008d0
 800b500:	200008d6 	.word	0x200008d6
 800b504:	200008cc 	.word	0x200008cc
 800b508:	20005774 	.word	0x20005774
 800b50c:	20005778 	.word	0x20005778

0800b510 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d106      	bne.n	800b52c <tcp_input_delayed_close+0x1c>
 800b51e:	4b17      	ldr	r3, [pc, #92]	; (800b57c <tcp_input_delayed_close+0x6c>)
 800b520:	f240 225a 	movw	r2, #602	; 0x25a
 800b524:	4916      	ldr	r1, [pc, #88]	; (800b580 <tcp_input_delayed_close+0x70>)
 800b526:	4817      	ldr	r0, [pc, #92]	; (800b584 <tcp_input_delayed_close+0x74>)
 800b528:	f009 f9bc 	bl	80148a4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b52c:	4b16      	ldr	r3, [pc, #88]	; (800b588 <tcp_input_delayed_close+0x78>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	f003 0310 	and.w	r3, r3, #16
 800b534:	2b00      	cmp	r3, #0
 800b536:	d01c      	beq.n	800b572 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	8b5b      	ldrh	r3, [r3, #26]
 800b53c:	f003 0310 	and.w	r3, r3, #16
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10d      	bne.n	800b560 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d008      	beq.n	800b560 <tcp_input_delayed_close+0x50>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	6912      	ldr	r2, [r2, #16]
 800b558:	f06f 010e 	mvn.w	r1, #14
 800b55c:	4610      	mov	r0, r2
 800b55e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b560:	6879      	ldr	r1, [r7, #4]
 800b562:	480a      	ldr	r0, [pc, #40]	; (800b58c <tcp_input_delayed_close+0x7c>)
 800b564:	f7ff fa50 	bl	800aa08 <tcp_pcb_remove>
    tcp_free(pcb);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f7fd fd9d 	bl	80090a8 <tcp_free>
    return 1;
 800b56e:	2301      	movs	r3, #1
 800b570:	e000      	b.n	800b574 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3708      	adds	r7, #8
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	08018530 	.word	0x08018530
 800b580:	08018700 	.word	0x08018700
 800b584:	0801857c 	.word	0x0801857c
 800b588:	200008d9 	.word	0x200008d9
 800b58c:	2000ae68 	.word	0x2000ae68

0800b590 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b590:	b590      	push	{r4, r7, lr}
 800b592:	b08b      	sub	sp, #44	; 0x2c
 800b594:	af04      	add	r7, sp, #16
 800b596:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b598:	4b6f      	ldr	r3, [pc, #444]	; (800b758 <tcp_listen_input+0x1c8>)
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	f003 0304 	and.w	r3, r3, #4
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f040 80d2 	bne.w	800b74a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d106      	bne.n	800b5ba <tcp_listen_input+0x2a>
 800b5ac:	4b6b      	ldr	r3, [pc, #428]	; (800b75c <tcp_listen_input+0x1cc>)
 800b5ae:	f240 2281 	movw	r2, #641	; 0x281
 800b5b2:	496b      	ldr	r1, [pc, #428]	; (800b760 <tcp_listen_input+0x1d0>)
 800b5b4:	486b      	ldr	r0, [pc, #428]	; (800b764 <tcp_listen_input+0x1d4>)
 800b5b6:	f009 f975 	bl	80148a4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b5ba:	4b67      	ldr	r3, [pc, #412]	; (800b758 <tcp_listen_input+0x1c8>)
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	f003 0310 	and.w	r3, r3, #16
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d019      	beq.n	800b5fa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b5c6:	4b68      	ldr	r3, [pc, #416]	; (800b768 <tcp_listen_input+0x1d8>)
 800b5c8:	6819      	ldr	r1, [r3, #0]
 800b5ca:	4b68      	ldr	r3, [pc, #416]	; (800b76c <tcp_listen_input+0x1dc>)
 800b5cc:	881b      	ldrh	r3, [r3, #0]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	4b67      	ldr	r3, [pc, #412]	; (800b770 <tcp_listen_input+0x1e0>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b5d6:	4b67      	ldr	r3, [pc, #412]	; (800b774 <tcp_listen_input+0x1e4>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b5da:	885b      	ldrh	r3, [r3, #2]
 800b5dc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b5de:	4a65      	ldr	r2, [pc, #404]	; (800b774 <tcp_listen_input+0x1e4>)
 800b5e0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b5e2:	8812      	ldrh	r2, [r2, #0]
 800b5e4:	b292      	uxth	r2, r2
 800b5e6:	9202      	str	r2, [sp, #8]
 800b5e8:	9301      	str	r3, [sp, #4]
 800b5ea:	4b63      	ldr	r3, [pc, #396]	; (800b778 <tcp_listen_input+0x1e8>)
 800b5ec:	9300      	str	r3, [sp, #0]
 800b5ee:	4b63      	ldr	r3, [pc, #396]	; (800b77c <tcp_listen_input+0x1ec>)
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f003 fbd8 	bl	800eda8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b5f8:	e0a9      	b.n	800b74e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b5fa:	4b57      	ldr	r3, [pc, #348]	; (800b758 <tcp_listen_input+0x1c8>)
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	f003 0302 	and.w	r3, r3, #2
 800b602:	2b00      	cmp	r3, #0
 800b604:	f000 80a3 	beq.w	800b74e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	7d5b      	ldrb	r3, [r3, #21]
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7ff f85f 	bl	800a6d0 <tcp_alloc>
 800b612:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d111      	bne.n	800b63e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	699b      	ldr	r3, [r3, #24]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00a      	beq.n	800b638 <tcp_listen_input+0xa8>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	699b      	ldr	r3, [r3, #24]
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	6910      	ldr	r0, [r2, #16]
 800b62a:	f04f 32ff 	mov.w	r2, #4294967295
 800b62e:	2100      	movs	r1, #0
 800b630:	4798      	blx	r3
 800b632:	4603      	mov	r3, r0
 800b634:	73bb      	strb	r3, [r7, #14]
      return;
 800b636:	e08b      	b.n	800b750 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b638:	23f0      	movs	r3, #240	; 0xf0
 800b63a:	73bb      	strb	r3, [r7, #14]
      return;
 800b63c:	e088      	b.n	800b750 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b63e:	4b50      	ldr	r3, [pc, #320]	; (800b780 <tcp_listen_input+0x1f0>)
 800b640:	695a      	ldr	r2, [r3, #20]
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b646:	4b4e      	ldr	r3, [pc, #312]	; (800b780 <tcp_listen_input+0x1f0>)
 800b648:	691a      	ldr	r2, [r3, #16]
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	8ada      	ldrh	r2, [r3, #22]
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b656:	4b47      	ldr	r3, [pc, #284]	; (800b774 <tcp_listen_input+0x1e4>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	881b      	ldrh	r3, [r3, #0]
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2203      	movs	r2, #3
 800b666:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b668:	4b41      	ldr	r3, [pc, #260]	; (800b770 <tcp_listen_input+0x1e0>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	1c5a      	adds	r2, r3, #1
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b67a:	6978      	ldr	r0, [r7, #20]
 800b67c:	f7ff fa58 	bl	800ab30 <tcp_next_iss>
 800b680:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	693a      	ldr	r2, [r7, #16]
 800b686:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	693a      	ldr	r2, [r7, #16]
 800b68c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	693a      	ldr	r2, [r7, #16]
 800b692:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	693a      	ldr	r2, [r7, #16]
 800b698:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b69a:	4b35      	ldr	r3, [pc, #212]	; (800b770 <tcp_listen_input+0x1e0>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	1e5a      	subs	r2, r3, #1
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	691a      	ldr	r2, [r3, #16]
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	7a5b      	ldrb	r3, [r3, #9]
 800b6b6:	f003 030c 	and.w	r3, r3, #12
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	7a1a      	ldrb	r2, [r3, #8]
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b6c8:	4b2e      	ldr	r3, [pc, #184]	; (800b784 <tcp_listen_input+0x1f4>)
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	60da      	str	r2, [r3, #12]
 800b6d0:	4a2c      	ldr	r2, [pc, #176]	; (800b784 <tcp_listen_input+0x1f4>)
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	6013      	str	r3, [r2, #0]
 800b6d6:	f003 fd29 	bl	800f12c <tcp_timer_needed>
 800b6da:	4b2b      	ldr	r3, [pc, #172]	; (800b788 <tcp_listen_input+0x1f8>)
 800b6dc:	2201      	movs	r2, #1
 800b6de:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b6e0:	6978      	ldr	r0, [r7, #20]
 800b6e2:	f001 fd8f 	bl	800d204 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b6e6:	4b23      	ldr	r3, [pc, #140]	; (800b774 <tcp_listen_input+0x1e4>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	89db      	ldrh	r3, [r3, #14]
 800b6ec:	b29a      	uxth	r2, r3
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	3304      	adds	r3, #4
 800b708:	4618      	mov	r0, r3
 800b70a:	f005 f8ed 	bl	80108e8 <ip4_route>
 800b70e:	4601      	mov	r1, r0
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	3304      	adds	r3, #4
 800b714:	461a      	mov	r2, r3
 800b716:	4620      	mov	r0, r4
 800b718:	f7ff fa30 	bl	800ab7c <tcp_eff_send_mss_netif>
 800b71c:	4603      	mov	r3, r0
 800b71e:	461a      	mov	r2, r3
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b724:	2112      	movs	r1, #18
 800b726:	6978      	ldr	r0, [r7, #20]
 800b728:	f002 fc9c 	bl	800e064 <tcp_enqueue_flags>
 800b72c:	4603      	mov	r3, r0
 800b72e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d004      	beq.n	800b742 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b738:	2100      	movs	r1, #0
 800b73a:	6978      	ldr	r0, [r7, #20]
 800b73c:	f7fd fede 	bl	80094fc <tcp_abandon>
      return;
 800b740:	e006      	b.n	800b750 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b742:	6978      	ldr	r0, [r7, #20]
 800b744:	f002 fd7c 	bl	800e240 <tcp_output>
  return;
 800b748:	e001      	b.n	800b74e <tcp_listen_input+0x1be>
    return;
 800b74a:	bf00      	nop
 800b74c:	e000      	b.n	800b750 <tcp_listen_input+0x1c0>
  return;
 800b74e:	bf00      	nop
}
 800b750:	371c      	adds	r7, #28
 800b752:	46bd      	mov	sp, r7
 800b754:	bd90      	pop	{r4, r7, pc}
 800b756:	bf00      	nop
 800b758:	200008d8 	.word	0x200008d8
 800b75c:	08018530 	.word	0x08018530
 800b760:	08018728 	.word	0x08018728
 800b764:	0801857c 	.word	0x0801857c
 800b768:	200008d0 	.word	0x200008d0
 800b76c:	200008d6 	.word	0x200008d6
 800b770:	200008cc 	.word	0x200008cc
 800b774:	200008bc 	.word	0x200008bc
 800b778:	20005774 	.word	0x20005774
 800b77c:	20005778 	.word	0x20005778
 800b780:	20005764 	.word	0x20005764
 800b784:	2000ae68 	.word	0x2000ae68
 800b788:	2000ae64 	.word	0x2000ae64

0800b78c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af04      	add	r7, sp, #16
 800b792:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b794:	4b2f      	ldr	r3, [pc, #188]	; (800b854 <tcp_timewait_input+0xc8>)
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	f003 0304 	and.w	r3, r3, #4
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d153      	bne.n	800b848 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d106      	bne.n	800b7b4 <tcp_timewait_input+0x28>
 800b7a6:	4b2c      	ldr	r3, [pc, #176]	; (800b858 <tcp_timewait_input+0xcc>)
 800b7a8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b7ac:	492b      	ldr	r1, [pc, #172]	; (800b85c <tcp_timewait_input+0xd0>)
 800b7ae:	482c      	ldr	r0, [pc, #176]	; (800b860 <tcp_timewait_input+0xd4>)
 800b7b0:	f009 f878 	bl	80148a4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b7b4:	4b27      	ldr	r3, [pc, #156]	; (800b854 <tcp_timewait_input+0xc8>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	f003 0302 	and.w	r3, r3, #2
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d02a      	beq.n	800b816 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b7c0:	4b28      	ldr	r3, [pc, #160]	; (800b864 <tcp_timewait_input+0xd8>)
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c8:	1ad3      	subs	r3, r2, r3
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	db2d      	blt.n	800b82a <tcp_timewait_input+0x9e>
 800b7ce:	4b25      	ldr	r3, [pc, #148]	; (800b864 <tcp_timewait_input+0xd8>)
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d6:	6879      	ldr	r1, [r7, #4]
 800b7d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b7da:	440b      	add	r3, r1
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	dc23      	bgt.n	800b82a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7e2:	4b21      	ldr	r3, [pc, #132]	; (800b868 <tcp_timewait_input+0xdc>)
 800b7e4:	6819      	ldr	r1, [r3, #0]
 800b7e6:	4b21      	ldr	r3, [pc, #132]	; (800b86c <tcp_timewait_input+0xe0>)
 800b7e8:	881b      	ldrh	r3, [r3, #0]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	4b1d      	ldr	r3, [pc, #116]	; (800b864 <tcp_timewait_input+0xd8>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7f2:	4b1f      	ldr	r3, [pc, #124]	; (800b870 <tcp_timewait_input+0xe4>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7f6:	885b      	ldrh	r3, [r3, #2]
 800b7f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7fa:	4a1d      	ldr	r2, [pc, #116]	; (800b870 <tcp_timewait_input+0xe4>)
 800b7fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7fe:	8812      	ldrh	r2, [r2, #0]
 800b800:	b292      	uxth	r2, r2
 800b802:	9202      	str	r2, [sp, #8]
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	4b1b      	ldr	r3, [pc, #108]	; (800b874 <tcp_timewait_input+0xe8>)
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	4b1b      	ldr	r3, [pc, #108]	; (800b878 <tcp_timewait_input+0xec>)
 800b80c:	4602      	mov	r2, r0
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f003 faca 	bl	800eda8 <tcp_rst>
      return;
 800b814:	e01b      	b.n	800b84e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b816:	4b0f      	ldr	r3, [pc, #60]	; (800b854 <tcp_timewait_input+0xc8>)
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	f003 0301 	and.w	r3, r3, #1
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d003      	beq.n	800b82a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b822:	4b16      	ldr	r3, [pc, #88]	; (800b87c <tcp_timewait_input+0xf0>)
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b82a:	4b10      	ldr	r3, [pc, #64]	; (800b86c <tcp_timewait_input+0xe0>)
 800b82c:	881b      	ldrh	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00c      	beq.n	800b84c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	8b5b      	ldrh	r3, [r3, #26]
 800b836:	f043 0302 	orr.w	r3, r3, #2
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f002 fcfd 	bl	800e240 <tcp_output>
  }
  return;
 800b846:	e001      	b.n	800b84c <tcp_timewait_input+0xc0>
    return;
 800b848:	bf00      	nop
 800b84a:	e000      	b.n	800b84e <tcp_timewait_input+0xc2>
  return;
 800b84c:	bf00      	nop
}
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	200008d8 	.word	0x200008d8
 800b858:	08018530 	.word	0x08018530
 800b85c:	08018748 	.word	0x08018748
 800b860:	0801857c 	.word	0x0801857c
 800b864:	200008cc 	.word	0x200008cc
 800b868:	200008d0 	.word	0x200008d0
 800b86c:	200008d6 	.word	0x200008d6
 800b870:	200008bc 	.word	0x200008bc
 800b874:	20005774 	.word	0x20005774
 800b878:	20005778 	.word	0x20005778
 800b87c:	2000ae6c 	.word	0x2000ae6c

0800b880 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b880:	b590      	push	{r4, r7, lr}
 800b882:	b08d      	sub	sp, #52	; 0x34
 800b884:	af04      	add	r7, sp, #16
 800b886:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b888:	2300      	movs	r3, #0
 800b88a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b88c:	2300      	movs	r3, #0
 800b88e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d106      	bne.n	800b8a4 <tcp_process+0x24>
 800b896:	4b9d      	ldr	r3, [pc, #628]	; (800bb0c <tcp_process+0x28c>)
 800b898:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b89c:	499c      	ldr	r1, [pc, #624]	; (800bb10 <tcp_process+0x290>)
 800b89e:	489d      	ldr	r0, [pc, #628]	; (800bb14 <tcp_process+0x294>)
 800b8a0:	f009 f800 	bl	80148a4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b8a4:	4b9c      	ldr	r3, [pc, #624]	; (800bb18 <tcp_process+0x298>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	f003 0304 	and.w	r3, r3, #4
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d04e      	beq.n	800b94e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	7d1b      	ldrb	r3, [r3, #20]
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d108      	bne.n	800b8ca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8bc:	4b97      	ldr	r3, [pc, #604]	; (800bb1c <tcp_process+0x29c>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d123      	bne.n	800b90c <tcp_process+0x8c>
        acceptable = 1;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	76fb      	strb	r3, [r7, #27]
 800b8c8:	e020      	b.n	800b90c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8ce:	4b94      	ldr	r3, [pc, #592]	; (800bb20 <tcp_process+0x2a0>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d102      	bne.n	800b8dc <tcp_process+0x5c>
        acceptable = 1;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	76fb      	strb	r3, [r7, #27]
 800b8da:	e017      	b.n	800b90c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b8dc:	4b90      	ldr	r3, [pc, #576]	; (800bb20 <tcp_process+0x2a0>)
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	db10      	blt.n	800b90c <tcp_process+0x8c>
 800b8ea:	4b8d      	ldr	r3, [pc, #564]	; (800bb20 <tcp_process+0x2a0>)
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	6879      	ldr	r1, [r7, #4]
 800b8f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b8f6:	440b      	add	r3, r1
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	dc06      	bgt.n	800b90c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	8b5b      	ldrh	r3, [r3, #26]
 800b902:	f043 0302 	orr.w	r3, r3, #2
 800b906:	b29a      	uxth	r2, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b90c:	7efb      	ldrb	r3, [r7, #27]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d01b      	beq.n	800b94a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	7d1b      	ldrb	r3, [r3, #20]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d106      	bne.n	800b928 <tcp_process+0xa8>
 800b91a:	4b7c      	ldr	r3, [pc, #496]	; (800bb0c <tcp_process+0x28c>)
 800b91c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b920:	4980      	ldr	r1, [pc, #512]	; (800bb24 <tcp_process+0x2a4>)
 800b922:	487c      	ldr	r0, [pc, #496]	; (800bb14 <tcp_process+0x294>)
 800b924:	f008 ffbe 	bl	80148a4 <iprintf>
      recv_flags |= TF_RESET;
 800b928:	4b7f      	ldr	r3, [pc, #508]	; (800bb28 <tcp_process+0x2a8>)
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	f043 0308 	orr.w	r3, r3, #8
 800b930:	b2da      	uxtb	r2, r3
 800b932:	4b7d      	ldr	r3, [pc, #500]	; (800bb28 <tcp_process+0x2a8>)
 800b934:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	8b5b      	ldrh	r3, [r3, #26]
 800b93a:	f023 0301 	bic.w	r3, r3, #1
 800b93e:	b29a      	uxth	r2, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b944:	f06f 030d 	mvn.w	r3, #13
 800b948:	e37a      	b.n	800c040 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b94a:	2300      	movs	r3, #0
 800b94c:	e378      	b.n	800c040 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b94e:	4b72      	ldr	r3, [pc, #456]	; (800bb18 <tcp_process+0x298>)
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	f003 0302 	and.w	r3, r3, #2
 800b956:	2b00      	cmp	r3, #0
 800b958:	d010      	beq.n	800b97c <tcp_process+0xfc>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	7d1b      	ldrb	r3, [r3, #20]
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d00c      	beq.n	800b97c <tcp_process+0xfc>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	7d1b      	ldrb	r3, [r3, #20]
 800b966:	2b03      	cmp	r3, #3
 800b968:	d008      	beq.n	800b97c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	8b5b      	ldrh	r3, [r3, #26]
 800b96e:	f043 0302 	orr.w	r3, r3, #2
 800b972:	b29a      	uxth	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	e361      	b.n	800c040 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	8b5b      	ldrh	r3, [r3, #26]
 800b980:	f003 0310 	and.w	r3, r3, #16
 800b984:	2b00      	cmp	r3, #0
 800b986:	d103      	bne.n	800b990 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b988:	4b68      	ldr	r3, [pc, #416]	; (800bb2c <tcp_process+0x2ac>)
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f001 fc2f 	bl	800d204 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	7d1b      	ldrb	r3, [r3, #20]
 800b9aa:	3b02      	subs	r3, #2
 800b9ac:	2b07      	cmp	r3, #7
 800b9ae:	f200 8337 	bhi.w	800c020 <tcp_process+0x7a0>
 800b9b2:	a201      	add	r2, pc, #4	; (adr r2, 800b9b8 <tcp_process+0x138>)
 800b9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b8:	0800b9d9 	.word	0x0800b9d9
 800b9bc:	0800bc09 	.word	0x0800bc09
 800b9c0:	0800bd81 	.word	0x0800bd81
 800b9c4:	0800bdab 	.word	0x0800bdab
 800b9c8:	0800becf 	.word	0x0800becf
 800b9cc:	0800bd81 	.word	0x0800bd81
 800b9d0:	0800bf5b 	.word	0x0800bf5b
 800b9d4:	0800bfeb 	.word	0x0800bfeb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b9d8:	4b4f      	ldr	r3, [pc, #316]	; (800bb18 <tcp_process+0x298>)
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	f003 0310 	and.w	r3, r3, #16
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f000 80e4 	beq.w	800bbae <tcp_process+0x32e>
 800b9e6:	4b4c      	ldr	r3, [pc, #304]	; (800bb18 <tcp_process+0x298>)
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	f003 0302 	and.w	r3, r3, #2
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f000 80dd 	beq.w	800bbae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9f8:	1c5a      	adds	r2, r3, #1
 800b9fa:	4b48      	ldr	r3, [pc, #288]	; (800bb1c <tcp_process+0x29c>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	f040 80d5 	bne.w	800bbae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ba04:	4b46      	ldr	r3, [pc, #280]	; (800bb20 <tcp_process+0x2a0>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	1c5a      	adds	r2, r3, #1
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ba16:	4b41      	ldr	r3, [pc, #260]	; (800bb1c <tcp_process+0x29c>)
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ba1e:	4b44      	ldr	r3, [pc, #272]	; (800bb30 <tcp_process+0x2b0>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	89db      	ldrh	r3, [r3, #14]
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ba38:	4b39      	ldr	r3, [pc, #228]	; (800bb20 <tcp_process+0x2a0>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	1e5a      	subs	r2, r3, #1
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2204      	movs	r2, #4
 800ba46:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	3304      	adds	r3, #4
 800ba50:	4618      	mov	r0, r3
 800ba52:	f004 ff49 	bl	80108e8 <ip4_route>
 800ba56:	4601      	mov	r1, r0
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	3304      	adds	r3, #4
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f7ff f88c 	bl	800ab7c <tcp_eff_send_mss_netif>
 800ba64:	4603      	mov	r3, r0
 800ba66:	461a      	mov	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba70:	009a      	lsls	r2, r3, #2
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba76:	005b      	lsls	r3, r3, #1
 800ba78:	f241 111c 	movw	r1, #4380	; 0x111c
 800ba7c:	428b      	cmp	r3, r1
 800ba7e:	bf38      	it	cc
 800ba80:	460b      	movcc	r3, r1
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d204      	bcs.n	800ba90 <tcp_process+0x210>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	e00d      	b.n	800baac <tcp_process+0x22c>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba94:	005b      	lsls	r3, r3, #1
 800ba96:	f241 121c 	movw	r2, #4380	; 0x111c
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d904      	bls.n	800baa8 <tcp_process+0x228>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	e001      	b.n	800baac <tcp_process+0x22c>
 800baa8:	f241 131c 	movw	r3, #4380	; 0x111c
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d106      	bne.n	800baca <tcp_process+0x24a>
 800babc:	4b13      	ldr	r3, [pc, #76]	; (800bb0c <tcp_process+0x28c>)
 800babe:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800bac2:	491c      	ldr	r1, [pc, #112]	; (800bb34 <tcp_process+0x2b4>)
 800bac4:	4813      	ldr	r0, [pc, #76]	; (800bb14 <tcp_process+0x294>)
 800bac6:	f008 feed 	bl	80148a4 <iprintf>
        --pcb->snd_queuelen;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bad0:	3b01      	subs	r3, #1
 800bad2:	b29a      	uxth	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bade:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d12a      	bne.n	800bb3c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d106      	bne.n	800bb00 <tcp_process+0x280>
 800baf2:	4b06      	ldr	r3, [pc, #24]	; (800bb0c <tcp_process+0x28c>)
 800baf4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800baf8:	490f      	ldr	r1, [pc, #60]	; (800bb38 <tcp_process+0x2b8>)
 800bafa:	4806      	ldr	r0, [pc, #24]	; (800bb14 <tcp_process+0x294>)
 800bafc:	f008 fed2 	bl	80148a4 <iprintf>
          pcb->unsent = rseg->next;
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	66da      	str	r2, [r3, #108]	; 0x6c
 800bb08:	e01c      	b.n	800bb44 <tcp_process+0x2c4>
 800bb0a:	bf00      	nop
 800bb0c:	08018530 	.word	0x08018530
 800bb10:	08018768 	.word	0x08018768
 800bb14:	0801857c 	.word	0x0801857c
 800bb18:	200008d8 	.word	0x200008d8
 800bb1c:	200008d0 	.word	0x200008d0
 800bb20:	200008cc 	.word	0x200008cc
 800bb24:	08018784 	.word	0x08018784
 800bb28:	200008d9 	.word	0x200008d9
 800bb2c:	2000ae6c 	.word	0x2000ae6c
 800bb30:	200008bc 	.word	0x200008bc
 800bb34:	080187a4 	.word	0x080187a4
 800bb38:	080187bc 	.word	0x080187bc
        } else {
          pcb->unacked = rseg->next;
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800bb44:	69f8      	ldr	r0, [r7, #28]
 800bb46:	f7fe fc3c 	bl	800a3c2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d104      	bne.n	800bb5c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb58:	861a      	strh	r2, [r3, #48]	; 0x30
 800bb5a:	e006      	b.n	800bb6a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00a      	beq.n	800bb8a <tcp_process+0x30a>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	6910      	ldr	r0, [r2, #16]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	6879      	ldr	r1, [r7, #4]
 800bb82:	4798      	blx	r3
 800bb84:	4603      	mov	r3, r0
 800bb86:	76bb      	strb	r3, [r7, #26]
 800bb88:	e001      	b.n	800bb8e <tcp_process+0x30e>
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800bb8e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bb92:	f113 0f0d 	cmn.w	r3, #13
 800bb96:	d102      	bne.n	800bb9e <tcp_process+0x31e>
          return ERR_ABRT;
 800bb98:	f06f 030c 	mvn.w	r3, #12
 800bb9c:	e250      	b.n	800c040 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	8b5b      	ldrh	r3, [r3, #26]
 800bba2:	f043 0302 	orr.w	r3, r3, #2
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800bbac:	e23a      	b.n	800c024 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800bbae:	4b98      	ldr	r3, [pc, #608]	; (800be10 <tcp_process+0x590>)
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	f003 0310 	and.w	r3, r3, #16
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f000 8234 	beq.w	800c024 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bbbc:	4b95      	ldr	r3, [pc, #596]	; (800be14 <tcp_process+0x594>)
 800bbbe:	6819      	ldr	r1, [r3, #0]
 800bbc0:	4b95      	ldr	r3, [pc, #596]	; (800be18 <tcp_process+0x598>)
 800bbc2:	881b      	ldrh	r3, [r3, #0]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	4b95      	ldr	r3, [pc, #596]	; (800be1c <tcp_process+0x59c>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bbcc:	4b94      	ldr	r3, [pc, #592]	; (800be20 <tcp_process+0x5a0>)
 800bbce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bbd0:	885b      	ldrh	r3, [r3, #2]
 800bbd2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bbd4:	4a92      	ldr	r2, [pc, #584]	; (800be20 <tcp_process+0x5a0>)
 800bbd6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bbd8:	8812      	ldrh	r2, [r2, #0]
 800bbda:	b292      	uxth	r2, r2
 800bbdc:	9202      	str	r2, [sp, #8]
 800bbde:	9301      	str	r3, [sp, #4]
 800bbe0:	4b90      	ldr	r3, [pc, #576]	; (800be24 <tcp_process+0x5a4>)
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	4b90      	ldr	r3, [pc, #576]	; (800be28 <tcp_process+0x5a8>)
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f003 f8dd 	bl	800eda8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bbf4:	2b05      	cmp	r3, #5
 800bbf6:	f200 8215 	bhi.w	800c024 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f002 fea9 	bl	800e958 <tcp_rexmit_rto>
      break;
 800bc06:	e20d      	b.n	800c024 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800bc08:	4b81      	ldr	r3, [pc, #516]	; (800be10 <tcp_process+0x590>)
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	f003 0310 	and.w	r3, r3, #16
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f000 80a1 	beq.w	800bd58 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc16:	4b7f      	ldr	r3, [pc, #508]	; (800be14 <tcp_process+0x594>)
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	3b01      	subs	r3, #1
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	db7e      	blt.n	800bd24 <tcp_process+0x4a4>
 800bc26:	4b7b      	ldr	r3, [pc, #492]	; (800be14 <tcp_process+0x594>)
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	dc77      	bgt.n	800bd24 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2204      	movs	r2, #4
 800bc38:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d102      	bne.n	800bc48 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800bc42:	23fa      	movs	r3, #250	; 0xfa
 800bc44:	76bb      	strb	r3, [r7, #26]
 800bc46:	e01d      	b.n	800bc84 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc4c:	699b      	ldr	r3, [r3, #24]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d106      	bne.n	800bc60 <tcp_process+0x3e0>
 800bc52:	4b76      	ldr	r3, [pc, #472]	; (800be2c <tcp_process+0x5ac>)
 800bc54:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800bc58:	4975      	ldr	r1, [pc, #468]	; (800be30 <tcp_process+0x5b0>)
 800bc5a:	4876      	ldr	r0, [pc, #472]	; (800be34 <tcp_process+0x5b4>)
 800bc5c:	f008 fe22 	bl	80148a4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc64:	699b      	ldr	r3, [r3, #24]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00a      	beq.n	800bc80 <tcp_process+0x400>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc6e:	699b      	ldr	r3, [r3, #24]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	6910      	ldr	r0, [r2, #16]
 800bc74:	2200      	movs	r2, #0
 800bc76:	6879      	ldr	r1, [r7, #4]
 800bc78:	4798      	blx	r3
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	76bb      	strb	r3, [r7, #26]
 800bc7e:	e001      	b.n	800bc84 <tcp_process+0x404>
 800bc80:	23f0      	movs	r3, #240	; 0xf0
 800bc82:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800bc84:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d00a      	beq.n	800bca2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800bc8c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bc90:	f113 0f0d 	cmn.w	r3, #13
 800bc94:	d002      	beq.n	800bc9c <tcp_process+0x41c>
              tcp_abort(pcb);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f7fd fcee 	bl	8009678 <tcp_abort>
            }
            return ERR_ABRT;
 800bc9c:	f06f 030c 	mvn.w	r3, #12
 800bca0:	e1ce      	b.n	800c040 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 fae0 	bl	800c268 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800bca8:	4b63      	ldr	r3, [pc, #396]	; (800be38 <tcp_process+0x5b8>)
 800bcaa:	881b      	ldrh	r3, [r3, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d005      	beq.n	800bcbc <tcp_process+0x43c>
            recv_acked--;
 800bcb0:	4b61      	ldr	r3, [pc, #388]	; (800be38 <tcp_process+0x5b8>)
 800bcb2:	881b      	ldrh	r3, [r3, #0]
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	4b5f      	ldr	r3, [pc, #380]	; (800be38 <tcp_process+0x5b8>)
 800bcba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcc0:	009a      	lsls	r2, r3, #2
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcc6:	005b      	lsls	r3, r3, #1
 800bcc8:	f241 111c 	movw	r1, #4380	; 0x111c
 800bccc:	428b      	cmp	r3, r1
 800bcce:	bf38      	it	cc
 800bcd0:	460b      	movcc	r3, r1
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d204      	bcs.n	800bce0 <tcp_process+0x460>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	e00d      	b.n	800bcfc <tcp_process+0x47c>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	f241 121c 	movw	r2, #4380	; 0x111c
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d904      	bls.n	800bcf8 <tcp_process+0x478>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcf2:	005b      	lsls	r3, r3, #1
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	e001      	b.n	800bcfc <tcp_process+0x47c>
 800bcf8:	f241 131c 	movw	r3, #4380	; 0x111c
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800bd02:	4b4e      	ldr	r3, [pc, #312]	; (800be3c <tcp_process+0x5bc>)
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	f003 0320 	and.w	r3, r3, #32
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d037      	beq.n	800bd7e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	8b5b      	ldrh	r3, [r3, #26]
 800bd12:	f043 0302 	orr.w	r3, r3, #2
 800bd16:	b29a      	uxth	r2, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2207      	movs	r2, #7
 800bd20:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800bd22:	e02c      	b.n	800bd7e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd24:	4b3b      	ldr	r3, [pc, #236]	; (800be14 <tcp_process+0x594>)
 800bd26:	6819      	ldr	r1, [r3, #0]
 800bd28:	4b3b      	ldr	r3, [pc, #236]	; (800be18 <tcp_process+0x598>)
 800bd2a:	881b      	ldrh	r3, [r3, #0]
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	4b3b      	ldr	r3, [pc, #236]	; (800be1c <tcp_process+0x59c>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd34:	4b3a      	ldr	r3, [pc, #232]	; (800be20 <tcp_process+0x5a0>)
 800bd36:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd38:	885b      	ldrh	r3, [r3, #2]
 800bd3a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd3c:	4a38      	ldr	r2, [pc, #224]	; (800be20 <tcp_process+0x5a0>)
 800bd3e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd40:	8812      	ldrh	r2, [r2, #0]
 800bd42:	b292      	uxth	r2, r2
 800bd44:	9202      	str	r2, [sp, #8]
 800bd46:	9301      	str	r3, [sp, #4]
 800bd48:	4b36      	ldr	r3, [pc, #216]	; (800be24 <tcp_process+0x5a4>)
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	4b36      	ldr	r3, [pc, #216]	; (800be28 <tcp_process+0x5a8>)
 800bd4e:	4602      	mov	r2, r0
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f003 f829 	bl	800eda8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800bd56:	e167      	b.n	800c028 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800bd58:	4b2d      	ldr	r3, [pc, #180]	; (800be10 <tcp_process+0x590>)
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	f003 0302 	and.w	r3, r3, #2
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	f000 8161 	beq.w	800c028 <tcp_process+0x7a8>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6a:	1e5a      	subs	r2, r3, #1
 800bd6c:	4b2b      	ldr	r3, [pc, #172]	; (800be1c <tcp_process+0x59c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	f040 8159 	bne.w	800c028 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f002 fe10 	bl	800e99c <tcp_rexmit>
      break;
 800bd7c:	e154      	b.n	800c028 <tcp_process+0x7a8>
 800bd7e:	e153      	b.n	800c028 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 fa71 	bl	800c268 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800bd86:	4b2d      	ldr	r3, [pc, #180]	; (800be3c <tcp_process+0x5bc>)
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	f003 0320 	and.w	r3, r3, #32
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f000 814c 	beq.w	800c02c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	8b5b      	ldrh	r3, [r3, #26]
 800bd98:	f043 0302 	orr.w	r3, r3, #2
 800bd9c:	b29a      	uxth	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2207      	movs	r2, #7
 800bda6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bda8:	e140      	b.n	800c02c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 fa5c 	bl	800c268 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bdb0:	4b22      	ldr	r3, [pc, #136]	; (800be3c <tcp_process+0x5bc>)
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	f003 0320 	and.w	r3, r3, #32
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d071      	beq.n	800bea0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bdbc:	4b14      	ldr	r3, [pc, #80]	; (800be10 <tcp_process+0x590>)
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	f003 0310 	and.w	r3, r3, #16
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d060      	beq.n	800be8a <tcp_process+0x60a>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bdcc:	4b11      	ldr	r3, [pc, #68]	; (800be14 <tcp_process+0x594>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d15a      	bne.n	800be8a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d156      	bne.n	800be8a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	8b5b      	ldrh	r3, [r3, #26]
 800bde0:	f043 0302 	orr.w	r3, r3, #2
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f7fe fdbc 	bl	800a968 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800bdf0:	4b13      	ldr	r3, [pc, #76]	; (800be40 <tcp_process+0x5c0>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d105      	bne.n	800be06 <tcp_process+0x586>
 800bdfa:	4b11      	ldr	r3, [pc, #68]	; (800be40 <tcp_process+0x5c0>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	4a0f      	ldr	r2, [pc, #60]	; (800be40 <tcp_process+0x5c0>)
 800be02:	6013      	str	r3, [r2, #0]
 800be04:	e02e      	b.n	800be64 <tcp_process+0x5e4>
 800be06:	4b0e      	ldr	r3, [pc, #56]	; (800be40 <tcp_process+0x5c0>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	617b      	str	r3, [r7, #20]
 800be0c:	e027      	b.n	800be5e <tcp_process+0x5de>
 800be0e:	bf00      	nop
 800be10:	200008d8 	.word	0x200008d8
 800be14:	200008d0 	.word	0x200008d0
 800be18:	200008d6 	.word	0x200008d6
 800be1c:	200008cc 	.word	0x200008cc
 800be20:	200008bc 	.word	0x200008bc
 800be24:	20005774 	.word	0x20005774
 800be28:	20005778 	.word	0x20005778
 800be2c:	08018530 	.word	0x08018530
 800be30:	080187d0 	.word	0x080187d0
 800be34:	0801857c 	.word	0x0801857c
 800be38:	200008d4 	.word	0x200008d4
 800be3c:	200008d9 	.word	0x200008d9
 800be40:	2000ae68 	.word	0x2000ae68
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d104      	bne.n	800be58 <tcp_process+0x5d8>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	68da      	ldr	r2, [r3, #12]
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	60da      	str	r2, [r3, #12]
 800be56:	e005      	b.n	800be64 <tcp_process+0x5e4>
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	617b      	str	r3, [r7, #20]
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1ef      	bne.n	800be44 <tcp_process+0x5c4>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	60da      	str	r2, [r3, #12]
 800be6a:	4b77      	ldr	r3, [pc, #476]	; (800c048 <tcp_process+0x7c8>)
 800be6c:	2201      	movs	r2, #1
 800be6e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	220a      	movs	r2, #10
 800be74:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800be76:	4b75      	ldr	r3, [pc, #468]	; (800c04c <tcp_process+0x7cc>)
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	60da      	str	r2, [r3, #12]
 800be7e:	4a73      	ldr	r2, [pc, #460]	; (800c04c <tcp_process+0x7cc>)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6013      	str	r3, [r2, #0]
 800be84:	f003 f952 	bl	800f12c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800be88:	e0d2      	b.n	800c030 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	8b5b      	ldrh	r3, [r3, #26]
 800be8e:	f043 0302 	orr.w	r3, r3, #2
 800be92:	b29a      	uxth	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2208      	movs	r2, #8
 800be9c:	751a      	strb	r2, [r3, #20]
      break;
 800be9e:	e0c7      	b.n	800c030 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bea0:	4b6b      	ldr	r3, [pc, #428]	; (800c050 <tcp_process+0x7d0>)
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	f003 0310 	and.w	r3, r3, #16
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f000 80c1 	beq.w	800c030 <tcp_process+0x7b0>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800beb2:	4b68      	ldr	r3, [pc, #416]	; (800c054 <tcp_process+0x7d4>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	f040 80ba 	bne.w	800c030 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f040 80b5 	bne.w	800c030 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2206      	movs	r2, #6
 800beca:	751a      	strb	r2, [r3, #20]
      break;
 800becc:	e0b0      	b.n	800c030 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 f9ca 	bl	800c268 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bed4:	4b60      	ldr	r3, [pc, #384]	; (800c058 <tcp_process+0x7d8>)
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	f003 0320 	and.w	r3, r3, #32
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f000 80a9 	beq.w	800c034 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	8b5b      	ldrh	r3, [r3, #26]
 800bee6:	f043 0302 	orr.w	r3, r3, #2
 800beea:	b29a      	uxth	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f7fe fd39 	bl	800a968 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bef6:	4b59      	ldr	r3, [pc, #356]	; (800c05c <tcp_process+0x7dc>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	429a      	cmp	r2, r3
 800befe:	d105      	bne.n	800bf0c <tcp_process+0x68c>
 800bf00:	4b56      	ldr	r3, [pc, #344]	; (800c05c <tcp_process+0x7dc>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	4a55      	ldr	r2, [pc, #340]	; (800c05c <tcp_process+0x7dc>)
 800bf08:	6013      	str	r3, [r2, #0]
 800bf0a:	e013      	b.n	800bf34 <tcp_process+0x6b4>
 800bf0c:	4b53      	ldr	r3, [pc, #332]	; (800c05c <tcp_process+0x7dc>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	613b      	str	r3, [r7, #16]
 800bf12:	e00c      	b.n	800bf2e <tcp_process+0x6ae>
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d104      	bne.n	800bf28 <tcp_process+0x6a8>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	68da      	ldr	r2, [r3, #12]
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	60da      	str	r2, [r3, #12]
 800bf26:	e005      	b.n	800bf34 <tcp_process+0x6b4>
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	613b      	str	r3, [r7, #16]
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d1ef      	bne.n	800bf14 <tcp_process+0x694>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	60da      	str	r2, [r3, #12]
 800bf3a:	4b43      	ldr	r3, [pc, #268]	; (800c048 <tcp_process+0x7c8>)
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	220a      	movs	r2, #10
 800bf44:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bf46:	4b41      	ldr	r3, [pc, #260]	; (800c04c <tcp_process+0x7cc>)
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	60da      	str	r2, [r3, #12]
 800bf4e:	4a3f      	ldr	r2, [pc, #252]	; (800c04c <tcp_process+0x7cc>)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6013      	str	r3, [r2, #0]
 800bf54:	f003 f8ea 	bl	800f12c <tcp_timer_needed>
      }
      break;
 800bf58:	e06c      	b.n	800c034 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 f984 	bl	800c268 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bf60:	4b3b      	ldr	r3, [pc, #236]	; (800c050 <tcp_process+0x7d0>)
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	f003 0310 	and.w	r3, r3, #16
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d065      	beq.n	800c038 <tcp_process+0x7b8>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf70:	4b38      	ldr	r3, [pc, #224]	; (800c054 <tcp_process+0x7d4>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d15f      	bne.n	800c038 <tcp_process+0x7b8>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d15b      	bne.n	800c038 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f7fe fcf1 	bl	800a968 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bf86:	4b35      	ldr	r3, [pc, #212]	; (800c05c <tcp_process+0x7dc>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d105      	bne.n	800bf9c <tcp_process+0x71c>
 800bf90:	4b32      	ldr	r3, [pc, #200]	; (800c05c <tcp_process+0x7dc>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	4a31      	ldr	r2, [pc, #196]	; (800c05c <tcp_process+0x7dc>)
 800bf98:	6013      	str	r3, [r2, #0]
 800bf9a:	e013      	b.n	800bfc4 <tcp_process+0x744>
 800bf9c:	4b2f      	ldr	r3, [pc, #188]	; (800c05c <tcp_process+0x7dc>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	60fb      	str	r3, [r7, #12]
 800bfa2:	e00c      	b.n	800bfbe <tcp_process+0x73e>
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d104      	bne.n	800bfb8 <tcp_process+0x738>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	68da      	ldr	r2, [r3, #12]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	60da      	str	r2, [r3, #12]
 800bfb6:	e005      	b.n	800bfc4 <tcp_process+0x744>
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	60fb      	str	r3, [r7, #12]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d1ef      	bne.n	800bfa4 <tcp_process+0x724>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	60da      	str	r2, [r3, #12]
 800bfca:	4b1f      	ldr	r3, [pc, #124]	; (800c048 <tcp_process+0x7c8>)
 800bfcc:	2201      	movs	r2, #1
 800bfce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	220a      	movs	r2, #10
 800bfd4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bfd6:	4b1d      	ldr	r3, [pc, #116]	; (800c04c <tcp_process+0x7cc>)
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	60da      	str	r2, [r3, #12]
 800bfde:	4a1b      	ldr	r2, [pc, #108]	; (800c04c <tcp_process+0x7cc>)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6013      	str	r3, [r2, #0]
 800bfe4:	f003 f8a2 	bl	800f12c <tcp_timer_needed>
      }
      break;
 800bfe8:	e026      	b.n	800c038 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 f93c 	bl	800c268 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bff0:	4b17      	ldr	r3, [pc, #92]	; (800c050 <tcp_process+0x7d0>)
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	f003 0310 	and.w	r3, r3, #16
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d01f      	beq.n	800c03c <tcp_process+0x7bc>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c000:	4b14      	ldr	r3, [pc, #80]	; (800c054 <tcp_process+0x7d4>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	429a      	cmp	r2, r3
 800c006:	d119      	bne.n	800c03c <tcp_process+0x7bc>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d115      	bne.n	800c03c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c010:	4b11      	ldr	r3, [pc, #68]	; (800c058 <tcp_process+0x7d8>)
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	f043 0310 	orr.w	r3, r3, #16
 800c018:	b2da      	uxtb	r2, r3
 800c01a:	4b0f      	ldr	r3, [pc, #60]	; (800c058 <tcp_process+0x7d8>)
 800c01c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c01e:	e00d      	b.n	800c03c <tcp_process+0x7bc>
    default:
      break;
 800c020:	bf00      	nop
 800c022:	e00c      	b.n	800c03e <tcp_process+0x7be>
      break;
 800c024:	bf00      	nop
 800c026:	e00a      	b.n	800c03e <tcp_process+0x7be>
      break;
 800c028:	bf00      	nop
 800c02a:	e008      	b.n	800c03e <tcp_process+0x7be>
      break;
 800c02c:	bf00      	nop
 800c02e:	e006      	b.n	800c03e <tcp_process+0x7be>
      break;
 800c030:	bf00      	nop
 800c032:	e004      	b.n	800c03e <tcp_process+0x7be>
      break;
 800c034:	bf00      	nop
 800c036:	e002      	b.n	800c03e <tcp_process+0x7be>
      break;
 800c038:	bf00      	nop
 800c03a:	e000      	b.n	800c03e <tcp_process+0x7be>
      break;
 800c03c:	bf00      	nop
  }
  return ERR_OK;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	4618      	mov	r0, r3
 800c042:	3724      	adds	r7, #36	; 0x24
 800c044:	46bd      	mov	sp, r7
 800c046:	bd90      	pop	{r4, r7, pc}
 800c048:	2000ae64 	.word	0x2000ae64
 800c04c:	2000ae78 	.word	0x2000ae78
 800c050:	200008d8 	.word	0x200008d8
 800c054:	200008d0 	.word	0x200008d0
 800c058:	200008d9 	.word	0x200008d9
 800c05c:	2000ae68 	.word	0x2000ae68

0800c060 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c060:	b590      	push	{r4, r7, lr}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d106      	bne.n	800c07e <tcp_oos_insert_segment+0x1e>
 800c070:	4b3b      	ldr	r3, [pc, #236]	; (800c160 <tcp_oos_insert_segment+0x100>)
 800c072:	f240 421f 	movw	r2, #1055	; 0x41f
 800c076:	493b      	ldr	r1, [pc, #236]	; (800c164 <tcp_oos_insert_segment+0x104>)
 800c078:	483b      	ldr	r0, [pc, #236]	; (800c168 <tcp_oos_insert_segment+0x108>)
 800c07a:	f008 fc13 	bl	80148a4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	899b      	ldrh	r3, [r3, #12]
 800c084:	b29b      	uxth	r3, r3
 800c086:	4618      	mov	r0, r3
 800c088:	f7fb fa00 	bl	800748c <lwip_htons>
 800c08c:	4603      	mov	r3, r0
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	f003 0301 	and.w	r3, r3, #1
 800c094:	2b00      	cmp	r3, #0
 800c096:	d028      	beq.n	800c0ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c098:	6838      	ldr	r0, [r7, #0]
 800c09a:	f7fe f97d 	bl	800a398 <tcp_segs_free>
    next = NULL;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	603b      	str	r3, [r7, #0]
 800c0a2:	e056      	b.n	800c152 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	899b      	ldrh	r3, [r3, #12]
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7fb f9ed 	bl	800748c <lwip_htons>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	f003 0301 	and.w	r3, r3, #1
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00d      	beq.n	800c0da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	899b      	ldrh	r3, [r3, #12]
 800c0c4:	b29c      	uxth	r4, r3
 800c0c6:	2001      	movs	r0, #1
 800c0c8:	f7fb f9e0 	bl	800748c <lwip_htons>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	4322      	orrs	r2, r4
 800c0d6:	b292      	uxth	r2, r2
 800c0d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f7fe f96c 	bl	800a3c2 <tcp_seg_free>
    while (next &&
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00e      	beq.n	800c10e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	891b      	ldrh	r3, [r3, #8]
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	4b1d      	ldr	r3, [pc, #116]	; (800c16c <tcp_oos_insert_segment+0x10c>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	441a      	add	r2, r3
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	68db      	ldr	r3, [r3, #12]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	8909      	ldrh	r1, [r1, #8]
 800c106:	440b      	add	r3, r1
 800c108:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	daca      	bge.n	800c0a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d01e      	beq.n	800c152 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	891b      	ldrh	r3, [r3, #8]
 800c118:	461a      	mov	r2, r3
 800c11a:	4b14      	ldr	r3, [pc, #80]	; (800c16c <tcp_oos_insert_segment+0x10c>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	441a      	add	r2, r3
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c128:	2b00      	cmp	r3, #0
 800c12a:	dd12      	ble.n	800c152 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	b29a      	uxth	r2, r3
 800c134:	4b0d      	ldr	r3, [pc, #52]	; (800c16c <tcp_oos_insert_segment+0x10c>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	b29b      	uxth	r3, r3
 800c13a:	1ad3      	subs	r3, r2, r3
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	891b      	ldrh	r3, [r3, #8]
 800c14a:	4619      	mov	r1, r3
 800c14c:	4610      	mov	r0, r2
 800c14e:	f7fc fb75 	bl	800883c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	683a      	ldr	r2, [r7, #0]
 800c156:	601a      	str	r2, [r3, #0]
}
 800c158:	bf00      	nop
 800c15a:	3714      	adds	r7, #20
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd90      	pop	{r4, r7, pc}
 800c160:	08018530 	.word	0x08018530
 800c164:	080187f0 	.word	0x080187f0
 800c168:	0801857c 	.word	0x0801857c
 800c16c:	200008cc 	.word	0x200008cc

0800c170 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c170:	b5b0      	push	{r4, r5, r7, lr}
 800c172:	b086      	sub	sp, #24
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	607a      	str	r2, [r7, #4]
 800c17c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c17e:	e03e      	b.n	800c1fe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fc fd62 	bl	8008c58 <pbuf_clen>
 800c194:	4603      	mov	r3, r0
 800c196:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c19e:	8a7a      	ldrh	r2, [r7, #18]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d906      	bls.n	800c1b2 <tcp_free_acked_segments+0x42>
 800c1a4:	4b2a      	ldr	r3, [pc, #168]	; (800c250 <tcp_free_acked_segments+0xe0>)
 800c1a6:	f240 4257 	movw	r2, #1111	; 0x457
 800c1aa:	492a      	ldr	r1, [pc, #168]	; (800c254 <tcp_free_acked_segments+0xe4>)
 800c1ac:	482a      	ldr	r0, [pc, #168]	; (800c258 <tcp_free_acked_segments+0xe8>)
 800c1ae:	f008 fb79 	bl	80148a4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c1b8:	8a7b      	ldrh	r3, [r7, #18]
 800c1ba:	1ad3      	subs	r3, r2, r3
 800c1bc:	b29a      	uxth	r2, r3
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	891a      	ldrh	r2, [r3, #8]
 800c1c8:	4b24      	ldr	r3, [pc, #144]	; (800c25c <tcp_free_acked_segments+0xec>)
 800c1ca:	881b      	ldrh	r3, [r3, #0]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	4b22      	ldr	r3, [pc, #136]	; (800c25c <tcp_free_acked_segments+0xec>)
 800c1d2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c1d4:	6978      	ldr	r0, [r7, #20]
 800c1d6:	f7fe f8f4 	bl	800a3c2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00c      	beq.n	800c1fe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d109      	bne.n	800c1fe <tcp_free_acked_segments+0x8e>
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d106      	bne.n	800c1fe <tcp_free_acked_segments+0x8e>
 800c1f0:	4b17      	ldr	r3, [pc, #92]	; (800c250 <tcp_free_acked_segments+0xe0>)
 800c1f2:	f240 4261 	movw	r2, #1121	; 0x461
 800c1f6:	491a      	ldr	r1, [pc, #104]	; (800c260 <tcp_free_acked_segments+0xf0>)
 800c1f8:	4817      	ldr	r0, [pc, #92]	; (800c258 <tcp_free_acked_segments+0xe8>)
 800c1fa:	f008 fb53 	bl	80148a4 <iprintf>
  while (seg_list != NULL &&
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d020      	beq.n	800c246 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fb f953 	bl	80074b6 <lwip_htonl>
 800c210:	4604      	mov	r4, r0
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	891b      	ldrh	r3, [r3, #8]
 800c216:	461d      	mov	r5, r3
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	899b      	ldrh	r3, [r3, #12]
 800c21e:	b29b      	uxth	r3, r3
 800c220:	4618      	mov	r0, r3
 800c222:	f7fb f933 	bl	800748c <lwip_htons>
 800c226:	4603      	mov	r3, r0
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	f003 0303 	and.w	r3, r3, #3
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d001      	beq.n	800c236 <tcp_free_acked_segments+0xc6>
 800c232:	2301      	movs	r3, #1
 800c234:	e000      	b.n	800c238 <tcp_free_acked_segments+0xc8>
 800c236:	2300      	movs	r3, #0
 800c238:	442b      	add	r3, r5
 800c23a:	18e2      	adds	r2, r4, r3
 800c23c:	4b09      	ldr	r3, [pc, #36]	; (800c264 <tcp_free_acked_segments+0xf4>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c242:	2b00      	cmp	r3, #0
 800c244:	dd9c      	ble.n	800c180 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c246:	68bb      	ldr	r3, [r7, #8]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3718      	adds	r7, #24
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bdb0      	pop	{r4, r5, r7, pc}
 800c250:	08018530 	.word	0x08018530
 800c254:	08018818 	.word	0x08018818
 800c258:	0801857c 	.word	0x0801857c
 800c25c:	200008d4 	.word	0x200008d4
 800c260:	08018840 	.word	0x08018840
 800c264:	200008d0 	.word	0x200008d0

0800c268 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c268:	b5b0      	push	{r4, r5, r7, lr}
 800c26a:	b094      	sub	sp, #80	; 0x50
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c270:	2300      	movs	r3, #0
 800c272:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d106      	bne.n	800c288 <tcp_receive+0x20>
 800c27a:	4b91      	ldr	r3, [pc, #580]	; (800c4c0 <tcp_receive+0x258>)
 800c27c:	f240 427b 	movw	r2, #1147	; 0x47b
 800c280:	4990      	ldr	r1, [pc, #576]	; (800c4c4 <tcp_receive+0x25c>)
 800c282:	4891      	ldr	r0, [pc, #580]	; (800c4c8 <tcp_receive+0x260>)
 800c284:	f008 fb0e 	bl	80148a4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	7d1b      	ldrb	r3, [r3, #20]
 800c28c:	2b03      	cmp	r3, #3
 800c28e:	d806      	bhi.n	800c29e <tcp_receive+0x36>
 800c290:	4b8b      	ldr	r3, [pc, #556]	; (800c4c0 <tcp_receive+0x258>)
 800c292:	f240 427c 	movw	r2, #1148	; 0x47c
 800c296:	498d      	ldr	r1, [pc, #564]	; (800c4cc <tcp_receive+0x264>)
 800c298:	488b      	ldr	r0, [pc, #556]	; (800c4c8 <tcp_receive+0x260>)
 800c29a:	f008 fb03 	bl	80148a4 <iprintf>

  if (flags & TCP_ACK) {
 800c29e:	4b8c      	ldr	r3, [pc, #560]	; (800c4d0 <tcp_receive+0x268>)
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	f003 0310 	and.w	r3, r3, #16
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f000 8264 	beq.w	800c774 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2b8:	4413      	add	r3, r2
 800c2ba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2c0:	4b84      	ldr	r3, [pc, #528]	; (800c4d4 <tcp_receive+0x26c>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	db1b      	blt.n	800c302 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2ce:	4b81      	ldr	r3, [pc, #516]	; (800c4d4 <tcp_receive+0x26c>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d106      	bne.n	800c2e4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c2da:	4b7f      	ldr	r3, [pc, #508]	; (800c4d8 <tcp_receive+0x270>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	1ad3      	subs	r3, r2, r3
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	db0e      	blt.n	800c302 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c2e8:	4b7b      	ldr	r3, [pc, #492]	; (800c4d8 <tcp_receive+0x270>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d125      	bne.n	800c33c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c2f0:	4b7a      	ldr	r3, [pc, #488]	; (800c4dc <tcp_receive+0x274>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	89db      	ldrh	r3, [r3, #14]
 800c2f6:	b29a      	uxth	r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d91c      	bls.n	800c33c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c302:	4b76      	ldr	r3, [pc, #472]	; (800c4dc <tcp_receive+0x274>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	89db      	ldrh	r3, [r3, #14]
 800c308:	b29a      	uxth	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d205      	bcs.n	800c32c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c32c:	4b69      	ldr	r3, [pc, #420]	; (800c4d4 <tcp_receive+0x26c>)
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c334:	4b68      	ldr	r3, [pc, #416]	; (800c4d8 <tcp_receive+0x270>)
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c33c:	4b66      	ldr	r3, [pc, #408]	; (800c4d8 <tcp_receive+0x270>)
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c344:	1ad3      	subs	r3, r2, r3
 800c346:	2b00      	cmp	r3, #0
 800c348:	dc58      	bgt.n	800c3fc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c34a:	4b65      	ldr	r3, [pc, #404]	; (800c4e0 <tcp_receive+0x278>)
 800c34c:	881b      	ldrh	r3, [r3, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d14b      	bne.n	800c3ea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c35c:	4413      	add	r3, r2
 800c35e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c360:	429a      	cmp	r2, r3
 800c362:	d142      	bne.n	800c3ea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	db3d      	blt.n	800c3ea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c372:	4b59      	ldr	r3, [pc, #356]	; (800c4d8 <tcp_receive+0x270>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	429a      	cmp	r2, r3
 800c378:	d137      	bne.n	800c3ea <tcp_receive+0x182>
              found_dupack = 1;
 800c37a:	2301      	movs	r3, #1
 800c37c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c384:	2bff      	cmp	r3, #255	; 0xff
 800c386:	d007      	beq.n	800c398 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c38e:	3301      	adds	r3, #1
 800c390:	b2da      	uxtb	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c39e:	2b03      	cmp	r3, #3
 800c3a0:	d91b      	bls.n	800c3da <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c3ac:	4413      	add	r3, r2
 800c3ae:	b29a      	uxth	r2, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d30a      	bcc.n	800c3d0 <tcp_receive+0x168>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c3c4:	4413      	add	r3, r2
 800c3c6:	b29a      	uxth	r2, r3
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c3ce:	e004      	b.n	800c3da <tcp_receive+0x172>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d902      	bls.n	800c3ea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f002 fb45 	bl	800ea74 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c3ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f040 8161 	bne.w	800c6b4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c3fa:	e15b      	b.n	800c6b4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c3fc:	4b36      	ldr	r3, [pc, #216]	; (800c4d8 <tcp_receive+0x270>)
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c404:	1ad3      	subs	r3, r2, r3
 800c406:	3b01      	subs	r3, #1
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f2c0 814e 	blt.w	800c6aa <tcp_receive+0x442>
 800c40e:	4b32      	ldr	r3, [pc, #200]	; (800c4d8 <tcp_receive+0x270>)
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f300 8146 	bgt.w	800c6aa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	8b5b      	ldrh	r3, [r3, #26]
 800c422:	f003 0304 	and.w	r3, r3, #4
 800c426:	2b00      	cmp	r3, #0
 800c428:	d010      	beq.n	800c44c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	8b5b      	ldrh	r3, [r3, #26]
 800c42e:	f023 0304 	bic.w	r3, r3, #4
 800c432:	b29a      	uxth	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c45a:	10db      	asrs	r3, r3, #3
 800c45c:	b21b      	sxth	r3, r3
 800c45e:	b29a      	uxth	r2, r3
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c466:	b29b      	uxth	r3, r3
 800c468:	4413      	add	r3, r2
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	b21a      	sxth	r2, r3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c474:	4b18      	ldr	r3, [pc, #96]	; (800c4d8 <tcp_receive+0x270>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	b29a      	uxth	r2, r3
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c47e:	b29b      	uxth	r3, r3
 800c480:	1ad3      	subs	r3, r2, r3
 800c482:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c48c:	4b12      	ldr	r3, [pc, #72]	; (800c4d8 <tcp_receive+0x270>)
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	7d1b      	ldrb	r3, [r3, #20]
 800c498:	2b03      	cmp	r3, #3
 800c49a:	f240 8097 	bls.w	800c5cc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d245      	bcs.n	800c53a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	8b5b      	ldrh	r3, [r3, #26]
 800c4b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d014      	beq.n	800c4e4 <tcp_receive+0x27c>
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e013      	b.n	800c4e6 <tcp_receive+0x27e>
 800c4be:	bf00      	nop
 800c4c0:	08018530 	.word	0x08018530
 800c4c4:	08018860 	.word	0x08018860
 800c4c8:	0801857c 	.word	0x0801857c
 800c4cc:	0801887c 	.word	0x0801887c
 800c4d0:	200008d8 	.word	0x200008d8
 800c4d4:	200008cc 	.word	0x200008cc
 800c4d8:	200008d0 	.word	0x200008d0
 800c4dc:	200008bc 	.word	0x200008bc
 800c4e0:	200008d6 	.word	0x200008d6
 800c4e4:	2302      	movs	r3, #2
 800c4e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c4ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c4ee:	b29a      	uxth	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c4f4:	fb12 f303 	smulbb	r3, r2, r3
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	bf28      	it	cs
 800c500:	4613      	movcs	r3, r2
 800c502:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c50a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c50c:	4413      	add	r3, r2
 800c50e:	b29a      	uxth	r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c516:	429a      	cmp	r2, r3
 800c518:	d309      	bcc.n	800c52e <tcp_receive+0x2c6>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c520:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c522:	4413      	add	r3, r2
 800c524:	b29a      	uxth	r2, r3
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c52c:	e04e      	b.n	800c5cc <tcp_receive+0x364>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c534:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c538:	e048      	b.n	800c5cc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c540:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c542:	4413      	add	r3, r2
 800c544:	b29a      	uxth	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d309      	bcc.n	800c564 <tcp_receive+0x2fc>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c556:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c558:	4413      	add	r3, r2
 800c55a:	b29a      	uxth	r2, r3
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c562:	e004      	b.n	800c56e <tcp_receive+0x306>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c56a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d326      	bcc.n	800c5cc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	b29a      	uxth	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c59e:	4413      	add	r3, r2
 800c5a0:	b29a      	uxth	r2, r3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d30a      	bcc.n	800c5c2 <tcp_receive+0x35a>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5b6:	4413      	add	r3, r2
 800c5b8:	b29a      	uxth	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c5c0:	e004      	b.n	800c5cc <tcp_receive+0x364>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d4:	4a98      	ldr	r2, [pc, #608]	; (800c838 <tcp_receive+0x5d0>)
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7ff fdca 	bl	800c170 <tcp_free_acked_segments>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ea:	4a94      	ldr	r2, [pc, #592]	; (800c83c <tcp_receive+0x5d4>)
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7ff fdbf 	bl	800c170 <tcp_free_acked_segments>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d104      	bne.n	800c60a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c606:	861a      	strh	r2, [r3, #48]	; 0x30
 800c608:	e002      	b.n	800c610 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2200      	movs	r2, #0
 800c60e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d103      	bne.n	800c626 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c62c:	4b84      	ldr	r3, [pc, #528]	; (800c840 <tcp_receive+0x5d8>)
 800c62e:	881b      	ldrh	r3, [r3, #0]
 800c630:	4413      	add	r3, r2
 800c632:	b29a      	uxth	r2, r3
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	8b5b      	ldrh	r3, [r3, #26]
 800c63e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c642:	2b00      	cmp	r3, #0
 800c644:	d035      	beq.n	800c6b2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d118      	bne.n	800c680 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c652:	2b00      	cmp	r3, #0
 800c654:	d00c      	beq.n	800c670 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	4618      	mov	r0, r3
 800c664:	f7fa ff27 	bl	80074b6 <lwip_htonl>
 800c668:	4603      	mov	r3, r0
 800c66a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	dc20      	bgt.n	800c6b2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	8b5b      	ldrh	r3, [r3, #26]
 800c674:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c678:	b29a      	uxth	r2, r3
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c67e:	e018      	b.n	800c6b2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7fa ff12 	bl	80074b6 <lwip_htonl>
 800c692:	4603      	mov	r3, r0
 800c694:	1ae3      	subs	r3, r4, r3
 800c696:	2b00      	cmp	r3, #0
 800c698:	dc0b      	bgt.n	800c6b2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	8b5b      	ldrh	r3, [r3, #26]
 800c69e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6a2:	b29a      	uxth	r2, r3
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c6a8:	e003      	b.n	800c6b2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f002 fbce 	bl	800ee4c <tcp_send_empty_ack>
 800c6b0:	e000      	b.n	800c6b4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c6b2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d05b      	beq.n	800c774 <tcp_receive+0x50c>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6c0:	4b60      	ldr	r3, [pc, #384]	; (800c844 <tcp_receive+0x5dc>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	1ad3      	subs	r3, r2, r3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	da54      	bge.n	800c774 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c6ca:	4b5f      	ldr	r3, [pc, #380]	; (800c848 <tcp_receive+0x5e0>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	b29a      	uxth	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	1ad3      	subs	r3, r2, r3
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c6de:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c6e8:	10db      	asrs	r3, r3, #3
 800c6ea:	b21b      	sxth	r3, r3
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c6fc:	b29a      	uxth	r2, r3
 800c6fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c702:	4413      	add	r3, r2
 800c704:	b29b      	uxth	r3, r3
 800c706:	b21a      	sxth	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c70c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c710:	2b00      	cmp	r3, #0
 800c712:	da05      	bge.n	800c720 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800c714:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c718:	425b      	negs	r3, r3
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c720:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c72a:	109b      	asrs	r3, r3, #2
 800c72c:	b21b      	sxth	r3, r3
 800c72e:	b29b      	uxth	r3, r3
 800c730:	1ad3      	subs	r3, r2, r3
 800c732:	b29b      	uxth	r3, r3
 800c734:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c73e:	b29a      	uxth	r2, r3
 800c740:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c744:	4413      	add	r3, r2
 800c746:	b29b      	uxth	r3, r3
 800c748:	b21a      	sxth	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c754:	10db      	asrs	r3, r3, #3
 800c756:	b21b      	sxth	r3, r3
 800c758:	b29a      	uxth	r2, r3
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c760:	b29b      	uxth	r3, r3
 800c762:	4413      	add	r3, r2
 800c764:	b29b      	uxth	r3, r3
 800c766:	b21a      	sxth	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c774:	4b35      	ldr	r3, [pc, #212]	; (800c84c <tcp_receive+0x5e4>)
 800c776:	881b      	ldrh	r3, [r3, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f000 84e2 	beq.w	800d142 <tcp_receive+0xeda>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	7d1b      	ldrb	r3, [r3, #20]
 800c782:	2b06      	cmp	r3, #6
 800c784:	f200 84dd 	bhi.w	800d142 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c78c:	4b30      	ldr	r3, [pc, #192]	; (800c850 <tcp_receive+0x5e8>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	1ad3      	subs	r3, r2, r3
 800c792:	3b01      	subs	r3, #1
 800c794:	2b00      	cmp	r3, #0
 800c796:	f2c0 808f 	blt.w	800c8b8 <tcp_receive+0x650>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c79e:	4b2b      	ldr	r3, [pc, #172]	; (800c84c <tcp_receive+0x5e4>)
 800c7a0:	881b      	ldrh	r3, [r3, #0]
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	4b2a      	ldr	r3, [pc, #168]	; (800c850 <tcp_receive+0x5e8>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	440b      	add	r3, r1
 800c7aa:	1ad3      	subs	r3, r2, r3
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f300 8082 	bgt.w	800c8b8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c7b4:	4b27      	ldr	r3, [pc, #156]	; (800c854 <tcp_receive+0x5ec>)
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7be:	4b24      	ldr	r3, [pc, #144]	; (800c850 <tcp_receive+0x5e8>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c7c6:	4b23      	ldr	r3, [pc, #140]	; (800c854 <tcp_receive+0x5ec>)
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d106      	bne.n	800c7dc <tcp_receive+0x574>
 800c7ce:	4b22      	ldr	r3, [pc, #136]	; (800c858 <tcp_receive+0x5f0>)
 800c7d0:	f240 5294 	movw	r2, #1428	; 0x594
 800c7d4:	4921      	ldr	r1, [pc, #132]	; (800c85c <tcp_receive+0x5f4>)
 800c7d6:	4822      	ldr	r0, [pc, #136]	; (800c860 <tcp_receive+0x5f8>)
 800c7d8:	f008 f864 	bl	80148a4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d906      	bls.n	800c7f4 <tcp_receive+0x58c>
 800c7e6:	4b1c      	ldr	r3, [pc, #112]	; (800c858 <tcp_receive+0x5f0>)
 800c7e8:	f240 5295 	movw	r2, #1429	; 0x595
 800c7ec:	491d      	ldr	r1, [pc, #116]	; (800c864 <tcp_receive+0x5fc>)
 800c7ee:	481c      	ldr	r0, [pc, #112]	; (800c860 <tcp_receive+0x5f8>)
 800c7f0:	f008 f858 	bl	80148a4 <iprintf>
      off = (u16_t)off32;
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c7fa:	4b16      	ldr	r3, [pc, #88]	; (800c854 <tcp_receive+0x5ec>)
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	891b      	ldrh	r3, [r3, #8]
 800c800:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c804:	429a      	cmp	r2, r3
 800c806:	d906      	bls.n	800c816 <tcp_receive+0x5ae>
 800c808:	4b13      	ldr	r3, [pc, #76]	; (800c858 <tcp_receive+0x5f0>)
 800c80a:	f240 5297 	movw	r2, #1431	; 0x597
 800c80e:	4916      	ldr	r1, [pc, #88]	; (800c868 <tcp_receive+0x600>)
 800c810:	4813      	ldr	r0, [pc, #76]	; (800c860 <tcp_receive+0x5f8>)
 800c812:	f008 f847 	bl	80148a4 <iprintf>
      inseg.len -= off;
 800c816:	4b0f      	ldr	r3, [pc, #60]	; (800c854 <tcp_receive+0x5ec>)
 800c818:	891a      	ldrh	r2, [r3, #8]
 800c81a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c81e:	1ad3      	subs	r3, r2, r3
 800c820:	b29a      	uxth	r2, r3
 800c822:	4b0c      	ldr	r3, [pc, #48]	; (800c854 <tcp_receive+0x5ec>)
 800c824:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c826:	4b0b      	ldr	r3, [pc, #44]	; (800c854 <tcp_receive+0x5ec>)
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	891a      	ldrh	r2, [r3, #8]
 800c82c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c830:	1ad3      	subs	r3, r2, r3
 800c832:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c834:	e02a      	b.n	800c88c <tcp_receive+0x624>
 800c836:	bf00      	nop
 800c838:	08018898 	.word	0x08018898
 800c83c:	080188a0 	.word	0x080188a0
 800c840:	200008d4 	.word	0x200008d4
 800c844:	200008d0 	.word	0x200008d0
 800c848:	2000ae6c 	.word	0x2000ae6c
 800c84c:	200008d6 	.word	0x200008d6
 800c850:	200008cc 	.word	0x200008cc
 800c854:	200008ac 	.word	0x200008ac
 800c858:	08018530 	.word	0x08018530
 800c85c:	080188a8 	.word	0x080188a8
 800c860:	0801857c 	.word	0x0801857c
 800c864:	080188b8 	.word	0x080188b8
 800c868:	080188c8 	.word	0x080188c8
        off -= p->len;
 800c86c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c86e:	895b      	ldrh	r3, [r3, #10]
 800c870:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c874:	1ad3      	subs	r3, r2, r3
 800c876:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c87a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c87c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c87e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c882:	2200      	movs	r2, #0
 800c884:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c88c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c88e:	895b      	ldrh	r3, [r3, #10]
 800c890:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c894:	429a      	cmp	r2, r3
 800c896:	d8e9      	bhi.n	800c86c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c898:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c89c:	4619      	mov	r1, r3
 800c89e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c8a0:	f7fc f8cc 	bl	8008a3c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a8:	4a91      	ldr	r2, [pc, #580]	; (800caf0 <tcp_receive+0x888>)
 800c8aa:	6013      	str	r3, [r2, #0]
 800c8ac:	4b91      	ldr	r3, [pc, #580]	; (800caf4 <tcp_receive+0x88c>)
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	4a8f      	ldr	r2, [pc, #572]	; (800caf0 <tcp_receive+0x888>)
 800c8b2:	6812      	ldr	r2, [r2, #0]
 800c8b4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c8b6:	e00d      	b.n	800c8d4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c8b8:	4b8d      	ldr	r3, [pc, #564]	; (800caf0 <tcp_receive+0x888>)
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c0:	1ad3      	subs	r3, r2, r3
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	da06      	bge.n	800c8d4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	8b5b      	ldrh	r3, [r3, #26]
 800c8ca:	f043 0302 	orr.w	r3, r3, #2
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c8d4:	4b86      	ldr	r3, [pc, #536]	; (800caf0 <tcp_receive+0x888>)
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	f2c0 842a 	blt.w	800d138 <tcp_receive+0xed0>
 800c8e4:	4b82      	ldr	r3, [pc, #520]	; (800caf0 <tcp_receive+0x888>)
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ec:	6879      	ldr	r1, [r7, #4]
 800c8ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c8f0:	440b      	add	r3, r1
 800c8f2:	1ad3      	subs	r3, r2, r3
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f300 841e 	bgt.w	800d138 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c900:	4b7b      	ldr	r3, [pc, #492]	; (800caf0 <tcp_receive+0x888>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	429a      	cmp	r2, r3
 800c906:	f040 829a 	bne.w	800ce3e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c90a:	4b7a      	ldr	r3, [pc, #488]	; (800caf4 <tcp_receive+0x88c>)
 800c90c:	891c      	ldrh	r4, [r3, #8]
 800c90e:	4b79      	ldr	r3, [pc, #484]	; (800caf4 <tcp_receive+0x88c>)
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	899b      	ldrh	r3, [r3, #12]
 800c914:	b29b      	uxth	r3, r3
 800c916:	4618      	mov	r0, r3
 800c918:	f7fa fdb8 	bl	800748c <lwip_htons>
 800c91c:	4603      	mov	r3, r0
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	f003 0303 	and.w	r3, r3, #3
 800c924:	2b00      	cmp	r3, #0
 800c926:	d001      	beq.n	800c92c <tcp_receive+0x6c4>
 800c928:	2301      	movs	r3, #1
 800c92a:	e000      	b.n	800c92e <tcp_receive+0x6c6>
 800c92c:	2300      	movs	r3, #0
 800c92e:	4423      	add	r3, r4
 800c930:	b29a      	uxth	r2, r3
 800c932:	4b71      	ldr	r3, [pc, #452]	; (800caf8 <tcp_receive+0x890>)
 800c934:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c93a:	4b6f      	ldr	r3, [pc, #444]	; (800caf8 <tcp_receive+0x890>)
 800c93c:	881b      	ldrh	r3, [r3, #0]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d275      	bcs.n	800ca2e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c942:	4b6c      	ldr	r3, [pc, #432]	; (800caf4 <tcp_receive+0x88c>)
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	899b      	ldrh	r3, [r3, #12]
 800c948:	b29b      	uxth	r3, r3
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7fa fd9e 	bl	800748c <lwip_htons>
 800c950:	4603      	mov	r3, r0
 800c952:	b2db      	uxtb	r3, r3
 800c954:	f003 0301 	and.w	r3, r3, #1
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d01f      	beq.n	800c99c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c95c:	4b65      	ldr	r3, [pc, #404]	; (800caf4 <tcp_receive+0x88c>)
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	899b      	ldrh	r3, [r3, #12]
 800c962:	b29b      	uxth	r3, r3
 800c964:	b21b      	sxth	r3, r3
 800c966:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c96a:	b21c      	sxth	r4, r3
 800c96c:	4b61      	ldr	r3, [pc, #388]	; (800caf4 <tcp_receive+0x88c>)
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	899b      	ldrh	r3, [r3, #12]
 800c972:	b29b      	uxth	r3, r3
 800c974:	4618      	mov	r0, r3
 800c976:	f7fa fd89 	bl	800748c <lwip_htons>
 800c97a:	4603      	mov	r3, r0
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	b29b      	uxth	r3, r3
 800c980:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c984:	b29b      	uxth	r3, r3
 800c986:	4618      	mov	r0, r3
 800c988:	f7fa fd80 	bl	800748c <lwip_htons>
 800c98c:	4603      	mov	r3, r0
 800c98e:	b21b      	sxth	r3, r3
 800c990:	4323      	orrs	r3, r4
 800c992:	b21a      	sxth	r2, r3
 800c994:	4b57      	ldr	r3, [pc, #348]	; (800caf4 <tcp_receive+0x88c>)
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	b292      	uxth	r2, r2
 800c99a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c9a0:	4b54      	ldr	r3, [pc, #336]	; (800caf4 <tcp_receive+0x88c>)
 800c9a2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c9a4:	4b53      	ldr	r3, [pc, #332]	; (800caf4 <tcp_receive+0x88c>)
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	899b      	ldrh	r3, [r3, #12]
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7fa fd6d 	bl	800748c <lwip_htons>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	f003 0302 	and.w	r3, r3, #2
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d005      	beq.n	800c9ca <tcp_receive+0x762>
            inseg.len -= 1;
 800c9be:	4b4d      	ldr	r3, [pc, #308]	; (800caf4 <tcp_receive+0x88c>)
 800c9c0:	891b      	ldrh	r3, [r3, #8]
 800c9c2:	3b01      	subs	r3, #1
 800c9c4:	b29a      	uxth	r2, r3
 800c9c6:	4b4b      	ldr	r3, [pc, #300]	; (800caf4 <tcp_receive+0x88c>)
 800c9c8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c9ca:	4b4a      	ldr	r3, [pc, #296]	; (800caf4 <tcp_receive+0x88c>)
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	4a49      	ldr	r2, [pc, #292]	; (800caf4 <tcp_receive+0x88c>)
 800c9d0:	8912      	ldrh	r2, [r2, #8]
 800c9d2:	4611      	mov	r1, r2
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7fb ff31 	bl	800883c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c9da:	4b46      	ldr	r3, [pc, #280]	; (800caf4 <tcp_receive+0x88c>)
 800c9dc:	891c      	ldrh	r4, [r3, #8]
 800c9de:	4b45      	ldr	r3, [pc, #276]	; (800caf4 <tcp_receive+0x88c>)
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	899b      	ldrh	r3, [r3, #12]
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7fa fd50 	bl	800748c <lwip_htons>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	f003 0303 	and.w	r3, r3, #3
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d001      	beq.n	800c9fc <tcp_receive+0x794>
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e000      	b.n	800c9fe <tcp_receive+0x796>
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	4423      	add	r3, r4
 800ca00:	b29a      	uxth	r2, r3
 800ca02:	4b3d      	ldr	r3, [pc, #244]	; (800caf8 <tcp_receive+0x890>)
 800ca04:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ca06:	4b3c      	ldr	r3, [pc, #240]	; (800caf8 <tcp_receive+0x890>)
 800ca08:	881b      	ldrh	r3, [r3, #0]
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	4b38      	ldr	r3, [pc, #224]	; (800caf0 <tcp_receive+0x888>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	441a      	add	r2, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca16:	6879      	ldr	r1, [r7, #4]
 800ca18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ca1a:	440b      	add	r3, r1
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d006      	beq.n	800ca2e <tcp_receive+0x7c6>
 800ca20:	4b36      	ldr	r3, [pc, #216]	; (800cafc <tcp_receive+0x894>)
 800ca22:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ca26:	4936      	ldr	r1, [pc, #216]	; (800cb00 <tcp_receive+0x898>)
 800ca28:	4836      	ldr	r0, [pc, #216]	; (800cb04 <tcp_receive+0x89c>)
 800ca2a:	f007 ff3b 	bl	80148a4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	f000 80e7 	beq.w	800cc06 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ca38:	4b2e      	ldr	r3, [pc, #184]	; (800caf4 <tcp_receive+0x88c>)
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	899b      	ldrh	r3, [r3, #12]
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7fa fd23 	bl	800748c <lwip_htons>
 800ca46:	4603      	mov	r3, r0
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	f003 0301 	and.w	r3, r3, #1
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d010      	beq.n	800ca74 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ca52:	e00a      	b.n	800ca6a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca58:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f7fd fcac 	bl	800a3c2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1f0      	bne.n	800ca54 <tcp_receive+0x7ec>
 800ca72:	e0c8      	b.n	800cc06 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca78:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ca7a:	e052      	b.n	800cb22 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ca7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	899b      	ldrh	r3, [r3, #12]
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7fa fd01 	bl	800748c <lwip_htons>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	f003 0301 	and.w	r3, r3, #1
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d03d      	beq.n	800cb12 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ca96:	4b17      	ldr	r3, [pc, #92]	; (800caf4 <tcp_receive+0x88c>)
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	899b      	ldrh	r3, [r3, #12]
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7fa fcf4 	bl	800748c <lwip_htons>
 800caa4:	4603      	mov	r3, r0
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800caac:	2b00      	cmp	r3, #0
 800caae:	d130      	bne.n	800cb12 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cab0:	4b10      	ldr	r3, [pc, #64]	; (800caf4 <tcp_receive+0x88c>)
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	899b      	ldrh	r3, [r3, #12]
 800cab6:	b29c      	uxth	r4, r3
 800cab8:	2001      	movs	r0, #1
 800caba:	f7fa fce7 	bl	800748c <lwip_htons>
 800cabe:	4603      	mov	r3, r0
 800cac0:	461a      	mov	r2, r3
 800cac2:	4b0c      	ldr	r3, [pc, #48]	; (800caf4 <tcp_receive+0x88c>)
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	4322      	orrs	r2, r4
 800cac8:	b292      	uxth	r2, r2
 800caca:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800cacc:	4b09      	ldr	r3, [pc, #36]	; (800caf4 <tcp_receive+0x88c>)
 800cace:	891c      	ldrh	r4, [r3, #8]
 800cad0:	4b08      	ldr	r3, [pc, #32]	; (800caf4 <tcp_receive+0x88c>)
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	899b      	ldrh	r3, [r3, #12]
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fa fcd7 	bl	800748c <lwip_htons>
 800cade:	4603      	mov	r3, r0
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	f003 0303 	and.w	r3, r3, #3
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d00e      	beq.n	800cb08 <tcp_receive+0x8a0>
 800caea:	2301      	movs	r3, #1
 800caec:	e00d      	b.n	800cb0a <tcp_receive+0x8a2>
 800caee:	bf00      	nop
 800caf0:	200008cc 	.word	0x200008cc
 800caf4:	200008ac 	.word	0x200008ac
 800caf8:	200008d6 	.word	0x200008d6
 800cafc:	08018530 	.word	0x08018530
 800cb00:	080188d8 	.word	0x080188d8
 800cb04:	0801857c 	.word	0x0801857c
 800cb08:	2300      	movs	r3, #0
 800cb0a:	4423      	add	r3, r4
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	4b98      	ldr	r3, [pc, #608]	; (800cd70 <tcp_receive+0xb08>)
 800cb10:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800cb12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb14:	613b      	str	r3, [r7, #16]
              next = next->next;
 800cb16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800cb1c:	6938      	ldr	r0, [r7, #16]
 800cb1e:	f7fd fc50 	bl	800a3c2 <tcp_seg_free>
            while (next &&
 800cb22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00e      	beq.n	800cb46 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800cb28:	4b91      	ldr	r3, [pc, #580]	; (800cd70 <tcp_receive+0xb08>)
 800cb2a:	881b      	ldrh	r3, [r3, #0]
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	4b91      	ldr	r3, [pc, #580]	; (800cd74 <tcp_receive+0xb0c>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	441a      	add	r2, r3
 800cb34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb3c:	8909      	ldrh	r1, [r1, #8]
 800cb3e:	440b      	add	r3, r1
 800cb40:	1ad3      	subs	r3, r2, r3
            while (next &&
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	da9a      	bge.n	800ca7c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800cb46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d059      	beq.n	800cc00 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800cb4c:	4b88      	ldr	r3, [pc, #544]	; (800cd70 <tcp_receive+0xb08>)
 800cb4e:	881b      	ldrh	r3, [r3, #0]
 800cb50:	461a      	mov	r2, r3
 800cb52:	4b88      	ldr	r3, [pc, #544]	; (800cd74 <tcp_receive+0xb0c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	441a      	add	r2, r3
 800cb58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	dd4d      	ble.n	800cc00 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800cb64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	4b81      	ldr	r3, [pc, #516]	; (800cd74 <tcp_receive+0xb0c>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	1ad3      	subs	r3, r2, r3
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	4b80      	ldr	r3, [pc, #512]	; (800cd78 <tcp_receive+0xb10>)
 800cb78:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cb7a:	4b7f      	ldr	r3, [pc, #508]	; (800cd78 <tcp_receive+0xb10>)
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	899b      	ldrh	r3, [r3, #12]
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fa fc82 	bl	800748c <lwip_htons>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	f003 0302 	and.w	r3, r3, #2
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d005      	beq.n	800cba0 <tcp_receive+0x938>
                inseg.len -= 1;
 800cb94:	4b78      	ldr	r3, [pc, #480]	; (800cd78 <tcp_receive+0xb10>)
 800cb96:	891b      	ldrh	r3, [r3, #8]
 800cb98:	3b01      	subs	r3, #1
 800cb9a:	b29a      	uxth	r2, r3
 800cb9c:	4b76      	ldr	r3, [pc, #472]	; (800cd78 <tcp_receive+0xb10>)
 800cb9e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800cba0:	4b75      	ldr	r3, [pc, #468]	; (800cd78 <tcp_receive+0xb10>)
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	4a74      	ldr	r2, [pc, #464]	; (800cd78 <tcp_receive+0xb10>)
 800cba6:	8912      	ldrh	r2, [r2, #8]
 800cba8:	4611      	mov	r1, r2
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7fb fe46 	bl	800883c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800cbb0:	4b71      	ldr	r3, [pc, #452]	; (800cd78 <tcp_receive+0xb10>)
 800cbb2:	891c      	ldrh	r4, [r3, #8]
 800cbb4:	4b70      	ldr	r3, [pc, #448]	; (800cd78 <tcp_receive+0xb10>)
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	899b      	ldrh	r3, [r3, #12]
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f7fa fc65 	bl	800748c <lwip_htons>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	f003 0303 	and.w	r3, r3, #3
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d001      	beq.n	800cbd2 <tcp_receive+0x96a>
 800cbce:	2301      	movs	r3, #1
 800cbd0:	e000      	b.n	800cbd4 <tcp_receive+0x96c>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	4423      	add	r3, r4
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	4b65      	ldr	r3, [pc, #404]	; (800cd70 <tcp_receive+0xb08>)
 800cbda:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800cbdc:	4b64      	ldr	r3, [pc, #400]	; (800cd70 <tcp_receive+0xb08>)
 800cbde:	881b      	ldrh	r3, [r3, #0]
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	4b64      	ldr	r3, [pc, #400]	; (800cd74 <tcp_receive+0xb0c>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	441a      	add	r2, r3
 800cbe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d006      	beq.n	800cc00 <tcp_receive+0x998>
 800cbf2:	4b62      	ldr	r3, [pc, #392]	; (800cd7c <tcp_receive+0xb14>)
 800cbf4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800cbf8:	4961      	ldr	r1, [pc, #388]	; (800cd80 <tcp_receive+0xb18>)
 800cbfa:	4862      	ldr	r0, [pc, #392]	; (800cd84 <tcp_receive+0xb1c>)
 800cbfc:	f007 fe52 	bl	80148a4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc04:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800cc06:	4b5a      	ldr	r3, [pc, #360]	; (800cd70 <tcp_receive+0xb08>)
 800cc08:	881b      	ldrh	r3, [r3, #0]
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	4b59      	ldr	r3, [pc, #356]	; (800cd74 <tcp_receive+0xb0c>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	441a      	add	r2, r3
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cc1a:	4b55      	ldr	r3, [pc, #340]	; (800cd70 <tcp_receive+0xb08>)
 800cc1c:	881b      	ldrh	r3, [r3, #0]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d206      	bcs.n	800cc30 <tcp_receive+0x9c8>
 800cc22:	4b56      	ldr	r3, [pc, #344]	; (800cd7c <tcp_receive+0xb14>)
 800cc24:	f240 6207 	movw	r2, #1543	; 0x607
 800cc28:	4957      	ldr	r1, [pc, #348]	; (800cd88 <tcp_receive+0xb20>)
 800cc2a:	4856      	ldr	r0, [pc, #344]	; (800cd84 <tcp_receive+0xb1c>)
 800cc2c:	f007 fe3a 	bl	80148a4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cc34:	4b4e      	ldr	r3, [pc, #312]	; (800cd70 <tcp_receive+0xb08>)
 800cc36:	881b      	ldrh	r3, [r3, #0]
 800cc38:	1ad3      	subs	r3, r2, r3
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f7fc fe99 	bl	8009978 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800cc46:	4b4c      	ldr	r3, [pc, #304]	; (800cd78 <tcp_receive+0xb10>)
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	891b      	ldrh	r3, [r3, #8]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d006      	beq.n	800cc5e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800cc50:	4b49      	ldr	r3, [pc, #292]	; (800cd78 <tcp_receive+0xb10>)
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	4a4d      	ldr	r2, [pc, #308]	; (800cd8c <tcp_receive+0xb24>)
 800cc56:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800cc58:	4b47      	ldr	r3, [pc, #284]	; (800cd78 <tcp_receive+0xb10>)
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cc5e:	4b46      	ldr	r3, [pc, #280]	; (800cd78 <tcp_receive+0xb10>)
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	899b      	ldrh	r3, [r3, #12]
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7fa fc10 	bl	800748c <lwip_htons>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	f003 0301 	and.w	r3, r3, #1
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f000 80b8 	beq.w	800cdea <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800cc7a:	4b45      	ldr	r3, [pc, #276]	; (800cd90 <tcp_receive+0xb28>)
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	f043 0320 	orr.w	r3, r3, #32
 800cc82:	b2da      	uxtb	r2, r3
 800cc84:	4b42      	ldr	r3, [pc, #264]	; (800cd90 <tcp_receive+0xb28>)
 800cc86:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800cc88:	e0af      	b.n	800cdea <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc8e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc94:	68db      	ldr	r3, [r3, #12]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	4a36      	ldr	r2, [pc, #216]	; (800cd74 <tcp_receive+0xb0c>)
 800cc9a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	891b      	ldrh	r3, [r3, #8]
 800cca0:	461c      	mov	r4, r3
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	68db      	ldr	r3, [r3, #12]
 800cca6:	899b      	ldrh	r3, [r3, #12]
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f7fa fbee 	bl	800748c <lwip_htons>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	f003 0303 	and.w	r3, r3, #3
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d001      	beq.n	800ccc0 <tcp_receive+0xa58>
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e000      	b.n	800ccc2 <tcp_receive+0xa5a>
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	191a      	adds	r2, r3, r4
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc8:	441a      	add	r2, r3
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccd2:	461c      	mov	r4, r3
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	891b      	ldrh	r3, [r3, #8]
 800ccd8:	461d      	mov	r5, r3
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	899b      	ldrh	r3, [r3, #12]
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7fa fbd2 	bl	800748c <lwip_htons>
 800cce8:	4603      	mov	r3, r0
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	f003 0303 	and.w	r3, r3, #3
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d001      	beq.n	800ccf8 <tcp_receive+0xa90>
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	e000      	b.n	800ccfa <tcp_receive+0xa92>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	442b      	add	r3, r5
 800ccfc:	429c      	cmp	r4, r3
 800ccfe:	d206      	bcs.n	800cd0e <tcp_receive+0xaa6>
 800cd00:	4b1e      	ldr	r3, [pc, #120]	; (800cd7c <tcp_receive+0xb14>)
 800cd02:	f240 622b 	movw	r2, #1579	; 0x62b
 800cd06:	4923      	ldr	r1, [pc, #140]	; (800cd94 <tcp_receive+0xb2c>)
 800cd08:	481e      	ldr	r0, [pc, #120]	; (800cd84 <tcp_receive+0xb1c>)
 800cd0a:	f007 fdcb 	bl	80148a4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	891b      	ldrh	r3, [r3, #8]
 800cd12:	461c      	mov	r4, r3
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	899b      	ldrh	r3, [r3, #12]
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fa fbb5 	bl	800748c <lwip_htons>
 800cd22:	4603      	mov	r3, r0
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	f003 0303 	and.w	r3, r3, #3
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d001      	beq.n	800cd32 <tcp_receive+0xaca>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e000      	b.n	800cd34 <tcp_receive+0xacc>
 800cd32:	2300      	movs	r3, #0
 800cd34:	1919      	adds	r1, r3, r4
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd3a:	b28b      	uxth	r3, r1
 800cd3c:	1ad3      	subs	r3, r2, r3
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f7fc fe17 	bl	8009978 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	891b      	ldrh	r3, [r3, #8]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d028      	beq.n	800cda6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800cd54:	4b0d      	ldr	r3, [pc, #52]	; (800cd8c <tcp_receive+0xb24>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d01d      	beq.n	800cd98 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800cd5c:	4b0b      	ldr	r3, [pc, #44]	; (800cd8c <tcp_receive+0xb24>)
 800cd5e:	681a      	ldr	r2, [r3, #0]
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	4619      	mov	r1, r3
 800cd66:	4610      	mov	r0, r2
 800cd68:	f7fb ffb0 	bl	8008ccc <pbuf_cat>
 800cd6c:	e018      	b.n	800cda0 <tcp_receive+0xb38>
 800cd6e:	bf00      	nop
 800cd70:	200008d6 	.word	0x200008d6
 800cd74:	200008cc 	.word	0x200008cc
 800cd78:	200008ac 	.word	0x200008ac
 800cd7c:	08018530 	.word	0x08018530
 800cd80:	08018910 	.word	0x08018910
 800cd84:	0801857c 	.word	0x0801857c
 800cd88:	0801894c 	.word	0x0801894c
 800cd8c:	200008dc 	.word	0x200008dc
 800cd90:	200008d9 	.word	0x200008d9
 800cd94:	0801896c 	.word	0x0801896c
            } else {
              recv_data = cseg->p;
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	4a70      	ldr	r2, [pc, #448]	; (800cf60 <tcp_receive+0xcf8>)
 800cd9e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	2200      	movs	r2, #0
 800cda4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	68db      	ldr	r3, [r3, #12]
 800cdaa:	899b      	ldrh	r3, [r3, #12]
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7fa fb6c 	bl	800748c <lwip_htons>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	f003 0301 	and.w	r3, r3, #1
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d00d      	beq.n	800cddc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800cdc0:	4b68      	ldr	r3, [pc, #416]	; (800cf64 <tcp_receive+0xcfc>)
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	f043 0320 	orr.w	r3, r3, #32
 800cdc8:	b2da      	uxtb	r2, r3
 800cdca:	4b66      	ldr	r3, [pc, #408]	; (800cf64 <tcp_receive+0xcfc>)
 800cdcc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	7d1b      	ldrb	r3, [r3, #20]
 800cdd2:	2b04      	cmp	r3, #4
 800cdd4:	d102      	bne.n	800cddc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2207      	movs	r2, #7
 800cdda:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800cde4:	68b8      	ldr	r0, [r7, #8]
 800cde6:	f7fd faec 	bl	800a3c2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d008      	beq.n	800ce04 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	685a      	ldr	r2, [r3, #4]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	f43f af43 	beq.w	800cc8a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	8b5b      	ldrh	r3, [r3, #26]
 800ce08:	f003 0301 	and.w	r3, r3, #1
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00e      	beq.n	800ce2e <tcp_receive+0xbc6>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	8b5b      	ldrh	r3, [r3, #26]
 800ce14:	f023 0301 	bic.w	r3, r3, #1
 800ce18:	b29a      	uxth	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	835a      	strh	r2, [r3, #26]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	8b5b      	ldrh	r3, [r3, #26]
 800ce22:	f043 0302 	orr.w	r3, r3, #2
 800ce26:	b29a      	uxth	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ce2c:	e188      	b.n	800d140 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	8b5b      	ldrh	r3, [r3, #26]
 800ce32:	f043 0301 	orr.w	r3, r3, #1
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ce3c:	e180      	b.n	800d140 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d106      	bne.n	800ce54 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ce46:	4848      	ldr	r0, [pc, #288]	; (800cf68 <tcp_receive+0xd00>)
 800ce48:	f7fd faf2 	bl	800a430 <tcp_seg_copy>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	675a      	str	r2, [r3, #116]	; 0x74
 800ce52:	e16d      	b.n	800d130 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ce54:	2300      	movs	r3, #0
 800ce56:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce5e:	e157      	b.n	800d110 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ce60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	685a      	ldr	r2, [r3, #4]
 800ce66:	4b41      	ldr	r3, [pc, #260]	; (800cf6c <tcp_receive+0xd04>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d11d      	bne.n	800ceaa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ce6e:	4b3e      	ldr	r3, [pc, #248]	; (800cf68 <tcp_receive+0xd00>)
 800ce70:	891a      	ldrh	r2, [r3, #8]
 800ce72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce74:	891b      	ldrh	r3, [r3, #8]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	f240 814f 	bls.w	800d11a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ce7c:	483a      	ldr	r0, [pc, #232]	; (800cf68 <tcp_receive+0xd00>)
 800ce7e:	f7fd fad7 	bl	800a430 <tcp_seg_copy>
 800ce82:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	f000 8149 	beq.w	800d11e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ce8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d003      	beq.n	800ce9a <tcp_receive+0xc32>
                    prev->next = cseg;
 800ce92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce94:	697a      	ldr	r2, [r7, #20]
 800ce96:	601a      	str	r2, [r3, #0]
 800ce98:	e002      	b.n	800cea0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	697a      	ldr	r2, [r7, #20]
 800ce9e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800cea0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cea2:	6978      	ldr	r0, [r7, #20]
 800cea4:	f7ff f8dc 	bl	800c060 <tcp_oos_insert_segment>
                }
                break;
 800cea8:	e139      	b.n	800d11e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ceaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d117      	bne.n	800cee0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ceb0:	4b2e      	ldr	r3, [pc, #184]	; (800cf6c <tcp_receive+0xd04>)
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	1ad3      	subs	r3, r2, r3
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	da57      	bge.n	800cf70 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cec0:	4829      	ldr	r0, [pc, #164]	; (800cf68 <tcp_receive+0xd00>)
 800cec2:	f7fd fab5 	bl	800a430 <tcp_seg_copy>
 800cec6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f000 8129 	beq.w	800d122 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	69ba      	ldr	r2, [r7, #24]
 800ced4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ced6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ced8:	69b8      	ldr	r0, [r7, #24]
 800ceda:	f7ff f8c1 	bl	800c060 <tcp_oos_insert_segment>
                  }
                  break;
 800cede:	e120      	b.n	800d122 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800cee0:	4b22      	ldr	r3, [pc, #136]	; (800cf6c <tcp_receive+0xd04>)
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	1ad3      	subs	r3, r2, r3
 800ceec:	3b01      	subs	r3, #1
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	db3e      	blt.n	800cf70 <tcp_receive+0xd08>
 800cef2:	4b1e      	ldr	r3, [pc, #120]	; (800cf6c <tcp_receive+0xd04>)
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	3301      	adds	r3, #1
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	dc35      	bgt.n	800cf70 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cf04:	4818      	ldr	r0, [pc, #96]	; (800cf68 <tcp_receive+0xd00>)
 800cf06:	f7fd fa93 	bl	800a430 <tcp_seg_copy>
 800cf0a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	f000 8109 	beq.w	800d126 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cf14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf1c:	8912      	ldrh	r2, [r2, #8]
 800cf1e:	441a      	add	r2, r3
 800cf20:	4b12      	ldr	r3, [pc, #72]	; (800cf6c <tcp_receive+0xd04>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	1ad3      	subs	r3, r2, r3
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	dd12      	ble.n	800cf50 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cf2a:	4b10      	ldr	r3, [pc, #64]	; (800cf6c <tcp_receive+0xd04>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	1ad3      	subs	r3, r2, r3
 800cf3a:	b29a      	uxth	r2, r3
 800cf3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf3e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800cf40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf42:	685a      	ldr	r2, [r3, #4]
 800cf44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf46:	891b      	ldrh	r3, [r3, #8]
 800cf48:	4619      	mov	r1, r3
 800cf4a:	4610      	mov	r0, r2
 800cf4c:	f7fb fc76 	bl	800883c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800cf50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf52:	69fa      	ldr	r2, [r7, #28]
 800cf54:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800cf56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf58:	69f8      	ldr	r0, [r7, #28]
 800cf5a:	f7ff f881 	bl	800c060 <tcp_oos_insert_segment>
                  }
                  break;
 800cf5e:	e0e2      	b.n	800d126 <tcp_receive+0xebe>
 800cf60:	200008dc 	.word	0x200008dc
 800cf64:	200008d9 	.word	0x200008d9
 800cf68:	200008ac 	.word	0x200008ac
 800cf6c:	200008cc 	.word	0x200008cc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800cf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf72:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800cf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	f040 80c6 	bne.w	800d10a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800cf7e:	4b80      	ldr	r3, [pc, #512]	; (800d180 <tcp_receive+0xf18>)
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	f340 80bd 	ble.w	800d10a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	899b      	ldrh	r3, [r3, #12]
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7fa fa77 	bl	800748c <lwip_htons>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	f003 0301 	and.w	r3, r3, #1
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	f040 80bf 	bne.w	800d12a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cfac:	4875      	ldr	r0, [pc, #468]	; (800d184 <tcp_receive+0xf1c>)
 800cfae:	f7fd fa3f 	bl	800a430 <tcp_seg_copy>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	f000 80b6 	beq.w	800d12e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800cfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfca:	8912      	ldrh	r2, [r2, #8]
 800cfcc:	441a      	add	r2, r3
 800cfce:	4b6c      	ldr	r3, [pc, #432]	; (800d180 <tcp_receive+0xf18>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	1ad3      	subs	r3, r2, r3
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	dd12      	ble.n	800cffe <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800cfd8:	4b69      	ldr	r3, [pc, #420]	; (800d180 <tcp_receive+0xf18>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	1ad3      	subs	r3, r2, r3
 800cfe8:	b29a      	uxth	r2, r3
 800cfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800cfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff0:	685a      	ldr	r2, [r3, #4]
 800cff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff4:	891b      	ldrh	r3, [r3, #8]
 800cff6:	4619      	mov	r1, r3
 800cff8:	4610      	mov	r0, r2
 800cffa:	f7fb fc1f 	bl	800883c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800cffe:	4b62      	ldr	r3, [pc, #392]	; (800d188 <tcp_receive+0xf20>)
 800d000:	881b      	ldrh	r3, [r3, #0]
 800d002:	461a      	mov	r2, r3
 800d004:	4b5e      	ldr	r3, [pc, #376]	; (800d180 <tcp_receive+0xf18>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	441a      	add	r2, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00e:	6879      	ldr	r1, [r7, #4]
 800d010:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d012:	440b      	add	r3, r1
 800d014:	1ad3      	subs	r3, r2, r3
 800d016:	2b00      	cmp	r3, #0
 800d018:	f340 8089 	ble.w	800d12e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	68db      	ldr	r3, [r3, #12]
 800d022:	899b      	ldrh	r3, [r3, #12]
 800d024:	b29b      	uxth	r3, r3
 800d026:	4618      	mov	r0, r3
 800d028:	f7fa fa30 	bl	800748c <lwip_htons>
 800d02c:	4603      	mov	r3, r0
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	f003 0301 	and.w	r3, r3, #1
 800d034:	2b00      	cmp	r3, #0
 800d036:	d022      	beq.n	800d07e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	68db      	ldr	r3, [r3, #12]
 800d03e:	899b      	ldrh	r3, [r3, #12]
 800d040:	b29b      	uxth	r3, r3
 800d042:	b21b      	sxth	r3, r3
 800d044:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d048:	b21c      	sxth	r4, r3
 800d04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	899b      	ldrh	r3, [r3, #12]
 800d052:	b29b      	uxth	r3, r3
 800d054:	4618      	mov	r0, r3
 800d056:	f7fa fa19 	bl	800748c <lwip_htons>
 800d05a:	4603      	mov	r3, r0
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	b29b      	uxth	r3, r3
 800d060:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d064:	b29b      	uxth	r3, r3
 800d066:	4618      	mov	r0, r3
 800d068:	f7fa fa10 	bl	800748c <lwip_htons>
 800d06c:	4603      	mov	r3, r0
 800d06e:	b21b      	sxth	r3, r3
 800d070:	4323      	orrs	r3, r4
 800d072:	b21a      	sxth	r2, r3
 800d074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	68db      	ldr	r3, [r3, #12]
 800d07a:	b292      	uxth	r2, r2
 800d07c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d082:	b29a      	uxth	r2, r3
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d088:	4413      	add	r3, r2
 800d08a:	b299      	uxth	r1, r3
 800d08c:	4b3c      	ldr	r3, [pc, #240]	; (800d180 <tcp_receive+0xf18>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	b29a      	uxth	r2, r3
 800d092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	1a8a      	subs	r2, r1, r2
 800d098:	b292      	uxth	r2, r2
 800d09a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	685a      	ldr	r2, [r3, #4]
 800d0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	891b      	ldrh	r3, [r3, #8]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	4610      	mov	r0, r2
 800d0ac:	f7fb fbc6 	bl	800883c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	891c      	ldrh	r4, [r3, #8]
 800d0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	899b      	ldrh	r3, [r3, #12]
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7fa f9e3 	bl	800748c <lwip_htons>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	f003 0303 	and.w	r3, r3, #3
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d001      	beq.n	800d0d6 <tcp_receive+0xe6e>
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e000      	b.n	800d0d8 <tcp_receive+0xe70>
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	4423      	add	r3, r4
 800d0da:	b29a      	uxth	r2, r3
 800d0dc:	4b2a      	ldr	r3, [pc, #168]	; (800d188 <tcp_receive+0xf20>)
 800d0de:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d0e0:	4b29      	ldr	r3, [pc, #164]	; (800d188 <tcp_receive+0xf20>)
 800d0e2:	881b      	ldrh	r3, [r3, #0]
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	4b26      	ldr	r3, [pc, #152]	; (800d180 <tcp_receive+0xf18>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	441a      	add	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f0:	6879      	ldr	r1, [r7, #4]
 800d0f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d0f4:	440b      	add	r3, r1
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d019      	beq.n	800d12e <tcp_receive+0xec6>
 800d0fa:	4b24      	ldr	r3, [pc, #144]	; (800d18c <tcp_receive+0xf24>)
 800d0fc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d100:	4923      	ldr	r1, [pc, #140]	; (800d190 <tcp_receive+0xf28>)
 800d102:	4824      	ldr	r0, [pc, #144]	; (800d194 <tcp_receive+0xf2c>)
 800d104:	f007 fbce 	bl	80148a4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d108:	e011      	b.n	800d12e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d112:	2b00      	cmp	r3, #0
 800d114:	f47f aea4 	bne.w	800ce60 <tcp_receive+0xbf8>
 800d118:	e00a      	b.n	800d130 <tcp_receive+0xec8>
                break;
 800d11a:	bf00      	nop
 800d11c:	e008      	b.n	800d130 <tcp_receive+0xec8>
                break;
 800d11e:	bf00      	nop
 800d120:	e006      	b.n	800d130 <tcp_receive+0xec8>
                  break;
 800d122:	bf00      	nop
 800d124:	e004      	b.n	800d130 <tcp_receive+0xec8>
                  break;
 800d126:	bf00      	nop
 800d128:	e002      	b.n	800d130 <tcp_receive+0xec8>
                  break;
 800d12a:	bf00      	nop
 800d12c:	e000      	b.n	800d130 <tcp_receive+0xec8>
                break;
 800d12e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f001 fe8b 	bl	800ee4c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d136:	e003      	b.n	800d140 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f001 fe87 	bl	800ee4c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d13e:	e01a      	b.n	800d176 <tcp_receive+0xf0e>
 800d140:	e019      	b.n	800d176 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d142:	4b0f      	ldr	r3, [pc, #60]	; (800d180 <tcp_receive+0xf18>)
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	db0a      	blt.n	800d166 <tcp_receive+0xefe>
 800d150:	4b0b      	ldr	r3, [pc, #44]	; (800d180 <tcp_receive+0xf18>)
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d158:	6879      	ldr	r1, [r7, #4]
 800d15a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d15c:	440b      	add	r3, r1
 800d15e:	1ad3      	subs	r3, r2, r3
 800d160:	3301      	adds	r3, #1
 800d162:	2b00      	cmp	r3, #0
 800d164:	dd07      	ble.n	800d176 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	8b5b      	ldrh	r3, [r3, #26]
 800d16a:	f043 0302 	orr.w	r3, r3, #2
 800d16e:	b29a      	uxth	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d174:	e7ff      	b.n	800d176 <tcp_receive+0xf0e>
 800d176:	bf00      	nop
 800d178:	3750      	adds	r7, #80	; 0x50
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bdb0      	pop	{r4, r5, r7, pc}
 800d17e:	bf00      	nop
 800d180:	200008cc 	.word	0x200008cc
 800d184:	200008ac 	.word	0x200008ac
 800d188:	200008d6 	.word	0x200008d6
 800d18c:	08018530 	.word	0x08018530
 800d190:	080188d8 	.word	0x080188d8
 800d194:	0801857c 	.word	0x0801857c

0800d198 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d19e:	4b15      	ldr	r3, [pc, #84]	; (800d1f4 <tcp_get_next_optbyte+0x5c>)
 800d1a0:	881b      	ldrh	r3, [r3, #0]
 800d1a2:	1c5a      	adds	r2, r3, #1
 800d1a4:	b291      	uxth	r1, r2
 800d1a6:	4a13      	ldr	r2, [pc, #76]	; (800d1f4 <tcp_get_next_optbyte+0x5c>)
 800d1a8:	8011      	strh	r1, [r2, #0]
 800d1aa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d1ac:	4b12      	ldr	r3, [pc, #72]	; (800d1f8 <tcp_get_next_optbyte+0x60>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d004      	beq.n	800d1be <tcp_get_next_optbyte+0x26>
 800d1b4:	4b11      	ldr	r3, [pc, #68]	; (800d1fc <tcp_get_next_optbyte+0x64>)
 800d1b6:	881b      	ldrh	r3, [r3, #0]
 800d1b8:	88fa      	ldrh	r2, [r7, #6]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d208      	bcs.n	800d1d0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d1be:	4b10      	ldr	r3, [pc, #64]	; (800d200 <tcp_get_next_optbyte+0x68>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3314      	adds	r3, #20
 800d1c4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d1c6:	88fb      	ldrh	r3, [r7, #6]
 800d1c8:	683a      	ldr	r2, [r7, #0]
 800d1ca:	4413      	add	r3, r2
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	e00b      	b.n	800d1e8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d1d0:	88fb      	ldrh	r3, [r7, #6]
 800d1d2:	b2da      	uxtb	r2, r3
 800d1d4:	4b09      	ldr	r3, [pc, #36]	; (800d1fc <tcp_get_next_optbyte+0x64>)
 800d1d6:	881b      	ldrh	r3, [r3, #0]
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d1de:	4b06      	ldr	r3, [pc, #24]	; (800d1f8 <tcp_get_next_optbyte+0x60>)
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	797b      	ldrb	r3, [r7, #5]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	370c      	adds	r7, #12
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr
 800d1f4:	200008c8 	.word	0x200008c8
 800d1f8:	200008c4 	.word	0x200008c4
 800d1fc:	200008c2 	.word	0x200008c2
 800d200:	200008bc 	.word	0x200008bc

0800d204 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d106      	bne.n	800d220 <tcp_parseopt+0x1c>
 800d212:	4b32      	ldr	r3, [pc, #200]	; (800d2dc <tcp_parseopt+0xd8>)
 800d214:	f240 727d 	movw	r2, #1917	; 0x77d
 800d218:	4931      	ldr	r1, [pc, #196]	; (800d2e0 <tcp_parseopt+0xdc>)
 800d21a:	4832      	ldr	r0, [pc, #200]	; (800d2e4 <tcp_parseopt+0xe0>)
 800d21c:	f007 fb42 	bl	80148a4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d220:	4b31      	ldr	r3, [pc, #196]	; (800d2e8 <tcp_parseopt+0xe4>)
 800d222:	881b      	ldrh	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d055      	beq.n	800d2d4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d228:	4b30      	ldr	r3, [pc, #192]	; (800d2ec <tcp_parseopt+0xe8>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	801a      	strh	r2, [r3, #0]
 800d22e:	e045      	b.n	800d2bc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d230:	f7ff ffb2 	bl	800d198 <tcp_get_next_optbyte>
 800d234:	4603      	mov	r3, r0
 800d236:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d238:	7bfb      	ldrb	r3, [r7, #15]
 800d23a:	2b02      	cmp	r3, #2
 800d23c:	d006      	beq.n	800d24c <tcp_parseopt+0x48>
 800d23e:	2b02      	cmp	r3, #2
 800d240:	dc2b      	bgt.n	800d29a <tcp_parseopt+0x96>
 800d242:	2b00      	cmp	r3, #0
 800d244:	d041      	beq.n	800d2ca <tcp_parseopt+0xc6>
 800d246:	2b01      	cmp	r3, #1
 800d248:	d127      	bne.n	800d29a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d24a:	e037      	b.n	800d2bc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d24c:	f7ff ffa4 	bl	800d198 <tcp_get_next_optbyte>
 800d250:	4603      	mov	r3, r0
 800d252:	2b04      	cmp	r3, #4
 800d254:	d13b      	bne.n	800d2ce <tcp_parseopt+0xca>
 800d256:	4b25      	ldr	r3, [pc, #148]	; (800d2ec <tcp_parseopt+0xe8>)
 800d258:	881b      	ldrh	r3, [r3, #0]
 800d25a:	3301      	adds	r3, #1
 800d25c:	4a22      	ldr	r2, [pc, #136]	; (800d2e8 <tcp_parseopt+0xe4>)
 800d25e:	8812      	ldrh	r2, [r2, #0]
 800d260:	4293      	cmp	r3, r2
 800d262:	da34      	bge.n	800d2ce <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d264:	f7ff ff98 	bl	800d198 <tcp_get_next_optbyte>
 800d268:	4603      	mov	r3, r0
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	021b      	lsls	r3, r3, #8
 800d26e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d270:	f7ff ff92 	bl	800d198 <tcp_get_next_optbyte>
 800d274:	4603      	mov	r3, r0
 800d276:	b29a      	uxth	r2, r3
 800d278:	89bb      	ldrh	r3, [r7, #12]
 800d27a:	4313      	orrs	r3, r2
 800d27c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d27e:	89bb      	ldrh	r3, [r7, #12]
 800d280:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d284:	d804      	bhi.n	800d290 <tcp_parseopt+0x8c>
 800d286:	89bb      	ldrh	r3, [r7, #12]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d001      	beq.n	800d290 <tcp_parseopt+0x8c>
 800d28c:	89ba      	ldrh	r2, [r7, #12]
 800d28e:	e001      	b.n	800d294 <tcp_parseopt+0x90>
 800d290:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d298:	e010      	b.n	800d2bc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d29a:	f7ff ff7d 	bl	800d198 <tcp_get_next_optbyte>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d2a2:	7afb      	ldrb	r3, [r7, #11]
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d914      	bls.n	800d2d2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d2a8:	7afb      	ldrb	r3, [r7, #11]
 800d2aa:	b29a      	uxth	r2, r3
 800d2ac:	4b0f      	ldr	r3, [pc, #60]	; (800d2ec <tcp_parseopt+0xe8>)
 800d2ae:	881b      	ldrh	r3, [r3, #0]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	3b02      	subs	r3, #2
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	4b0c      	ldr	r3, [pc, #48]	; (800d2ec <tcp_parseopt+0xe8>)
 800d2ba:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d2bc:	4b0b      	ldr	r3, [pc, #44]	; (800d2ec <tcp_parseopt+0xe8>)
 800d2be:	881a      	ldrh	r2, [r3, #0]
 800d2c0:	4b09      	ldr	r3, [pc, #36]	; (800d2e8 <tcp_parseopt+0xe4>)
 800d2c2:	881b      	ldrh	r3, [r3, #0]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d3b3      	bcc.n	800d230 <tcp_parseopt+0x2c>
 800d2c8:	e004      	b.n	800d2d4 <tcp_parseopt+0xd0>
          return;
 800d2ca:	bf00      	nop
 800d2cc:	e002      	b.n	800d2d4 <tcp_parseopt+0xd0>
            return;
 800d2ce:	bf00      	nop
 800d2d0:	e000      	b.n	800d2d4 <tcp_parseopt+0xd0>
            return;
 800d2d2:	bf00      	nop
      }
    }
  }
}
 800d2d4:	3710      	adds	r7, #16
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	08018530 	.word	0x08018530
 800d2e0:	08018994 	.word	0x08018994
 800d2e4:	0801857c 	.word	0x0801857c
 800d2e8:	200008c0 	.word	0x200008c0
 800d2ec:	200008c8 	.word	0x200008c8

0800d2f0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d2f4:	4b05      	ldr	r3, [pc, #20]	; (800d30c <tcp_trigger_input_pcb_close+0x1c>)
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	f043 0310 	orr.w	r3, r3, #16
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	4b03      	ldr	r3, [pc, #12]	; (800d30c <tcp_trigger_input_pcb_close+0x1c>)
 800d300:	701a      	strb	r2, [r3, #0]
}
 800d302:	bf00      	nop
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr
 800d30c:	200008d9 	.word	0x200008d9

0800d310 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b084      	sub	sp, #16
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d00a      	beq.n	800d338 <tcp_route+0x28>
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	7a1b      	ldrb	r3, [r3, #8]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d006      	beq.n	800d338 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	7a1b      	ldrb	r3, [r3, #8]
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fb f8aa 	bl	8008488 <netif_get_by_index>
 800d334:	4603      	mov	r3, r0
 800d336:	e003      	b.n	800d340 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f003 fad5 	bl	80108e8 <ip4_route>
 800d33e:	4603      	mov	r3, r0
  }
}
 800d340:	4618      	mov	r0, r3
 800d342:	3710      	adds	r7, #16
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d348:	b590      	push	{r4, r7, lr}
 800d34a:	b087      	sub	sp, #28
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	603b      	str	r3, [r7, #0]
 800d354:	4613      	mov	r3, r2
 800d356:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d105      	bne.n	800d36a <tcp_create_segment+0x22>
 800d35e:	4b44      	ldr	r3, [pc, #272]	; (800d470 <tcp_create_segment+0x128>)
 800d360:	22a3      	movs	r2, #163	; 0xa3
 800d362:	4944      	ldr	r1, [pc, #272]	; (800d474 <tcp_create_segment+0x12c>)
 800d364:	4844      	ldr	r0, [pc, #272]	; (800d478 <tcp_create_segment+0x130>)
 800d366:	f007 fa9d 	bl	80148a4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d105      	bne.n	800d37c <tcp_create_segment+0x34>
 800d370:	4b3f      	ldr	r3, [pc, #252]	; (800d470 <tcp_create_segment+0x128>)
 800d372:	22a4      	movs	r2, #164	; 0xa4
 800d374:	4941      	ldr	r1, [pc, #260]	; (800d47c <tcp_create_segment+0x134>)
 800d376:	4840      	ldr	r0, [pc, #256]	; (800d478 <tcp_create_segment+0x130>)
 800d378:	f007 fa94 	bl	80148a4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d37c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	b2db      	uxtb	r3, r3
 800d384:	f003 0304 	and.w	r3, r3, #4
 800d388:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d38a:	2003      	movs	r0, #3
 800d38c:	f7fa fcf6 	bl	8007d7c <memp_malloc>
 800d390:	6138      	str	r0, [r7, #16]
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d104      	bne.n	800d3a2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d398:	68b8      	ldr	r0, [r7, #8]
 800d39a:	f7fb fbd5 	bl	8008b48 <pbuf_free>
    return NULL;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	e061      	b.n	800d466 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d3a8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	68ba      	ldr	r2, [r7, #8]
 800d3b4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	891a      	ldrh	r2, [r3, #8]
 800d3ba:	7dfb      	ldrb	r3, [r7, #23]
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d205      	bcs.n	800d3ce <tcp_create_segment+0x86>
 800d3c2:	4b2b      	ldr	r3, [pc, #172]	; (800d470 <tcp_create_segment+0x128>)
 800d3c4:	22b0      	movs	r2, #176	; 0xb0
 800d3c6:	492e      	ldr	r1, [pc, #184]	; (800d480 <tcp_create_segment+0x138>)
 800d3c8:	482b      	ldr	r0, [pc, #172]	; (800d478 <tcp_create_segment+0x130>)
 800d3ca:	f007 fa6b 	bl	80148a4 <iprintf>
  seg->len = p->tot_len - optlen;
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	891a      	ldrh	r2, [r3, #8]
 800d3d2:	7dfb      	ldrb	r3, [r7, #23]
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	1ad3      	subs	r3, r2, r3
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d3de:	2114      	movs	r1, #20
 800d3e0:	68b8      	ldr	r0, [r7, #8]
 800d3e2:	f7fb fb1b 	bl	8008a1c <pbuf_add_header>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d004      	beq.n	800d3f6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d3ec:	6938      	ldr	r0, [r7, #16]
 800d3ee:	f7fc ffe8 	bl	800a3c2 <tcp_seg_free>
    return NULL;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	e037      	b.n	800d466 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	685a      	ldr	r2, [r3, #4]
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	8ada      	ldrh	r2, [r3, #22]
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	68dc      	ldr	r4, [r3, #12]
 800d408:	4610      	mov	r0, r2
 800d40a:	f7fa f83f 	bl	800748c <lwip_htons>
 800d40e:	4603      	mov	r3, r0
 800d410:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	8b1a      	ldrh	r2, [r3, #24]
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	68dc      	ldr	r4, [r3, #12]
 800d41a:	4610      	mov	r0, r2
 800d41c:	f7fa f836 	bl	800748c <lwip_htons>
 800d420:	4603      	mov	r3, r0
 800d422:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	68dc      	ldr	r4, [r3, #12]
 800d428:	6838      	ldr	r0, [r7, #0]
 800d42a:	f7fa f844 	bl	80074b6 <lwip_htonl>
 800d42e:	4603      	mov	r3, r0
 800d430:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d432:	7dfb      	ldrb	r3, [r7, #23]
 800d434:	089b      	lsrs	r3, r3, #2
 800d436:	b2db      	uxtb	r3, r3
 800d438:	b29b      	uxth	r3, r3
 800d43a:	3305      	adds	r3, #5
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	031b      	lsls	r3, r3, #12
 800d440:	b29a      	uxth	r2, r3
 800d442:	79fb      	ldrb	r3, [r7, #7]
 800d444:	b29b      	uxth	r3, r3
 800d446:	4313      	orrs	r3, r2
 800d448:	b29a      	uxth	r2, r3
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	68dc      	ldr	r4, [r3, #12]
 800d44e:	4610      	mov	r0, r2
 800d450:	f7fa f81c 	bl	800748c <lwip_htons>
 800d454:	4603      	mov	r3, r0
 800d456:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	2200      	movs	r2, #0
 800d45e:	749a      	strb	r2, [r3, #18]
 800d460:	2200      	movs	r2, #0
 800d462:	74da      	strb	r2, [r3, #19]
  return seg;
 800d464:	693b      	ldr	r3, [r7, #16]
}
 800d466:	4618      	mov	r0, r3
 800d468:	371c      	adds	r7, #28
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd90      	pop	{r4, r7, pc}
 800d46e:	bf00      	nop
 800d470:	080189b0 	.word	0x080189b0
 800d474:	080189e4 	.word	0x080189e4
 800d478:	08018a04 	.word	0x08018a04
 800d47c:	08018a2c 	.word	0x08018a2c
 800d480:	08018a50 	.word	0x08018a50

0800d484 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b086      	sub	sp, #24
 800d488:	af00      	add	r7, sp, #0
 800d48a:	607b      	str	r3, [r7, #4]
 800d48c:	4603      	mov	r3, r0
 800d48e:	73fb      	strb	r3, [r7, #15]
 800d490:	460b      	mov	r3, r1
 800d492:	81bb      	strh	r3, [r7, #12]
 800d494:	4613      	mov	r3, r2
 800d496:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d498:	89bb      	ldrh	r3, [r7, #12]
 800d49a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d105      	bne.n	800d4ae <tcp_pbuf_prealloc+0x2a>
 800d4a2:	4b30      	ldr	r3, [pc, #192]	; (800d564 <tcp_pbuf_prealloc+0xe0>)
 800d4a4:	22e8      	movs	r2, #232	; 0xe8
 800d4a6:	4930      	ldr	r1, [pc, #192]	; (800d568 <tcp_pbuf_prealloc+0xe4>)
 800d4a8:	4830      	ldr	r0, [pc, #192]	; (800d56c <tcp_pbuf_prealloc+0xe8>)
 800d4aa:	f007 f9fb 	bl	80148a4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d4ae:	6a3b      	ldr	r3, [r7, #32]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d105      	bne.n	800d4c0 <tcp_pbuf_prealloc+0x3c>
 800d4b4:	4b2b      	ldr	r3, [pc, #172]	; (800d564 <tcp_pbuf_prealloc+0xe0>)
 800d4b6:	22e9      	movs	r2, #233	; 0xe9
 800d4b8:	492d      	ldr	r1, [pc, #180]	; (800d570 <tcp_pbuf_prealloc+0xec>)
 800d4ba:	482c      	ldr	r0, [pc, #176]	; (800d56c <tcp_pbuf_prealloc+0xe8>)
 800d4bc:	f007 f9f2 	bl	80148a4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d4c0:	89ba      	ldrh	r2, [r7, #12]
 800d4c2:	897b      	ldrh	r3, [r7, #10]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d221      	bcs.n	800d50c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d4c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d4cc:	f003 0302 	and.w	r3, r3, #2
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d111      	bne.n	800d4f8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800d4d4:	6a3b      	ldr	r3, [r7, #32]
 800d4d6:	8b5b      	ldrh	r3, [r3, #26]
 800d4d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d115      	bne.n	800d50c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800d4e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d007      	beq.n	800d4f8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d4e8:	6a3b      	ldr	r3, [r7, #32]
 800d4ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d103      	bne.n	800d4f8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800d4f0:	6a3b      	ldr	r3, [r7, #32]
 800d4f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d009      	beq.n	800d50c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d4f8:	89bb      	ldrh	r3, [r7, #12]
 800d4fa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800d4fe:	f023 0203 	bic.w	r2, r3, #3
 800d502:	897b      	ldrh	r3, [r7, #10]
 800d504:	4293      	cmp	r3, r2
 800d506:	bf28      	it	cs
 800d508:	4613      	movcs	r3, r2
 800d50a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d50c:	8af9      	ldrh	r1, [r7, #22]
 800d50e:	7bfb      	ldrb	r3, [r7, #15]
 800d510:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d514:	4618      	mov	r0, r3
 800d516:	f7fb f833 	bl	8008580 <pbuf_alloc>
 800d51a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d101      	bne.n	800d526 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800d522:	2300      	movs	r3, #0
 800d524:	e019      	b.n	800d55a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d006      	beq.n	800d53c <tcp_pbuf_prealloc+0xb8>
 800d52e:	4b0d      	ldr	r3, [pc, #52]	; (800d564 <tcp_pbuf_prealloc+0xe0>)
 800d530:	f240 120b 	movw	r2, #267	; 0x10b
 800d534:	490f      	ldr	r1, [pc, #60]	; (800d574 <tcp_pbuf_prealloc+0xf0>)
 800d536:	480d      	ldr	r0, [pc, #52]	; (800d56c <tcp_pbuf_prealloc+0xe8>)
 800d538:	f007 f9b4 	bl	80148a4 <iprintf>
  *oversize = p->len - length;
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	895a      	ldrh	r2, [r3, #10]
 800d540:	89bb      	ldrh	r3, [r7, #12]
 800d542:	1ad3      	subs	r3, r2, r3
 800d544:	b29a      	uxth	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	89ba      	ldrh	r2, [r7, #12]
 800d54e:	811a      	strh	r2, [r3, #8]
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	891a      	ldrh	r2, [r3, #8]
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	815a      	strh	r2, [r3, #10]
  return p;
 800d558:	693b      	ldr	r3, [r7, #16]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3718      	adds	r7, #24
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	080189b0 	.word	0x080189b0
 800d568:	08018a68 	.word	0x08018a68
 800d56c:	08018a04 	.word	0x08018a04
 800d570:	08018a8c 	.word	0x08018a8c
 800d574:	08018aac 	.word	0x08018aac

0800d578 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	460b      	mov	r3, r1
 800d582:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d106      	bne.n	800d598 <tcp_write_checks+0x20>
 800d58a:	4b33      	ldr	r3, [pc, #204]	; (800d658 <tcp_write_checks+0xe0>)
 800d58c:	f240 1233 	movw	r2, #307	; 0x133
 800d590:	4932      	ldr	r1, [pc, #200]	; (800d65c <tcp_write_checks+0xe4>)
 800d592:	4833      	ldr	r0, [pc, #204]	; (800d660 <tcp_write_checks+0xe8>)
 800d594:	f007 f986 	bl	80148a4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	7d1b      	ldrb	r3, [r3, #20]
 800d59c:	2b04      	cmp	r3, #4
 800d59e:	d00e      	beq.n	800d5be <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800d5a4:	2b07      	cmp	r3, #7
 800d5a6:	d00a      	beq.n	800d5be <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d5ac:	2b02      	cmp	r3, #2
 800d5ae:	d006      	beq.n	800d5be <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800d5b4:	2b03      	cmp	r3, #3
 800d5b6:	d002      	beq.n	800d5be <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d5b8:	f06f 030a 	mvn.w	r3, #10
 800d5bc:	e048      	b.n	800d650 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800d5be:	887b      	ldrh	r3, [r7, #2]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d101      	bne.n	800d5c8 <tcp_write_checks+0x50>
    return ERR_OK;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	e043      	b.n	800d650 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d5ce:	887a      	ldrh	r2, [r7, #2]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d909      	bls.n	800d5e8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	8b5b      	ldrh	r3, [r3, #26]
 800d5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d5e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d5e6:	e033      	b.n	800d650 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d5ee:	2b08      	cmp	r3, #8
 800d5f0:	d909      	bls.n	800d606 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	8b5b      	ldrh	r3, [r3, #26]
 800d5f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5fa:	b29a      	uxth	r2, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d600:	f04f 33ff 	mov.w	r3, #4294967295
 800d604:	e024      	b.n	800d650 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d00f      	beq.n	800d630 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d614:	2b00      	cmp	r3, #0
 800d616:	d11a      	bne.n	800d64e <tcp_write_checks+0xd6>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d116      	bne.n	800d64e <tcp_write_checks+0xd6>
 800d620:	4b0d      	ldr	r3, [pc, #52]	; (800d658 <tcp_write_checks+0xe0>)
 800d622:	f240 1255 	movw	r2, #341	; 0x155
 800d626:	490f      	ldr	r1, [pc, #60]	; (800d664 <tcp_write_checks+0xec>)
 800d628:	480d      	ldr	r0, [pc, #52]	; (800d660 <tcp_write_checks+0xe8>)
 800d62a:	f007 f93b 	bl	80148a4 <iprintf>
 800d62e:	e00e      	b.n	800d64e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d634:	2b00      	cmp	r3, #0
 800d636:	d103      	bne.n	800d640 <tcp_write_checks+0xc8>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d006      	beq.n	800d64e <tcp_write_checks+0xd6>
 800d640:	4b05      	ldr	r3, [pc, #20]	; (800d658 <tcp_write_checks+0xe0>)
 800d642:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800d646:	4908      	ldr	r1, [pc, #32]	; (800d668 <tcp_write_checks+0xf0>)
 800d648:	4805      	ldr	r0, [pc, #20]	; (800d660 <tcp_write_checks+0xe8>)
 800d64a:	f007 f92b 	bl	80148a4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800d64e:	2300      	movs	r3, #0
}
 800d650:	4618      	mov	r0, r3
 800d652:	3708      	adds	r7, #8
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	080189b0 	.word	0x080189b0
 800d65c:	08018ac0 	.word	0x08018ac0
 800d660:	08018a04 	.word	0x08018a04
 800d664:	08018ae0 	.word	0x08018ae0
 800d668:	08018b1c 	.word	0x08018b1c

0800d66c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800d66c:	b590      	push	{r4, r7, lr}
 800d66e:	b09b      	sub	sp, #108	; 0x6c
 800d670:	af04      	add	r7, sp, #16
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	4611      	mov	r1, r2
 800d678:	461a      	mov	r2, r3
 800d67a:	460b      	mov	r3, r1
 800d67c:	80fb      	strh	r3, [r7, #6]
 800d67e:	4613      	mov	r3, r2
 800d680:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800d682:	2300      	movs	r3, #0
 800d684:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d686:	2300      	movs	r3, #0
 800d688:	653b      	str	r3, [r7, #80]	; 0x50
 800d68a:	2300      	movs	r3, #0
 800d68c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d68e:	2300      	movs	r3, #0
 800d690:	64bb      	str	r3, [r7, #72]	; 0x48
 800d692:	2300      	movs	r3, #0
 800d694:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800d696:	2300      	movs	r3, #0
 800d698:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800d69c:	2300      	movs	r3, #0
 800d69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d109      	bne.n	800d6c8 <tcp_write+0x5c>
 800d6b4:	4ba4      	ldr	r3, [pc, #656]	; (800d948 <tcp_write+0x2dc>)
 800d6b6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800d6ba:	49a4      	ldr	r1, [pc, #656]	; (800d94c <tcp_write+0x2e0>)
 800d6bc:	48a4      	ldr	r0, [pc, #656]	; (800d950 <tcp_write+0x2e4>)
 800d6be:	f007 f8f1 	bl	80148a4 <iprintf>
 800d6c2:	f06f 030f 	mvn.w	r3, #15
 800d6c6:	e32a      	b.n	800dd1e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d6ce:	085b      	lsrs	r3, r3, #1
 800d6d0:	b29a      	uxth	r2, r3
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	bf28      	it	cs
 800d6da:	4613      	movcs	r3, r2
 800d6dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800d6de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d102      	bne.n	800d6ea <tcp_write+0x7e>
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6e8:	e000      	b.n	800d6ec <tcp_write+0x80>
 800d6ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d109      	bne.n	800d708 <tcp_write+0x9c>
 800d6f4:	4b94      	ldr	r3, [pc, #592]	; (800d948 <tcp_write+0x2dc>)
 800d6f6:	f240 12ad 	movw	r2, #429	; 0x1ad
 800d6fa:	4996      	ldr	r1, [pc, #600]	; (800d954 <tcp_write+0x2e8>)
 800d6fc:	4894      	ldr	r0, [pc, #592]	; (800d950 <tcp_write+0x2e4>)
 800d6fe:	f007 f8d1 	bl	80148a4 <iprintf>
 800d702:	f06f 030f 	mvn.w	r3, #15
 800d706:	e30a      	b.n	800dd1e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d708:	88fb      	ldrh	r3, [r7, #6]
 800d70a:	4619      	mov	r1, r3
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	f7ff ff33 	bl	800d578 <tcp_write_checks>
 800d712:	4603      	mov	r3, r0
 800d714:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800d718:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d002      	beq.n	800d726 <tcp_write+0xba>
    return err;
 800d720:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d724:	e2fb      	b.n	800dd1e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d72c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d730:	2300      	movs	r3, #0
 800d732:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	f000 80f6 	beq.w	800d92c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d744:	653b      	str	r3, [r7, #80]	; 0x50
 800d746:	e002      	b.n	800d74e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800d748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d74e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1f8      	bne.n	800d748 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d758:	7a9b      	ldrb	r3, [r3, #10]
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	f003 0304 	and.w	r3, r3, #4
 800d762:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d764:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d768:	891b      	ldrh	r3, [r3, #8]
 800d76a:	4619      	mov	r1, r3
 800d76c:	8c3b      	ldrh	r3, [r7, #32]
 800d76e:	440b      	add	r3, r1
 800d770:	429a      	cmp	r2, r3
 800d772:	da06      	bge.n	800d782 <tcp_write+0x116>
 800d774:	4b74      	ldr	r3, [pc, #464]	; (800d948 <tcp_write+0x2dc>)
 800d776:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d77a:	4977      	ldr	r1, [pc, #476]	; (800d958 <tcp_write+0x2ec>)
 800d77c:	4874      	ldr	r0, [pc, #464]	; (800d950 <tcp_write+0x2e4>)
 800d77e:	f007 f891 	bl	80148a4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d784:	891a      	ldrh	r2, [r3, #8]
 800d786:	8c3b      	ldrh	r3, [r7, #32]
 800d788:	4413      	add	r3, r2
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d78e:	1ad3      	subs	r3, r2, r3
 800d790:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d798:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d79a:	8a7b      	ldrh	r3, [r7, #18]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d026      	beq.n	800d7ee <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d7a0:	8a7b      	ldrh	r3, [r7, #18]
 800d7a2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d206      	bcs.n	800d7b6 <tcp_write+0x14a>
 800d7a8:	4b67      	ldr	r3, [pc, #412]	; (800d948 <tcp_write+0x2dc>)
 800d7aa:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800d7ae:	496b      	ldr	r1, [pc, #428]	; (800d95c <tcp_write+0x2f0>)
 800d7b0:	4867      	ldr	r0, [pc, #412]	; (800d950 <tcp_write+0x2e4>)
 800d7b2:	f007 f877 	bl	80148a4 <iprintf>
      seg = last_unsent;
 800d7b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7b8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d7ba:	8a7b      	ldrh	r3, [r7, #18]
 800d7bc:	88fa      	ldrh	r2, [r7, #6]
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	bf28      	it	cs
 800d7c2:	4613      	movcs	r3, r2
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	bf28      	it	cs
 800d7cc:	4613      	movcs	r3, r2
 800d7ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800d7d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d7d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d7d6:	4413      	add	r3, r2
 800d7d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800d7dc:	8a7a      	ldrh	r2, [r7, #18]
 800d7de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d7e0:	1ad3      	subs	r3, r2, r3
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d7e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d7e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d7ea:	1ad3      	subs	r3, r2, r3
 800d7ec:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d7ee:	8a7b      	ldrh	r3, [r7, #18]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d00b      	beq.n	800d80c <tcp_write+0x1a0>
 800d7f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d7f8:	88fb      	ldrh	r3, [r7, #6]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d006      	beq.n	800d80c <tcp_write+0x1a0>
 800d7fe:	4b52      	ldr	r3, [pc, #328]	; (800d948 <tcp_write+0x2dc>)
 800d800:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d804:	4956      	ldr	r1, [pc, #344]	; (800d960 <tcp_write+0x2f4>)
 800d806:	4852      	ldr	r0, [pc, #328]	; (800d950 <tcp_write+0x2e4>)
 800d808:	f007 f84c 	bl	80148a4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d80c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d810:	88fb      	ldrh	r3, [r7, #6]
 800d812:	429a      	cmp	r2, r3
 800d814:	f080 8167 	bcs.w	800dae6 <tcp_write+0x47a>
 800d818:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	f000 8163 	beq.w	800dae6 <tcp_write+0x47a>
 800d820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d822:	891b      	ldrh	r3, [r3, #8]
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 815e 	beq.w	800dae6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d82a:	88fa      	ldrh	r2, [r7, #6]
 800d82c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d830:	1ad2      	subs	r2, r2, r3
 800d832:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d834:	4293      	cmp	r3, r2
 800d836:	bfa8      	it	ge
 800d838:	4613      	movge	r3, r2
 800d83a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d83c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d83e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d840:	797b      	ldrb	r3, [r7, #5]
 800d842:	f003 0301 	and.w	r3, r3, #1
 800d846:	2b00      	cmp	r3, #0
 800d848:	d027      	beq.n	800d89a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d84a:	f107 0012 	add.w	r0, r7, #18
 800d84e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d850:	8bf9      	ldrh	r1, [r7, #30]
 800d852:	2301      	movs	r3, #1
 800d854:	9302      	str	r3, [sp, #8]
 800d856:	797b      	ldrb	r3, [r7, #5]
 800d858:	9301      	str	r3, [sp, #4]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	9300      	str	r3, [sp, #0]
 800d85e:	4603      	mov	r3, r0
 800d860:	2000      	movs	r0, #0
 800d862:	f7ff fe0f 	bl	800d484 <tcp_pbuf_prealloc>
 800d866:	6578      	str	r0, [r7, #84]	; 0x54
 800d868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f000 8225 	beq.w	800dcba <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d872:	6858      	ldr	r0, [r3, #4]
 800d874:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d878:	68ba      	ldr	r2, [r7, #8]
 800d87a:	4413      	add	r3, r2
 800d87c:	8bfa      	ldrh	r2, [r7, #30]
 800d87e:	4619      	mov	r1, r3
 800d880:	f007 fa89 	bl	8014d96 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d884:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d886:	f7fb f9e7 	bl	8008c58 <pbuf_clen>
 800d88a:	4603      	mov	r3, r0
 800d88c:	461a      	mov	r2, r3
 800d88e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d892:	4413      	add	r3, r2
 800d894:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d898:	e041      	b.n	800d91e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d89a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	637b      	str	r3, [r7, #52]	; 0x34
 800d8a0:	e002      	b.n	800d8a8 <tcp_write+0x23c>
 800d8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	637b      	str	r3, [r7, #52]	; 0x34
 800d8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1f8      	bne.n	800d8a2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8b2:	7b1b      	ldrb	r3, [r3, #12]
 800d8b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d115      	bne.n	800d8e8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8c2:	8952      	ldrh	r2, [r2, #10]
 800d8c4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d8c6:	68ba      	ldr	r2, [r7, #8]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d10d      	bne.n	800d8e8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d8cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d006      	beq.n	800d8e2 <tcp_write+0x276>
 800d8d4:	4b1c      	ldr	r3, [pc, #112]	; (800d948 <tcp_write+0x2dc>)
 800d8d6:	f240 2231 	movw	r2, #561	; 0x231
 800d8da:	4922      	ldr	r1, [pc, #136]	; (800d964 <tcp_write+0x2f8>)
 800d8dc:	481c      	ldr	r0, [pc, #112]	; (800d950 <tcp_write+0x2e4>)
 800d8de:	f006 ffe1 	bl	80148a4 <iprintf>
          extendlen = seglen;
 800d8e2:	8bfb      	ldrh	r3, [r7, #30]
 800d8e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d8e6:	e01a      	b.n	800d91e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d8e8:	8bfb      	ldrh	r3, [r7, #30]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	2000      	movs	r0, #0
 800d8f0:	f7fa fe46 	bl	8008580 <pbuf_alloc>
 800d8f4:	6578      	str	r0, [r7, #84]	; 0x54
 800d8f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f000 81e0 	beq.w	800dcbe <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d8fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d902:	68ba      	ldr	r2, [r7, #8]
 800d904:	441a      	add	r2, r3
 800d906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d908:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d90a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d90c:	f7fb f9a4 	bl	8008c58 <pbuf_clen>
 800d910:	4603      	mov	r3, r0
 800d912:	461a      	mov	r2, r3
 800d914:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d918:	4413      	add	r3, r2
 800d91a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d91e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d922:	8bfb      	ldrh	r3, [r7, #30]
 800d924:	4413      	add	r3, r2
 800d926:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d92a:	e0dc      	b.n	800dae6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d932:	2b00      	cmp	r3, #0
 800d934:	f000 80d7 	beq.w	800dae6 <tcp_write+0x47a>
 800d938:	4b03      	ldr	r3, [pc, #12]	; (800d948 <tcp_write+0x2dc>)
 800d93a:	f240 224a 	movw	r2, #586	; 0x24a
 800d93e:	490a      	ldr	r1, [pc, #40]	; (800d968 <tcp_write+0x2fc>)
 800d940:	4803      	ldr	r0, [pc, #12]	; (800d950 <tcp_write+0x2e4>)
 800d942:	f006 ffaf 	bl	80148a4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d946:	e0ce      	b.n	800dae6 <tcp_write+0x47a>
 800d948:	080189b0 	.word	0x080189b0
 800d94c:	08018b50 	.word	0x08018b50
 800d950:	08018a04 	.word	0x08018a04
 800d954:	08018b68 	.word	0x08018b68
 800d958:	08018b9c 	.word	0x08018b9c
 800d95c:	08018bb4 	.word	0x08018bb4
 800d960:	08018bd4 	.word	0x08018bd4
 800d964:	08018bf4 	.word	0x08018bf4
 800d968:	08018c20 	.word	0x08018c20
    struct pbuf *p;
    u16_t left = len - pos;
 800d96c:	88fa      	ldrh	r2, [r7, #6]
 800d96e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d972:	1ad3      	subs	r3, r2, r3
 800d974:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d976:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d97e:	1ad3      	subs	r3, r2, r3
 800d980:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d982:	8b7a      	ldrh	r2, [r7, #26]
 800d984:	8bbb      	ldrh	r3, [r7, #28]
 800d986:	4293      	cmp	r3, r2
 800d988:	bf28      	it	cs
 800d98a:	4613      	movcs	r3, r2
 800d98c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d98e:	797b      	ldrb	r3, [r7, #5]
 800d990:	f003 0301 	and.w	r3, r3, #1
 800d994:	2b00      	cmp	r3, #0
 800d996:	d036      	beq.n	800da06 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d998:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	8b3b      	ldrh	r3, [r7, #24]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	b299      	uxth	r1, r3
 800d9a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	bf0c      	ite	eq
 800d9aa:	2301      	moveq	r3, #1
 800d9ac:	2300      	movne	r3, #0
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	f107 0012 	add.w	r0, r7, #18
 800d9b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d9b6:	9302      	str	r3, [sp, #8]
 800d9b8:	797b      	ldrb	r3, [r7, #5]
 800d9ba:	9301      	str	r3, [sp, #4]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	9300      	str	r3, [sp, #0]
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2036      	movs	r0, #54	; 0x36
 800d9c4:	f7ff fd5e 	bl	800d484 <tcp_pbuf_prealloc>
 800d9c8:	6338      	str	r0, [r7, #48]	; 0x30
 800d9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	f000 8178 	beq.w	800dcc2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d4:	895b      	ldrh	r3, [r3, #10]
 800d9d6:	8b3a      	ldrh	r2, [r7, #24]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d906      	bls.n	800d9ea <tcp_write+0x37e>
 800d9dc:	4b8c      	ldr	r3, [pc, #560]	; (800dc10 <tcp_write+0x5a4>)
 800d9de:	f240 2266 	movw	r2, #614	; 0x266
 800d9e2:	498c      	ldr	r1, [pc, #560]	; (800dc14 <tcp_write+0x5a8>)
 800d9e4:	488c      	ldr	r0, [pc, #560]	; (800dc18 <tcp_write+0x5ac>)
 800d9e6:	f006 ff5d 	bl	80148a4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ec:	685a      	ldr	r2, [r3, #4]
 800d9ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d9f2:	18d0      	adds	r0, r2, r3
 800d9f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d9f8:	68ba      	ldr	r2, [r7, #8]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	8b3a      	ldrh	r2, [r7, #24]
 800d9fe:	4619      	mov	r1, r3
 800da00:	f007 f9c9 	bl	8014d96 <memcpy>
 800da04:	e02f      	b.n	800da66 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800da06:	8a7b      	ldrh	r3, [r7, #18]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d006      	beq.n	800da1a <tcp_write+0x3ae>
 800da0c:	4b80      	ldr	r3, [pc, #512]	; (800dc10 <tcp_write+0x5a4>)
 800da0e:	f240 2271 	movw	r2, #625	; 0x271
 800da12:	4982      	ldr	r1, [pc, #520]	; (800dc1c <tcp_write+0x5b0>)
 800da14:	4880      	ldr	r0, [pc, #512]	; (800dc18 <tcp_write+0x5ac>)
 800da16:	f006 ff45 	bl	80148a4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800da1a:	8b3b      	ldrh	r3, [r7, #24]
 800da1c:	2201      	movs	r2, #1
 800da1e:	4619      	mov	r1, r3
 800da20:	2036      	movs	r0, #54	; 0x36
 800da22:	f7fa fdad 	bl	8008580 <pbuf_alloc>
 800da26:	6178      	str	r0, [r7, #20]
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f000 814b 	beq.w	800dcc6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800da30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800da34:	68ba      	ldr	r2, [r7, #8]
 800da36:	441a      	add	r2, r3
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800da3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800da40:	b29b      	uxth	r3, r3
 800da42:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da46:	4619      	mov	r1, r3
 800da48:	2036      	movs	r0, #54	; 0x36
 800da4a:	f7fa fd99 	bl	8008580 <pbuf_alloc>
 800da4e:	6338      	str	r0, [r7, #48]	; 0x30
 800da50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da52:	2b00      	cmp	r3, #0
 800da54:	d103      	bne.n	800da5e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800da56:	6978      	ldr	r0, [r7, #20]
 800da58:	f7fb f876 	bl	8008b48 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800da5c:	e136      	b.n	800dccc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800da5e:	6979      	ldr	r1, [r7, #20]
 800da60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da62:	f7fb f933 	bl	8008ccc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800da66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da68:	f7fb f8f6 	bl	8008c58 <pbuf_clen>
 800da6c:	4603      	mov	r3, r0
 800da6e:	461a      	mov	r2, r3
 800da70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800da74:	4413      	add	r3, r2
 800da76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800da7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800da7e:	2b09      	cmp	r3, #9
 800da80:	d903      	bls.n	800da8a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800da82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da84:	f7fb f860 	bl	8008b48 <pbuf_free>
      goto memerr;
 800da88:	e120      	b.n	800dccc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800da92:	441a      	add	r2, r3
 800da94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da98:	9300      	str	r3, [sp, #0]
 800da9a:	4613      	mov	r3, r2
 800da9c:	2200      	movs	r2, #0
 800da9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f7ff fc51 	bl	800d348 <tcp_create_segment>
 800daa6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800daa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daaa:	2b00      	cmp	r3, #0
 800daac:	f000 810d 	beq.w	800dcca <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800dab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d102      	bne.n	800dabc <tcp_write+0x450>
      queue = seg;
 800dab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dab8:	647b      	str	r3, [r7, #68]	; 0x44
 800daba:	e00c      	b.n	800dad6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800dabc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d106      	bne.n	800dad0 <tcp_write+0x464>
 800dac2:	4b53      	ldr	r3, [pc, #332]	; (800dc10 <tcp_write+0x5a4>)
 800dac4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dac8:	4955      	ldr	r1, [pc, #340]	; (800dc20 <tcp_write+0x5b4>)
 800daca:	4853      	ldr	r0, [pc, #332]	; (800dc18 <tcp_write+0x5ac>)
 800dacc:	f006 feea 	bl	80148a4 <iprintf>
      prev_seg->next = seg;
 800dad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dad2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dad4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800dad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dad8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800dada:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dade:	8b3b      	ldrh	r3, [r7, #24]
 800dae0:	4413      	add	r3, r2
 800dae2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800dae6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800daea:	88fb      	ldrh	r3, [r7, #6]
 800daec:	429a      	cmp	r2, r3
 800daee:	f4ff af3d 	bcc.w	800d96c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800daf2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d02c      	beq.n	800db52 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800daf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dafe:	e01e      	b.n	800db3e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800db00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db02:	891a      	ldrh	r2, [r3, #8]
 800db04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800db06:	4413      	add	r3, r2
 800db08:	b29a      	uxth	r2, r3
 800db0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800db0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d110      	bne.n	800db38 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800db16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db1c:	8952      	ldrh	r2, [r2, #10]
 800db1e:	4413      	add	r3, r2
 800db20:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800db22:	68b9      	ldr	r1, [r7, #8]
 800db24:	4618      	mov	r0, r3
 800db26:	f007 f936 	bl	8014d96 <memcpy>
        p->len += oversize_used;
 800db2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2c:	895a      	ldrh	r2, [r3, #10]
 800db2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800db30:	4413      	add	r3, r2
 800db32:	b29a      	uxth	r2, r3
 800db34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db36:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800db38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db40:	2b00      	cmp	r3, #0
 800db42:	d1dd      	bne.n	800db00 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800db44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db46:	891a      	ldrh	r2, [r3, #8]
 800db48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800db4a:	4413      	add	r3, r2
 800db4c:	b29a      	uxth	r2, r3
 800db4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db50:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800db52:	8a7a      	ldrh	r2, [r7, #18]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800db5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d018      	beq.n	800db92 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800db60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db62:	2b00      	cmp	r3, #0
 800db64:	d106      	bne.n	800db74 <tcp_write+0x508>
 800db66:	4b2a      	ldr	r3, [pc, #168]	; (800dc10 <tcp_write+0x5a4>)
 800db68:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800db6c:	492d      	ldr	r1, [pc, #180]	; (800dc24 <tcp_write+0x5b8>)
 800db6e:	482a      	ldr	r0, [pc, #168]	; (800dc18 <tcp_write+0x5ac>)
 800db70:	f006 fe98 	bl	80148a4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800db74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db7a:	4618      	mov	r0, r3
 800db7c:	f7fb f8a6 	bl	8008ccc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800db80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db82:	891a      	ldrh	r2, [r3, #8]
 800db84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db86:	891b      	ldrh	r3, [r3, #8]
 800db88:	4413      	add	r3, r2
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db8e:	811a      	strh	r2, [r3, #8]
 800db90:	e037      	b.n	800dc02 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800db92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800db94:	2b00      	cmp	r3, #0
 800db96:	d034      	beq.n	800dc02 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800db98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d003      	beq.n	800dba6 <tcp_write+0x53a>
 800db9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d106      	bne.n	800dbb4 <tcp_write+0x548>
 800dba6:	4b1a      	ldr	r3, [pc, #104]	; (800dc10 <tcp_write+0x5a4>)
 800dba8:	f240 22e6 	movw	r2, #742	; 0x2e6
 800dbac:	491e      	ldr	r1, [pc, #120]	; (800dc28 <tcp_write+0x5bc>)
 800dbae:	481a      	ldr	r0, [pc, #104]	; (800dc18 <tcp_write+0x5ac>)
 800dbb0:	f006 fe78 	bl	80148a4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dbb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbba:	e009      	b.n	800dbd0 <tcp_write+0x564>
      p->tot_len += extendlen;
 800dbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbbe:	891a      	ldrh	r2, [r3, #8]
 800dbc0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dbc2:	4413      	add	r3, r2
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d1f1      	bne.n	800dbbc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800dbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbda:	891a      	ldrh	r2, [r3, #8]
 800dbdc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dbde:	4413      	add	r3, r2
 800dbe0:	b29a      	uxth	r2, r3
 800dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800dbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe8:	895a      	ldrh	r2, [r3, #10]
 800dbea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dbec:	4413      	add	r3, r2
 800dbee:	b29a      	uxth	r2, r3
 800dbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800dbf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbf6:	891a      	ldrh	r2, [r3, #8]
 800dbf8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dbfa:	4413      	add	r3, r2
 800dbfc:	b29a      	uxth	r2, r3
 800dbfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc00:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800dc02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d111      	bne.n	800dc2c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc0c:	66da      	str	r2, [r3, #108]	; 0x6c
 800dc0e:	e010      	b.n	800dc32 <tcp_write+0x5c6>
 800dc10:	080189b0 	.word	0x080189b0
 800dc14:	08018c50 	.word	0x08018c50
 800dc18:	08018a04 	.word	0x08018a04
 800dc1c:	08018c90 	.word	0x08018c90
 800dc20:	08018ca0 	.word	0x08018ca0
 800dc24:	08018cb4 	.word	0x08018cb4
 800dc28:	08018cec 	.word	0x08018cec
  } else {
    last_unsent->next = queue;
 800dc2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc30:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc36:	88fb      	ldrh	r3, [r7, #6]
 800dc38:	441a      	add	r2, r3
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800dc44:	88fb      	ldrh	r3, [r7, #6]
 800dc46:	1ad3      	subs	r3, r2, r3
 800dc48:	b29a      	uxth	r2, r3
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800dc56:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d00e      	beq.n	800dc82 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10a      	bne.n	800dc82 <tcp_write+0x616>
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d106      	bne.n	800dc82 <tcp_write+0x616>
 800dc74:	4b2c      	ldr	r3, [pc, #176]	; (800dd28 <tcp_write+0x6bc>)
 800dc76:	f240 3212 	movw	r2, #786	; 0x312
 800dc7a:	492c      	ldr	r1, [pc, #176]	; (800dd2c <tcp_write+0x6c0>)
 800dc7c:	482c      	ldr	r0, [pc, #176]	; (800dd30 <tcp_write+0x6c4>)
 800dc7e:	f006 fe11 	bl	80148a4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800dc82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d016      	beq.n	800dcb6 <tcp_write+0x64a>
 800dc88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc8a:	68db      	ldr	r3, [r3, #12]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d012      	beq.n	800dcb6 <tcp_write+0x64a>
 800dc90:	797b      	ldrb	r3, [r7, #5]
 800dc92:	f003 0302 	and.w	r3, r3, #2
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d10d      	bne.n	800dcb6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800dc9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	899b      	ldrh	r3, [r3, #12]
 800dca0:	b29c      	uxth	r4, r3
 800dca2:	2008      	movs	r0, #8
 800dca4:	f7f9 fbf2 	bl	800748c <lwip_htons>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	461a      	mov	r2, r3
 800dcac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	4322      	orrs	r2, r4
 800dcb2:	b292      	uxth	r2, r2
 800dcb4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	e031      	b.n	800dd1e <tcp_write+0x6b2>
          goto memerr;
 800dcba:	bf00      	nop
 800dcbc:	e006      	b.n	800dccc <tcp_write+0x660>
            goto memerr;
 800dcbe:	bf00      	nop
 800dcc0:	e004      	b.n	800dccc <tcp_write+0x660>
        goto memerr;
 800dcc2:	bf00      	nop
 800dcc4:	e002      	b.n	800dccc <tcp_write+0x660>
        goto memerr;
 800dcc6:	bf00      	nop
 800dcc8:	e000      	b.n	800dccc <tcp_write+0x660>
      goto memerr;
 800dcca:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	8b5b      	ldrh	r3, [r3, #26]
 800dcd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcd4:	b29a      	uxth	r2, r3
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800dcda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d002      	beq.n	800dce6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800dce0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dce2:	f7fa ff31 	bl	8008b48 <pbuf_free>
  }
  if (queue != NULL) {
 800dce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d002      	beq.n	800dcf2 <tcp_write+0x686>
    tcp_segs_free(queue);
 800dcec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dcee:	f7fc fb53 	bl	800a398 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00e      	beq.n	800dd1a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d10a      	bne.n	800dd1a <tcp_write+0x6ae>
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d106      	bne.n	800dd1a <tcp_write+0x6ae>
 800dd0c:	4b06      	ldr	r3, [pc, #24]	; (800dd28 <tcp_write+0x6bc>)
 800dd0e:	f240 3227 	movw	r2, #807	; 0x327
 800dd12:	4906      	ldr	r1, [pc, #24]	; (800dd2c <tcp_write+0x6c0>)
 800dd14:	4806      	ldr	r0, [pc, #24]	; (800dd30 <tcp_write+0x6c4>)
 800dd16:	f006 fdc5 	bl	80148a4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800dd1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	375c      	adds	r7, #92	; 0x5c
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd90      	pop	{r4, r7, pc}
 800dd26:	bf00      	nop
 800dd28:	080189b0 	.word	0x080189b0
 800dd2c:	08018d24 	.word	0x08018d24
 800dd30:	08018a04 	.word	0x08018a04

0800dd34 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800dd34:	b590      	push	{r4, r7, lr}
 800dd36:	b08b      	sub	sp, #44	; 0x2c
 800dd38:	af02      	add	r7, sp, #8
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800dd40:	2300      	movs	r3, #0
 800dd42:	61fb      	str	r3, [r7, #28]
 800dd44:	2300      	movs	r3, #0
 800dd46:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d106      	bne.n	800dd60 <tcp_split_unsent_seg+0x2c>
 800dd52:	4b95      	ldr	r3, [pc, #596]	; (800dfa8 <tcp_split_unsent_seg+0x274>)
 800dd54:	f240 324b 	movw	r2, #843	; 0x34b
 800dd58:	4994      	ldr	r1, [pc, #592]	; (800dfac <tcp_split_unsent_seg+0x278>)
 800dd5a:	4895      	ldr	r0, [pc, #596]	; (800dfb0 <tcp_split_unsent_seg+0x27c>)
 800dd5c:	f006 fda2 	bl	80148a4 <iprintf>

  useg = pcb->unsent;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd64:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d102      	bne.n	800dd72 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800dd6c:	f04f 33ff 	mov.w	r3, #4294967295
 800dd70:	e116      	b.n	800dfa0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800dd72:	887b      	ldrh	r3, [r7, #2]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d109      	bne.n	800dd8c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800dd78:	4b8b      	ldr	r3, [pc, #556]	; (800dfa8 <tcp_split_unsent_seg+0x274>)
 800dd7a:	f240 3253 	movw	r2, #851	; 0x353
 800dd7e:	498d      	ldr	r1, [pc, #564]	; (800dfb4 <tcp_split_unsent_seg+0x280>)
 800dd80:	488b      	ldr	r0, [pc, #556]	; (800dfb0 <tcp_split_unsent_seg+0x27c>)
 800dd82:	f006 fd8f 	bl	80148a4 <iprintf>
    return ERR_VAL;
 800dd86:	f06f 0305 	mvn.w	r3, #5
 800dd8a:	e109      	b.n	800dfa0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	891b      	ldrh	r3, [r3, #8]
 800dd90:	887a      	ldrh	r2, [r7, #2]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d301      	bcc.n	800dd9a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800dd96:	2300      	movs	r3, #0
 800dd98:	e102      	b.n	800dfa0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd9e:	887a      	ldrh	r2, [r7, #2]
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d906      	bls.n	800ddb2 <tcp_split_unsent_seg+0x7e>
 800dda4:	4b80      	ldr	r3, [pc, #512]	; (800dfa8 <tcp_split_unsent_seg+0x274>)
 800dda6:	f240 325b 	movw	r2, #859	; 0x35b
 800ddaa:	4983      	ldr	r1, [pc, #524]	; (800dfb8 <tcp_split_unsent_seg+0x284>)
 800ddac:	4880      	ldr	r0, [pc, #512]	; (800dfb0 <tcp_split_unsent_seg+0x27c>)
 800ddae:	f006 fd79 	bl	80148a4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	891b      	ldrh	r3, [r3, #8]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d106      	bne.n	800ddc8 <tcp_split_unsent_seg+0x94>
 800ddba:	4b7b      	ldr	r3, [pc, #492]	; (800dfa8 <tcp_split_unsent_seg+0x274>)
 800ddbc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ddc0:	497e      	ldr	r1, [pc, #504]	; (800dfbc <tcp_split_unsent_seg+0x288>)
 800ddc2:	487b      	ldr	r0, [pc, #492]	; (800dfb0 <tcp_split_unsent_seg+0x27c>)
 800ddc4:	f006 fd6e 	bl	80148a4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	7a9b      	ldrb	r3, [r3, #10]
 800ddcc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ddce:	7bfb      	ldrb	r3, [r7, #15]
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	f003 0304 	and.w	r3, r3, #4
 800ddd8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	891a      	ldrh	r2, [r3, #8]
 800ddde:	887b      	ldrh	r3, [r7, #2]
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800dde4:	7bbb      	ldrb	r3, [r7, #14]
 800dde6:	b29a      	uxth	r2, r3
 800dde8:	89bb      	ldrh	r3, [r7, #12]
 800ddea:	4413      	add	r3, r2
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	2036      	movs	r0, #54	; 0x36
 800ddf6:	f7fa fbc3 	bl	8008580 <pbuf_alloc>
 800ddfa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	f000 80b7 	beq.w	800df72 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	891a      	ldrh	r2, [r3, #8]
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	891b      	ldrh	r3, [r3, #8]
 800de0e:	1ad3      	subs	r3, r2, r3
 800de10:	b29a      	uxth	r2, r3
 800de12:	887b      	ldrh	r3, [r7, #2]
 800de14:	4413      	add	r3, r2
 800de16:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	6858      	ldr	r0, [r3, #4]
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	685a      	ldr	r2, [r3, #4]
 800de20:	7bbb      	ldrb	r3, [r7, #14]
 800de22:	18d1      	adds	r1, r2, r3
 800de24:	897b      	ldrh	r3, [r7, #10]
 800de26:	89ba      	ldrh	r2, [r7, #12]
 800de28:	f7fb f888 	bl	8008f3c <pbuf_copy_partial>
 800de2c:	4603      	mov	r3, r0
 800de2e:	461a      	mov	r2, r3
 800de30:	89bb      	ldrh	r3, [r7, #12]
 800de32:	4293      	cmp	r3, r2
 800de34:	f040 809f 	bne.w	800df76 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	899b      	ldrh	r3, [r3, #12]
 800de3e:	b29b      	uxth	r3, r3
 800de40:	4618      	mov	r0, r3
 800de42:	f7f9 fb23 	bl	800748c <lwip_htons>
 800de46:	4603      	mov	r3, r0
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de4e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800de50:	2300      	movs	r3, #0
 800de52:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800de54:	7efb      	ldrb	r3, [r7, #27]
 800de56:	f003 0308 	and.w	r3, r3, #8
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d007      	beq.n	800de6e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800de5e:	7efb      	ldrb	r3, [r7, #27]
 800de60:	f023 0308 	bic.w	r3, r3, #8
 800de64:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800de66:	7ebb      	ldrb	r3, [r7, #26]
 800de68:	f043 0308 	orr.w	r3, r3, #8
 800de6c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800de6e:	7efb      	ldrb	r3, [r7, #27]
 800de70:	f003 0301 	and.w	r3, r3, #1
 800de74:	2b00      	cmp	r3, #0
 800de76:	d007      	beq.n	800de88 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800de78:	7efb      	ldrb	r3, [r7, #27]
 800de7a:	f023 0301 	bic.w	r3, r3, #1
 800de7e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800de80:	7ebb      	ldrb	r3, [r7, #26]
 800de82:	f043 0301 	orr.w	r3, r3, #1
 800de86:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	68db      	ldr	r3, [r3, #12]
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	4618      	mov	r0, r3
 800de90:	f7f9 fb11 	bl	80074b6 <lwip_htonl>
 800de94:	4602      	mov	r2, r0
 800de96:	887b      	ldrh	r3, [r7, #2]
 800de98:	18d1      	adds	r1, r2, r3
 800de9a:	7eba      	ldrb	r2, [r7, #26]
 800de9c:	7bfb      	ldrb	r3, [r7, #15]
 800de9e:	9300      	str	r3, [sp, #0]
 800dea0:	460b      	mov	r3, r1
 800dea2:	6939      	ldr	r1, [r7, #16]
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f7ff fa4f 	bl	800d348 <tcp_create_segment>
 800deaa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d063      	beq.n	800df7a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7fa fece 	bl	8008c58 <pbuf_clen>
 800debc:	4603      	mov	r3, r0
 800debe:	461a      	mov	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dec6:	1a9b      	subs	r3, r3, r2
 800dec8:	b29a      	uxth	r2, r3
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	6858      	ldr	r0, [r3, #4]
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	891a      	ldrh	r2, [r3, #8]
 800deda:	89bb      	ldrh	r3, [r7, #12]
 800dedc:	1ad3      	subs	r3, r2, r3
 800dede:	b29b      	uxth	r3, r3
 800dee0:	4619      	mov	r1, r3
 800dee2:	f7fa fcab 	bl	800883c <pbuf_realloc>
  useg->len -= remainder;
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	891a      	ldrh	r2, [r3, #8]
 800deea:	89bb      	ldrh	r3, [r7, #12]
 800deec:	1ad3      	subs	r3, r2, r3
 800deee:	b29a      	uxth	r2, r3
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	899b      	ldrh	r3, [r3, #12]
 800defa:	b29c      	uxth	r4, r3
 800defc:	7efb      	ldrb	r3, [r7, #27]
 800defe:	b29b      	uxth	r3, r3
 800df00:	4618      	mov	r0, r3
 800df02:	f7f9 fac3 	bl	800748c <lwip_htons>
 800df06:	4603      	mov	r3, r0
 800df08:	461a      	mov	r2, r3
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	68db      	ldr	r3, [r3, #12]
 800df0e:	4322      	orrs	r2, r4
 800df10:	b292      	uxth	r2, r2
 800df12:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	685b      	ldr	r3, [r3, #4]
 800df18:	4618      	mov	r0, r3
 800df1a:	f7fa fe9d 	bl	8008c58 <pbuf_clen>
 800df1e:	4603      	mov	r3, r0
 800df20:	461a      	mov	r2, r3
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df28:	4413      	add	r3, r2
 800df2a:	b29a      	uxth	r2, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	4618      	mov	r0, r3
 800df38:	f7fa fe8e 	bl	8008c58 <pbuf_clen>
 800df3c:	4603      	mov	r3, r0
 800df3e:	461a      	mov	r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df46:	4413      	add	r3, r2
 800df48:	b29a      	uxth	r2, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	69fb      	ldr	r3, [r7, #28]
 800df56:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	69fa      	ldr	r2, [r7, #28]
 800df5c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800df5e:	69fb      	ldr	r3, [r7, #28]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d103      	bne.n	800df6e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2200      	movs	r2, #0
 800df6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800df6e:	2300      	movs	r3, #0
 800df70:	e016      	b.n	800dfa0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800df72:	bf00      	nop
 800df74:	e002      	b.n	800df7c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800df76:	bf00      	nop
 800df78:	e000      	b.n	800df7c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800df7a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d006      	beq.n	800df90 <tcp_split_unsent_seg+0x25c>
 800df82:	4b09      	ldr	r3, [pc, #36]	; (800dfa8 <tcp_split_unsent_seg+0x274>)
 800df84:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800df88:	490d      	ldr	r1, [pc, #52]	; (800dfc0 <tcp_split_unsent_seg+0x28c>)
 800df8a:	4809      	ldr	r0, [pc, #36]	; (800dfb0 <tcp_split_unsent_seg+0x27c>)
 800df8c:	f006 fc8a 	bl	80148a4 <iprintf>
  if (p != NULL) {
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d002      	beq.n	800df9c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800df96:	6938      	ldr	r0, [r7, #16]
 800df98:	f7fa fdd6 	bl	8008b48 <pbuf_free>
  }

  return ERR_MEM;
 800df9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3724      	adds	r7, #36	; 0x24
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd90      	pop	{r4, r7, pc}
 800dfa8:	080189b0 	.word	0x080189b0
 800dfac:	08018d44 	.word	0x08018d44
 800dfb0:	08018a04 	.word	0x08018a04
 800dfb4:	08018d68 	.word	0x08018d68
 800dfb8:	08018d8c 	.word	0x08018d8c
 800dfbc:	08018d9c 	.word	0x08018d9c
 800dfc0:	08018dac 	.word	0x08018dac

0800dfc4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800dfc4:	b590      	push	{r4, r7, lr}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d106      	bne.n	800dfe0 <tcp_send_fin+0x1c>
 800dfd2:	4b21      	ldr	r3, [pc, #132]	; (800e058 <tcp_send_fin+0x94>)
 800dfd4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800dfd8:	4920      	ldr	r1, [pc, #128]	; (800e05c <tcp_send_fin+0x98>)
 800dfda:	4821      	ldr	r0, [pc, #132]	; (800e060 <tcp_send_fin+0x9c>)
 800dfdc:	f006 fc62 	bl	80148a4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d02e      	beq.n	800e046 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfec:	60fb      	str	r3, [r7, #12]
 800dfee:	e002      	b.n	800dff6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d1f8      	bne.n	800dff0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	68db      	ldr	r3, [r3, #12]
 800e002:	899b      	ldrh	r3, [r3, #12]
 800e004:	b29b      	uxth	r3, r3
 800e006:	4618      	mov	r0, r3
 800e008:	f7f9 fa40 	bl	800748c <lwip_htons>
 800e00c:	4603      	mov	r3, r0
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	f003 0307 	and.w	r3, r3, #7
 800e014:	2b00      	cmp	r3, #0
 800e016:	d116      	bne.n	800e046 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	899b      	ldrh	r3, [r3, #12]
 800e01e:	b29c      	uxth	r4, r3
 800e020:	2001      	movs	r0, #1
 800e022:	f7f9 fa33 	bl	800748c <lwip_htons>
 800e026:	4603      	mov	r3, r0
 800e028:	461a      	mov	r2, r3
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	4322      	orrs	r2, r4
 800e030:	b292      	uxth	r2, r2
 800e032:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	8b5b      	ldrh	r3, [r3, #26]
 800e038:	f043 0320 	orr.w	r3, r3, #32
 800e03c:	b29a      	uxth	r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e042:	2300      	movs	r3, #0
 800e044:	e004      	b.n	800e050 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e046:	2101      	movs	r1, #1
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f000 f80b 	bl	800e064 <tcp_enqueue_flags>
 800e04e:	4603      	mov	r3, r0
}
 800e050:	4618      	mov	r0, r3
 800e052:	3714      	adds	r7, #20
 800e054:	46bd      	mov	sp, r7
 800e056:	bd90      	pop	{r4, r7, pc}
 800e058:	080189b0 	.word	0x080189b0
 800e05c:	08018db8 	.word	0x08018db8
 800e060:	08018a04 	.word	0x08018a04

0800e064 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b08a      	sub	sp, #40	; 0x28
 800e068:	af02      	add	r7, sp, #8
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	460b      	mov	r3, r1
 800e06e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e070:	2300      	movs	r3, #0
 800e072:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e074:	2300      	movs	r3, #0
 800e076:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e078:	78fb      	ldrb	r3, [r7, #3]
 800e07a:	f003 0303 	and.w	r3, r3, #3
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d106      	bne.n	800e090 <tcp_enqueue_flags+0x2c>
 800e082:	4b67      	ldr	r3, [pc, #412]	; (800e220 <tcp_enqueue_flags+0x1bc>)
 800e084:	f240 4211 	movw	r2, #1041	; 0x411
 800e088:	4966      	ldr	r1, [pc, #408]	; (800e224 <tcp_enqueue_flags+0x1c0>)
 800e08a:	4867      	ldr	r0, [pc, #412]	; (800e228 <tcp_enqueue_flags+0x1c4>)
 800e08c:	f006 fc0a 	bl	80148a4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d106      	bne.n	800e0a4 <tcp_enqueue_flags+0x40>
 800e096:	4b62      	ldr	r3, [pc, #392]	; (800e220 <tcp_enqueue_flags+0x1bc>)
 800e098:	f240 4213 	movw	r2, #1043	; 0x413
 800e09c:	4963      	ldr	r1, [pc, #396]	; (800e22c <tcp_enqueue_flags+0x1c8>)
 800e09e:	4862      	ldr	r0, [pc, #392]	; (800e228 <tcp_enqueue_flags+0x1c4>)
 800e0a0:	f006 fc00 	bl	80148a4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e0a4:	78fb      	ldrb	r3, [r7, #3]
 800e0a6:	f003 0302 	and.w	r3, r3, #2
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d001      	beq.n	800e0b2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e0b2:	7ffb      	ldrb	r3, [r7, #31]
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	f003 0304 	and.w	r3, r3, #4
 800e0bc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e0be:	7dfb      	ldrb	r3, [r7, #23]
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	2036      	movs	r0, #54	; 0x36
 800e0ca:	f7fa fa59 	bl	8008580 <pbuf_alloc>
 800e0ce:	6138      	str	r0, [r7, #16]
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d109      	bne.n	800e0ea <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	8b5b      	ldrh	r3, [r3, #26]
 800e0da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0de:	b29a      	uxth	r2, r3
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e0e8:	e095      	b.n	800e216 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	895a      	ldrh	r2, [r3, #10]
 800e0ee:	7dfb      	ldrb	r3, [r7, #23]
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d206      	bcs.n	800e104 <tcp_enqueue_flags+0xa0>
 800e0f6:	4b4a      	ldr	r3, [pc, #296]	; (800e220 <tcp_enqueue_flags+0x1bc>)
 800e0f8:	f240 4239 	movw	r2, #1081	; 0x439
 800e0fc:	494c      	ldr	r1, [pc, #304]	; (800e230 <tcp_enqueue_flags+0x1cc>)
 800e0fe:	484a      	ldr	r0, [pc, #296]	; (800e228 <tcp_enqueue_flags+0x1c4>)
 800e100:	f006 fbd0 	bl	80148a4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e108:	78fa      	ldrb	r2, [r7, #3]
 800e10a:	7ffb      	ldrb	r3, [r7, #31]
 800e10c:	9300      	str	r3, [sp, #0]
 800e10e:	460b      	mov	r3, r1
 800e110:	6939      	ldr	r1, [r7, #16]
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f7ff f918 	bl	800d348 <tcp_create_segment>
 800e118:	60f8      	str	r0, [r7, #12]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d109      	bne.n	800e134 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	8b5b      	ldrh	r3, [r3, #26]
 800e124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e128:	b29a      	uxth	r2, r3
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e12e:	f04f 33ff 	mov.w	r3, #4294967295
 800e132:	e070      	b.n	800e216 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	f003 0303 	and.w	r3, r3, #3
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d006      	beq.n	800e14e <tcp_enqueue_flags+0xea>
 800e140:	4b37      	ldr	r3, [pc, #220]	; (800e220 <tcp_enqueue_flags+0x1bc>)
 800e142:	f240 4242 	movw	r2, #1090	; 0x442
 800e146:	493b      	ldr	r1, [pc, #236]	; (800e234 <tcp_enqueue_flags+0x1d0>)
 800e148:	4837      	ldr	r0, [pc, #220]	; (800e228 <tcp_enqueue_flags+0x1c4>)
 800e14a:	f006 fbab 	bl	80148a4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	891b      	ldrh	r3, [r3, #8]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d006      	beq.n	800e164 <tcp_enqueue_flags+0x100>
 800e156:	4b32      	ldr	r3, [pc, #200]	; (800e220 <tcp_enqueue_flags+0x1bc>)
 800e158:	f240 4243 	movw	r2, #1091	; 0x443
 800e15c:	4936      	ldr	r1, [pc, #216]	; (800e238 <tcp_enqueue_flags+0x1d4>)
 800e15e:	4832      	ldr	r0, [pc, #200]	; (800e228 <tcp_enqueue_flags+0x1c4>)
 800e160:	f006 fba0 	bl	80148a4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d103      	bne.n	800e174 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	68fa      	ldr	r2, [r7, #12]
 800e170:	66da      	str	r2, [r3, #108]	; 0x6c
 800e172:	e00d      	b.n	800e190 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e178:	61bb      	str	r3, [r7, #24]
 800e17a:	e002      	b.n	800e182 <tcp_enqueue_flags+0x11e>
 800e17c:	69bb      	ldr	r3, [r7, #24]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	61bb      	str	r3, [r7, #24]
 800e182:	69bb      	ldr	r3, [r7, #24]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d1f8      	bne.n	800e17c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e18a:	69bb      	ldr	r3, [r7, #24]
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2200      	movs	r2, #0
 800e194:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e198:	78fb      	ldrb	r3, [r7, #3]
 800e19a:	f003 0302 	and.w	r3, r3, #2
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d104      	bne.n	800e1ac <tcp_enqueue_flags+0x148>
 800e1a2:	78fb      	ldrb	r3, [r7, #3]
 800e1a4:	f003 0301 	and.w	r3, r3, #1
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d004      	beq.n	800e1b6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1b0:	1c5a      	adds	r2, r3, #1
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e1b6:	78fb      	ldrb	r3, [r7, #3]
 800e1b8:	f003 0301 	and.w	r3, r3, #1
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d006      	beq.n	800e1ce <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	8b5b      	ldrh	r3, [r3, #26]
 800e1c4:	f043 0320 	orr.w	r3, r3, #32
 800e1c8:	b29a      	uxth	r2, r3
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7fa fd40 	bl	8008c58 <pbuf_clen>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	461a      	mov	r2, r3
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e1e2:	4413      	add	r3, r2
 800e1e4:	b29a      	uxth	r2, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d00e      	beq.n	800e214 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d10a      	bne.n	800e214 <tcp_enqueue_flags+0x1b0>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e202:	2b00      	cmp	r3, #0
 800e204:	d106      	bne.n	800e214 <tcp_enqueue_flags+0x1b0>
 800e206:	4b06      	ldr	r3, [pc, #24]	; (800e220 <tcp_enqueue_flags+0x1bc>)
 800e208:	f240 4265 	movw	r2, #1125	; 0x465
 800e20c:	490b      	ldr	r1, [pc, #44]	; (800e23c <tcp_enqueue_flags+0x1d8>)
 800e20e:	4806      	ldr	r0, [pc, #24]	; (800e228 <tcp_enqueue_flags+0x1c4>)
 800e210:	f006 fb48 	bl	80148a4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e214:	2300      	movs	r3, #0
}
 800e216:	4618      	mov	r0, r3
 800e218:	3720      	adds	r7, #32
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	080189b0 	.word	0x080189b0
 800e224:	08018dd4 	.word	0x08018dd4
 800e228:	08018a04 	.word	0x08018a04
 800e22c:	08018e2c 	.word	0x08018e2c
 800e230:	08018e4c 	.word	0x08018e4c
 800e234:	08018e88 	.word	0x08018e88
 800e238:	08018ea0 	.word	0x08018ea0
 800e23c:	08018ecc 	.word	0x08018ecc

0800e240 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e240:	b5b0      	push	{r4, r5, r7, lr}
 800e242:	b08a      	sub	sp, #40	; 0x28
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d106      	bne.n	800e25c <tcp_output+0x1c>
 800e24e:	4b8a      	ldr	r3, [pc, #552]	; (800e478 <tcp_output+0x238>)
 800e250:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e254:	4989      	ldr	r1, [pc, #548]	; (800e47c <tcp_output+0x23c>)
 800e256:	488a      	ldr	r0, [pc, #552]	; (800e480 <tcp_output+0x240>)
 800e258:	f006 fb24 	bl	80148a4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	7d1b      	ldrb	r3, [r3, #20]
 800e260:	2b01      	cmp	r3, #1
 800e262:	d106      	bne.n	800e272 <tcp_output+0x32>
 800e264:	4b84      	ldr	r3, [pc, #528]	; (800e478 <tcp_output+0x238>)
 800e266:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e26a:	4986      	ldr	r1, [pc, #536]	; (800e484 <tcp_output+0x244>)
 800e26c:	4884      	ldr	r0, [pc, #528]	; (800e480 <tcp_output+0x240>)
 800e26e:	f006 fb19 	bl	80148a4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e272:	4b85      	ldr	r3, [pc, #532]	; (800e488 <tcp_output+0x248>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	429a      	cmp	r2, r3
 800e27a:	d101      	bne.n	800e280 <tcp_output+0x40>
    return ERR_OK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	e1ce      	b.n	800e61e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e28c:	4293      	cmp	r3, r2
 800e28e:	bf28      	it	cs
 800e290:	4613      	movcs	r3, r2
 800e292:	b29b      	uxth	r3, r3
 800e294:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e29a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d10b      	bne.n	800e2ba <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	8b5b      	ldrh	r3, [r3, #26]
 800e2a6:	f003 0302 	and.w	r3, r3, #2
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	f000 81aa 	beq.w	800e604 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f000 fdcb 	bl	800ee4c <tcp_send_empty_ack>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	e1b1      	b.n	800e61e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e2ba:	6879      	ldr	r1, [r7, #4]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	3304      	adds	r3, #4
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f7ff f824 	bl	800d310 <tcp_route>
 800e2c8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d102      	bne.n	800e2d6 <tcp_output+0x96>
    return ERR_RTE;
 800e2d0:	f06f 0303 	mvn.w	r3, #3
 800e2d4:	e1a3      	b.n	800e61e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d003      	beq.n	800e2e4 <tcp_output+0xa4>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d111      	bne.n	800e308 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d002      	beq.n	800e2f0 <tcp_output+0xb0>
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	3304      	adds	r3, #4
 800e2ee:	e000      	b.n	800e2f2 <tcp_output+0xb2>
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d102      	bne.n	800e300 <tcp_output+0xc0>
      return ERR_RTE;
 800e2fa:	f06f 0303 	mvn.w	r3, #3
 800e2fe:	e18e      	b.n	800e61e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	681a      	ldr	r2, [r3, #0]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30a:	68db      	ldr	r3, [r3, #12]
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	4618      	mov	r0, r3
 800e310:	f7f9 f8d1 	bl	80074b6 <lwip_htonl>
 800e314:	4602      	mov	r2, r0
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e31a:	1ad3      	subs	r3, r2, r3
 800e31c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e31e:	8912      	ldrh	r2, [r2, #8]
 800e320:	4413      	add	r3, r2
 800e322:	69ba      	ldr	r2, [r7, #24]
 800e324:	429a      	cmp	r2, r3
 800e326:	d227      	bcs.n	800e378 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e32e:	461a      	mov	r2, r3
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	4293      	cmp	r3, r2
 800e334:	d114      	bne.n	800e360 <tcp_output+0x120>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d110      	bne.n	800e360 <tcp_output+0x120>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e344:	2b00      	cmp	r3, #0
 800e346:	d10b      	bne.n	800e360 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2201      	movs	r2, #1
 800e354:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2200      	movs	r2, #0
 800e35c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	8b5b      	ldrh	r3, [r3, #26]
 800e364:	f003 0302 	and.w	r3, r3, #2
 800e368:	2b00      	cmp	r3, #0
 800e36a:	f000 814d 	beq.w	800e608 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 fd6c 	bl	800ee4c <tcp_send_empty_ack>
 800e374:	4603      	mov	r3, r0
 800e376:	e152      	b.n	800e61e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2200      	movs	r2, #0
 800e37c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e384:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e386:	6a3b      	ldr	r3, [r7, #32]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f000 811c 	beq.w	800e5c6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e38e:	e002      	b.n	800e396 <tcp_output+0x156>
 800e390:	6a3b      	ldr	r3, [r7, #32]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	623b      	str	r3, [r7, #32]
 800e396:	6a3b      	ldr	r3, [r7, #32]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d1f8      	bne.n	800e390 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e39e:	e112      	b.n	800e5c6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a2:	68db      	ldr	r3, [r3, #12]
 800e3a4:	899b      	ldrh	r3, [r3, #12]
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7f9 f86f 	bl	800748c <lwip_htons>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	f003 0304 	and.w	r3, r3, #4
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d006      	beq.n	800e3c8 <tcp_output+0x188>
 800e3ba:	4b2f      	ldr	r3, [pc, #188]	; (800e478 <tcp_output+0x238>)
 800e3bc:	f240 5236 	movw	r2, #1334	; 0x536
 800e3c0:	4932      	ldr	r1, [pc, #200]	; (800e48c <tcp_output+0x24c>)
 800e3c2:	482f      	ldr	r0, [pc, #188]	; (800e480 <tcp_output+0x240>)
 800e3c4:	f006 fa6e 	bl	80148a4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d01f      	beq.n	800e410 <tcp_output+0x1d0>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	8b5b      	ldrh	r3, [r3, #26]
 800e3d4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d119      	bne.n	800e410 <tcp_output+0x1d0>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d00b      	beq.n	800e3fc <tcp_output+0x1bc>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d110      	bne.n	800e410 <tcp_output+0x1d0>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3f2:	891a      	ldrh	r2, [r3, #8]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d209      	bcs.n	800e410 <tcp_output+0x1d0>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e402:	2b00      	cmp	r3, #0
 800e404:	d004      	beq.n	800e410 <tcp_output+0x1d0>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e40c:	2b08      	cmp	r3, #8
 800e40e:	d901      	bls.n	800e414 <tcp_output+0x1d4>
 800e410:	2301      	movs	r3, #1
 800e412:	e000      	b.n	800e416 <tcp_output+0x1d6>
 800e414:	2300      	movs	r3, #0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d106      	bne.n	800e428 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	8b5b      	ldrh	r3, [r3, #26]
 800e41e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e422:	2b00      	cmp	r3, #0
 800e424:	f000 80e4 	beq.w	800e5f0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	7d1b      	ldrb	r3, [r3, #20]
 800e42c:	2b02      	cmp	r3, #2
 800e42e:	d00d      	beq.n	800e44c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	899b      	ldrh	r3, [r3, #12]
 800e436:	b29c      	uxth	r4, r3
 800e438:	2010      	movs	r0, #16
 800e43a:	f7f9 f827 	bl	800748c <lwip_htons>
 800e43e:	4603      	mov	r3, r0
 800e440:	461a      	mov	r2, r3
 800e442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e444:	68db      	ldr	r3, [r3, #12]
 800e446:	4322      	orrs	r2, r4
 800e448:	b292      	uxth	r2, r2
 800e44a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e44c:	697a      	ldr	r2, [r7, #20]
 800e44e:	6879      	ldr	r1, [r7, #4]
 800e450:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e452:	f000 f909 	bl	800e668 <tcp_output_segment>
 800e456:	4603      	mov	r3, r0
 800e458:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e45a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d016      	beq.n	800e490 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	8b5b      	ldrh	r3, [r3, #26]
 800e466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	835a      	strh	r2, [r3, #26]
      return err;
 800e470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e474:	e0d3      	b.n	800e61e <tcp_output+0x3de>
 800e476:	bf00      	nop
 800e478:	080189b0 	.word	0x080189b0
 800e47c:	08018ef4 	.word	0x08018ef4
 800e480:	08018a04 	.word	0x08018a04
 800e484:	08018f0c 	.word	0x08018f0c
 800e488:	2000ae7c 	.word	0x2000ae7c
 800e48c:	08018f34 	.word	0x08018f34
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	7d1b      	ldrb	r3, [r3, #20]
 800e49c:	2b02      	cmp	r3, #2
 800e49e:	d006      	beq.n	800e4ae <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	8b5b      	ldrh	r3, [r3, #26]
 800e4a4:	f023 0303 	bic.w	r3, r3, #3
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7f8 fffe 	bl	80074b6 <lwip_htonl>
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4be:	891b      	ldrh	r3, [r3, #8]
 800e4c0:	461d      	mov	r5, r3
 800e4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c4:	68db      	ldr	r3, [r3, #12]
 800e4c6:	899b      	ldrh	r3, [r3, #12]
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7f8 ffde 	bl	800748c <lwip_htons>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	f003 0303 	and.w	r3, r3, #3
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d001      	beq.n	800e4e0 <tcp_output+0x2a0>
 800e4dc:	2301      	movs	r3, #1
 800e4de:	e000      	b.n	800e4e2 <tcp_output+0x2a2>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	442b      	add	r3, r5
 800e4e4:	4423      	add	r3, r4
 800e4e6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	1ad3      	subs	r3, r2, r3
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	da02      	bge.n	800e4fa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	68ba      	ldr	r2, [r7, #8]
 800e4f8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fc:	891b      	ldrh	r3, [r3, #8]
 800e4fe:	461c      	mov	r4, r3
 800e500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e502:	68db      	ldr	r3, [r3, #12]
 800e504:	899b      	ldrh	r3, [r3, #12]
 800e506:	b29b      	uxth	r3, r3
 800e508:	4618      	mov	r0, r3
 800e50a:	f7f8 ffbf 	bl	800748c <lwip_htons>
 800e50e:	4603      	mov	r3, r0
 800e510:	b2db      	uxtb	r3, r3
 800e512:	f003 0303 	and.w	r3, r3, #3
 800e516:	2b00      	cmp	r3, #0
 800e518:	d001      	beq.n	800e51e <tcp_output+0x2de>
 800e51a:	2301      	movs	r3, #1
 800e51c:	e000      	b.n	800e520 <tcp_output+0x2e0>
 800e51e:	2300      	movs	r3, #0
 800e520:	4423      	add	r3, r4
 800e522:	2b00      	cmp	r3, #0
 800e524:	d049      	beq.n	800e5ba <tcp_output+0x37a>
      seg->next = NULL;
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e528:	2200      	movs	r2, #0
 800e52a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e530:	2b00      	cmp	r3, #0
 800e532:	d105      	bne.n	800e540 <tcp_output+0x300>
        pcb->unacked = seg;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e538:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53c:	623b      	str	r3, [r7, #32]
 800e53e:	e03f      	b.n	800e5c0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	4618      	mov	r0, r3
 800e548:	f7f8 ffb5 	bl	80074b6 <lwip_htonl>
 800e54c:	4604      	mov	r4, r0
 800e54e:	6a3b      	ldr	r3, [r7, #32]
 800e550:	68db      	ldr	r3, [r3, #12]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	4618      	mov	r0, r3
 800e556:	f7f8 ffae 	bl	80074b6 <lwip_htonl>
 800e55a:	4603      	mov	r3, r0
 800e55c:	1ae3      	subs	r3, r4, r3
 800e55e:	2b00      	cmp	r3, #0
 800e560:	da24      	bge.n	800e5ac <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	3370      	adds	r3, #112	; 0x70
 800e566:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e568:	e002      	b.n	800e570 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e56a:	69fb      	ldr	r3, [r7, #28]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d011      	beq.n	800e59c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	68db      	ldr	r3, [r3, #12]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	4618      	mov	r0, r3
 800e582:	f7f8 ff98 	bl	80074b6 <lwip_htonl>
 800e586:	4604      	mov	r4, r0
 800e588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	4618      	mov	r0, r3
 800e590:	f7f8 ff91 	bl	80074b6 <lwip_htonl>
 800e594:	4603      	mov	r3, r0
 800e596:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e598:	2b00      	cmp	r3, #0
 800e59a:	dbe6      	blt.n	800e56a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5a8:	601a      	str	r2, [r3, #0]
 800e5aa:	e009      	b.n	800e5c0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e5ac:	6a3b      	ldr	r3, [r7, #32]
 800e5ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5b0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e5b2:	6a3b      	ldr	r3, [r7, #32]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	623b      	str	r3, [r7, #32]
 800e5b8:	e002      	b.n	800e5c0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e5ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5bc:	f7fb ff01 	bl	800a3c2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5c4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d012      	beq.n	800e5f2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7f8 ff6f 	bl	80074b6 <lwip_htonl>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5de:	1ad3      	subs	r3, r2, r3
 800e5e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5e2:	8912      	ldrh	r2, [r2, #8]
 800e5e4:	4413      	add	r3, r2
  while (seg != NULL &&
 800e5e6:	69ba      	ldr	r2, [r7, #24]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	f4bf aed9 	bcs.w	800e3a0 <tcp_output+0x160>
 800e5ee:	e000      	b.n	800e5f2 <tcp_output+0x3b2>
      break;
 800e5f0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d108      	bne.n	800e60c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e602:	e004      	b.n	800e60e <tcp_output+0x3ce>
    goto output_done;
 800e604:	bf00      	nop
 800e606:	e002      	b.n	800e60e <tcp_output+0x3ce>
    goto output_done;
 800e608:	bf00      	nop
 800e60a:	e000      	b.n	800e60e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e60c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	8b5b      	ldrh	r3, [r3, #26]
 800e612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e616:	b29a      	uxth	r2, r3
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e61c:	2300      	movs	r3, #0
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3728      	adds	r7, #40	; 0x28
 800e622:	46bd      	mov	sp, r7
 800e624:	bdb0      	pop	{r4, r5, r7, pc}
 800e626:	bf00      	nop

0800e628 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d106      	bne.n	800e644 <tcp_output_segment_busy+0x1c>
 800e636:	4b09      	ldr	r3, [pc, #36]	; (800e65c <tcp_output_segment_busy+0x34>)
 800e638:	f240 529a 	movw	r2, #1434	; 0x59a
 800e63c:	4908      	ldr	r1, [pc, #32]	; (800e660 <tcp_output_segment_busy+0x38>)
 800e63e:	4809      	ldr	r0, [pc, #36]	; (800e664 <tcp_output_segment_busy+0x3c>)
 800e640:	f006 f930 	bl	80148a4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	685b      	ldr	r3, [r3, #4]
 800e648:	7b9b      	ldrb	r3, [r3, #14]
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d001      	beq.n	800e652 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e64e:	2301      	movs	r3, #1
 800e650:	e000      	b.n	800e654 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e652:	2300      	movs	r3, #0
}
 800e654:	4618      	mov	r0, r3
 800e656:	3708      	adds	r7, #8
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	080189b0 	.word	0x080189b0
 800e660:	08018f4c 	.word	0x08018f4c
 800e664:	08018a04 	.word	0x08018a04

0800e668 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e668:	b5b0      	push	{r4, r5, r7, lr}
 800e66a:	b08c      	sub	sp, #48	; 0x30
 800e66c:	af04      	add	r7, sp, #16
 800e66e:	60f8      	str	r0, [r7, #12]
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d106      	bne.n	800e688 <tcp_output_segment+0x20>
 800e67a:	4b64      	ldr	r3, [pc, #400]	; (800e80c <tcp_output_segment+0x1a4>)
 800e67c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e680:	4963      	ldr	r1, [pc, #396]	; (800e810 <tcp_output_segment+0x1a8>)
 800e682:	4864      	ldr	r0, [pc, #400]	; (800e814 <tcp_output_segment+0x1ac>)
 800e684:	f006 f90e 	bl	80148a4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d106      	bne.n	800e69c <tcp_output_segment+0x34>
 800e68e:	4b5f      	ldr	r3, [pc, #380]	; (800e80c <tcp_output_segment+0x1a4>)
 800e690:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e694:	4960      	ldr	r1, [pc, #384]	; (800e818 <tcp_output_segment+0x1b0>)
 800e696:	485f      	ldr	r0, [pc, #380]	; (800e814 <tcp_output_segment+0x1ac>)
 800e698:	f006 f904 	bl	80148a4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d106      	bne.n	800e6b0 <tcp_output_segment+0x48>
 800e6a2:	4b5a      	ldr	r3, [pc, #360]	; (800e80c <tcp_output_segment+0x1a4>)
 800e6a4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e6a8:	495c      	ldr	r1, [pc, #368]	; (800e81c <tcp_output_segment+0x1b4>)
 800e6aa:	485a      	ldr	r0, [pc, #360]	; (800e814 <tcp_output_segment+0x1ac>)
 800e6ac:	f006 f8fa 	bl	80148a4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	f7ff ffb9 	bl	800e628 <tcp_output_segment_busy>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d001      	beq.n	800e6c0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	e0a1      	b.n	800e804 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	68dc      	ldr	r4, [r3, #12]
 800e6c8:	4610      	mov	r0, r2
 800e6ca:	f7f8 fef4 	bl	80074b6 <lwip_htonl>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	68dc      	ldr	r4, [r3, #12]
 800e6da:	4610      	mov	r0, r2
 800e6dc:	f7f8 fed6 	bl	800748c <lwip_htons>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e8:	68ba      	ldr	r2, [r7, #8]
 800e6ea:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e6ec:	441a      	add	r2, r3
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	68db      	ldr	r3, [r3, #12]
 800e6f6:	3314      	adds	r3, #20
 800e6f8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	7a9b      	ldrb	r3, [r3, #10]
 800e6fe:	f003 0301 	and.w	r3, r3, #1
 800e702:	2b00      	cmp	r3, #0
 800e704:	d015      	beq.n	800e732 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	3304      	adds	r3, #4
 800e70a:	461a      	mov	r2, r3
 800e70c:	6879      	ldr	r1, [r7, #4]
 800e70e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e712:	f7fc fa33 	bl	800ab7c <tcp_eff_send_mss_netif>
 800e716:	4603      	mov	r3, r0
 800e718:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e71a:	8b7b      	ldrh	r3, [r7, #26]
 800e71c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e720:	4618      	mov	r0, r3
 800e722:	f7f8 fec8 	bl	80074b6 <lwip_htonl>
 800e726:	4602      	mov	r2, r0
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	3304      	adds	r3, #4
 800e730:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e738:	2b00      	cmp	r3, #0
 800e73a:	da02      	bge.n	800e742 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	2200      	movs	r2, #0
 800e740:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e746:	2b00      	cmp	r3, #0
 800e748:	d10c      	bne.n	800e764 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e74a:	4b35      	ldr	r3, [pc, #212]	; (800e820 <tcp_output_segment+0x1b8>)
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	68db      	ldr	r3, [r3, #12]
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	4618      	mov	r0, r3
 800e75a:	f7f8 feac 	bl	80074b6 <lwip_htonl>
 800e75e:	4602      	mov	r2, r0
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	68da      	ldr	r2, [r3, #12]
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	685b      	ldr	r3, [r3, #4]
 800e76e:	1ad3      	subs	r3, r2, r3
 800e770:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	8959      	ldrh	r1, [r3, #10]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	8b3a      	ldrh	r2, [r7, #24]
 800e77e:	1a8a      	subs	r2, r1, r2
 800e780:	b292      	uxth	r2, r2
 800e782:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	8919      	ldrh	r1, [r3, #8]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	685b      	ldr	r3, [r3, #4]
 800e78e:	8b3a      	ldrh	r2, [r7, #24]
 800e790:	1a8a      	subs	r2, r1, r2
 800e792:	b292      	uxth	r2, r2
 800e794:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	68fa      	ldr	r2, [r7, #12]
 800e79c:	68d2      	ldr	r2, [r2, #12]
 800e79e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	741a      	strb	r2, [r3, #16]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	68da      	ldr	r2, [r3, #12]
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	7a9b      	ldrb	r3, [r3, #10]
 800e7b4:	f003 0301 	and.w	r3, r3, #1
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d001      	beq.n	800e7c0 <tcp_output_segment+0x158>
 800e7bc:	2318      	movs	r3, #24
 800e7be:	e000      	b.n	800e7c2 <tcp_output_segment+0x15a>
 800e7c0:	2314      	movs	r3, #20
 800e7c2:	4413      	add	r3, r2
 800e7c4:	69fa      	ldr	r2, [r7, #28]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d006      	beq.n	800e7d8 <tcp_output_segment+0x170>
 800e7ca:	4b10      	ldr	r3, [pc, #64]	; (800e80c <tcp_output_segment+0x1a4>)
 800e7cc:	f240 621c 	movw	r2, #1564	; 0x61c
 800e7d0:	4914      	ldr	r1, [pc, #80]	; (800e824 <tcp_output_segment+0x1bc>)
 800e7d2:	4810      	ldr	r0, [pc, #64]	; (800e814 <tcp_output_segment+0x1ac>)
 800e7d4:	f006 f866 	bl	80148a4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	6858      	ldr	r0, [r3, #4]
 800e7dc:	68b9      	ldr	r1, [r7, #8]
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	1d1c      	adds	r4, r3, #4
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	7add      	ldrb	r5, [r3, #11]
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	7a9b      	ldrb	r3, [r3, #10]
 800e7ea:	687a      	ldr	r2, [r7, #4]
 800e7ec:	9202      	str	r2, [sp, #8]
 800e7ee:	2206      	movs	r2, #6
 800e7f0:	9201      	str	r2, [sp, #4]
 800e7f2:	9300      	str	r3, [sp, #0]
 800e7f4:	462b      	mov	r3, r5
 800e7f6:	4622      	mov	r2, r4
 800e7f8:	f002 fa34 	bl	8010c64 <ip4_output_if>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e800:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e804:	4618      	mov	r0, r3
 800e806:	3720      	adds	r7, #32
 800e808:	46bd      	mov	sp, r7
 800e80a:	bdb0      	pop	{r4, r5, r7, pc}
 800e80c:	080189b0 	.word	0x080189b0
 800e810:	08018f74 	.word	0x08018f74
 800e814:	08018a04 	.word	0x08018a04
 800e818:	08018f94 	.word	0x08018f94
 800e81c:	08018fb4 	.word	0x08018fb4
 800e820:	2000ae6c 	.word	0x2000ae6c
 800e824:	08018fd8 	.word	0x08018fd8

0800e828 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e828:	b5b0      	push	{r4, r5, r7, lr}
 800e82a:	b084      	sub	sp, #16
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d106      	bne.n	800e844 <tcp_rexmit_rto_prepare+0x1c>
 800e836:	4b31      	ldr	r3, [pc, #196]	; (800e8fc <tcp_rexmit_rto_prepare+0xd4>)
 800e838:	f240 6263 	movw	r2, #1635	; 0x663
 800e83c:	4930      	ldr	r1, [pc, #192]	; (800e900 <tcp_rexmit_rto_prepare+0xd8>)
 800e83e:	4831      	ldr	r0, [pc, #196]	; (800e904 <tcp_rexmit_rto_prepare+0xdc>)
 800e840:	f006 f830 	bl	80148a4 <iprintf>

  if (pcb->unacked == NULL) {
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d102      	bne.n	800e852 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e84c:	f06f 0305 	mvn.w	r3, #5
 800e850:	e050      	b.n	800e8f4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e856:	60fb      	str	r3, [r7, #12]
 800e858:	e00b      	b.n	800e872 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e85a:	68f8      	ldr	r0, [r7, #12]
 800e85c:	f7ff fee4 	bl	800e628 <tcp_output_segment_busy>
 800e860:	4603      	mov	r3, r0
 800e862:	2b00      	cmp	r3, #0
 800e864:	d002      	beq.n	800e86c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e866:	f06f 0305 	mvn.w	r3, #5
 800e86a:	e043      	b.n	800e8f4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	60fb      	str	r3, [r7, #12]
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d1ef      	bne.n	800e85a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e87a:	68f8      	ldr	r0, [r7, #12]
 800e87c:	f7ff fed4 	bl	800e628 <tcp_output_segment_busy>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d002      	beq.n	800e88c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e886:	f06f 0305 	mvn.w	r3, #5
 800e88a:	e033      	b.n	800e8f4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	8b5b      	ldrh	r3, [r3, #26]
 800e8a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e8aa:	b29a      	uxth	r2, r3
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	685b      	ldr	r3, [r3, #4]
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7f8 fdfd 	bl	80074b6 <lwip_htonl>
 800e8bc:	4604      	mov	r4, r0
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	891b      	ldrh	r3, [r3, #8]
 800e8c2:	461d      	mov	r5, r3
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	899b      	ldrh	r3, [r3, #12]
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7f8 fddd 	bl	800748c <lwip_htons>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	b2db      	uxtb	r3, r3
 800e8d6:	f003 0303 	and.w	r3, r3, #3
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d001      	beq.n	800e8e2 <tcp_rexmit_rto_prepare+0xba>
 800e8de:	2301      	movs	r3, #1
 800e8e0:	e000      	b.n	800e8e4 <tcp_rexmit_rto_prepare+0xbc>
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	442b      	add	r3, r5
 800e8e6:	18e2      	adds	r2, r4, r3
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3710      	adds	r7, #16
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bdb0      	pop	{r4, r5, r7, pc}
 800e8fc:	080189b0 	.word	0x080189b0
 800e900:	08018fec 	.word	0x08018fec
 800e904:	08018a04 	.word	0x08018a04

0800e908 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d106      	bne.n	800e924 <tcp_rexmit_rto_commit+0x1c>
 800e916:	4b0d      	ldr	r3, [pc, #52]	; (800e94c <tcp_rexmit_rto_commit+0x44>)
 800e918:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e91c:	490c      	ldr	r1, [pc, #48]	; (800e950 <tcp_rexmit_rto_commit+0x48>)
 800e91e:	480d      	ldr	r0, [pc, #52]	; (800e954 <tcp_rexmit_rto_commit+0x4c>)
 800e920:	f005 ffc0 	bl	80148a4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e92a:	2bff      	cmp	r3, #255	; 0xff
 800e92c:	d007      	beq.n	800e93e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e934:	3301      	adds	r3, #1
 800e936:	b2da      	uxtb	r2, r3
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f7ff fc7e 	bl	800e240 <tcp_output>
}
 800e944:	bf00      	nop
 800e946:	3708      	adds	r7, #8
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}
 800e94c:	080189b0 	.word	0x080189b0
 800e950:	08019010 	.word	0x08019010
 800e954:	08018a04 	.word	0x08018a04

0800e958 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d106      	bne.n	800e974 <tcp_rexmit_rto+0x1c>
 800e966:	4b0a      	ldr	r3, [pc, #40]	; (800e990 <tcp_rexmit_rto+0x38>)
 800e968:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e96c:	4909      	ldr	r1, [pc, #36]	; (800e994 <tcp_rexmit_rto+0x3c>)
 800e96e:	480a      	ldr	r0, [pc, #40]	; (800e998 <tcp_rexmit_rto+0x40>)
 800e970:	f005 ff98 	bl	80148a4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f7ff ff57 	bl	800e828 <tcp_rexmit_rto_prepare>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d102      	bne.n	800e986 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f7ff ffc1 	bl	800e908 <tcp_rexmit_rto_commit>
  }
}
 800e986:	bf00      	nop
 800e988:	3708      	adds	r7, #8
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	080189b0 	.word	0x080189b0
 800e994:	08019034 	.word	0x08019034
 800e998:	08018a04 	.word	0x08018a04

0800e99c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e99c:	b590      	push	{r4, r7, lr}
 800e99e:	b085      	sub	sp, #20
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d106      	bne.n	800e9b8 <tcp_rexmit+0x1c>
 800e9aa:	4b2f      	ldr	r3, [pc, #188]	; (800ea68 <tcp_rexmit+0xcc>)
 800e9ac:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e9b0:	492e      	ldr	r1, [pc, #184]	; (800ea6c <tcp_rexmit+0xd0>)
 800e9b2:	482f      	ldr	r0, [pc, #188]	; (800ea70 <tcp_rexmit+0xd4>)
 800e9b4:	f005 ff76 	bl	80148a4 <iprintf>

  if (pcb->unacked == NULL) {
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d102      	bne.n	800e9c6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e9c0:	f06f 0305 	mvn.w	r3, #5
 800e9c4:	e04c      	b.n	800ea60 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ca:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e9cc:	68b8      	ldr	r0, [r7, #8]
 800e9ce:	f7ff fe2b 	bl	800e628 <tcp_output_segment_busy>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d002      	beq.n	800e9de <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e9d8:	f06f 0305 	mvn.w	r3, #5
 800e9dc:	e040      	b.n	800ea60 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	336c      	adds	r3, #108	; 0x6c
 800e9ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e9ec:	e002      	b.n	800e9f4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d011      	beq.n	800ea20 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	68db      	ldr	r3, [r3, #12]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7f8 fd56 	bl	80074b6 <lwip_htonl>
 800ea0a:	4604      	mov	r4, r0
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7f8 fd4f 	bl	80074b6 <lwip_htonl>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	dbe6      	blt.n	800e9ee <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	68ba      	ldr	r2, [r7, #8]
 800ea2c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d103      	bne.n	800ea3e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea44:	2bff      	cmp	r3, #255	; 0xff
 800ea46:	d007      	beq.n	800ea58 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea4e:	3301      	adds	r3, #1
 800ea50:	b2da      	uxtb	r2, r3
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ea5e:	2300      	movs	r3, #0
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3714      	adds	r7, #20
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd90      	pop	{r4, r7, pc}
 800ea68:	080189b0 	.word	0x080189b0
 800ea6c:	08019050 	.word	0x08019050
 800ea70:	08018a04 	.word	0x08018a04

0800ea74 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d106      	bne.n	800ea90 <tcp_rexmit_fast+0x1c>
 800ea82:	4b2a      	ldr	r3, [pc, #168]	; (800eb2c <tcp_rexmit_fast+0xb8>)
 800ea84:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ea88:	4929      	ldr	r1, [pc, #164]	; (800eb30 <tcp_rexmit_fast+0xbc>)
 800ea8a:	482a      	ldr	r0, [pc, #168]	; (800eb34 <tcp_rexmit_fast+0xc0>)
 800ea8c:	f005 ff0a 	bl	80148a4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d044      	beq.n	800eb22 <tcp_rexmit_fast+0xae>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	8b5b      	ldrh	r3, [r3, #26]
 800ea9c:	f003 0304 	and.w	r3, r3, #4
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d13e      	bne.n	800eb22 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f7ff ff79 	bl	800e99c <tcp_rexmit>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d138      	bne.n	800eb22 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eabc:	4293      	cmp	r3, r2
 800eabe:	bf28      	it	cs
 800eac0:	4613      	movcs	r3, r2
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	0fda      	lsrs	r2, r3, #31
 800eac6:	4413      	add	r3, r2
 800eac8:	105b      	asrs	r3, r3, #1
 800eaca:	b29a      	uxth	r2, r3
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ead8:	461a      	mov	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eade:	005b      	lsls	r3, r3, #1
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d206      	bcs.n	800eaf2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eae8:	005b      	lsls	r3, r3, #1
 800eaea:	b29a      	uxth	r2, r3
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eafc:	4619      	mov	r1, r3
 800eafe:	0049      	lsls	r1, r1, #1
 800eb00:	440b      	add	r3, r1
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	4413      	add	r3, r2
 800eb06:	b29a      	uxth	r2, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	8b5b      	ldrh	r3, [r3, #26]
 800eb12:	f043 0304 	orr.w	r3, r3, #4
 800eb16:	b29a      	uxth	r2, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800eb22:	bf00      	nop
 800eb24:	3708      	adds	r7, #8
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	080189b0 	.word	0x080189b0
 800eb30:	08019068 	.word	0x08019068
 800eb34:	08018a04 	.word	0x08018a04

0800eb38 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b086      	sub	sp, #24
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	607b      	str	r3, [r7, #4]
 800eb42:	460b      	mov	r3, r1
 800eb44:	817b      	strh	r3, [r7, #10]
 800eb46:	4613      	mov	r3, r2
 800eb48:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800eb4a:	897a      	ldrh	r2, [r7, #10]
 800eb4c:	893b      	ldrh	r3, [r7, #8]
 800eb4e:	4413      	add	r3, r2
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	3314      	adds	r3, #20
 800eb54:	b29b      	uxth	r3, r3
 800eb56:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	2022      	movs	r0, #34	; 0x22
 800eb5e:	f7f9 fd0f 	bl	8008580 <pbuf_alloc>
 800eb62:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d04d      	beq.n	800ec06 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800eb6a:	897b      	ldrh	r3, [r7, #10]
 800eb6c:	3313      	adds	r3, #19
 800eb6e:	697a      	ldr	r2, [r7, #20]
 800eb70:	8952      	ldrh	r2, [r2, #10]
 800eb72:	4293      	cmp	r3, r2
 800eb74:	db06      	blt.n	800eb84 <tcp_output_alloc_header_common+0x4c>
 800eb76:	4b26      	ldr	r3, [pc, #152]	; (800ec10 <tcp_output_alloc_header_common+0xd8>)
 800eb78:	f240 7223 	movw	r2, #1827	; 0x723
 800eb7c:	4925      	ldr	r1, [pc, #148]	; (800ec14 <tcp_output_alloc_header_common+0xdc>)
 800eb7e:	4826      	ldr	r0, [pc, #152]	; (800ec18 <tcp_output_alloc_header_common+0xe0>)
 800eb80:	f005 fe90 	bl	80148a4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	685b      	ldr	r3, [r3, #4]
 800eb88:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800eb8a:	8c3b      	ldrh	r3, [r7, #32]
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f7f8 fc7d 	bl	800748c <lwip_htons>
 800eb92:	4603      	mov	r3, r0
 800eb94:	461a      	mov	r2, r3
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800eb9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7f8 fc75 	bl	800748c <lwip_htons>
 800eba2:	4603      	mov	r3, r0
 800eba4:	461a      	mov	r2, r3
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ebb0:	68f8      	ldr	r0, [r7, #12]
 800ebb2:	f7f8 fc80 	bl	80074b6 <lwip_htonl>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ebbc:	897b      	ldrh	r3, [r7, #10]
 800ebbe:	089b      	lsrs	r3, r3, #2
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	3305      	adds	r3, #5
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	031b      	lsls	r3, r3, #12
 800ebc8:	b29a      	uxth	r2, r3
 800ebca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	4313      	orrs	r3, r2
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7f8 fc59 	bl	800748c <lwip_htons>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	461a      	mov	r2, r3
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ebe2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7f8 fc51 	bl	800748c <lwip_htons>
 800ebea:	4603      	mov	r3, r0
 800ebec:	461a      	mov	r2, r3
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	741a      	strb	r2, [r3, #16]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	749a      	strb	r2, [r3, #18]
 800ec02:	2200      	movs	r2, #0
 800ec04:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ec06:	697b      	ldr	r3, [r7, #20]
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3718      	adds	r7, #24
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	080189b0 	.word	0x080189b0
 800ec14:	08019088 	.word	0x08019088
 800ec18:	08018a04 	.word	0x08018a04

0800ec1c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ec1c:	b5b0      	push	{r4, r5, r7, lr}
 800ec1e:	b08a      	sub	sp, #40	; 0x28
 800ec20:	af04      	add	r7, sp, #16
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	607b      	str	r3, [r7, #4]
 800ec26:	460b      	mov	r3, r1
 800ec28:	817b      	strh	r3, [r7, #10]
 800ec2a:	4613      	mov	r3, r2
 800ec2c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d106      	bne.n	800ec42 <tcp_output_alloc_header+0x26>
 800ec34:	4b15      	ldr	r3, [pc, #84]	; (800ec8c <tcp_output_alloc_header+0x70>)
 800ec36:	f240 7242 	movw	r2, #1858	; 0x742
 800ec3a:	4915      	ldr	r1, [pc, #84]	; (800ec90 <tcp_output_alloc_header+0x74>)
 800ec3c:	4815      	ldr	r0, [pc, #84]	; (800ec94 <tcp_output_alloc_header+0x78>)
 800ec3e:	f005 fe31 	bl	80148a4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	8adb      	ldrh	r3, [r3, #22]
 800ec4a:	68fa      	ldr	r2, [r7, #12]
 800ec4c:	8b12      	ldrh	r2, [r2, #24]
 800ec4e:	68f9      	ldr	r1, [r7, #12]
 800ec50:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800ec52:	893d      	ldrh	r5, [r7, #8]
 800ec54:	897c      	ldrh	r4, [r7, #10]
 800ec56:	9103      	str	r1, [sp, #12]
 800ec58:	2110      	movs	r1, #16
 800ec5a:	9102      	str	r1, [sp, #8]
 800ec5c:	9201      	str	r2, [sp, #4]
 800ec5e:	9300      	str	r3, [sp, #0]
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	462a      	mov	r2, r5
 800ec64:	4621      	mov	r1, r4
 800ec66:	f7ff ff67 	bl	800eb38 <tcp_output_alloc_header_common>
 800ec6a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d006      	beq.n	800ec80 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec76:	68fa      	ldr	r2, [r7, #12]
 800ec78:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ec7a:	441a      	add	r2, r3
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800ec80:	697b      	ldr	r3, [r7, #20]
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3718      	adds	r7, #24
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bdb0      	pop	{r4, r5, r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	080189b0 	.word	0x080189b0
 800ec90:	080190b8 	.word	0x080190b8
 800ec94:	08018a04 	.word	0x08018a04

0800ec98 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b088      	sub	sp, #32
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	4611      	mov	r1, r2
 800eca4:	461a      	mov	r2, r3
 800eca6:	460b      	mov	r3, r1
 800eca8:	71fb      	strb	r3, [r7, #7]
 800ecaa:	4613      	mov	r3, r2
 800ecac:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d106      	bne.n	800ecc6 <tcp_output_fill_options+0x2e>
 800ecb8:	4b12      	ldr	r3, [pc, #72]	; (800ed04 <tcp_output_fill_options+0x6c>)
 800ecba:	f240 7256 	movw	r2, #1878	; 0x756
 800ecbe:	4912      	ldr	r1, [pc, #72]	; (800ed08 <tcp_output_fill_options+0x70>)
 800ecc0:	4812      	ldr	r0, [pc, #72]	; (800ed0c <tcp_output_fill_options+0x74>)
 800ecc2:	f005 fdef 	bl	80148a4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800eccc:	69bb      	ldr	r3, [r7, #24]
 800ecce:	3314      	adds	r3, #20
 800ecd0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ecd2:	8bfb      	ldrh	r3, [r7, #30]
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	79fb      	ldrb	r3, [r7, #7]
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	f003 0304 	and.w	r3, r3, #4
 800ece0:	4413      	add	r3, r2
 800ece2:	3314      	adds	r3, #20
 800ece4:	69ba      	ldr	r2, [r7, #24]
 800ece6:	4413      	add	r3, r2
 800ece8:	697a      	ldr	r2, [r7, #20]
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d006      	beq.n	800ecfc <tcp_output_fill_options+0x64>
 800ecee:	4b05      	ldr	r3, [pc, #20]	; (800ed04 <tcp_output_fill_options+0x6c>)
 800ecf0:	f240 7275 	movw	r2, #1909	; 0x775
 800ecf4:	4906      	ldr	r1, [pc, #24]	; (800ed10 <tcp_output_fill_options+0x78>)
 800ecf6:	4805      	ldr	r0, [pc, #20]	; (800ed0c <tcp_output_fill_options+0x74>)
 800ecf8:	f005 fdd4 	bl	80148a4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ecfc:	bf00      	nop
 800ecfe:	3720      	adds	r7, #32
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	080189b0 	.word	0x080189b0
 800ed08:	080190e0 	.word	0x080190e0
 800ed0c:	08018a04 	.word	0x08018a04
 800ed10:	08018fd8 	.word	0x08018fd8

0800ed14 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b08a      	sub	sp, #40	; 0x28
 800ed18:	af04      	add	r7, sp, #16
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	607a      	str	r2, [r7, #4]
 800ed20:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d106      	bne.n	800ed36 <tcp_output_control_segment+0x22>
 800ed28:	4b1c      	ldr	r3, [pc, #112]	; (800ed9c <tcp_output_control_segment+0x88>)
 800ed2a:	f240 7287 	movw	r2, #1927	; 0x787
 800ed2e:	491c      	ldr	r1, [pc, #112]	; (800eda0 <tcp_output_control_segment+0x8c>)
 800ed30:	481c      	ldr	r0, [pc, #112]	; (800eda4 <tcp_output_control_segment+0x90>)
 800ed32:	f005 fdb7 	bl	80148a4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ed36:	683a      	ldr	r2, [r7, #0]
 800ed38:	6879      	ldr	r1, [r7, #4]
 800ed3a:	68f8      	ldr	r0, [r7, #12]
 800ed3c:	f7fe fae8 	bl	800d310 <tcp_route>
 800ed40:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d102      	bne.n	800ed4e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ed48:	23fc      	movs	r3, #252	; 0xfc
 800ed4a:	75fb      	strb	r3, [r7, #23]
 800ed4c:	e01c      	b.n	800ed88 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d006      	beq.n	800ed62 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	7adb      	ldrb	r3, [r3, #11]
 800ed58:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	7a9b      	ldrb	r3, [r3, #10]
 800ed5e:	757b      	strb	r3, [r7, #21]
 800ed60:	e003      	b.n	800ed6a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ed62:	23ff      	movs	r3, #255	; 0xff
 800ed64:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ed66:	2300      	movs	r3, #0
 800ed68:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ed6a:	7dba      	ldrb	r2, [r7, #22]
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	9302      	str	r3, [sp, #8]
 800ed70:	2306      	movs	r3, #6
 800ed72:	9301      	str	r3, [sp, #4]
 800ed74:	7d7b      	ldrb	r3, [r7, #21]
 800ed76:	9300      	str	r3, [sp, #0]
 800ed78:	4613      	mov	r3, r2
 800ed7a:	683a      	ldr	r2, [r7, #0]
 800ed7c:	6879      	ldr	r1, [r7, #4]
 800ed7e:	68b8      	ldr	r0, [r7, #8]
 800ed80:	f001 ff70 	bl	8010c64 <ip4_output_if>
 800ed84:	4603      	mov	r3, r0
 800ed86:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ed88:	68b8      	ldr	r0, [r7, #8]
 800ed8a:	f7f9 fedd 	bl	8008b48 <pbuf_free>
  return err;
 800ed8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3718      	adds	r7, #24
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	080189b0 	.word	0x080189b0
 800eda0:	08019108 	.word	0x08019108
 800eda4:	08018a04 	.word	0x08018a04

0800eda8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800eda8:	b590      	push	{r4, r7, lr}
 800edaa:	b08b      	sub	sp, #44	; 0x2c
 800edac:	af04      	add	r7, sp, #16
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d106      	bne.n	800edca <tcp_rst+0x22>
 800edbc:	4b1f      	ldr	r3, [pc, #124]	; (800ee3c <tcp_rst+0x94>)
 800edbe:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800edc2:	491f      	ldr	r1, [pc, #124]	; (800ee40 <tcp_rst+0x98>)
 800edc4:	481f      	ldr	r0, [pc, #124]	; (800ee44 <tcp_rst+0x9c>)
 800edc6:	f005 fd6d 	bl	80148a4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800edca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d106      	bne.n	800edde <tcp_rst+0x36>
 800edd0:	4b1a      	ldr	r3, [pc, #104]	; (800ee3c <tcp_rst+0x94>)
 800edd2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800edd6:	491c      	ldr	r1, [pc, #112]	; (800ee48 <tcp_rst+0xa0>)
 800edd8:	481a      	ldr	r0, [pc, #104]	; (800ee44 <tcp_rst+0x9c>)
 800edda:	f005 fd63 	bl	80148a4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800edde:	2300      	movs	r3, #0
 800ede0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ede2:	f246 0308 	movw	r3, #24584	; 0x6008
 800ede6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ede8:	7dfb      	ldrb	r3, [r7, #23]
 800edea:	b29c      	uxth	r4, r3
 800edec:	68b8      	ldr	r0, [r7, #8]
 800edee:	f7f8 fb62 	bl	80074b6 <lwip_htonl>
 800edf2:	4602      	mov	r2, r0
 800edf4:	8abb      	ldrh	r3, [r7, #20]
 800edf6:	9303      	str	r3, [sp, #12]
 800edf8:	2314      	movs	r3, #20
 800edfa:	9302      	str	r3, [sp, #8]
 800edfc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800edfe:	9301      	str	r3, [sp, #4]
 800ee00:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ee02:	9300      	str	r3, [sp, #0]
 800ee04:	4613      	mov	r3, r2
 800ee06:	2200      	movs	r2, #0
 800ee08:	4621      	mov	r1, r4
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f7ff fe94 	bl	800eb38 <tcp_output_alloc_header_common>
 800ee10:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00c      	beq.n	800ee32 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ee18:	7dfb      	ldrb	r3, [r7, #23]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	6939      	ldr	r1, [r7, #16]
 800ee1e:	68f8      	ldr	r0, [r7, #12]
 800ee20:	f7ff ff3a 	bl	800ec98 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ee24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee26:	683a      	ldr	r2, [r7, #0]
 800ee28:	6939      	ldr	r1, [r7, #16]
 800ee2a:	68f8      	ldr	r0, [r7, #12]
 800ee2c:	f7ff ff72 	bl	800ed14 <tcp_output_control_segment>
 800ee30:	e000      	b.n	800ee34 <tcp_rst+0x8c>
    return;
 800ee32:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ee34:	371c      	adds	r7, #28
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd90      	pop	{r4, r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	080189b0 	.word	0x080189b0
 800ee40:	08019134 	.word	0x08019134
 800ee44:	08018a04 	.word	0x08018a04
 800ee48:	08019150 	.word	0x08019150

0800ee4c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ee4c:	b590      	push	{r4, r7, lr}
 800ee4e:	b087      	sub	sp, #28
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ee54:	2300      	movs	r3, #0
 800ee56:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d106      	bne.n	800ee70 <tcp_send_empty_ack+0x24>
 800ee62:	4b28      	ldr	r3, [pc, #160]	; (800ef04 <tcp_send_empty_ack+0xb8>)
 800ee64:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ee68:	4927      	ldr	r1, [pc, #156]	; (800ef08 <tcp_send_empty_ack+0xbc>)
 800ee6a:	4828      	ldr	r0, [pc, #160]	; (800ef0c <tcp_send_empty_ack+0xc0>)
 800ee6c:	f005 fd1a 	bl	80148a4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ee70:	7dfb      	ldrb	r3, [r7, #23]
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	f003 0304 	and.w	r3, r3, #4
 800ee7a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ee7c:	7d7b      	ldrb	r3, [r7, #21]
 800ee7e:	b29c      	uxth	r4, r3
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7f8 fb16 	bl	80074b6 <lwip_htonl>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	4621      	mov	r1, r4
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f7ff fec3 	bl	800ec1c <tcp_output_alloc_header>
 800ee96:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d109      	bne.n	800eeb2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	8b5b      	ldrh	r3, [r3, #26]
 800eea2:	f043 0303 	orr.w	r3, r3, #3
 800eea6:	b29a      	uxth	r2, r3
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800eeac:	f06f 0301 	mvn.w	r3, #1
 800eeb0:	e023      	b.n	800eefa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800eeb2:	7dbb      	ldrb	r3, [r7, #22]
 800eeb4:	7dfa      	ldrb	r2, [r7, #23]
 800eeb6:	6939      	ldr	r1, [r7, #16]
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f7ff feed 	bl	800ec98 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	3304      	adds	r3, #4
 800eec4:	6939      	ldr	r1, [r7, #16]
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f7ff ff24 	bl	800ed14 <tcp_output_control_segment>
 800eecc:	4603      	mov	r3, r0
 800eece:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800eed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d007      	beq.n	800eee8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	8b5b      	ldrh	r3, [r3, #26]
 800eedc:	f043 0303 	orr.w	r3, r3, #3
 800eee0:	b29a      	uxth	r2, r3
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	835a      	strh	r2, [r3, #26]
 800eee6:	e006      	b.n	800eef6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	8b5b      	ldrh	r3, [r3, #26]
 800eeec:	f023 0303 	bic.w	r3, r3, #3
 800eef0:	b29a      	uxth	r2, r3
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800eef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	371c      	adds	r7, #28
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd90      	pop	{r4, r7, pc}
 800ef02:	bf00      	nop
 800ef04:	080189b0 	.word	0x080189b0
 800ef08:	0801916c 	.word	0x0801916c
 800ef0c:	08018a04 	.word	0x08018a04

0800ef10 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ef10:	b590      	push	{r4, r7, lr}
 800ef12:	b087      	sub	sp, #28
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ef18:	2300      	movs	r3, #0
 800ef1a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d106      	bne.n	800ef30 <tcp_keepalive+0x20>
 800ef22:	4b18      	ldr	r3, [pc, #96]	; (800ef84 <tcp_keepalive+0x74>)
 800ef24:	f640 0224 	movw	r2, #2084	; 0x824
 800ef28:	4917      	ldr	r1, [pc, #92]	; (800ef88 <tcp_keepalive+0x78>)
 800ef2a:	4818      	ldr	r0, [pc, #96]	; (800ef8c <tcp_keepalive+0x7c>)
 800ef2c:	f005 fcba 	bl	80148a4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ef30:	7dfb      	ldrb	r3, [r7, #23]
 800ef32:	b29c      	uxth	r4, r3
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef38:	3b01      	subs	r3, #1
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7f8 fabb 	bl	80074b6 <lwip_htonl>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2200      	movs	r2, #0
 800ef44:	4621      	mov	r1, r4
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f7ff fe68 	bl	800ec1c <tcp_output_alloc_header>
 800ef4c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ef4e:	693b      	ldr	r3, [r7, #16]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d102      	bne.n	800ef5a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ef54:	f04f 33ff 	mov.w	r3, #4294967295
 800ef58:	e010      	b.n	800ef7c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ef5a:	7dfb      	ldrb	r3, [r7, #23]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	6939      	ldr	r1, [r7, #16]
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f7ff fe99 	bl	800ec98 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ef66:	687a      	ldr	r2, [r7, #4]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	3304      	adds	r3, #4
 800ef6c:	6939      	ldr	r1, [r7, #16]
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f7ff fed0 	bl	800ed14 <tcp_output_control_segment>
 800ef74:	4603      	mov	r3, r0
 800ef76:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ef78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	371c      	adds	r7, #28
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd90      	pop	{r4, r7, pc}
 800ef84:	080189b0 	.word	0x080189b0
 800ef88:	0801918c 	.word	0x0801918c
 800ef8c:	08018a04 	.word	0x08018a04

0800ef90 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ef90:	b590      	push	{r4, r7, lr}
 800ef92:	b08b      	sub	sp, #44	; 0x2c
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ef98:	2300      	movs	r3, #0
 800ef9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d106      	bne.n	800efb2 <tcp_zero_window_probe+0x22>
 800efa4:	4b4c      	ldr	r3, [pc, #304]	; (800f0d8 <tcp_zero_window_probe+0x148>)
 800efa6:	f640 024f 	movw	r2, #2127	; 0x84f
 800efaa:	494c      	ldr	r1, [pc, #304]	; (800f0dc <tcp_zero_window_probe+0x14c>)
 800efac:	484c      	ldr	r0, [pc, #304]	; (800f0e0 <tcp_zero_window_probe+0x150>)
 800efae:	f005 fc79 	bl	80148a4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efb6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800efb8:	6a3b      	ldr	r3, [r7, #32]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d101      	bne.n	800efc2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800efbe:	2300      	movs	r3, #0
 800efc0:	e086      	b.n	800f0d0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800efc8:	2bff      	cmp	r3, #255	; 0xff
 800efca:	d007      	beq.n	800efdc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800efd2:	3301      	adds	r3, #1
 800efd4:	b2da      	uxtb	r2, r3
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800efdc:	6a3b      	ldr	r3, [r7, #32]
 800efde:	68db      	ldr	r3, [r3, #12]
 800efe0:	899b      	ldrh	r3, [r3, #12]
 800efe2:	b29b      	uxth	r3, r3
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7f8 fa51 	bl	800748c <lwip_htons>
 800efea:	4603      	mov	r3, r0
 800efec:	b2db      	uxtb	r3, r3
 800efee:	f003 0301 	and.w	r3, r3, #1
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d005      	beq.n	800f002 <tcp_zero_window_probe+0x72>
 800eff6:	6a3b      	ldr	r3, [r7, #32]
 800eff8:	891b      	ldrh	r3, [r3, #8]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d101      	bne.n	800f002 <tcp_zero_window_probe+0x72>
 800effe:	2301      	movs	r3, #1
 800f000:	e000      	b.n	800f004 <tcp_zero_window_probe+0x74>
 800f002:	2300      	movs	r3, #0
 800f004:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f006:	7ffb      	ldrb	r3, [r7, #31]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	bf0c      	ite	eq
 800f00c:	2301      	moveq	r3, #1
 800f00e:	2300      	movne	r3, #0
 800f010:	b2db      	uxtb	r3, r3
 800f012:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f018:	b299      	uxth	r1, r3
 800f01a:	6a3b      	ldr	r3, [r7, #32]
 800f01c:	68db      	ldr	r3, [r3, #12]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	8bba      	ldrh	r2, [r7, #28]
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f7ff fdfa 	bl	800ec1c <tcp_output_alloc_header>
 800f028:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d102      	bne.n	800f036 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f030:	f04f 33ff 	mov.w	r3, #4294967295
 800f034:	e04c      	b.n	800f0d0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f036:	69bb      	ldr	r3, [r7, #24]
 800f038:	685b      	ldr	r3, [r3, #4]
 800f03a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f03c:	7ffb      	ldrb	r3, [r7, #31]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d011      	beq.n	800f066 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	899b      	ldrh	r3, [r3, #12]
 800f046:	b29b      	uxth	r3, r3
 800f048:	b21b      	sxth	r3, r3
 800f04a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f04e:	b21c      	sxth	r4, r3
 800f050:	2011      	movs	r0, #17
 800f052:	f7f8 fa1b 	bl	800748c <lwip_htons>
 800f056:	4603      	mov	r3, r0
 800f058:	b21b      	sxth	r3, r3
 800f05a:	4323      	orrs	r3, r4
 800f05c:	b21b      	sxth	r3, r3
 800f05e:	b29a      	uxth	r2, r3
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	819a      	strh	r2, [r3, #12]
 800f064:	e010      	b.n	800f088 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f066:	69bb      	ldr	r3, [r7, #24]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	3314      	adds	r3, #20
 800f06c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f06e:	6a3b      	ldr	r3, [r7, #32]
 800f070:	6858      	ldr	r0, [r3, #4]
 800f072:	6a3b      	ldr	r3, [r7, #32]
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	891a      	ldrh	r2, [r3, #8]
 800f078:	6a3b      	ldr	r3, [r7, #32]
 800f07a:	891b      	ldrh	r3, [r3, #8]
 800f07c:	1ad3      	subs	r3, r2, r3
 800f07e:	b29b      	uxth	r3, r3
 800f080:	2201      	movs	r2, #1
 800f082:	6939      	ldr	r1, [r7, #16]
 800f084:	f7f9 ff5a 	bl	8008f3c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f088:	6a3b      	ldr	r3, [r7, #32]
 800f08a:	68db      	ldr	r3, [r3, #12]
 800f08c:	685b      	ldr	r3, [r3, #4]
 800f08e:	4618      	mov	r0, r3
 800f090:	f7f8 fa11 	bl	80074b6 <lwip_htonl>
 800f094:	4603      	mov	r3, r0
 800f096:	3301      	adds	r3, #1
 800f098:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	1ad3      	subs	r3, r2, r3
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	da02      	bge.n	800f0ac <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	68fa      	ldr	r2, [r7, #12]
 800f0aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f0ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	69b9      	ldr	r1, [r7, #24]
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f7ff fdef 	bl	800ec98 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f0ba:	687a      	ldr	r2, [r7, #4]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	3304      	adds	r3, #4
 800f0c0:	69b9      	ldr	r1, [r7, #24]
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f7ff fe26 	bl	800ed14 <tcp_output_control_segment>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f0cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	372c      	adds	r7, #44	; 0x2c
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd90      	pop	{r4, r7, pc}
 800f0d8:	080189b0 	.word	0x080189b0
 800f0dc:	080191a8 	.word	0x080191a8
 800f0e0:	08018a04 	.word	0x08018a04

0800f0e4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f0ec:	f7fa f814 	bl	8009118 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f0f0:	4b0a      	ldr	r3, [pc, #40]	; (800f11c <tcpip_tcp_timer+0x38>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d103      	bne.n	800f100 <tcpip_tcp_timer+0x1c>
 800f0f8:	4b09      	ldr	r3, [pc, #36]	; (800f120 <tcpip_tcp_timer+0x3c>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d005      	beq.n	800f10c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f100:	2200      	movs	r2, #0
 800f102:	4908      	ldr	r1, [pc, #32]	; (800f124 <tcpip_tcp_timer+0x40>)
 800f104:	20fa      	movs	r0, #250	; 0xfa
 800f106:	f000 f8f3 	bl	800f2f0 <sys_timeout>
 800f10a:	e003      	b.n	800f114 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f10c:	4b06      	ldr	r3, [pc, #24]	; (800f128 <tcpip_tcp_timer+0x44>)
 800f10e:	2200      	movs	r2, #0
 800f110:	601a      	str	r2, [r3, #0]
  }
}
 800f112:	bf00      	nop
 800f114:	bf00      	nop
 800f116:	3708      	adds	r7, #8
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}
 800f11c:	2000ae68 	.word	0x2000ae68
 800f120:	2000ae78 	.word	0x2000ae78
 800f124:	0800f0e5 	.word	0x0800f0e5
 800f128:	200008e8 	.word	0x200008e8

0800f12c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f130:	4b0a      	ldr	r3, [pc, #40]	; (800f15c <tcp_timer_needed+0x30>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d10f      	bne.n	800f158 <tcp_timer_needed+0x2c>
 800f138:	4b09      	ldr	r3, [pc, #36]	; (800f160 <tcp_timer_needed+0x34>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d103      	bne.n	800f148 <tcp_timer_needed+0x1c>
 800f140:	4b08      	ldr	r3, [pc, #32]	; (800f164 <tcp_timer_needed+0x38>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d007      	beq.n	800f158 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f148:	4b04      	ldr	r3, [pc, #16]	; (800f15c <tcp_timer_needed+0x30>)
 800f14a:	2201      	movs	r2, #1
 800f14c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f14e:	2200      	movs	r2, #0
 800f150:	4905      	ldr	r1, [pc, #20]	; (800f168 <tcp_timer_needed+0x3c>)
 800f152:	20fa      	movs	r0, #250	; 0xfa
 800f154:	f000 f8cc 	bl	800f2f0 <sys_timeout>
  }
}
 800f158:	bf00      	nop
 800f15a:	bd80      	pop	{r7, pc}
 800f15c:	200008e8 	.word	0x200008e8
 800f160:	2000ae68 	.word	0x2000ae68
 800f164:	2000ae78 	.word	0x2000ae78
 800f168:	0800f0e5 	.word	0x0800f0e5

0800f16c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b086      	sub	sp, #24
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f178:	2006      	movs	r0, #6
 800f17a:	f7f8 fdff 	bl	8007d7c <memp_malloc>
 800f17e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d109      	bne.n	800f19a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d151      	bne.n	800f230 <sys_timeout_abs+0xc4>
 800f18c:	4b2a      	ldr	r3, [pc, #168]	; (800f238 <sys_timeout_abs+0xcc>)
 800f18e:	22be      	movs	r2, #190	; 0xbe
 800f190:	492a      	ldr	r1, [pc, #168]	; (800f23c <sys_timeout_abs+0xd0>)
 800f192:	482b      	ldr	r0, [pc, #172]	; (800f240 <sys_timeout_abs+0xd4>)
 800f194:	f005 fb86 	bl	80148a4 <iprintf>
    return;
 800f198:	e04a      	b.n	800f230 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f19a:	693b      	ldr	r3, [r7, #16]
 800f19c:	2200      	movs	r2, #0
 800f19e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	68ba      	ldr	r2, [r7, #8]
 800f1a4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	68fa      	ldr	r2, [r7, #12]
 800f1b0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f1b2:	4b24      	ldr	r3, [pc, #144]	; (800f244 <sys_timeout_abs+0xd8>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d103      	bne.n	800f1c2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f1ba:	4a22      	ldr	r2, [pc, #136]	; (800f244 <sys_timeout_abs+0xd8>)
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	6013      	str	r3, [r2, #0]
    return;
 800f1c0:	e037      	b.n	800f232 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	685a      	ldr	r2, [r3, #4]
 800f1c6:	4b1f      	ldr	r3, [pc, #124]	; (800f244 <sys_timeout_abs+0xd8>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	685b      	ldr	r3, [r3, #4]
 800f1cc:	1ad3      	subs	r3, r2, r3
 800f1ce:	0fdb      	lsrs	r3, r3, #31
 800f1d0:	f003 0301 	and.w	r3, r3, #1
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d007      	beq.n	800f1ea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f1da:	4b1a      	ldr	r3, [pc, #104]	; (800f244 <sys_timeout_abs+0xd8>)
 800f1dc:	681a      	ldr	r2, [r3, #0]
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f1e2:	4a18      	ldr	r2, [pc, #96]	; (800f244 <sys_timeout_abs+0xd8>)
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	6013      	str	r3, [r2, #0]
 800f1e8:	e023      	b.n	800f232 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f1ea:	4b16      	ldr	r3, [pc, #88]	; (800f244 <sys_timeout_abs+0xd8>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	617b      	str	r3, [r7, #20]
 800f1f0:	e01a      	b.n	800f228 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d00b      	beq.n	800f212 <sys_timeout_abs+0xa6>
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	685a      	ldr	r2, [r3, #4]
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	685b      	ldr	r3, [r3, #4]
 800f204:	1ad3      	subs	r3, r2, r3
 800f206:	0fdb      	lsrs	r3, r3, #31
 800f208:	f003 0301 	and.w	r3, r3, #1
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d007      	beq.n	800f222 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	693a      	ldr	r2, [r7, #16]
 800f21e:	601a      	str	r2, [r3, #0]
        break;
 800f220:	e007      	b.n	800f232 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	617b      	str	r3, [r7, #20]
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d1e1      	bne.n	800f1f2 <sys_timeout_abs+0x86>
 800f22e:	e000      	b.n	800f232 <sys_timeout_abs+0xc6>
    return;
 800f230:	bf00      	nop
      }
    }
  }
}
 800f232:	3718      	adds	r7, #24
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}
 800f238:	080191cc 	.word	0x080191cc
 800f23c:	08019200 	.word	0x08019200
 800f240:	08019240 	.word	0x08019240
 800f244:	200008e0 	.word	0x200008e0

0800f248 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b086      	sub	sp, #24
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	4798      	blx	r3

  now = sys_now();
 800f25a:	f7f7 fef7 	bl	800704c <sys_now>
 800f25e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	681a      	ldr	r2, [r3, #0]
 800f264:	4b0f      	ldr	r3, [pc, #60]	; (800f2a4 <lwip_cyclic_timer+0x5c>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	4413      	add	r3, r2
 800f26a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f26c:	68fa      	ldr	r2, [r7, #12]
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	1ad3      	subs	r3, r2, r3
 800f272:	0fdb      	lsrs	r3, r3, #31
 800f274:	f003 0301 	and.w	r3, r3, #1
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d009      	beq.n	800f292 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	681a      	ldr	r2, [r3, #0]
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	4413      	add	r3, r2
 800f286:	687a      	ldr	r2, [r7, #4]
 800f288:	4907      	ldr	r1, [pc, #28]	; (800f2a8 <lwip_cyclic_timer+0x60>)
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7ff ff6e 	bl	800f16c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f290:	e004      	b.n	800f29c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f292:	687a      	ldr	r2, [r7, #4]
 800f294:	4904      	ldr	r1, [pc, #16]	; (800f2a8 <lwip_cyclic_timer+0x60>)
 800f296:	68f8      	ldr	r0, [r7, #12]
 800f298:	f7ff ff68 	bl	800f16c <sys_timeout_abs>
}
 800f29c:	bf00      	nop
 800f29e:	3718      	adds	r7, #24
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	200008e4 	.word	0x200008e4
 800f2a8:	0800f249 	.word	0x0800f249

0800f2ac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b082      	sub	sp, #8
 800f2b0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	607b      	str	r3, [r7, #4]
 800f2b6:	e00e      	b.n	800f2d6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f2b8:	4a0b      	ldr	r2, [pc, #44]	; (800f2e8 <sys_timeouts_init+0x3c>)
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	00db      	lsls	r3, r3, #3
 800f2c4:	4a08      	ldr	r2, [pc, #32]	; (800f2e8 <sys_timeouts_init+0x3c>)
 800f2c6:	4413      	add	r3, r2
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	4908      	ldr	r1, [pc, #32]	; (800f2ec <sys_timeouts_init+0x40>)
 800f2cc:	f000 f810 	bl	800f2f0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	607b      	str	r3, [r7, #4]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2b02      	cmp	r3, #2
 800f2da:	d9ed      	bls.n	800f2b8 <sys_timeouts_init+0xc>
  }
}
 800f2dc:	bf00      	nop
 800f2de:	bf00      	nop
 800f2e0:	3708      	adds	r7, #8
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	0801a5b8 	.word	0x0801a5b8
 800f2ec:	0800f249 	.word	0x0800f249

0800f2f0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b086      	sub	sp, #24
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f302:	d306      	bcc.n	800f312 <sys_timeout+0x22>
 800f304:	4b0a      	ldr	r3, [pc, #40]	; (800f330 <sys_timeout+0x40>)
 800f306:	f240 1229 	movw	r2, #297	; 0x129
 800f30a:	490a      	ldr	r1, [pc, #40]	; (800f334 <sys_timeout+0x44>)
 800f30c:	480a      	ldr	r0, [pc, #40]	; (800f338 <sys_timeout+0x48>)
 800f30e:	f005 fac9 	bl	80148a4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f312:	f7f7 fe9b 	bl	800704c <sys_now>
 800f316:	4602      	mov	r2, r0
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	4413      	add	r3, r2
 800f31c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f31e:	687a      	ldr	r2, [r7, #4]
 800f320:	68b9      	ldr	r1, [r7, #8]
 800f322:	6978      	ldr	r0, [r7, #20]
 800f324:	f7ff ff22 	bl	800f16c <sys_timeout_abs>
#endif
}
 800f328:	bf00      	nop
 800f32a:	3718      	adds	r7, #24
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	080191cc 	.word	0x080191cc
 800f334:	08019268 	.word	0x08019268
 800f338:	08019240 	.word	0x08019240

0800f33c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f342:	f7f7 fe83 	bl	800704c <sys_now>
 800f346:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800f348:	4b1a      	ldr	r3, [pc, #104]	; (800f3b4 <sys_check_timeouts+0x78>)
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	b2db      	uxtb	r3, r3
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d001      	beq.n	800f356 <sys_check_timeouts+0x1a>
 800f352:	f7f9 f8bf 	bl	80084d4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800f356:	4b18      	ldr	r3, [pc, #96]	; (800f3b8 <sys_check_timeouts+0x7c>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d022      	beq.n	800f3a8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	685b      	ldr	r3, [r3, #4]
 800f366:	68fa      	ldr	r2, [r7, #12]
 800f368:	1ad3      	subs	r3, r2, r3
 800f36a:	0fdb      	lsrs	r3, r3, #31
 800f36c:	f003 0301 	and.w	r3, r3, #1
 800f370:	b2db      	uxtb	r3, r3
 800f372:	2b00      	cmp	r3, #0
 800f374:	d11a      	bne.n	800f3ac <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	4a0f      	ldr	r2, [pc, #60]	; (800f3b8 <sys_check_timeouts+0x7c>)
 800f37c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	689b      	ldr	r3, [r3, #8]
 800f382:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	4a0b      	ldr	r2, [pc, #44]	; (800f3bc <sys_check_timeouts+0x80>)
 800f390:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f392:	68b9      	ldr	r1, [r7, #8]
 800f394:	2006      	movs	r0, #6
 800f396:	f7f8 fd61 	bl	8007e5c <memp_free>
    if (handler != NULL) {
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d0d3      	beq.n	800f348 <sys_check_timeouts+0xc>
      handler(arg);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6838      	ldr	r0, [r7, #0]
 800f3a4:	4798      	blx	r3
  do {
 800f3a6:	e7cf      	b.n	800f348 <sys_check_timeouts+0xc>
      return;
 800f3a8:	bf00      	nop
 800f3aa:	e000      	b.n	800f3ae <sys_check_timeouts+0x72>
      return;
 800f3ac:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f3ae:	3710      	adds	r7, #16
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	2000ae60 	.word	0x2000ae60
 800f3b8:	200008e0 	.word	0x200008e0
 800f3bc:	200008e4 	.word	0x200008e4

0800f3c0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f3c4:	f003 fe08 	bl	8012fd8 <rand>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f3d6:	b29a      	uxth	r2, r3
 800f3d8:	4b01      	ldr	r3, [pc, #4]	; (800f3e0 <udp_init+0x20>)
 800f3da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f3dc:	bf00      	nop
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	20000028 	.word	0x20000028

0800f3e4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b084      	sub	sp, #16
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	4613      	mov	r3, r2
 800f3f0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d105      	bne.n	800f404 <udp_input_local_match+0x20>
 800f3f8:	4b27      	ldr	r3, [pc, #156]	; (800f498 <udp_input_local_match+0xb4>)
 800f3fa:	2287      	movs	r2, #135	; 0x87
 800f3fc:	4927      	ldr	r1, [pc, #156]	; (800f49c <udp_input_local_match+0xb8>)
 800f3fe:	4828      	ldr	r0, [pc, #160]	; (800f4a0 <udp_input_local_match+0xbc>)
 800f400:	f005 fa50 	bl	80148a4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d105      	bne.n	800f416 <udp_input_local_match+0x32>
 800f40a:	4b23      	ldr	r3, [pc, #140]	; (800f498 <udp_input_local_match+0xb4>)
 800f40c:	2288      	movs	r2, #136	; 0x88
 800f40e:	4925      	ldr	r1, [pc, #148]	; (800f4a4 <udp_input_local_match+0xc0>)
 800f410:	4823      	ldr	r0, [pc, #140]	; (800f4a0 <udp_input_local_match+0xbc>)
 800f412:	f005 fa47 	bl	80148a4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	7a1b      	ldrb	r3, [r3, #8]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d00b      	beq.n	800f436 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	7a1a      	ldrb	r2, [r3, #8]
 800f422:	4b21      	ldr	r3, [pc, #132]	; (800f4a8 <udp_input_local_match+0xc4>)
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f42a:	3301      	adds	r3, #1
 800f42c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f42e:	429a      	cmp	r2, r3
 800f430:	d001      	beq.n	800f436 <udp_input_local_match+0x52>
    return 0;
 800f432:	2300      	movs	r3, #0
 800f434:	e02b      	b.n	800f48e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f436:	79fb      	ldrb	r3, [r7, #7]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d018      	beq.n	800f46e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d013      	beq.n	800f46a <udp_input_local_match+0x86>
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d00f      	beq.n	800f46a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f44a:	4b17      	ldr	r3, [pc, #92]	; (800f4a8 <udp_input_local_match+0xc4>)
 800f44c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f452:	d00a      	beq.n	800f46a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	4b13      	ldr	r3, [pc, #76]	; (800f4a8 <udp_input_local_match+0xc4>)
 800f45a:	695b      	ldr	r3, [r3, #20]
 800f45c:	405a      	eors	r2, r3
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	3308      	adds	r3, #8
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f466:	2b00      	cmp	r3, #0
 800f468:	d110      	bne.n	800f48c <udp_input_local_match+0xa8>
          return 1;
 800f46a:	2301      	movs	r3, #1
 800f46c:	e00f      	b.n	800f48e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d009      	beq.n	800f488 <udp_input_local_match+0xa4>
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d005      	beq.n	800f488 <udp_input_local_match+0xa4>
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681a      	ldr	r2, [r3, #0]
 800f480:	4b09      	ldr	r3, [pc, #36]	; (800f4a8 <udp_input_local_match+0xc4>)
 800f482:	695b      	ldr	r3, [r3, #20]
 800f484:	429a      	cmp	r2, r3
 800f486:	d101      	bne.n	800f48c <udp_input_local_match+0xa8>
        return 1;
 800f488:	2301      	movs	r3, #1
 800f48a:	e000      	b.n	800f48e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f48c:	2300      	movs	r3, #0
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3710      	adds	r7, #16
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	080192b4 	.word	0x080192b4
 800f49c:	080192e4 	.word	0x080192e4
 800f4a0:	08019308 	.word	0x08019308
 800f4a4:	08019330 	.word	0x08019330
 800f4a8:	20005764 	.word	0x20005764

0800f4ac <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f4ac:	b590      	push	{r4, r7, lr}
 800f4ae:	b08d      	sub	sp, #52	; 0x34
 800f4b0:	af02      	add	r7, sp, #8
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d105      	bne.n	800f4cc <udp_input+0x20>
 800f4c0:	4b7c      	ldr	r3, [pc, #496]	; (800f6b4 <udp_input+0x208>)
 800f4c2:	22cf      	movs	r2, #207	; 0xcf
 800f4c4:	497c      	ldr	r1, [pc, #496]	; (800f6b8 <udp_input+0x20c>)
 800f4c6:	487d      	ldr	r0, [pc, #500]	; (800f6bc <udp_input+0x210>)
 800f4c8:	f005 f9ec 	bl	80148a4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d105      	bne.n	800f4de <udp_input+0x32>
 800f4d2:	4b78      	ldr	r3, [pc, #480]	; (800f6b4 <udp_input+0x208>)
 800f4d4:	22d0      	movs	r2, #208	; 0xd0
 800f4d6:	497a      	ldr	r1, [pc, #488]	; (800f6c0 <udp_input+0x214>)
 800f4d8:	4878      	ldr	r0, [pc, #480]	; (800f6bc <udp_input+0x210>)
 800f4da:	f005 f9e3 	bl	80148a4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	895b      	ldrh	r3, [r3, #10]
 800f4e2:	2b07      	cmp	r3, #7
 800f4e4:	d803      	bhi.n	800f4ee <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7f9 fb2e 	bl	8008b48 <pbuf_free>
    goto end;
 800f4ec:	e0de      	b.n	800f6ac <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f4f4:	4b73      	ldr	r3, [pc, #460]	; (800f6c4 <udp_input+0x218>)
 800f4f6:	695b      	ldr	r3, [r3, #20]
 800f4f8:	4a72      	ldr	r2, [pc, #456]	; (800f6c4 <udp_input+0x218>)
 800f4fa:	6812      	ldr	r2, [r2, #0]
 800f4fc:	4611      	mov	r1, r2
 800f4fe:	4618      	mov	r0, r3
 800f500:	f001 fc88 	bl	8010e14 <ip4_addr_isbroadcast_u32>
 800f504:	4603      	mov	r3, r0
 800f506:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	881b      	ldrh	r3, [r3, #0]
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	4618      	mov	r0, r3
 800f510:	f7f7 ffbc 	bl	800748c <lwip_htons>
 800f514:	4603      	mov	r3, r0
 800f516:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	885b      	ldrh	r3, [r3, #2]
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	4618      	mov	r0, r3
 800f520:	f7f7 ffb4 	bl	800748c <lwip_htons>
 800f524:	4603      	mov	r3, r0
 800f526:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f528:	2300      	movs	r3, #0
 800f52a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f52c:	2300      	movs	r3, #0
 800f52e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f530:	2300      	movs	r3, #0
 800f532:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f534:	4b64      	ldr	r3, [pc, #400]	; (800f6c8 <udp_input+0x21c>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	627b      	str	r3, [r7, #36]	; 0x24
 800f53a:	e054      	b.n	800f5e6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53e:	8a5b      	ldrh	r3, [r3, #18]
 800f540:	89fa      	ldrh	r2, [r7, #14]
 800f542:	429a      	cmp	r2, r3
 800f544:	d14a      	bne.n	800f5dc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f546:	7cfb      	ldrb	r3, [r7, #19]
 800f548:	461a      	mov	r2, r3
 800f54a:	6839      	ldr	r1, [r7, #0]
 800f54c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f54e:	f7ff ff49 	bl	800f3e4 <udp_input_local_match>
 800f552:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f554:	2b00      	cmp	r3, #0
 800f556:	d041      	beq.n	800f5dc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55a:	7c1b      	ldrb	r3, [r3, #16]
 800f55c:	f003 0304 	and.w	r3, r3, #4
 800f560:	2b00      	cmp	r3, #0
 800f562:	d11d      	bne.n	800f5a0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d102      	bne.n	800f570 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56c:	61fb      	str	r3, [r7, #28]
 800f56e:	e017      	b.n	800f5a0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f570:	7cfb      	ldrb	r3, [r7, #19]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d014      	beq.n	800f5a0 <udp_input+0xf4>
 800f576:	4b53      	ldr	r3, [pc, #332]	; (800f6c4 <udp_input+0x218>)
 800f578:	695b      	ldr	r3, [r3, #20]
 800f57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f57e:	d10f      	bne.n	800f5a0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	3304      	adds	r3, #4
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d008      	beq.n	800f5a0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f590:	681a      	ldr	r2, [r3, #0]
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	3304      	adds	r3, #4
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	429a      	cmp	r2, r3
 800f59a:	d101      	bne.n	800f5a0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f59e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a2:	8a9b      	ldrh	r3, [r3, #20]
 800f5a4:	8a3a      	ldrh	r2, [r7, #16]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d118      	bne.n	800f5dc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ac:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d005      	beq.n	800f5be <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b4:	685a      	ldr	r2, [r3, #4]
 800f5b6:	4b43      	ldr	r3, [pc, #268]	; (800f6c4 <udp_input+0x218>)
 800f5b8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d10e      	bne.n	800f5dc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f5be:	6a3b      	ldr	r3, [r7, #32]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d014      	beq.n	800f5ee <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c6:	68da      	ldr	r2, [r3, #12]
 800f5c8:	6a3b      	ldr	r3, [r7, #32]
 800f5ca:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f5cc:	4b3e      	ldr	r3, [pc, #248]	; (800f6c8 <udp_input+0x21c>)
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f5d4:	4a3c      	ldr	r2, [pc, #240]	; (800f6c8 <udp_input+0x21c>)
 800f5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f5da:	e008      	b.n	800f5ee <udp_input+0x142>
      }
    }

    prev = pcb;
 800f5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5de:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e2:	68db      	ldr	r3, [r3, #12]
 800f5e4:	627b      	str	r3, [r7, #36]	; 0x24
 800f5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d1a7      	bne.n	800f53c <udp_input+0x90>
 800f5ec:	e000      	b.n	800f5f0 <udp_input+0x144>
        break;
 800f5ee:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d101      	bne.n	800f5fa <udp_input+0x14e>
    pcb = uncon_pcb;
 800f5f6:	69fb      	ldr	r3, [r7, #28]
 800f5f8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d002      	beq.n	800f606 <udp_input+0x15a>
    for_us = 1;
 800f600:	2301      	movs	r3, #1
 800f602:	76fb      	strb	r3, [r7, #27]
 800f604:	e00a      	b.n	800f61c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	3304      	adds	r3, #4
 800f60a:	681a      	ldr	r2, [r3, #0]
 800f60c:	4b2d      	ldr	r3, [pc, #180]	; (800f6c4 <udp_input+0x218>)
 800f60e:	695b      	ldr	r3, [r3, #20]
 800f610:	429a      	cmp	r2, r3
 800f612:	bf0c      	ite	eq
 800f614:	2301      	moveq	r3, #1
 800f616:	2300      	movne	r3, #0
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f61c:	7efb      	ldrb	r3, [r7, #27]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d041      	beq.n	800f6a6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f622:	2108      	movs	r1, #8
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f7f9 fa09 	bl	8008a3c <pbuf_remove_header>
 800f62a:	4603      	mov	r3, r0
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d00a      	beq.n	800f646 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f630:	4b20      	ldr	r3, [pc, #128]	; (800f6b4 <udp_input+0x208>)
 800f632:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f636:	4925      	ldr	r1, [pc, #148]	; (800f6cc <udp_input+0x220>)
 800f638:	4820      	ldr	r0, [pc, #128]	; (800f6bc <udp_input+0x210>)
 800f63a:	f005 f933 	bl	80148a4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f7f9 fa82 	bl	8008b48 <pbuf_free>
      goto end;
 800f644:	e032      	b.n	800f6ac <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d012      	beq.n	800f672 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64e:	699b      	ldr	r3, [r3, #24]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d00a      	beq.n	800f66a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f656:	699c      	ldr	r4, [r3, #24]
 800f658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65a:	69d8      	ldr	r0, [r3, #28]
 800f65c:	8a3b      	ldrh	r3, [r7, #16]
 800f65e:	9300      	str	r3, [sp, #0]
 800f660:	4b1b      	ldr	r3, [pc, #108]	; (800f6d0 <udp_input+0x224>)
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f666:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f668:	e021      	b.n	800f6ae <udp_input+0x202>
        pbuf_free(p);
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f7f9 fa6c 	bl	8008b48 <pbuf_free>
        goto end;
 800f670:	e01c      	b.n	800f6ac <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f672:	7cfb      	ldrb	r3, [r7, #19]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d112      	bne.n	800f69e <udp_input+0x1f2>
 800f678:	4b12      	ldr	r3, [pc, #72]	; (800f6c4 <udp_input+0x218>)
 800f67a:	695b      	ldr	r3, [r3, #20]
 800f67c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f680:	2be0      	cmp	r3, #224	; 0xe0
 800f682:	d00c      	beq.n	800f69e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f684:	4b0f      	ldr	r3, [pc, #60]	; (800f6c4 <udp_input+0x218>)
 800f686:	899b      	ldrh	r3, [r3, #12]
 800f688:	3308      	adds	r3, #8
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	b21b      	sxth	r3, r3
 800f68e:	4619      	mov	r1, r3
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f7f9 fa46 	bl	8008b22 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f696:	2103      	movs	r1, #3
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f001 f89b 	bl	80107d4 <icmp_dest_unreach>
      pbuf_free(p);
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f7f9 fa52 	bl	8008b48 <pbuf_free>
  return;
 800f6a4:	e003      	b.n	800f6ae <udp_input+0x202>
    pbuf_free(p);
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f7f9 fa4e 	bl	8008b48 <pbuf_free>
  return;
 800f6ac:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f6ae:	372c      	adds	r7, #44	; 0x2c
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd90      	pop	{r4, r7, pc}
 800f6b4:	080192b4 	.word	0x080192b4
 800f6b8:	08019358 	.word	0x08019358
 800f6bc:	08019308 	.word	0x08019308
 800f6c0:	08019370 	.word	0x08019370
 800f6c4:	20005764 	.word	0x20005764
 800f6c8:	2000ae80 	.word	0x2000ae80
 800f6cc:	0801938c 	.word	0x0801938c
 800f6d0:	20005774 	.word	0x20005774

0800f6d4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b085      	sub	sp, #20
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d01e      	beq.n	800f722 <udp_netif_ip_addr_changed+0x4e>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d01a      	beq.n	800f722 <udp_netif_ip_addr_changed+0x4e>
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d017      	beq.n	800f722 <udp_netif_ip_addr_changed+0x4e>
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d013      	beq.n	800f722 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f6fa:	4b0d      	ldr	r3, [pc, #52]	; (800f730 <udp_netif_ip_addr_changed+0x5c>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	60fb      	str	r3, [r7, #12]
 800f700:	e00c      	b.n	800f71c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681a      	ldr	r2, [r3, #0]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d103      	bne.n	800f716 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	681a      	ldr	r2, [r3, #0]
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	60fb      	str	r3, [r7, #12]
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d1ef      	bne.n	800f702 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f722:	bf00      	nop
 800f724:	3714      	adds	r7, #20
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr
 800f72e:	bf00      	nop
 800f730:	2000ae80 	.word	0x2000ae80

0800f734 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f73c:	4915      	ldr	r1, [pc, #84]	; (800f794 <etharp_free_entry+0x60>)
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	4613      	mov	r3, r2
 800f742:	005b      	lsls	r3, r3, #1
 800f744:	4413      	add	r3, r2
 800f746:	00db      	lsls	r3, r3, #3
 800f748:	440b      	add	r3, r1
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d013      	beq.n	800f778 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f750:	4910      	ldr	r1, [pc, #64]	; (800f794 <etharp_free_entry+0x60>)
 800f752:	687a      	ldr	r2, [r7, #4]
 800f754:	4613      	mov	r3, r2
 800f756:	005b      	lsls	r3, r3, #1
 800f758:	4413      	add	r3, r2
 800f75a:	00db      	lsls	r3, r3, #3
 800f75c:	440b      	add	r3, r1
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4618      	mov	r0, r3
 800f762:	f7f9 f9f1 	bl	8008b48 <pbuf_free>
    arp_table[i].q = NULL;
 800f766:	490b      	ldr	r1, [pc, #44]	; (800f794 <etharp_free_entry+0x60>)
 800f768:	687a      	ldr	r2, [r7, #4]
 800f76a:	4613      	mov	r3, r2
 800f76c:	005b      	lsls	r3, r3, #1
 800f76e:	4413      	add	r3, r2
 800f770:	00db      	lsls	r3, r3, #3
 800f772:	440b      	add	r3, r1
 800f774:	2200      	movs	r2, #0
 800f776:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f778:	4906      	ldr	r1, [pc, #24]	; (800f794 <etharp_free_entry+0x60>)
 800f77a:	687a      	ldr	r2, [r7, #4]
 800f77c:	4613      	mov	r3, r2
 800f77e:	005b      	lsls	r3, r3, #1
 800f780:	4413      	add	r3, r2
 800f782:	00db      	lsls	r3, r3, #3
 800f784:	440b      	add	r3, r1
 800f786:	3314      	adds	r3, #20
 800f788:	2200      	movs	r2, #0
 800f78a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f78c:	bf00      	nop
 800f78e:	3708      	adds	r7, #8
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}
 800f794:	200008ec 	.word	0x200008ec

0800f798 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f79e:	2300      	movs	r3, #0
 800f7a0:	607b      	str	r3, [r7, #4]
 800f7a2:	e096      	b.n	800f8d2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f7a4:	494f      	ldr	r1, [pc, #316]	; (800f8e4 <etharp_tmr+0x14c>)
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	4613      	mov	r3, r2
 800f7aa:	005b      	lsls	r3, r3, #1
 800f7ac:	4413      	add	r3, r2
 800f7ae:	00db      	lsls	r3, r3, #3
 800f7b0:	440b      	add	r3, r1
 800f7b2:	3314      	adds	r3, #20
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f7b8:	78fb      	ldrb	r3, [r7, #3]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	f000 8086 	beq.w	800f8cc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f7c0:	4948      	ldr	r1, [pc, #288]	; (800f8e4 <etharp_tmr+0x14c>)
 800f7c2:	687a      	ldr	r2, [r7, #4]
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	005b      	lsls	r3, r3, #1
 800f7c8:	4413      	add	r3, r2
 800f7ca:	00db      	lsls	r3, r3, #3
 800f7cc:	440b      	add	r3, r1
 800f7ce:	3312      	adds	r3, #18
 800f7d0:	881b      	ldrh	r3, [r3, #0]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	b298      	uxth	r0, r3
 800f7d6:	4943      	ldr	r1, [pc, #268]	; (800f8e4 <etharp_tmr+0x14c>)
 800f7d8:	687a      	ldr	r2, [r7, #4]
 800f7da:	4613      	mov	r3, r2
 800f7dc:	005b      	lsls	r3, r3, #1
 800f7de:	4413      	add	r3, r2
 800f7e0:	00db      	lsls	r3, r3, #3
 800f7e2:	440b      	add	r3, r1
 800f7e4:	3312      	adds	r3, #18
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f7ea:	493e      	ldr	r1, [pc, #248]	; (800f8e4 <etharp_tmr+0x14c>)
 800f7ec:	687a      	ldr	r2, [r7, #4]
 800f7ee:	4613      	mov	r3, r2
 800f7f0:	005b      	lsls	r3, r3, #1
 800f7f2:	4413      	add	r3, r2
 800f7f4:	00db      	lsls	r3, r3, #3
 800f7f6:	440b      	add	r3, r1
 800f7f8:	3312      	adds	r3, #18
 800f7fa:	881b      	ldrh	r3, [r3, #0]
 800f7fc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f800:	d215      	bcs.n	800f82e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f802:	4938      	ldr	r1, [pc, #224]	; (800f8e4 <etharp_tmr+0x14c>)
 800f804:	687a      	ldr	r2, [r7, #4]
 800f806:	4613      	mov	r3, r2
 800f808:	005b      	lsls	r3, r3, #1
 800f80a:	4413      	add	r3, r2
 800f80c:	00db      	lsls	r3, r3, #3
 800f80e:	440b      	add	r3, r1
 800f810:	3314      	adds	r3, #20
 800f812:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f814:	2b01      	cmp	r3, #1
 800f816:	d10e      	bne.n	800f836 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f818:	4932      	ldr	r1, [pc, #200]	; (800f8e4 <etharp_tmr+0x14c>)
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	4613      	mov	r3, r2
 800f81e:	005b      	lsls	r3, r3, #1
 800f820:	4413      	add	r3, r2
 800f822:	00db      	lsls	r3, r3, #3
 800f824:	440b      	add	r3, r1
 800f826:	3312      	adds	r3, #18
 800f828:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f82a:	2b04      	cmp	r3, #4
 800f82c:	d903      	bls.n	800f836 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f7ff ff80 	bl	800f734 <etharp_free_entry>
 800f834:	e04a      	b.n	800f8cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f836:	492b      	ldr	r1, [pc, #172]	; (800f8e4 <etharp_tmr+0x14c>)
 800f838:	687a      	ldr	r2, [r7, #4]
 800f83a:	4613      	mov	r3, r2
 800f83c:	005b      	lsls	r3, r3, #1
 800f83e:	4413      	add	r3, r2
 800f840:	00db      	lsls	r3, r3, #3
 800f842:	440b      	add	r3, r1
 800f844:	3314      	adds	r3, #20
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	2b03      	cmp	r3, #3
 800f84a:	d10a      	bne.n	800f862 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f84c:	4925      	ldr	r1, [pc, #148]	; (800f8e4 <etharp_tmr+0x14c>)
 800f84e:	687a      	ldr	r2, [r7, #4]
 800f850:	4613      	mov	r3, r2
 800f852:	005b      	lsls	r3, r3, #1
 800f854:	4413      	add	r3, r2
 800f856:	00db      	lsls	r3, r3, #3
 800f858:	440b      	add	r3, r1
 800f85a:	3314      	adds	r3, #20
 800f85c:	2204      	movs	r2, #4
 800f85e:	701a      	strb	r2, [r3, #0]
 800f860:	e034      	b.n	800f8cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f862:	4920      	ldr	r1, [pc, #128]	; (800f8e4 <etharp_tmr+0x14c>)
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	4613      	mov	r3, r2
 800f868:	005b      	lsls	r3, r3, #1
 800f86a:	4413      	add	r3, r2
 800f86c:	00db      	lsls	r3, r3, #3
 800f86e:	440b      	add	r3, r1
 800f870:	3314      	adds	r3, #20
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	2b04      	cmp	r3, #4
 800f876:	d10a      	bne.n	800f88e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f878:	491a      	ldr	r1, [pc, #104]	; (800f8e4 <etharp_tmr+0x14c>)
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	4613      	mov	r3, r2
 800f87e:	005b      	lsls	r3, r3, #1
 800f880:	4413      	add	r3, r2
 800f882:	00db      	lsls	r3, r3, #3
 800f884:	440b      	add	r3, r1
 800f886:	3314      	adds	r3, #20
 800f888:	2202      	movs	r2, #2
 800f88a:	701a      	strb	r2, [r3, #0]
 800f88c:	e01e      	b.n	800f8cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f88e:	4915      	ldr	r1, [pc, #84]	; (800f8e4 <etharp_tmr+0x14c>)
 800f890:	687a      	ldr	r2, [r7, #4]
 800f892:	4613      	mov	r3, r2
 800f894:	005b      	lsls	r3, r3, #1
 800f896:	4413      	add	r3, r2
 800f898:	00db      	lsls	r3, r3, #3
 800f89a:	440b      	add	r3, r1
 800f89c:	3314      	adds	r3, #20
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	2b01      	cmp	r3, #1
 800f8a2:	d113      	bne.n	800f8cc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f8a4:	490f      	ldr	r1, [pc, #60]	; (800f8e4 <etharp_tmr+0x14c>)
 800f8a6:	687a      	ldr	r2, [r7, #4]
 800f8a8:	4613      	mov	r3, r2
 800f8aa:	005b      	lsls	r3, r3, #1
 800f8ac:	4413      	add	r3, r2
 800f8ae:	00db      	lsls	r3, r3, #3
 800f8b0:	440b      	add	r3, r1
 800f8b2:	3308      	adds	r3, #8
 800f8b4:	6818      	ldr	r0, [r3, #0]
 800f8b6:	687a      	ldr	r2, [r7, #4]
 800f8b8:	4613      	mov	r3, r2
 800f8ba:	005b      	lsls	r3, r3, #1
 800f8bc:	4413      	add	r3, r2
 800f8be:	00db      	lsls	r3, r3, #3
 800f8c0:	4a08      	ldr	r2, [pc, #32]	; (800f8e4 <etharp_tmr+0x14c>)
 800f8c2:	4413      	add	r3, r2
 800f8c4:	3304      	adds	r3, #4
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	f000 fe6e 	bl	80105a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	607b      	str	r3, [r7, #4]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2b09      	cmp	r3, #9
 800f8d6:	f77f af65 	ble.w	800f7a4 <etharp_tmr+0xc>
      }
    }
  }
}
 800f8da:	bf00      	nop
 800f8dc:	bf00      	nop
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	200008ec 	.word	0x200008ec

0800f8e8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b08a      	sub	sp, #40	; 0x28
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	607a      	str	r2, [r7, #4]
 800f8f4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f8f6:	230a      	movs	r3, #10
 800f8f8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f8fa:	230a      	movs	r3, #10
 800f8fc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f8fe:	230a      	movs	r3, #10
 800f900:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800f902:	2300      	movs	r3, #0
 800f904:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f906:	230a      	movs	r3, #10
 800f908:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f90a:	2300      	movs	r3, #0
 800f90c:	83bb      	strh	r3, [r7, #28]
 800f90e:	2300      	movs	r3, #0
 800f910:	837b      	strh	r3, [r7, #26]
 800f912:	2300      	movs	r3, #0
 800f914:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f916:	2300      	movs	r3, #0
 800f918:	843b      	strh	r3, [r7, #32]
 800f91a:	e0ae      	b.n	800fa7a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f91c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f920:	49a6      	ldr	r1, [pc, #664]	; (800fbbc <etharp_find_entry+0x2d4>)
 800f922:	4613      	mov	r3, r2
 800f924:	005b      	lsls	r3, r3, #1
 800f926:	4413      	add	r3, r2
 800f928:	00db      	lsls	r3, r3, #3
 800f92a:	440b      	add	r3, r1
 800f92c:	3314      	adds	r3, #20
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f932:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f936:	2b0a      	cmp	r3, #10
 800f938:	d105      	bne.n	800f946 <etharp_find_entry+0x5e>
 800f93a:	7dfb      	ldrb	r3, [r7, #23]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d102      	bne.n	800f946 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f940:	8c3b      	ldrh	r3, [r7, #32]
 800f942:	847b      	strh	r3, [r7, #34]	; 0x22
 800f944:	e095      	b.n	800fa72 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f946:	7dfb      	ldrb	r3, [r7, #23]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f000 8092 	beq.w	800fa72 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f94e:	7dfb      	ldrb	r3, [r7, #23]
 800f950:	2b01      	cmp	r3, #1
 800f952:	d009      	beq.n	800f968 <etharp_find_entry+0x80>
 800f954:	7dfb      	ldrb	r3, [r7, #23]
 800f956:	2b01      	cmp	r3, #1
 800f958:	d806      	bhi.n	800f968 <etharp_find_entry+0x80>
 800f95a:	4b99      	ldr	r3, [pc, #612]	; (800fbc0 <etharp_find_entry+0x2d8>)
 800f95c:	f240 1223 	movw	r2, #291	; 0x123
 800f960:	4998      	ldr	r1, [pc, #608]	; (800fbc4 <etharp_find_entry+0x2dc>)
 800f962:	4899      	ldr	r0, [pc, #612]	; (800fbc8 <etharp_find_entry+0x2e0>)
 800f964:	f004 ff9e 	bl	80148a4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d020      	beq.n	800f9b0 <etharp_find_entry+0xc8>
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	6819      	ldr	r1, [r3, #0]
 800f972:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f976:	4891      	ldr	r0, [pc, #580]	; (800fbbc <etharp_find_entry+0x2d4>)
 800f978:	4613      	mov	r3, r2
 800f97a:	005b      	lsls	r3, r3, #1
 800f97c:	4413      	add	r3, r2
 800f97e:	00db      	lsls	r3, r3, #3
 800f980:	4403      	add	r3, r0
 800f982:	3304      	adds	r3, #4
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	4299      	cmp	r1, r3
 800f988:	d112      	bne.n	800f9b0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d00c      	beq.n	800f9aa <etharp_find_entry+0xc2>
 800f990:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f994:	4989      	ldr	r1, [pc, #548]	; (800fbbc <etharp_find_entry+0x2d4>)
 800f996:	4613      	mov	r3, r2
 800f998:	005b      	lsls	r3, r3, #1
 800f99a:	4413      	add	r3, r2
 800f99c:	00db      	lsls	r3, r3, #3
 800f99e:	440b      	add	r3, r1
 800f9a0:	3308      	adds	r3, #8
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d102      	bne.n	800f9b0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f9aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f9ae:	e100      	b.n	800fbb2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f9b0:	7dfb      	ldrb	r3, [r7, #23]
 800f9b2:	2b01      	cmp	r3, #1
 800f9b4:	d140      	bne.n	800fa38 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f9b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f9ba:	4980      	ldr	r1, [pc, #512]	; (800fbbc <etharp_find_entry+0x2d4>)
 800f9bc:	4613      	mov	r3, r2
 800f9be:	005b      	lsls	r3, r3, #1
 800f9c0:	4413      	add	r3, r2
 800f9c2:	00db      	lsls	r3, r3, #3
 800f9c4:	440b      	add	r3, r1
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d01a      	beq.n	800fa02 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f9cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f9d0:	497a      	ldr	r1, [pc, #488]	; (800fbbc <etharp_find_entry+0x2d4>)
 800f9d2:	4613      	mov	r3, r2
 800f9d4:	005b      	lsls	r3, r3, #1
 800f9d6:	4413      	add	r3, r2
 800f9d8:	00db      	lsls	r3, r3, #3
 800f9da:	440b      	add	r3, r1
 800f9dc:	3312      	adds	r3, #18
 800f9de:	881b      	ldrh	r3, [r3, #0]
 800f9e0:	8bba      	ldrh	r2, [r7, #28]
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d845      	bhi.n	800fa72 <etharp_find_entry+0x18a>
            old_queue = i;
 800f9e6:	8c3b      	ldrh	r3, [r7, #32]
 800f9e8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f9ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f9ee:	4973      	ldr	r1, [pc, #460]	; (800fbbc <etharp_find_entry+0x2d4>)
 800f9f0:	4613      	mov	r3, r2
 800f9f2:	005b      	lsls	r3, r3, #1
 800f9f4:	4413      	add	r3, r2
 800f9f6:	00db      	lsls	r3, r3, #3
 800f9f8:	440b      	add	r3, r1
 800f9fa:	3312      	adds	r3, #18
 800f9fc:	881b      	ldrh	r3, [r3, #0]
 800f9fe:	83bb      	strh	r3, [r7, #28]
 800fa00:	e037      	b.n	800fa72 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800fa02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fa06:	496d      	ldr	r1, [pc, #436]	; (800fbbc <etharp_find_entry+0x2d4>)
 800fa08:	4613      	mov	r3, r2
 800fa0a:	005b      	lsls	r3, r3, #1
 800fa0c:	4413      	add	r3, r2
 800fa0e:	00db      	lsls	r3, r3, #3
 800fa10:	440b      	add	r3, r1
 800fa12:	3312      	adds	r3, #18
 800fa14:	881b      	ldrh	r3, [r3, #0]
 800fa16:	8b7a      	ldrh	r2, [r7, #26]
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d82a      	bhi.n	800fa72 <etharp_find_entry+0x18a>
            old_pending = i;
 800fa1c:	8c3b      	ldrh	r3, [r7, #32]
 800fa1e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800fa20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fa24:	4965      	ldr	r1, [pc, #404]	; (800fbbc <etharp_find_entry+0x2d4>)
 800fa26:	4613      	mov	r3, r2
 800fa28:	005b      	lsls	r3, r3, #1
 800fa2a:	4413      	add	r3, r2
 800fa2c:	00db      	lsls	r3, r3, #3
 800fa2e:	440b      	add	r3, r1
 800fa30:	3312      	adds	r3, #18
 800fa32:	881b      	ldrh	r3, [r3, #0]
 800fa34:	837b      	strh	r3, [r7, #26]
 800fa36:	e01c      	b.n	800fa72 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800fa38:	7dfb      	ldrb	r3, [r7, #23]
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	d919      	bls.n	800fa72 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800fa3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fa42:	495e      	ldr	r1, [pc, #376]	; (800fbbc <etharp_find_entry+0x2d4>)
 800fa44:	4613      	mov	r3, r2
 800fa46:	005b      	lsls	r3, r3, #1
 800fa48:	4413      	add	r3, r2
 800fa4a:	00db      	lsls	r3, r3, #3
 800fa4c:	440b      	add	r3, r1
 800fa4e:	3312      	adds	r3, #18
 800fa50:	881b      	ldrh	r3, [r3, #0]
 800fa52:	8b3a      	ldrh	r2, [r7, #24]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d80c      	bhi.n	800fa72 <etharp_find_entry+0x18a>
            old_stable = i;
 800fa58:	8c3b      	ldrh	r3, [r7, #32]
 800fa5a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800fa5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fa60:	4956      	ldr	r1, [pc, #344]	; (800fbbc <etharp_find_entry+0x2d4>)
 800fa62:	4613      	mov	r3, r2
 800fa64:	005b      	lsls	r3, r3, #1
 800fa66:	4413      	add	r3, r2
 800fa68:	00db      	lsls	r3, r3, #3
 800fa6a:	440b      	add	r3, r1
 800fa6c:	3312      	adds	r3, #18
 800fa6e:	881b      	ldrh	r3, [r3, #0]
 800fa70:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fa72:	8c3b      	ldrh	r3, [r7, #32]
 800fa74:	3301      	adds	r3, #1
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	843b      	strh	r3, [r7, #32]
 800fa7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fa7e:	2b09      	cmp	r3, #9
 800fa80:	f77f af4c 	ble.w	800f91c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800fa84:	7afb      	ldrb	r3, [r7, #11]
 800fa86:	f003 0302 	and.w	r3, r3, #2
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d108      	bne.n	800faa0 <etharp_find_entry+0x1b8>
 800fa8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fa92:	2b0a      	cmp	r3, #10
 800fa94:	d107      	bne.n	800faa6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800fa96:	7afb      	ldrb	r3, [r7, #11]
 800fa98:	f003 0301 	and.w	r3, r3, #1
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d102      	bne.n	800faa6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800faa0:	f04f 33ff 	mov.w	r3, #4294967295
 800faa4:	e085      	b.n	800fbb2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800faa6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800faaa:	2b09      	cmp	r3, #9
 800faac:	dc02      	bgt.n	800fab4 <etharp_find_entry+0x1cc>
    i = empty;
 800faae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fab0:	843b      	strh	r3, [r7, #32]
 800fab2:	e039      	b.n	800fb28 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800fab4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fab8:	2b09      	cmp	r3, #9
 800faba:	dc14      	bgt.n	800fae6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800fabc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fabe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800fac0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fac4:	493d      	ldr	r1, [pc, #244]	; (800fbbc <etharp_find_entry+0x2d4>)
 800fac6:	4613      	mov	r3, r2
 800fac8:	005b      	lsls	r3, r3, #1
 800faca:	4413      	add	r3, r2
 800facc:	00db      	lsls	r3, r3, #3
 800face:	440b      	add	r3, r1
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d018      	beq.n	800fb08 <etharp_find_entry+0x220>
 800fad6:	4b3a      	ldr	r3, [pc, #232]	; (800fbc0 <etharp_find_entry+0x2d8>)
 800fad8:	f240 126d 	movw	r2, #365	; 0x16d
 800fadc:	493b      	ldr	r1, [pc, #236]	; (800fbcc <etharp_find_entry+0x2e4>)
 800fade:	483a      	ldr	r0, [pc, #232]	; (800fbc8 <etharp_find_entry+0x2e0>)
 800fae0:	f004 fee0 	bl	80148a4 <iprintf>
 800fae4:	e010      	b.n	800fb08 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800fae6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800faea:	2b09      	cmp	r3, #9
 800faec:	dc02      	bgt.n	800faf4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800faee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800faf0:	843b      	strh	r3, [r7, #32]
 800faf2:	e009      	b.n	800fb08 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800faf4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800faf8:	2b09      	cmp	r3, #9
 800fafa:	dc02      	bgt.n	800fb02 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800fafc:	8bfb      	ldrh	r3, [r7, #30]
 800fafe:	843b      	strh	r3, [r7, #32]
 800fb00:	e002      	b.n	800fb08 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800fb02:	f04f 33ff 	mov.w	r3, #4294967295
 800fb06:	e054      	b.n	800fbb2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fb08:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fb0c:	2b09      	cmp	r3, #9
 800fb0e:	dd06      	ble.n	800fb1e <etharp_find_entry+0x236>
 800fb10:	4b2b      	ldr	r3, [pc, #172]	; (800fbc0 <etharp_find_entry+0x2d8>)
 800fb12:	f240 127f 	movw	r2, #383	; 0x17f
 800fb16:	492e      	ldr	r1, [pc, #184]	; (800fbd0 <etharp_find_entry+0x2e8>)
 800fb18:	482b      	ldr	r0, [pc, #172]	; (800fbc8 <etharp_find_entry+0x2e0>)
 800fb1a:	f004 fec3 	bl	80148a4 <iprintf>
    etharp_free_entry(i);
 800fb1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7ff fe06 	bl	800f734 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fb28:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fb2c:	2b09      	cmp	r3, #9
 800fb2e:	dd06      	ble.n	800fb3e <etharp_find_entry+0x256>
 800fb30:	4b23      	ldr	r3, [pc, #140]	; (800fbc0 <etharp_find_entry+0x2d8>)
 800fb32:	f240 1283 	movw	r2, #387	; 0x183
 800fb36:	4926      	ldr	r1, [pc, #152]	; (800fbd0 <etharp_find_entry+0x2e8>)
 800fb38:	4823      	ldr	r0, [pc, #140]	; (800fbc8 <etharp_find_entry+0x2e0>)
 800fb3a:	f004 feb3 	bl	80148a4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800fb3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb42:	491e      	ldr	r1, [pc, #120]	; (800fbbc <etharp_find_entry+0x2d4>)
 800fb44:	4613      	mov	r3, r2
 800fb46:	005b      	lsls	r3, r3, #1
 800fb48:	4413      	add	r3, r2
 800fb4a:	00db      	lsls	r3, r3, #3
 800fb4c:	440b      	add	r3, r1
 800fb4e:	3314      	adds	r3, #20
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d006      	beq.n	800fb64 <etharp_find_entry+0x27c>
 800fb56:	4b1a      	ldr	r3, [pc, #104]	; (800fbc0 <etharp_find_entry+0x2d8>)
 800fb58:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800fb5c:	491d      	ldr	r1, [pc, #116]	; (800fbd4 <etharp_find_entry+0x2ec>)
 800fb5e:	481a      	ldr	r0, [pc, #104]	; (800fbc8 <etharp_find_entry+0x2e0>)
 800fb60:	f004 fea0 	bl	80148a4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d00b      	beq.n	800fb82 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800fb6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	6819      	ldr	r1, [r3, #0]
 800fb72:	4812      	ldr	r0, [pc, #72]	; (800fbbc <etharp_find_entry+0x2d4>)
 800fb74:	4613      	mov	r3, r2
 800fb76:	005b      	lsls	r3, r3, #1
 800fb78:	4413      	add	r3, r2
 800fb7a:	00db      	lsls	r3, r3, #3
 800fb7c:	4403      	add	r3, r0
 800fb7e:	3304      	adds	r3, #4
 800fb80:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800fb82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb86:	490d      	ldr	r1, [pc, #52]	; (800fbbc <etharp_find_entry+0x2d4>)
 800fb88:	4613      	mov	r3, r2
 800fb8a:	005b      	lsls	r3, r3, #1
 800fb8c:	4413      	add	r3, r2
 800fb8e:	00db      	lsls	r3, r3, #3
 800fb90:	440b      	add	r3, r1
 800fb92:	3312      	adds	r3, #18
 800fb94:	2200      	movs	r2, #0
 800fb96:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800fb98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb9c:	4907      	ldr	r1, [pc, #28]	; (800fbbc <etharp_find_entry+0x2d4>)
 800fb9e:	4613      	mov	r3, r2
 800fba0:	005b      	lsls	r3, r3, #1
 800fba2:	4413      	add	r3, r2
 800fba4:	00db      	lsls	r3, r3, #3
 800fba6:	440b      	add	r3, r1
 800fba8:	3308      	adds	r3, #8
 800fbaa:	687a      	ldr	r2, [r7, #4]
 800fbac:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800fbae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3728      	adds	r7, #40	; 0x28
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}
 800fbba:	bf00      	nop
 800fbbc:	200008ec 	.word	0x200008ec
 800fbc0:	08019618 	.word	0x08019618
 800fbc4:	08019650 	.word	0x08019650
 800fbc8:	08019690 	.word	0x08019690
 800fbcc:	080196b8 	.word	0x080196b8
 800fbd0:	080196d0 	.word	0x080196d0
 800fbd4:	080196e4 	.word	0x080196e4

0800fbd8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b088      	sub	sp, #32
 800fbdc:	af02      	add	r7, sp, #8
 800fbde:	60f8      	str	r0, [r7, #12]
 800fbe0:	60b9      	str	r1, [r7, #8]
 800fbe2:	607a      	str	r2, [r7, #4]
 800fbe4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fbec:	2b06      	cmp	r3, #6
 800fbee:	d006      	beq.n	800fbfe <etharp_update_arp_entry+0x26>
 800fbf0:	4b48      	ldr	r3, [pc, #288]	; (800fd14 <etharp_update_arp_entry+0x13c>)
 800fbf2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800fbf6:	4948      	ldr	r1, [pc, #288]	; (800fd18 <etharp_update_arp_entry+0x140>)
 800fbf8:	4848      	ldr	r0, [pc, #288]	; (800fd1c <etharp_update_arp_entry+0x144>)
 800fbfa:	f004 fe53 	bl	80148a4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d012      	beq.n	800fc2a <etharp_update_arp_entry+0x52>
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d00e      	beq.n	800fc2a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	68f9      	ldr	r1, [r7, #12]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f001 f8fe 	bl	8010e14 <ip4_addr_isbroadcast_u32>
 800fc18:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d105      	bne.n	800fc2a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fc26:	2be0      	cmp	r3, #224	; 0xe0
 800fc28:	d102      	bne.n	800fc30 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fc2a:	f06f 030f 	mvn.w	r3, #15
 800fc2e:	e06c      	b.n	800fd0a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800fc30:	78fb      	ldrb	r3, [r7, #3]
 800fc32:	68fa      	ldr	r2, [r7, #12]
 800fc34:	4619      	mov	r1, r3
 800fc36:	68b8      	ldr	r0, [r7, #8]
 800fc38:	f7ff fe56 	bl	800f8e8 <etharp_find_entry>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800fc40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	da02      	bge.n	800fc4e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800fc48:	8afb      	ldrh	r3, [r7, #22]
 800fc4a:	b25b      	sxtb	r3, r3
 800fc4c:	e05d      	b.n	800fd0a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800fc4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fc52:	4933      	ldr	r1, [pc, #204]	; (800fd20 <etharp_update_arp_entry+0x148>)
 800fc54:	4613      	mov	r3, r2
 800fc56:	005b      	lsls	r3, r3, #1
 800fc58:	4413      	add	r3, r2
 800fc5a:	00db      	lsls	r3, r3, #3
 800fc5c:	440b      	add	r3, r1
 800fc5e:	3314      	adds	r3, #20
 800fc60:	2202      	movs	r2, #2
 800fc62:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800fc64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fc68:	492d      	ldr	r1, [pc, #180]	; (800fd20 <etharp_update_arp_entry+0x148>)
 800fc6a:	4613      	mov	r3, r2
 800fc6c:	005b      	lsls	r3, r3, #1
 800fc6e:	4413      	add	r3, r2
 800fc70:	00db      	lsls	r3, r3, #3
 800fc72:	440b      	add	r3, r1
 800fc74:	3308      	adds	r3, #8
 800fc76:	68fa      	ldr	r2, [r7, #12]
 800fc78:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800fc7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fc7e:	4613      	mov	r3, r2
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	4413      	add	r3, r2
 800fc84:	00db      	lsls	r3, r3, #3
 800fc86:	3308      	adds	r3, #8
 800fc88:	4a25      	ldr	r2, [pc, #148]	; (800fd20 <etharp_update_arp_entry+0x148>)
 800fc8a:	4413      	add	r3, r2
 800fc8c:	3304      	adds	r3, #4
 800fc8e:	2206      	movs	r2, #6
 800fc90:	6879      	ldr	r1, [r7, #4]
 800fc92:	4618      	mov	r0, r3
 800fc94:	f005 f87f 	bl	8014d96 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800fc98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fc9c:	4920      	ldr	r1, [pc, #128]	; (800fd20 <etharp_update_arp_entry+0x148>)
 800fc9e:	4613      	mov	r3, r2
 800fca0:	005b      	lsls	r3, r3, #1
 800fca2:	4413      	add	r3, r2
 800fca4:	00db      	lsls	r3, r3, #3
 800fca6:	440b      	add	r3, r1
 800fca8:	3312      	adds	r3, #18
 800fcaa:	2200      	movs	r2, #0
 800fcac:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800fcae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fcb2:	491b      	ldr	r1, [pc, #108]	; (800fd20 <etharp_update_arp_entry+0x148>)
 800fcb4:	4613      	mov	r3, r2
 800fcb6:	005b      	lsls	r3, r3, #1
 800fcb8:	4413      	add	r3, r2
 800fcba:	00db      	lsls	r3, r3, #3
 800fcbc:	440b      	add	r3, r1
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d021      	beq.n	800fd08 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800fcc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fcc8:	4915      	ldr	r1, [pc, #84]	; (800fd20 <etharp_update_arp_entry+0x148>)
 800fcca:	4613      	mov	r3, r2
 800fccc:	005b      	lsls	r3, r3, #1
 800fcce:	4413      	add	r3, r2
 800fcd0:	00db      	lsls	r3, r3, #3
 800fcd2:	440b      	add	r3, r1
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800fcd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fcdc:	4910      	ldr	r1, [pc, #64]	; (800fd20 <etharp_update_arp_entry+0x148>)
 800fcde:	4613      	mov	r3, r2
 800fce0:	005b      	lsls	r3, r3, #1
 800fce2:	4413      	add	r3, r2
 800fce4:	00db      	lsls	r3, r3, #3
 800fce6:	440b      	add	r3, r1
 800fce8:	2200      	movs	r2, #0
 800fcea:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800fcf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fcf6:	9300      	str	r3, [sp, #0]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6939      	ldr	r1, [r7, #16]
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f002 f827 	bl	8011d50 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800fd02:	6938      	ldr	r0, [r7, #16]
 800fd04:	f7f8 ff20 	bl	8008b48 <pbuf_free>
  }
  return ERR_OK;
 800fd08:	2300      	movs	r3, #0
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3718      	adds	r7, #24
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
 800fd12:	bf00      	nop
 800fd14:	08019618 	.word	0x08019618
 800fd18:	08019710 	.word	0x08019710
 800fd1c:	08019690 	.word	0x08019690
 800fd20:	200008ec 	.word	0x200008ec

0800fd24 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b084      	sub	sp, #16
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	60fb      	str	r3, [r7, #12]
 800fd30:	e01e      	b.n	800fd70 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800fd32:	4913      	ldr	r1, [pc, #76]	; (800fd80 <etharp_cleanup_netif+0x5c>)
 800fd34:	68fa      	ldr	r2, [r7, #12]
 800fd36:	4613      	mov	r3, r2
 800fd38:	005b      	lsls	r3, r3, #1
 800fd3a:	4413      	add	r3, r2
 800fd3c:	00db      	lsls	r3, r3, #3
 800fd3e:	440b      	add	r3, r1
 800fd40:	3314      	adds	r3, #20
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800fd46:	7afb      	ldrb	r3, [r7, #11]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d00e      	beq.n	800fd6a <etharp_cleanup_netif+0x46>
 800fd4c:	490c      	ldr	r1, [pc, #48]	; (800fd80 <etharp_cleanup_netif+0x5c>)
 800fd4e:	68fa      	ldr	r2, [r7, #12]
 800fd50:	4613      	mov	r3, r2
 800fd52:	005b      	lsls	r3, r3, #1
 800fd54:	4413      	add	r3, r2
 800fd56:	00db      	lsls	r3, r3, #3
 800fd58:	440b      	add	r3, r1
 800fd5a:	3308      	adds	r3, #8
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	687a      	ldr	r2, [r7, #4]
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d102      	bne.n	800fd6a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	f7ff fce5 	bl	800f734 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	60fb      	str	r3, [r7, #12]
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2b09      	cmp	r3, #9
 800fd74:	dddd      	ble.n	800fd32 <etharp_cleanup_netif+0xe>
    }
  }
}
 800fd76:	bf00      	nop
 800fd78:	bf00      	nop
 800fd7a:	3710      	adds	r7, #16
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	200008ec 	.word	0x200008ec

0800fd84 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800fd84:	b5b0      	push	{r4, r5, r7, lr}
 800fd86:	b08a      	sub	sp, #40	; 0x28
 800fd88:	af04      	add	r7, sp, #16
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d107      	bne.n	800fda4 <etharp_input+0x20>
 800fd94:	4b3d      	ldr	r3, [pc, #244]	; (800fe8c <etharp_input+0x108>)
 800fd96:	f240 228a 	movw	r2, #650	; 0x28a
 800fd9a:	493d      	ldr	r1, [pc, #244]	; (800fe90 <etharp_input+0x10c>)
 800fd9c:	483d      	ldr	r0, [pc, #244]	; (800fe94 <etharp_input+0x110>)
 800fd9e:	f004 fd81 	bl	80148a4 <iprintf>
 800fda2:	e06f      	b.n	800fe84 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	685b      	ldr	r3, [r3, #4]
 800fda8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	881b      	ldrh	r3, [r3, #0]
 800fdae:	b29b      	uxth	r3, r3
 800fdb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdb4:	d10c      	bne.n	800fdd0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800fdba:	2b06      	cmp	r3, #6
 800fdbc:	d108      	bne.n	800fdd0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fdc2:	2b04      	cmp	r3, #4
 800fdc4:	d104      	bne.n	800fdd0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	885b      	ldrh	r3, [r3, #2]
 800fdca:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fdcc:	2b08      	cmp	r3, #8
 800fdce:	d003      	beq.n	800fdd8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f7f8 feb9 	bl	8008b48 <pbuf_free>
    return;
 800fdd6:	e055      	b.n	800fe84 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	330e      	adds	r3, #14
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	3318      	adds	r3, #24
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	3304      	adds	r3, #4
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d102      	bne.n	800fdf8 <etharp_input+0x74>
    for_us = 0;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	75fb      	strb	r3, [r7, #23]
 800fdf6:	e009      	b.n	800fe0c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800fdf8:	68ba      	ldr	r2, [r7, #8]
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	3304      	adds	r3, #4
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	429a      	cmp	r2, r3
 800fe02:	bf0c      	ite	eq
 800fe04:	2301      	moveq	r3, #1
 800fe06:	2300      	movne	r3, #0
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	f103 0208 	add.w	r2, r3, #8
 800fe12:	7dfb      	ldrb	r3, [r7, #23]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d001      	beq.n	800fe1c <etharp_input+0x98>
 800fe18:	2301      	movs	r3, #1
 800fe1a:	e000      	b.n	800fe1e <etharp_input+0x9a>
 800fe1c:	2302      	movs	r3, #2
 800fe1e:	f107 010c 	add.w	r1, r7, #12
 800fe22:	6838      	ldr	r0, [r7, #0]
 800fe24:	f7ff fed8 	bl	800fbd8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	88db      	ldrh	r3, [r3, #6]
 800fe2c:	b29b      	uxth	r3, r3
 800fe2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe32:	d003      	beq.n	800fe3c <etharp_input+0xb8>
 800fe34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe38:	d01e      	beq.n	800fe78 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800fe3a:	e020      	b.n	800fe7e <etharp_input+0xfa>
      if (for_us) {
 800fe3c:	7dfb      	ldrb	r3, [r7, #23]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d01c      	beq.n	800fe7c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800fe58:	693a      	ldr	r2, [r7, #16]
 800fe5a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800fe5c:	2102      	movs	r1, #2
 800fe5e:	9103      	str	r1, [sp, #12]
 800fe60:	f107 010c 	add.w	r1, r7, #12
 800fe64:	9102      	str	r1, [sp, #8]
 800fe66:	9201      	str	r2, [sp, #4]
 800fe68:	9300      	str	r3, [sp, #0]
 800fe6a:	462b      	mov	r3, r5
 800fe6c:	4622      	mov	r2, r4
 800fe6e:	4601      	mov	r1, r0
 800fe70:	6838      	ldr	r0, [r7, #0]
 800fe72:	f000 faeb 	bl	801044c <etharp_raw>
      break;
 800fe76:	e001      	b.n	800fe7c <etharp_input+0xf8>
      break;
 800fe78:	bf00      	nop
 800fe7a:	e000      	b.n	800fe7e <etharp_input+0xfa>
      break;
 800fe7c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f7f8 fe62 	bl	8008b48 <pbuf_free>
}
 800fe84:	3718      	adds	r7, #24
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bdb0      	pop	{r4, r5, r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	08019618 	.word	0x08019618
 800fe90:	08019768 	.word	0x08019768
 800fe94:	08019690 	.word	0x08019690

0800fe98 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b086      	sub	sp, #24
 800fe9c:	af02      	add	r7, sp, #8
 800fe9e:	60f8      	str	r0, [r7, #12]
 800fea0:	60b9      	str	r1, [r7, #8]
 800fea2:	4613      	mov	r3, r2
 800fea4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800fea6:	79fa      	ldrb	r2, [r7, #7]
 800fea8:	4944      	ldr	r1, [pc, #272]	; (800ffbc <etharp_output_to_arp_index+0x124>)
 800feaa:	4613      	mov	r3, r2
 800feac:	005b      	lsls	r3, r3, #1
 800feae:	4413      	add	r3, r2
 800feb0:	00db      	lsls	r3, r3, #3
 800feb2:	440b      	add	r3, r1
 800feb4:	3314      	adds	r3, #20
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d806      	bhi.n	800feca <etharp_output_to_arp_index+0x32>
 800febc:	4b40      	ldr	r3, [pc, #256]	; (800ffc0 <etharp_output_to_arp_index+0x128>)
 800febe:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fec2:	4940      	ldr	r1, [pc, #256]	; (800ffc4 <etharp_output_to_arp_index+0x12c>)
 800fec4:	4840      	ldr	r0, [pc, #256]	; (800ffc8 <etharp_output_to_arp_index+0x130>)
 800fec6:	f004 fced 	bl	80148a4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800feca:	79fa      	ldrb	r2, [r7, #7]
 800fecc:	493b      	ldr	r1, [pc, #236]	; (800ffbc <etharp_output_to_arp_index+0x124>)
 800fece:	4613      	mov	r3, r2
 800fed0:	005b      	lsls	r3, r3, #1
 800fed2:	4413      	add	r3, r2
 800fed4:	00db      	lsls	r3, r3, #3
 800fed6:	440b      	add	r3, r1
 800fed8:	3314      	adds	r3, #20
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	2b02      	cmp	r3, #2
 800fede:	d153      	bne.n	800ff88 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800fee0:	79fa      	ldrb	r2, [r7, #7]
 800fee2:	4936      	ldr	r1, [pc, #216]	; (800ffbc <etharp_output_to_arp_index+0x124>)
 800fee4:	4613      	mov	r3, r2
 800fee6:	005b      	lsls	r3, r3, #1
 800fee8:	4413      	add	r3, r2
 800feea:	00db      	lsls	r3, r3, #3
 800feec:	440b      	add	r3, r1
 800feee:	3312      	adds	r3, #18
 800fef0:	881b      	ldrh	r3, [r3, #0]
 800fef2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800fef6:	d919      	bls.n	800ff2c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800fef8:	79fa      	ldrb	r2, [r7, #7]
 800fefa:	4613      	mov	r3, r2
 800fefc:	005b      	lsls	r3, r3, #1
 800fefe:	4413      	add	r3, r2
 800ff00:	00db      	lsls	r3, r3, #3
 800ff02:	4a2e      	ldr	r2, [pc, #184]	; (800ffbc <etharp_output_to_arp_index+0x124>)
 800ff04:	4413      	add	r3, r2
 800ff06:	3304      	adds	r3, #4
 800ff08:	4619      	mov	r1, r3
 800ff0a:	68f8      	ldr	r0, [r7, #12]
 800ff0c:	f000 fb4c 	bl	80105a8 <etharp_request>
 800ff10:	4603      	mov	r3, r0
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d138      	bne.n	800ff88 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ff16:	79fa      	ldrb	r2, [r7, #7]
 800ff18:	4928      	ldr	r1, [pc, #160]	; (800ffbc <etharp_output_to_arp_index+0x124>)
 800ff1a:	4613      	mov	r3, r2
 800ff1c:	005b      	lsls	r3, r3, #1
 800ff1e:	4413      	add	r3, r2
 800ff20:	00db      	lsls	r3, r3, #3
 800ff22:	440b      	add	r3, r1
 800ff24:	3314      	adds	r3, #20
 800ff26:	2203      	movs	r2, #3
 800ff28:	701a      	strb	r2, [r3, #0]
 800ff2a:	e02d      	b.n	800ff88 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ff2c:	79fa      	ldrb	r2, [r7, #7]
 800ff2e:	4923      	ldr	r1, [pc, #140]	; (800ffbc <etharp_output_to_arp_index+0x124>)
 800ff30:	4613      	mov	r3, r2
 800ff32:	005b      	lsls	r3, r3, #1
 800ff34:	4413      	add	r3, r2
 800ff36:	00db      	lsls	r3, r3, #3
 800ff38:	440b      	add	r3, r1
 800ff3a:	3312      	adds	r3, #18
 800ff3c:	881b      	ldrh	r3, [r3, #0]
 800ff3e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ff42:	d321      	bcc.n	800ff88 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ff44:	79fa      	ldrb	r2, [r7, #7]
 800ff46:	4613      	mov	r3, r2
 800ff48:	005b      	lsls	r3, r3, #1
 800ff4a:	4413      	add	r3, r2
 800ff4c:	00db      	lsls	r3, r3, #3
 800ff4e:	4a1b      	ldr	r2, [pc, #108]	; (800ffbc <etharp_output_to_arp_index+0x124>)
 800ff50:	4413      	add	r3, r2
 800ff52:	1d19      	adds	r1, r3, #4
 800ff54:	79fa      	ldrb	r2, [r7, #7]
 800ff56:	4613      	mov	r3, r2
 800ff58:	005b      	lsls	r3, r3, #1
 800ff5a:	4413      	add	r3, r2
 800ff5c:	00db      	lsls	r3, r3, #3
 800ff5e:	3308      	adds	r3, #8
 800ff60:	4a16      	ldr	r2, [pc, #88]	; (800ffbc <etharp_output_to_arp_index+0x124>)
 800ff62:	4413      	add	r3, r2
 800ff64:	3304      	adds	r3, #4
 800ff66:	461a      	mov	r2, r3
 800ff68:	68f8      	ldr	r0, [r7, #12]
 800ff6a:	f000 fafb 	bl	8010564 <etharp_request_dst>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d109      	bne.n	800ff88 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ff74:	79fa      	ldrb	r2, [r7, #7]
 800ff76:	4911      	ldr	r1, [pc, #68]	; (800ffbc <etharp_output_to_arp_index+0x124>)
 800ff78:	4613      	mov	r3, r2
 800ff7a:	005b      	lsls	r3, r3, #1
 800ff7c:	4413      	add	r3, r2
 800ff7e:	00db      	lsls	r3, r3, #3
 800ff80:	440b      	add	r3, r1
 800ff82:	3314      	adds	r3, #20
 800ff84:	2203      	movs	r2, #3
 800ff86:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ff8e:	79fa      	ldrb	r2, [r7, #7]
 800ff90:	4613      	mov	r3, r2
 800ff92:	005b      	lsls	r3, r3, #1
 800ff94:	4413      	add	r3, r2
 800ff96:	00db      	lsls	r3, r3, #3
 800ff98:	3308      	adds	r3, #8
 800ff9a:	4a08      	ldr	r2, [pc, #32]	; (800ffbc <etharp_output_to_arp_index+0x124>)
 800ff9c:	4413      	add	r3, r2
 800ff9e:	3304      	adds	r3, #4
 800ffa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ffa4:	9200      	str	r2, [sp, #0]
 800ffa6:	460a      	mov	r2, r1
 800ffa8:	68b9      	ldr	r1, [r7, #8]
 800ffaa:	68f8      	ldr	r0, [r7, #12]
 800ffac:	f001 fed0 	bl	8011d50 <ethernet_output>
 800ffb0:	4603      	mov	r3, r0
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}
 800ffba:	bf00      	nop
 800ffbc:	200008ec 	.word	0x200008ec
 800ffc0:	08019618 	.word	0x08019618
 800ffc4:	08019788 	.word	0x08019788
 800ffc8:	08019690 	.word	0x08019690

0800ffcc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b08a      	sub	sp, #40	; 0x28
 800ffd0:	af02      	add	r7, sp, #8
 800ffd2:	60f8      	str	r0, [r7, #12]
 800ffd4:	60b9      	str	r1, [r7, #8]
 800ffd6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d106      	bne.n	800fff0 <etharp_output+0x24>
 800ffe2:	4b73      	ldr	r3, [pc, #460]	; (80101b0 <etharp_output+0x1e4>)
 800ffe4:	f240 321e 	movw	r2, #798	; 0x31e
 800ffe8:	4972      	ldr	r1, [pc, #456]	; (80101b4 <etharp_output+0x1e8>)
 800ffea:	4873      	ldr	r0, [pc, #460]	; (80101b8 <etharp_output+0x1ec>)
 800ffec:	f004 fc5a 	bl	80148a4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d106      	bne.n	8010004 <etharp_output+0x38>
 800fff6:	4b6e      	ldr	r3, [pc, #440]	; (80101b0 <etharp_output+0x1e4>)
 800fff8:	f240 321f 	movw	r2, #799	; 0x31f
 800fffc:	496f      	ldr	r1, [pc, #444]	; (80101bc <etharp_output+0x1f0>)
 800fffe:	486e      	ldr	r0, [pc, #440]	; (80101b8 <etharp_output+0x1ec>)
 8010000:	f004 fc50 	bl	80148a4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d106      	bne.n	8010018 <etharp_output+0x4c>
 801000a:	4b69      	ldr	r3, [pc, #420]	; (80101b0 <etharp_output+0x1e4>)
 801000c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010010:	496b      	ldr	r1, [pc, #428]	; (80101c0 <etharp_output+0x1f4>)
 8010012:	4869      	ldr	r0, [pc, #420]	; (80101b8 <etharp_output+0x1ec>)
 8010014:	f004 fc46 	bl	80148a4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	68f9      	ldr	r1, [r7, #12]
 801001e:	4618      	mov	r0, r3
 8010020:	f000 fef8 	bl	8010e14 <ip4_addr_isbroadcast_u32>
 8010024:	4603      	mov	r3, r0
 8010026:	2b00      	cmp	r3, #0
 8010028:	d002      	beq.n	8010030 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801002a:	4b66      	ldr	r3, [pc, #408]	; (80101c4 <etharp_output+0x1f8>)
 801002c:	61fb      	str	r3, [r7, #28]
 801002e:	e0af      	b.n	8010190 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010038:	2be0      	cmp	r3, #224	; 0xe0
 801003a:	d118      	bne.n	801006e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801003c:	2301      	movs	r3, #1
 801003e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010040:	2300      	movs	r3, #0
 8010042:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010044:	235e      	movs	r3, #94	; 0x5e
 8010046:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	3301      	adds	r3, #1
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010052:	b2db      	uxtb	r3, r3
 8010054:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	3302      	adds	r3, #2
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	3303      	adds	r3, #3
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010066:	f107 0310 	add.w	r3, r7, #16
 801006a:	61fb      	str	r3, [r7, #28]
 801006c:	e090      	b.n	8010190 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	3304      	adds	r3, #4
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	405a      	eors	r2, r3
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	3308      	adds	r3, #8
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	4013      	ands	r3, r2
 8010082:	2b00      	cmp	r3, #0
 8010084:	d012      	beq.n	80100ac <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801008c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010090:	4293      	cmp	r3, r2
 8010092:	d00b      	beq.n	80100ac <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	330c      	adds	r3, #12
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d003      	beq.n	80100a6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	330c      	adds	r3, #12
 80100a2:	61bb      	str	r3, [r7, #24]
 80100a4:	e002      	b.n	80100ac <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80100a6:	f06f 0303 	mvn.w	r3, #3
 80100aa:	e07d      	b.n	80101a8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80100ac:	4b46      	ldr	r3, [pc, #280]	; (80101c8 <etharp_output+0x1fc>)
 80100ae:	781b      	ldrb	r3, [r3, #0]
 80100b0:	4619      	mov	r1, r3
 80100b2:	4a46      	ldr	r2, [pc, #280]	; (80101cc <etharp_output+0x200>)
 80100b4:	460b      	mov	r3, r1
 80100b6:	005b      	lsls	r3, r3, #1
 80100b8:	440b      	add	r3, r1
 80100ba:	00db      	lsls	r3, r3, #3
 80100bc:	4413      	add	r3, r2
 80100be:	3314      	adds	r3, #20
 80100c0:	781b      	ldrb	r3, [r3, #0]
 80100c2:	2b01      	cmp	r3, #1
 80100c4:	d925      	bls.n	8010112 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80100c6:	4b40      	ldr	r3, [pc, #256]	; (80101c8 <etharp_output+0x1fc>)
 80100c8:	781b      	ldrb	r3, [r3, #0]
 80100ca:	4619      	mov	r1, r3
 80100cc:	4a3f      	ldr	r2, [pc, #252]	; (80101cc <etharp_output+0x200>)
 80100ce:	460b      	mov	r3, r1
 80100d0:	005b      	lsls	r3, r3, #1
 80100d2:	440b      	add	r3, r1
 80100d4:	00db      	lsls	r3, r3, #3
 80100d6:	4413      	add	r3, r2
 80100d8:	3308      	adds	r3, #8
 80100da:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80100dc:	68fa      	ldr	r2, [r7, #12]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d117      	bne.n	8010112 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80100e2:	69bb      	ldr	r3, [r7, #24]
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	4b38      	ldr	r3, [pc, #224]	; (80101c8 <etharp_output+0x1fc>)
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	4618      	mov	r0, r3
 80100ec:	4937      	ldr	r1, [pc, #220]	; (80101cc <etharp_output+0x200>)
 80100ee:	4603      	mov	r3, r0
 80100f0:	005b      	lsls	r3, r3, #1
 80100f2:	4403      	add	r3, r0
 80100f4:	00db      	lsls	r3, r3, #3
 80100f6:	440b      	add	r3, r1
 80100f8:	3304      	adds	r3, #4
 80100fa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d108      	bne.n	8010112 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010100:	4b31      	ldr	r3, [pc, #196]	; (80101c8 <etharp_output+0x1fc>)
 8010102:	781b      	ldrb	r3, [r3, #0]
 8010104:	461a      	mov	r2, r3
 8010106:	68b9      	ldr	r1, [r7, #8]
 8010108:	68f8      	ldr	r0, [r7, #12]
 801010a:	f7ff fec5 	bl	800fe98 <etharp_output_to_arp_index>
 801010e:	4603      	mov	r3, r0
 8010110:	e04a      	b.n	80101a8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010112:	2300      	movs	r3, #0
 8010114:	75fb      	strb	r3, [r7, #23]
 8010116:	e031      	b.n	801017c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010118:	7dfa      	ldrb	r2, [r7, #23]
 801011a:	492c      	ldr	r1, [pc, #176]	; (80101cc <etharp_output+0x200>)
 801011c:	4613      	mov	r3, r2
 801011e:	005b      	lsls	r3, r3, #1
 8010120:	4413      	add	r3, r2
 8010122:	00db      	lsls	r3, r3, #3
 8010124:	440b      	add	r3, r1
 8010126:	3314      	adds	r3, #20
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	2b01      	cmp	r3, #1
 801012c:	d923      	bls.n	8010176 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801012e:	7dfa      	ldrb	r2, [r7, #23]
 8010130:	4926      	ldr	r1, [pc, #152]	; (80101cc <etharp_output+0x200>)
 8010132:	4613      	mov	r3, r2
 8010134:	005b      	lsls	r3, r3, #1
 8010136:	4413      	add	r3, r2
 8010138:	00db      	lsls	r3, r3, #3
 801013a:	440b      	add	r3, r1
 801013c:	3308      	adds	r3, #8
 801013e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010140:	68fa      	ldr	r2, [r7, #12]
 8010142:	429a      	cmp	r2, r3
 8010144:	d117      	bne.n	8010176 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010146:	69bb      	ldr	r3, [r7, #24]
 8010148:	6819      	ldr	r1, [r3, #0]
 801014a:	7dfa      	ldrb	r2, [r7, #23]
 801014c:	481f      	ldr	r0, [pc, #124]	; (80101cc <etharp_output+0x200>)
 801014e:	4613      	mov	r3, r2
 8010150:	005b      	lsls	r3, r3, #1
 8010152:	4413      	add	r3, r2
 8010154:	00db      	lsls	r3, r3, #3
 8010156:	4403      	add	r3, r0
 8010158:	3304      	adds	r3, #4
 801015a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801015c:	4299      	cmp	r1, r3
 801015e:	d10a      	bne.n	8010176 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010160:	4a19      	ldr	r2, [pc, #100]	; (80101c8 <etharp_output+0x1fc>)
 8010162:	7dfb      	ldrb	r3, [r7, #23]
 8010164:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010166:	7dfb      	ldrb	r3, [r7, #23]
 8010168:	461a      	mov	r2, r3
 801016a:	68b9      	ldr	r1, [r7, #8]
 801016c:	68f8      	ldr	r0, [r7, #12]
 801016e:	f7ff fe93 	bl	800fe98 <etharp_output_to_arp_index>
 8010172:	4603      	mov	r3, r0
 8010174:	e018      	b.n	80101a8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010176:	7dfb      	ldrb	r3, [r7, #23]
 8010178:	3301      	adds	r3, #1
 801017a:	75fb      	strb	r3, [r7, #23]
 801017c:	7dfb      	ldrb	r3, [r7, #23]
 801017e:	2b09      	cmp	r3, #9
 8010180:	d9ca      	bls.n	8010118 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010182:	68ba      	ldr	r2, [r7, #8]
 8010184:	69b9      	ldr	r1, [r7, #24]
 8010186:	68f8      	ldr	r0, [r7, #12]
 8010188:	f000 f822 	bl	80101d0 <etharp_query>
 801018c:	4603      	mov	r3, r0
 801018e:	e00b      	b.n	80101a8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010196:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801019a:	9300      	str	r3, [sp, #0]
 801019c:	69fb      	ldr	r3, [r7, #28]
 801019e:	68b9      	ldr	r1, [r7, #8]
 80101a0:	68f8      	ldr	r0, [r7, #12]
 80101a2:	f001 fdd5 	bl	8011d50 <ethernet_output>
 80101a6:	4603      	mov	r3, r0
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3720      	adds	r7, #32
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}
 80101b0:	08019618 	.word	0x08019618
 80101b4:	08019768 	.word	0x08019768
 80101b8:	08019690 	.word	0x08019690
 80101bc:	080197b8 	.word	0x080197b8
 80101c0:	08019758 	.word	0x08019758
 80101c4:	0801a5d4 	.word	0x0801a5d4
 80101c8:	200009dc 	.word	0x200009dc
 80101cc:	200008ec 	.word	0x200008ec

080101d0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b08c      	sub	sp, #48	; 0x30
 80101d4:	af02      	add	r7, sp, #8
 80101d6:	60f8      	str	r0, [r7, #12]
 80101d8:	60b9      	str	r1, [r7, #8]
 80101da:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	3326      	adds	r3, #38	; 0x26
 80101e0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80101e2:	23ff      	movs	r3, #255	; 0xff
 80101e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80101e8:	2300      	movs	r3, #0
 80101ea:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	68f9      	ldr	r1, [r7, #12]
 80101f2:	4618      	mov	r0, r3
 80101f4:	f000 fe0e 	bl	8010e14 <ip4_addr_isbroadcast_u32>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d10c      	bne.n	8010218 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010206:	2be0      	cmp	r3, #224	; 0xe0
 8010208:	d006      	beq.n	8010218 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d003      	beq.n	8010218 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d102      	bne.n	801021e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010218:	f06f 030f 	mvn.w	r3, #15
 801021c:	e101      	b.n	8010422 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801021e:	68fa      	ldr	r2, [r7, #12]
 8010220:	2101      	movs	r1, #1
 8010222:	68b8      	ldr	r0, [r7, #8]
 8010224:	f7ff fb60 	bl	800f8e8 <etharp_find_entry>
 8010228:	4603      	mov	r3, r0
 801022a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801022c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010230:	2b00      	cmp	r3, #0
 8010232:	da02      	bge.n	801023a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010234:	8a7b      	ldrh	r3, [r7, #18]
 8010236:	b25b      	sxtb	r3, r3
 8010238:	e0f3      	b.n	8010422 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801023a:	8a7b      	ldrh	r3, [r7, #18]
 801023c:	2b7e      	cmp	r3, #126	; 0x7e
 801023e:	d906      	bls.n	801024e <etharp_query+0x7e>
 8010240:	4b7a      	ldr	r3, [pc, #488]	; (801042c <etharp_query+0x25c>)
 8010242:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010246:	497a      	ldr	r1, [pc, #488]	; (8010430 <etharp_query+0x260>)
 8010248:	487a      	ldr	r0, [pc, #488]	; (8010434 <etharp_query+0x264>)
 801024a:	f004 fb2b 	bl	80148a4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801024e:	8a7b      	ldrh	r3, [r7, #18]
 8010250:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010252:	7c7a      	ldrb	r2, [r7, #17]
 8010254:	4978      	ldr	r1, [pc, #480]	; (8010438 <etharp_query+0x268>)
 8010256:	4613      	mov	r3, r2
 8010258:	005b      	lsls	r3, r3, #1
 801025a:	4413      	add	r3, r2
 801025c:	00db      	lsls	r3, r3, #3
 801025e:	440b      	add	r3, r1
 8010260:	3314      	adds	r3, #20
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d115      	bne.n	8010294 <etharp_query+0xc4>
    is_new_entry = 1;
 8010268:	2301      	movs	r3, #1
 801026a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801026c:	7c7a      	ldrb	r2, [r7, #17]
 801026e:	4972      	ldr	r1, [pc, #456]	; (8010438 <etharp_query+0x268>)
 8010270:	4613      	mov	r3, r2
 8010272:	005b      	lsls	r3, r3, #1
 8010274:	4413      	add	r3, r2
 8010276:	00db      	lsls	r3, r3, #3
 8010278:	440b      	add	r3, r1
 801027a:	3314      	adds	r3, #20
 801027c:	2201      	movs	r2, #1
 801027e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010280:	7c7a      	ldrb	r2, [r7, #17]
 8010282:	496d      	ldr	r1, [pc, #436]	; (8010438 <etharp_query+0x268>)
 8010284:	4613      	mov	r3, r2
 8010286:	005b      	lsls	r3, r3, #1
 8010288:	4413      	add	r3, r2
 801028a:	00db      	lsls	r3, r3, #3
 801028c:	440b      	add	r3, r1
 801028e:	3308      	adds	r3, #8
 8010290:	68fa      	ldr	r2, [r7, #12]
 8010292:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010294:	7c7a      	ldrb	r2, [r7, #17]
 8010296:	4968      	ldr	r1, [pc, #416]	; (8010438 <etharp_query+0x268>)
 8010298:	4613      	mov	r3, r2
 801029a:	005b      	lsls	r3, r3, #1
 801029c:	4413      	add	r3, r2
 801029e:	00db      	lsls	r3, r3, #3
 80102a0:	440b      	add	r3, r1
 80102a2:	3314      	adds	r3, #20
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	2b01      	cmp	r3, #1
 80102a8:	d011      	beq.n	80102ce <etharp_query+0xfe>
 80102aa:	7c7a      	ldrb	r2, [r7, #17]
 80102ac:	4962      	ldr	r1, [pc, #392]	; (8010438 <etharp_query+0x268>)
 80102ae:	4613      	mov	r3, r2
 80102b0:	005b      	lsls	r3, r3, #1
 80102b2:	4413      	add	r3, r2
 80102b4:	00db      	lsls	r3, r3, #3
 80102b6:	440b      	add	r3, r1
 80102b8:	3314      	adds	r3, #20
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	2b01      	cmp	r3, #1
 80102be:	d806      	bhi.n	80102ce <etharp_query+0xfe>
 80102c0:	4b5a      	ldr	r3, [pc, #360]	; (801042c <etharp_query+0x25c>)
 80102c2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80102c6:	495d      	ldr	r1, [pc, #372]	; (801043c <etharp_query+0x26c>)
 80102c8:	485a      	ldr	r0, [pc, #360]	; (8010434 <etharp_query+0x264>)
 80102ca:	f004 faeb 	bl	80148a4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80102ce:	6a3b      	ldr	r3, [r7, #32]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d102      	bne.n	80102da <etharp_query+0x10a>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d10c      	bne.n	80102f4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80102da:	68b9      	ldr	r1, [r7, #8]
 80102dc:	68f8      	ldr	r0, [r7, #12]
 80102de:	f000 f963 	bl	80105a8 <etharp_request>
 80102e2:	4603      	mov	r3, r0
 80102e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d102      	bne.n	80102f4 <etharp_query+0x124>
      return result;
 80102ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80102f2:	e096      	b.n	8010422 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d106      	bne.n	8010308 <etharp_query+0x138>
 80102fa:	4b4c      	ldr	r3, [pc, #304]	; (801042c <etharp_query+0x25c>)
 80102fc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010300:	494f      	ldr	r1, [pc, #316]	; (8010440 <etharp_query+0x270>)
 8010302:	484c      	ldr	r0, [pc, #304]	; (8010434 <etharp_query+0x264>)
 8010304:	f004 face 	bl	80148a4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010308:	7c7a      	ldrb	r2, [r7, #17]
 801030a:	494b      	ldr	r1, [pc, #300]	; (8010438 <etharp_query+0x268>)
 801030c:	4613      	mov	r3, r2
 801030e:	005b      	lsls	r3, r3, #1
 8010310:	4413      	add	r3, r2
 8010312:	00db      	lsls	r3, r3, #3
 8010314:	440b      	add	r3, r1
 8010316:	3314      	adds	r3, #20
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	2b01      	cmp	r3, #1
 801031c:	d917      	bls.n	801034e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801031e:	4a49      	ldr	r2, [pc, #292]	; (8010444 <etharp_query+0x274>)
 8010320:	7c7b      	ldrb	r3, [r7, #17]
 8010322:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010324:	7c7a      	ldrb	r2, [r7, #17]
 8010326:	4613      	mov	r3, r2
 8010328:	005b      	lsls	r3, r3, #1
 801032a:	4413      	add	r3, r2
 801032c:	00db      	lsls	r3, r3, #3
 801032e:	3308      	adds	r3, #8
 8010330:	4a41      	ldr	r2, [pc, #260]	; (8010438 <etharp_query+0x268>)
 8010332:	4413      	add	r3, r2
 8010334:	3304      	adds	r3, #4
 8010336:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801033a:	9200      	str	r2, [sp, #0]
 801033c:	697a      	ldr	r2, [r7, #20]
 801033e:	6879      	ldr	r1, [r7, #4]
 8010340:	68f8      	ldr	r0, [r7, #12]
 8010342:	f001 fd05 	bl	8011d50 <ethernet_output>
 8010346:	4603      	mov	r3, r0
 8010348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801034c:	e067      	b.n	801041e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801034e:	7c7a      	ldrb	r2, [r7, #17]
 8010350:	4939      	ldr	r1, [pc, #228]	; (8010438 <etharp_query+0x268>)
 8010352:	4613      	mov	r3, r2
 8010354:	005b      	lsls	r3, r3, #1
 8010356:	4413      	add	r3, r2
 8010358:	00db      	lsls	r3, r3, #3
 801035a:	440b      	add	r3, r1
 801035c:	3314      	adds	r3, #20
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	2b01      	cmp	r3, #1
 8010362:	d15c      	bne.n	801041e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010364:	2300      	movs	r3, #0
 8010366:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801036c:	e01c      	b.n	80103a8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801036e:	69fb      	ldr	r3, [r7, #28]
 8010370:	895a      	ldrh	r2, [r3, #10]
 8010372:	69fb      	ldr	r3, [r7, #28]
 8010374:	891b      	ldrh	r3, [r3, #8]
 8010376:	429a      	cmp	r2, r3
 8010378:	d10a      	bne.n	8010390 <etharp_query+0x1c0>
 801037a:	69fb      	ldr	r3, [r7, #28]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d006      	beq.n	8010390 <etharp_query+0x1c0>
 8010382:	4b2a      	ldr	r3, [pc, #168]	; (801042c <etharp_query+0x25c>)
 8010384:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010388:	492f      	ldr	r1, [pc, #188]	; (8010448 <etharp_query+0x278>)
 801038a:	482a      	ldr	r0, [pc, #168]	; (8010434 <etharp_query+0x264>)
 801038c:	f004 fa8a 	bl	80148a4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010390:	69fb      	ldr	r3, [r7, #28]
 8010392:	7b1b      	ldrb	r3, [r3, #12]
 8010394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010398:	2b00      	cmp	r3, #0
 801039a:	d002      	beq.n	80103a2 <etharp_query+0x1d2>
        copy_needed = 1;
 801039c:	2301      	movs	r3, #1
 801039e:	61bb      	str	r3, [r7, #24]
        break;
 80103a0:	e005      	b.n	80103ae <etharp_query+0x1de>
      }
      p = p->next;
 80103a2:	69fb      	ldr	r3, [r7, #28]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d1df      	bne.n	801036e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80103ae:	69bb      	ldr	r3, [r7, #24]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d007      	beq.n	80103c4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80103b4:	687a      	ldr	r2, [r7, #4]
 80103b6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80103ba:	200e      	movs	r0, #14
 80103bc:	f7f8 fe30 	bl	8009020 <pbuf_clone>
 80103c0:	61f8      	str	r0, [r7, #28]
 80103c2:	e004      	b.n	80103ce <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80103c8:	69f8      	ldr	r0, [r7, #28]
 80103ca:	f7f8 fc5d 	bl	8008c88 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80103ce:	69fb      	ldr	r3, [r7, #28]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d021      	beq.n	8010418 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80103d4:	7c7a      	ldrb	r2, [r7, #17]
 80103d6:	4918      	ldr	r1, [pc, #96]	; (8010438 <etharp_query+0x268>)
 80103d8:	4613      	mov	r3, r2
 80103da:	005b      	lsls	r3, r3, #1
 80103dc:	4413      	add	r3, r2
 80103de:	00db      	lsls	r3, r3, #3
 80103e0:	440b      	add	r3, r1
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d00a      	beq.n	80103fe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80103e8:	7c7a      	ldrb	r2, [r7, #17]
 80103ea:	4913      	ldr	r1, [pc, #76]	; (8010438 <etharp_query+0x268>)
 80103ec:	4613      	mov	r3, r2
 80103ee:	005b      	lsls	r3, r3, #1
 80103f0:	4413      	add	r3, r2
 80103f2:	00db      	lsls	r3, r3, #3
 80103f4:	440b      	add	r3, r1
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7f8 fba5 	bl	8008b48 <pbuf_free>
      }
      arp_table[i].q = p;
 80103fe:	7c7a      	ldrb	r2, [r7, #17]
 8010400:	490d      	ldr	r1, [pc, #52]	; (8010438 <etharp_query+0x268>)
 8010402:	4613      	mov	r3, r2
 8010404:	005b      	lsls	r3, r3, #1
 8010406:	4413      	add	r3, r2
 8010408:	00db      	lsls	r3, r3, #3
 801040a:	440b      	add	r3, r1
 801040c:	69fa      	ldr	r2, [r7, #28]
 801040e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010410:	2300      	movs	r3, #0
 8010412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010416:	e002      	b.n	801041e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010418:	23ff      	movs	r3, #255	; 0xff
 801041a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801041e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010422:	4618      	mov	r0, r3
 8010424:	3728      	adds	r7, #40	; 0x28
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	08019618 	.word	0x08019618
 8010430:	080197c4 	.word	0x080197c4
 8010434:	08019690 	.word	0x08019690
 8010438:	200008ec 	.word	0x200008ec
 801043c:	080197d4 	.word	0x080197d4
 8010440:	080197b8 	.word	0x080197b8
 8010444:	200009dc 	.word	0x200009dc
 8010448:	080197fc 	.word	0x080197fc

0801044c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b08a      	sub	sp, #40	; 0x28
 8010450:	af02      	add	r7, sp, #8
 8010452:	60f8      	str	r0, [r7, #12]
 8010454:	60b9      	str	r1, [r7, #8]
 8010456:	607a      	str	r2, [r7, #4]
 8010458:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801045a:	2300      	movs	r3, #0
 801045c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d106      	bne.n	8010472 <etharp_raw+0x26>
 8010464:	4b3a      	ldr	r3, [pc, #232]	; (8010550 <etharp_raw+0x104>)
 8010466:	f240 4257 	movw	r2, #1111	; 0x457
 801046a:	493a      	ldr	r1, [pc, #232]	; (8010554 <etharp_raw+0x108>)
 801046c:	483a      	ldr	r0, [pc, #232]	; (8010558 <etharp_raw+0x10c>)
 801046e:	f004 fa19 	bl	80148a4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010472:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010476:	211c      	movs	r1, #28
 8010478:	200e      	movs	r0, #14
 801047a:	f7f8 f881 	bl	8008580 <pbuf_alloc>
 801047e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010480:	69bb      	ldr	r3, [r7, #24]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d102      	bne.n	801048c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010486:	f04f 33ff 	mov.w	r3, #4294967295
 801048a:	e05d      	b.n	8010548 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801048c:	69bb      	ldr	r3, [r7, #24]
 801048e:	895b      	ldrh	r3, [r3, #10]
 8010490:	2b1b      	cmp	r3, #27
 8010492:	d806      	bhi.n	80104a2 <etharp_raw+0x56>
 8010494:	4b2e      	ldr	r3, [pc, #184]	; (8010550 <etharp_raw+0x104>)
 8010496:	f240 4262 	movw	r2, #1122	; 0x462
 801049a:	4930      	ldr	r1, [pc, #192]	; (801055c <etharp_raw+0x110>)
 801049c:	482e      	ldr	r0, [pc, #184]	; (8010558 <etharp_raw+0x10c>)
 801049e:	f004 fa01 	bl	80148a4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80104a2:	69bb      	ldr	r3, [r7, #24]
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80104a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7f6 ffee 	bl	800748c <lwip_htons>
 80104b0:	4603      	mov	r3, r0
 80104b2:	461a      	mov	r2, r3
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80104be:	2b06      	cmp	r3, #6
 80104c0:	d006      	beq.n	80104d0 <etharp_raw+0x84>
 80104c2:	4b23      	ldr	r3, [pc, #140]	; (8010550 <etharp_raw+0x104>)
 80104c4:	f240 4269 	movw	r2, #1129	; 0x469
 80104c8:	4925      	ldr	r1, [pc, #148]	; (8010560 <etharp_raw+0x114>)
 80104ca:	4823      	ldr	r0, [pc, #140]	; (8010558 <etharp_raw+0x10c>)
 80104cc:	f004 f9ea 	bl	80148a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	3308      	adds	r3, #8
 80104d4:	2206      	movs	r2, #6
 80104d6:	6839      	ldr	r1, [r7, #0]
 80104d8:	4618      	mov	r0, r3
 80104da:	f004 fc5c 	bl	8014d96 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	3312      	adds	r3, #18
 80104e2:	2206      	movs	r2, #6
 80104e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80104e6:	4618      	mov	r0, r3
 80104e8:	f004 fc55 	bl	8014d96 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	330e      	adds	r3, #14
 80104f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104f2:	6812      	ldr	r2, [r2, #0]
 80104f4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	3318      	adds	r3, #24
 80104fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104fc:	6812      	ldr	r2, [r2, #0]
 80104fe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	2200      	movs	r2, #0
 8010504:	701a      	strb	r2, [r3, #0]
 8010506:	2200      	movs	r2, #0
 8010508:	f042 0201 	orr.w	r2, r2, #1
 801050c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	2200      	movs	r2, #0
 8010512:	f042 0208 	orr.w	r2, r2, #8
 8010516:	709a      	strb	r2, [r3, #2]
 8010518:	2200      	movs	r2, #0
 801051a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	2206      	movs	r2, #6
 8010520:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	2204      	movs	r2, #4
 8010526:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010528:	f640 0306 	movw	r3, #2054	; 0x806
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	68ba      	ldr	r2, [r7, #8]
 8010532:	69b9      	ldr	r1, [r7, #24]
 8010534:	68f8      	ldr	r0, [r7, #12]
 8010536:	f001 fc0b 	bl	8011d50 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801053a:	69b8      	ldr	r0, [r7, #24]
 801053c:	f7f8 fb04 	bl	8008b48 <pbuf_free>
  p = NULL;
 8010540:	2300      	movs	r3, #0
 8010542:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010544:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010548:	4618      	mov	r0, r3
 801054a:	3720      	adds	r7, #32
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}
 8010550:	08019618 	.word	0x08019618
 8010554:	08019768 	.word	0x08019768
 8010558:	08019690 	.word	0x08019690
 801055c:	08019818 	.word	0x08019818
 8010560:	0801984c 	.word	0x0801984c

08010564 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b088      	sub	sp, #32
 8010568:	af04      	add	r7, sp, #16
 801056a:	60f8      	str	r0, [r7, #12]
 801056c:	60b9      	str	r1, [r7, #8]
 801056e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010580:	2201      	movs	r2, #1
 8010582:	9203      	str	r2, [sp, #12]
 8010584:	68ba      	ldr	r2, [r7, #8]
 8010586:	9202      	str	r2, [sp, #8]
 8010588:	4a06      	ldr	r2, [pc, #24]	; (80105a4 <etharp_request_dst+0x40>)
 801058a:	9201      	str	r2, [sp, #4]
 801058c:	9300      	str	r3, [sp, #0]
 801058e:	4603      	mov	r3, r0
 8010590:	687a      	ldr	r2, [r7, #4]
 8010592:	68f8      	ldr	r0, [r7, #12]
 8010594:	f7ff ff5a 	bl	801044c <etharp_raw>
 8010598:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801059a:	4618      	mov	r0, r3
 801059c:	3710      	adds	r7, #16
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}
 80105a2:	bf00      	nop
 80105a4:	0801a5dc 	.word	0x0801a5dc

080105a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b082      	sub	sp, #8
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80105b2:	4a05      	ldr	r2, [pc, #20]	; (80105c8 <etharp_request+0x20>)
 80105b4:	6839      	ldr	r1, [r7, #0]
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f7ff ffd4 	bl	8010564 <etharp_request_dst>
 80105bc:	4603      	mov	r3, r0
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3708      	adds	r7, #8
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}
 80105c6:	bf00      	nop
 80105c8:	0801a5d4 	.word	0x0801a5d4

080105cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b08e      	sub	sp, #56	; 0x38
 80105d0:	af04      	add	r7, sp, #16
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80105d6:	4b79      	ldr	r3, [pc, #484]	; (80107bc <icmp_input+0x1f0>)
 80105d8:	689b      	ldr	r3, [r3, #8]
 80105da:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80105dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	f003 030f 	and.w	r3, r3, #15
 80105e4:	b2db      	uxtb	r3, r3
 80105e6:	009b      	lsls	r3, r3, #2
 80105e8:	b2db      	uxtb	r3, r3
 80105ea:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80105ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80105ee:	2b13      	cmp	r3, #19
 80105f0:	f240 80cd 	bls.w	801078e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	895b      	ldrh	r3, [r3, #10]
 80105f8:	2b03      	cmp	r3, #3
 80105fa:	f240 80ca 	bls.w	8010792 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	685b      	ldr	r3, [r3, #4]
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010608:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801060c:	2b00      	cmp	r3, #0
 801060e:	f000 80b7 	beq.w	8010780 <icmp_input+0x1b4>
 8010612:	2b08      	cmp	r3, #8
 8010614:	f040 80b7 	bne.w	8010786 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010618:	4b69      	ldr	r3, [pc, #420]	; (80107c0 <icmp_input+0x1f4>)
 801061a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801061c:	4b67      	ldr	r3, [pc, #412]	; (80107bc <icmp_input+0x1f0>)
 801061e:	695b      	ldr	r3, [r3, #20]
 8010620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010624:	2be0      	cmp	r3, #224	; 0xe0
 8010626:	f000 80bb 	beq.w	80107a0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801062a:	4b64      	ldr	r3, [pc, #400]	; (80107bc <icmp_input+0x1f0>)
 801062c:	695b      	ldr	r3, [r3, #20]
 801062e:	4a63      	ldr	r2, [pc, #396]	; (80107bc <icmp_input+0x1f0>)
 8010630:	6812      	ldr	r2, [r2, #0]
 8010632:	4611      	mov	r1, r2
 8010634:	4618      	mov	r0, r3
 8010636:	f000 fbed 	bl	8010e14 <ip4_addr_isbroadcast_u32>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	f040 80b1 	bne.w	80107a4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	891b      	ldrh	r3, [r3, #8]
 8010646:	2b07      	cmp	r3, #7
 8010648:	f240 80a5 	bls.w	8010796 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801064c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801064e:	330e      	adds	r3, #14
 8010650:	4619      	mov	r1, r3
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f7f8 f9e2 	bl	8008a1c <pbuf_add_header>
 8010658:	4603      	mov	r3, r0
 801065a:	2b00      	cmp	r3, #0
 801065c:	d04b      	beq.n	80106f6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	891a      	ldrh	r2, [r3, #8]
 8010662:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010664:	4413      	add	r3, r2
 8010666:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	891b      	ldrh	r3, [r3, #8]
 801066c:	8b7a      	ldrh	r2, [r7, #26]
 801066e:	429a      	cmp	r2, r3
 8010670:	f0c0 809a 	bcc.w	80107a8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010674:	8b7b      	ldrh	r3, [r7, #26]
 8010676:	f44f 7220 	mov.w	r2, #640	; 0x280
 801067a:	4619      	mov	r1, r3
 801067c:	200e      	movs	r0, #14
 801067e:	f7f7 ff7f 	bl	8008580 <pbuf_alloc>
 8010682:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	2b00      	cmp	r3, #0
 8010688:	f000 8090 	beq.w	80107ac <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	895b      	ldrh	r3, [r3, #10]
 8010690:	461a      	mov	r2, r3
 8010692:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010694:	3308      	adds	r3, #8
 8010696:	429a      	cmp	r2, r3
 8010698:	d203      	bcs.n	80106a2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801069a:	6978      	ldr	r0, [r7, #20]
 801069c:	f7f8 fa54 	bl	8008b48 <pbuf_free>
          goto icmperr;
 80106a0:	e085      	b.n	80107ae <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	685b      	ldr	r3, [r3, #4]
 80106a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80106a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106aa:	4618      	mov	r0, r3
 80106ac:	f004 fb73 	bl	8014d96 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80106b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80106b2:	4619      	mov	r1, r3
 80106b4:	6978      	ldr	r0, [r7, #20]
 80106b6:	f7f8 f9c1 	bl	8008a3c <pbuf_remove_header>
 80106ba:	4603      	mov	r3, r0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d009      	beq.n	80106d4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80106c0:	4b40      	ldr	r3, [pc, #256]	; (80107c4 <icmp_input+0x1f8>)
 80106c2:	22b6      	movs	r2, #182	; 0xb6
 80106c4:	4940      	ldr	r1, [pc, #256]	; (80107c8 <icmp_input+0x1fc>)
 80106c6:	4841      	ldr	r0, [pc, #260]	; (80107cc <icmp_input+0x200>)
 80106c8:	f004 f8ec 	bl	80148a4 <iprintf>
          pbuf_free(r);
 80106cc:	6978      	ldr	r0, [r7, #20]
 80106ce:	f7f8 fa3b 	bl	8008b48 <pbuf_free>
          goto icmperr;
 80106d2:	e06c      	b.n	80107ae <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80106d4:	6879      	ldr	r1, [r7, #4]
 80106d6:	6978      	ldr	r0, [r7, #20]
 80106d8:	f7f8 fb5e 	bl	8008d98 <pbuf_copy>
 80106dc:	4603      	mov	r3, r0
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d003      	beq.n	80106ea <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80106e2:	6978      	ldr	r0, [r7, #20]
 80106e4:	f7f8 fa30 	bl	8008b48 <pbuf_free>
          goto icmperr;
 80106e8:	e061      	b.n	80107ae <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f7f8 fa2c 	bl	8008b48 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	607b      	str	r3, [r7, #4]
 80106f4:	e00f      	b.n	8010716 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80106f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80106f8:	330e      	adds	r3, #14
 80106fa:	4619      	mov	r1, r3
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f7f8 f99d 	bl	8008a3c <pbuf_remove_header>
 8010702:	4603      	mov	r3, r0
 8010704:	2b00      	cmp	r3, #0
 8010706:	d006      	beq.n	8010716 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010708:	4b2e      	ldr	r3, [pc, #184]	; (80107c4 <icmp_input+0x1f8>)
 801070a:	22c7      	movs	r2, #199	; 0xc7
 801070c:	4930      	ldr	r1, [pc, #192]	; (80107d0 <icmp_input+0x204>)
 801070e:	482f      	ldr	r0, [pc, #188]	; (80107cc <icmp_input+0x200>)
 8010710:	f004 f8c8 	bl	80148a4 <iprintf>
          goto icmperr;
 8010714:	e04b      	b.n	80107ae <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801071c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801071e:	4619      	mov	r1, r3
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f7f8 f97b 	bl	8008a1c <pbuf_add_header>
 8010726:	4603      	mov	r3, r0
 8010728:	2b00      	cmp	r3, #0
 801072a:	d12b      	bne.n	8010784 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	685b      	ldr	r3, [r3, #4]
 8010730:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801073a:	4b20      	ldr	r3, [pc, #128]	; (80107bc <icmp_input+0x1f0>)
 801073c:	691a      	ldr	r2, [r3, #16]
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	2200      	movs	r2, #0
 8010746:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	2200      	movs	r2, #0
 801074c:	709a      	strb	r2, [r3, #2]
 801074e:	2200      	movs	r2, #0
 8010750:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	22ff      	movs	r2, #255	; 0xff
 8010756:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2200      	movs	r2, #0
 801075c:	729a      	strb	r2, [r3, #10]
 801075e:	2200      	movs	r2, #0
 8010760:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	9302      	str	r3, [sp, #8]
 8010766:	2301      	movs	r3, #1
 8010768:	9301      	str	r3, [sp, #4]
 801076a:	2300      	movs	r3, #0
 801076c:	9300      	str	r3, [sp, #0]
 801076e:	23ff      	movs	r3, #255	; 0xff
 8010770:	2200      	movs	r2, #0
 8010772:	69f9      	ldr	r1, [r7, #28]
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f000 fa75 	bl	8010c64 <ip4_output_if>
 801077a:	4603      	mov	r3, r0
 801077c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801077e:	e001      	b.n	8010784 <icmp_input+0x1b8>
      break;
 8010780:	bf00      	nop
 8010782:	e000      	b.n	8010786 <icmp_input+0x1ba>
      break;
 8010784:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f7f8 f9de 	bl	8008b48 <pbuf_free>
  return;
 801078c:	e013      	b.n	80107b6 <icmp_input+0x1ea>
    goto lenerr;
 801078e:	bf00      	nop
 8010790:	e002      	b.n	8010798 <icmp_input+0x1cc>
    goto lenerr;
 8010792:	bf00      	nop
 8010794:	e000      	b.n	8010798 <icmp_input+0x1cc>
        goto lenerr;
 8010796:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	f7f8 f9d5 	bl	8008b48 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801079e:	e00a      	b.n	80107b6 <icmp_input+0x1ea>
        goto icmperr;
 80107a0:	bf00      	nop
 80107a2:	e004      	b.n	80107ae <icmp_input+0x1e2>
        goto icmperr;
 80107a4:	bf00      	nop
 80107a6:	e002      	b.n	80107ae <icmp_input+0x1e2>
          goto icmperr;
 80107a8:	bf00      	nop
 80107aa:	e000      	b.n	80107ae <icmp_input+0x1e2>
          goto icmperr;
 80107ac:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f7f8 f9ca 	bl	8008b48 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80107b4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80107b6:	3728      	adds	r7, #40	; 0x28
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	20005764 	.word	0x20005764
 80107c0:	20005778 	.word	0x20005778
 80107c4:	08019890 	.word	0x08019890
 80107c8:	080198c8 	.word	0x080198c8
 80107cc:	08019900 	.word	0x08019900
 80107d0:	08019928 	.word	0x08019928

080107d4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b082      	sub	sp, #8
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	460b      	mov	r3, r1
 80107de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80107e0:	78fb      	ldrb	r3, [r7, #3]
 80107e2:	461a      	mov	r2, r3
 80107e4:	2103      	movs	r1, #3
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f000 f814 	bl	8010814 <icmp_send_response>
}
 80107ec:	bf00      	nop
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}

080107f4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b082      	sub	sp, #8
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	460b      	mov	r3, r1
 80107fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010800:	78fb      	ldrb	r3, [r7, #3]
 8010802:	461a      	mov	r2, r3
 8010804:	210b      	movs	r1, #11
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f000 f804 	bl	8010814 <icmp_send_response>
}
 801080c:	bf00      	nop
 801080e:	3708      	adds	r7, #8
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}

08010814 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b08c      	sub	sp, #48	; 0x30
 8010818:	af04      	add	r7, sp, #16
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	460b      	mov	r3, r1
 801081e:	70fb      	strb	r3, [r7, #3]
 8010820:	4613      	mov	r3, r2
 8010822:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010824:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010828:	2124      	movs	r1, #36	; 0x24
 801082a:	2022      	movs	r0, #34	; 0x22
 801082c:	f7f7 fea8 	bl	8008580 <pbuf_alloc>
 8010830:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010832:	69fb      	ldr	r3, [r7, #28]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d04c      	beq.n	80108d2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010838:	69fb      	ldr	r3, [r7, #28]
 801083a:	895b      	ldrh	r3, [r3, #10]
 801083c:	2b23      	cmp	r3, #35	; 0x23
 801083e:	d806      	bhi.n	801084e <icmp_send_response+0x3a>
 8010840:	4b26      	ldr	r3, [pc, #152]	; (80108dc <icmp_send_response+0xc8>)
 8010842:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010846:	4926      	ldr	r1, [pc, #152]	; (80108e0 <icmp_send_response+0xcc>)
 8010848:	4826      	ldr	r0, [pc, #152]	; (80108e4 <icmp_send_response+0xd0>)
 801084a:	f004 f82b 	bl	80148a4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010854:	69fb      	ldr	r3, [r7, #28]
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	78fa      	ldrb	r2, [r7, #3]
 801085e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	78ba      	ldrb	r2, [r7, #2]
 8010864:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	2200      	movs	r2, #0
 801086a:	711a      	strb	r2, [r3, #4]
 801086c:	2200      	movs	r2, #0
 801086e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	2200      	movs	r2, #0
 8010874:	719a      	strb	r2, [r3, #6]
 8010876:	2200      	movs	r2, #0
 8010878:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801087a:	69fb      	ldr	r3, [r7, #28]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	f103 0008 	add.w	r0, r3, #8
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	221c      	movs	r2, #28
 8010888:	4619      	mov	r1, r3
 801088a:	f004 fa84 	bl	8014d96 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801088e:	69bb      	ldr	r3, [r7, #24]
 8010890:	68db      	ldr	r3, [r3, #12]
 8010892:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010894:	f107 030c 	add.w	r3, r7, #12
 8010898:	4618      	mov	r0, r3
 801089a:	f000 f825 	bl	80108e8 <ip4_route>
 801089e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d011      	beq.n	80108ca <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	2200      	movs	r2, #0
 80108aa:	709a      	strb	r2, [r3, #2]
 80108ac:	2200      	movs	r2, #0
 80108ae:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80108b0:	f107 020c 	add.w	r2, r7, #12
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	9302      	str	r3, [sp, #8]
 80108b8:	2301      	movs	r3, #1
 80108ba:	9301      	str	r3, [sp, #4]
 80108bc:	2300      	movs	r3, #0
 80108be:	9300      	str	r3, [sp, #0]
 80108c0:	23ff      	movs	r3, #255	; 0xff
 80108c2:	2100      	movs	r1, #0
 80108c4:	69f8      	ldr	r0, [r7, #28]
 80108c6:	f000 f9cd 	bl	8010c64 <ip4_output_if>
  }
  pbuf_free(q);
 80108ca:	69f8      	ldr	r0, [r7, #28]
 80108cc:	f7f8 f93c 	bl	8008b48 <pbuf_free>
 80108d0:	e000      	b.n	80108d4 <icmp_send_response+0xc0>
    return;
 80108d2:	bf00      	nop
}
 80108d4:	3720      	adds	r7, #32
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
 80108da:	bf00      	nop
 80108dc:	08019890 	.word	0x08019890
 80108e0:	0801995c 	.word	0x0801995c
 80108e4:	08019900 	.word	0x08019900

080108e8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80108e8:	b480      	push	{r7}
 80108ea:	b085      	sub	sp, #20
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80108f0:	4b33      	ldr	r3, [pc, #204]	; (80109c0 <ip4_route+0xd8>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	60fb      	str	r3, [r7, #12]
 80108f6:	e036      	b.n	8010966 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80108fe:	f003 0301 	and.w	r3, r3, #1
 8010902:	b2db      	uxtb	r3, r3
 8010904:	2b00      	cmp	r3, #0
 8010906:	d02b      	beq.n	8010960 <ip4_route+0x78>
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801090e:	089b      	lsrs	r3, r3, #2
 8010910:	f003 0301 	and.w	r3, r3, #1
 8010914:	b2db      	uxtb	r3, r3
 8010916:	2b00      	cmp	r3, #0
 8010918:	d022      	beq.n	8010960 <ip4_route+0x78>
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	3304      	adds	r3, #4
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d01d      	beq.n	8010960 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681a      	ldr	r2, [r3, #0]
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	3304      	adds	r3, #4
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	405a      	eors	r2, r3
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	3308      	adds	r3, #8
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	4013      	ands	r3, r2
 8010938:	2b00      	cmp	r3, #0
 801093a:	d101      	bne.n	8010940 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	e038      	b.n	80109b2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010946:	f003 0302 	and.w	r3, r3, #2
 801094a:	2b00      	cmp	r3, #0
 801094c:	d108      	bne.n	8010960 <ip4_route+0x78>
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	330c      	adds	r3, #12
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	429a      	cmp	r2, r3
 801095a:	d101      	bne.n	8010960 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	e028      	b.n	80109b2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	60fb      	str	r3, [r7, #12]
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d1c5      	bne.n	80108f8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801096c:	4b15      	ldr	r3, [pc, #84]	; (80109c4 <ip4_route+0xdc>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d01a      	beq.n	80109aa <ip4_route+0xc2>
 8010974:	4b13      	ldr	r3, [pc, #76]	; (80109c4 <ip4_route+0xdc>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801097c:	f003 0301 	and.w	r3, r3, #1
 8010980:	2b00      	cmp	r3, #0
 8010982:	d012      	beq.n	80109aa <ip4_route+0xc2>
 8010984:	4b0f      	ldr	r3, [pc, #60]	; (80109c4 <ip4_route+0xdc>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801098c:	f003 0304 	and.w	r3, r3, #4
 8010990:	2b00      	cmp	r3, #0
 8010992:	d00a      	beq.n	80109aa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010994:	4b0b      	ldr	r3, [pc, #44]	; (80109c4 <ip4_route+0xdc>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	3304      	adds	r3, #4
 801099a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801099c:	2b00      	cmp	r3, #0
 801099e:	d004      	beq.n	80109aa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	b2db      	uxtb	r3, r3
 80109a6:	2b7f      	cmp	r3, #127	; 0x7f
 80109a8:	d101      	bne.n	80109ae <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80109aa:	2300      	movs	r3, #0
 80109ac:	e001      	b.n	80109b2 <ip4_route+0xca>
  }

  return netif_default;
 80109ae:	4b05      	ldr	r3, [pc, #20]	; (80109c4 <ip4_route+0xdc>)
 80109b0:	681b      	ldr	r3, [r3, #0]
}
 80109b2:	4618      	mov	r0, r3
 80109b4:	3714      	adds	r7, #20
 80109b6:	46bd      	mov	sp, r7
 80109b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109bc:	4770      	bx	lr
 80109be:	bf00      	nop
 80109c0:	2000ae58 	.word	0x2000ae58
 80109c4:	2000ae5c 	.word	0x2000ae5c

080109c8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80109d6:	f003 0301 	and.w	r3, r3, #1
 80109da:	b2db      	uxtb	r3, r3
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d016      	beq.n	8010a0e <ip4_input_accept+0x46>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	3304      	adds	r3, #4
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d011      	beq.n	8010a0e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80109ea:	4b0b      	ldr	r3, [pc, #44]	; (8010a18 <ip4_input_accept+0x50>)
 80109ec:	695a      	ldr	r2, [r3, #20]
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	3304      	adds	r3, #4
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d008      	beq.n	8010a0a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80109f8:	4b07      	ldr	r3, [pc, #28]	; (8010a18 <ip4_input_accept+0x50>)
 80109fa:	695b      	ldr	r3, [r3, #20]
 80109fc:	6879      	ldr	r1, [r7, #4]
 80109fe:	4618      	mov	r0, r3
 8010a00:	f000 fa08 	bl	8010e14 <ip4_addr_isbroadcast_u32>
 8010a04:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d001      	beq.n	8010a0e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	e000      	b.n	8010a10 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010a0e:	2300      	movs	r3, #0
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	3708      	adds	r7, #8
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}
 8010a18:	20005764 	.word	0x20005764

08010a1c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b086      	sub	sp, #24
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	781b      	ldrb	r3, [r3, #0]
 8010a30:	091b      	lsrs	r3, r3, #4
 8010a32:	b2db      	uxtb	r3, r3
 8010a34:	2b04      	cmp	r3, #4
 8010a36:	d004      	beq.n	8010a42 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f7f8 f885 	bl	8008b48 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	e107      	b.n	8010c52 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	781b      	ldrb	r3, [r3, #0]
 8010a46:	f003 030f 	and.w	r3, r3, #15
 8010a4a:	b2db      	uxtb	r3, r3
 8010a4c:	009b      	lsls	r3, r3, #2
 8010a4e:	b2db      	uxtb	r3, r3
 8010a50:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	885b      	ldrh	r3, [r3, #2]
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f7f6 fd17 	bl	800748c <lwip_htons>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	891b      	ldrh	r3, [r3, #8]
 8010a66:	89ba      	ldrh	r2, [r7, #12]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d204      	bcs.n	8010a76 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010a6c:	89bb      	ldrh	r3, [r7, #12]
 8010a6e:	4619      	mov	r1, r3
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f7f7 fee3 	bl	800883c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	895b      	ldrh	r3, [r3, #10]
 8010a7a:	89fa      	ldrh	r2, [r7, #14]
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d807      	bhi.n	8010a90 <ip4_input+0x74>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	891b      	ldrh	r3, [r3, #8]
 8010a84:	89ba      	ldrh	r2, [r7, #12]
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d802      	bhi.n	8010a90 <ip4_input+0x74>
 8010a8a:	89fb      	ldrh	r3, [r7, #14]
 8010a8c:	2b13      	cmp	r3, #19
 8010a8e:	d804      	bhi.n	8010a9a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f7f8 f859 	bl	8008b48 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010a96:	2300      	movs	r3, #0
 8010a98:	e0db      	b.n	8010c52 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010a9a:	697b      	ldr	r3, [r7, #20]
 8010a9c:	691b      	ldr	r3, [r3, #16]
 8010a9e:	4a6f      	ldr	r2, [pc, #444]	; (8010c5c <ip4_input+0x240>)
 8010aa0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	68db      	ldr	r3, [r3, #12]
 8010aa6:	4a6d      	ldr	r2, [pc, #436]	; (8010c5c <ip4_input+0x240>)
 8010aa8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010aaa:	4b6c      	ldr	r3, [pc, #432]	; (8010c5c <ip4_input+0x240>)
 8010aac:	695b      	ldr	r3, [r3, #20]
 8010aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ab2:	2be0      	cmp	r3, #224	; 0xe0
 8010ab4:	d112      	bne.n	8010adc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010abc:	f003 0301 	and.w	r3, r3, #1
 8010ac0:	b2db      	uxtb	r3, r3
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d007      	beq.n	8010ad6 <ip4_input+0xba>
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	3304      	adds	r3, #4
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d002      	beq.n	8010ad6 <ip4_input+0xba>
      netif = inp;
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	613b      	str	r3, [r7, #16]
 8010ad4:	e02a      	b.n	8010b2c <ip4_input+0x110>
    } else {
      netif = NULL;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	613b      	str	r3, [r7, #16]
 8010ada:	e027      	b.n	8010b2c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010adc:	6838      	ldr	r0, [r7, #0]
 8010ade:	f7ff ff73 	bl	80109c8 <ip4_input_accept>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d002      	beq.n	8010aee <ip4_input+0xd2>
      netif = inp;
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	613b      	str	r3, [r7, #16]
 8010aec:	e01e      	b.n	8010b2c <ip4_input+0x110>
    } else {
      netif = NULL;
 8010aee:	2300      	movs	r3, #0
 8010af0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010af2:	4b5a      	ldr	r3, [pc, #360]	; (8010c5c <ip4_input+0x240>)
 8010af4:	695b      	ldr	r3, [r3, #20]
 8010af6:	b2db      	uxtb	r3, r3
 8010af8:	2b7f      	cmp	r3, #127	; 0x7f
 8010afa:	d017      	beq.n	8010b2c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010afc:	4b58      	ldr	r3, [pc, #352]	; (8010c60 <ip4_input+0x244>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	613b      	str	r3, [r7, #16]
 8010b02:	e00e      	b.n	8010b22 <ip4_input+0x106>
          if (netif == inp) {
 8010b04:	693a      	ldr	r2, [r7, #16]
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d006      	beq.n	8010b1a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010b0c:	6938      	ldr	r0, [r7, #16]
 8010b0e:	f7ff ff5b 	bl	80109c8 <ip4_input_accept>
 8010b12:	4603      	mov	r3, r0
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d108      	bne.n	8010b2a <ip4_input+0x10e>
 8010b18:	e000      	b.n	8010b1c <ip4_input+0x100>
            continue;
 8010b1a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010b1c:	693b      	ldr	r3, [r7, #16]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	613b      	str	r3, [r7, #16]
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d1ed      	bne.n	8010b04 <ip4_input+0xe8>
 8010b28:	e000      	b.n	8010b2c <ip4_input+0x110>
            break;
 8010b2a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010b2c:	4b4b      	ldr	r3, [pc, #300]	; (8010c5c <ip4_input+0x240>)
 8010b2e:	691b      	ldr	r3, [r3, #16]
 8010b30:	6839      	ldr	r1, [r7, #0]
 8010b32:	4618      	mov	r0, r3
 8010b34:	f000 f96e 	bl	8010e14 <ip4_addr_isbroadcast_u32>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d105      	bne.n	8010b4a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010b3e:	4b47      	ldr	r3, [pc, #284]	; (8010c5c <ip4_input+0x240>)
 8010b40:	691b      	ldr	r3, [r3, #16]
 8010b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010b46:	2be0      	cmp	r3, #224	; 0xe0
 8010b48:	d104      	bne.n	8010b54 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f7f7 fffc 	bl	8008b48 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010b50:	2300      	movs	r3, #0
 8010b52:	e07e      	b.n	8010c52 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d104      	bne.n	8010b64 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f7f7 fff4 	bl	8008b48 <pbuf_free>
    return ERR_OK;
 8010b60:	2300      	movs	r3, #0
 8010b62:	e076      	b.n	8010c52 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	88db      	ldrh	r3, [r3, #6]
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	461a      	mov	r2, r3
 8010b6c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010b70:	4013      	ands	r3, r2
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d00b      	beq.n	8010b8e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f000 fd22 	bl	80115c0 <ip4_reass>
 8010b7c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d101      	bne.n	8010b88 <ip4_input+0x16c>
      return ERR_OK;
 8010b84:	2300      	movs	r3, #0
 8010b86:	e064      	b.n	8010c52 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010b8e:	4a33      	ldr	r2, [pc, #204]	; (8010c5c <ip4_input+0x240>)
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010b94:	4a31      	ldr	r2, [pc, #196]	; (8010c5c <ip4_input+0x240>)
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010b9a:	4a30      	ldr	r2, [pc, #192]	; (8010c5c <ip4_input+0x240>)
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	f003 030f 	and.w	r3, r3, #15
 8010ba8:	b2db      	uxtb	r3, r3
 8010baa:	009b      	lsls	r3, r3, #2
 8010bac:	b2db      	uxtb	r3, r3
 8010bae:	b29a      	uxth	r2, r3
 8010bb0:	4b2a      	ldr	r3, [pc, #168]	; (8010c5c <ip4_input+0x240>)
 8010bb2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010bb4:	89fb      	ldrh	r3, [r7, #14]
 8010bb6:	4619      	mov	r1, r3
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f7f7 ff3f 	bl	8008a3c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	7a5b      	ldrb	r3, [r3, #9]
 8010bc2:	2b11      	cmp	r3, #17
 8010bc4:	d006      	beq.n	8010bd4 <ip4_input+0x1b8>
 8010bc6:	2b11      	cmp	r3, #17
 8010bc8:	dc13      	bgt.n	8010bf2 <ip4_input+0x1d6>
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d00c      	beq.n	8010be8 <ip4_input+0x1cc>
 8010bce:	2b06      	cmp	r3, #6
 8010bd0:	d005      	beq.n	8010bde <ip4_input+0x1c2>
 8010bd2:	e00e      	b.n	8010bf2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010bd4:	6839      	ldr	r1, [r7, #0]
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f7fe fc68 	bl	800f4ac <udp_input>
        break;
 8010bdc:	e026      	b.n	8010c2c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8010bde:	6839      	ldr	r1, [r7, #0]
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f7fa f889 	bl	800acf8 <tcp_input>
        break;
 8010be6:	e021      	b.n	8010c2c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010be8:	6839      	ldr	r1, [r7, #0]
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f7ff fcee 	bl	80105cc <icmp_input>
        break;
 8010bf0:	e01c      	b.n	8010c2c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010bf2:	4b1a      	ldr	r3, [pc, #104]	; (8010c5c <ip4_input+0x240>)
 8010bf4:	695b      	ldr	r3, [r3, #20]
 8010bf6:	6939      	ldr	r1, [r7, #16]
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f000 f90b 	bl	8010e14 <ip4_addr_isbroadcast_u32>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d10f      	bne.n	8010c24 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010c04:	4b15      	ldr	r3, [pc, #84]	; (8010c5c <ip4_input+0x240>)
 8010c06:	695b      	ldr	r3, [r3, #20]
 8010c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010c0c:	2be0      	cmp	r3, #224	; 0xe0
 8010c0e:	d009      	beq.n	8010c24 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010c10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010c14:	4619      	mov	r1, r3
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f7f7 ff83 	bl	8008b22 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010c1c:	2102      	movs	r1, #2
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f7ff fdd8 	bl	80107d4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f7f7 ff8f 	bl	8008b48 <pbuf_free>
        break;
 8010c2a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010c2c:	4b0b      	ldr	r3, [pc, #44]	; (8010c5c <ip4_input+0x240>)
 8010c2e:	2200      	movs	r2, #0
 8010c30:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010c32:	4b0a      	ldr	r3, [pc, #40]	; (8010c5c <ip4_input+0x240>)
 8010c34:	2200      	movs	r2, #0
 8010c36:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010c38:	4b08      	ldr	r3, [pc, #32]	; (8010c5c <ip4_input+0x240>)
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010c3e:	4b07      	ldr	r3, [pc, #28]	; (8010c5c <ip4_input+0x240>)
 8010c40:	2200      	movs	r2, #0
 8010c42:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010c44:	4b05      	ldr	r3, [pc, #20]	; (8010c5c <ip4_input+0x240>)
 8010c46:	2200      	movs	r2, #0
 8010c48:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010c4a:	4b04      	ldr	r3, [pc, #16]	; (8010c5c <ip4_input+0x240>)
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010c50:	2300      	movs	r3, #0
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3718      	adds	r7, #24
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	20005764 	.word	0x20005764
 8010c60:	2000ae58 	.word	0x2000ae58

08010c64 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b08a      	sub	sp, #40	; 0x28
 8010c68:	af04      	add	r7, sp, #16
 8010c6a:	60f8      	str	r0, [r7, #12]
 8010c6c:	60b9      	str	r1, [r7, #8]
 8010c6e:	607a      	str	r2, [r7, #4]
 8010c70:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d009      	beq.n	8010c90 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d003      	beq.n	8010c8a <ip4_output_if+0x26>
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d102      	bne.n	8010c90 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8c:	3304      	adds	r3, #4
 8010c8e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010c90:	78fa      	ldrb	r2, [r7, #3]
 8010c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c94:	9302      	str	r3, [sp, #8]
 8010c96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010c9a:	9301      	str	r3, [sp, #4]
 8010c9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010ca0:	9300      	str	r3, [sp, #0]
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	687a      	ldr	r2, [r7, #4]
 8010ca6:	6979      	ldr	r1, [r7, #20]
 8010ca8:	68f8      	ldr	r0, [r7, #12]
 8010caa:	f000 f805 	bl	8010cb8 <ip4_output_if_src>
 8010cae:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3718      	adds	r7, #24
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}

08010cb8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b088      	sub	sp, #32
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	60f8      	str	r0, [r7, #12]
 8010cc0:	60b9      	str	r1, [r7, #8]
 8010cc2:	607a      	str	r2, [r7, #4]
 8010cc4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	7b9b      	ldrb	r3, [r3, #14]
 8010cca:	2b01      	cmp	r3, #1
 8010ccc:	d006      	beq.n	8010cdc <ip4_output_if_src+0x24>
 8010cce:	4b4b      	ldr	r3, [pc, #300]	; (8010dfc <ip4_output_if_src+0x144>)
 8010cd0:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010cd4:	494a      	ldr	r1, [pc, #296]	; (8010e00 <ip4_output_if_src+0x148>)
 8010cd6:	484b      	ldr	r0, [pc, #300]	; (8010e04 <ip4_output_if_src+0x14c>)
 8010cd8:	f003 fde4 	bl	80148a4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d060      	beq.n	8010da4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010ce2:	2314      	movs	r3, #20
 8010ce4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010ce6:	2114      	movs	r1, #20
 8010ce8:	68f8      	ldr	r0, [r7, #12]
 8010cea:	f7f7 fe97 	bl	8008a1c <pbuf_add_header>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d002      	beq.n	8010cfa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010cf4:	f06f 0301 	mvn.w	r3, #1
 8010cf8:	e07c      	b.n	8010df4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	895b      	ldrh	r3, [r3, #10]
 8010d04:	2b13      	cmp	r3, #19
 8010d06:	d806      	bhi.n	8010d16 <ip4_output_if_src+0x5e>
 8010d08:	4b3c      	ldr	r3, [pc, #240]	; (8010dfc <ip4_output_if_src+0x144>)
 8010d0a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8010d0e:	493e      	ldr	r1, [pc, #248]	; (8010e08 <ip4_output_if_src+0x150>)
 8010d10:	483c      	ldr	r0, [pc, #240]	; (8010e04 <ip4_output_if_src+0x14c>)
 8010d12:	f003 fdc7 	bl	80148a4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010d16:	69fb      	ldr	r3, [r7, #28]
 8010d18:	78fa      	ldrb	r2, [r7, #3]
 8010d1a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010d1c:	69fb      	ldr	r3, [r7, #28]
 8010d1e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010d22:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681a      	ldr	r2, [r3, #0]
 8010d28:	69fb      	ldr	r3, [r7, #28]
 8010d2a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010d2c:	8b7b      	ldrh	r3, [r7, #26]
 8010d2e:	089b      	lsrs	r3, r3, #2
 8010d30:	b29b      	uxth	r3, r3
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d38:	b2da      	uxtb	r2, r3
 8010d3a:	69fb      	ldr	r3, [r7, #28]
 8010d3c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010d3e:	69fb      	ldr	r3, [r7, #28]
 8010d40:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010d44:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	891b      	ldrh	r3, [r3, #8]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7f6 fb9e 	bl	800748c <lwip_htons>
 8010d50:	4603      	mov	r3, r0
 8010d52:	461a      	mov	r2, r3
 8010d54:	69fb      	ldr	r3, [r7, #28]
 8010d56:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	719a      	strb	r2, [r3, #6]
 8010d5e:	2200      	movs	r2, #0
 8010d60:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010d62:	4b2a      	ldr	r3, [pc, #168]	; (8010e0c <ip4_output_if_src+0x154>)
 8010d64:	881b      	ldrh	r3, [r3, #0]
 8010d66:	4618      	mov	r0, r3
 8010d68:	f7f6 fb90 	bl	800748c <lwip_htons>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	461a      	mov	r2, r3
 8010d70:	69fb      	ldr	r3, [r7, #28]
 8010d72:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010d74:	4b25      	ldr	r3, [pc, #148]	; (8010e0c <ip4_output_if_src+0x154>)
 8010d76:	881b      	ldrh	r3, [r3, #0]
 8010d78:	3301      	adds	r3, #1
 8010d7a:	b29a      	uxth	r2, r3
 8010d7c:	4b23      	ldr	r3, [pc, #140]	; (8010e0c <ip4_output_if_src+0x154>)
 8010d7e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d104      	bne.n	8010d90 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010d86:	4b22      	ldr	r3, [pc, #136]	; (8010e10 <ip4_output_if_src+0x158>)
 8010d88:	681a      	ldr	r2, [r3, #0]
 8010d8a:	69fb      	ldr	r3, [r7, #28]
 8010d8c:	60da      	str	r2, [r3, #12]
 8010d8e:	e003      	b.n	8010d98 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	681a      	ldr	r2, [r3, #0]
 8010d94:	69fb      	ldr	r3, [r7, #28]
 8010d96:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010d98:	69fb      	ldr	r3, [r7, #28]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	729a      	strb	r2, [r3, #10]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	72da      	strb	r2, [r3, #11]
 8010da2:	e00f      	b.n	8010dc4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	895b      	ldrh	r3, [r3, #10]
 8010da8:	2b13      	cmp	r3, #19
 8010daa:	d802      	bhi.n	8010db2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010dac:	f06f 0301 	mvn.w	r3, #1
 8010db0:	e020      	b.n	8010df4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010db8:	69fb      	ldr	r3, [r7, #28]
 8010dba:	691b      	ldr	r3, [r3, #16]
 8010dbc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010dbe:	f107 0314 	add.w	r3, r7, #20
 8010dc2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d00c      	beq.n	8010de6 <ip4_output_if_src+0x12e>
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	891a      	ldrh	r2, [r3, #8]
 8010dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	d906      	bls.n	8010de6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010dd8:	687a      	ldr	r2, [r7, #4]
 8010dda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010ddc:	68f8      	ldr	r0, [r7, #12]
 8010dde:	f000 fde3 	bl	80119a8 <ip4_frag>
 8010de2:	4603      	mov	r3, r0
 8010de4:	e006      	b.n	8010df4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010de8:	695b      	ldr	r3, [r3, #20]
 8010dea:	687a      	ldr	r2, [r7, #4]
 8010dec:	68f9      	ldr	r1, [r7, #12]
 8010dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010df0:	4798      	blx	r3
 8010df2:	4603      	mov	r3, r0
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3720      	adds	r7, #32
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	08019988 	.word	0x08019988
 8010e00:	080199bc 	.word	0x080199bc
 8010e04:	080199c8 	.word	0x080199c8
 8010e08:	080199f0 	.word	0x080199f0
 8010e0c:	200009de 	.word	0x200009de
 8010e10:	0801a5d0 	.word	0x0801a5d0

08010e14 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b085      	sub	sp, #20
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
 8010e1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e28:	d002      	beq.n	8010e30 <ip4_addr_isbroadcast_u32+0x1c>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d101      	bne.n	8010e34 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010e30:	2301      	movs	r3, #1
 8010e32:	e02a      	b.n	8010e8a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e3a:	f003 0302 	and.w	r3, r3, #2
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d101      	bne.n	8010e46 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010e42:	2300      	movs	r3, #0
 8010e44:	e021      	b.n	8010e8a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	3304      	adds	r3, #4
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	687a      	ldr	r2, [r7, #4]
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d101      	bne.n	8010e56 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010e52:	2300      	movs	r3, #0
 8010e54:	e019      	b.n	8010e8a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010e56:	68fa      	ldr	r2, [r7, #12]
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	3304      	adds	r3, #4
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	405a      	eors	r2, r3
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	3308      	adds	r3, #8
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	4013      	ands	r3, r2
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d10d      	bne.n	8010e88 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	3308      	adds	r3, #8
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	43da      	mvns	r2, r3
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	3308      	adds	r3, #8
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d101      	bne.n	8010e88 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010e84:	2301      	movs	r3, #1
 8010e86:	e000      	b.n	8010e8a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010e88:	2300      	movs	r3, #0
  }
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	3714      	adds	r7, #20
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e94:	4770      	bx	lr
	...

08010e98 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b082      	sub	sp, #8
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8010ea0:	2210      	movs	r2, #16
 8010ea2:	4904      	ldr	r1, [pc, #16]	; (8010eb4 <ip4addr_ntoa+0x1c>)
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f000 f807 	bl	8010eb8 <ip4addr_ntoa_r>
 8010eaa:	4603      	mov	r3, r0
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3708      	adds	r7, #8
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}
 8010eb4:	200009e0 	.word	0x200009e0

08010eb8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b08d      	sub	sp, #52	; 0x34
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	60f8      	str	r0, [r7, #12]
 8010ec0:	60b9      	str	r1, [r7, #8]
 8010ec2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8010ed2:	f107 0318 	add.w	r3, r7, #24
 8010ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8010ed8:	2300      	movs	r3, #0
 8010eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ede:	e058      	b.n	8010f92 <ip4addr_ntoa_r+0xda>
    i = 0;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8010ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ee8:	781a      	ldrb	r2, [r3, #0]
 8010eea:	4b32      	ldr	r3, [pc, #200]	; (8010fb4 <ip4addr_ntoa_r+0xfc>)
 8010eec:	fba3 1302 	umull	r1, r3, r3, r2
 8010ef0:	08d9      	lsrs	r1, r3, #3
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	009b      	lsls	r3, r3, #2
 8010ef6:	440b      	add	r3, r1
 8010ef8:	005b      	lsls	r3, r3, #1
 8010efa:	1ad3      	subs	r3, r2, r3
 8010efc:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8010efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f00:	781b      	ldrb	r3, [r3, #0]
 8010f02:	4a2c      	ldr	r2, [pc, #176]	; (8010fb4 <ip4addr_ntoa_r+0xfc>)
 8010f04:	fba2 2303 	umull	r2, r3, r2, r3
 8010f08:	08db      	lsrs	r3, r3, #3
 8010f0a:	b2da      	uxtb	r2, r3
 8010f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f0e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8010f10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f14:	1c5a      	adds	r2, r3, #1
 8010f16:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	7ffb      	ldrb	r3, [r7, #31]
 8010f1e:	3330      	adds	r3, #48	; 0x30
 8010f20:	b2da      	uxtb	r2, r3
 8010f22:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8010f26:	443b      	add	r3, r7
 8010f28:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8010f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d1d8      	bne.n	8010ee6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8010f34:	e011      	b.n	8010f5a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8010f36:	6a3b      	ldr	r3, [r7, #32]
 8010f38:	1c5a      	adds	r2, r3, #1
 8010f3a:	623a      	str	r2, [r7, #32]
 8010f3c:	687a      	ldr	r2, [r7, #4]
 8010f3e:	429a      	cmp	r2, r3
 8010f40:	dc01      	bgt.n	8010f46 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8010f42:	2300      	movs	r3, #0
 8010f44:	e030      	b.n	8010fa8 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8010f46:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8010f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f4c:	1c59      	adds	r1, r3, #1
 8010f4e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010f50:	3230      	adds	r2, #48	; 0x30
 8010f52:	443a      	add	r2, r7
 8010f54:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8010f58:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8010f5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f5e:	1e5a      	subs	r2, r3, #1
 8010f60:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d1e6      	bne.n	8010f36 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8010f68:	6a3b      	ldr	r3, [r7, #32]
 8010f6a:	1c5a      	adds	r2, r3, #1
 8010f6c:	623a      	str	r2, [r7, #32]
 8010f6e:	687a      	ldr	r2, [r7, #4]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	dc01      	bgt.n	8010f78 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8010f74:	2300      	movs	r3, #0
 8010f76:	e017      	b.n	8010fa8 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8010f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f7a:	1c5a      	adds	r2, r3, #1
 8010f7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010f7e:	222e      	movs	r2, #46	; 0x2e
 8010f80:	701a      	strb	r2, [r3, #0]
    ap++;
 8010f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f84:	3301      	adds	r3, #1
 8010f86:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8010f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f8c:	3301      	adds	r3, #1
 8010f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f96:	2b03      	cmp	r3, #3
 8010f98:	d9a2      	bls.n	8010ee0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8010f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f9c:	3b01      	subs	r3, #1
 8010f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	701a      	strb	r2, [r3, #0]
  return buf;
 8010fa6:	68bb      	ldr	r3, [r7, #8]
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3734      	adds	r7, #52	; 0x34
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr
 8010fb4:	cccccccd 	.word	0xcccccccd

08010fb8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b084      	sub	sp, #16
 8010fbc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010fc2:	4b12      	ldr	r3, [pc, #72]	; (801100c <ip_reass_tmr+0x54>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010fc8:	e018      	b.n	8010ffc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	7fdb      	ldrb	r3, [r3, #31]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d00b      	beq.n	8010fea <ip_reass_tmr+0x32>
      r->timer--;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	7fdb      	ldrb	r3, [r3, #31]
 8010fd6:	3b01      	subs	r3, #1
 8010fd8:	b2da      	uxtb	r2, r3
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	60fb      	str	r3, [r7, #12]
 8010fe8:	e008      	b.n	8010ffc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010ff4:	68b9      	ldr	r1, [r7, #8]
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f000 f80a 	bl	8011010 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d1e3      	bne.n	8010fca <ip_reass_tmr+0x12>
    }
  }
}
 8011002:	bf00      	nop
 8011004:	bf00      	nop
 8011006:	3710      	adds	r7, #16
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}
 801100c:	200009f0 	.word	0x200009f0

08011010 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b088      	sub	sp, #32
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801101a:	2300      	movs	r3, #0
 801101c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801101e:	683a      	ldr	r2, [r7, #0]
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	429a      	cmp	r2, r3
 8011024:	d105      	bne.n	8011032 <ip_reass_free_complete_datagram+0x22>
 8011026:	4b45      	ldr	r3, [pc, #276]	; (801113c <ip_reass_free_complete_datagram+0x12c>)
 8011028:	22ab      	movs	r2, #171	; 0xab
 801102a:	4945      	ldr	r1, [pc, #276]	; (8011140 <ip_reass_free_complete_datagram+0x130>)
 801102c:	4845      	ldr	r0, [pc, #276]	; (8011144 <ip_reass_free_complete_datagram+0x134>)
 801102e:	f003 fc39 	bl	80148a4 <iprintf>
  if (prev != NULL) {
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d00a      	beq.n	801104e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	687a      	ldr	r2, [r7, #4]
 801103e:	429a      	cmp	r2, r3
 8011040:	d005      	beq.n	801104e <ip_reass_free_complete_datagram+0x3e>
 8011042:	4b3e      	ldr	r3, [pc, #248]	; (801113c <ip_reass_free_complete_datagram+0x12c>)
 8011044:	22ad      	movs	r2, #173	; 0xad
 8011046:	4940      	ldr	r1, [pc, #256]	; (8011148 <ip_reass_free_complete_datagram+0x138>)
 8011048:	483e      	ldr	r0, [pc, #248]	; (8011144 <ip_reass_free_complete_datagram+0x134>)
 801104a:	f003 fc2b 	bl	80148a4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	685b      	ldr	r3, [r3, #4]
 8011054:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011056:	697b      	ldr	r3, [r7, #20]
 8011058:	889b      	ldrh	r3, [r3, #4]
 801105a:	b29b      	uxth	r3, r3
 801105c:	2b00      	cmp	r3, #0
 801105e:	d12a      	bne.n	80110b6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	685b      	ldr	r3, [r3, #4]
 8011064:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011066:	697b      	ldr	r3, [r7, #20]
 8011068:	681a      	ldr	r2, [r3, #0]
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801106e:	69bb      	ldr	r3, [r7, #24]
 8011070:	6858      	ldr	r0, [r3, #4]
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	3308      	adds	r3, #8
 8011076:	2214      	movs	r2, #20
 8011078:	4619      	mov	r1, r3
 801107a:	f003 fe8c 	bl	8014d96 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801107e:	2101      	movs	r1, #1
 8011080:	69b8      	ldr	r0, [r7, #24]
 8011082:	f7ff fbb7 	bl	80107f4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011086:	69b8      	ldr	r0, [r7, #24]
 8011088:	f7f7 fde6 	bl	8008c58 <pbuf_clen>
 801108c:	4603      	mov	r3, r0
 801108e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011090:	8bfa      	ldrh	r2, [r7, #30]
 8011092:	8a7b      	ldrh	r3, [r7, #18]
 8011094:	4413      	add	r3, r2
 8011096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801109a:	db05      	blt.n	80110a8 <ip_reass_free_complete_datagram+0x98>
 801109c:	4b27      	ldr	r3, [pc, #156]	; (801113c <ip_reass_free_complete_datagram+0x12c>)
 801109e:	22bc      	movs	r2, #188	; 0xbc
 80110a0:	492a      	ldr	r1, [pc, #168]	; (801114c <ip_reass_free_complete_datagram+0x13c>)
 80110a2:	4828      	ldr	r0, [pc, #160]	; (8011144 <ip_reass_free_complete_datagram+0x134>)
 80110a4:	f003 fbfe 	bl	80148a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80110a8:	8bfa      	ldrh	r2, [r7, #30]
 80110aa:	8a7b      	ldrh	r3, [r7, #18]
 80110ac:	4413      	add	r3, r2
 80110ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80110b0:	69b8      	ldr	r0, [r7, #24]
 80110b2:	f7f7 fd49 	bl	8008b48 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	685b      	ldr	r3, [r3, #4]
 80110ba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80110bc:	e01f      	b.n	80110fe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80110be:	69bb      	ldr	r3, [r7, #24]
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80110c4:	69bb      	ldr	r3, [r7, #24]
 80110c6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80110c8:	697b      	ldr	r3, [r7, #20]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80110ce:	68f8      	ldr	r0, [r7, #12]
 80110d0:	f7f7 fdc2 	bl	8008c58 <pbuf_clen>
 80110d4:	4603      	mov	r3, r0
 80110d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80110d8:	8bfa      	ldrh	r2, [r7, #30]
 80110da:	8a7b      	ldrh	r3, [r7, #18]
 80110dc:	4413      	add	r3, r2
 80110de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80110e2:	db05      	blt.n	80110f0 <ip_reass_free_complete_datagram+0xe0>
 80110e4:	4b15      	ldr	r3, [pc, #84]	; (801113c <ip_reass_free_complete_datagram+0x12c>)
 80110e6:	22cc      	movs	r2, #204	; 0xcc
 80110e8:	4918      	ldr	r1, [pc, #96]	; (801114c <ip_reass_free_complete_datagram+0x13c>)
 80110ea:	4816      	ldr	r0, [pc, #88]	; (8011144 <ip_reass_free_complete_datagram+0x134>)
 80110ec:	f003 fbda 	bl	80148a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80110f0:	8bfa      	ldrh	r2, [r7, #30]
 80110f2:	8a7b      	ldrh	r3, [r7, #18]
 80110f4:	4413      	add	r3, r2
 80110f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80110f8:	68f8      	ldr	r0, [r7, #12]
 80110fa:	f7f7 fd25 	bl	8008b48 <pbuf_free>
  while (p != NULL) {
 80110fe:	69bb      	ldr	r3, [r7, #24]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d1dc      	bne.n	80110be <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011104:	6839      	ldr	r1, [r7, #0]
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f000 f8c2 	bl	8011290 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801110c:	4b10      	ldr	r3, [pc, #64]	; (8011150 <ip_reass_free_complete_datagram+0x140>)
 801110e:	881b      	ldrh	r3, [r3, #0]
 8011110:	8bfa      	ldrh	r2, [r7, #30]
 8011112:	429a      	cmp	r2, r3
 8011114:	d905      	bls.n	8011122 <ip_reass_free_complete_datagram+0x112>
 8011116:	4b09      	ldr	r3, [pc, #36]	; (801113c <ip_reass_free_complete_datagram+0x12c>)
 8011118:	22d2      	movs	r2, #210	; 0xd2
 801111a:	490e      	ldr	r1, [pc, #56]	; (8011154 <ip_reass_free_complete_datagram+0x144>)
 801111c:	4809      	ldr	r0, [pc, #36]	; (8011144 <ip_reass_free_complete_datagram+0x134>)
 801111e:	f003 fbc1 	bl	80148a4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011122:	4b0b      	ldr	r3, [pc, #44]	; (8011150 <ip_reass_free_complete_datagram+0x140>)
 8011124:	881a      	ldrh	r2, [r3, #0]
 8011126:	8bfb      	ldrh	r3, [r7, #30]
 8011128:	1ad3      	subs	r3, r2, r3
 801112a:	b29a      	uxth	r2, r3
 801112c:	4b08      	ldr	r3, [pc, #32]	; (8011150 <ip_reass_free_complete_datagram+0x140>)
 801112e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011130:	8bfb      	ldrh	r3, [r7, #30]
}
 8011132:	4618      	mov	r0, r3
 8011134:	3720      	adds	r7, #32
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
 801113a:	bf00      	nop
 801113c:	08019a20 	.word	0x08019a20
 8011140:	08019a5c 	.word	0x08019a5c
 8011144:	08019a68 	.word	0x08019a68
 8011148:	08019a90 	.word	0x08019a90
 801114c:	08019aa4 	.word	0x08019aa4
 8011150:	200009f4 	.word	0x200009f4
 8011154:	08019ac4 	.word	0x08019ac4

08011158 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b08a      	sub	sp, #40	; 0x28
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011162:	2300      	movs	r3, #0
 8011164:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011166:	2300      	movs	r3, #0
 8011168:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801116a:	2300      	movs	r3, #0
 801116c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801116e:	2300      	movs	r3, #0
 8011170:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011172:	2300      	movs	r3, #0
 8011174:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011176:	4b28      	ldr	r3, [pc, #160]	; (8011218 <ip_reass_remove_oldest_datagram+0xc0>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801117c:	e030      	b.n	80111e0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011180:	695a      	ldr	r2, [r3, #20]
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	68db      	ldr	r3, [r3, #12]
 8011186:	429a      	cmp	r2, r3
 8011188:	d10c      	bne.n	80111a4 <ip_reass_remove_oldest_datagram+0x4c>
 801118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118c:	699a      	ldr	r2, [r3, #24]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	691b      	ldr	r3, [r3, #16]
 8011192:	429a      	cmp	r2, r3
 8011194:	d106      	bne.n	80111a4 <ip_reass_remove_oldest_datagram+0x4c>
 8011196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011198:	899a      	ldrh	r2, [r3, #12]
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	889b      	ldrh	r3, [r3, #4]
 801119e:	b29b      	uxth	r3, r3
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d014      	beq.n	80111ce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	3301      	adds	r3, #1
 80111a8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80111aa:	6a3b      	ldr	r3, [r7, #32]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d104      	bne.n	80111ba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80111b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80111b4:	69fb      	ldr	r3, [r7, #28]
 80111b6:	61bb      	str	r3, [r7, #24]
 80111b8:	e009      	b.n	80111ce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80111ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111bc:	7fda      	ldrb	r2, [r3, #31]
 80111be:	6a3b      	ldr	r3, [r7, #32]
 80111c0:	7fdb      	ldrb	r3, [r3, #31]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d803      	bhi.n	80111ce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80111c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80111ca:	69fb      	ldr	r3, [r7, #28]
 80111cc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80111ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d001      	beq.n	80111da <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80111d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80111da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80111e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d1cb      	bne.n	801117e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80111e6:	6a3b      	ldr	r3, [r7, #32]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d008      	beq.n	80111fe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80111ec:	69b9      	ldr	r1, [r7, #24]
 80111ee:	6a38      	ldr	r0, [r7, #32]
 80111f0:	f7ff ff0e 	bl	8011010 <ip_reass_free_complete_datagram>
 80111f4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80111f6:	697a      	ldr	r2, [r7, #20]
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	4413      	add	r3, r2
 80111fc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80111fe:	697a      	ldr	r2, [r7, #20]
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	429a      	cmp	r2, r3
 8011204:	da02      	bge.n	801120c <ip_reass_remove_oldest_datagram+0xb4>
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	2b01      	cmp	r3, #1
 801120a:	dcac      	bgt.n	8011166 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801120c:	697b      	ldr	r3, [r7, #20]
}
 801120e:	4618      	mov	r0, r3
 8011210:	3728      	adds	r7, #40	; 0x28
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	200009f0 	.word	0x200009f0

0801121c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b084      	sub	sp, #16
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011226:	2004      	movs	r0, #4
 8011228:	f7f6 fda8 	bl	8007d7c <memp_malloc>
 801122c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d110      	bne.n	8011256 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011234:	6839      	ldr	r1, [r7, #0]
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f7ff ff8e 	bl	8011158 <ip_reass_remove_oldest_datagram>
 801123c:	4602      	mov	r2, r0
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	4293      	cmp	r3, r2
 8011242:	dc03      	bgt.n	801124c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011244:	2004      	movs	r0, #4
 8011246:	f7f6 fd99 	bl	8007d7c <memp_malloc>
 801124a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d101      	bne.n	8011256 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011252:	2300      	movs	r3, #0
 8011254:	e016      	b.n	8011284 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011256:	2220      	movs	r2, #32
 8011258:	2100      	movs	r1, #0
 801125a:	68f8      	ldr	r0, [r7, #12]
 801125c:	f003 fc78 	bl	8014b50 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	220f      	movs	r2, #15
 8011264:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011266:	4b09      	ldr	r3, [pc, #36]	; (801128c <ip_reass_enqueue_new_datagram+0x70>)
 8011268:	681a      	ldr	r2, [r3, #0]
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801126e:	4a07      	ldr	r2, [pc, #28]	; (801128c <ip_reass_enqueue_new_datagram+0x70>)
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	3308      	adds	r3, #8
 8011278:	2214      	movs	r2, #20
 801127a:	6879      	ldr	r1, [r7, #4]
 801127c:	4618      	mov	r0, r3
 801127e:	f003 fd8a 	bl	8014d96 <memcpy>
  return ipr;
 8011282:	68fb      	ldr	r3, [r7, #12]
}
 8011284:	4618      	mov	r0, r3
 8011286:	3710      	adds	r7, #16
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}
 801128c:	200009f0 	.word	0x200009f0

08011290 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801129a:	4b10      	ldr	r3, [pc, #64]	; (80112dc <ip_reass_dequeue_datagram+0x4c>)
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	687a      	ldr	r2, [r7, #4]
 80112a0:	429a      	cmp	r2, r3
 80112a2:	d104      	bne.n	80112ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	4a0c      	ldr	r2, [pc, #48]	; (80112dc <ip_reass_dequeue_datagram+0x4c>)
 80112aa:	6013      	str	r3, [r2, #0]
 80112ac:	e00d      	b.n	80112ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d106      	bne.n	80112c2 <ip_reass_dequeue_datagram+0x32>
 80112b4:	4b0a      	ldr	r3, [pc, #40]	; (80112e0 <ip_reass_dequeue_datagram+0x50>)
 80112b6:	f240 1245 	movw	r2, #325	; 0x145
 80112ba:	490a      	ldr	r1, [pc, #40]	; (80112e4 <ip_reass_dequeue_datagram+0x54>)
 80112bc:	480a      	ldr	r0, [pc, #40]	; (80112e8 <ip_reass_dequeue_datagram+0x58>)
 80112be:	f003 faf1 	bl	80148a4 <iprintf>
    prev->next = ipr->next;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681a      	ldr	r2, [r3, #0]
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80112ca:	6879      	ldr	r1, [r7, #4]
 80112cc:	2004      	movs	r0, #4
 80112ce:	f7f6 fdc5 	bl	8007e5c <memp_free>
}
 80112d2:	bf00      	nop
 80112d4:	3708      	adds	r7, #8
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	200009f0 	.word	0x200009f0
 80112e0:	08019a20 	.word	0x08019a20
 80112e4:	08019ae8 	.word	0x08019ae8
 80112e8:	08019a68 	.word	0x08019a68

080112ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b08c      	sub	sp, #48	; 0x30
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	60f8      	str	r0, [r7, #12]
 80112f4:	60b9      	str	r1, [r7, #8]
 80112f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80112f8:	2300      	movs	r3, #0
 80112fa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80112fc:	2301      	movs	r3, #1
 80112fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	685b      	ldr	r3, [r3, #4]
 8011304:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011306:	69fb      	ldr	r3, [r7, #28]
 8011308:	885b      	ldrh	r3, [r3, #2]
 801130a:	b29b      	uxth	r3, r3
 801130c:	4618      	mov	r0, r3
 801130e:	f7f6 f8bd 	bl	800748c <lwip_htons>
 8011312:	4603      	mov	r3, r0
 8011314:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011316:	69fb      	ldr	r3, [r7, #28]
 8011318:	781b      	ldrb	r3, [r3, #0]
 801131a:	f003 030f 	and.w	r3, r3, #15
 801131e:	b2db      	uxtb	r3, r3
 8011320:	009b      	lsls	r3, r3, #2
 8011322:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011324:	7e7b      	ldrb	r3, [r7, #25]
 8011326:	b29b      	uxth	r3, r3
 8011328:	8b7a      	ldrh	r2, [r7, #26]
 801132a:	429a      	cmp	r2, r3
 801132c:	d202      	bcs.n	8011334 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801132e:	f04f 33ff 	mov.w	r3, #4294967295
 8011332:	e135      	b.n	80115a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011334:	7e7b      	ldrb	r3, [r7, #25]
 8011336:	b29b      	uxth	r3, r3
 8011338:	8b7a      	ldrh	r2, [r7, #26]
 801133a:	1ad3      	subs	r3, r2, r3
 801133c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801133e:	69fb      	ldr	r3, [r7, #28]
 8011340:	88db      	ldrh	r3, [r3, #6]
 8011342:	b29b      	uxth	r3, r3
 8011344:	4618      	mov	r0, r3
 8011346:	f7f6 f8a1 	bl	800748c <lwip_htons>
 801134a:	4603      	mov	r3, r0
 801134c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011350:	b29b      	uxth	r3, r3
 8011352:	00db      	lsls	r3, r3, #3
 8011354:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801135e:	2200      	movs	r2, #0
 8011360:	701a      	strb	r2, [r3, #0]
 8011362:	2200      	movs	r2, #0
 8011364:	705a      	strb	r2, [r3, #1]
 8011366:	2200      	movs	r2, #0
 8011368:	709a      	strb	r2, [r3, #2]
 801136a:	2200      	movs	r2, #0
 801136c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801136e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011370:	8afa      	ldrh	r2, [r7, #22]
 8011372:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011374:	8afa      	ldrh	r2, [r7, #22]
 8011376:	8b7b      	ldrh	r3, [r7, #26]
 8011378:	4413      	add	r3, r2
 801137a:	b29a      	uxth	r2, r3
 801137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011382:	88db      	ldrh	r3, [r3, #6]
 8011384:	b29b      	uxth	r3, r3
 8011386:	8afa      	ldrh	r2, [r7, #22]
 8011388:	429a      	cmp	r2, r3
 801138a:	d902      	bls.n	8011392 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801138c:	f04f 33ff 	mov.w	r3, #4294967295
 8011390:	e106      	b.n	80115a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	685b      	ldr	r3, [r3, #4]
 8011396:	627b      	str	r3, [r7, #36]	; 0x24
 8011398:	e068      	b.n	801146c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80113a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a2:	889b      	ldrh	r3, [r3, #4]
 80113a4:	b29a      	uxth	r2, r3
 80113a6:	693b      	ldr	r3, [r7, #16]
 80113a8:	889b      	ldrh	r3, [r3, #4]
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	429a      	cmp	r2, r3
 80113ae:	d235      	bcs.n	801141c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80113b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80113b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d020      	beq.n	80113fe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80113bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113be:	889b      	ldrh	r3, [r3, #4]
 80113c0:	b29a      	uxth	r2, r3
 80113c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c4:	88db      	ldrh	r3, [r3, #6]
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	429a      	cmp	r2, r3
 80113ca:	d307      	bcc.n	80113dc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80113cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ce:	88db      	ldrh	r3, [r3, #6]
 80113d0:	b29a      	uxth	r2, r3
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	889b      	ldrh	r3, [r3, #4]
 80113d6:	b29b      	uxth	r3, r3
 80113d8:	429a      	cmp	r2, r3
 80113da:	d902      	bls.n	80113e2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80113dc:	f04f 33ff 	mov.w	r3, #4294967295
 80113e0:	e0de      	b.n	80115a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80113e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e4:	68ba      	ldr	r2, [r7, #8]
 80113e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80113e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ea:	88db      	ldrh	r3, [r3, #6]
 80113ec:	b29a      	uxth	r2, r3
 80113ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f0:	889b      	ldrh	r3, [r3, #4]
 80113f2:	b29b      	uxth	r3, r3
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d03d      	beq.n	8011474 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80113f8:	2300      	movs	r3, #0
 80113fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80113fc:	e03a      	b.n	8011474 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80113fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011400:	88db      	ldrh	r3, [r3, #6]
 8011402:	b29a      	uxth	r2, r3
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	889b      	ldrh	r3, [r3, #4]
 8011408:	b29b      	uxth	r3, r3
 801140a:	429a      	cmp	r2, r3
 801140c:	d902      	bls.n	8011414 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801140e:	f04f 33ff 	mov.w	r3, #4294967295
 8011412:	e0c5      	b.n	80115a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	68ba      	ldr	r2, [r7, #8]
 8011418:	605a      	str	r2, [r3, #4]
      break;
 801141a:	e02b      	b.n	8011474 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801141c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801141e:	889b      	ldrh	r3, [r3, #4]
 8011420:	b29a      	uxth	r2, r3
 8011422:	693b      	ldr	r3, [r7, #16]
 8011424:	889b      	ldrh	r3, [r3, #4]
 8011426:	b29b      	uxth	r3, r3
 8011428:	429a      	cmp	r2, r3
 801142a:	d102      	bne.n	8011432 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801142c:	f04f 33ff 	mov.w	r3, #4294967295
 8011430:	e0b6      	b.n	80115a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011434:	889b      	ldrh	r3, [r3, #4]
 8011436:	b29a      	uxth	r2, r3
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	88db      	ldrh	r3, [r3, #6]
 801143c:	b29b      	uxth	r3, r3
 801143e:	429a      	cmp	r2, r3
 8011440:	d202      	bcs.n	8011448 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011442:	f04f 33ff 	mov.w	r3, #4294967295
 8011446:	e0ab      	b.n	80115a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801144a:	2b00      	cmp	r3, #0
 801144c:	d009      	beq.n	8011462 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801144e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011450:	88db      	ldrh	r3, [r3, #6]
 8011452:	b29a      	uxth	r2, r3
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	889b      	ldrh	r3, [r3, #4]
 8011458:	b29b      	uxth	r3, r3
 801145a:	429a      	cmp	r2, r3
 801145c:	d001      	beq.n	8011462 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801145e:	2300      	movs	r3, #0
 8011460:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801146e:	2b00      	cmp	r3, #0
 8011470:	d193      	bne.n	801139a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011472:	e000      	b.n	8011476 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011474:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011478:	2b00      	cmp	r3, #0
 801147a:	d12d      	bne.n	80114d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801147c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801147e:	2b00      	cmp	r3, #0
 8011480:	d01c      	beq.n	80114bc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011484:	88db      	ldrh	r3, [r3, #6]
 8011486:	b29a      	uxth	r2, r3
 8011488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148a:	889b      	ldrh	r3, [r3, #4]
 801148c:	b29b      	uxth	r3, r3
 801148e:	429a      	cmp	r2, r3
 8011490:	d906      	bls.n	80114a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011492:	4b45      	ldr	r3, [pc, #276]	; (80115a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011494:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011498:	4944      	ldr	r1, [pc, #272]	; (80115ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801149a:	4845      	ldr	r0, [pc, #276]	; (80115b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801149c:	f003 fa02 	bl	80148a4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80114a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a2:	68ba      	ldr	r2, [r7, #8]
 80114a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80114a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a8:	88db      	ldrh	r3, [r3, #6]
 80114aa:	b29a      	uxth	r2, r3
 80114ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ae:	889b      	ldrh	r3, [r3, #4]
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	429a      	cmp	r2, r3
 80114b4:	d010      	beq.n	80114d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80114b6:	2300      	movs	r3, #0
 80114b8:	623b      	str	r3, [r7, #32]
 80114ba:	e00d      	b.n	80114d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	685b      	ldr	r3, [r3, #4]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d006      	beq.n	80114d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80114c4:	4b38      	ldr	r3, [pc, #224]	; (80115a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80114c6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80114ca:	493a      	ldr	r1, [pc, #232]	; (80115b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80114cc:	4838      	ldr	r0, [pc, #224]	; (80115b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80114ce:	f003 f9e9 	bl	80148a4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	68ba      	ldr	r2, [r7, #8]
 80114d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d105      	bne.n	80114ea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	7f9b      	ldrb	r3, [r3, #30]
 80114e2:	f003 0301 	and.w	r3, r3, #1
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d059      	beq.n	801159e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80114ea:	6a3b      	ldr	r3, [r7, #32]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d04f      	beq.n	8011590 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	685b      	ldr	r3, [r3, #4]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d006      	beq.n	8011506 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	889b      	ldrh	r3, [r3, #4]
 8011500:	b29b      	uxth	r3, r3
 8011502:	2b00      	cmp	r3, #0
 8011504:	d002      	beq.n	801150c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011506:	2300      	movs	r3, #0
 8011508:	623b      	str	r3, [r7, #32]
 801150a:	e041      	b.n	8011590 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011516:	e012      	b.n	801153e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801151a:	685b      	ldr	r3, [r3, #4]
 801151c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011520:	88db      	ldrh	r3, [r3, #6]
 8011522:	b29a      	uxth	r2, r3
 8011524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011526:	889b      	ldrh	r3, [r3, #4]
 8011528:	b29b      	uxth	r3, r3
 801152a:	429a      	cmp	r2, r3
 801152c:	d002      	beq.n	8011534 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801152e:	2300      	movs	r3, #0
 8011530:	623b      	str	r3, [r7, #32]
            break;
 8011532:	e007      	b.n	8011544 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011536:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011540:	2b00      	cmp	r3, #0
 8011542:	d1e9      	bne.n	8011518 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011544:	6a3b      	ldr	r3, [r7, #32]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d022      	beq.n	8011590 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d106      	bne.n	8011560 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011552:	4b15      	ldr	r3, [pc, #84]	; (80115a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011554:	f240 12df 	movw	r2, #479	; 0x1df
 8011558:	4917      	ldr	r1, [pc, #92]	; (80115b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801155a:	4815      	ldr	r0, [pc, #84]	; (80115b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801155c:	f003 f9a2 	bl	80148a4 <iprintf>
          LWIP_ASSERT("sanity check",
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	685b      	ldr	r3, [r3, #4]
 8011566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011568:	429a      	cmp	r2, r3
 801156a:	d106      	bne.n	801157a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801156c:	4b0e      	ldr	r3, [pc, #56]	; (80115a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801156e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011572:	4911      	ldr	r1, [pc, #68]	; (80115b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011574:	480e      	ldr	r0, [pc, #56]	; (80115b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011576:	f003 f995 	bl	80148a4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d006      	beq.n	8011590 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011582:	4b09      	ldr	r3, [pc, #36]	; (80115a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011584:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8011588:	490c      	ldr	r1, [pc, #48]	; (80115bc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801158a:	4809      	ldr	r0, [pc, #36]	; (80115b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801158c:	f003 f98a 	bl	80148a4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011590:	6a3b      	ldr	r3, [r7, #32]
 8011592:	2b00      	cmp	r3, #0
 8011594:	bf14      	ite	ne
 8011596:	2301      	movne	r3, #1
 8011598:	2300      	moveq	r3, #0
 801159a:	b2db      	uxtb	r3, r3
 801159c:	e000      	b.n	80115a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801159e:	2300      	movs	r3, #0
}
 80115a0:	4618      	mov	r0, r3
 80115a2:	3730      	adds	r7, #48	; 0x30
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	08019a20 	.word	0x08019a20
 80115ac:	08019b04 	.word	0x08019b04
 80115b0:	08019a68 	.word	0x08019a68
 80115b4:	08019b24 	.word	0x08019b24
 80115b8:	08019b5c 	.word	0x08019b5c
 80115bc:	08019b6c 	.word	0x08019b6c

080115c0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b08e      	sub	sp, #56	; 0x38
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80115ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d0:	781b      	ldrb	r3, [r3, #0]
 80115d2:	f003 030f 	and.w	r3, r3, #15
 80115d6:	b2db      	uxtb	r3, r3
 80115d8:	009b      	lsls	r3, r3, #2
 80115da:	b2db      	uxtb	r3, r3
 80115dc:	2b14      	cmp	r3, #20
 80115de:	f040 8171 	bne.w	80118c4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80115e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e4:	88db      	ldrh	r3, [r3, #6]
 80115e6:	b29b      	uxth	r3, r3
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7f5 ff4f 	bl	800748c <lwip_htons>
 80115ee:	4603      	mov	r3, r0
 80115f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80115f4:	b29b      	uxth	r3, r3
 80115f6:	00db      	lsls	r3, r3, #3
 80115f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80115fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115fc:	885b      	ldrh	r3, [r3, #2]
 80115fe:	b29b      	uxth	r3, r3
 8011600:	4618      	mov	r0, r3
 8011602:	f7f5 ff43 	bl	800748c <lwip_htons>
 8011606:	4603      	mov	r3, r0
 8011608:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801160a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801160c:	781b      	ldrb	r3, [r3, #0]
 801160e:	f003 030f 	and.w	r3, r3, #15
 8011612:	b2db      	uxtb	r3, r3
 8011614:	009b      	lsls	r3, r3, #2
 8011616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801161a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801161e:	b29b      	uxth	r3, r3
 8011620:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011622:	429a      	cmp	r2, r3
 8011624:	f0c0 8150 	bcc.w	80118c8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011628:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801162c:	b29b      	uxth	r3, r3
 801162e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011630:	1ad3      	subs	r3, r2, r3
 8011632:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f7f7 fb0f 	bl	8008c58 <pbuf_clen>
 801163a:	4603      	mov	r3, r0
 801163c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801163e:	4b8c      	ldr	r3, [pc, #560]	; (8011870 <ip4_reass+0x2b0>)
 8011640:	881b      	ldrh	r3, [r3, #0]
 8011642:	461a      	mov	r2, r3
 8011644:	8c3b      	ldrh	r3, [r7, #32]
 8011646:	4413      	add	r3, r2
 8011648:	2b0a      	cmp	r3, #10
 801164a:	dd10      	ble.n	801166e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801164c:	8c3b      	ldrh	r3, [r7, #32]
 801164e:	4619      	mov	r1, r3
 8011650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011652:	f7ff fd81 	bl	8011158 <ip_reass_remove_oldest_datagram>
 8011656:	4603      	mov	r3, r0
 8011658:	2b00      	cmp	r3, #0
 801165a:	f000 8137 	beq.w	80118cc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801165e:	4b84      	ldr	r3, [pc, #528]	; (8011870 <ip4_reass+0x2b0>)
 8011660:	881b      	ldrh	r3, [r3, #0]
 8011662:	461a      	mov	r2, r3
 8011664:	8c3b      	ldrh	r3, [r7, #32]
 8011666:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011668:	2b0a      	cmp	r3, #10
 801166a:	f300 812f 	bgt.w	80118cc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801166e:	4b81      	ldr	r3, [pc, #516]	; (8011874 <ip4_reass+0x2b4>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	633b      	str	r3, [r7, #48]	; 0x30
 8011674:	e015      	b.n	80116a2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011678:	695a      	ldr	r2, [r3, #20]
 801167a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801167c:	68db      	ldr	r3, [r3, #12]
 801167e:	429a      	cmp	r2, r3
 8011680:	d10c      	bne.n	801169c <ip4_reass+0xdc>
 8011682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011684:	699a      	ldr	r2, [r3, #24]
 8011686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011688:	691b      	ldr	r3, [r3, #16]
 801168a:	429a      	cmp	r2, r3
 801168c:	d106      	bne.n	801169c <ip4_reass+0xdc>
 801168e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011690:	899a      	ldrh	r2, [r3, #12]
 8011692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011694:	889b      	ldrh	r3, [r3, #4]
 8011696:	b29b      	uxth	r3, r3
 8011698:	429a      	cmp	r2, r3
 801169a:	d006      	beq.n	80116aa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801169c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	633b      	str	r3, [r7, #48]	; 0x30
 80116a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d1e6      	bne.n	8011676 <ip4_reass+0xb6>
 80116a8:	e000      	b.n	80116ac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80116aa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80116ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d109      	bne.n	80116c6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80116b2:	8c3b      	ldrh	r3, [r7, #32]
 80116b4:	4619      	mov	r1, r3
 80116b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116b8:	f7ff fdb0 	bl	801121c <ip_reass_enqueue_new_datagram>
 80116bc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80116be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d11c      	bne.n	80116fe <ip4_reass+0x13e>
      goto nullreturn;
 80116c4:	e105      	b.n	80118d2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80116c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c8:	88db      	ldrh	r3, [r3, #6]
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	4618      	mov	r0, r3
 80116ce:	f7f5 fedd 	bl	800748c <lwip_htons>
 80116d2:	4603      	mov	r3, r0
 80116d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d110      	bne.n	80116fe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80116dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116de:	89db      	ldrh	r3, [r3, #14]
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7f5 fed3 	bl	800748c <lwip_htons>
 80116e6:	4603      	mov	r3, r0
 80116e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d006      	beq.n	80116fe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80116f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f2:	3308      	adds	r3, #8
 80116f4:	2214      	movs	r2, #20
 80116f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80116f8:	4618      	mov	r0, r3
 80116fa:	f003 fb4c 	bl	8014d96 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80116fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011700:	88db      	ldrh	r3, [r3, #6]
 8011702:	b29b      	uxth	r3, r3
 8011704:	f003 0320 	and.w	r3, r3, #32
 8011708:	2b00      	cmp	r3, #0
 801170a:	bf0c      	ite	eq
 801170c:	2301      	moveq	r3, #1
 801170e:	2300      	movne	r3, #0
 8011710:	b2db      	uxtb	r3, r3
 8011712:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011714:	69fb      	ldr	r3, [r7, #28]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d00e      	beq.n	8011738 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801171a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801171c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801171e:	4413      	add	r3, r2
 8011720:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011722:	8b7a      	ldrh	r2, [r7, #26]
 8011724:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011726:	429a      	cmp	r2, r3
 8011728:	f0c0 80a0 	bcc.w	801186c <ip4_reass+0x2ac>
 801172c:	8b7b      	ldrh	r3, [r7, #26]
 801172e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011732:	4293      	cmp	r3, r2
 8011734:	f200 809a 	bhi.w	801186c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011738:	69fa      	ldr	r2, [r7, #28]
 801173a:	6879      	ldr	r1, [r7, #4]
 801173c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801173e:	f7ff fdd5 	bl	80112ec <ip_reass_chain_frag_into_datagram_and_validate>
 8011742:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801174a:	f000 809b 	beq.w	8011884 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801174e:	4b48      	ldr	r3, [pc, #288]	; (8011870 <ip4_reass+0x2b0>)
 8011750:	881a      	ldrh	r2, [r3, #0]
 8011752:	8c3b      	ldrh	r3, [r7, #32]
 8011754:	4413      	add	r3, r2
 8011756:	b29a      	uxth	r2, r3
 8011758:	4b45      	ldr	r3, [pc, #276]	; (8011870 <ip4_reass+0x2b0>)
 801175a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801175c:	69fb      	ldr	r3, [r7, #28]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d00d      	beq.n	801177e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011762:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011764:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011766:	4413      	add	r3, r2
 8011768:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801176a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801176c:	8a7a      	ldrh	r2, [r7, #18]
 801176e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011772:	7f9b      	ldrb	r3, [r3, #30]
 8011774:	f043 0301 	orr.w	r3, r3, #1
 8011778:	b2da      	uxtb	r2, r3
 801177a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801177c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	2b01      	cmp	r3, #1
 8011782:	d171      	bne.n	8011868 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011786:	8b9b      	ldrh	r3, [r3, #28]
 8011788:	3314      	adds	r3, #20
 801178a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801178c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801178e:	685b      	ldr	r3, [r3, #4]
 8011790:	685b      	ldr	r3, [r3, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801179e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a0:	3308      	adds	r3, #8
 80117a2:	2214      	movs	r2, #20
 80117a4:	4619      	mov	r1, r3
 80117a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80117a8:	f003 faf5 	bl	8014d96 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80117ac:	8a3b      	ldrh	r3, [r7, #16]
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7f5 fe6c 	bl	800748c <lwip_htons>
 80117b4:	4603      	mov	r3, r0
 80117b6:	461a      	mov	r2, r3
 80117b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80117bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117be:	2200      	movs	r2, #0
 80117c0:	719a      	strb	r2, [r3, #6]
 80117c2:	2200      	movs	r2, #0
 80117c4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80117c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c8:	2200      	movs	r2, #0
 80117ca:	729a      	strb	r2, [r3, #10]
 80117cc:	2200      	movs	r2, #0
 80117ce:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80117d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80117d6:	e00d      	b.n	80117f4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80117d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117da:	685b      	ldr	r3, [r3, #4]
 80117dc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80117de:	2114      	movs	r1, #20
 80117e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80117e2:	f7f7 f92b 	bl	8008a3c <pbuf_remove_header>
      pbuf_cat(p, r);
 80117e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f7f7 fa6f 	bl	8008ccc <pbuf_cat>
      r = iprh->next_pbuf;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80117f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d1ee      	bne.n	80117d8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80117fa:	4b1e      	ldr	r3, [pc, #120]	; (8011874 <ip4_reass+0x2b4>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011800:	429a      	cmp	r2, r3
 8011802:	d102      	bne.n	801180a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011804:	2300      	movs	r3, #0
 8011806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011808:	e010      	b.n	801182c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801180a:	4b1a      	ldr	r3, [pc, #104]	; (8011874 <ip4_reass+0x2b4>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011810:	e007      	b.n	8011822 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011818:	429a      	cmp	r2, r3
 801181a:	d006      	beq.n	801182a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011824:	2b00      	cmp	r3, #0
 8011826:	d1f4      	bne.n	8011812 <ip4_reass+0x252>
 8011828:	e000      	b.n	801182c <ip4_reass+0x26c>
          break;
 801182a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801182c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801182e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011830:	f7ff fd2e 	bl	8011290 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f7f7 fa0f 	bl	8008c58 <pbuf_clen>
 801183a:	4603      	mov	r3, r0
 801183c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801183e:	4b0c      	ldr	r3, [pc, #48]	; (8011870 <ip4_reass+0x2b0>)
 8011840:	881b      	ldrh	r3, [r3, #0]
 8011842:	8c3a      	ldrh	r2, [r7, #32]
 8011844:	429a      	cmp	r2, r3
 8011846:	d906      	bls.n	8011856 <ip4_reass+0x296>
 8011848:	4b0b      	ldr	r3, [pc, #44]	; (8011878 <ip4_reass+0x2b8>)
 801184a:	f240 229b 	movw	r2, #667	; 0x29b
 801184e:	490b      	ldr	r1, [pc, #44]	; (801187c <ip4_reass+0x2bc>)
 8011850:	480b      	ldr	r0, [pc, #44]	; (8011880 <ip4_reass+0x2c0>)
 8011852:	f003 f827 	bl	80148a4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011856:	4b06      	ldr	r3, [pc, #24]	; (8011870 <ip4_reass+0x2b0>)
 8011858:	881a      	ldrh	r2, [r3, #0]
 801185a:	8c3b      	ldrh	r3, [r7, #32]
 801185c:	1ad3      	subs	r3, r2, r3
 801185e:	b29a      	uxth	r2, r3
 8011860:	4b03      	ldr	r3, [pc, #12]	; (8011870 <ip4_reass+0x2b0>)
 8011862:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	e038      	b.n	80118da <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011868:	2300      	movs	r3, #0
 801186a:	e036      	b.n	80118da <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801186c:	bf00      	nop
 801186e:	e00a      	b.n	8011886 <ip4_reass+0x2c6>
 8011870:	200009f4 	.word	0x200009f4
 8011874:	200009f0 	.word	0x200009f0
 8011878:	08019a20 	.word	0x08019a20
 801187c:	08019b90 	.word	0x08019b90
 8011880:	08019a68 	.word	0x08019a68
    goto nullreturn_ipr;
 8011884:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011888:	2b00      	cmp	r3, #0
 801188a:	d106      	bne.n	801189a <ip4_reass+0x2da>
 801188c:	4b15      	ldr	r3, [pc, #84]	; (80118e4 <ip4_reass+0x324>)
 801188e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011892:	4915      	ldr	r1, [pc, #84]	; (80118e8 <ip4_reass+0x328>)
 8011894:	4815      	ldr	r0, [pc, #84]	; (80118ec <ip4_reass+0x32c>)
 8011896:	f003 f805 	bl	80148a4 <iprintf>
  if (ipr->p == NULL) {
 801189a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d116      	bne.n	80118d0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80118a2:	4b13      	ldr	r3, [pc, #76]	; (80118f0 <ip4_reass+0x330>)
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118a8:	429a      	cmp	r2, r3
 80118aa:	d006      	beq.n	80118ba <ip4_reass+0x2fa>
 80118ac:	4b0d      	ldr	r3, [pc, #52]	; (80118e4 <ip4_reass+0x324>)
 80118ae:	f240 22ab 	movw	r2, #683	; 0x2ab
 80118b2:	4910      	ldr	r1, [pc, #64]	; (80118f4 <ip4_reass+0x334>)
 80118b4:	480d      	ldr	r0, [pc, #52]	; (80118ec <ip4_reass+0x32c>)
 80118b6:	f002 fff5 	bl	80148a4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80118ba:	2100      	movs	r1, #0
 80118bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118be:	f7ff fce7 	bl	8011290 <ip_reass_dequeue_datagram>
 80118c2:	e006      	b.n	80118d2 <ip4_reass+0x312>
    goto nullreturn;
 80118c4:	bf00      	nop
 80118c6:	e004      	b.n	80118d2 <ip4_reass+0x312>
    goto nullreturn;
 80118c8:	bf00      	nop
 80118ca:	e002      	b.n	80118d2 <ip4_reass+0x312>
      goto nullreturn;
 80118cc:	bf00      	nop
 80118ce:	e000      	b.n	80118d2 <ip4_reass+0x312>
  }

nullreturn:
 80118d0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f7f7 f938 	bl	8008b48 <pbuf_free>
  return NULL;
 80118d8:	2300      	movs	r3, #0
}
 80118da:	4618      	mov	r0, r3
 80118dc:	3738      	adds	r7, #56	; 0x38
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}
 80118e2:	bf00      	nop
 80118e4:	08019a20 	.word	0x08019a20
 80118e8:	08019bac 	.word	0x08019bac
 80118ec:	08019a68 	.word	0x08019a68
 80118f0:	200009f0 	.word	0x200009f0
 80118f4:	08019bb8 	.word	0x08019bb8

080118f8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80118fc:	2005      	movs	r0, #5
 80118fe:	f7f6 fa3d 	bl	8007d7c <memp_malloc>
 8011902:	4603      	mov	r3, r0
}
 8011904:	4618      	mov	r0, r3
 8011906:	bd80      	pop	{r7, pc}

08011908 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d106      	bne.n	8011924 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011916:	4b07      	ldr	r3, [pc, #28]	; (8011934 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011918:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801191c:	4906      	ldr	r1, [pc, #24]	; (8011938 <ip_frag_free_pbuf_custom_ref+0x30>)
 801191e:	4807      	ldr	r0, [pc, #28]	; (801193c <ip_frag_free_pbuf_custom_ref+0x34>)
 8011920:	f002 ffc0 	bl	80148a4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011924:	6879      	ldr	r1, [r7, #4]
 8011926:	2005      	movs	r0, #5
 8011928:	f7f6 fa98 	bl	8007e5c <memp_free>
}
 801192c:	bf00      	nop
 801192e:	3708      	adds	r7, #8
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}
 8011934:	08019a20 	.word	0x08019a20
 8011938:	08019bd8 	.word	0x08019bd8
 801193c:	08019a68 	.word	0x08019a68

08011940 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b084      	sub	sp, #16
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d106      	bne.n	8011960 <ipfrag_free_pbuf_custom+0x20>
 8011952:	4b11      	ldr	r3, [pc, #68]	; (8011998 <ipfrag_free_pbuf_custom+0x58>)
 8011954:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011958:	4910      	ldr	r1, [pc, #64]	; (801199c <ipfrag_free_pbuf_custom+0x5c>)
 801195a:	4811      	ldr	r0, [pc, #68]	; (80119a0 <ipfrag_free_pbuf_custom+0x60>)
 801195c:	f002 ffa2 	bl	80148a4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011960:	68fa      	ldr	r2, [r7, #12]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	429a      	cmp	r2, r3
 8011966:	d006      	beq.n	8011976 <ipfrag_free_pbuf_custom+0x36>
 8011968:	4b0b      	ldr	r3, [pc, #44]	; (8011998 <ipfrag_free_pbuf_custom+0x58>)
 801196a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801196e:	490d      	ldr	r1, [pc, #52]	; (80119a4 <ipfrag_free_pbuf_custom+0x64>)
 8011970:	480b      	ldr	r0, [pc, #44]	; (80119a0 <ipfrag_free_pbuf_custom+0x60>)
 8011972:	f002 ff97 	bl	80148a4 <iprintf>
  if (pcr->original != NULL) {
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	695b      	ldr	r3, [r3, #20]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d004      	beq.n	8011988 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	695b      	ldr	r3, [r3, #20]
 8011982:	4618      	mov	r0, r3
 8011984:	f7f7 f8e0 	bl	8008b48 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011988:	68f8      	ldr	r0, [r7, #12]
 801198a:	f7ff ffbd 	bl	8011908 <ip_frag_free_pbuf_custom_ref>
}
 801198e:	bf00      	nop
 8011990:	3710      	adds	r7, #16
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	08019a20 	.word	0x08019a20
 801199c:	08019be4 	.word	0x08019be4
 80119a0:	08019a68 	.word	0x08019a68
 80119a4:	08019bf0 	.word	0x08019bf0

080119a8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b094      	sub	sp, #80	; 0x50
 80119ac:	af02      	add	r7, sp, #8
 80119ae:	60f8      	str	r0, [r7, #12]
 80119b0:	60b9      	str	r1, [r7, #8]
 80119b2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80119b4:	2300      	movs	r3, #0
 80119b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80119be:	3b14      	subs	r3, #20
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	da00      	bge.n	80119c6 <ip4_frag+0x1e>
 80119c4:	3307      	adds	r3, #7
 80119c6:	10db      	asrs	r3, r3, #3
 80119c8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80119ca:	2314      	movs	r3, #20
 80119cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	685b      	ldr	r3, [r3, #4]
 80119d2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80119d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80119d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	f003 030f 	and.w	r3, r3, #15
 80119e0:	b2db      	uxtb	r3, r3
 80119e2:	009b      	lsls	r3, r3, #2
 80119e4:	b2db      	uxtb	r3, r3
 80119e6:	2b14      	cmp	r3, #20
 80119e8:	d002      	beq.n	80119f0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80119ea:	f06f 0305 	mvn.w	r3, #5
 80119ee:	e110      	b.n	8011c12 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	895b      	ldrh	r3, [r3, #10]
 80119f4:	2b13      	cmp	r3, #19
 80119f6:	d809      	bhi.n	8011a0c <ip4_frag+0x64>
 80119f8:	4b88      	ldr	r3, [pc, #544]	; (8011c1c <ip4_frag+0x274>)
 80119fa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80119fe:	4988      	ldr	r1, [pc, #544]	; (8011c20 <ip4_frag+0x278>)
 8011a00:	4888      	ldr	r0, [pc, #544]	; (8011c24 <ip4_frag+0x27c>)
 8011a02:	f002 ff4f 	bl	80148a4 <iprintf>
 8011a06:	f06f 0305 	mvn.w	r3, #5
 8011a0a:	e102      	b.n	8011c12 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a0e:	88db      	ldrh	r3, [r3, #6]
 8011a10:	b29b      	uxth	r3, r3
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7f5 fd3a 	bl	800748c <lwip_htons>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011a1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011a1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011a22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011a26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011a2c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	891b      	ldrh	r3, [r3, #8]
 8011a32:	3b14      	subs	r3, #20
 8011a34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011a38:	e0e1      	b.n	8011bfe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011a3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011a3c:	00db      	lsls	r3, r3, #3
 8011a3e:	b29b      	uxth	r3, r3
 8011a40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a44:	4293      	cmp	r3, r2
 8011a46:	bf28      	it	cs
 8011a48:	4613      	movcs	r3, r2
 8011a4a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011a4c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a50:	2114      	movs	r1, #20
 8011a52:	200e      	movs	r0, #14
 8011a54:	f7f6 fd94 	bl	8008580 <pbuf_alloc>
 8011a58:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8011a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	f000 80d5 	beq.w	8011c0c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a64:	895b      	ldrh	r3, [r3, #10]
 8011a66:	2b13      	cmp	r3, #19
 8011a68:	d806      	bhi.n	8011a78 <ip4_frag+0xd0>
 8011a6a:	4b6c      	ldr	r3, [pc, #432]	; (8011c1c <ip4_frag+0x274>)
 8011a6c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8011a70:	496d      	ldr	r1, [pc, #436]	; (8011c28 <ip4_frag+0x280>)
 8011a72:	486c      	ldr	r0, [pc, #432]	; (8011c24 <ip4_frag+0x27c>)
 8011a74:	f002 ff16 	bl	80148a4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	2214      	movs	r2, #20
 8011a7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011a80:	4618      	mov	r0, r3
 8011a82:	f003 f988 	bl	8014d96 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a88:	685b      	ldr	r3, [r3, #4]
 8011a8a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011a8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011a8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011a92:	e064      	b.n	8011b5e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	895a      	ldrh	r2, [r3, #10]
 8011a98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011a9a:	1ad3      	subs	r3, r2, r3
 8011a9c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	895b      	ldrh	r3, [r3, #10]
 8011aa2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d906      	bls.n	8011ab6 <ip4_frag+0x10e>
 8011aa8:	4b5c      	ldr	r3, [pc, #368]	; (8011c1c <ip4_frag+0x274>)
 8011aaa:	f240 322d 	movw	r2, #813	; 0x32d
 8011aae:	495f      	ldr	r1, [pc, #380]	; (8011c2c <ip4_frag+0x284>)
 8011ab0:	485c      	ldr	r0, [pc, #368]	; (8011c24 <ip4_frag+0x27c>)
 8011ab2:	f002 fef7 	bl	80148a4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011ab6:	8bfa      	ldrh	r2, [r7, #30]
 8011ab8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011abc:	4293      	cmp	r3, r2
 8011abe:	bf28      	it	cs
 8011ac0:	4613      	movcs	r3, r2
 8011ac2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011ac6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d105      	bne.n	8011ada <ip4_frag+0x132>
        poff = 0;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	60fb      	str	r3, [r7, #12]
        continue;
 8011ad8:	e041      	b.n	8011b5e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011ada:	f7ff ff0d 	bl	80118f8 <ip_frag_alloc_pbuf_custom_ref>
 8011ade:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011ae0:	69bb      	ldr	r3, [r7, #24]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d103      	bne.n	8011aee <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ae8:	f7f7 f82e 	bl	8008b48 <pbuf_free>
        goto memerr;
 8011aec:	e08f      	b.n	8011c0e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011aee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011af4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011af6:	4413      	add	r3, r2
 8011af8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011afc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011b00:	9201      	str	r2, [sp, #4]
 8011b02:	9300      	str	r3, [sp, #0]
 8011b04:	4603      	mov	r3, r0
 8011b06:	2241      	movs	r2, #65	; 0x41
 8011b08:	2000      	movs	r0, #0
 8011b0a:	f7f6 fe63 	bl	80087d4 <pbuf_alloced_custom>
 8011b0e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d106      	bne.n	8011b24 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011b16:	69b8      	ldr	r0, [r7, #24]
 8011b18:	f7ff fef6 	bl	8011908 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011b1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b1e:	f7f7 f813 	bl	8008b48 <pbuf_free>
        goto memerr;
 8011b22:	e074      	b.n	8011c0e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011b24:	68f8      	ldr	r0, [r7, #12]
 8011b26:	f7f7 f8af 	bl	8008c88 <pbuf_ref>
      pcr->original = p;
 8011b2a:	69bb      	ldr	r3, [r7, #24]
 8011b2c:	68fa      	ldr	r2, [r7, #12]
 8011b2e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011b30:	69bb      	ldr	r3, [r7, #24]
 8011b32:	4a3f      	ldr	r2, [pc, #252]	; (8011c30 <ip4_frag+0x288>)
 8011b34:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011b36:	6979      	ldr	r1, [r7, #20]
 8011b38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b3a:	f7f7 f8c7 	bl	8008ccc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011b3e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011b42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011b46:	1ad3      	subs	r3, r2, r3
 8011b48:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011b4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d004      	beq.n	8011b5e <ip4_frag+0x1b6>
        poff = 0;
 8011b54:	2300      	movs	r3, #0
 8011b56:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011b5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d196      	bne.n	8011a94 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011b66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011b68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011b6c:	4413      	add	r3, r2
 8011b6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011b74:	f1a3 0213 	sub.w	r2, r3, #19
 8011b78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	bfcc      	ite	gt
 8011b80:	2301      	movgt	r3, #1
 8011b82:	2300      	movle	r3, #0
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011b88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b90:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011b92:	6a3b      	ldr	r3, [r7, #32]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d002      	beq.n	8011b9e <ip4_frag+0x1f6>
 8011b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d003      	beq.n	8011ba6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011b9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011ba0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011ba4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011ba6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7f5 fc6f 	bl	800748c <lwip_htons>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	461a      	mov	r2, r3
 8011bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011bb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011bb8:	3314      	adds	r3, #20
 8011bba:	b29b      	uxth	r3, r3
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7f5 fc65 	bl	800748c <lwip_htons>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bcc:	2200      	movs	r2, #0
 8011bce:	729a      	strb	r2, [r3, #10]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	695b      	ldr	r3, [r3, #20]
 8011bd8:	687a      	ldr	r2, [r7, #4]
 8011bda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011bdc:	68b8      	ldr	r0, [r7, #8]
 8011bde:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011be2:	f7f6 ffb1 	bl	8008b48 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011be6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011bea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011bec:	1ad3      	subs	r3, r2, r3
 8011bee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011bf2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011bf6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011bf8:	4413      	add	r3, r2
 8011bfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8011bfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	f47f af19 	bne.w	8011a3a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	e002      	b.n	8011c12 <ip4_frag+0x26a>
      goto memerr;
 8011c0c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	3748      	adds	r7, #72	; 0x48
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}
 8011c1a:	bf00      	nop
 8011c1c:	08019a20 	.word	0x08019a20
 8011c20:	08019bfc 	.word	0x08019bfc
 8011c24:	08019a68 	.word	0x08019a68
 8011c28:	08019c18 	.word	0x08019c18
 8011c2c:	08019c38 	.word	0x08019c38
 8011c30:	08011941 	.word	0x08011941

08011c34 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b086      	sub	sp, #24
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011c3e:	230e      	movs	r3, #14
 8011c40:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	895b      	ldrh	r3, [r3, #10]
 8011c46:	2b0e      	cmp	r3, #14
 8011c48:	d96e      	bls.n	8011d28 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	7bdb      	ldrb	r3, [r3, #15]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d106      	bne.n	8011c60 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011c58:	3301      	adds	r3, #1
 8011c5a:	b2da      	uxtb	r2, r3
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	685b      	ldr	r3, [r3, #4]
 8011c64:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	7b1a      	ldrb	r2, [r3, #12]
 8011c6a:	7b5b      	ldrb	r3, [r3, #13]
 8011c6c:	021b      	lsls	r3, r3, #8
 8011c6e:	4313      	orrs	r3, r2
 8011c70:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	781b      	ldrb	r3, [r3, #0]
 8011c76:	f003 0301 	and.w	r3, r3, #1
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d023      	beq.n	8011cc6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	781b      	ldrb	r3, [r3, #0]
 8011c82:	2b01      	cmp	r3, #1
 8011c84:	d10f      	bne.n	8011ca6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	785b      	ldrb	r3, [r3, #1]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d11b      	bne.n	8011cc6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011c92:	2b5e      	cmp	r3, #94	; 0x5e
 8011c94:	d117      	bne.n	8011cc6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	7b5b      	ldrb	r3, [r3, #13]
 8011c9a:	f043 0310 	orr.w	r3, r3, #16
 8011c9e:	b2da      	uxtb	r2, r3
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	735a      	strb	r2, [r3, #13]
 8011ca4:	e00f      	b.n	8011cc6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	2206      	movs	r2, #6
 8011caa:	4928      	ldr	r1, [pc, #160]	; (8011d4c <ethernet_input+0x118>)
 8011cac:	4618      	mov	r0, r3
 8011cae:	f002 ff3f 	bl	8014b30 <memcmp>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d106      	bne.n	8011cc6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	7b5b      	ldrb	r3, [r3, #13]
 8011cbc:	f043 0308 	orr.w	r3, r3, #8
 8011cc0:	b2da      	uxtb	r2, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011cc6:	89fb      	ldrh	r3, [r7, #14]
 8011cc8:	2b08      	cmp	r3, #8
 8011cca:	d003      	beq.n	8011cd4 <ethernet_input+0xa0>
 8011ccc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011cd0:	d014      	beq.n	8011cfc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011cd2:	e032      	b.n	8011d3a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011cda:	f003 0308 	and.w	r3, r3, #8
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d024      	beq.n	8011d2c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011ce2:	8afb      	ldrh	r3, [r7, #22]
 8011ce4:	4619      	mov	r1, r3
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	f7f6 fea8 	bl	8008a3c <pbuf_remove_header>
 8011cec:	4603      	mov	r3, r0
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d11e      	bne.n	8011d30 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011cf2:	6839      	ldr	r1, [r7, #0]
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f7fe fe91 	bl	8010a1c <ip4_input>
      break;
 8011cfa:	e013      	b.n	8011d24 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d02:	f003 0308 	and.w	r3, r3, #8
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d014      	beq.n	8011d34 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011d0a:	8afb      	ldrh	r3, [r7, #22]
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f7f6 fe94 	bl	8008a3c <pbuf_remove_header>
 8011d14:	4603      	mov	r3, r0
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d10e      	bne.n	8011d38 <ethernet_input+0x104>
        etharp_input(p, netif);
 8011d1a:	6839      	ldr	r1, [r7, #0]
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f7fe f831 	bl	800fd84 <etharp_input>
      break;
 8011d22:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011d24:	2300      	movs	r3, #0
 8011d26:	e00c      	b.n	8011d42 <ethernet_input+0x10e>
    goto free_and_return;
 8011d28:	bf00      	nop
 8011d2a:	e006      	b.n	8011d3a <ethernet_input+0x106>
        goto free_and_return;
 8011d2c:	bf00      	nop
 8011d2e:	e004      	b.n	8011d3a <ethernet_input+0x106>
        goto free_and_return;
 8011d30:	bf00      	nop
 8011d32:	e002      	b.n	8011d3a <ethernet_input+0x106>
        goto free_and_return;
 8011d34:	bf00      	nop
 8011d36:	e000      	b.n	8011d3a <ethernet_input+0x106>
        goto free_and_return;
 8011d38:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011d3a:	6878      	ldr	r0, [r7, #4]
 8011d3c:	f7f6 ff04 	bl	8008b48 <pbuf_free>
  return ERR_OK;
 8011d40:	2300      	movs	r3, #0
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3718      	adds	r7, #24
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}
 8011d4a:	bf00      	nop
 8011d4c:	0801a5d4 	.word	0x0801a5d4

08011d50 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b086      	sub	sp, #24
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	60f8      	str	r0, [r7, #12]
 8011d58:	60b9      	str	r1, [r7, #8]
 8011d5a:	607a      	str	r2, [r7, #4]
 8011d5c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011d5e:	8c3b      	ldrh	r3, [r7, #32]
 8011d60:	4618      	mov	r0, r3
 8011d62:	f7f5 fb93 	bl	800748c <lwip_htons>
 8011d66:	4603      	mov	r3, r0
 8011d68:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011d6a:	210e      	movs	r1, #14
 8011d6c:	68b8      	ldr	r0, [r7, #8]
 8011d6e:	f7f6 fe55 	bl	8008a1c <pbuf_add_header>
 8011d72:	4603      	mov	r3, r0
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d125      	bne.n	8011dc4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	685b      	ldr	r3, [r3, #4]
 8011d7c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	8afa      	ldrh	r2, [r7, #22]
 8011d82:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	2206      	movs	r2, #6
 8011d88:	6839      	ldr	r1, [r7, #0]
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f003 f803 	bl	8014d96 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	3306      	adds	r3, #6
 8011d94:	2206      	movs	r2, #6
 8011d96:	6879      	ldr	r1, [r7, #4]
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f002 fffc 	bl	8014d96 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011da4:	2b06      	cmp	r3, #6
 8011da6:	d006      	beq.n	8011db6 <ethernet_output+0x66>
 8011da8:	4b0a      	ldr	r3, [pc, #40]	; (8011dd4 <ethernet_output+0x84>)
 8011daa:	f44f 7299 	mov.w	r2, #306	; 0x132
 8011dae:	490a      	ldr	r1, [pc, #40]	; (8011dd8 <ethernet_output+0x88>)
 8011db0:	480a      	ldr	r0, [pc, #40]	; (8011ddc <ethernet_output+0x8c>)
 8011db2:	f002 fd77 	bl	80148a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	699b      	ldr	r3, [r3, #24]
 8011dba:	68b9      	ldr	r1, [r7, #8]
 8011dbc:	68f8      	ldr	r0, [r7, #12]
 8011dbe:	4798      	blx	r3
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	e002      	b.n	8011dca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011dc4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011dc6:	f06f 0301 	mvn.w	r3, #1
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3718      	adds	r7, #24
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}
 8011dd2:	bf00      	nop
 8011dd4:	08019c48 	.word	0x08019c48
 8011dd8:	08019c80 	.word	0x08019c80
 8011ddc:	08019cb4 	.word	0x08019cb4

08011de0 <sin>:
 8011de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011de2:	ec53 2b10 	vmov	r2, r3, d0
 8011de6:	4828      	ldr	r0, [pc, #160]	; (8011e88 <sin+0xa8>)
 8011de8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011dec:	4281      	cmp	r1, r0
 8011dee:	dc07      	bgt.n	8011e00 <sin+0x20>
 8011df0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8011e80 <sin+0xa0>
 8011df4:	2000      	movs	r0, #0
 8011df6:	b005      	add	sp, #20
 8011df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011dfc:	f000 b910 	b.w	8012020 <__kernel_sin>
 8011e00:	4822      	ldr	r0, [pc, #136]	; (8011e8c <sin+0xac>)
 8011e02:	4281      	cmp	r1, r0
 8011e04:	dd09      	ble.n	8011e1a <sin+0x3a>
 8011e06:	ee10 0a10 	vmov	r0, s0
 8011e0a:	4619      	mov	r1, r3
 8011e0c:	f7ee fa5c 	bl	80002c8 <__aeabi_dsub>
 8011e10:	ec41 0b10 	vmov	d0, r0, r1
 8011e14:	b005      	add	sp, #20
 8011e16:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e1a:	4668      	mov	r0, sp
 8011e1c:	f000 f9c0 	bl	80121a0 <__ieee754_rem_pio2>
 8011e20:	f000 0003 	and.w	r0, r0, #3
 8011e24:	2801      	cmp	r0, #1
 8011e26:	d00c      	beq.n	8011e42 <sin+0x62>
 8011e28:	2802      	cmp	r0, #2
 8011e2a:	d011      	beq.n	8011e50 <sin+0x70>
 8011e2c:	b9f0      	cbnz	r0, 8011e6c <sin+0x8c>
 8011e2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e32:	ed9d 0b00 	vldr	d0, [sp]
 8011e36:	2001      	movs	r0, #1
 8011e38:	f000 f8f2 	bl	8012020 <__kernel_sin>
 8011e3c:	ec51 0b10 	vmov	r0, r1, d0
 8011e40:	e7e6      	b.n	8011e10 <sin+0x30>
 8011e42:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e46:	ed9d 0b00 	vldr	d0, [sp]
 8011e4a:	f000 f821 	bl	8011e90 <__kernel_cos>
 8011e4e:	e7f5      	b.n	8011e3c <sin+0x5c>
 8011e50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e54:	ed9d 0b00 	vldr	d0, [sp]
 8011e58:	2001      	movs	r0, #1
 8011e5a:	f000 f8e1 	bl	8012020 <__kernel_sin>
 8011e5e:	ec53 2b10 	vmov	r2, r3, d0
 8011e62:	ee10 0a10 	vmov	r0, s0
 8011e66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011e6a:	e7d1      	b.n	8011e10 <sin+0x30>
 8011e6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e70:	ed9d 0b00 	vldr	d0, [sp]
 8011e74:	f000 f80c 	bl	8011e90 <__kernel_cos>
 8011e78:	e7f1      	b.n	8011e5e <sin+0x7e>
 8011e7a:	bf00      	nop
 8011e7c:	f3af 8000 	nop.w
	...
 8011e88:	3fe921fb 	.word	0x3fe921fb
 8011e8c:	7fefffff 	.word	0x7fefffff

08011e90 <__kernel_cos>:
 8011e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e94:	ec57 6b10 	vmov	r6, r7, d0
 8011e98:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011e9c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011ea0:	ed8d 1b00 	vstr	d1, [sp]
 8011ea4:	da07      	bge.n	8011eb6 <__kernel_cos+0x26>
 8011ea6:	ee10 0a10 	vmov	r0, s0
 8011eaa:	4639      	mov	r1, r7
 8011eac:	f7ee fe74 	bl	8000b98 <__aeabi_d2iz>
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	f000 8088 	beq.w	8011fc6 <__kernel_cos+0x136>
 8011eb6:	4632      	mov	r2, r6
 8011eb8:	463b      	mov	r3, r7
 8011eba:	4630      	mov	r0, r6
 8011ebc:	4639      	mov	r1, r7
 8011ebe:	f7ee fbbb 	bl	8000638 <__aeabi_dmul>
 8011ec2:	4b51      	ldr	r3, [pc, #324]	; (8012008 <__kernel_cos+0x178>)
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	4604      	mov	r4, r0
 8011ec8:	460d      	mov	r5, r1
 8011eca:	f7ee fbb5 	bl	8000638 <__aeabi_dmul>
 8011ece:	a340      	add	r3, pc, #256	; (adr r3, 8011fd0 <__kernel_cos+0x140>)
 8011ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed4:	4682      	mov	sl, r0
 8011ed6:	468b      	mov	fp, r1
 8011ed8:	4620      	mov	r0, r4
 8011eda:	4629      	mov	r1, r5
 8011edc:	f7ee fbac 	bl	8000638 <__aeabi_dmul>
 8011ee0:	a33d      	add	r3, pc, #244	; (adr r3, 8011fd8 <__kernel_cos+0x148>)
 8011ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee6:	f7ee f9f1 	bl	80002cc <__adddf3>
 8011eea:	4622      	mov	r2, r4
 8011eec:	462b      	mov	r3, r5
 8011eee:	f7ee fba3 	bl	8000638 <__aeabi_dmul>
 8011ef2:	a33b      	add	r3, pc, #236	; (adr r3, 8011fe0 <__kernel_cos+0x150>)
 8011ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef8:	f7ee f9e6 	bl	80002c8 <__aeabi_dsub>
 8011efc:	4622      	mov	r2, r4
 8011efe:	462b      	mov	r3, r5
 8011f00:	f7ee fb9a 	bl	8000638 <__aeabi_dmul>
 8011f04:	a338      	add	r3, pc, #224	; (adr r3, 8011fe8 <__kernel_cos+0x158>)
 8011f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0a:	f7ee f9df 	bl	80002cc <__adddf3>
 8011f0e:	4622      	mov	r2, r4
 8011f10:	462b      	mov	r3, r5
 8011f12:	f7ee fb91 	bl	8000638 <__aeabi_dmul>
 8011f16:	a336      	add	r3, pc, #216	; (adr r3, 8011ff0 <__kernel_cos+0x160>)
 8011f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f1c:	f7ee f9d4 	bl	80002c8 <__aeabi_dsub>
 8011f20:	4622      	mov	r2, r4
 8011f22:	462b      	mov	r3, r5
 8011f24:	f7ee fb88 	bl	8000638 <__aeabi_dmul>
 8011f28:	a333      	add	r3, pc, #204	; (adr r3, 8011ff8 <__kernel_cos+0x168>)
 8011f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2e:	f7ee f9cd 	bl	80002cc <__adddf3>
 8011f32:	4622      	mov	r2, r4
 8011f34:	462b      	mov	r3, r5
 8011f36:	f7ee fb7f 	bl	8000638 <__aeabi_dmul>
 8011f3a:	4622      	mov	r2, r4
 8011f3c:	462b      	mov	r3, r5
 8011f3e:	f7ee fb7b 	bl	8000638 <__aeabi_dmul>
 8011f42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f46:	4604      	mov	r4, r0
 8011f48:	460d      	mov	r5, r1
 8011f4a:	4630      	mov	r0, r6
 8011f4c:	4639      	mov	r1, r7
 8011f4e:	f7ee fb73 	bl	8000638 <__aeabi_dmul>
 8011f52:	460b      	mov	r3, r1
 8011f54:	4602      	mov	r2, r0
 8011f56:	4629      	mov	r1, r5
 8011f58:	4620      	mov	r0, r4
 8011f5a:	f7ee f9b5 	bl	80002c8 <__aeabi_dsub>
 8011f5e:	4b2b      	ldr	r3, [pc, #172]	; (801200c <__kernel_cos+0x17c>)
 8011f60:	4598      	cmp	r8, r3
 8011f62:	4606      	mov	r6, r0
 8011f64:	460f      	mov	r7, r1
 8011f66:	dc10      	bgt.n	8011f8a <__kernel_cos+0xfa>
 8011f68:	4602      	mov	r2, r0
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	4650      	mov	r0, sl
 8011f6e:	4659      	mov	r1, fp
 8011f70:	f7ee f9aa 	bl	80002c8 <__aeabi_dsub>
 8011f74:	460b      	mov	r3, r1
 8011f76:	4926      	ldr	r1, [pc, #152]	; (8012010 <__kernel_cos+0x180>)
 8011f78:	4602      	mov	r2, r0
 8011f7a:	2000      	movs	r0, #0
 8011f7c:	f7ee f9a4 	bl	80002c8 <__aeabi_dsub>
 8011f80:	ec41 0b10 	vmov	d0, r0, r1
 8011f84:	b003      	add	sp, #12
 8011f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f8a:	4b22      	ldr	r3, [pc, #136]	; (8012014 <__kernel_cos+0x184>)
 8011f8c:	4920      	ldr	r1, [pc, #128]	; (8012010 <__kernel_cos+0x180>)
 8011f8e:	4598      	cmp	r8, r3
 8011f90:	bfcc      	ite	gt
 8011f92:	4d21      	ldrgt	r5, [pc, #132]	; (8012018 <__kernel_cos+0x188>)
 8011f94:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8011f98:	2400      	movs	r4, #0
 8011f9a:	4622      	mov	r2, r4
 8011f9c:	462b      	mov	r3, r5
 8011f9e:	2000      	movs	r0, #0
 8011fa0:	f7ee f992 	bl	80002c8 <__aeabi_dsub>
 8011fa4:	4622      	mov	r2, r4
 8011fa6:	4680      	mov	r8, r0
 8011fa8:	4689      	mov	r9, r1
 8011faa:	462b      	mov	r3, r5
 8011fac:	4650      	mov	r0, sl
 8011fae:	4659      	mov	r1, fp
 8011fb0:	f7ee f98a 	bl	80002c8 <__aeabi_dsub>
 8011fb4:	4632      	mov	r2, r6
 8011fb6:	463b      	mov	r3, r7
 8011fb8:	f7ee f986 	bl	80002c8 <__aeabi_dsub>
 8011fbc:	4602      	mov	r2, r0
 8011fbe:	460b      	mov	r3, r1
 8011fc0:	4640      	mov	r0, r8
 8011fc2:	4649      	mov	r1, r9
 8011fc4:	e7da      	b.n	8011f7c <__kernel_cos+0xec>
 8011fc6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012000 <__kernel_cos+0x170>
 8011fca:	e7db      	b.n	8011f84 <__kernel_cos+0xf4>
 8011fcc:	f3af 8000 	nop.w
 8011fd0:	be8838d4 	.word	0xbe8838d4
 8011fd4:	bda8fae9 	.word	0xbda8fae9
 8011fd8:	bdb4b1c4 	.word	0xbdb4b1c4
 8011fdc:	3e21ee9e 	.word	0x3e21ee9e
 8011fe0:	809c52ad 	.word	0x809c52ad
 8011fe4:	3e927e4f 	.word	0x3e927e4f
 8011fe8:	19cb1590 	.word	0x19cb1590
 8011fec:	3efa01a0 	.word	0x3efa01a0
 8011ff0:	16c15177 	.word	0x16c15177
 8011ff4:	3f56c16c 	.word	0x3f56c16c
 8011ff8:	5555554c 	.word	0x5555554c
 8011ffc:	3fa55555 	.word	0x3fa55555
 8012000:	00000000 	.word	0x00000000
 8012004:	3ff00000 	.word	0x3ff00000
 8012008:	3fe00000 	.word	0x3fe00000
 801200c:	3fd33332 	.word	0x3fd33332
 8012010:	3ff00000 	.word	0x3ff00000
 8012014:	3fe90000 	.word	0x3fe90000
 8012018:	3fd20000 	.word	0x3fd20000
 801201c:	00000000 	.word	0x00000000

08012020 <__kernel_sin>:
 8012020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012024:	ed2d 8b04 	vpush	{d8-d9}
 8012028:	eeb0 8a41 	vmov.f32	s16, s2
 801202c:	eef0 8a61 	vmov.f32	s17, s3
 8012030:	ec55 4b10 	vmov	r4, r5, d0
 8012034:	b083      	sub	sp, #12
 8012036:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801203a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801203e:	9001      	str	r0, [sp, #4]
 8012040:	da06      	bge.n	8012050 <__kernel_sin+0x30>
 8012042:	ee10 0a10 	vmov	r0, s0
 8012046:	4629      	mov	r1, r5
 8012048:	f7ee fda6 	bl	8000b98 <__aeabi_d2iz>
 801204c:	2800      	cmp	r0, #0
 801204e:	d051      	beq.n	80120f4 <__kernel_sin+0xd4>
 8012050:	4622      	mov	r2, r4
 8012052:	462b      	mov	r3, r5
 8012054:	4620      	mov	r0, r4
 8012056:	4629      	mov	r1, r5
 8012058:	f7ee faee 	bl	8000638 <__aeabi_dmul>
 801205c:	4682      	mov	sl, r0
 801205e:	468b      	mov	fp, r1
 8012060:	4602      	mov	r2, r0
 8012062:	460b      	mov	r3, r1
 8012064:	4620      	mov	r0, r4
 8012066:	4629      	mov	r1, r5
 8012068:	f7ee fae6 	bl	8000638 <__aeabi_dmul>
 801206c:	a341      	add	r3, pc, #260	; (adr r3, 8012174 <__kernel_sin+0x154>)
 801206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012072:	4680      	mov	r8, r0
 8012074:	4689      	mov	r9, r1
 8012076:	4650      	mov	r0, sl
 8012078:	4659      	mov	r1, fp
 801207a:	f7ee fadd 	bl	8000638 <__aeabi_dmul>
 801207e:	a33f      	add	r3, pc, #252	; (adr r3, 801217c <__kernel_sin+0x15c>)
 8012080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012084:	f7ee f920 	bl	80002c8 <__aeabi_dsub>
 8012088:	4652      	mov	r2, sl
 801208a:	465b      	mov	r3, fp
 801208c:	f7ee fad4 	bl	8000638 <__aeabi_dmul>
 8012090:	a33c      	add	r3, pc, #240	; (adr r3, 8012184 <__kernel_sin+0x164>)
 8012092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012096:	f7ee f919 	bl	80002cc <__adddf3>
 801209a:	4652      	mov	r2, sl
 801209c:	465b      	mov	r3, fp
 801209e:	f7ee facb 	bl	8000638 <__aeabi_dmul>
 80120a2:	a33a      	add	r3, pc, #232	; (adr r3, 801218c <__kernel_sin+0x16c>)
 80120a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a8:	f7ee f90e 	bl	80002c8 <__aeabi_dsub>
 80120ac:	4652      	mov	r2, sl
 80120ae:	465b      	mov	r3, fp
 80120b0:	f7ee fac2 	bl	8000638 <__aeabi_dmul>
 80120b4:	a337      	add	r3, pc, #220	; (adr r3, 8012194 <__kernel_sin+0x174>)
 80120b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ba:	f7ee f907 	bl	80002cc <__adddf3>
 80120be:	9b01      	ldr	r3, [sp, #4]
 80120c0:	4606      	mov	r6, r0
 80120c2:	460f      	mov	r7, r1
 80120c4:	b9eb      	cbnz	r3, 8012102 <__kernel_sin+0xe2>
 80120c6:	4602      	mov	r2, r0
 80120c8:	460b      	mov	r3, r1
 80120ca:	4650      	mov	r0, sl
 80120cc:	4659      	mov	r1, fp
 80120ce:	f7ee fab3 	bl	8000638 <__aeabi_dmul>
 80120d2:	a325      	add	r3, pc, #148	; (adr r3, 8012168 <__kernel_sin+0x148>)
 80120d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d8:	f7ee f8f6 	bl	80002c8 <__aeabi_dsub>
 80120dc:	4642      	mov	r2, r8
 80120de:	464b      	mov	r3, r9
 80120e0:	f7ee faaa 	bl	8000638 <__aeabi_dmul>
 80120e4:	4602      	mov	r2, r0
 80120e6:	460b      	mov	r3, r1
 80120e8:	4620      	mov	r0, r4
 80120ea:	4629      	mov	r1, r5
 80120ec:	f7ee f8ee 	bl	80002cc <__adddf3>
 80120f0:	4604      	mov	r4, r0
 80120f2:	460d      	mov	r5, r1
 80120f4:	ec45 4b10 	vmov	d0, r4, r5
 80120f8:	b003      	add	sp, #12
 80120fa:	ecbd 8b04 	vpop	{d8-d9}
 80120fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012102:	4b1b      	ldr	r3, [pc, #108]	; (8012170 <__kernel_sin+0x150>)
 8012104:	ec51 0b18 	vmov	r0, r1, d8
 8012108:	2200      	movs	r2, #0
 801210a:	f7ee fa95 	bl	8000638 <__aeabi_dmul>
 801210e:	4632      	mov	r2, r6
 8012110:	ec41 0b19 	vmov	d9, r0, r1
 8012114:	463b      	mov	r3, r7
 8012116:	4640      	mov	r0, r8
 8012118:	4649      	mov	r1, r9
 801211a:	f7ee fa8d 	bl	8000638 <__aeabi_dmul>
 801211e:	4602      	mov	r2, r0
 8012120:	460b      	mov	r3, r1
 8012122:	ec51 0b19 	vmov	r0, r1, d9
 8012126:	f7ee f8cf 	bl	80002c8 <__aeabi_dsub>
 801212a:	4652      	mov	r2, sl
 801212c:	465b      	mov	r3, fp
 801212e:	f7ee fa83 	bl	8000638 <__aeabi_dmul>
 8012132:	ec53 2b18 	vmov	r2, r3, d8
 8012136:	f7ee f8c7 	bl	80002c8 <__aeabi_dsub>
 801213a:	a30b      	add	r3, pc, #44	; (adr r3, 8012168 <__kernel_sin+0x148>)
 801213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012140:	4606      	mov	r6, r0
 8012142:	460f      	mov	r7, r1
 8012144:	4640      	mov	r0, r8
 8012146:	4649      	mov	r1, r9
 8012148:	f7ee fa76 	bl	8000638 <__aeabi_dmul>
 801214c:	4602      	mov	r2, r0
 801214e:	460b      	mov	r3, r1
 8012150:	4630      	mov	r0, r6
 8012152:	4639      	mov	r1, r7
 8012154:	f7ee f8ba 	bl	80002cc <__adddf3>
 8012158:	4602      	mov	r2, r0
 801215a:	460b      	mov	r3, r1
 801215c:	4620      	mov	r0, r4
 801215e:	4629      	mov	r1, r5
 8012160:	f7ee f8b2 	bl	80002c8 <__aeabi_dsub>
 8012164:	e7c4      	b.n	80120f0 <__kernel_sin+0xd0>
 8012166:	bf00      	nop
 8012168:	55555549 	.word	0x55555549
 801216c:	3fc55555 	.word	0x3fc55555
 8012170:	3fe00000 	.word	0x3fe00000
 8012174:	5acfd57c 	.word	0x5acfd57c
 8012178:	3de5d93a 	.word	0x3de5d93a
 801217c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012180:	3e5ae5e6 	.word	0x3e5ae5e6
 8012184:	57b1fe7d 	.word	0x57b1fe7d
 8012188:	3ec71de3 	.word	0x3ec71de3
 801218c:	19c161d5 	.word	0x19c161d5
 8012190:	3f2a01a0 	.word	0x3f2a01a0
 8012194:	1110f8a6 	.word	0x1110f8a6
 8012198:	3f811111 	.word	0x3f811111
 801219c:	00000000 	.word	0x00000000

080121a0 <__ieee754_rem_pio2>:
 80121a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121a4:	ed2d 8b02 	vpush	{d8}
 80121a8:	ec55 4b10 	vmov	r4, r5, d0
 80121ac:	4bca      	ldr	r3, [pc, #808]	; (80124d8 <__ieee754_rem_pio2+0x338>)
 80121ae:	b08b      	sub	sp, #44	; 0x2c
 80121b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80121b4:	4598      	cmp	r8, r3
 80121b6:	4682      	mov	sl, r0
 80121b8:	9502      	str	r5, [sp, #8]
 80121ba:	dc08      	bgt.n	80121ce <__ieee754_rem_pio2+0x2e>
 80121bc:	2200      	movs	r2, #0
 80121be:	2300      	movs	r3, #0
 80121c0:	ed80 0b00 	vstr	d0, [r0]
 80121c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80121c8:	f04f 0b00 	mov.w	fp, #0
 80121cc:	e028      	b.n	8012220 <__ieee754_rem_pio2+0x80>
 80121ce:	4bc3      	ldr	r3, [pc, #780]	; (80124dc <__ieee754_rem_pio2+0x33c>)
 80121d0:	4598      	cmp	r8, r3
 80121d2:	dc78      	bgt.n	80122c6 <__ieee754_rem_pio2+0x126>
 80121d4:	9b02      	ldr	r3, [sp, #8]
 80121d6:	4ec2      	ldr	r6, [pc, #776]	; (80124e0 <__ieee754_rem_pio2+0x340>)
 80121d8:	2b00      	cmp	r3, #0
 80121da:	ee10 0a10 	vmov	r0, s0
 80121de:	a3b0      	add	r3, pc, #704	; (adr r3, 80124a0 <__ieee754_rem_pio2+0x300>)
 80121e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e4:	4629      	mov	r1, r5
 80121e6:	dd39      	ble.n	801225c <__ieee754_rem_pio2+0xbc>
 80121e8:	f7ee f86e 	bl	80002c8 <__aeabi_dsub>
 80121ec:	45b0      	cmp	r8, r6
 80121ee:	4604      	mov	r4, r0
 80121f0:	460d      	mov	r5, r1
 80121f2:	d01b      	beq.n	801222c <__ieee754_rem_pio2+0x8c>
 80121f4:	a3ac      	add	r3, pc, #688	; (adr r3, 80124a8 <__ieee754_rem_pio2+0x308>)
 80121f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fa:	f7ee f865 	bl	80002c8 <__aeabi_dsub>
 80121fe:	4602      	mov	r2, r0
 8012200:	460b      	mov	r3, r1
 8012202:	e9ca 2300 	strd	r2, r3, [sl]
 8012206:	4620      	mov	r0, r4
 8012208:	4629      	mov	r1, r5
 801220a:	f7ee f85d 	bl	80002c8 <__aeabi_dsub>
 801220e:	a3a6      	add	r3, pc, #664	; (adr r3, 80124a8 <__ieee754_rem_pio2+0x308>)
 8012210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012214:	f7ee f858 	bl	80002c8 <__aeabi_dsub>
 8012218:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801221c:	f04f 0b01 	mov.w	fp, #1
 8012220:	4658      	mov	r0, fp
 8012222:	b00b      	add	sp, #44	; 0x2c
 8012224:	ecbd 8b02 	vpop	{d8}
 8012228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801222c:	a3a0      	add	r3, pc, #640	; (adr r3, 80124b0 <__ieee754_rem_pio2+0x310>)
 801222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012232:	f7ee f849 	bl	80002c8 <__aeabi_dsub>
 8012236:	a3a0      	add	r3, pc, #640	; (adr r3, 80124b8 <__ieee754_rem_pio2+0x318>)
 8012238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801223c:	4604      	mov	r4, r0
 801223e:	460d      	mov	r5, r1
 8012240:	f7ee f842 	bl	80002c8 <__aeabi_dsub>
 8012244:	4602      	mov	r2, r0
 8012246:	460b      	mov	r3, r1
 8012248:	e9ca 2300 	strd	r2, r3, [sl]
 801224c:	4620      	mov	r0, r4
 801224e:	4629      	mov	r1, r5
 8012250:	f7ee f83a 	bl	80002c8 <__aeabi_dsub>
 8012254:	a398      	add	r3, pc, #608	; (adr r3, 80124b8 <__ieee754_rem_pio2+0x318>)
 8012256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801225a:	e7db      	b.n	8012214 <__ieee754_rem_pio2+0x74>
 801225c:	f7ee f836 	bl	80002cc <__adddf3>
 8012260:	45b0      	cmp	r8, r6
 8012262:	4604      	mov	r4, r0
 8012264:	460d      	mov	r5, r1
 8012266:	d016      	beq.n	8012296 <__ieee754_rem_pio2+0xf6>
 8012268:	a38f      	add	r3, pc, #572	; (adr r3, 80124a8 <__ieee754_rem_pio2+0x308>)
 801226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226e:	f7ee f82d 	bl	80002cc <__adddf3>
 8012272:	4602      	mov	r2, r0
 8012274:	460b      	mov	r3, r1
 8012276:	e9ca 2300 	strd	r2, r3, [sl]
 801227a:	4620      	mov	r0, r4
 801227c:	4629      	mov	r1, r5
 801227e:	f7ee f823 	bl	80002c8 <__aeabi_dsub>
 8012282:	a389      	add	r3, pc, #548	; (adr r3, 80124a8 <__ieee754_rem_pio2+0x308>)
 8012284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012288:	f7ee f820 	bl	80002cc <__adddf3>
 801228c:	f04f 3bff 	mov.w	fp, #4294967295
 8012290:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012294:	e7c4      	b.n	8012220 <__ieee754_rem_pio2+0x80>
 8012296:	a386      	add	r3, pc, #536	; (adr r3, 80124b0 <__ieee754_rem_pio2+0x310>)
 8012298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801229c:	f7ee f816 	bl	80002cc <__adddf3>
 80122a0:	a385      	add	r3, pc, #532	; (adr r3, 80124b8 <__ieee754_rem_pio2+0x318>)
 80122a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a6:	4604      	mov	r4, r0
 80122a8:	460d      	mov	r5, r1
 80122aa:	f7ee f80f 	bl	80002cc <__adddf3>
 80122ae:	4602      	mov	r2, r0
 80122b0:	460b      	mov	r3, r1
 80122b2:	e9ca 2300 	strd	r2, r3, [sl]
 80122b6:	4620      	mov	r0, r4
 80122b8:	4629      	mov	r1, r5
 80122ba:	f7ee f805 	bl	80002c8 <__aeabi_dsub>
 80122be:	a37e      	add	r3, pc, #504	; (adr r3, 80124b8 <__ieee754_rem_pio2+0x318>)
 80122c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c4:	e7e0      	b.n	8012288 <__ieee754_rem_pio2+0xe8>
 80122c6:	4b87      	ldr	r3, [pc, #540]	; (80124e4 <__ieee754_rem_pio2+0x344>)
 80122c8:	4598      	cmp	r8, r3
 80122ca:	f300 80d8 	bgt.w	801247e <__ieee754_rem_pio2+0x2de>
 80122ce:	f000 f96d 	bl	80125ac <fabs>
 80122d2:	ec55 4b10 	vmov	r4, r5, d0
 80122d6:	ee10 0a10 	vmov	r0, s0
 80122da:	a379      	add	r3, pc, #484	; (adr r3, 80124c0 <__ieee754_rem_pio2+0x320>)
 80122dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e0:	4629      	mov	r1, r5
 80122e2:	f7ee f9a9 	bl	8000638 <__aeabi_dmul>
 80122e6:	4b80      	ldr	r3, [pc, #512]	; (80124e8 <__ieee754_rem_pio2+0x348>)
 80122e8:	2200      	movs	r2, #0
 80122ea:	f7ed ffef 	bl	80002cc <__adddf3>
 80122ee:	f7ee fc53 	bl	8000b98 <__aeabi_d2iz>
 80122f2:	4683      	mov	fp, r0
 80122f4:	f7ee f936 	bl	8000564 <__aeabi_i2d>
 80122f8:	4602      	mov	r2, r0
 80122fa:	460b      	mov	r3, r1
 80122fc:	ec43 2b18 	vmov	d8, r2, r3
 8012300:	a367      	add	r3, pc, #412	; (adr r3, 80124a0 <__ieee754_rem_pio2+0x300>)
 8012302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012306:	f7ee f997 	bl	8000638 <__aeabi_dmul>
 801230a:	4602      	mov	r2, r0
 801230c:	460b      	mov	r3, r1
 801230e:	4620      	mov	r0, r4
 8012310:	4629      	mov	r1, r5
 8012312:	f7ed ffd9 	bl	80002c8 <__aeabi_dsub>
 8012316:	a364      	add	r3, pc, #400	; (adr r3, 80124a8 <__ieee754_rem_pio2+0x308>)
 8012318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231c:	4606      	mov	r6, r0
 801231e:	460f      	mov	r7, r1
 8012320:	ec51 0b18 	vmov	r0, r1, d8
 8012324:	f7ee f988 	bl	8000638 <__aeabi_dmul>
 8012328:	f1bb 0f1f 	cmp.w	fp, #31
 801232c:	4604      	mov	r4, r0
 801232e:	460d      	mov	r5, r1
 8012330:	dc0d      	bgt.n	801234e <__ieee754_rem_pio2+0x1ae>
 8012332:	4b6e      	ldr	r3, [pc, #440]	; (80124ec <__ieee754_rem_pio2+0x34c>)
 8012334:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801233c:	4543      	cmp	r3, r8
 801233e:	d006      	beq.n	801234e <__ieee754_rem_pio2+0x1ae>
 8012340:	4622      	mov	r2, r4
 8012342:	462b      	mov	r3, r5
 8012344:	4630      	mov	r0, r6
 8012346:	4639      	mov	r1, r7
 8012348:	f7ed ffbe 	bl	80002c8 <__aeabi_dsub>
 801234c:	e00e      	b.n	801236c <__ieee754_rem_pio2+0x1cc>
 801234e:	462b      	mov	r3, r5
 8012350:	4622      	mov	r2, r4
 8012352:	4630      	mov	r0, r6
 8012354:	4639      	mov	r1, r7
 8012356:	f7ed ffb7 	bl	80002c8 <__aeabi_dsub>
 801235a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801235e:	9303      	str	r3, [sp, #12]
 8012360:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012364:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012368:	2b10      	cmp	r3, #16
 801236a:	dc02      	bgt.n	8012372 <__ieee754_rem_pio2+0x1d2>
 801236c:	e9ca 0100 	strd	r0, r1, [sl]
 8012370:	e039      	b.n	80123e6 <__ieee754_rem_pio2+0x246>
 8012372:	a34f      	add	r3, pc, #316	; (adr r3, 80124b0 <__ieee754_rem_pio2+0x310>)
 8012374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012378:	ec51 0b18 	vmov	r0, r1, d8
 801237c:	f7ee f95c 	bl	8000638 <__aeabi_dmul>
 8012380:	4604      	mov	r4, r0
 8012382:	460d      	mov	r5, r1
 8012384:	4602      	mov	r2, r0
 8012386:	460b      	mov	r3, r1
 8012388:	4630      	mov	r0, r6
 801238a:	4639      	mov	r1, r7
 801238c:	f7ed ff9c 	bl	80002c8 <__aeabi_dsub>
 8012390:	4602      	mov	r2, r0
 8012392:	460b      	mov	r3, r1
 8012394:	4680      	mov	r8, r0
 8012396:	4689      	mov	r9, r1
 8012398:	4630      	mov	r0, r6
 801239a:	4639      	mov	r1, r7
 801239c:	f7ed ff94 	bl	80002c8 <__aeabi_dsub>
 80123a0:	4622      	mov	r2, r4
 80123a2:	462b      	mov	r3, r5
 80123a4:	f7ed ff90 	bl	80002c8 <__aeabi_dsub>
 80123a8:	a343      	add	r3, pc, #268	; (adr r3, 80124b8 <__ieee754_rem_pio2+0x318>)
 80123aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ae:	4604      	mov	r4, r0
 80123b0:	460d      	mov	r5, r1
 80123b2:	ec51 0b18 	vmov	r0, r1, d8
 80123b6:	f7ee f93f 	bl	8000638 <__aeabi_dmul>
 80123ba:	4622      	mov	r2, r4
 80123bc:	462b      	mov	r3, r5
 80123be:	f7ed ff83 	bl	80002c8 <__aeabi_dsub>
 80123c2:	4602      	mov	r2, r0
 80123c4:	460b      	mov	r3, r1
 80123c6:	4604      	mov	r4, r0
 80123c8:	460d      	mov	r5, r1
 80123ca:	4640      	mov	r0, r8
 80123cc:	4649      	mov	r1, r9
 80123ce:	f7ed ff7b 	bl	80002c8 <__aeabi_dsub>
 80123d2:	9a03      	ldr	r2, [sp, #12]
 80123d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80123d8:	1ad3      	subs	r3, r2, r3
 80123da:	2b31      	cmp	r3, #49	; 0x31
 80123dc:	dc24      	bgt.n	8012428 <__ieee754_rem_pio2+0x288>
 80123de:	e9ca 0100 	strd	r0, r1, [sl]
 80123e2:	4646      	mov	r6, r8
 80123e4:	464f      	mov	r7, r9
 80123e6:	e9da 8900 	ldrd	r8, r9, [sl]
 80123ea:	4630      	mov	r0, r6
 80123ec:	4642      	mov	r2, r8
 80123ee:	464b      	mov	r3, r9
 80123f0:	4639      	mov	r1, r7
 80123f2:	f7ed ff69 	bl	80002c8 <__aeabi_dsub>
 80123f6:	462b      	mov	r3, r5
 80123f8:	4622      	mov	r2, r4
 80123fa:	f7ed ff65 	bl	80002c8 <__aeabi_dsub>
 80123fe:	9b02      	ldr	r3, [sp, #8]
 8012400:	2b00      	cmp	r3, #0
 8012402:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012406:	f6bf af0b 	bge.w	8012220 <__ieee754_rem_pio2+0x80>
 801240a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801240e:	f8ca 3004 	str.w	r3, [sl, #4]
 8012412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012416:	f8ca 8000 	str.w	r8, [sl]
 801241a:	f8ca 0008 	str.w	r0, [sl, #8]
 801241e:	f8ca 300c 	str.w	r3, [sl, #12]
 8012422:	f1cb 0b00 	rsb	fp, fp, #0
 8012426:	e6fb      	b.n	8012220 <__ieee754_rem_pio2+0x80>
 8012428:	a327      	add	r3, pc, #156	; (adr r3, 80124c8 <__ieee754_rem_pio2+0x328>)
 801242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242e:	ec51 0b18 	vmov	r0, r1, d8
 8012432:	f7ee f901 	bl	8000638 <__aeabi_dmul>
 8012436:	4604      	mov	r4, r0
 8012438:	460d      	mov	r5, r1
 801243a:	4602      	mov	r2, r0
 801243c:	460b      	mov	r3, r1
 801243e:	4640      	mov	r0, r8
 8012440:	4649      	mov	r1, r9
 8012442:	f7ed ff41 	bl	80002c8 <__aeabi_dsub>
 8012446:	4602      	mov	r2, r0
 8012448:	460b      	mov	r3, r1
 801244a:	4606      	mov	r6, r0
 801244c:	460f      	mov	r7, r1
 801244e:	4640      	mov	r0, r8
 8012450:	4649      	mov	r1, r9
 8012452:	f7ed ff39 	bl	80002c8 <__aeabi_dsub>
 8012456:	4622      	mov	r2, r4
 8012458:	462b      	mov	r3, r5
 801245a:	f7ed ff35 	bl	80002c8 <__aeabi_dsub>
 801245e:	a31c      	add	r3, pc, #112	; (adr r3, 80124d0 <__ieee754_rem_pio2+0x330>)
 8012460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012464:	4604      	mov	r4, r0
 8012466:	460d      	mov	r5, r1
 8012468:	ec51 0b18 	vmov	r0, r1, d8
 801246c:	f7ee f8e4 	bl	8000638 <__aeabi_dmul>
 8012470:	4622      	mov	r2, r4
 8012472:	462b      	mov	r3, r5
 8012474:	f7ed ff28 	bl	80002c8 <__aeabi_dsub>
 8012478:	4604      	mov	r4, r0
 801247a:	460d      	mov	r5, r1
 801247c:	e760      	b.n	8012340 <__ieee754_rem_pio2+0x1a0>
 801247e:	4b1c      	ldr	r3, [pc, #112]	; (80124f0 <__ieee754_rem_pio2+0x350>)
 8012480:	4598      	cmp	r8, r3
 8012482:	dd37      	ble.n	80124f4 <__ieee754_rem_pio2+0x354>
 8012484:	ee10 2a10 	vmov	r2, s0
 8012488:	462b      	mov	r3, r5
 801248a:	4620      	mov	r0, r4
 801248c:	4629      	mov	r1, r5
 801248e:	f7ed ff1b 	bl	80002c8 <__aeabi_dsub>
 8012492:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012496:	e9ca 0100 	strd	r0, r1, [sl]
 801249a:	e695      	b.n	80121c8 <__ieee754_rem_pio2+0x28>
 801249c:	f3af 8000 	nop.w
 80124a0:	54400000 	.word	0x54400000
 80124a4:	3ff921fb 	.word	0x3ff921fb
 80124a8:	1a626331 	.word	0x1a626331
 80124ac:	3dd0b461 	.word	0x3dd0b461
 80124b0:	1a600000 	.word	0x1a600000
 80124b4:	3dd0b461 	.word	0x3dd0b461
 80124b8:	2e037073 	.word	0x2e037073
 80124bc:	3ba3198a 	.word	0x3ba3198a
 80124c0:	6dc9c883 	.word	0x6dc9c883
 80124c4:	3fe45f30 	.word	0x3fe45f30
 80124c8:	2e000000 	.word	0x2e000000
 80124cc:	3ba3198a 	.word	0x3ba3198a
 80124d0:	252049c1 	.word	0x252049c1
 80124d4:	397b839a 	.word	0x397b839a
 80124d8:	3fe921fb 	.word	0x3fe921fb
 80124dc:	4002d97b 	.word	0x4002d97b
 80124e0:	3ff921fb 	.word	0x3ff921fb
 80124e4:	413921fb 	.word	0x413921fb
 80124e8:	3fe00000 	.word	0x3fe00000
 80124ec:	0801a5e4 	.word	0x0801a5e4
 80124f0:	7fefffff 	.word	0x7fefffff
 80124f4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80124f8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80124fc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8012500:	4620      	mov	r0, r4
 8012502:	460d      	mov	r5, r1
 8012504:	f7ee fb48 	bl	8000b98 <__aeabi_d2iz>
 8012508:	f7ee f82c 	bl	8000564 <__aeabi_i2d>
 801250c:	4602      	mov	r2, r0
 801250e:	460b      	mov	r3, r1
 8012510:	4620      	mov	r0, r4
 8012512:	4629      	mov	r1, r5
 8012514:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012518:	f7ed fed6 	bl	80002c8 <__aeabi_dsub>
 801251c:	4b21      	ldr	r3, [pc, #132]	; (80125a4 <__ieee754_rem_pio2+0x404>)
 801251e:	2200      	movs	r2, #0
 8012520:	f7ee f88a 	bl	8000638 <__aeabi_dmul>
 8012524:	460d      	mov	r5, r1
 8012526:	4604      	mov	r4, r0
 8012528:	f7ee fb36 	bl	8000b98 <__aeabi_d2iz>
 801252c:	f7ee f81a 	bl	8000564 <__aeabi_i2d>
 8012530:	4602      	mov	r2, r0
 8012532:	460b      	mov	r3, r1
 8012534:	4620      	mov	r0, r4
 8012536:	4629      	mov	r1, r5
 8012538:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801253c:	f7ed fec4 	bl	80002c8 <__aeabi_dsub>
 8012540:	4b18      	ldr	r3, [pc, #96]	; (80125a4 <__ieee754_rem_pio2+0x404>)
 8012542:	2200      	movs	r2, #0
 8012544:	f7ee f878 	bl	8000638 <__aeabi_dmul>
 8012548:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801254c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8012550:	2703      	movs	r7, #3
 8012552:	2400      	movs	r4, #0
 8012554:	2500      	movs	r5, #0
 8012556:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801255a:	4622      	mov	r2, r4
 801255c:	462b      	mov	r3, r5
 801255e:	46b9      	mov	r9, r7
 8012560:	3f01      	subs	r7, #1
 8012562:	f7ee fad1 	bl	8000b08 <__aeabi_dcmpeq>
 8012566:	2800      	cmp	r0, #0
 8012568:	d1f5      	bne.n	8012556 <__ieee754_rem_pio2+0x3b6>
 801256a:	4b0f      	ldr	r3, [pc, #60]	; (80125a8 <__ieee754_rem_pio2+0x408>)
 801256c:	9301      	str	r3, [sp, #4]
 801256e:	2302      	movs	r3, #2
 8012570:	9300      	str	r3, [sp, #0]
 8012572:	4632      	mov	r2, r6
 8012574:	464b      	mov	r3, r9
 8012576:	4651      	mov	r1, sl
 8012578:	a804      	add	r0, sp, #16
 801257a:	f000 f821 	bl	80125c0 <__kernel_rem_pio2>
 801257e:	9b02      	ldr	r3, [sp, #8]
 8012580:	2b00      	cmp	r3, #0
 8012582:	4683      	mov	fp, r0
 8012584:	f6bf ae4c 	bge.w	8012220 <__ieee754_rem_pio2+0x80>
 8012588:	e9da 2100 	ldrd	r2, r1, [sl]
 801258c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012590:	e9ca 2300 	strd	r2, r3, [sl]
 8012594:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8012598:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801259c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80125a0:	e73f      	b.n	8012422 <__ieee754_rem_pio2+0x282>
 80125a2:	bf00      	nop
 80125a4:	41700000 	.word	0x41700000
 80125a8:	0801a664 	.word	0x0801a664

080125ac <fabs>:
 80125ac:	ec51 0b10 	vmov	r0, r1, d0
 80125b0:	ee10 2a10 	vmov	r2, s0
 80125b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80125b8:	ec43 2b10 	vmov	d0, r2, r3
 80125bc:	4770      	bx	lr
	...

080125c0 <__kernel_rem_pio2>:
 80125c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125c4:	ed2d 8b02 	vpush	{d8}
 80125c8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80125cc:	f112 0f14 	cmn.w	r2, #20
 80125d0:	9306      	str	r3, [sp, #24]
 80125d2:	9104      	str	r1, [sp, #16]
 80125d4:	4bc2      	ldr	r3, [pc, #776]	; (80128e0 <__kernel_rem_pio2+0x320>)
 80125d6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80125d8:	9009      	str	r0, [sp, #36]	; 0x24
 80125da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80125de:	9300      	str	r3, [sp, #0]
 80125e0:	9b06      	ldr	r3, [sp, #24]
 80125e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80125e6:	bfa8      	it	ge
 80125e8:	1ed4      	subge	r4, r2, #3
 80125ea:	9305      	str	r3, [sp, #20]
 80125ec:	bfb2      	itee	lt
 80125ee:	2400      	movlt	r4, #0
 80125f0:	2318      	movge	r3, #24
 80125f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80125f6:	f06f 0317 	mvn.w	r3, #23
 80125fa:	fb04 3303 	mla	r3, r4, r3, r3
 80125fe:	eb03 0a02 	add.w	sl, r3, r2
 8012602:	9b00      	ldr	r3, [sp, #0]
 8012604:	9a05      	ldr	r2, [sp, #20]
 8012606:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80128d0 <__kernel_rem_pio2+0x310>
 801260a:	eb03 0802 	add.w	r8, r3, r2
 801260e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012610:	1aa7      	subs	r7, r4, r2
 8012612:	ae20      	add	r6, sp, #128	; 0x80
 8012614:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012618:	2500      	movs	r5, #0
 801261a:	4545      	cmp	r5, r8
 801261c:	dd13      	ble.n	8012646 <__kernel_rem_pio2+0x86>
 801261e:	9b06      	ldr	r3, [sp, #24]
 8012620:	aa20      	add	r2, sp, #128	; 0x80
 8012622:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012626:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801262a:	f04f 0800 	mov.w	r8, #0
 801262e:	9b00      	ldr	r3, [sp, #0]
 8012630:	4598      	cmp	r8, r3
 8012632:	dc31      	bgt.n	8012698 <__kernel_rem_pio2+0xd8>
 8012634:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80128d0 <__kernel_rem_pio2+0x310>
 8012638:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801263c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012640:	462f      	mov	r7, r5
 8012642:	2600      	movs	r6, #0
 8012644:	e01b      	b.n	801267e <__kernel_rem_pio2+0xbe>
 8012646:	42ef      	cmn	r7, r5
 8012648:	d407      	bmi.n	801265a <__kernel_rem_pio2+0x9a>
 801264a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801264e:	f7ed ff89 	bl	8000564 <__aeabi_i2d>
 8012652:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012656:	3501      	adds	r5, #1
 8012658:	e7df      	b.n	801261a <__kernel_rem_pio2+0x5a>
 801265a:	ec51 0b18 	vmov	r0, r1, d8
 801265e:	e7f8      	b.n	8012652 <__kernel_rem_pio2+0x92>
 8012660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012664:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012668:	f7ed ffe6 	bl	8000638 <__aeabi_dmul>
 801266c:	4602      	mov	r2, r0
 801266e:	460b      	mov	r3, r1
 8012670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012674:	f7ed fe2a 	bl	80002cc <__adddf3>
 8012678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801267c:	3601      	adds	r6, #1
 801267e:	9b05      	ldr	r3, [sp, #20]
 8012680:	429e      	cmp	r6, r3
 8012682:	f1a7 0708 	sub.w	r7, r7, #8
 8012686:	ddeb      	ble.n	8012660 <__kernel_rem_pio2+0xa0>
 8012688:	ed9d 7b02 	vldr	d7, [sp, #8]
 801268c:	f108 0801 	add.w	r8, r8, #1
 8012690:	ecab 7b02 	vstmia	fp!, {d7}
 8012694:	3508      	adds	r5, #8
 8012696:	e7ca      	b.n	801262e <__kernel_rem_pio2+0x6e>
 8012698:	9b00      	ldr	r3, [sp, #0]
 801269a:	aa0c      	add	r2, sp, #48	; 0x30
 801269c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80126a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80126a2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80126a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80126a8:	9c00      	ldr	r4, [sp, #0]
 80126aa:	930a      	str	r3, [sp, #40]	; 0x28
 80126ac:	00e3      	lsls	r3, r4, #3
 80126ae:	9308      	str	r3, [sp, #32]
 80126b0:	ab98      	add	r3, sp, #608	; 0x260
 80126b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80126b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80126ba:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80126be:	ab70      	add	r3, sp, #448	; 0x1c0
 80126c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80126c4:	46c3      	mov	fp, r8
 80126c6:	46a1      	mov	r9, r4
 80126c8:	f1b9 0f00 	cmp.w	r9, #0
 80126cc:	f1a5 0508 	sub.w	r5, r5, #8
 80126d0:	dc77      	bgt.n	80127c2 <__kernel_rem_pio2+0x202>
 80126d2:	ec47 6b10 	vmov	d0, r6, r7
 80126d6:	4650      	mov	r0, sl
 80126d8:	f000 fac2 	bl	8012c60 <scalbn>
 80126dc:	ec57 6b10 	vmov	r6, r7, d0
 80126e0:	2200      	movs	r2, #0
 80126e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80126e6:	ee10 0a10 	vmov	r0, s0
 80126ea:	4639      	mov	r1, r7
 80126ec:	f7ed ffa4 	bl	8000638 <__aeabi_dmul>
 80126f0:	ec41 0b10 	vmov	d0, r0, r1
 80126f4:	f000 fb34 	bl	8012d60 <floor>
 80126f8:	4b7a      	ldr	r3, [pc, #488]	; (80128e4 <__kernel_rem_pio2+0x324>)
 80126fa:	ec51 0b10 	vmov	r0, r1, d0
 80126fe:	2200      	movs	r2, #0
 8012700:	f7ed ff9a 	bl	8000638 <__aeabi_dmul>
 8012704:	4602      	mov	r2, r0
 8012706:	460b      	mov	r3, r1
 8012708:	4630      	mov	r0, r6
 801270a:	4639      	mov	r1, r7
 801270c:	f7ed fddc 	bl	80002c8 <__aeabi_dsub>
 8012710:	460f      	mov	r7, r1
 8012712:	4606      	mov	r6, r0
 8012714:	f7ee fa40 	bl	8000b98 <__aeabi_d2iz>
 8012718:	9002      	str	r0, [sp, #8]
 801271a:	f7ed ff23 	bl	8000564 <__aeabi_i2d>
 801271e:	4602      	mov	r2, r0
 8012720:	460b      	mov	r3, r1
 8012722:	4630      	mov	r0, r6
 8012724:	4639      	mov	r1, r7
 8012726:	f7ed fdcf 	bl	80002c8 <__aeabi_dsub>
 801272a:	f1ba 0f00 	cmp.w	sl, #0
 801272e:	4606      	mov	r6, r0
 8012730:	460f      	mov	r7, r1
 8012732:	dd6d      	ble.n	8012810 <__kernel_rem_pio2+0x250>
 8012734:	1e61      	subs	r1, r4, #1
 8012736:	ab0c      	add	r3, sp, #48	; 0x30
 8012738:	9d02      	ldr	r5, [sp, #8]
 801273a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801273e:	f1ca 0018 	rsb	r0, sl, #24
 8012742:	fa43 f200 	asr.w	r2, r3, r0
 8012746:	4415      	add	r5, r2
 8012748:	4082      	lsls	r2, r0
 801274a:	1a9b      	subs	r3, r3, r2
 801274c:	aa0c      	add	r2, sp, #48	; 0x30
 801274e:	9502      	str	r5, [sp, #8]
 8012750:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012754:	f1ca 0217 	rsb	r2, sl, #23
 8012758:	fa43 fb02 	asr.w	fp, r3, r2
 801275c:	f1bb 0f00 	cmp.w	fp, #0
 8012760:	dd65      	ble.n	801282e <__kernel_rem_pio2+0x26e>
 8012762:	9b02      	ldr	r3, [sp, #8]
 8012764:	2200      	movs	r2, #0
 8012766:	3301      	adds	r3, #1
 8012768:	9302      	str	r3, [sp, #8]
 801276a:	4615      	mov	r5, r2
 801276c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012770:	4294      	cmp	r4, r2
 8012772:	f300 809f 	bgt.w	80128b4 <__kernel_rem_pio2+0x2f4>
 8012776:	f1ba 0f00 	cmp.w	sl, #0
 801277a:	dd07      	ble.n	801278c <__kernel_rem_pio2+0x1cc>
 801277c:	f1ba 0f01 	cmp.w	sl, #1
 8012780:	f000 80c1 	beq.w	8012906 <__kernel_rem_pio2+0x346>
 8012784:	f1ba 0f02 	cmp.w	sl, #2
 8012788:	f000 80c7 	beq.w	801291a <__kernel_rem_pio2+0x35a>
 801278c:	f1bb 0f02 	cmp.w	fp, #2
 8012790:	d14d      	bne.n	801282e <__kernel_rem_pio2+0x26e>
 8012792:	4632      	mov	r2, r6
 8012794:	463b      	mov	r3, r7
 8012796:	4954      	ldr	r1, [pc, #336]	; (80128e8 <__kernel_rem_pio2+0x328>)
 8012798:	2000      	movs	r0, #0
 801279a:	f7ed fd95 	bl	80002c8 <__aeabi_dsub>
 801279e:	4606      	mov	r6, r0
 80127a0:	460f      	mov	r7, r1
 80127a2:	2d00      	cmp	r5, #0
 80127a4:	d043      	beq.n	801282e <__kernel_rem_pio2+0x26e>
 80127a6:	4650      	mov	r0, sl
 80127a8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80128d8 <__kernel_rem_pio2+0x318>
 80127ac:	f000 fa58 	bl	8012c60 <scalbn>
 80127b0:	4630      	mov	r0, r6
 80127b2:	4639      	mov	r1, r7
 80127b4:	ec53 2b10 	vmov	r2, r3, d0
 80127b8:	f7ed fd86 	bl	80002c8 <__aeabi_dsub>
 80127bc:	4606      	mov	r6, r0
 80127be:	460f      	mov	r7, r1
 80127c0:	e035      	b.n	801282e <__kernel_rem_pio2+0x26e>
 80127c2:	4b4a      	ldr	r3, [pc, #296]	; (80128ec <__kernel_rem_pio2+0x32c>)
 80127c4:	2200      	movs	r2, #0
 80127c6:	4630      	mov	r0, r6
 80127c8:	4639      	mov	r1, r7
 80127ca:	f7ed ff35 	bl	8000638 <__aeabi_dmul>
 80127ce:	f7ee f9e3 	bl	8000b98 <__aeabi_d2iz>
 80127d2:	f7ed fec7 	bl	8000564 <__aeabi_i2d>
 80127d6:	4602      	mov	r2, r0
 80127d8:	460b      	mov	r3, r1
 80127da:	ec43 2b18 	vmov	d8, r2, r3
 80127de:	4b44      	ldr	r3, [pc, #272]	; (80128f0 <__kernel_rem_pio2+0x330>)
 80127e0:	2200      	movs	r2, #0
 80127e2:	f7ed ff29 	bl	8000638 <__aeabi_dmul>
 80127e6:	4602      	mov	r2, r0
 80127e8:	460b      	mov	r3, r1
 80127ea:	4630      	mov	r0, r6
 80127ec:	4639      	mov	r1, r7
 80127ee:	f7ed fd6b 	bl	80002c8 <__aeabi_dsub>
 80127f2:	f7ee f9d1 	bl	8000b98 <__aeabi_d2iz>
 80127f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80127fa:	f84b 0b04 	str.w	r0, [fp], #4
 80127fe:	ec51 0b18 	vmov	r0, r1, d8
 8012802:	f7ed fd63 	bl	80002cc <__adddf3>
 8012806:	f109 39ff 	add.w	r9, r9, #4294967295
 801280a:	4606      	mov	r6, r0
 801280c:	460f      	mov	r7, r1
 801280e:	e75b      	b.n	80126c8 <__kernel_rem_pio2+0x108>
 8012810:	d106      	bne.n	8012820 <__kernel_rem_pio2+0x260>
 8012812:	1e63      	subs	r3, r4, #1
 8012814:	aa0c      	add	r2, sp, #48	; 0x30
 8012816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801281a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801281e:	e79d      	b.n	801275c <__kernel_rem_pio2+0x19c>
 8012820:	4b34      	ldr	r3, [pc, #208]	; (80128f4 <__kernel_rem_pio2+0x334>)
 8012822:	2200      	movs	r2, #0
 8012824:	f7ee f98e 	bl	8000b44 <__aeabi_dcmpge>
 8012828:	2800      	cmp	r0, #0
 801282a:	d140      	bne.n	80128ae <__kernel_rem_pio2+0x2ee>
 801282c:	4683      	mov	fp, r0
 801282e:	2200      	movs	r2, #0
 8012830:	2300      	movs	r3, #0
 8012832:	4630      	mov	r0, r6
 8012834:	4639      	mov	r1, r7
 8012836:	f7ee f967 	bl	8000b08 <__aeabi_dcmpeq>
 801283a:	2800      	cmp	r0, #0
 801283c:	f000 80c1 	beq.w	80129c2 <__kernel_rem_pio2+0x402>
 8012840:	1e65      	subs	r5, r4, #1
 8012842:	462b      	mov	r3, r5
 8012844:	2200      	movs	r2, #0
 8012846:	9900      	ldr	r1, [sp, #0]
 8012848:	428b      	cmp	r3, r1
 801284a:	da6d      	bge.n	8012928 <__kernel_rem_pio2+0x368>
 801284c:	2a00      	cmp	r2, #0
 801284e:	f000 808a 	beq.w	8012966 <__kernel_rem_pio2+0x3a6>
 8012852:	ab0c      	add	r3, sp, #48	; 0x30
 8012854:	f1aa 0a18 	sub.w	sl, sl, #24
 8012858:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801285c:	2b00      	cmp	r3, #0
 801285e:	f000 80ae 	beq.w	80129be <__kernel_rem_pio2+0x3fe>
 8012862:	4650      	mov	r0, sl
 8012864:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80128d8 <__kernel_rem_pio2+0x318>
 8012868:	f000 f9fa 	bl	8012c60 <scalbn>
 801286c:	1c6b      	adds	r3, r5, #1
 801286e:	00da      	lsls	r2, r3, #3
 8012870:	9205      	str	r2, [sp, #20]
 8012872:	ec57 6b10 	vmov	r6, r7, d0
 8012876:	aa70      	add	r2, sp, #448	; 0x1c0
 8012878:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80128ec <__kernel_rem_pio2+0x32c>
 801287c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8012880:	462c      	mov	r4, r5
 8012882:	f04f 0800 	mov.w	r8, #0
 8012886:	2c00      	cmp	r4, #0
 8012888:	f280 80d4 	bge.w	8012a34 <__kernel_rem_pio2+0x474>
 801288c:	462c      	mov	r4, r5
 801288e:	2c00      	cmp	r4, #0
 8012890:	f2c0 8102 	blt.w	8012a98 <__kernel_rem_pio2+0x4d8>
 8012894:	4b18      	ldr	r3, [pc, #96]	; (80128f8 <__kernel_rem_pio2+0x338>)
 8012896:	461e      	mov	r6, r3
 8012898:	ab70      	add	r3, sp, #448	; 0x1c0
 801289a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801289e:	1b2b      	subs	r3, r5, r4
 80128a0:	f04f 0900 	mov.w	r9, #0
 80128a4:	f04f 0a00 	mov.w	sl, #0
 80128a8:	2700      	movs	r7, #0
 80128aa:	9306      	str	r3, [sp, #24]
 80128ac:	e0e6      	b.n	8012a7c <__kernel_rem_pio2+0x4bc>
 80128ae:	f04f 0b02 	mov.w	fp, #2
 80128b2:	e756      	b.n	8012762 <__kernel_rem_pio2+0x1a2>
 80128b4:	f8d8 3000 	ldr.w	r3, [r8]
 80128b8:	bb05      	cbnz	r5, 80128fc <__kernel_rem_pio2+0x33c>
 80128ba:	b123      	cbz	r3, 80128c6 <__kernel_rem_pio2+0x306>
 80128bc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80128c0:	f8c8 3000 	str.w	r3, [r8]
 80128c4:	2301      	movs	r3, #1
 80128c6:	3201      	adds	r2, #1
 80128c8:	f108 0804 	add.w	r8, r8, #4
 80128cc:	461d      	mov	r5, r3
 80128ce:	e74f      	b.n	8012770 <__kernel_rem_pio2+0x1b0>
	...
 80128dc:	3ff00000 	.word	0x3ff00000
 80128e0:	0801a7b0 	.word	0x0801a7b0
 80128e4:	40200000 	.word	0x40200000
 80128e8:	3ff00000 	.word	0x3ff00000
 80128ec:	3e700000 	.word	0x3e700000
 80128f0:	41700000 	.word	0x41700000
 80128f4:	3fe00000 	.word	0x3fe00000
 80128f8:	0801a770 	.word	0x0801a770
 80128fc:	1acb      	subs	r3, r1, r3
 80128fe:	f8c8 3000 	str.w	r3, [r8]
 8012902:	462b      	mov	r3, r5
 8012904:	e7df      	b.n	80128c6 <__kernel_rem_pio2+0x306>
 8012906:	1e62      	subs	r2, r4, #1
 8012908:	ab0c      	add	r3, sp, #48	; 0x30
 801290a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801290e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012912:	a90c      	add	r1, sp, #48	; 0x30
 8012914:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012918:	e738      	b.n	801278c <__kernel_rem_pio2+0x1cc>
 801291a:	1e62      	subs	r2, r4, #1
 801291c:	ab0c      	add	r3, sp, #48	; 0x30
 801291e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012922:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012926:	e7f4      	b.n	8012912 <__kernel_rem_pio2+0x352>
 8012928:	a90c      	add	r1, sp, #48	; 0x30
 801292a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801292e:	3b01      	subs	r3, #1
 8012930:	430a      	orrs	r2, r1
 8012932:	e788      	b.n	8012846 <__kernel_rem_pio2+0x286>
 8012934:	3301      	adds	r3, #1
 8012936:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801293a:	2900      	cmp	r1, #0
 801293c:	d0fa      	beq.n	8012934 <__kernel_rem_pio2+0x374>
 801293e:	9a08      	ldr	r2, [sp, #32]
 8012940:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8012944:	446a      	add	r2, sp
 8012946:	3a98      	subs	r2, #152	; 0x98
 8012948:	9208      	str	r2, [sp, #32]
 801294a:	9a06      	ldr	r2, [sp, #24]
 801294c:	a920      	add	r1, sp, #128	; 0x80
 801294e:	18a2      	adds	r2, r4, r2
 8012950:	18e3      	adds	r3, r4, r3
 8012952:	f104 0801 	add.w	r8, r4, #1
 8012956:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801295a:	9302      	str	r3, [sp, #8]
 801295c:	9b02      	ldr	r3, [sp, #8]
 801295e:	4543      	cmp	r3, r8
 8012960:	da04      	bge.n	801296c <__kernel_rem_pio2+0x3ac>
 8012962:	461c      	mov	r4, r3
 8012964:	e6a2      	b.n	80126ac <__kernel_rem_pio2+0xec>
 8012966:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012968:	2301      	movs	r3, #1
 801296a:	e7e4      	b.n	8012936 <__kernel_rem_pio2+0x376>
 801296c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801296e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012972:	f7ed fdf7 	bl	8000564 <__aeabi_i2d>
 8012976:	e8e5 0102 	strd	r0, r1, [r5], #8
 801297a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801297c:	46ab      	mov	fp, r5
 801297e:	461c      	mov	r4, r3
 8012980:	f04f 0900 	mov.w	r9, #0
 8012984:	2600      	movs	r6, #0
 8012986:	2700      	movs	r7, #0
 8012988:	9b05      	ldr	r3, [sp, #20]
 801298a:	4599      	cmp	r9, r3
 801298c:	dd06      	ble.n	801299c <__kernel_rem_pio2+0x3dc>
 801298e:	9b08      	ldr	r3, [sp, #32]
 8012990:	e8e3 6702 	strd	r6, r7, [r3], #8
 8012994:	f108 0801 	add.w	r8, r8, #1
 8012998:	9308      	str	r3, [sp, #32]
 801299a:	e7df      	b.n	801295c <__kernel_rem_pio2+0x39c>
 801299c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80129a0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80129a4:	f7ed fe48 	bl	8000638 <__aeabi_dmul>
 80129a8:	4602      	mov	r2, r0
 80129aa:	460b      	mov	r3, r1
 80129ac:	4630      	mov	r0, r6
 80129ae:	4639      	mov	r1, r7
 80129b0:	f7ed fc8c 	bl	80002cc <__adddf3>
 80129b4:	f109 0901 	add.w	r9, r9, #1
 80129b8:	4606      	mov	r6, r0
 80129ba:	460f      	mov	r7, r1
 80129bc:	e7e4      	b.n	8012988 <__kernel_rem_pio2+0x3c8>
 80129be:	3d01      	subs	r5, #1
 80129c0:	e747      	b.n	8012852 <__kernel_rem_pio2+0x292>
 80129c2:	ec47 6b10 	vmov	d0, r6, r7
 80129c6:	f1ca 0000 	rsb	r0, sl, #0
 80129ca:	f000 f949 	bl	8012c60 <scalbn>
 80129ce:	ec57 6b10 	vmov	r6, r7, d0
 80129d2:	4ba0      	ldr	r3, [pc, #640]	; (8012c54 <__kernel_rem_pio2+0x694>)
 80129d4:	ee10 0a10 	vmov	r0, s0
 80129d8:	2200      	movs	r2, #0
 80129da:	4639      	mov	r1, r7
 80129dc:	f7ee f8b2 	bl	8000b44 <__aeabi_dcmpge>
 80129e0:	b1f8      	cbz	r0, 8012a22 <__kernel_rem_pio2+0x462>
 80129e2:	4b9d      	ldr	r3, [pc, #628]	; (8012c58 <__kernel_rem_pio2+0x698>)
 80129e4:	2200      	movs	r2, #0
 80129e6:	4630      	mov	r0, r6
 80129e8:	4639      	mov	r1, r7
 80129ea:	f7ed fe25 	bl	8000638 <__aeabi_dmul>
 80129ee:	f7ee f8d3 	bl	8000b98 <__aeabi_d2iz>
 80129f2:	4680      	mov	r8, r0
 80129f4:	f7ed fdb6 	bl	8000564 <__aeabi_i2d>
 80129f8:	4b96      	ldr	r3, [pc, #600]	; (8012c54 <__kernel_rem_pio2+0x694>)
 80129fa:	2200      	movs	r2, #0
 80129fc:	f7ed fe1c 	bl	8000638 <__aeabi_dmul>
 8012a00:	460b      	mov	r3, r1
 8012a02:	4602      	mov	r2, r0
 8012a04:	4639      	mov	r1, r7
 8012a06:	4630      	mov	r0, r6
 8012a08:	f7ed fc5e 	bl	80002c8 <__aeabi_dsub>
 8012a0c:	f7ee f8c4 	bl	8000b98 <__aeabi_d2iz>
 8012a10:	1c65      	adds	r5, r4, #1
 8012a12:	ab0c      	add	r3, sp, #48	; 0x30
 8012a14:	f10a 0a18 	add.w	sl, sl, #24
 8012a18:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012a1c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012a20:	e71f      	b.n	8012862 <__kernel_rem_pio2+0x2a2>
 8012a22:	4630      	mov	r0, r6
 8012a24:	4639      	mov	r1, r7
 8012a26:	f7ee f8b7 	bl	8000b98 <__aeabi_d2iz>
 8012a2a:	ab0c      	add	r3, sp, #48	; 0x30
 8012a2c:	4625      	mov	r5, r4
 8012a2e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012a32:	e716      	b.n	8012862 <__kernel_rem_pio2+0x2a2>
 8012a34:	ab0c      	add	r3, sp, #48	; 0x30
 8012a36:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012a3a:	f7ed fd93 	bl	8000564 <__aeabi_i2d>
 8012a3e:	4632      	mov	r2, r6
 8012a40:	463b      	mov	r3, r7
 8012a42:	f7ed fdf9 	bl	8000638 <__aeabi_dmul>
 8012a46:	4642      	mov	r2, r8
 8012a48:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012a4c:	464b      	mov	r3, r9
 8012a4e:	4630      	mov	r0, r6
 8012a50:	4639      	mov	r1, r7
 8012a52:	f7ed fdf1 	bl	8000638 <__aeabi_dmul>
 8012a56:	3c01      	subs	r4, #1
 8012a58:	4606      	mov	r6, r0
 8012a5a:	460f      	mov	r7, r1
 8012a5c:	e713      	b.n	8012886 <__kernel_rem_pio2+0x2c6>
 8012a5e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8012a62:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8012a66:	f7ed fde7 	bl	8000638 <__aeabi_dmul>
 8012a6a:	4602      	mov	r2, r0
 8012a6c:	460b      	mov	r3, r1
 8012a6e:	4648      	mov	r0, r9
 8012a70:	4651      	mov	r1, sl
 8012a72:	f7ed fc2b 	bl	80002cc <__adddf3>
 8012a76:	3701      	adds	r7, #1
 8012a78:	4681      	mov	r9, r0
 8012a7a:	468a      	mov	sl, r1
 8012a7c:	9b00      	ldr	r3, [sp, #0]
 8012a7e:	429f      	cmp	r7, r3
 8012a80:	dc02      	bgt.n	8012a88 <__kernel_rem_pio2+0x4c8>
 8012a82:	9b06      	ldr	r3, [sp, #24]
 8012a84:	429f      	cmp	r7, r3
 8012a86:	ddea      	ble.n	8012a5e <__kernel_rem_pio2+0x49e>
 8012a88:	9a06      	ldr	r2, [sp, #24]
 8012a8a:	ab48      	add	r3, sp, #288	; 0x120
 8012a8c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8012a90:	e9c6 9a00 	strd	r9, sl, [r6]
 8012a94:	3c01      	subs	r4, #1
 8012a96:	e6fa      	b.n	801288e <__kernel_rem_pio2+0x2ce>
 8012a98:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012a9a:	2b02      	cmp	r3, #2
 8012a9c:	dc0b      	bgt.n	8012ab6 <__kernel_rem_pio2+0x4f6>
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	dc39      	bgt.n	8012b16 <__kernel_rem_pio2+0x556>
 8012aa2:	d05d      	beq.n	8012b60 <__kernel_rem_pio2+0x5a0>
 8012aa4:	9b02      	ldr	r3, [sp, #8]
 8012aa6:	f003 0007 	and.w	r0, r3, #7
 8012aaa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8012aae:	ecbd 8b02 	vpop	{d8}
 8012ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ab6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012ab8:	2b03      	cmp	r3, #3
 8012aba:	d1f3      	bne.n	8012aa4 <__kernel_rem_pio2+0x4e4>
 8012abc:	9b05      	ldr	r3, [sp, #20]
 8012abe:	9500      	str	r5, [sp, #0]
 8012ac0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8012ac4:	eb0d 0403 	add.w	r4, sp, r3
 8012ac8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8012acc:	46a2      	mov	sl, r4
 8012ace:	9b00      	ldr	r3, [sp, #0]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	f1aa 0a08 	sub.w	sl, sl, #8
 8012ad6:	dc69      	bgt.n	8012bac <__kernel_rem_pio2+0x5ec>
 8012ad8:	46aa      	mov	sl, r5
 8012ada:	f1ba 0f01 	cmp.w	sl, #1
 8012ade:	f1a4 0408 	sub.w	r4, r4, #8
 8012ae2:	f300 8083 	bgt.w	8012bec <__kernel_rem_pio2+0x62c>
 8012ae6:	9c05      	ldr	r4, [sp, #20]
 8012ae8:	ab48      	add	r3, sp, #288	; 0x120
 8012aea:	441c      	add	r4, r3
 8012aec:	2000      	movs	r0, #0
 8012aee:	2100      	movs	r1, #0
 8012af0:	2d01      	cmp	r5, #1
 8012af2:	f300 809a 	bgt.w	8012c2a <__kernel_rem_pio2+0x66a>
 8012af6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8012afa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012afe:	f1bb 0f00 	cmp.w	fp, #0
 8012b02:	f040 8098 	bne.w	8012c36 <__kernel_rem_pio2+0x676>
 8012b06:	9b04      	ldr	r3, [sp, #16]
 8012b08:	e9c3 7800 	strd	r7, r8, [r3]
 8012b0c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012b10:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012b14:	e7c6      	b.n	8012aa4 <__kernel_rem_pio2+0x4e4>
 8012b16:	9e05      	ldr	r6, [sp, #20]
 8012b18:	ab48      	add	r3, sp, #288	; 0x120
 8012b1a:	441e      	add	r6, r3
 8012b1c:	462c      	mov	r4, r5
 8012b1e:	2000      	movs	r0, #0
 8012b20:	2100      	movs	r1, #0
 8012b22:	2c00      	cmp	r4, #0
 8012b24:	da33      	bge.n	8012b8e <__kernel_rem_pio2+0x5ce>
 8012b26:	f1bb 0f00 	cmp.w	fp, #0
 8012b2a:	d036      	beq.n	8012b9a <__kernel_rem_pio2+0x5da>
 8012b2c:	4602      	mov	r2, r0
 8012b2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b32:	9c04      	ldr	r4, [sp, #16]
 8012b34:	e9c4 2300 	strd	r2, r3, [r4]
 8012b38:	4602      	mov	r2, r0
 8012b3a:	460b      	mov	r3, r1
 8012b3c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8012b40:	f7ed fbc2 	bl	80002c8 <__aeabi_dsub>
 8012b44:	ae4a      	add	r6, sp, #296	; 0x128
 8012b46:	2401      	movs	r4, #1
 8012b48:	42a5      	cmp	r5, r4
 8012b4a:	da29      	bge.n	8012ba0 <__kernel_rem_pio2+0x5e0>
 8012b4c:	f1bb 0f00 	cmp.w	fp, #0
 8012b50:	d002      	beq.n	8012b58 <__kernel_rem_pio2+0x598>
 8012b52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b56:	4619      	mov	r1, r3
 8012b58:	9b04      	ldr	r3, [sp, #16]
 8012b5a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012b5e:	e7a1      	b.n	8012aa4 <__kernel_rem_pio2+0x4e4>
 8012b60:	9c05      	ldr	r4, [sp, #20]
 8012b62:	ab48      	add	r3, sp, #288	; 0x120
 8012b64:	441c      	add	r4, r3
 8012b66:	2000      	movs	r0, #0
 8012b68:	2100      	movs	r1, #0
 8012b6a:	2d00      	cmp	r5, #0
 8012b6c:	da09      	bge.n	8012b82 <__kernel_rem_pio2+0x5c2>
 8012b6e:	f1bb 0f00 	cmp.w	fp, #0
 8012b72:	d002      	beq.n	8012b7a <__kernel_rem_pio2+0x5ba>
 8012b74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b78:	4619      	mov	r1, r3
 8012b7a:	9b04      	ldr	r3, [sp, #16]
 8012b7c:	e9c3 0100 	strd	r0, r1, [r3]
 8012b80:	e790      	b.n	8012aa4 <__kernel_rem_pio2+0x4e4>
 8012b82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b86:	f7ed fba1 	bl	80002cc <__adddf3>
 8012b8a:	3d01      	subs	r5, #1
 8012b8c:	e7ed      	b.n	8012b6a <__kernel_rem_pio2+0x5aa>
 8012b8e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012b92:	f7ed fb9b 	bl	80002cc <__adddf3>
 8012b96:	3c01      	subs	r4, #1
 8012b98:	e7c3      	b.n	8012b22 <__kernel_rem_pio2+0x562>
 8012b9a:	4602      	mov	r2, r0
 8012b9c:	460b      	mov	r3, r1
 8012b9e:	e7c8      	b.n	8012b32 <__kernel_rem_pio2+0x572>
 8012ba0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012ba4:	f7ed fb92 	bl	80002cc <__adddf3>
 8012ba8:	3401      	adds	r4, #1
 8012baa:	e7cd      	b.n	8012b48 <__kernel_rem_pio2+0x588>
 8012bac:	e9da 8900 	ldrd	r8, r9, [sl]
 8012bb0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012bb4:	9b00      	ldr	r3, [sp, #0]
 8012bb6:	3b01      	subs	r3, #1
 8012bb8:	9300      	str	r3, [sp, #0]
 8012bba:	4632      	mov	r2, r6
 8012bbc:	463b      	mov	r3, r7
 8012bbe:	4640      	mov	r0, r8
 8012bc0:	4649      	mov	r1, r9
 8012bc2:	f7ed fb83 	bl	80002cc <__adddf3>
 8012bc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012bca:	4602      	mov	r2, r0
 8012bcc:	460b      	mov	r3, r1
 8012bce:	4640      	mov	r0, r8
 8012bd0:	4649      	mov	r1, r9
 8012bd2:	f7ed fb79 	bl	80002c8 <__aeabi_dsub>
 8012bd6:	4632      	mov	r2, r6
 8012bd8:	463b      	mov	r3, r7
 8012bda:	f7ed fb77 	bl	80002cc <__adddf3>
 8012bde:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012be2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012be6:	ed8a 7b00 	vstr	d7, [sl]
 8012bea:	e770      	b.n	8012ace <__kernel_rem_pio2+0x50e>
 8012bec:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012bf0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012bf4:	4640      	mov	r0, r8
 8012bf6:	4632      	mov	r2, r6
 8012bf8:	463b      	mov	r3, r7
 8012bfa:	4649      	mov	r1, r9
 8012bfc:	f7ed fb66 	bl	80002cc <__adddf3>
 8012c00:	e9cd 0100 	strd	r0, r1, [sp]
 8012c04:	4602      	mov	r2, r0
 8012c06:	460b      	mov	r3, r1
 8012c08:	4640      	mov	r0, r8
 8012c0a:	4649      	mov	r1, r9
 8012c0c:	f7ed fb5c 	bl	80002c8 <__aeabi_dsub>
 8012c10:	4632      	mov	r2, r6
 8012c12:	463b      	mov	r3, r7
 8012c14:	f7ed fb5a 	bl	80002cc <__adddf3>
 8012c18:	ed9d 7b00 	vldr	d7, [sp]
 8012c1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012c20:	ed84 7b00 	vstr	d7, [r4]
 8012c24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012c28:	e757      	b.n	8012ada <__kernel_rem_pio2+0x51a>
 8012c2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012c2e:	f7ed fb4d 	bl	80002cc <__adddf3>
 8012c32:	3d01      	subs	r5, #1
 8012c34:	e75c      	b.n	8012af0 <__kernel_rem_pio2+0x530>
 8012c36:	9b04      	ldr	r3, [sp, #16]
 8012c38:	9a04      	ldr	r2, [sp, #16]
 8012c3a:	601f      	str	r7, [r3, #0]
 8012c3c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012c40:	605c      	str	r4, [r3, #4]
 8012c42:	609d      	str	r5, [r3, #8]
 8012c44:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012c48:	60d3      	str	r3, [r2, #12]
 8012c4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c4e:	6110      	str	r0, [r2, #16]
 8012c50:	6153      	str	r3, [r2, #20]
 8012c52:	e727      	b.n	8012aa4 <__kernel_rem_pio2+0x4e4>
 8012c54:	41700000 	.word	0x41700000
 8012c58:	3e700000 	.word	0x3e700000
 8012c5c:	00000000 	.word	0x00000000

08012c60 <scalbn>:
 8012c60:	b570      	push	{r4, r5, r6, lr}
 8012c62:	ec55 4b10 	vmov	r4, r5, d0
 8012c66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012c6a:	4606      	mov	r6, r0
 8012c6c:	462b      	mov	r3, r5
 8012c6e:	b999      	cbnz	r1, 8012c98 <scalbn+0x38>
 8012c70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012c74:	4323      	orrs	r3, r4
 8012c76:	d03f      	beq.n	8012cf8 <scalbn+0x98>
 8012c78:	4b35      	ldr	r3, [pc, #212]	; (8012d50 <scalbn+0xf0>)
 8012c7a:	4629      	mov	r1, r5
 8012c7c:	ee10 0a10 	vmov	r0, s0
 8012c80:	2200      	movs	r2, #0
 8012c82:	f7ed fcd9 	bl	8000638 <__aeabi_dmul>
 8012c86:	4b33      	ldr	r3, [pc, #204]	; (8012d54 <scalbn+0xf4>)
 8012c88:	429e      	cmp	r6, r3
 8012c8a:	4604      	mov	r4, r0
 8012c8c:	460d      	mov	r5, r1
 8012c8e:	da10      	bge.n	8012cb2 <scalbn+0x52>
 8012c90:	a327      	add	r3, pc, #156	; (adr r3, 8012d30 <scalbn+0xd0>)
 8012c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c96:	e01f      	b.n	8012cd8 <scalbn+0x78>
 8012c98:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8012c9c:	4291      	cmp	r1, r2
 8012c9e:	d10c      	bne.n	8012cba <scalbn+0x5a>
 8012ca0:	ee10 2a10 	vmov	r2, s0
 8012ca4:	4620      	mov	r0, r4
 8012ca6:	4629      	mov	r1, r5
 8012ca8:	f7ed fb10 	bl	80002cc <__adddf3>
 8012cac:	4604      	mov	r4, r0
 8012cae:	460d      	mov	r5, r1
 8012cb0:	e022      	b.n	8012cf8 <scalbn+0x98>
 8012cb2:	460b      	mov	r3, r1
 8012cb4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012cb8:	3936      	subs	r1, #54	; 0x36
 8012cba:	f24c 3250 	movw	r2, #50000	; 0xc350
 8012cbe:	4296      	cmp	r6, r2
 8012cc0:	dd0d      	ble.n	8012cde <scalbn+0x7e>
 8012cc2:	2d00      	cmp	r5, #0
 8012cc4:	a11c      	add	r1, pc, #112	; (adr r1, 8012d38 <scalbn+0xd8>)
 8012cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cca:	da02      	bge.n	8012cd2 <scalbn+0x72>
 8012ccc:	a11c      	add	r1, pc, #112	; (adr r1, 8012d40 <scalbn+0xe0>)
 8012cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cd2:	a319      	add	r3, pc, #100	; (adr r3, 8012d38 <scalbn+0xd8>)
 8012cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd8:	f7ed fcae 	bl	8000638 <__aeabi_dmul>
 8012cdc:	e7e6      	b.n	8012cac <scalbn+0x4c>
 8012cde:	1872      	adds	r2, r6, r1
 8012ce0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012ce4:	428a      	cmp	r2, r1
 8012ce6:	dcec      	bgt.n	8012cc2 <scalbn+0x62>
 8012ce8:	2a00      	cmp	r2, #0
 8012cea:	dd08      	ble.n	8012cfe <scalbn+0x9e>
 8012cec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012cf0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012cf4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012cf8:	ec45 4b10 	vmov	d0, r4, r5
 8012cfc:	bd70      	pop	{r4, r5, r6, pc}
 8012cfe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012d02:	da08      	bge.n	8012d16 <scalbn+0xb6>
 8012d04:	2d00      	cmp	r5, #0
 8012d06:	a10a      	add	r1, pc, #40	; (adr r1, 8012d30 <scalbn+0xd0>)
 8012d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d0c:	dac0      	bge.n	8012c90 <scalbn+0x30>
 8012d0e:	a10e      	add	r1, pc, #56	; (adr r1, 8012d48 <scalbn+0xe8>)
 8012d10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d14:	e7bc      	b.n	8012c90 <scalbn+0x30>
 8012d16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012d1a:	3236      	adds	r2, #54	; 0x36
 8012d1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012d20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012d24:	4620      	mov	r0, r4
 8012d26:	4b0c      	ldr	r3, [pc, #48]	; (8012d58 <scalbn+0xf8>)
 8012d28:	2200      	movs	r2, #0
 8012d2a:	e7d5      	b.n	8012cd8 <scalbn+0x78>
 8012d2c:	f3af 8000 	nop.w
 8012d30:	c2f8f359 	.word	0xc2f8f359
 8012d34:	01a56e1f 	.word	0x01a56e1f
 8012d38:	8800759c 	.word	0x8800759c
 8012d3c:	7e37e43c 	.word	0x7e37e43c
 8012d40:	8800759c 	.word	0x8800759c
 8012d44:	fe37e43c 	.word	0xfe37e43c
 8012d48:	c2f8f359 	.word	0xc2f8f359
 8012d4c:	81a56e1f 	.word	0x81a56e1f
 8012d50:	43500000 	.word	0x43500000
 8012d54:	ffff3cb0 	.word	0xffff3cb0
 8012d58:	3c900000 	.word	0x3c900000
 8012d5c:	00000000 	.word	0x00000000

08012d60 <floor>:
 8012d60:	ec51 0b10 	vmov	r0, r1, d0
 8012d64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d6c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8012d70:	2e13      	cmp	r6, #19
 8012d72:	ee10 5a10 	vmov	r5, s0
 8012d76:	ee10 8a10 	vmov	r8, s0
 8012d7a:	460c      	mov	r4, r1
 8012d7c:	dc31      	bgt.n	8012de2 <floor+0x82>
 8012d7e:	2e00      	cmp	r6, #0
 8012d80:	da14      	bge.n	8012dac <floor+0x4c>
 8012d82:	a333      	add	r3, pc, #204	; (adr r3, 8012e50 <floor+0xf0>)
 8012d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d88:	f7ed faa0 	bl	80002cc <__adddf3>
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	2300      	movs	r3, #0
 8012d90:	f7ed fee2 	bl	8000b58 <__aeabi_dcmpgt>
 8012d94:	b138      	cbz	r0, 8012da6 <floor+0x46>
 8012d96:	2c00      	cmp	r4, #0
 8012d98:	da53      	bge.n	8012e42 <floor+0xe2>
 8012d9a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8012d9e:	4325      	orrs	r5, r4
 8012da0:	d052      	beq.n	8012e48 <floor+0xe8>
 8012da2:	4c2d      	ldr	r4, [pc, #180]	; (8012e58 <floor+0xf8>)
 8012da4:	2500      	movs	r5, #0
 8012da6:	4621      	mov	r1, r4
 8012da8:	4628      	mov	r0, r5
 8012daa:	e024      	b.n	8012df6 <floor+0x96>
 8012dac:	4f2b      	ldr	r7, [pc, #172]	; (8012e5c <floor+0xfc>)
 8012dae:	4137      	asrs	r7, r6
 8012db0:	ea01 0307 	and.w	r3, r1, r7
 8012db4:	4303      	orrs	r3, r0
 8012db6:	d01e      	beq.n	8012df6 <floor+0x96>
 8012db8:	a325      	add	r3, pc, #148	; (adr r3, 8012e50 <floor+0xf0>)
 8012dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dbe:	f7ed fa85 	bl	80002cc <__adddf3>
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	f7ed fec7 	bl	8000b58 <__aeabi_dcmpgt>
 8012dca:	2800      	cmp	r0, #0
 8012dcc:	d0eb      	beq.n	8012da6 <floor+0x46>
 8012dce:	2c00      	cmp	r4, #0
 8012dd0:	bfbe      	ittt	lt
 8012dd2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012dd6:	4133      	asrlt	r3, r6
 8012dd8:	18e4      	addlt	r4, r4, r3
 8012dda:	ea24 0407 	bic.w	r4, r4, r7
 8012dde:	2500      	movs	r5, #0
 8012de0:	e7e1      	b.n	8012da6 <floor+0x46>
 8012de2:	2e33      	cmp	r6, #51	; 0x33
 8012de4:	dd0b      	ble.n	8012dfe <floor+0x9e>
 8012de6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012dea:	d104      	bne.n	8012df6 <floor+0x96>
 8012dec:	ee10 2a10 	vmov	r2, s0
 8012df0:	460b      	mov	r3, r1
 8012df2:	f7ed fa6b 	bl	80002cc <__adddf3>
 8012df6:	ec41 0b10 	vmov	d0, r0, r1
 8012dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dfe:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8012e02:	f04f 37ff 	mov.w	r7, #4294967295
 8012e06:	40df      	lsrs	r7, r3
 8012e08:	4238      	tst	r0, r7
 8012e0a:	d0f4      	beq.n	8012df6 <floor+0x96>
 8012e0c:	a310      	add	r3, pc, #64	; (adr r3, 8012e50 <floor+0xf0>)
 8012e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e12:	f7ed fa5b 	bl	80002cc <__adddf3>
 8012e16:	2200      	movs	r2, #0
 8012e18:	2300      	movs	r3, #0
 8012e1a:	f7ed fe9d 	bl	8000b58 <__aeabi_dcmpgt>
 8012e1e:	2800      	cmp	r0, #0
 8012e20:	d0c1      	beq.n	8012da6 <floor+0x46>
 8012e22:	2c00      	cmp	r4, #0
 8012e24:	da0a      	bge.n	8012e3c <floor+0xdc>
 8012e26:	2e14      	cmp	r6, #20
 8012e28:	d101      	bne.n	8012e2e <floor+0xce>
 8012e2a:	3401      	adds	r4, #1
 8012e2c:	e006      	b.n	8012e3c <floor+0xdc>
 8012e2e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012e32:	2301      	movs	r3, #1
 8012e34:	40b3      	lsls	r3, r6
 8012e36:	441d      	add	r5, r3
 8012e38:	45a8      	cmp	r8, r5
 8012e3a:	d8f6      	bhi.n	8012e2a <floor+0xca>
 8012e3c:	ea25 0507 	bic.w	r5, r5, r7
 8012e40:	e7b1      	b.n	8012da6 <floor+0x46>
 8012e42:	2500      	movs	r5, #0
 8012e44:	462c      	mov	r4, r5
 8012e46:	e7ae      	b.n	8012da6 <floor+0x46>
 8012e48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8012e4c:	e7ab      	b.n	8012da6 <floor+0x46>
 8012e4e:	bf00      	nop
 8012e50:	8800759c 	.word	0x8800759c
 8012e54:	7e37e43c 	.word	0x7e37e43c
 8012e58:	bff00000 	.word	0xbff00000
 8012e5c:	000fffff 	.word	0x000fffff

08012e60 <malloc>:
 8012e60:	4b02      	ldr	r3, [pc, #8]	; (8012e6c <malloc+0xc>)
 8012e62:	4601      	mov	r1, r0
 8012e64:	6818      	ldr	r0, [r3, #0]
 8012e66:	f000 b82b 	b.w	8012ec0 <_malloc_r>
 8012e6a:	bf00      	nop
 8012e6c:	200001f0 	.word	0x200001f0

08012e70 <free>:
 8012e70:	4b02      	ldr	r3, [pc, #8]	; (8012e7c <free+0xc>)
 8012e72:	4601      	mov	r1, r0
 8012e74:	6818      	ldr	r0, [r3, #0]
 8012e76:	f002 be45 	b.w	8015b04 <_free_r>
 8012e7a:	bf00      	nop
 8012e7c:	200001f0 	.word	0x200001f0

08012e80 <sbrk_aligned>:
 8012e80:	b570      	push	{r4, r5, r6, lr}
 8012e82:	4e0e      	ldr	r6, [pc, #56]	; (8012ebc <sbrk_aligned+0x3c>)
 8012e84:	460c      	mov	r4, r1
 8012e86:	6831      	ldr	r1, [r6, #0]
 8012e88:	4605      	mov	r5, r0
 8012e8a:	b911      	cbnz	r1, 8012e92 <sbrk_aligned+0x12>
 8012e8c:	f001 ff34 	bl	8014cf8 <_sbrk_r>
 8012e90:	6030      	str	r0, [r6, #0]
 8012e92:	4621      	mov	r1, r4
 8012e94:	4628      	mov	r0, r5
 8012e96:	f001 ff2f 	bl	8014cf8 <_sbrk_r>
 8012e9a:	1c43      	adds	r3, r0, #1
 8012e9c:	d00a      	beq.n	8012eb4 <sbrk_aligned+0x34>
 8012e9e:	1cc4      	adds	r4, r0, #3
 8012ea0:	f024 0403 	bic.w	r4, r4, #3
 8012ea4:	42a0      	cmp	r0, r4
 8012ea6:	d007      	beq.n	8012eb8 <sbrk_aligned+0x38>
 8012ea8:	1a21      	subs	r1, r4, r0
 8012eaa:	4628      	mov	r0, r5
 8012eac:	f001 ff24 	bl	8014cf8 <_sbrk_r>
 8012eb0:	3001      	adds	r0, #1
 8012eb2:	d101      	bne.n	8012eb8 <sbrk_aligned+0x38>
 8012eb4:	f04f 34ff 	mov.w	r4, #4294967295
 8012eb8:	4620      	mov	r0, r4
 8012eba:	bd70      	pop	{r4, r5, r6, pc}
 8012ebc:	200009fc 	.word	0x200009fc

08012ec0 <_malloc_r>:
 8012ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ec4:	1ccd      	adds	r5, r1, #3
 8012ec6:	f025 0503 	bic.w	r5, r5, #3
 8012eca:	3508      	adds	r5, #8
 8012ecc:	2d0c      	cmp	r5, #12
 8012ece:	bf38      	it	cc
 8012ed0:	250c      	movcc	r5, #12
 8012ed2:	2d00      	cmp	r5, #0
 8012ed4:	4607      	mov	r7, r0
 8012ed6:	db01      	blt.n	8012edc <_malloc_r+0x1c>
 8012ed8:	42a9      	cmp	r1, r5
 8012eda:	d905      	bls.n	8012ee8 <_malloc_r+0x28>
 8012edc:	230c      	movs	r3, #12
 8012ede:	603b      	str	r3, [r7, #0]
 8012ee0:	2600      	movs	r6, #0
 8012ee2:	4630      	mov	r0, r6
 8012ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ee8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012fbc <_malloc_r+0xfc>
 8012eec:	f000 f868 	bl	8012fc0 <__malloc_lock>
 8012ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8012ef4:	461c      	mov	r4, r3
 8012ef6:	bb5c      	cbnz	r4, 8012f50 <_malloc_r+0x90>
 8012ef8:	4629      	mov	r1, r5
 8012efa:	4638      	mov	r0, r7
 8012efc:	f7ff ffc0 	bl	8012e80 <sbrk_aligned>
 8012f00:	1c43      	adds	r3, r0, #1
 8012f02:	4604      	mov	r4, r0
 8012f04:	d155      	bne.n	8012fb2 <_malloc_r+0xf2>
 8012f06:	f8d8 4000 	ldr.w	r4, [r8]
 8012f0a:	4626      	mov	r6, r4
 8012f0c:	2e00      	cmp	r6, #0
 8012f0e:	d145      	bne.n	8012f9c <_malloc_r+0xdc>
 8012f10:	2c00      	cmp	r4, #0
 8012f12:	d048      	beq.n	8012fa6 <_malloc_r+0xe6>
 8012f14:	6823      	ldr	r3, [r4, #0]
 8012f16:	4631      	mov	r1, r6
 8012f18:	4638      	mov	r0, r7
 8012f1a:	eb04 0903 	add.w	r9, r4, r3
 8012f1e:	f001 feeb 	bl	8014cf8 <_sbrk_r>
 8012f22:	4581      	cmp	r9, r0
 8012f24:	d13f      	bne.n	8012fa6 <_malloc_r+0xe6>
 8012f26:	6821      	ldr	r1, [r4, #0]
 8012f28:	1a6d      	subs	r5, r5, r1
 8012f2a:	4629      	mov	r1, r5
 8012f2c:	4638      	mov	r0, r7
 8012f2e:	f7ff ffa7 	bl	8012e80 <sbrk_aligned>
 8012f32:	3001      	adds	r0, #1
 8012f34:	d037      	beq.n	8012fa6 <_malloc_r+0xe6>
 8012f36:	6823      	ldr	r3, [r4, #0]
 8012f38:	442b      	add	r3, r5
 8012f3a:	6023      	str	r3, [r4, #0]
 8012f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d038      	beq.n	8012fb6 <_malloc_r+0xf6>
 8012f44:	685a      	ldr	r2, [r3, #4]
 8012f46:	42a2      	cmp	r2, r4
 8012f48:	d12b      	bne.n	8012fa2 <_malloc_r+0xe2>
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	605a      	str	r2, [r3, #4]
 8012f4e:	e00f      	b.n	8012f70 <_malloc_r+0xb0>
 8012f50:	6822      	ldr	r2, [r4, #0]
 8012f52:	1b52      	subs	r2, r2, r5
 8012f54:	d41f      	bmi.n	8012f96 <_malloc_r+0xd6>
 8012f56:	2a0b      	cmp	r2, #11
 8012f58:	d917      	bls.n	8012f8a <_malloc_r+0xca>
 8012f5a:	1961      	adds	r1, r4, r5
 8012f5c:	42a3      	cmp	r3, r4
 8012f5e:	6025      	str	r5, [r4, #0]
 8012f60:	bf18      	it	ne
 8012f62:	6059      	strne	r1, [r3, #4]
 8012f64:	6863      	ldr	r3, [r4, #4]
 8012f66:	bf08      	it	eq
 8012f68:	f8c8 1000 	streq.w	r1, [r8]
 8012f6c:	5162      	str	r2, [r4, r5]
 8012f6e:	604b      	str	r3, [r1, #4]
 8012f70:	4638      	mov	r0, r7
 8012f72:	f104 060b 	add.w	r6, r4, #11
 8012f76:	f000 f829 	bl	8012fcc <__malloc_unlock>
 8012f7a:	f026 0607 	bic.w	r6, r6, #7
 8012f7e:	1d23      	adds	r3, r4, #4
 8012f80:	1af2      	subs	r2, r6, r3
 8012f82:	d0ae      	beq.n	8012ee2 <_malloc_r+0x22>
 8012f84:	1b9b      	subs	r3, r3, r6
 8012f86:	50a3      	str	r3, [r4, r2]
 8012f88:	e7ab      	b.n	8012ee2 <_malloc_r+0x22>
 8012f8a:	42a3      	cmp	r3, r4
 8012f8c:	6862      	ldr	r2, [r4, #4]
 8012f8e:	d1dd      	bne.n	8012f4c <_malloc_r+0x8c>
 8012f90:	f8c8 2000 	str.w	r2, [r8]
 8012f94:	e7ec      	b.n	8012f70 <_malloc_r+0xb0>
 8012f96:	4623      	mov	r3, r4
 8012f98:	6864      	ldr	r4, [r4, #4]
 8012f9a:	e7ac      	b.n	8012ef6 <_malloc_r+0x36>
 8012f9c:	4634      	mov	r4, r6
 8012f9e:	6876      	ldr	r6, [r6, #4]
 8012fa0:	e7b4      	b.n	8012f0c <_malloc_r+0x4c>
 8012fa2:	4613      	mov	r3, r2
 8012fa4:	e7cc      	b.n	8012f40 <_malloc_r+0x80>
 8012fa6:	230c      	movs	r3, #12
 8012fa8:	603b      	str	r3, [r7, #0]
 8012faa:	4638      	mov	r0, r7
 8012fac:	f000 f80e 	bl	8012fcc <__malloc_unlock>
 8012fb0:	e797      	b.n	8012ee2 <_malloc_r+0x22>
 8012fb2:	6025      	str	r5, [r4, #0]
 8012fb4:	e7dc      	b.n	8012f70 <_malloc_r+0xb0>
 8012fb6:	605b      	str	r3, [r3, #4]
 8012fb8:	deff      	udf	#255	; 0xff
 8012fba:	bf00      	nop
 8012fbc:	200009f8 	.word	0x200009f8

08012fc0 <__malloc_lock>:
 8012fc0:	4801      	ldr	r0, [pc, #4]	; (8012fc8 <__malloc_lock+0x8>)
 8012fc2:	f001 bee6 	b.w	8014d92 <__retarget_lock_acquire_recursive>
 8012fc6:	bf00      	nop
 8012fc8:	20000b40 	.word	0x20000b40

08012fcc <__malloc_unlock>:
 8012fcc:	4801      	ldr	r0, [pc, #4]	; (8012fd4 <__malloc_unlock+0x8>)
 8012fce:	f001 bee1 	b.w	8014d94 <__retarget_lock_release_recursive>
 8012fd2:	bf00      	nop
 8012fd4:	20000b40 	.word	0x20000b40

08012fd8 <rand>:
 8012fd8:	4b16      	ldr	r3, [pc, #88]	; (8013034 <rand+0x5c>)
 8012fda:	b510      	push	{r4, lr}
 8012fdc:	681c      	ldr	r4, [r3, #0]
 8012fde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012fe0:	b9b3      	cbnz	r3, 8013010 <rand+0x38>
 8012fe2:	2018      	movs	r0, #24
 8012fe4:	f7ff ff3c 	bl	8012e60 <malloc>
 8012fe8:	4602      	mov	r2, r0
 8012fea:	6320      	str	r0, [r4, #48]	; 0x30
 8012fec:	b920      	cbnz	r0, 8012ff8 <rand+0x20>
 8012fee:	4b12      	ldr	r3, [pc, #72]	; (8013038 <rand+0x60>)
 8012ff0:	4812      	ldr	r0, [pc, #72]	; (801303c <rand+0x64>)
 8012ff2:	2152      	movs	r1, #82	; 0x52
 8012ff4:	f001 feee 	bl	8014dd4 <__assert_func>
 8012ff8:	4911      	ldr	r1, [pc, #68]	; (8013040 <rand+0x68>)
 8012ffa:	4b12      	ldr	r3, [pc, #72]	; (8013044 <rand+0x6c>)
 8012ffc:	e9c0 1300 	strd	r1, r3, [r0]
 8013000:	4b11      	ldr	r3, [pc, #68]	; (8013048 <rand+0x70>)
 8013002:	6083      	str	r3, [r0, #8]
 8013004:	230b      	movs	r3, #11
 8013006:	8183      	strh	r3, [r0, #12]
 8013008:	2100      	movs	r1, #0
 801300a:	2001      	movs	r0, #1
 801300c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013010:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013012:	480e      	ldr	r0, [pc, #56]	; (801304c <rand+0x74>)
 8013014:	690b      	ldr	r3, [r1, #16]
 8013016:	694c      	ldr	r4, [r1, #20]
 8013018:	4a0d      	ldr	r2, [pc, #52]	; (8013050 <rand+0x78>)
 801301a:	4358      	muls	r0, r3
 801301c:	fb02 0004 	mla	r0, r2, r4, r0
 8013020:	fba3 3202 	umull	r3, r2, r3, r2
 8013024:	3301      	adds	r3, #1
 8013026:	eb40 0002 	adc.w	r0, r0, r2
 801302a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801302e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013032:	bd10      	pop	{r4, pc}
 8013034:	200001f0 	.word	0x200001f0
 8013038:	0801a7c0 	.word	0x0801a7c0
 801303c:	0801a7d7 	.word	0x0801a7d7
 8013040:	abcd330e 	.word	0xabcd330e
 8013044:	e66d1234 	.word	0xe66d1234
 8013048:	0005deec 	.word	0x0005deec
 801304c:	5851f42d 	.word	0x5851f42d
 8013050:	4c957f2d 	.word	0x4c957f2d

08013054 <sulp>:
 8013054:	b570      	push	{r4, r5, r6, lr}
 8013056:	4604      	mov	r4, r0
 8013058:	460d      	mov	r5, r1
 801305a:	ec45 4b10 	vmov	d0, r4, r5
 801305e:	4616      	mov	r6, r2
 8013060:	f003 fc72 	bl	8016948 <__ulp>
 8013064:	ec51 0b10 	vmov	r0, r1, d0
 8013068:	b17e      	cbz	r6, 801308a <sulp+0x36>
 801306a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801306e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013072:	2b00      	cmp	r3, #0
 8013074:	dd09      	ble.n	801308a <sulp+0x36>
 8013076:	051b      	lsls	r3, r3, #20
 8013078:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801307c:	2400      	movs	r4, #0
 801307e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013082:	4622      	mov	r2, r4
 8013084:	462b      	mov	r3, r5
 8013086:	f7ed fad7 	bl	8000638 <__aeabi_dmul>
 801308a:	bd70      	pop	{r4, r5, r6, pc}
 801308c:	0000      	movs	r0, r0
	...

08013090 <_strtod_l>:
 8013090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013094:	ed2d 8b02 	vpush	{d8}
 8013098:	b09b      	sub	sp, #108	; 0x6c
 801309a:	4604      	mov	r4, r0
 801309c:	9213      	str	r2, [sp, #76]	; 0x4c
 801309e:	2200      	movs	r2, #0
 80130a0:	9216      	str	r2, [sp, #88]	; 0x58
 80130a2:	460d      	mov	r5, r1
 80130a4:	f04f 0800 	mov.w	r8, #0
 80130a8:	f04f 0900 	mov.w	r9, #0
 80130ac:	460a      	mov	r2, r1
 80130ae:	9215      	str	r2, [sp, #84]	; 0x54
 80130b0:	7811      	ldrb	r1, [r2, #0]
 80130b2:	292b      	cmp	r1, #43	; 0x2b
 80130b4:	d04c      	beq.n	8013150 <_strtod_l+0xc0>
 80130b6:	d83a      	bhi.n	801312e <_strtod_l+0x9e>
 80130b8:	290d      	cmp	r1, #13
 80130ba:	d834      	bhi.n	8013126 <_strtod_l+0x96>
 80130bc:	2908      	cmp	r1, #8
 80130be:	d834      	bhi.n	801312a <_strtod_l+0x9a>
 80130c0:	2900      	cmp	r1, #0
 80130c2:	d03d      	beq.n	8013140 <_strtod_l+0xb0>
 80130c4:	2200      	movs	r2, #0
 80130c6:	920a      	str	r2, [sp, #40]	; 0x28
 80130c8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80130ca:	7832      	ldrb	r2, [r6, #0]
 80130cc:	2a30      	cmp	r2, #48	; 0x30
 80130ce:	f040 80b4 	bne.w	801323a <_strtod_l+0x1aa>
 80130d2:	7872      	ldrb	r2, [r6, #1]
 80130d4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80130d8:	2a58      	cmp	r2, #88	; 0x58
 80130da:	d170      	bne.n	80131be <_strtod_l+0x12e>
 80130dc:	9302      	str	r3, [sp, #8]
 80130de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130e0:	9301      	str	r3, [sp, #4]
 80130e2:	ab16      	add	r3, sp, #88	; 0x58
 80130e4:	9300      	str	r3, [sp, #0]
 80130e6:	4a8e      	ldr	r2, [pc, #568]	; (8013320 <_strtod_l+0x290>)
 80130e8:	ab17      	add	r3, sp, #92	; 0x5c
 80130ea:	a915      	add	r1, sp, #84	; 0x54
 80130ec:	4620      	mov	r0, r4
 80130ee:	f002 fdbd 	bl	8015c6c <__gethex>
 80130f2:	f010 070f 	ands.w	r7, r0, #15
 80130f6:	4605      	mov	r5, r0
 80130f8:	d005      	beq.n	8013106 <_strtod_l+0x76>
 80130fa:	2f06      	cmp	r7, #6
 80130fc:	d12a      	bne.n	8013154 <_strtod_l+0xc4>
 80130fe:	3601      	adds	r6, #1
 8013100:	2300      	movs	r3, #0
 8013102:	9615      	str	r6, [sp, #84]	; 0x54
 8013104:	930a      	str	r3, [sp, #40]	; 0x28
 8013106:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013108:	2b00      	cmp	r3, #0
 801310a:	f040 857f 	bne.w	8013c0c <_strtod_l+0xb7c>
 801310e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013110:	b1db      	cbz	r3, 801314a <_strtod_l+0xba>
 8013112:	4642      	mov	r2, r8
 8013114:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013118:	ec43 2b10 	vmov	d0, r2, r3
 801311c:	b01b      	add	sp, #108	; 0x6c
 801311e:	ecbd 8b02 	vpop	{d8}
 8013122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013126:	2920      	cmp	r1, #32
 8013128:	d1cc      	bne.n	80130c4 <_strtod_l+0x34>
 801312a:	3201      	adds	r2, #1
 801312c:	e7bf      	b.n	80130ae <_strtod_l+0x1e>
 801312e:	292d      	cmp	r1, #45	; 0x2d
 8013130:	d1c8      	bne.n	80130c4 <_strtod_l+0x34>
 8013132:	2101      	movs	r1, #1
 8013134:	910a      	str	r1, [sp, #40]	; 0x28
 8013136:	1c51      	adds	r1, r2, #1
 8013138:	9115      	str	r1, [sp, #84]	; 0x54
 801313a:	7852      	ldrb	r2, [r2, #1]
 801313c:	2a00      	cmp	r2, #0
 801313e:	d1c3      	bne.n	80130c8 <_strtod_l+0x38>
 8013140:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013142:	9515      	str	r5, [sp, #84]	; 0x54
 8013144:	2b00      	cmp	r3, #0
 8013146:	f040 855f 	bne.w	8013c08 <_strtod_l+0xb78>
 801314a:	4642      	mov	r2, r8
 801314c:	464b      	mov	r3, r9
 801314e:	e7e3      	b.n	8013118 <_strtod_l+0x88>
 8013150:	2100      	movs	r1, #0
 8013152:	e7ef      	b.n	8013134 <_strtod_l+0xa4>
 8013154:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013156:	b13a      	cbz	r2, 8013168 <_strtod_l+0xd8>
 8013158:	2135      	movs	r1, #53	; 0x35
 801315a:	a818      	add	r0, sp, #96	; 0x60
 801315c:	f003 fcf1 	bl	8016b42 <__copybits>
 8013160:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013162:	4620      	mov	r0, r4
 8013164:	f003 f8c4 	bl	80162f0 <_Bfree>
 8013168:	3f01      	subs	r7, #1
 801316a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801316c:	2f04      	cmp	r7, #4
 801316e:	d806      	bhi.n	801317e <_strtod_l+0xee>
 8013170:	e8df f007 	tbb	[pc, r7]
 8013174:	201d0314 	.word	0x201d0314
 8013178:	14          	.byte	0x14
 8013179:	00          	.byte	0x00
 801317a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801317e:	05e9      	lsls	r1, r5, #23
 8013180:	bf48      	it	mi
 8013182:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8013186:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801318a:	0d1b      	lsrs	r3, r3, #20
 801318c:	051b      	lsls	r3, r3, #20
 801318e:	2b00      	cmp	r3, #0
 8013190:	d1b9      	bne.n	8013106 <_strtod_l+0x76>
 8013192:	f001 fdd3 	bl	8014d3c <__errno>
 8013196:	2322      	movs	r3, #34	; 0x22
 8013198:	6003      	str	r3, [r0, #0]
 801319a:	e7b4      	b.n	8013106 <_strtod_l+0x76>
 801319c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80131a0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80131a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80131a8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80131ac:	e7e7      	b.n	801317e <_strtod_l+0xee>
 80131ae:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013328 <_strtod_l+0x298>
 80131b2:	e7e4      	b.n	801317e <_strtod_l+0xee>
 80131b4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80131b8:	f04f 38ff 	mov.w	r8, #4294967295
 80131bc:	e7df      	b.n	801317e <_strtod_l+0xee>
 80131be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131c0:	1c5a      	adds	r2, r3, #1
 80131c2:	9215      	str	r2, [sp, #84]	; 0x54
 80131c4:	785b      	ldrb	r3, [r3, #1]
 80131c6:	2b30      	cmp	r3, #48	; 0x30
 80131c8:	d0f9      	beq.n	80131be <_strtod_l+0x12e>
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d09b      	beq.n	8013106 <_strtod_l+0x76>
 80131ce:	2301      	movs	r3, #1
 80131d0:	f04f 0a00 	mov.w	sl, #0
 80131d4:	9304      	str	r3, [sp, #16]
 80131d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80131da:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80131de:	46d3      	mov	fp, sl
 80131e0:	220a      	movs	r2, #10
 80131e2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80131e4:	7806      	ldrb	r6, [r0, #0]
 80131e6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80131ea:	b2d9      	uxtb	r1, r3
 80131ec:	2909      	cmp	r1, #9
 80131ee:	d926      	bls.n	801323e <_strtod_l+0x1ae>
 80131f0:	494c      	ldr	r1, [pc, #304]	; (8013324 <_strtod_l+0x294>)
 80131f2:	2201      	movs	r2, #1
 80131f4:	f001 fcc7 	bl	8014b86 <strncmp>
 80131f8:	2800      	cmp	r0, #0
 80131fa:	d030      	beq.n	801325e <_strtod_l+0x1ce>
 80131fc:	2000      	movs	r0, #0
 80131fe:	4632      	mov	r2, r6
 8013200:	9005      	str	r0, [sp, #20]
 8013202:	465e      	mov	r6, fp
 8013204:	4603      	mov	r3, r0
 8013206:	2a65      	cmp	r2, #101	; 0x65
 8013208:	d001      	beq.n	801320e <_strtod_l+0x17e>
 801320a:	2a45      	cmp	r2, #69	; 0x45
 801320c:	d113      	bne.n	8013236 <_strtod_l+0x1a6>
 801320e:	b91e      	cbnz	r6, 8013218 <_strtod_l+0x188>
 8013210:	9a04      	ldr	r2, [sp, #16]
 8013212:	4302      	orrs	r2, r0
 8013214:	d094      	beq.n	8013140 <_strtod_l+0xb0>
 8013216:	2600      	movs	r6, #0
 8013218:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801321a:	1c6a      	adds	r2, r5, #1
 801321c:	9215      	str	r2, [sp, #84]	; 0x54
 801321e:	786a      	ldrb	r2, [r5, #1]
 8013220:	2a2b      	cmp	r2, #43	; 0x2b
 8013222:	d074      	beq.n	801330e <_strtod_l+0x27e>
 8013224:	2a2d      	cmp	r2, #45	; 0x2d
 8013226:	d078      	beq.n	801331a <_strtod_l+0x28a>
 8013228:	f04f 0c00 	mov.w	ip, #0
 801322c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013230:	2909      	cmp	r1, #9
 8013232:	d97f      	bls.n	8013334 <_strtod_l+0x2a4>
 8013234:	9515      	str	r5, [sp, #84]	; 0x54
 8013236:	2700      	movs	r7, #0
 8013238:	e09e      	b.n	8013378 <_strtod_l+0x2e8>
 801323a:	2300      	movs	r3, #0
 801323c:	e7c8      	b.n	80131d0 <_strtod_l+0x140>
 801323e:	f1bb 0f08 	cmp.w	fp, #8
 8013242:	bfd8      	it	le
 8013244:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8013246:	f100 0001 	add.w	r0, r0, #1
 801324a:	bfda      	itte	le
 801324c:	fb02 3301 	mlale	r3, r2, r1, r3
 8013250:	9309      	strle	r3, [sp, #36]	; 0x24
 8013252:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8013256:	f10b 0b01 	add.w	fp, fp, #1
 801325a:	9015      	str	r0, [sp, #84]	; 0x54
 801325c:	e7c1      	b.n	80131e2 <_strtod_l+0x152>
 801325e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013260:	1c5a      	adds	r2, r3, #1
 8013262:	9215      	str	r2, [sp, #84]	; 0x54
 8013264:	785a      	ldrb	r2, [r3, #1]
 8013266:	f1bb 0f00 	cmp.w	fp, #0
 801326a:	d037      	beq.n	80132dc <_strtod_l+0x24c>
 801326c:	9005      	str	r0, [sp, #20]
 801326e:	465e      	mov	r6, fp
 8013270:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013274:	2b09      	cmp	r3, #9
 8013276:	d912      	bls.n	801329e <_strtod_l+0x20e>
 8013278:	2301      	movs	r3, #1
 801327a:	e7c4      	b.n	8013206 <_strtod_l+0x176>
 801327c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801327e:	1c5a      	adds	r2, r3, #1
 8013280:	9215      	str	r2, [sp, #84]	; 0x54
 8013282:	785a      	ldrb	r2, [r3, #1]
 8013284:	3001      	adds	r0, #1
 8013286:	2a30      	cmp	r2, #48	; 0x30
 8013288:	d0f8      	beq.n	801327c <_strtod_l+0x1ec>
 801328a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801328e:	2b08      	cmp	r3, #8
 8013290:	f200 84c1 	bhi.w	8013c16 <_strtod_l+0xb86>
 8013294:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013296:	9005      	str	r0, [sp, #20]
 8013298:	2000      	movs	r0, #0
 801329a:	930b      	str	r3, [sp, #44]	; 0x2c
 801329c:	4606      	mov	r6, r0
 801329e:	3a30      	subs	r2, #48	; 0x30
 80132a0:	f100 0301 	add.w	r3, r0, #1
 80132a4:	d014      	beq.n	80132d0 <_strtod_l+0x240>
 80132a6:	9905      	ldr	r1, [sp, #20]
 80132a8:	4419      	add	r1, r3
 80132aa:	9105      	str	r1, [sp, #20]
 80132ac:	4633      	mov	r3, r6
 80132ae:	eb00 0c06 	add.w	ip, r0, r6
 80132b2:	210a      	movs	r1, #10
 80132b4:	4563      	cmp	r3, ip
 80132b6:	d113      	bne.n	80132e0 <_strtod_l+0x250>
 80132b8:	1833      	adds	r3, r6, r0
 80132ba:	2b08      	cmp	r3, #8
 80132bc:	f106 0601 	add.w	r6, r6, #1
 80132c0:	4406      	add	r6, r0
 80132c2:	dc1a      	bgt.n	80132fa <_strtod_l+0x26a>
 80132c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132c6:	230a      	movs	r3, #10
 80132c8:	fb03 2301 	mla	r3, r3, r1, r2
 80132cc:	9309      	str	r3, [sp, #36]	; 0x24
 80132ce:	2300      	movs	r3, #0
 80132d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80132d2:	1c51      	adds	r1, r2, #1
 80132d4:	9115      	str	r1, [sp, #84]	; 0x54
 80132d6:	7852      	ldrb	r2, [r2, #1]
 80132d8:	4618      	mov	r0, r3
 80132da:	e7c9      	b.n	8013270 <_strtod_l+0x1e0>
 80132dc:	4658      	mov	r0, fp
 80132de:	e7d2      	b.n	8013286 <_strtod_l+0x1f6>
 80132e0:	2b08      	cmp	r3, #8
 80132e2:	f103 0301 	add.w	r3, r3, #1
 80132e6:	dc03      	bgt.n	80132f0 <_strtod_l+0x260>
 80132e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80132ea:	434f      	muls	r7, r1
 80132ec:	9709      	str	r7, [sp, #36]	; 0x24
 80132ee:	e7e1      	b.n	80132b4 <_strtod_l+0x224>
 80132f0:	2b10      	cmp	r3, #16
 80132f2:	bfd8      	it	le
 80132f4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80132f8:	e7dc      	b.n	80132b4 <_strtod_l+0x224>
 80132fa:	2e10      	cmp	r6, #16
 80132fc:	bfdc      	itt	le
 80132fe:	230a      	movle	r3, #10
 8013300:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8013304:	e7e3      	b.n	80132ce <_strtod_l+0x23e>
 8013306:	2300      	movs	r3, #0
 8013308:	9305      	str	r3, [sp, #20]
 801330a:	2301      	movs	r3, #1
 801330c:	e780      	b.n	8013210 <_strtod_l+0x180>
 801330e:	f04f 0c00 	mov.w	ip, #0
 8013312:	1caa      	adds	r2, r5, #2
 8013314:	9215      	str	r2, [sp, #84]	; 0x54
 8013316:	78aa      	ldrb	r2, [r5, #2]
 8013318:	e788      	b.n	801322c <_strtod_l+0x19c>
 801331a:	f04f 0c01 	mov.w	ip, #1
 801331e:	e7f8      	b.n	8013312 <_strtod_l+0x282>
 8013320:	0801a834 	.word	0x0801a834
 8013324:	0801a82f 	.word	0x0801a82f
 8013328:	7ff00000 	.word	0x7ff00000
 801332c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801332e:	1c51      	adds	r1, r2, #1
 8013330:	9115      	str	r1, [sp, #84]	; 0x54
 8013332:	7852      	ldrb	r2, [r2, #1]
 8013334:	2a30      	cmp	r2, #48	; 0x30
 8013336:	d0f9      	beq.n	801332c <_strtod_l+0x29c>
 8013338:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801333c:	2908      	cmp	r1, #8
 801333e:	f63f af7a 	bhi.w	8013236 <_strtod_l+0x1a6>
 8013342:	3a30      	subs	r2, #48	; 0x30
 8013344:	9208      	str	r2, [sp, #32]
 8013346:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013348:	920c      	str	r2, [sp, #48]	; 0x30
 801334a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801334c:	1c57      	adds	r7, r2, #1
 801334e:	9715      	str	r7, [sp, #84]	; 0x54
 8013350:	7852      	ldrb	r2, [r2, #1]
 8013352:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013356:	f1be 0f09 	cmp.w	lr, #9
 801335a:	d938      	bls.n	80133ce <_strtod_l+0x33e>
 801335c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801335e:	1a7f      	subs	r7, r7, r1
 8013360:	2f08      	cmp	r7, #8
 8013362:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013366:	dc03      	bgt.n	8013370 <_strtod_l+0x2e0>
 8013368:	9908      	ldr	r1, [sp, #32]
 801336a:	428f      	cmp	r7, r1
 801336c:	bfa8      	it	ge
 801336e:	460f      	movge	r7, r1
 8013370:	f1bc 0f00 	cmp.w	ip, #0
 8013374:	d000      	beq.n	8013378 <_strtod_l+0x2e8>
 8013376:	427f      	negs	r7, r7
 8013378:	2e00      	cmp	r6, #0
 801337a:	d14f      	bne.n	801341c <_strtod_l+0x38c>
 801337c:	9904      	ldr	r1, [sp, #16]
 801337e:	4301      	orrs	r1, r0
 8013380:	f47f aec1 	bne.w	8013106 <_strtod_l+0x76>
 8013384:	2b00      	cmp	r3, #0
 8013386:	f47f aedb 	bne.w	8013140 <_strtod_l+0xb0>
 801338a:	2a69      	cmp	r2, #105	; 0x69
 801338c:	d029      	beq.n	80133e2 <_strtod_l+0x352>
 801338e:	dc26      	bgt.n	80133de <_strtod_l+0x34e>
 8013390:	2a49      	cmp	r2, #73	; 0x49
 8013392:	d026      	beq.n	80133e2 <_strtod_l+0x352>
 8013394:	2a4e      	cmp	r2, #78	; 0x4e
 8013396:	f47f aed3 	bne.w	8013140 <_strtod_l+0xb0>
 801339a:	499b      	ldr	r1, [pc, #620]	; (8013608 <_strtod_l+0x578>)
 801339c:	a815      	add	r0, sp, #84	; 0x54
 801339e:	f002 fea5 	bl	80160ec <__match>
 80133a2:	2800      	cmp	r0, #0
 80133a4:	f43f aecc 	beq.w	8013140 <_strtod_l+0xb0>
 80133a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133aa:	781b      	ldrb	r3, [r3, #0]
 80133ac:	2b28      	cmp	r3, #40	; 0x28
 80133ae:	d12f      	bne.n	8013410 <_strtod_l+0x380>
 80133b0:	4996      	ldr	r1, [pc, #600]	; (801360c <_strtod_l+0x57c>)
 80133b2:	aa18      	add	r2, sp, #96	; 0x60
 80133b4:	a815      	add	r0, sp, #84	; 0x54
 80133b6:	f002 fead 	bl	8016114 <__hexnan>
 80133ba:	2805      	cmp	r0, #5
 80133bc:	d128      	bne.n	8013410 <_strtod_l+0x380>
 80133be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80133c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80133c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80133c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80133cc:	e69b      	b.n	8013106 <_strtod_l+0x76>
 80133ce:	9f08      	ldr	r7, [sp, #32]
 80133d0:	210a      	movs	r1, #10
 80133d2:	fb01 2107 	mla	r1, r1, r7, r2
 80133d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80133da:	9208      	str	r2, [sp, #32]
 80133dc:	e7b5      	b.n	801334a <_strtod_l+0x2ba>
 80133de:	2a6e      	cmp	r2, #110	; 0x6e
 80133e0:	e7d9      	b.n	8013396 <_strtod_l+0x306>
 80133e2:	498b      	ldr	r1, [pc, #556]	; (8013610 <_strtod_l+0x580>)
 80133e4:	a815      	add	r0, sp, #84	; 0x54
 80133e6:	f002 fe81 	bl	80160ec <__match>
 80133ea:	2800      	cmp	r0, #0
 80133ec:	f43f aea8 	beq.w	8013140 <_strtod_l+0xb0>
 80133f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133f2:	4988      	ldr	r1, [pc, #544]	; (8013614 <_strtod_l+0x584>)
 80133f4:	3b01      	subs	r3, #1
 80133f6:	a815      	add	r0, sp, #84	; 0x54
 80133f8:	9315      	str	r3, [sp, #84]	; 0x54
 80133fa:	f002 fe77 	bl	80160ec <__match>
 80133fe:	b910      	cbnz	r0, 8013406 <_strtod_l+0x376>
 8013400:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013402:	3301      	adds	r3, #1
 8013404:	9315      	str	r3, [sp, #84]	; 0x54
 8013406:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8013624 <_strtod_l+0x594>
 801340a:	f04f 0800 	mov.w	r8, #0
 801340e:	e67a      	b.n	8013106 <_strtod_l+0x76>
 8013410:	4881      	ldr	r0, [pc, #516]	; (8013618 <_strtod_l+0x588>)
 8013412:	f001 fcd1 	bl	8014db8 <nan>
 8013416:	ec59 8b10 	vmov	r8, r9, d0
 801341a:	e674      	b.n	8013106 <_strtod_l+0x76>
 801341c:	9b05      	ldr	r3, [sp, #20]
 801341e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013420:	1afb      	subs	r3, r7, r3
 8013422:	f1bb 0f00 	cmp.w	fp, #0
 8013426:	bf08      	it	eq
 8013428:	46b3      	moveq	fp, r6
 801342a:	2e10      	cmp	r6, #16
 801342c:	9308      	str	r3, [sp, #32]
 801342e:	4635      	mov	r5, r6
 8013430:	bfa8      	it	ge
 8013432:	2510      	movge	r5, #16
 8013434:	f7ed f886 	bl	8000544 <__aeabi_ui2d>
 8013438:	2e09      	cmp	r6, #9
 801343a:	4680      	mov	r8, r0
 801343c:	4689      	mov	r9, r1
 801343e:	dd13      	ble.n	8013468 <_strtod_l+0x3d8>
 8013440:	4b76      	ldr	r3, [pc, #472]	; (801361c <_strtod_l+0x58c>)
 8013442:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013446:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801344a:	f7ed f8f5 	bl	8000638 <__aeabi_dmul>
 801344e:	4680      	mov	r8, r0
 8013450:	4650      	mov	r0, sl
 8013452:	4689      	mov	r9, r1
 8013454:	f7ed f876 	bl	8000544 <__aeabi_ui2d>
 8013458:	4602      	mov	r2, r0
 801345a:	460b      	mov	r3, r1
 801345c:	4640      	mov	r0, r8
 801345e:	4649      	mov	r1, r9
 8013460:	f7ec ff34 	bl	80002cc <__adddf3>
 8013464:	4680      	mov	r8, r0
 8013466:	4689      	mov	r9, r1
 8013468:	2e0f      	cmp	r6, #15
 801346a:	dc38      	bgt.n	80134de <_strtod_l+0x44e>
 801346c:	9b08      	ldr	r3, [sp, #32]
 801346e:	2b00      	cmp	r3, #0
 8013470:	f43f ae49 	beq.w	8013106 <_strtod_l+0x76>
 8013474:	dd24      	ble.n	80134c0 <_strtod_l+0x430>
 8013476:	2b16      	cmp	r3, #22
 8013478:	dc0b      	bgt.n	8013492 <_strtod_l+0x402>
 801347a:	4968      	ldr	r1, [pc, #416]	; (801361c <_strtod_l+0x58c>)
 801347c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013484:	4642      	mov	r2, r8
 8013486:	464b      	mov	r3, r9
 8013488:	f7ed f8d6 	bl	8000638 <__aeabi_dmul>
 801348c:	4680      	mov	r8, r0
 801348e:	4689      	mov	r9, r1
 8013490:	e639      	b.n	8013106 <_strtod_l+0x76>
 8013492:	9a08      	ldr	r2, [sp, #32]
 8013494:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8013498:	4293      	cmp	r3, r2
 801349a:	db20      	blt.n	80134de <_strtod_l+0x44e>
 801349c:	4c5f      	ldr	r4, [pc, #380]	; (801361c <_strtod_l+0x58c>)
 801349e:	f1c6 060f 	rsb	r6, r6, #15
 80134a2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80134a6:	4642      	mov	r2, r8
 80134a8:	464b      	mov	r3, r9
 80134aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134ae:	f7ed f8c3 	bl	8000638 <__aeabi_dmul>
 80134b2:	9b08      	ldr	r3, [sp, #32]
 80134b4:	1b9e      	subs	r6, r3, r6
 80134b6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80134ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 80134be:	e7e3      	b.n	8013488 <_strtod_l+0x3f8>
 80134c0:	9b08      	ldr	r3, [sp, #32]
 80134c2:	3316      	adds	r3, #22
 80134c4:	db0b      	blt.n	80134de <_strtod_l+0x44e>
 80134c6:	9b05      	ldr	r3, [sp, #20]
 80134c8:	1bdf      	subs	r7, r3, r7
 80134ca:	4b54      	ldr	r3, [pc, #336]	; (801361c <_strtod_l+0x58c>)
 80134cc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80134d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80134d4:	4640      	mov	r0, r8
 80134d6:	4649      	mov	r1, r9
 80134d8:	f7ed f9d8 	bl	800088c <__aeabi_ddiv>
 80134dc:	e7d6      	b.n	801348c <_strtod_l+0x3fc>
 80134de:	9b08      	ldr	r3, [sp, #32]
 80134e0:	1b75      	subs	r5, r6, r5
 80134e2:	441d      	add	r5, r3
 80134e4:	2d00      	cmp	r5, #0
 80134e6:	dd70      	ble.n	80135ca <_strtod_l+0x53a>
 80134e8:	f015 030f 	ands.w	r3, r5, #15
 80134ec:	d00a      	beq.n	8013504 <_strtod_l+0x474>
 80134ee:	494b      	ldr	r1, [pc, #300]	; (801361c <_strtod_l+0x58c>)
 80134f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80134f4:	4642      	mov	r2, r8
 80134f6:	464b      	mov	r3, r9
 80134f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134fc:	f7ed f89c 	bl	8000638 <__aeabi_dmul>
 8013500:	4680      	mov	r8, r0
 8013502:	4689      	mov	r9, r1
 8013504:	f035 050f 	bics.w	r5, r5, #15
 8013508:	d04d      	beq.n	80135a6 <_strtod_l+0x516>
 801350a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801350e:	dd22      	ble.n	8013556 <_strtod_l+0x4c6>
 8013510:	2500      	movs	r5, #0
 8013512:	46ab      	mov	fp, r5
 8013514:	9509      	str	r5, [sp, #36]	; 0x24
 8013516:	9505      	str	r5, [sp, #20]
 8013518:	2322      	movs	r3, #34	; 0x22
 801351a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013624 <_strtod_l+0x594>
 801351e:	6023      	str	r3, [r4, #0]
 8013520:	f04f 0800 	mov.w	r8, #0
 8013524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013526:	2b00      	cmp	r3, #0
 8013528:	f43f aded 	beq.w	8013106 <_strtod_l+0x76>
 801352c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801352e:	4620      	mov	r0, r4
 8013530:	f002 fede 	bl	80162f0 <_Bfree>
 8013534:	9905      	ldr	r1, [sp, #20]
 8013536:	4620      	mov	r0, r4
 8013538:	f002 feda 	bl	80162f0 <_Bfree>
 801353c:	4659      	mov	r1, fp
 801353e:	4620      	mov	r0, r4
 8013540:	f002 fed6 	bl	80162f0 <_Bfree>
 8013544:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013546:	4620      	mov	r0, r4
 8013548:	f002 fed2 	bl	80162f0 <_Bfree>
 801354c:	4629      	mov	r1, r5
 801354e:	4620      	mov	r0, r4
 8013550:	f002 fece 	bl	80162f0 <_Bfree>
 8013554:	e5d7      	b.n	8013106 <_strtod_l+0x76>
 8013556:	4b32      	ldr	r3, [pc, #200]	; (8013620 <_strtod_l+0x590>)
 8013558:	9304      	str	r3, [sp, #16]
 801355a:	2300      	movs	r3, #0
 801355c:	112d      	asrs	r5, r5, #4
 801355e:	4640      	mov	r0, r8
 8013560:	4649      	mov	r1, r9
 8013562:	469a      	mov	sl, r3
 8013564:	2d01      	cmp	r5, #1
 8013566:	dc21      	bgt.n	80135ac <_strtod_l+0x51c>
 8013568:	b10b      	cbz	r3, 801356e <_strtod_l+0x4de>
 801356a:	4680      	mov	r8, r0
 801356c:	4689      	mov	r9, r1
 801356e:	492c      	ldr	r1, [pc, #176]	; (8013620 <_strtod_l+0x590>)
 8013570:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8013574:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013578:	4642      	mov	r2, r8
 801357a:	464b      	mov	r3, r9
 801357c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013580:	f7ed f85a 	bl	8000638 <__aeabi_dmul>
 8013584:	4b27      	ldr	r3, [pc, #156]	; (8013624 <_strtod_l+0x594>)
 8013586:	460a      	mov	r2, r1
 8013588:	400b      	ands	r3, r1
 801358a:	4927      	ldr	r1, [pc, #156]	; (8013628 <_strtod_l+0x598>)
 801358c:	428b      	cmp	r3, r1
 801358e:	4680      	mov	r8, r0
 8013590:	d8be      	bhi.n	8013510 <_strtod_l+0x480>
 8013592:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013596:	428b      	cmp	r3, r1
 8013598:	bf86      	itte	hi
 801359a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801362c <_strtod_l+0x59c>
 801359e:	f04f 38ff 	movhi.w	r8, #4294967295
 80135a2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80135a6:	2300      	movs	r3, #0
 80135a8:	9304      	str	r3, [sp, #16]
 80135aa:	e07b      	b.n	80136a4 <_strtod_l+0x614>
 80135ac:	07ea      	lsls	r2, r5, #31
 80135ae:	d505      	bpl.n	80135bc <_strtod_l+0x52c>
 80135b0:	9b04      	ldr	r3, [sp, #16]
 80135b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135b6:	f7ed f83f 	bl	8000638 <__aeabi_dmul>
 80135ba:	2301      	movs	r3, #1
 80135bc:	9a04      	ldr	r2, [sp, #16]
 80135be:	3208      	adds	r2, #8
 80135c0:	f10a 0a01 	add.w	sl, sl, #1
 80135c4:	106d      	asrs	r5, r5, #1
 80135c6:	9204      	str	r2, [sp, #16]
 80135c8:	e7cc      	b.n	8013564 <_strtod_l+0x4d4>
 80135ca:	d0ec      	beq.n	80135a6 <_strtod_l+0x516>
 80135cc:	426d      	negs	r5, r5
 80135ce:	f015 020f 	ands.w	r2, r5, #15
 80135d2:	d00a      	beq.n	80135ea <_strtod_l+0x55a>
 80135d4:	4b11      	ldr	r3, [pc, #68]	; (801361c <_strtod_l+0x58c>)
 80135d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80135da:	4640      	mov	r0, r8
 80135dc:	4649      	mov	r1, r9
 80135de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e2:	f7ed f953 	bl	800088c <__aeabi_ddiv>
 80135e6:	4680      	mov	r8, r0
 80135e8:	4689      	mov	r9, r1
 80135ea:	112d      	asrs	r5, r5, #4
 80135ec:	d0db      	beq.n	80135a6 <_strtod_l+0x516>
 80135ee:	2d1f      	cmp	r5, #31
 80135f0:	dd1e      	ble.n	8013630 <_strtod_l+0x5a0>
 80135f2:	2500      	movs	r5, #0
 80135f4:	46ab      	mov	fp, r5
 80135f6:	9509      	str	r5, [sp, #36]	; 0x24
 80135f8:	9505      	str	r5, [sp, #20]
 80135fa:	2322      	movs	r3, #34	; 0x22
 80135fc:	f04f 0800 	mov.w	r8, #0
 8013600:	f04f 0900 	mov.w	r9, #0
 8013604:	6023      	str	r3, [r4, #0]
 8013606:	e78d      	b.n	8013524 <_strtod_l+0x494>
 8013608:	0801a996 	.word	0x0801a996
 801360c:	0801a848 	.word	0x0801a848
 8013610:	0801a98e 	.word	0x0801a98e
 8013614:	0801aa5e 	.word	0x0801aa5e
 8013618:	0801aa5a 	.word	0x0801aa5a
 801361c:	0801abb8 	.word	0x0801abb8
 8013620:	0801ab90 	.word	0x0801ab90
 8013624:	7ff00000 	.word	0x7ff00000
 8013628:	7ca00000 	.word	0x7ca00000
 801362c:	7fefffff 	.word	0x7fefffff
 8013630:	f015 0310 	ands.w	r3, r5, #16
 8013634:	bf18      	it	ne
 8013636:	236a      	movne	r3, #106	; 0x6a
 8013638:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80139dc <_strtod_l+0x94c>
 801363c:	9304      	str	r3, [sp, #16]
 801363e:	4640      	mov	r0, r8
 8013640:	4649      	mov	r1, r9
 8013642:	2300      	movs	r3, #0
 8013644:	07ea      	lsls	r2, r5, #31
 8013646:	d504      	bpl.n	8013652 <_strtod_l+0x5c2>
 8013648:	e9da 2300 	ldrd	r2, r3, [sl]
 801364c:	f7ec fff4 	bl	8000638 <__aeabi_dmul>
 8013650:	2301      	movs	r3, #1
 8013652:	106d      	asrs	r5, r5, #1
 8013654:	f10a 0a08 	add.w	sl, sl, #8
 8013658:	d1f4      	bne.n	8013644 <_strtod_l+0x5b4>
 801365a:	b10b      	cbz	r3, 8013660 <_strtod_l+0x5d0>
 801365c:	4680      	mov	r8, r0
 801365e:	4689      	mov	r9, r1
 8013660:	9b04      	ldr	r3, [sp, #16]
 8013662:	b1bb      	cbz	r3, 8013694 <_strtod_l+0x604>
 8013664:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8013668:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801366c:	2b00      	cmp	r3, #0
 801366e:	4649      	mov	r1, r9
 8013670:	dd10      	ble.n	8013694 <_strtod_l+0x604>
 8013672:	2b1f      	cmp	r3, #31
 8013674:	f340 811e 	ble.w	80138b4 <_strtod_l+0x824>
 8013678:	2b34      	cmp	r3, #52	; 0x34
 801367a:	bfde      	ittt	le
 801367c:	f04f 33ff 	movle.w	r3, #4294967295
 8013680:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013684:	4093      	lslle	r3, r2
 8013686:	f04f 0800 	mov.w	r8, #0
 801368a:	bfcc      	ite	gt
 801368c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013690:	ea03 0901 	andle.w	r9, r3, r1
 8013694:	2200      	movs	r2, #0
 8013696:	2300      	movs	r3, #0
 8013698:	4640      	mov	r0, r8
 801369a:	4649      	mov	r1, r9
 801369c:	f7ed fa34 	bl	8000b08 <__aeabi_dcmpeq>
 80136a0:	2800      	cmp	r0, #0
 80136a2:	d1a6      	bne.n	80135f2 <_strtod_l+0x562>
 80136a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136a6:	9300      	str	r3, [sp, #0]
 80136a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80136aa:	4633      	mov	r3, r6
 80136ac:	465a      	mov	r2, fp
 80136ae:	4620      	mov	r0, r4
 80136b0:	f002 fe86 	bl	80163c0 <__s2b>
 80136b4:	9009      	str	r0, [sp, #36]	; 0x24
 80136b6:	2800      	cmp	r0, #0
 80136b8:	f43f af2a 	beq.w	8013510 <_strtod_l+0x480>
 80136bc:	9a08      	ldr	r2, [sp, #32]
 80136be:	9b05      	ldr	r3, [sp, #20]
 80136c0:	2a00      	cmp	r2, #0
 80136c2:	eba3 0307 	sub.w	r3, r3, r7
 80136c6:	bfa8      	it	ge
 80136c8:	2300      	movge	r3, #0
 80136ca:	930c      	str	r3, [sp, #48]	; 0x30
 80136cc:	2500      	movs	r5, #0
 80136ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80136d2:	9312      	str	r3, [sp, #72]	; 0x48
 80136d4:	46ab      	mov	fp, r5
 80136d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136d8:	4620      	mov	r0, r4
 80136da:	6859      	ldr	r1, [r3, #4]
 80136dc:	f002 fdc8 	bl	8016270 <_Balloc>
 80136e0:	9005      	str	r0, [sp, #20]
 80136e2:	2800      	cmp	r0, #0
 80136e4:	f43f af18 	beq.w	8013518 <_strtod_l+0x488>
 80136e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136ea:	691a      	ldr	r2, [r3, #16]
 80136ec:	3202      	adds	r2, #2
 80136ee:	f103 010c 	add.w	r1, r3, #12
 80136f2:	0092      	lsls	r2, r2, #2
 80136f4:	300c      	adds	r0, #12
 80136f6:	f001 fb4e 	bl	8014d96 <memcpy>
 80136fa:	ec49 8b10 	vmov	d0, r8, r9
 80136fe:	aa18      	add	r2, sp, #96	; 0x60
 8013700:	a917      	add	r1, sp, #92	; 0x5c
 8013702:	4620      	mov	r0, r4
 8013704:	f003 f990 	bl	8016a28 <__d2b>
 8013708:	ec49 8b18 	vmov	d8, r8, r9
 801370c:	9016      	str	r0, [sp, #88]	; 0x58
 801370e:	2800      	cmp	r0, #0
 8013710:	f43f af02 	beq.w	8013518 <_strtod_l+0x488>
 8013714:	2101      	movs	r1, #1
 8013716:	4620      	mov	r0, r4
 8013718:	f002 feea 	bl	80164f0 <__i2b>
 801371c:	4683      	mov	fp, r0
 801371e:	2800      	cmp	r0, #0
 8013720:	f43f aefa 	beq.w	8013518 <_strtod_l+0x488>
 8013724:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013726:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013728:	2e00      	cmp	r6, #0
 801372a:	bfab      	itete	ge
 801372c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801372e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8013730:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013732:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8013736:	bfac      	ite	ge
 8013738:	eb06 0a03 	addge.w	sl, r6, r3
 801373c:	1b9f      	sublt	r7, r3, r6
 801373e:	9b04      	ldr	r3, [sp, #16]
 8013740:	1af6      	subs	r6, r6, r3
 8013742:	4416      	add	r6, r2
 8013744:	4ba0      	ldr	r3, [pc, #640]	; (80139c8 <_strtod_l+0x938>)
 8013746:	3e01      	subs	r6, #1
 8013748:	429e      	cmp	r6, r3
 801374a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801374e:	f280 80c4 	bge.w	80138da <_strtod_l+0x84a>
 8013752:	1b9b      	subs	r3, r3, r6
 8013754:	2b1f      	cmp	r3, #31
 8013756:	eba2 0203 	sub.w	r2, r2, r3
 801375a:	f04f 0101 	mov.w	r1, #1
 801375e:	f300 80b0 	bgt.w	80138c2 <_strtod_l+0x832>
 8013762:	fa01 f303 	lsl.w	r3, r1, r3
 8013766:	930e      	str	r3, [sp, #56]	; 0x38
 8013768:	2300      	movs	r3, #0
 801376a:	930d      	str	r3, [sp, #52]	; 0x34
 801376c:	eb0a 0602 	add.w	r6, sl, r2
 8013770:	9b04      	ldr	r3, [sp, #16]
 8013772:	45b2      	cmp	sl, r6
 8013774:	4417      	add	r7, r2
 8013776:	441f      	add	r7, r3
 8013778:	4653      	mov	r3, sl
 801377a:	bfa8      	it	ge
 801377c:	4633      	movge	r3, r6
 801377e:	42bb      	cmp	r3, r7
 8013780:	bfa8      	it	ge
 8013782:	463b      	movge	r3, r7
 8013784:	2b00      	cmp	r3, #0
 8013786:	bfc2      	ittt	gt
 8013788:	1af6      	subgt	r6, r6, r3
 801378a:	1aff      	subgt	r7, r7, r3
 801378c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8013790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013792:	2b00      	cmp	r3, #0
 8013794:	dd17      	ble.n	80137c6 <_strtod_l+0x736>
 8013796:	4659      	mov	r1, fp
 8013798:	461a      	mov	r2, r3
 801379a:	4620      	mov	r0, r4
 801379c:	f002 ff68 	bl	8016670 <__pow5mult>
 80137a0:	4683      	mov	fp, r0
 80137a2:	2800      	cmp	r0, #0
 80137a4:	f43f aeb8 	beq.w	8013518 <_strtod_l+0x488>
 80137a8:	4601      	mov	r1, r0
 80137aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80137ac:	4620      	mov	r0, r4
 80137ae:	f002 feb5 	bl	801651c <__multiply>
 80137b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80137b4:	2800      	cmp	r0, #0
 80137b6:	f43f aeaf 	beq.w	8013518 <_strtod_l+0x488>
 80137ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 80137bc:	4620      	mov	r0, r4
 80137be:	f002 fd97 	bl	80162f0 <_Bfree>
 80137c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137c4:	9316      	str	r3, [sp, #88]	; 0x58
 80137c6:	2e00      	cmp	r6, #0
 80137c8:	f300 808c 	bgt.w	80138e4 <_strtod_l+0x854>
 80137cc:	9b08      	ldr	r3, [sp, #32]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	dd08      	ble.n	80137e4 <_strtod_l+0x754>
 80137d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80137d4:	9905      	ldr	r1, [sp, #20]
 80137d6:	4620      	mov	r0, r4
 80137d8:	f002 ff4a 	bl	8016670 <__pow5mult>
 80137dc:	9005      	str	r0, [sp, #20]
 80137de:	2800      	cmp	r0, #0
 80137e0:	f43f ae9a 	beq.w	8013518 <_strtod_l+0x488>
 80137e4:	2f00      	cmp	r7, #0
 80137e6:	dd08      	ble.n	80137fa <_strtod_l+0x76a>
 80137e8:	9905      	ldr	r1, [sp, #20]
 80137ea:	463a      	mov	r2, r7
 80137ec:	4620      	mov	r0, r4
 80137ee:	f002 ff99 	bl	8016724 <__lshift>
 80137f2:	9005      	str	r0, [sp, #20]
 80137f4:	2800      	cmp	r0, #0
 80137f6:	f43f ae8f 	beq.w	8013518 <_strtod_l+0x488>
 80137fa:	f1ba 0f00 	cmp.w	sl, #0
 80137fe:	dd08      	ble.n	8013812 <_strtod_l+0x782>
 8013800:	4659      	mov	r1, fp
 8013802:	4652      	mov	r2, sl
 8013804:	4620      	mov	r0, r4
 8013806:	f002 ff8d 	bl	8016724 <__lshift>
 801380a:	4683      	mov	fp, r0
 801380c:	2800      	cmp	r0, #0
 801380e:	f43f ae83 	beq.w	8013518 <_strtod_l+0x488>
 8013812:	9a05      	ldr	r2, [sp, #20]
 8013814:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013816:	4620      	mov	r0, r4
 8013818:	f003 f80c 	bl	8016834 <__mdiff>
 801381c:	4605      	mov	r5, r0
 801381e:	2800      	cmp	r0, #0
 8013820:	f43f ae7a 	beq.w	8013518 <_strtod_l+0x488>
 8013824:	68c3      	ldr	r3, [r0, #12]
 8013826:	930b      	str	r3, [sp, #44]	; 0x2c
 8013828:	2300      	movs	r3, #0
 801382a:	60c3      	str	r3, [r0, #12]
 801382c:	4659      	mov	r1, fp
 801382e:	f002 ffe5 	bl	80167fc <__mcmp>
 8013832:	2800      	cmp	r0, #0
 8013834:	da60      	bge.n	80138f8 <_strtod_l+0x868>
 8013836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013838:	ea53 0308 	orrs.w	r3, r3, r8
 801383c:	f040 8084 	bne.w	8013948 <_strtod_l+0x8b8>
 8013840:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013844:	2b00      	cmp	r3, #0
 8013846:	d17f      	bne.n	8013948 <_strtod_l+0x8b8>
 8013848:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801384c:	0d1b      	lsrs	r3, r3, #20
 801384e:	051b      	lsls	r3, r3, #20
 8013850:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013854:	d978      	bls.n	8013948 <_strtod_l+0x8b8>
 8013856:	696b      	ldr	r3, [r5, #20]
 8013858:	b913      	cbnz	r3, 8013860 <_strtod_l+0x7d0>
 801385a:	692b      	ldr	r3, [r5, #16]
 801385c:	2b01      	cmp	r3, #1
 801385e:	dd73      	ble.n	8013948 <_strtod_l+0x8b8>
 8013860:	4629      	mov	r1, r5
 8013862:	2201      	movs	r2, #1
 8013864:	4620      	mov	r0, r4
 8013866:	f002 ff5d 	bl	8016724 <__lshift>
 801386a:	4659      	mov	r1, fp
 801386c:	4605      	mov	r5, r0
 801386e:	f002 ffc5 	bl	80167fc <__mcmp>
 8013872:	2800      	cmp	r0, #0
 8013874:	dd68      	ble.n	8013948 <_strtod_l+0x8b8>
 8013876:	9904      	ldr	r1, [sp, #16]
 8013878:	4a54      	ldr	r2, [pc, #336]	; (80139cc <_strtod_l+0x93c>)
 801387a:	464b      	mov	r3, r9
 801387c:	2900      	cmp	r1, #0
 801387e:	f000 8084 	beq.w	801398a <_strtod_l+0x8fa>
 8013882:	ea02 0109 	and.w	r1, r2, r9
 8013886:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801388a:	dc7e      	bgt.n	801398a <_strtod_l+0x8fa>
 801388c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013890:	f77f aeb3 	ble.w	80135fa <_strtod_l+0x56a>
 8013894:	4b4e      	ldr	r3, [pc, #312]	; (80139d0 <_strtod_l+0x940>)
 8013896:	4640      	mov	r0, r8
 8013898:	4649      	mov	r1, r9
 801389a:	2200      	movs	r2, #0
 801389c:	f7ec fecc 	bl	8000638 <__aeabi_dmul>
 80138a0:	4b4a      	ldr	r3, [pc, #296]	; (80139cc <_strtod_l+0x93c>)
 80138a2:	400b      	ands	r3, r1
 80138a4:	4680      	mov	r8, r0
 80138a6:	4689      	mov	r9, r1
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	f47f ae3f 	bne.w	801352c <_strtod_l+0x49c>
 80138ae:	2322      	movs	r3, #34	; 0x22
 80138b0:	6023      	str	r3, [r4, #0]
 80138b2:	e63b      	b.n	801352c <_strtod_l+0x49c>
 80138b4:	f04f 32ff 	mov.w	r2, #4294967295
 80138b8:	fa02 f303 	lsl.w	r3, r2, r3
 80138bc:	ea03 0808 	and.w	r8, r3, r8
 80138c0:	e6e8      	b.n	8013694 <_strtod_l+0x604>
 80138c2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80138c6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80138ca:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80138ce:	36e2      	adds	r6, #226	; 0xe2
 80138d0:	fa01 f306 	lsl.w	r3, r1, r6
 80138d4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80138d8:	e748      	b.n	801376c <_strtod_l+0x6dc>
 80138da:	2100      	movs	r1, #0
 80138dc:	2301      	movs	r3, #1
 80138de:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80138e2:	e743      	b.n	801376c <_strtod_l+0x6dc>
 80138e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80138e6:	4632      	mov	r2, r6
 80138e8:	4620      	mov	r0, r4
 80138ea:	f002 ff1b 	bl	8016724 <__lshift>
 80138ee:	9016      	str	r0, [sp, #88]	; 0x58
 80138f0:	2800      	cmp	r0, #0
 80138f2:	f47f af6b 	bne.w	80137cc <_strtod_l+0x73c>
 80138f6:	e60f      	b.n	8013518 <_strtod_l+0x488>
 80138f8:	46ca      	mov	sl, r9
 80138fa:	d171      	bne.n	80139e0 <_strtod_l+0x950>
 80138fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80138fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013902:	b352      	cbz	r2, 801395a <_strtod_l+0x8ca>
 8013904:	4a33      	ldr	r2, [pc, #204]	; (80139d4 <_strtod_l+0x944>)
 8013906:	4293      	cmp	r3, r2
 8013908:	d12a      	bne.n	8013960 <_strtod_l+0x8d0>
 801390a:	9b04      	ldr	r3, [sp, #16]
 801390c:	4641      	mov	r1, r8
 801390e:	b1fb      	cbz	r3, 8013950 <_strtod_l+0x8c0>
 8013910:	4b2e      	ldr	r3, [pc, #184]	; (80139cc <_strtod_l+0x93c>)
 8013912:	ea09 0303 	and.w	r3, r9, r3
 8013916:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801391a:	f04f 32ff 	mov.w	r2, #4294967295
 801391e:	d81a      	bhi.n	8013956 <_strtod_l+0x8c6>
 8013920:	0d1b      	lsrs	r3, r3, #20
 8013922:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013926:	fa02 f303 	lsl.w	r3, r2, r3
 801392a:	4299      	cmp	r1, r3
 801392c:	d118      	bne.n	8013960 <_strtod_l+0x8d0>
 801392e:	4b2a      	ldr	r3, [pc, #168]	; (80139d8 <_strtod_l+0x948>)
 8013930:	459a      	cmp	sl, r3
 8013932:	d102      	bne.n	801393a <_strtod_l+0x8aa>
 8013934:	3101      	adds	r1, #1
 8013936:	f43f adef 	beq.w	8013518 <_strtod_l+0x488>
 801393a:	4b24      	ldr	r3, [pc, #144]	; (80139cc <_strtod_l+0x93c>)
 801393c:	ea0a 0303 	and.w	r3, sl, r3
 8013940:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013944:	f04f 0800 	mov.w	r8, #0
 8013948:	9b04      	ldr	r3, [sp, #16]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d1a2      	bne.n	8013894 <_strtod_l+0x804>
 801394e:	e5ed      	b.n	801352c <_strtod_l+0x49c>
 8013950:	f04f 33ff 	mov.w	r3, #4294967295
 8013954:	e7e9      	b.n	801392a <_strtod_l+0x89a>
 8013956:	4613      	mov	r3, r2
 8013958:	e7e7      	b.n	801392a <_strtod_l+0x89a>
 801395a:	ea53 0308 	orrs.w	r3, r3, r8
 801395e:	d08a      	beq.n	8013876 <_strtod_l+0x7e6>
 8013960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013962:	b1e3      	cbz	r3, 801399e <_strtod_l+0x90e>
 8013964:	ea13 0f0a 	tst.w	r3, sl
 8013968:	d0ee      	beq.n	8013948 <_strtod_l+0x8b8>
 801396a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801396c:	9a04      	ldr	r2, [sp, #16]
 801396e:	4640      	mov	r0, r8
 8013970:	4649      	mov	r1, r9
 8013972:	b1c3      	cbz	r3, 80139a6 <_strtod_l+0x916>
 8013974:	f7ff fb6e 	bl	8013054 <sulp>
 8013978:	4602      	mov	r2, r0
 801397a:	460b      	mov	r3, r1
 801397c:	ec51 0b18 	vmov	r0, r1, d8
 8013980:	f7ec fca4 	bl	80002cc <__adddf3>
 8013984:	4680      	mov	r8, r0
 8013986:	4689      	mov	r9, r1
 8013988:	e7de      	b.n	8013948 <_strtod_l+0x8b8>
 801398a:	4013      	ands	r3, r2
 801398c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013990:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013994:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013998:	f04f 38ff 	mov.w	r8, #4294967295
 801399c:	e7d4      	b.n	8013948 <_strtod_l+0x8b8>
 801399e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80139a0:	ea13 0f08 	tst.w	r3, r8
 80139a4:	e7e0      	b.n	8013968 <_strtod_l+0x8d8>
 80139a6:	f7ff fb55 	bl	8013054 <sulp>
 80139aa:	4602      	mov	r2, r0
 80139ac:	460b      	mov	r3, r1
 80139ae:	ec51 0b18 	vmov	r0, r1, d8
 80139b2:	f7ec fc89 	bl	80002c8 <__aeabi_dsub>
 80139b6:	2200      	movs	r2, #0
 80139b8:	2300      	movs	r3, #0
 80139ba:	4680      	mov	r8, r0
 80139bc:	4689      	mov	r9, r1
 80139be:	f7ed f8a3 	bl	8000b08 <__aeabi_dcmpeq>
 80139c2:	2800      	cmp	r0, #0
 80139c4:	d0c0      	beq.n	8013948 <_strtod_l+0x8b8>
 80139c6:	e618      	b.n	80135fa <_strtod_l+0x56a>
 80139c8:	fffffc02 	.word	0xfffffc02
 80139cc:	7ff00000 	.word	0x7ff00000
 80139d0:	39500000 	.word	0x39500000
 80139d4:	000fffff 	.word	0x000fffff
 80139d8:	7fefffff 	.word	0x7fefffff
 80139dc:	0801a860 	.word	0x0801a860
 80139e0:	4659      	mov	r1, fp
 80139e2:	4628      	mov	r0, r5
 80139e4:	f003 f87a 	bl	8016adc <__ratio>
 80139e8:	ec57 6b10 	vmov	r6, r7, d0
 80139ec:	ee10 0a10 	vmov	r0, s0
 80139f0:	2200      	movs	r2, #0
 80139f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80139f6:	4639      	mov	r1, r7
 80139f8:	f7ed f89a 	bl	8000b30 <__aeabi_dcmple>
 80139fc:	2800      	cmp	r0, #0
 80139fe:	d071      	beq.n	8013ae4 <_strtod_l+0xa54>
 8013a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d17c      	bne.n	8013b00 <_strtod_l+0xa70>
 8013a06:	f1b8 0f00 	cmp.w	r8, #0
 8013a0a:	d15a      	bne.n	8013ac2 <_strtod_l+0xa32>
 8013a0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d15d      	bne.n	8013ad0 <_strtod_l+0xa40>
 8013a14:	4b90      	ldr	r3, [pc, #576]	; (8013c58 <_strtod_l+0xbc8>)
 8013a16:	2200      	movs	r2, #0
 8013a18:	4630      	mov	r0, r6
 8013a1a:	4639      	mov	r1, r7
 8013a1c:	f7ed f87e 	bl	8000b1c <__aeabi_dcmplt>
 8013a20:	2800      	cmp	r0, #0
 8013a22:	d15c      	bne.n	8013ade <_strtod_l+0xa4e>
 8013a24:	4630      	mov	r0, r6
 8013a26:	4639      	mov	r1, r7
 8013a28:	4b8c      	ldr	r3, [pc, #560]	; (8013c5c <_strtod_l+0xbcc>)
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	f7ec fe04 	bl	8000638 <__aeabi_dmul>
 8013a30:	4606      	mov	r6, r0
 8013a32:	460f      	mov	r7, r1
 8013a34:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013a38:	9606      	str	r6, [sp, #24]
 8013a3a:	9307      	str	r3, [sp, #28]
 8013a3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a40:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013a44:	4b86      	ldr	r3, [pc, #536]	; (8013c60 <_strtod_l+0xbd0>)
 8013a46:	ea0a 0303 	and.w	r3, sl, r3
 8013a4a:	930d      	str	r3, [sp, #52]	; 0x34
 8013a4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013a4e:	4b85      	ldr	r3, [pc, #532]	; (8013c64 <_strtod_l+0xbd4>)
 8013a50:	429a      	cmp	r2, r3
 8013a52:	f040 8090 	bne.w	8013b76 <_strtod_l+0xae6>
 8013a56:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8013a5a:	ec49 8b10 	vmov	d0, r8, r9
 8013a5e:	f002 ff73 	bl	8016948 <__ulp>
 8013a62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a66:	ec51 0b10 	vmov	r0, r1, d0
 8013a6a:	f7ec fde5 	bl	8000638 <__aeabi_dmul>
 8013a6e:	4642      	mov	r2, r8
 8013a70:	464b      	mov	r3, r9
 8013a72:	f7ec fc2b 	bl	80002cc <__adddf3>
 8013a76:	460b      	mov	r3, r1
 8013a78:	4979      	ldr	r1, [pc, #484]	; (8013c60 <_strtod_l+0xbd0>)
 8013a7a:	4a7b      	ldr	r2, [pc, #492]	; (8013c68 <_strtod_l+0xbd8>)
 8013a7c:	4019      	ands	r1, r3
 8013a7e:	4291      	cmp	r1, r2
 8013a80:	4680      	mov	r8, r0
 8013a82:	d944      	bls.n	8013b0e <_strtod_l+0xa7e>
 8013a84:	ee18 2a90 	vmov	r2, s17
 8013a88:	4b78      	ldr	r3, [pc, #480]	; (8013c6c <_strtod_l+0xbdc>)
 8013a8a:	429a      	cmp	r2, r3
 8013a8c:	d104      	bne.n	8013a98 <_strtod_l+0xa08>
 8013a8e:	ee18 3a10 	vmov	r3, s16
 8013a92:	3301      	adds	r3, #1
 8013a94:	f43f ad40 	beq.w	8013518 <_strtod_l+0x488>
 8013a98:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8013c6c <_strtod_l+0xbdc>
 8013a9c:	f04f 38ff 	mov.w	r8, #4294967295
 8013aa0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013aa2:	4620      	mov	r0, r4
 8013aa4:	f002 fc24 	bl	80162f0 <_Bfree>
 8013aa8:	9905      	ldr	r1, [sp, #20]
 8013aaa:	4620      	mov	r0, r4
 8013aac:	f002 fc20 	bl	80162f0 <_Bfree>
 8013ab0:	4659      	mov	r1, fp
 8013ab2:	4620      	mov	r0, r4
 8013ab4:	f002 fc1c 	bl	80162f0 <_Bfree>
 8013ab8:	4629      	mov	r1, r5
 8013aba:	4620      	mov	r0, r4
 8013abc:	f002 fc18 	bl	80162f0 <_Bfree>
 8013ac0:	e609      	b.n	80136d6 <_strtod_l+0x646>
 8013ac2:	f1b8 0f01 	cmp.w	r8, #1
 8013ac6:	d103      	bne.n	8013ad0 <_strtod_l+0xa40>
 8013ac8:	f1b9 0f00 	cmp.w	r9, #0
 8013acc:	f43f ad95 	beq.w	80135fa <_strtod_l+0x56a>
 8013ad0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8013c28 <_strtod_l+0xb98>
 8013ad4:	4f60      	ldr	r7, [pc, #384]	; (8013c58 <_strtod_l+0xbc8>)
 8013ad6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013ada:	2600      	movs	r6, #0
 8013adc:	e7ae      	b.n	8013a3c <_strtod_l+0x9ac>
 8013ade:	4f5f      	ldr	r7, [pc, #380]	; (8013c5c <_strtod_l+0xbcc>)
 8013ae0:	2600      	movs	r6, #0
 8013ae2:	e7a7      	b.n	8013a34 <_strtod_l+0x9a4>
 8013ae4:	4b5d      	ldr	r3, [pc, #372]	; (8013c5c <_strtod_l+0xbcc>)
 8013ae6:	4630      	mov	r0, r6
 8013ae8:	4639      	mov	r1, r7
 8013aea:	2200      	movs	r2, #0
 8013aec:	f7ec fda4 	bl	8000638 <__aeabi_dmul>
 8013af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013af2:	4606      	mov	r6, r0
 8013af4:	460f      	mov	r7, r1
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d09c      	beq.n	8013a34 <_strtod_l+0x9a4>
 8013afa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013afe:	e79d      	b.n	8013a3c <_strtod_l+0x9ac>
 8013b00:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8013c30 <_strtod_l+0xba0>
 8013b04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013b08:	ec57 6b17 	vmov	r6, r7, d7
 8013b0c:	e796      	b.n	8013a3c <_strtod_l+0x9ac>
 8013b0e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8013b12:	9b04      	ldr	r3, [sp, #16]
 8013b14:	46ca      	mov	sl, r9
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d1c2      	bne.n	8013aa0 <_strtod_l+0xa10>
 8013b1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013b1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013b20:	0d1b      	lsrs	r3, r3, #20
 8013b22:	051b      	lsls	r3, r3, #20
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d1bb      	bne.n	8013aa0 <_strtod_l+0xa10>
 8013b28:	4630      	mov	r0, r6
 8013b2a:	4639      	mov	r1, r7
 8013b2c:	f7ed f8e4 	bl	8000cf8 <__aeabi_d2lz>
 8013b30:	f7ec fd54 	bl	80005dc <__aeabi_l2d>
 8013b34:	4602      	mov	r2, r0
 8013b36:	460b      	mov	r3, r1
 8013b38:	4630      	mov	r0, r6
 8013b3a:	4639      	mov	r1, r7
 8013b3c:	f7ec fbc4 	bl	80002c8 <__aeabi_dsub>
 8013b40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013b42:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013b46:	ea43 0308 	orr.w	r3, r3, r8
 8013b4a:	4313      	orrs	r3, r2
 8013b4c:	4606      	mov	r6, r0
 8013b4e:	460f      	mov	r7, r1
 8013b50:	d054      	beq.n	8013bfc <_strtod_l+0xb6c>
 8013b52:	a339      	add	r3, pc, #228	; (adr r3, 8013c38 <_strtod_l+0xba8>)
 8013b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b58:	f7ec ffe0 	bl	8000b1c <__aeabi_dcmplt>
 8013b5c:	2800      	cmp	r0, #0
 8013b5e:	f47f ace5 	bne.w	801352c <_strtod_l+0x49c>
 8013b62:	a337      	add	r3, pc, #220	; (adr r3, 8013c40 <_strtod_l+0xbb0>)
 8013b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b68:	4630      	mov	r0, r6
 8013b6a:	4639      	mov	r1, r7
 8013b6c:	f7ec fff4 	bl	8000b58 <__aeabi_dcmpgt>
 8013b70:	2800      	cmp	r0, #0
 8013b72:	d095      	beq.n	8013aa0 <_strtod_l+0xa10>
 8013b74:	e4da      	b.n	801352c <_strtod_l+0x49c>
 8013b76:	9b04      	ldr	r3, [sp, #16]
 8013b78:	b333      	cbz	r3, 8013bc8 <_strtod_l+0xb38>
 8013b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b7c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013b80:	d822      	bhi.n	8013bc8 <_strtod_l+0xb38>
 8013b82:	a331      	add	r3, pc, #196	; (adr r3, 8013c48 <_strtod_l+0xbb8>)
 8013b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b88:	4630      	mov	r0, r6
 8013b8a:	4639      	mov	r1, r7
 8013b8c:	f7ec ffd0 	bl	8000b30 <__aeabi_dcmple>
 8013b90:	b1a0      	cbz	r0, 8013bbc <_strtod_l+0xb2c>
 8013b92:	4639      	mov	r1, r7
 8013b94:	4630      	mov	r0, r6
 8013b96:	f7ed f827 	bl	8000be8 <__aeabi_d2uiz>
 8013b9a:	2801      	cmp	r0, #1
 8013b9c:	bf38      	it	cc
 8013b9e:	2001      	movcc	r0, #1
 8013ba0:	f7ec fcd0 	bl	8000544 <__aeabi_ui2d>
 8013ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ba6:	4606      	mov	r6, r0
 8013ba8:	460f      	mov	r7, r1
 8013baa:	bb23      	cbnz	r3, 8013bf6 <_strtod_l+0xb66>
 8013bac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013bb0:	9010      	str	r0, [sp, #64]	; 0x40
 8013bb2:	9311      	str	r3, [sp, #68]	; 0x44
 8013bb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013bb8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013bbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013bbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013bc0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013bc4:	1a9b      	subs	r3, r3, r2
 8013bc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8013bc8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013bcc:	eeb0 0a48 	vmov.f32	s0, s16
 8013bd0:	eef0 0a68 	vmov.f32	s1, s17
 8013bd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013bd8:	f002 feb6 	bl	8016948 <__ulp>
 8013bdc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013be0:	ec53 2b10 	vmov	r2, r3, d0
 8013be4:	f7ec fd28 	bl	8000638 <__aeabi_dmul>
 8013be8:	ec53 2b18 	vmov	r2, r3, d8
 8013bec:	f7ec fb6e 	bl	80002cc <__adddf3>
 8013bf0:	4680      	mov	r8, r0
 8013bf2:	4689      	mov	r9, r1
 8013bf4:	e78d      	b.n	8013b12 <_strtod_l+0xa82>
 8013bf6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013bfa:	e7db      	b.n	8013bb4 <_strtod_l+0xb24>
 8013bfc:	a314      	add	r3, pc, #80	; (adr r3, 8013c50 <_strtod_l+0xbc0>)
 8013bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c02:	f7ec ff8b 	bl	8000b1c <__aeabi_dcmplt>
 8013c06:	e7b3      	b.n	8013b70 <_strtod_l+0xae0>
 8013c08:	2300      	movs	r3, #0
 8013c0a:	930a      	str	r3, [sp, #40]	; 0x28
 8013c0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013c0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013c10:	6013      	str	r3, [r2, #0]
 8013c12:	f7ff ba7c 	b.w	801310e <_strtod_l+0x7e>
 8013c16:	2a65      	cmp	r2, #101	; 0x65
 8013c18:	f43f ab75 	beq.w	8013306 <_strtod_l+0x276>
 8013c1c:	2a45      	cmp	r2, #69	; 0x45
 8013c1e:	f43f ab72 	beq.w	8013306 <_strtod_l+0x276>
 8013c22:	2301      	movs	r3, #1
 8013c24:	f7ff bbaa 	b.w	801337c <_strtod_l+0x2ec>
 8013c28:	00000000 	.word	0x00000000
 8013c2c:	bff00000 	.word	0xbff00000
 8013c30:	00000000 	.word	0x00000000
 8013c34:	3ff00000 	.word	0x3ff00000
 8013c38:	94a03595 	.word	0x94a03595
 8013c3c:	3fdfffff 	.word	0x3fdfffff
 8013c40:	35afe535 	.word	0x35afe535
 8013c44:	3fe00000 	.word	0x3fe00000
 8013c48:	ffc00000 	.word	0xffc00000
 8013c4c:	41dfffff 	.word	0x41dfffff
 8013c50:	94a03595 	.word	0x94a03595
 8013c54:	3fcfffff 	.word	0x3fcfffff
 8013c58:	3ff00000 	.word	0x3ff00000
 8013c5c:	3fe00000 	.word	0x3fe00000
 8013c60:	7ff00000 	.word	0x7ff00000
 8013c64:	7fe00000 	.word	0x7fe00000
 8013c68:	7c9fffff 	.word	0x7c9fffff
 8013c6c:	7fefffff 	.word	0x7fefffff

08013c70 <strtof>:
 8013c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c74:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8013d38 <strtof+0xc8>
 8013c78:	4b2a      	ldr	r3, [pc, #168]	; (8013d24 <strtof+0xb4>)
 8013c7a:	460a      	mov	r2, r1
 8013c7c:	ed2d 8b02 	vpush	{d8}
 8013c80:	4601      	mov	r1, r0
 8013c82:	f8d8 0000 	ldr.w	r0, [r8]
 8013c86:	f7ff fa03 	bl	8013090 <_strtod_l>
 8013c8a:	ec55 4b10 	vmov	r4, r5, d0
 8013c8e:	ee10 2a10 	vmov	r2, s0
 8013c92:	ee10 0a10 	vmov	r0, s0
 8013c96:	462b      	mov	r3, r5
 8013c98:	4629      	mov	r1, r5
 8013c9a:	f7ec ff67 	bl	8000b6c <__aeabi_dcmpun>
 8013c9e:	b190      	cbz	r0, 8013cc6 <strtof+0x56>
 8013ca0:	2d00      	cmp	r5, #0
 8013ca2:	4821      	ldr	r0, [pc, #132]	; (8013d28 <strtof+0xb8>)
 8013ca4:	da09      	bge.n	8013cba <strtof+0x4a>
 8013ca6:	f001 f88f 	bl	8014dc8 <nanf>
 8013caa:	eeb1 8a40 	vneg.f32	s16, s0
 8013cae:	eeb0 0a48 	vmov.f32	s0, s16
 8013cb2:	ecbd 8b02 	vpop	{d8}
 8013cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cba:	ecbd 8b02 	vpop	{d8}
 8013cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013cc2:	f001 b881 	b.w	8014dc8 <nanf>
 8013cc6:	4620      	mov	r0, r4
 8013cc8:	4629      	mov	r1, r5
 8013cca:	f7ec ffad 	bl	8000c28 <__aeabi_d2f>
 8013cce:	ee08 0a10 	vmov	s16, r0
 8013cd2:	eddf 7a16 	vldr	s15, [pc, #88]	; 8013d2c <strtof+0xbc>
 8013cd6:	eeb0 7ac8 	vabs.f32	s14, s16
 8013cda:	eeb4 7a67 	vcmp.f32	s14, s15
 8013cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ce2:	dd11      	ble.n	8013d08 <strtof+0x98>
 8013ce4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8013ce8:	4b11      	ldr	r3, [pc, #68]	; (8013d30 <strtof+0xc0>)
 8013cea:	f04f 32ff 	mov.w	r2, #4294967295
 8013cee:	4620      	mov	r0, r4
 8013cf0:	4639      	mov	r1, r7
 8013cf2:	f7ec ff3b 	bl	8000b6c <__aeabi_dcmpun>
 8013cf6:	b980      	cbnz	r0, 8013d1a <strtof+0xaa>
 8013cf8:	4b0d      	ldr	r3, [pc, #52]	; (8013d30 <strtof+0xc0>)
 8013cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8013cfe:	4620      	mov	r0, r4
 8013d00:	4639      	mov	r1, r7
 8013d02:	f7ec ff15 	bl	8000b30 <__aeabi_dcmple>
 8013d06:	b940      	cbnz	r0, 8013d1a <strtof+0xaa>
 8013d08:	ee18 3a10 	vmov	r3, s16
 8013d0c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8013d10:	d1cd      	bne.n	8013cae <strtof+0x3e>
 8013d12:	4b08      	ldr	r3, [pc, #32]	; (8013d34 <strtof+0xc4>)
 8013d14:	402b      	ands	r3, r5
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d0c9      	beq.n	8013cae <strtof+0x3e>
 8013d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8013d1e:	2222      	movs	r2, #34	; 0x22
 8013d20:	601a      	str	r2, [r3, #0]
 8013d22:	e7c4      	b.n	8013cae <strtof+0x3e>
 8013d24:	20000038 	.word	0x20000038
 8013d28:	0801aa5a 	.word	0x0801aa5a
 8013d2c:	7f7fffff 	.word	0x7f7fffff
 8013d30:	7fefffff 	.word	0x7fefffff
 8013d34:	7ff00000 	.word	0x7ff00000
 8013d38:	200001f0 	.word	0x200001f0

08013d3c <_strtol_l.constprop.0>:
 8013d3c:	2b01      	cmp	r3, #1
 8013d3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d42:	d001      	beq.n	8013d48 <_strtol_l.constprop.0+0xc>
 8013d44:	2b24      	cmp	r3, #36	; 0x24
 8013d46:	d906      	bls.n	8013d56 <_strtol_l.constprop.0+0x1a>
 8013d48:	f000 fff8 	bl	8014d3c <__errno>
 8013d4c:	2316      	movs	r3, #22
 8013d4e:	6003      	str	r3, [r0, #0]
 8013d50:	2000      	movs	r0, #0
 8013d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d56:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013e3c <_strtol_l.constprop.0+0x100>
 8013d5a:	460d      	mov	r5, r1
 8013d5c:	462e      	mov	r6, r5
 8013d5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013d62:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8013d66:	f017 0708 	ands.w	r7, r7, #8
 8013d6a:	d1f7      	bne.n	8013d5c <_strtol_l.constprop.0+0x20>
 8013d6c:	2c2d      	cmp	r4, #45	; 0x2d
 8013d6e:	d132      	bne.n	8013dd6 <_strtol_l.constprop.0+0x9a>
 8013d70:	782c      	ldrb	r4, [r5, #0]
 8013d72:	2701      	movs	r7, #1
 8013d74:	1cb5      	adds	r5, r6, #2
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d05b      	beq.n	8013e32 <_strtol_l.constprop.0+0xf6>
 8013d7a:	2b10      	cmp	r3, #16
 8013d7c:	d109      	bne.n	8013d92 <_strtol_l.constprop.0+0x56>
 8013d7e:	2c30      	cmp	r4, #48	; 0x30
 8013d80:	d107      	bne.n	8013d92 <_strtol_l.constprop.0+0x56>
 8013d82:	782c      	ldrb	r4, [r5, #0]
 8013d84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013d88:	2c58      	cmp	r4, #88	; 0x58
 8013d8a:	d14d      	bne.n	8013e28 <_strtol_l.constprop.0+0xec>
 8013d8c:	786c      	ldrb	r4, [r5, #1]
 8013d8e:	2310      	movs	r3, #16
 8013d90:	3502      	adds	r5, #2
 8013d92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013d96:	f108 38ff 	add.w	r8, r8, #4294967295
 8013d9a:	f04f 0e00 	mov.w	lr, #0
 8013d9e:	fbb8 f9f3 	udiv	r9, r8, r3
 8013da2:	4676      	mov	r6, lr
 8013da4:	fb03 8a19 	mls	sl, r3, r9, r8
 8013da8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013dac:	f1bc 0f09 	cmp.w	ip, #9
 8013db0:	d816      	bhi.n	8013de0 <_strtol_l.constprop.0+0xa4>
 8013db2:	4664      	mov	r4, ip
 8013db4:	42a3      	cmp	r3, r4
 8013db6:	dd24      	ble.n	8013e02 <_strtol_l.constprop.0+0xc6>
 8013db8:	f1be 3fff 	cmp.w	lr, #4294967295
 8013dbc:	d008      	beq.n	8013dd0 <_strtol_l.constprop.0+0x94>
 8013dbe:	45b1      	cmp	r9, r6
 8013dc0:	d31c      	bcc.n	8013dfc <_strtol_l.constprop.0+0xc0>
 8013dc2:	d101      	bne.n	8013dc8 <_strtol_l.constprop.0+0x8c>
 8013dc4:	45a2      	cmp	sl, r4
 8013dc6:	db19      	blt.n	8013dfc <_strtol_l.constprop.0+0xc0>
 8013dc8:	fb06 4603 	mla	r6, r6, r3, r4
 8013dcc:	f04f 0e01 	mov.w	lr, #1
 8013dd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013dd4:	e7e8      	b.n	8013da8 <_strtol_l.constprop.0+0x6c>
 8013dd6:	2c2b      	cmp	r4, #43	; 0x2b
 8013dd8:	bf04      	itt	eq
 8013dda:	782c      	ldrbeq	r4, [r5, #0]
 8013ddc:	1cb5      	addeq	r5, r6, #2
 8013dde:	e7ca      	b.n	8013d76 <_strtol_l.constprop.0+0x3a>
 8013de0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013de4:	f1bc 0f19 	cmp.w	ip, #25
 8013de8:	d801      	bhi.n	8013dee <_strtol_l.constprop.0+0xb2>
 8013dea:	3c37      	subs	r4, #55	; 0x37
 8013dec:	e7e2      	b.n	8013db4 <_strtol_l.constprop.0+0x78>
 8013dee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013df2:	f1bc 0f19 	cmp.w	ip, #25
 8013df6:	d804      	bhi.n	8013e02 <_strtol_l.constprop.0+0xc6>
 8013df8:	3c57      	subs	r4, #87	; 0x57
 8013dfa:	e7db      	b.n	8013db4 <_strtol_l.constprop.0+0x78>
 8013dfc:	f04f 3eff 	mov.w	lr, #4294967295
 8013e00:	e7e6      	b.n	8013dd0 <_strtol_l.constprop.0+0x94>
 8013e02:	f1be 3fff 	cmp.w	lr, #4294967295
 8013e06:	d105      	bne.n	8013e14 <_strtol_l.constprop.0+0xd8>
 8013e08:	2322      	movs	r3, #34	; 0x22
 8013e0a:	6003      	str	r3, [r0, #0]
 8013e0c:	4646      	mov	r6, r8
 8013e0e:	b942      	cbnz	r2, 8013e22 <_strtol_l.constprop.0+0xe6>
 8013e10:	4630      	mov	r0, r6
 8013e12:	e79e      	b.n	8013d52 <_strtol_l.constprop.0+0x16>
 8013e14:	b107      	cbz	r7, 8013e18 <_strtol_l.constprop.0+0xdc>
 8013e16:	4276      	negs	r6, r6
 8013e18:	2a00      	cmp	r2, #0
 8013e1a:	d0f9      	beq.n	8013e10 <_strtol_l.constprop.0+0xd4>
 8013e1c:	f1be 0f00 	cmp.w	lr, #0
 8013e20:	d000      	beq.n	8013e24 <_strtol_l.constprop.0+0xe8>
 8013e22:	1e69      	subs	r1, r5, #1
 8013e24:	6011      	str	r1, [r2, #0]
 8013e26:	e7f3      	b.n	8013e10 <_strtol_l.constprop.0+0xd4>
 8013e28:	2430      	movs	r4, #48	; 0x30
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d1b1      	bne.n	8013d92 <_strtol_l.constprop.0+0x56>
 8013e2e:	2308      	movs	r3, #8
 8013e30:	e7af      	b.n	8013d92 <_strtol_l.constprop.0+0x56>
 8013e32:	2c30      	cmp	r4, #48	; 0x30
 8013e34:	d0a5      	beq.n	8013d82 <_strtol_l.constprop.0+0x46>
 8013e36:	230a      	movs	r3, #10
 8013e38:	e7ab      	b.n	8013d92 <_strtol_l.constprop.0+0x56>
 8013e3a:	bf00      	nop
 8013e3c:	0801a889 	.word	0x0801a889

08013e40 <strtol>:
 8013e40:	4613      	mov	r3, r2
 8013e42:	460a      	mov	r2, r1
 8013e44:	4601      	mov	r1, r0
 8013e46:	4802      	ldr	r0, [pc, #8]	; (8013e50 <strtol+0x10>)
 8013e48:	6800      	ldr	r0, [r0, #0]
 8013e4a:	f7ff bf77 	b.w	8013d3c <_strtol_l.constprop.0>
 8013e4e:	bf00      	nop
 8013e50:	200001f0 	.word	0x200001f0

08013e54 <__cvt>:
 8013e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e58:	ec55 4b10 	vmov	r4, r5, d0
 8013e5c:	2d00      	cmp	r5, #0
 8013e5e:	460e      	mov	r6, r1
 8013e60:	4619      	mov	r1, r3
 8013e62:	462b      	mov	r3, r5
 8013e64:	bfbb      	ittet	lt
 8013e66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013e6a:	461d      	movlt	r5, r3
 8013e6c:	2300      	movge	r3, #0
 8013e6e:	232d      	movlt	r3, #45	; 0x2d
 8013e70:	700b      	strb	r3, [r1, #0]
 8013e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013e78:	4691      	mov	r9, r2
 8013e7a:	f023 0820 	bic.w	r8, r3, #32
 8013e7e:	bfbc      	itt	lt
 8013e80:	4622      	movlt	r2, r4
 8013e82:	4614      	movlt	r4, r2
 8013e84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013e88:	d005      	beq.n	8013e96 <__cvt+0x42>
 8013e8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013e8e:	d100      	bne.n	8013e92 <__cvt+0x3e>
 8013e90:	3601      	adds	r6, #1
 8013e92:	2102      	movs	r1, #2
 8013e94:	e000      	b.n	8013e98 <__cvt+0x44>
 8013e96:	2103      	movs	r1, #3
 8013e98:	ab03      	add	r3, sp, #12
 8013e9a:	9301      	str	r3, [sp, #4]
 8013e9c:	ab02      	add	r3, sp, #8
 8013e9e:	9300      	str	r3, [sp, #0]
 8013ea0:	ec45 4b10 	vmov	d0, r4, r5
 8013ea4:	4653      	mov	r3, sl
 8013ea6:	4632      	mov	r2, r6
 8013ea8:	f001 f83a 	bl	8014f20 <_dtoa_r>
 8013eac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013eb0:	4607      	mov	r7, r0
 8013eb2:	d102      	bne.n	8013eba <__cvt+0x66>
 8013eb4:	f019 0f01 	tst.w	r9, #1
 8013eb8:	d022      	beq.n	8013f00 <__cvt+0xac>
 8013eba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013ebe:	eb07 0906 	add.w	r9, r7, r6
 8013ec2:	d110      	bne.n	8013ee6 <__cvt+0x92>
 8013ec4:	783b      	ldrb	r3, [r7, #0]
 8013ec6:	2b30      	cmp	r3, #48	; 0x30
 8013ec8:	d10a      	bne.n	8013ee0 <__cvt+0x8c>
 8013eca:	2200      	movs	r2, #0
 8013ecc:	2300      	movs	r3, #0
 8013ece:	4620      	mov	r0, r4
 8013ed0:	4629      	mov	r1, r5
 8013ed2:	f7ec fe19 	bl	8000b08 <__aeabi_dcmpeq>
 8013ed6:	b918      	cbnz	r0, 8013ee0 <__cvt+0x8c>
 8013ed8:	f1c6 0601 	rsb	r6, r6, #1
 8013edc:	f8ca 6000 	str.w	r6, [sl]
 8013ee0:	f8da 3000 	ldr.w	r3, [sl]
 8013ee4:	4499      	add	r9, r3
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	2300      	movs	r3, #0
 8013eea:	4620      	mov	r0, r4
 8013eec:	4629      	mov	r1, r5
 8013eee:	f7ec fe0b 	bl	8000b08 <__aeabi_dcmpeq>
 8013ef2:	b108      	cbz	r0, 8013ef8 <__cvt+0xa4>
 8013ef4:	f8cd 900c 	str.w	r9, [sp, #12]
 8013ef8:	2230      	movs	r2, #48	; 0x30
 8013efa:	9b03      	ldr	r3, [sp, #12]
 8013efc:	454b      	cmp	r3, r9
 8013efe:	d307      	bcc.n	8013f10 <__cvt+0xbc>
 8013f00:	9b03      	ldr	r3, [sp, #12]
 8013f02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013f04:	1bdb      	subs	r3, r3, r7
 8013f06:	4638      	mov	r0, r7
 8013f08:	6013      	str	r3, [r2, #0]
 8013f0a:	b004      	add	sp, #16
 8013f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f10:	1c59      	adds	r1, r3, #1
 8013f12:	9103      	str	r1, [sp, #12]
 8013f14:	701a      	strb	r2, [r3, #0]
 8013f16:	e7f0      	b.n	8013efa <__cvt+0xa6>

08013f18 <__exponent>:
 8013f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	2900      	cmp	r1, #0
 8013f1e:	bfb8      	it	lt
 8013f20:	4249      	neglt	r1, r1
 8013f22:	f803 2b02 	strb.w	r2, [r3], #2
 8013f26:	bfb4      	ite	lt
 8013f28:	222d      	movlt	r2, #45	; 0x2d
 8013f2a:	222b      	movge	r2, #43	; 0x2b
 8013f2c:	2909      	cmp	r1, #9
 8013f2e:	7042      	strb	r2, [r0, #1]
 8013f30:	dd2a      	ble.n	8013f88 <__exponent+0x70>
 8013f32:	f10d 0207 	add.w	r2, sp, #7
 8013f36:	4617      	mov	r7, r2
 8013f38:	260a      	movs	r6, #10
 8013f3a:	4694      	mov	ip, r2
 8013f3c:	fb91 f5f6 	sdiv	r5, r1, r6
 8013f40:	fb06 1415 	mls	r4, r6, r5, r1
 8013f44:	3430      	adds	r4, #48	; 0x30
 8013f46:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8013f4a:	460c      	mov	r4, r1
 8013f4c:	2c63      	cmp	r4, #99	; 0x63
 8013f4e:	f102 32ff 	add.w	r2, r2, #4294967295
 8013f52:	4629      	mov	r1, r5
 8013f54:	dcf1      	bgt.n	8013f3a <__exponent+0x22>
 8013f56:	3130      	adds	r1, #48	; 0x30
 8013f58:	f1ac 0402 	sub.w	r4, ip, #2
 8013f5c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013f60:	1c41      	adds	r1, r0, #1
 8013f62:	4622      	mov	r2, r4
 8013f64:	42ba      	cmp	r2, r7
 8013f66:	d30a      	bcc.n	8013f7e <__exponent+0x66>
 8013f68:	f10d 0209 	add.w	r2, sp, #9
 8013f6c:	eba2 020c 	sub.w	r2, r2, ip
 8013f70:	42bc      	cmp	r4, r7
 8013f72:	bf88      	it	hi
 8013f74:	2200      	movhi	r2, #0
 8013f76:	4413      	add	r3, r2
 8013f78:	1a18      	subs	r0, r3, r0
 8013f7a:	b003      	add	sp, #12
 8013f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f7e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013f82:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013f86:	e7ed      	b.n	8013f64 <__exponent+0x4c>
 8013f88:	2330      	movs	r3, #48	; 0x30
 8013f8a:	3130      	adds	r1, #48	; 0x30
 8013f8c:	7083      	strb	r3, [r0, #2]
 8013f8e:	70c1      	strb	r1, [r0, #3]
 8013f90:	1d03      	adds	r3, r0, #4
 8013f92:	e7f1      	b.n	8013f78 <__exponent+0x60>

08013f94 <_printf_float>:
 8013f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f98:	ed2d 8b02 	vpush	{d8}
 8013f9c:	b08d      	sub	sp, #52	; 0x34
 8013f9e:	460c      	mov	r4, r1
 8013fa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013fa4:	4616      	mov	r6, r2
 8013fa6:	461f      	mov	r7, r3
 8013fa8:	4605      	mov	r5, r0
 8013faa:	f000 fe6d 	bl	8014c88 <_localeconv_r>
 8013fae:	f8d0 a000 	ldr.w	sl, [r0]
 8013fb2:	4650      	mov	r0, sl
 8013fb4:	f7ec f97c 	bl	80002b0 <strlen>
 8013fb8:	2300      	movs	r3, #0
 8013fba:	930a      	str	r3, [sp, #40]	; 0x28
 8013fbc:	6823      	ldr	r3, [r4, #0]
 8013fbe:	9305      	str	r3, [sp, #20]
 8013fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8013fc4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013fc8:	3307      	adds	r3, #7
 8013fca:	f023 0307 	bic.w	r3, r3, #7
 8013fce:	f103 0208 	add.w	r2, r3, #8
 8013fd2:	f8c8 2000 	str.w	r2, [r8]
 8013fd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013fda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013fde:	9307      	str	r3, [sp, #28]
 8013fe0:	f8cd 8018 	str.w	r8, [sp, #24]
 8013fe4:	ee08 0a10 	vmov	s16, r0
 8013fe8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8013fec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ff0:	4b9e      	ldr	r3, [pc, #632]	; (801426c <_printf_float+0x2d8>)
 8013ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8013ff6:	f7ec fdb9 	bl	8000b6c <__aeabi_dcmpun>
 8013ffa:	bb88      	cbnz	r0, 8014060 <_printf_float+0xcc>
 8013ffc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014000:	4b9a      	ldr	r3, [pc, #616]	; (801426c <_printf_float+0x2d8>)
 8014002:	f04f 32ff 	mov.w	r2, #4294967295
 8014006:	f7ec fd93 	bl	8000b30 <__aeabi_dcmple>
 801400a:	bb48      	cbnz	r0, 8014060 <_printf_float+0xcc>
 801400c:	2200      	movs	r2, #0
 801400e:	2300      	movs	r3, #0
 8014010:	4640      	mov	r0, r8
 8014012:	4649      	mov	r1, r9
 8014014:	f7ec fd82 	bl	8000b1c <__aeabi_dcmplt>
 8014018:	b110      	cbz	r0, 8014020 <_printf_float+0x8c>
 801401a:	232d      	movs	r3, #45	; 0x2d
 801401c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014020:	4a93      	ldr	r2, [pc, #588]	; (8014270 <_printf_float+0x2dc>)
 8014022:	4b94      	ldr	r3, [pc, #592]	; (8014274 <_printf_float+0x2e0>)
 8014024:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014028:	bf94      	ite	ls
 801402a:	4690      	movls	r8, r2
 801402c:	4698      	movhi	r8, r3
 801402e:	2303      	movs	r3, #3
 8014030:	6123      	str	r3, [r4, #16]
 8014032:	9b05      	ldr	r3, [sp, #20]
 8014034:	f023 0304 	bic.w	r3, r3, #4
 8014038:	6023      	str	r3, [r4, #0]
 801403a:	f04f 0900 	mov.w	r9, #0
 801403e:	9700      	str	r7, [sp, #0]
 8014040:	4633      	mov	r3, r6
 8014042:	aa0b      	add	r2, sp, #44	; 0x2c
 8014044:	4621      	mov	r1, r4
 8014046:	4628      	mov	r0, r5
 8014048:	f000 f9da 	bl	8014400 <_printf_common>
 801404c:	3001      	adds	r0, #1
 801404e:	f040 8090 	bne.w	8014172 <_printf_float+0x1de>
 8014052:	f04f 30ff 	mov.w	r0, #4294967295
 8014056:	b00d      	add	sp, #52	; 0x34
 8014058:	ecbd 8b02 	vpop	{d8}
 801405c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014060:	4642      	mov	r2, r8
 8014062:	464b      	mov	r3, r9
 8014064:	4640      	mov	r0, r8
 8014066:	4649      	mov	r1, r9
 8014068:	f7ec fd80 	bl	8000b6c <__aeabi_dcmpun>
 801406c:	b140      	cbz	r0, 8014080 <_printf_float+0xec>
 801406e:	464b      	mov	r3, r9
 8014070:	2b00      	cmp	r3, #0
 8014072:	bfbc      	itt	lt
 8014074:	232d      	movlt	r3, #45	; 0x2d
 8014076:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801407a:	4a7f      	ldr	r2, [pc, #508]	; (8014278 <_printf_float+0x2e4>)
 801407c:	4b7f      	ldr	r3, [pc, #508]	; (801427c <_printf_float+0x2e8>)
 801407e:	e7d1      	b.n	8014024 <_printf_float+0x90>
 8014080:	6863      	ldr	r3, [r4, #4]
 8014082:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014086:	9206      	str	r2, [sp, #24]
 8014088:	1c5a      	adds	r2, r3, #1
 801408a:	d13f      	bne.n	801410c <_printf_float+0x178>
 801408c:	2306      	movs	r3, #6
 801408e:	6063      	str	r3, [r4, #4]
 8014090:	9b05      	ldr	r3, [sp, #20]
 8014092:	6861      	ldr	r1, [r4, #4]
 8014094:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014098:	2300      	movs	r3, #0
 801409a:	9303      	str	r3, [sp, #12]
 801409c:	ab0a      	add	r3, sp, #40	; 0x28
 801409e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80140a2:	ab09      	add	r3, sp, #36	; 0x24
 80140a4:	ec49 8b10 	vmov	d0, r8, r9
 80140a8:	9300      	str	r3, [sp, #0]
 80140aa:	6022      	str	r2, [r4, #0]
 80140ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80140b0:	4628      	mov	r0, r5
 80140b2:	f7ff fecf 	bl	8013e54 <__cvt>
 80140b6:	9b06      	ldr	r3, [sp, #24]
 80140b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140ba:	2b47      	cmp	r3, #71	; 0x47
 80140bc:	4680      	mov	r8, r0
 80140be:	d108      	bne.n	80140d2 <_printf_float+0x13e>
 80140c0:	1cc8      	adds	r0, r1, #3
 80140c2:	db02      	blt.n	80140ca <_printf_float+0x136>
 80140c4:	6863      	ldr	r3, [r4, #4]
 80140c6:	4299      	cmp	r1, r3
 80140c8:	dd41      	ble.n	801414e <_printf_float+0x1ba>
 80140ca:	f1ab 0302 	sub.w	r3, fp, #2
 80140ce:	fa5f fb83 	uxtb.w	fp, r3
 80140d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80140d6:	d820      	bhi.n	801411a <_printf_float+0x186>
 80140d8:	3901      	subs	r1, #1
 80140da:	465a      	mov	r2, fp
 80140dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80140e0:	9109      	str	r1, [sp, #36]	; 0x24
 80140e2:	f7ff ff19 	bl	8013f18 <__exponent>
 80140e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80140e8:	1813      	adds	r3, r2, r0
 80140ea:	2a01      	cmp	r2, #1
 80140ec:	4681      	mov	r9, r0
 80140ee:	6123      	str	r3, [r4, #16]
 80140f0:	dc02      	bgt.n	80140f8 <_printf_float+0x164>
 80140f2:	6822      	ldr	r2, [r4, #0]
 80140f4:	07d2      	lsls	r2, r2, #31
 80140f6:	d501      	bpl.n	80140fc <_printf_float+0x168>
 80140f8:	3301      	adds	r3, #1
 80140fa:	6123      	str	r3, [r4, #16]
 80140fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014100:	2b00      	cmp	r3, #0
 8014102:	d09c      	beq.n	801403e <_printf_float+0xaa>
 8014104:	232d      	movs	r3, #45	; 0x2d
 8014106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801410a:	e798      	b.n	801403e <_printf_float+0xaa>
 801410c:	9a06      	ldr	r2, [sp, #24]
 801410e:	2a47      	cmp	r2, #71	; 0x47
 8014110:	d1be      	bne.n	8014090 <_printf_float+0xfc>
 8014112:	2b00      	cmp	r3, #0
 8014114:	d1bc      	bne.n	8014090 <_printf_float+0xfc>
 8014116:	2301      	movs	r3, #1
 8014118:	e7b9      	b.n	801408e <_printf_float+0xfa>
 801411a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801411e:	d118      	bne.n	8014152 <_printf_float+0x1be>
 8014120:	2900      	cmp	r1, #0
 8014122:	6863      	ldr	r3, [r4, #4]
 8014124:	dd0b      	ble.n	801413e <_printf_float+0x1aa>
 8014126:	6121      	str	r1, [r4, #16]
 8014128:	b913      	cbnz	r3, 8014130 <_printf_float+0x19c>
 801412a:	6822      	ldr	r2, [r4, #0]
 801412c:	07d0      	lsls	r0, r2, #31
 801412e:	d502      	bpl.n	8014136 <_printf_float+0x1a2>
 8014130:	3301      	adds	r3, #1
 8014132:	440b      	add	r3, r1
 8014134:	6123      	str	r3, [r4, #16]
 8014136:	65a1      	str	r1, [r4, #88]	; 0x58
 8014138:	f04f 0900 	mov.w	r9, #0
 801413c:	e7de      	b.n	80140fc <_printf_float+0x168>
 801413e:	b913      	cbnz	r3, 8014146 <_printf_float+0x1b2>
 8014140:	6822      	ldr	r2, [r4, #0]
 8014142:	07d2      	lsls	r2, r2, #31
 8014144:	d501      	bpl.n	801414a <_printf_float+0x1b6>
 8014146:	3302      	adds	r3, #2
 8014148:	e7f4      	b.n	8014134 <_printf_float+0x1a0>
 801414a:	2301      	movs	r3, #1
 801414c:	e7f2      	b.n	8014134 <_printf_float+0x1a0>
 801414e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014154:	4299      	cmp	r1, r3
 8014156:	db05      	blt.n	8014164 <_printf_float+0x1d0>
 8014158:	6823      	ldr	r3, [r4, #0]
 801415a:	6121      	str	r1, [r4, #16]
 801415c:	07d8      	lsls	r0, r3, #31
 801415e:	d5ea      	bpl.n	8014136 <_printf_float+0x1a2>
 8014160:	1c4b      	adds	r3, r1, #1
 8014162:	e7e7      	b.n	8014134 <_printf_float+0x1a0>
 8014164:	2900      	cmp	r1, #0
 8014166:	bfd4      	ite	le
 8014168:	f1c1 0202 	rsble	r2, r1, #2
 801416c:	2201      	movgt	r2, #1
 801416e:	4413      	add	r3, r2
 8014170:	e7e0      	b.n	8014134 <_printf_float+0x1a0>
 8014172:	6823      	ldr	r3, [r4, #0]
 8014174:	055a      	lsls	r2, r3, #21
 8014176:	d407      	bmi.n	8014188 <_printf_float+0x1f4>
 8014178:	6923      	ldr	r3, [r4, #16]
 801417a:	4642      	mov	r2, r8
 801417c:	4631      	mov	r1, r6
 801417e:	4628      	mov	r0, r5
 8014180:	47b8      	blx	r7
 8014182:	3001      	adds	r0, #1
 8014184:	d12c      	bne.n	80141e0 <_printf_float+0x24c>
 8014186:	e764      	b.n	8014052 <_printf_float+0xbe>
 8014188:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801418c:	f240 80e0 	bls.w	8014350 <_printf_float+0x3bc>
 8014190:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014194:	2200      	movs	r2, #0
 8014196:	2300      	movs	r3, #0
 8014198:	f7ec fcb6 	bl	8000b08 <__aeabi_dcmpeq>
 801419c:	2800      	cmp	r0, #0
 801419e:	d034      	beq.n	801420a <_printf_float+0x276>
 80141a0:	4a37      	ldr	r2, [pc, #220]	; (8014280 <_printf_float+0x2ec>)
 80141a2:	2301      	movs	r3, #1
 80141a4:	4631      	mov	r1, r6
 80141a6:	4628      	mov	r0, r5
 80141a8:	47b8      	blx	r7
 80141aa:	3001      	adds	r0, #1
 80141ac:	f43f af51 	beq.w	8014052 <_printf_float+0xbe>
 80141b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80141b4:	429a      	cmp	r2, r3
 80141b6:	db02      	blt.n	80141be <_printf_float+0x22a>
 80141b8:	6823      	ldr	r3, [r4, #0]
 80141ba:	07d8      	lsls	r0, r3, #31
 80141bc:	d510      	bpl.n	80141e0 <_printf_float+0x24c>
 80141be:	ee18 3a10 	vmov	r3, s16
 80141c2:	4652      	mov	r2, sl
 80141c4:	4631      	mov	r1, r6
 80141c6:	4628      	mov	r0, r5
 80141c8:	47b8      	blx	r7
 80141ca:	3001      	adds	r0, #1
 80141cc:	f43f af41 	beq.w	8014052 <_printf_float+0xbe>
 80141d0:	f04f 0800 	mov.w	r8, #0
 80141d4:	f104 091a 	add.w	r9, r4, #26
 80141d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141da:	3b01      	subs	r3, #1
 80141dc:	4543      	cmp	r3, r8
 80141de:	dc09      	bgt.n	80141f4 <_printf_float+0x260>
 80141e0:	6823      	ldr	r3, [r4, #0]
 80141e2:	079b      	lsls	r3, r3, #30
 80141e4:	f100 8107 	bmi.w	80143f6 <_printf_float+0x462>
 80141e8:	68e0      	ldr	r0, [r4, #12]
 80141ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80141ec:	4298      	cmp	r0, r3
 80141ee:	bfb8      	it	lt
 80141f0:	4618      	movlt	r0, r3
 80141f2:	e730      	b.n	8014056 <_printf_float+0xc2>
 80141f4:	2301      	movs	r3, #1
 80141f6:	464a      	mov	r2, r9
 80141f8:	4631      	mov	r1, r6
 80141fa:	4628      	mov	r0, r5
 80141fc:	47b8      	blx	r7
 80141fe:	3001      	adds	r0, #1
 8014200:	f43f af27 	beq.w	8014052 <_printf_float+0xbe>
 8014204:	f108 0801 	add.w	r8, r8, #1
 8014208:	e7e6      	b.n	80141d8 <_printf_float+0x244>
 801420a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801420c:	2b00      	cmp	r3, #0
 801420e:	dc39      	bgt.n	8014284 <_printf_float+0x2f0>
 8014210:	4a1b      	ldr	r2, [pc, #108]	; (8014280 <_printf_float+0x2ec>)
 8014212:	2301      	movs	r3, #1
 8014214:	4631      	mov	r1, r6
 8014216:	4628      	mov	r0, r5
 8014218:	47b8      	blx	r7
 801421a:	3001      	adds	r0, #1
 801421c:	f43f af19 	beq.w	8014052 <_printf_float+0xbe>
 8014220:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014224:	4313      	orrs	r3, r2
 8014226:	d102      	bne.n	801422e <_printf_float+0x29a>
 8014228:	6823      	ldr	r3, [r4, #0]
 801422a:	07d9      	lsls	r1, r3, #31
 801422c:	d5d8      	bpl.n	80141e0 <_printf_float+0x24c>
 801422e:	ee18 3a10 	vmov	r3, s16
 8014232:	4652      	mov	r2, sl
 8014234:	4631      	mov	r1, r6
 8014236:	4628      	mov	r0, r5
 8014238:	47b8      	blx	r7
 801423a:	3001      	adds	r0, #1
 801423c:	f43f af09 	beq.w	8014052 <_printf_float+0xbe>
 8014240:	f04f 0900 	mov.w	r9, #0
 8014244:	f104 0a1a 	add.w	sl, r4, #26
 8014248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801424a:	425b      	negs	r3, r3
 801424c:	454b      	cmp	r3, r9
 801424e:	dc01      	bgt.n	8014254 <_printf_float+0x2c0>
 8014250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014252:	e792      	b.n	801417a <_printf_float+0x1e6>
 8014254:	2301      	movs	r3, #1
 8014256:	4652      	mov	r2, sl
 8014258:	4631      	mov	r1, r6
 801425a:	4628      	mov	r0, r5
 801425c:	47b8      	blx	r7
 801425e:	3001      	adds	r0, #1
 8014260:	f43f aef7 	beq.w	8014052 <_printf_float+0xbe>
 8014264:	f109 0901 	add.w	r9, r9, #1
 8014268:	e7ee      	b.n	8014248 <_printf_float+0x2b4>
 801426a:	bf00      	nop
 801426c:	7fefffff 	.word	0x7fefffff
 8014270:	0801a989 	.word	0x0801a989
 8014274:	0801a98d 	.word	0x0801a98d
 8014278:	0801a991 	.word	0x0801a991
 801427c:	0801a995 	.word	0x0801a995
 8014280:	0801a999 	.word	0x0801a999
 8014284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014286:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014288:	429a      	cmp	r2, r3
 801428a:	bfa8      	it	ge
 801428c:	461a      	movge	r2, r3
 801428e:	2a00      	cmp	r2, #0
 8014290:	4691      	mov	r9, r2
 8014292:	dc37      	bgt.n	8014304 <_printf_float+0x370>
 8014294:	f04f 0b00 	mov.w	fp, #0
 8014298:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801429c:	f104 021a 	add.w	r2, r4, #26
 80142a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80142a2:	9305      	str	r3, [sp, #20]
 80142a4:	eba3 0309 	sub.w	r3, r3, r9
 80142a8:	455b      	cmp	r3, fp
 80142aa:	dc33      	bgt.n	8014314 <_printf_float+0x380>
 80142ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80142b0:	429a      	cmp	r2, r3
 80142b2:	db3b      	blt.n	801432c <_printf_float+0x398>
 80142b4:	6823      	ldr	r3, [r4, #0]
 80142b6:	07da      	lsls	r2, r3, #31
 80142b8:	d438      	bmi.n	801432c <_printf_float+0x398>
 80142ba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80142be:	eba2 0903 	sub.w	r9, r2, r3
 80142c2:	9b05      	ldr	r3, [sp, #20]
 80142c4:	1ad2      	subs	r2, r2, r3
 80142c6:	4591      	cmp	r9, r2
 80142c8:	bfa8      	it	ge
 80142ca:	4691      	movge	r9, r2
 80142cc:	f1b9 0f00 	cmp.w	r9, #0
 80142d0:	dc35      	bgt.n	801433e <_printf_float+0x3aa>
 80142d2:	f04f 0800 	mov.w	r8, #0
 80142d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80142da:	f104 0a1a 	add.w	sl, r4, #26
 80142de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80142e2:	1a9b      	subs	r3, r3, r2
 80142e4:	eba3 0309 	sub.w	r3, r3, r9
 80142e8:	4543      	cmp	r3, r8
 80142ea:	f77f af79 	ble.w	80141e0 <_printf_float+0x24c>
 80142ee:	2301      	movs	r3, #1
 80142f0:	4652      	mov	r2, sl
 80142f2:	4631      	mov	r1, r6
 80142f4:	4628      	mov	r0, r5
 80142f6:	47b8      	blx	r7
 80142f8:	3001      	adds	r0, #1
 80142fa:	f43f aeaa 	beq.w	8014052 <_printf_float+0xbe>
 80142fe:	f108 0801 	add.w	r8, r8, #1
 8014302:	e7ec      	b.n	80142de <_printf_float+0x34a>
 8014304:	4613      	mov	r3, r2
 8014306:	4631      	mov	r1, r6
 8014308:	4642      	mov	r2, r8
 801430a:	4628      	mov	r0, r5
 801430c:	47b8      	blx	r7
 801430e:	3001      	adds	r0, #1
 8014310:	d1c0      	bne.n	8014294 <_printf_float+0x300>
 8014312:	e69e      	b.n	8014052 <_printf_float+0xbe>
 8014314:	2301      	movs	r3, #1
 8014316:	4631      	mov	r1, r6
 8014318:	4628      	mov	r0, r5
 801431a:	9205      	str	r2, [sp, #20]
 801431c:	47b8      	blx	r7
 801431e:	3001      	adds	r0, #1
 8014320:	f43f ae97 	beq.w	8014052 <_printf_float+0xbe>
 8014324:	9a05      	ldr	r2, [sp, #20]
 8014326:	f10b 0b01 	add.w	fp, fp, #1
 801432a:	e7b9      	b.n	80142a0 <_printf_float+0x30c>
 801432c:	ee18 3a10 	vmov	r3, s16
 8014330:	4652      	mov	r2, sl
 8014332:	4631      	mov	r1, r6
 8014334:	4628      	mov	r0, r5
 8014336:	47b8      	blx	r7
 8014338:	3001      	adds	r0, #1
 801433a:	d1be      	bne.n	80142ba <_printf_float+0x326>
 801433c:	e689      	b.n	8014052 <_printf_float+0xbe>
 801433e:	9a05      	ldr	r2, [sp, #20]
 8014340:	464b      	mov	r3, r9
 8014342:	4442      	add	r2, r8
 8014344:	4631      	mov	r1, r6
 8014346:	4628      	mov	r0, r5
 8014348:	47b8      	blx	r7
 801434a:	3001      	adds	r0, #1
 801434c:	d1c1      	bne.n	80142d2 <_printf_float+0x33e>
 801434e:	e680      	b.n	8014052 <_printf_float+0xbe>
 8014350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014352:	2a01      	cmp	r2, #1
 8014354:	dc01      	bgt.n	801435a <_printf_float+0x3c6>
 8014356:	07db      	lsls	r3, r3, #31
 8014358:	d53a      	bpl.n	80143d0 <_printf_float+0x43c>
 801435a:	2301      	movs	r3, #1
 801435c:	4642      	mov	r2, r8
 801435e:	4631      	mov	r1, r6
 8014360:	4628      	mov	r0, r5
 8014362:	47b8      	blx	r7
 8014364:	3001      	adds	r0, #1
 8014366:	f43f ae74 	beq.w	8014052 <_printf_float+0xbe>
 801436a:	ee18 3a10 	vmov	r3, s16
 801436e:	4652      	mov	r2, sl
 8014370:	4631      	mov	r1, r6
 8014372:	4628      	mov	r0, r5
 8014374:	47b8      	blx	r7
 8014376:	3001      	adds	r0, #1
 8014378:	f43f ae6b 	beq.w	8014052 <_printf_float+0xbe>
 801437c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014380:	2200      	movs	r2, #0
 8014382:	2300      	movs	r3, #0
 8014384:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8014388:	f7ec fbbe 	bl	8000b08 <__aeabi_dcmpeq>
 801438c:	b9d8      	cbnz	r0, 80143c6 <_printf_float+0x432>
 801438e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014392:	f108 0201 	add.w	r2, r8, #1
 8014396:	4631      	mov	r1, r6
 8014398:	4628      	mov	r0, r5
 801439a:	47b8      	blx	r7
 801439c:	3001      	adds	r0, #1
 801439e:	d10e      	bne.n	80143be <_printf_float+0x42a>
 80143a0:	e657      	b.n	8014052 <_printf_float+0xbe>
 80143a2:	2301      	movs	r3, #1
 80143a4:	4652      	mov	r2, sl
 80143a6:	4631      	mov	r1, r6
 80143a8:	4628      	mov	r0, r5
 80143aa:	47b8      	blx	r7
 80143ac:	3001      	adds	r0, #1
 80143ae:	f43f ae50 	beq.w	8014052 <_printf_float+0xbe>
 80143b2:	f108 0801 	add.w	r8, r8, #1
 80143b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143b8:	3b01      	subs	r3, #1
 80143ba:	4543      	cmp	r3, r8
 80143bc:	dcf1      	bgt.n	80143a2 <_printf_float+0x40e>
 80143be:	464b      	mov	r3, r9
 80143c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80143c4:	e6da      	b.n	801417c <_printf_float+0x1e8>
 80143c6:	f04f 0800 	mov.w	r8, #0
 80143ca:	f104 0a1a 	add.w	sl, r4, #26
 80143ce:	e7f2      	b.n	80143b6 <_printf_float+0x422>
 80143d0:	2301      	movs	r3, #1
 80143d2:	4642      	mov	r2, r8
 80143d4:	e7df      	b.n	8014396 <_printf_float+0x402>
 80143d6:	2301      	movs	r3, #1
 80143d8:	464a      	mov	r2, r9
 80143da:	4631      	mov	r1, r6
 80143dc:	4628      	mov	r0, r5
 80143de:	47b8      	blx	r7
 80143e0:	3001      	adds	r0, #1
 80143e2:	f43f ae36 	beq.w	8014052 <_printf_float+0xbe>
 80143e6:	f108 0801 	add.w	r8, r8, #1
 80143ea:	68e3      	ldr	r3, [r4, #12]
 80143ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80143ee:	1a5b      	subs	r3, r3, r1
 80143f0:	4543      	cmp	r3, r8
 80143f2:	dcf0      	bgt.n	80143d6 <_printf_float+0x442>
 80143f4:	e6f8      	b.n	80141e8 <_printf_float+0x254>
 80143f6:	f04f 0800 	mov.w	r8, #0
 80143fa:	f104 0919 	add.w	r9, r4, #25
 80143fe:	e7f4      	b.n	80143ea <_printf_float+0x456>

08014400 <_printf_common>:
 8014400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014404:	4616      	mov	r6, r2
 8014406:	4699      	mov	r9, r3
 8014408:	688a      	ldr	r2, [r1, #8]
 801440a:	690b      	ldr	r3, [r1, #16]
 801440c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014410:	4293      	cmp	r3, r2
 8014412:	bfb8      	it	lt
 8014414:	4613      	movlt	r3, r2
 8014416:	6033      	str	r3, [r6, #0]
 8014418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801441c:	4607      	mov	r7, r0
 801441e:	460c      	mov	r4, r1
 8014420:	b10a      	cbz	r2, 8014426 <_printf_common+0x26>
 8014422:	3301      	adds	r3, #1
 8014424:	6033      	str	r3, [r6, #0]
 8014426:	6823      	ldr	r3, [r4, #0]
 8014428:	0699      	lsls	r1, r3, #26
 801442a:	bf42      	ittt	mi
 801442c:	6833      	ldrmi	r3, [r6, #0]
 801442e:	3302      	addmi	r3, #2
 8014430:	6033      	strmi	r3, [r6, #0]
 8014432:	6825      	ldr	r5, [r4, #0]
 8014434:	f015 0506 	ands.w	r5, r5, #6
 8014438:	d106      	bne.n	8014448 <_printf_common+0x48>
 801443a:	f104 0a19 	add.w	sl, r4, #25
 801443e:	68e3      	ldr	r3, [r4, #12]
 8014440:	6832      	ldr	r2, [r6, #0]
 8014442:	1a9b      	subs	r3, r3, r2
 8014444:	42ab      	cmp	r3, r5
 8014446:	dc26      	bgt.n	8014496 <_printf_common+0x96>
 8014448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801444c:	1e13      	subs	r3, r2, #0
 801444e:	6822      	ldr	r2, [r4, #0]
 8014450:	bf18      	it	ne
 8014452:	2301      	movne	r3, #1
 8014454:	0692      	lsls	r2, r2, #26
 8014456:	d42b      	bmi.n	80144b0 <_printf_common+0xb0>
 8014458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801445c:	4649      	mov	r1, r9
 801445e:	4638      	mov	r0, r7
 8014460:	47c0      	blx	r8
 8014462:	3001      	adds	r0, #1
 8014464:	d01e      	beq.n	80144a4 <_printf_common+0xa4>
 8014466:	6823      	ldr	r3, [r4, #0]
 8014468:	6922      	ldr	r2, [r4, #16]
 801446a:	f003 0306 	and.w	r3, r3, #6
 801446e:	2b04      	cmp	r3, #4
 8014470:	bf02      	ittt	eq
 8014472:	68e5      	ldreq	r5, [r4, #12]
 8014474:	6833      	ldreq	r3, [r6, #0]
 8014476:	1aed      	subeq	r5, r5, r3
 8014478:	68a3      	ldr	r3, [r4, #8]
 801447a:	bf0c      	ite	eq
 801447c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014480:	2500      	movne	r5, #0
 8014482:	4293      	cmp	r3, r2
 8014484:	bfc4      	itt	gt
 8014486:	1a9b      	subgt	r3, r3, r2
 8014488:	18ed      	addgt	r5, r5, r3
 801448a:	2600      	movs	r6, #0
 801448c:	341a      	adds	r4, #26
 801448e:	42b5      	cmp	r5, r6
 8014490:	d11a      	bne.n	80144c8 <_printf_common+0xc8>
 8014492:	2000      	movs	r0, #0
 8014494:	e008      	b.n	80144a8 <_printf_common+0xa8>
 8014496:	2301      	movs	r3, #1
 8014498:	4652      	mov	r2, sl
 801449a:	4649      	mov	r1, r9
 801449c:	4638      	mov	r0, r7
 801449e:	47c0      	blx	r8
 80144a0:	3001      	adds	r0, #1
 80144a2:	d103      	bne.n	80144ac <_printf_common+0xac>
 80144a4:	f04f 30ff 	mov.w	r0, #4294967295
 80144a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144ac:	3501      	adds	r5, #1
 80144ae:	e7c6      	b.n	801443e <_printf_common+0x3e>
 80144b0:	18e1      	adds	r1, r4, r3
 80144b2:	1c5a      	adds	r2, r3, #1
 80144b4:	2030      	movs	r0, #48	; 0x30
 80144b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80144ba:	4422      	add	r2, r4
 80144bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80144c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80144c4:	3302      	adds	r3, #2
 80144c6:	e7c7      	b.n	8014458 <_printf_common+0x58>
 80144c8:	2301      	movs	r3, #1
 80144ca:	4622      	mov	r2, r4
 80144cc:	4649      	mov	r1, r9
 80144ce:	4638      	mov	r0, r7
 80144d0:	47c0      	blx	r8
 80144d2:	3001      	adds	r0, #1
 80144d4:	d0e6      	beq.n	80144a4 <_printf_common+0xa4>
 80144d6:	3601      	adds	r6, #1
 80144d8:	e7d9      	b.n	801448e <_printf_common+0x8e>
	...

080144dc <_printf_i>:
 80144dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80144e0:	7e0f      	ldrb	r7, [r1, #24]
 80144e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80144e4:	2f78      	cmp	r7, #120	; 0x78
 80144e6:	4691      	mov	r9, r2
 80144e8:	4680      	mov	r8, r0
 80144ea:	460c      	mov	r4, r1
 80144ec:	469a      	mov	sl, r3
 80144ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80144f2:	d807      	bhi.n	8014504 <_printf_i+0x28>
 80144f4:	2f62      	cmp	r7, #98	; 0x62
 80144f6:	d80a      	bhi.n	801450e <_printf_i+0x32>
 80144f8:	2f00      	cmp	r7, #0
 80144fa:	f000 80d4 	beq.w	80146a6 <_printf_i+0x1ca>
 80144fe:	2f58      	cmp	r7, #88	; 0x58
 8014500:	f000 80c0 	beq.w	8014684 <_printf_i+0x1a8>
 8014504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801450c:	e03a      	b.n	8014584 <_printf_i+0xa8>
 801450e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014512:	2b15      	cmp	r3, #21
 8014514:	d8f6      	bhi.n	8014504 <_printf_i+0x28>
 8014516:	a101      	add	r1, pc, #4	; (adr r1, 801451c <_printf_i+0x40>)
 8014518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801451c:	08014575 	.word	0x08014575
 8014520:	08014589 	.word	0x08014589
 8014524:	08014505 	.word	0x08014505
 8014528:	08014505 	.word	0x08014505
 801452c:	08014505 	.word	0x08014505
 8014530:	08014505 	.word	0x08014505
 8014534:	08014589 	.word	0x08014589
 8014538:	08014505 	.word	0x08014505
 801453c:	08014505 	.word	0x08014505
 8014540:	08014505 	.word	0x08014505
 8014544:	08014505 	.word	0x08014505
 8014548:	0801468d 	.word	0x0801468d
 801454c:	080145b5 	.word	0x080145b5
 8014550:	08014647 	.word	0x08014647
 8014554:	08014505 	.word	0x08014505
 8014558:	08014505 	.word	0x08014505
 801455c:	080146af 	.word	0x080146af
 8014560:	08014505 	.word	0x08014505
 8014564:	080145b5 	.word	0x080145b5
 8014568:	08014505 	.word	0x08014505
 801456c:	08014505 	.word	0x08014505
 8014570:	0801464f 	.word	0x0801464f
 8014574:	682b      	ldr	r3, [r5, #0]
 8014576:	1d1a      	adds	r2, r3, #4
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	602a      	str	r2, [r5, #0]
 801457c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014584:	2301      	movs	r3, #1
 8014586:	e09f      	b.n	80146c8 <_printf_i+0x1ec>
 8014588:	6820      	ldr	r0, [r4, #0]
 801458a:	682b      	ldr	r3, [r5, #0]
 801458c:	0607      	lsls	r7, r0, #24
 801458e:	f103 0104 	add.w	r1, r3, #4
 8014592:	6029      	str	r1, [r5, #0]
 8014594:	d501      	bpl.n	801459a <_printf_i+0xbe>
 8014596:	681e      	ldr	r6, [r3, #0]
 8014598:	e003      	b.n	80145a2 <_printf_i+0xc6>
 801459a:	0646      	lsls	r6, r0, #25
 801459c:	d5fb      	bpl.n	8014596 <_printf_i+0xba>
 801459e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80145a2:	2e00      	cmp	r6, #0
 80145a4:	da03      	bge.n	80145ae <_printf_i+0xd2>
 80145a6:	232d      	movs	r3, #45	; 0x2d
 80145a8:	4276      	negs	r6, r6
 80145aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80145ae:	485a      	ldr	r0, [pc, #360]	; (8014718 <_printf_i+0x23c>)
 80145b0:	230a      	movs	r3, #10
 80145b2:	e012      	b.n	80145da <_printf_i+0xfe>
 80145b4:	682b      	ldr	r3, [r5, #0]
 80145b6:	6820      	ldr	r0, [r4, #0]
 80145b8:	1d19      	adds	r1, r3, #4
 80145ba:	6029      	str	r1, [r5, #0]
 80145bc:	0605      	lsls	r5, r0, #24
 80145be:	d501      	bpl.n	80145c4 <_printf_i+0xe8>
 80145c0:	681e      	ldr	r6, [r3, #0]
 80145c2:	e002      	b.n	80145ca <_printf_i+0xee>
 80145c4:	0641      	lsls	r1, r0, #25
 80145c6:	d5fb      	bpl.n	80145c0 <_printf_i+0xe4>
 80145c8:	881e      	ldrh	r6, [r3, #0]
 80145ca:	4853      	ldr	r0, [pc, #332]	; (8014718 <_printf_i+0x23c>)
 80145cc:	2f6f      	cmp	r7, #111	; 0x6f
 80145ce:	bf0c      	ite	eq
 80145d0:	2308      	moveq	r3, #8
 80145d2:	230a      	movne	r3, #10
 80145d4:	2100      	movs	r1, #0
 80145d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80145da:	6865      	ldr	r5, [r4, #4]
 80145dc:	60a5      	str	r5, [r4, #8]
 80145de:	2d00      	cmp	r5, #0
 80145e0:	bfa2      	ittt	ge
 80145e2:	6821      	ldrge	r1, [r4, #0]
 80145e4:	f021 0104 	bicge.w	r1, r1, #4
 80145e8:	6021      	strge	r1, [r4, #0]
 80145ea:	b90e      	cbnz	r6, 80145f0 <_printf_i+0x114>
 80145ec:	2d00      	cmp	r5, #0
 80145ee:	d04b      	beq.n	8014688 <_printf_i+0x1ac>
 80145f0:	4615      	mov	r5, r2
 80145f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80145f6:	fb03 6711 	mls	r7, r3, r1, r6
 80145fa:	5dc7      	ldrb	r7, [r0, r7]
 80145fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014600:	4637      	mov	r7, r6
 8014602:	42bb      	cmp	r3, r7
 8014604:	460e      	mov	r6, r1
 8014606:	d9f4      	bls.n	80145f2 <_printf_i+0x116>
 8014608:	2b08      	cmp	r3, #8
 801460a:	d10b      	bne.n	8014624 <_printf_i+0x148>
 801460c:	6823      	ldr	r3, [r4, #0]
 801460e:	07de      	lsls	r6, r3, #31
 8014610:	d508      	bpl.n	8014624 <_printf_i+0x148>
 8014612:	6923      	ldr	r3, [r4, #16]
 8014614:	6861      	ldr	r1, [r4, #4]
 8014616:	4299      	cmp	r1, r3
 8014618:	bfde      	ittt	le
 801461a:	2330      	movle	r3, #48	; 0x30
 801461c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014620:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014624:	1b52      	subs	r2, r2, r5
 8014626:	6122      	str	r2, [r4, #16]
 8014628:	f8cd a000 	str.w	sl, [sp]
 801462c:	464b      	mov	r3, r9
 801462e:	aa03      	add	r2, sp, #12
 8014630:	4621      	mov	r1, r4
 8014632:	4640      	mov	r0, r8
 8014634:	f7ff fee4 	bl	8014400 <_printf_common>
 8014638:	3001      	adds	r0, #1
 801463a:	d14a      	bne.n	80146d2 <_printf_i+0x1f6>
 801463c:	f04f 30ff 	mov.w	r0, #4294967295
 8014640:	b004      	add	sp, #16
 8014642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014646:	6823      	ldr	r3, [r4, #0]
 8014648:	f043 0320 	orr.w	r3, r3, #32
 801464c:	6023      	str	r3, [r4, #0]
 801464e:	4833      	ldr	r0, [pc, #204]	; (801471c <_printf_i+0x240>)
 8014650:	2778      	movs	r7, #120	; 0x78
 8014652:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014656:	6823      	ldr	r3, [r4, #0]
 8014658:	6829      	ldr	r1, [r5, #0]
 801465a:	061f      	lsls	r7, r3, #24
 801465c:	f851 6b04 	ldr.w	r6, [r1], #4
 8014660:	d402      	bmi.n	8014668 <_printf_i+0x18c>
 8014662:	065f      	lsls	r7, r3, #25
 8014664:	bf48      	it	mi
 8014666:	b2b6      	uxthmi	r6, r6
 8014668:	07df      	lsls	r7, r3, #31
 801466a:	bf48      	it	mi
 801466c:	f043 0320 	orrmi.w	r3, r3, #32
 8014670:	6029      	str	r1, [r5, #0]
 8014672:	bf48      	it	mi
 8014674:	6023      	strmi	r3, [r4, #0]
 8014676:	b91e      	cbnz	r6, 8014680 <_printf_i+0x1a4>
 8014678:	6823      	ldr	r3, [r4, #0]
 801467a:	f023 0320 	bic.w	r3, r3, #32
 801467e:	6023      	str	r3, [r4, #0]
 8014680:	2310      	movs	r3, #16
 8014682:	e7a7      	b.n	80145d4 <_printf_i+0xf8>
 8014684:	4824      	ldr	r0, [pc, #144]	; (8014718 <_printf_i+0x23c>)
 8014686:	e7e4      	b.n	8014652 <_printf_i+0x176>
 8014688:	4615      	mov	r5, r2
 801468a:	e7bd      	b.n	8014608 <_printf_i+0x12c>
 801468c:	682b      	ldr	r3, [r5, #0]
 801468e:	6826      	ldr	r6, [r4, #0]
 8014690:	6961      	ldr	r1, [r4, #20]
 8014692:	1d18      	adds	r0, r3, #4
 8014694:	6028      	str	r0, [r5, #0]
 8014696:	0635      	lsls	r5, r6, #24
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	d501      	bpl.n	80146a0 <_printf_i+0x1c4>
 801469c:	6019      	str	r1, [r3, #0]
 801469e:	e002      	b.n	80146a6 <_printf_i+0x1ca>
 80146a0:	0670      	lsls	r0, r6, #25
 80146a2:	d5fb      	bpl.n	801469c <_printf_i+0x1c0>
 80146a4:	8019      	strh	r1, [r3, #0]
 80146a6:	2300      	movs	r3, #0
 80146a8:	6123      	str	r3, [r4, #16]
 80146aa:	4615      	mov	r5, r2
 80146ac:	e7bc      	b.n	8014628 <_printf_i+0x14c>
 80146ae:	682b      	ldr	r3, [r5, #0]
 80146b0:	1d1a      	adds	r2, r3, #4
 80146b2:	602a      	str	r2, [r5, #0]
 80146b4:	681d      	ldr	r5, [r3, #0]
 80146b6:	6862      	ldr	r2, [r4, #4]
 80146b8:	2100      	movs	r1, #0
 80146ba:	4628      	mov	r0, r5
 80146bc:	f7eb fda8 	bl	8000210 <memchr>
 80146c0:	b108      	cbz	r0, 80146c6 <_printf_i+0x1ea>
 80146c2:	1b40      	subs	r0, r0, r5
 80146c4:	6060      	str	r0, [r4, #4]
 80146c6:	6863      	ldr	r3, [r4, #4]
 80146c8:	6123      	str	r3, [r4, #16]
 80146ca:	2300      	movs	r3, #0
 80146cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80146d0:	e7aa      	b.n	8014628 <_printf_i+0x14c>
 80146d2:	6923      	ldr	r3, [r4, #16]
 80146d4:	462a      	mov	r2, r5
 80146d6:	4649      	mov	r1, r9
 80146d8:	4640      	mov	r0, r8
 80146da:	47d0      	blx	sl
 80146dc:	3001      	adds	r0, #1
 80146de:	d0ad      	beq.n	801463c <_printf_i+0x160>
 80146e0:	6823      	ldr	r3, [r4, #0]
 80146e2:	079b      	lsls	r3, r3, #30
 80146e4:	d413      	bmi.n	801470e <_printf_i+0x232>
 80146e6:	68e0      	ldr	r0, [r4, #12]
 80146e8:	9b03      	ldr	r3, [sp, #12]
 80146ea:	4298      	cmp	r0, r3
 80146ec:	bfb8      	it	lt
 80146ee:	4618      	movlt	r0, r3
 80146f0:	e7a6      	b.n	8014640 <_printf_i+0x164>
 80146f2:	2301      	movs	r3, #1
 80146f4:	4632      	mov	r2, r6
 80146f6:	4649      	mov	r1, r9
 80146f8:	4640      	mov	r0, r8
 80146fa:	47d0      	blx	sl
 80146fc:	3001      	adds	r0, #1
 80146fe:	d09d      	beq.n	801463c <_printf_i+0x160>
 8014700:	3501      	adds	r5, #1
 8014702:	68e3      	ldr	r3, [r4, #12]
 8014704:	9903      	ldr	r1, [sp, #12]
 8014706:	1a5b      	subs	r3, r3, r1
 8014708:	42ab      	cmp	r3, r5
 801470a:	dcf2      	bgt.n	80146f2 <_printf_i+0x216>
 801470c:	e7eb      	b.n	80146e6 <_printf_i+0x20a>
 801470e:	2500      	movs	r5, #0
 8014710:	f104 0619 	add.w	r6, r4, #25
 8014714:	e7f5      	b.n	8014702 <_printf_i+0x226>
 8014716:	bf00      	nop
 8014718:	0801a99b 	.word	0x0801a99b
 801471c:	0801a9ac 	.word	0x0801a9ac

08014720 <std>:
 8014720:	2300      	movs	r3, #0
 8014722:	b510      	push	{r4, lr}
 8014724:	4604      	mov	r4, r0
 8014726:	e9c0 3300 	strd	r3, r3, [r0]
 801472a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801472e:	6083      	str	r3, [r0, #8]
 8014730:	8181      	strh	r1, [r0, #12]
 8014732:	6643      	str	r3, [r0, #100]	; 0x64
 8014734:	81c2      	strh	r2, [r0, #14]
 8014736:	6183      	str	r3, [r0, #24]
 8014738:	4619      	mov	r1, r3
 801473a:	2208      	movs	r2, #8
 801473c:	305c      	adds	r0, #92	; 0x5c
 801473e:	f000 fa07 	bl	8014b50 <memset>
 8014742:	4b0d      	ldr	r3, [pc, #52]	; (8014778 <std+0x58>)
 8014744:	6263      	str	r3, [r4, #36]	; 0x24
 8014746:	4b0d      	ldr	r3, [pc, #52]	; (801477c <std+0x5c>)
 8014748:	62a3      	str	r3, [r4, #40]	; 0x28
 801474a:	4b0d      	ldr	r3, [pc, #52]	; (8014780 <std+0x60>)
 801474c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801474e:	4b0d      	ldr	r3, [pc, #52]	; (8014784 <std+0x64>)
 8014750:	6323      	str	r3, [r4, #48]	; 0x30
 8014752:	4b0d      	ldr	r3, [pc, #52]	; (8014788 <std+0x68>)
 8014754:	6224      	str	r4, [r4, #32]
 8014756:	429c      	cmp	r4, r3
 8014758:	d006      	beq.n	8014768 <std+0x48>
 801475a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801475e:	4294      	cmp	r4, r2
 8014760:	d002      	beq.n	8014768 <std+0x48>
 8014762:	33d0      	adds	r3, #208	; 0xd0
 8014764:	429c      	cmp	r4, r3
 8014766:	d105      	bne.n	8014774 <std+0x54>
 8014768:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801476c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014770:	f000 bb0e 	b.w	8014d90 <__retarget_lock_init_recursive>
 8014774:	bd10      	pop	{r4, pc}
 8014776:	bf00      	nop
 8014778:	08014981 	.word	0x08014981
 801477c:	080149a3 	.word	0x080149a3
 8014780:	080149db 	.word	0x080149db
 8014784:	080149ff 	.word	0x080149ff
 8014788:	20000a00 	.word	0x20000a00

0801478c <stdio_exit_handler>:
 801478c:	4a02      	ldr	r2, [pc, #8]	; (8014798 <stdio_exit_handler+0xc>)
 801478e:	4903      	ldr	r1, [pc, #12]	; (801479c <stdio_exit_handler+0x10>)
 8014790:	4803      	ldr	r0, [pc, #12]	; (80147a0 <stdio_exit_handler+0x14>)
 8014792:	f000 b869 	b.w	8014868 <_fwalk_sglue>
 8014796:	bf00      	nop
 8014798:	2000002c 	.word	0x2000002c
 801479c:	08016f79 	.word	0x08016f79
 80147a0:	200001a4 	.word	0x200001a4

080147a4 <cleanup_stdio>:
 80147a4:	6841      	ldr	r1, [r0, #4]
 80147a6:	4b0c      	ldr	r3, [pc, #48]	; (80147d8 <cleanup_stdio+0x34>)
 80147a8:	4299      	cmp	r1, r3
 80147aa:	b510      	push	{r4, lr}
 80147ac:	4604      	mov	r4, r0
 80147ae:	d001      	beq.n	80147b4 <cleanup_stdio+0x10>
 80147b0:	f002 fbe2 	bl	8016f78 <_fflush_r>
 80147b4:	68a1      	ldr	r1, [r4, #8]
 80147b6:	4b09      	ldr	r3, [pc, #36]	; (80147dc <cleanup_stdio+0x38>)
 80147b8:	4299      	cmp	r1, r3
 80147ba:	d002      	beq.n	80147c2 <cleanup_stdio+0x1e>
 80147bc:	4620      	mov	r0, r4
 80147be:	f002 fbdb 	bl	8016f78 <_fflush_r>
 80147c2:	68e1      	ldr	r1, [r4, #12]
 80147c4:	4b06      	ldr	r3, [pc, #24]	; (80147e0 <cleanup_stdio+0x3c>)
 80147c6:	4299      	cmp	r1, r3
 80147c8:	d004      	beq.n	80147d4 <cleanup_stdio+0x30>
 80147ca:	4620      	mov	r0, r4
 80147cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147d0:	f002 bbd2 	b.w	8016f78 <_fflush_r>
 80147d4:	bd10      	pop	{r4, pc}
 80147d6:	bf00      	nop
 80147d8:	20000a00 	.word	0x20000a00
 80147dc:	20000a68 	.word	0x20000a68
 80147e0:	20000ad0 	.word	0x20000ad0

080147e4 <global_stdio_init.part.0>:
 80147e4:	b510      	push	{r4, lr}
 80147e6:	4b0b      	ldr	r3, [pc, #44]	; (8014814 <global_stdio_init.part.0+0x30>)
 80147e8:	4c0b      	ldr	r4, [pc, #44]	; (8014818 <global_stdio_init.part.0+0x34>)
 80147ea:	4a0c      	ldr	r2, [pc, #48]	; (801481c <global_stdio_init.part.0+0x38>)
 80147ec:	601a      	str	r2, [r3, #0]
 80147ee:	4620      	mov	r0, r4
 80147f0:	2200      	movs	r2, #0
 80147f2:	2104      	movs	r1, #4
 80147f4:	f7ff ff94 	bl	8014720 <std>
 80147f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80147fc:	2201      	movs	r2, #1
 80147fe:	2109      	movs	r1, #9
 8014800:	f7ff ff8e 	bl	8014720 <std>
 8014804:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014808:	2202      	movs	r2, #2
 801480a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801480e:	2112      	movs	r1, #18
 8014810:	f7ff bf86 	b.w	8014720 <std>
 8014814:	20000b38 	.word	0x20000b38
 8014818:	20000a00 	.word	0x20000a00
 801481c:	0801478d 	.word	0x0801478d

08014820 <__sfp_lock_acquire>:
 8014820:	4801      	ldr	r0, [pc, #4]	; (8014828 <__sfp_lock_acquire+0x8>)
 8014822:	f000 bab6 	b.w	8014d92 <__retarget_lock_acquire_recursive>
 8014826:	bf00      	nop
 8014828:	20000b41 	.word	0x20000b41

0801482c <__sfp_lock_release>:
 801482c:	4801      	ldr	r0, [pc, #4]	; (8014834 <__sfp_lock_release+0x8>)
 801482e:	f000 bab1 	b.w	8014d94 <__retarget_lock_release_recursive>
 8014832:	bf00      	nop
 8014834:	20000b41 	.word	0x20000b41

08014838 <__sinit>:
 8014838:	b510      	push	{r4, lr}
 801483a:	4604      	mov	r4, r0
 801483c:	f7ff fff0 	bl	8014820 <__sfp_lock_acquire>
 8014840:	6a23      	ldr	r3, [r4, #32]
 8014842:	b11b      	cbz	r3, 801484c <__sinit+0x14>
 8014844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014848:	f7ff bff0 	b.w	801482c <__sfp_lock_release>
 801484c:	4b04      	ldr	r3, [pc, #16]	; (8014860 <__sinit+0x28>)
 801484e:	6223      	str	r3, [r4, #32]
 8014850:	4b04      	ldr	r3, [pc, #16]	; (8014864 <__sinit+0x2c>)
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d1f5      	bne.n	8014844 <__sinit+0xc>
 8014858:	f7ff ffc4 	bl	80147e4 <global_stdio_init.part.0>
 801485c:	e7f2      	b.n	8014844 <__sinit+0xc>
 801485e:	bf00      	nop
 8014860:	080147a5 	.word	0x080147a5
 8014864:	20000b38 	.word	0x20000b38

08014868 <_fwalk_sglue>:
 8014868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801486c:	4607      	mov	r7, r0
 801486e:	4688      	mov	r8, r1
 8014870:	4614      	mov	r4, r2
 8014872:	2600      	movs	r6, #0
 8014874:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014878:	f1b9 0901 	subs.w	r9, r9, #1
 801487c:	d505      	bpl.n	801488a <_fwalk_sglue+0x22>
 801487e:	6824      	ldr	r4, [r4, #0]
 8014880:	2c00      	cmp	r4, #0
 8014882:	d1f7      	bne.n	8014874 <_fwalk_sglue+0xc>
 8014884:	4630      	mov	r0, r6
 8014886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801488a:	89ab      	ldrh	r3, [r5, #12]
 801488c:	2b01      	cmp	r3, #1
 801488e:	d907      	bls.n	80148a0 <_fwalk_sglue+0x38>
 8014890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014894:	3301      	adds	r3, #1
 8014896:	d003      	beq.n	80148a0 <_fwalk_sglue+0x38>
 8014898:	4629      	mov	r1, r5
 801489a:	4638      	mov	r0, r7
 801489c:	47c0      	blx	r8
 801489e:	4306      	orrs	r6, r0
 80148a0:	3568      	adds	r5, #104	; 0x68
 80148a2:	e7e9      	b.n	8014878 <_fwalk_sglue+0x10>

080148a4 <iprintf>:
 80148a4:	b40f      	push	{r0, r1, r2, r3}
 80148a6:	b507      	push	{r0, r1, r2, lr}
 80148a8:	4906      	ldr	r1, [pc, #24]	; (80148c4 <iprintf+0x20>)
 80148aa:	ab04      	add	r3, sp, #16
 80148ac:	6808      	ldr	r0, [r1, #0]
 80148ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80148b2:	6881      	ldr	r1, [r0, #8]
 80148b4:	9301      	str	r3, [sp, #4]
 80148b6:	f002 f9bf 	bl	8016c38 <_vfiprintf_r>
 80148ba:	b003      	add	sp, #12
 80148bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80148c0:	b004      	add	sp, #16
 80148c2:	4770      	bx	lr
 80148c4:	200001f0 	.word	0x200001f0

080148c8 <_puts_r>:
 80148c8:	6a03      	ldr	r3, [r0, #32]
 80148ca:	b570      	push	{r4, r5, r6, lr}
 80148cc:	6884      	ldr	r4, [r0, #8]
 80148ce:	4605      	mov	r5, r0
 80148d0:	460e      	mov	r6, r1
 80148d2:	b90b      	cbnz	r3, 80148d8 <_puts_r+0x10>
 80148d4:	f7ff ffb0 	bl	8014838 <__sinit>
 80148d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80148da:	07db      	lsls	r3, r3, #31
 80148dc:	d405      	bmi.n	80148ea <_puts_r+0x22>
 80148de:	89a3      	ldrh	r3, [r4, #12]
 80148e0:	0598      	lsls	r0, r3, #22
 80148e2:	d402      	bmi.n	80148ea <_puts_r+0x22>
 80148e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80148e6:	f000 fa54 	bl	8014d92 <__retarget_lock_acquire_recursive>
 80148ea:	89a3      	ldrh	r3, [r4, #12]
 80148ec:	0719      	lsls	r1, r3, #28
 80148ee:	d513      	bpl.n	8014918 <_puts_r+0x50>
 80148f0:	6923      	ldr	r3, [r4, #16]
 80148f2:	b18b      	cbz	r3, 8014918 <_puts_r+0x50>
 80148f4:	3e01      	subs	r6, #1
 80148f6:	68a3      	ldr	r3, [r4, #8]
 80148f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80148fc:	3b01      	subs	r3, #1
 80148fe:	60a3      	str	r3, [r4, #8]
 8014900:	b9e9      	cbnz	r1, 801493e <_puts_r+0x76>
 8014902:	2b00      	cmp	r3, #0
 8014904:	da2e      	bge.n	8014964 <_puts_r+0x9c>
 8014906:	4622      	mov	r2, r4
 8014908:	210a      	movs	r1, #10
 801490a:	4628      	mov	r0, r5
 801490c:	f000 f87b 	bl	8014a06 <__swbuf_r>
 8014910:	3001      	adds	r0, #1
 8014912:	d007      	beq.n	8014924 <_puts_r+0x5c>
 8014914:	250a      	movs	r5, #10
 8014916:	e007      	b.n	8014928 <_puts_r+0x60>
 8014918:	4621      	mov	r1, r4
 801491a:	4628      	mov	r0, r5
 801491c:	f000 f8b0 	bl	8014a80 <__swsetup_r>
 8014920:	2800      	cmp	r0, #0
 8014922:	d0e7      	beq.n	80148f4 <_puts_r+0x2c>
 8014924:	f04f 35ff 	mov.w	r5, #4294967295
 8014928:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801492a:	07da      	lsls	r2, r3, #31
 801492c:	d405      	bmi.n	801493a <_puts_r+0x72>
 801492e:	89a3      	ldrh	r3, [r4, #12]
 8014930:	059b      	lsls	r3, r3, #22
 8014932:	d402      	bmi.n	801493a <_puts_r+0x72>
 8014934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014936:	f000 fa2d 	bl	8014d94 <__retarget_lock_release_recursive>
 801493a:	4628      	mov	r0, r5
 801493c:	bd70      	pop	{r4, r5, r6, pc}
 801493e:	2b00      	cmp	r3, #0
 8014940:	da04      	bge.n	801494c <_puts_r+0x84>
 8014942:	69a2      	ldr	r2, [r4, #24]
 8014944:	429a      	cmp	r2, r3
 8014946:	dc06      	bgt.n	8014956 <_puts_r+0x8e>
 8014948:	290a      	cmp	r1, #10
 801494a:	d004      	beq.n	8014956 <_puts_r+0x8e>
 801494c:	6823      	ldr	r3, [r4, #0]
 801494e:	1c5a      	adds	r2, r3, #1
 8014950:	6022      	str	r2, [r4, #0]
 8014952:	7019      	strb	r1, [r3, #0]
 8014954:	e7cf      	b.n	80148f6 <_puts_r+0x2e>
 8014956:	4622      	mov	r2, r4
 8014958:	4628      	mov	r0, r5
 801495a:	f000 f854 	bl	8014a06 <__swbuf_r>
 801495e:	3001      	adds	r0, #1
 8014960:	d1c9      	bne.n	80148f6 <_puts_r+0x2e>
 8014962:	e7df      	b.n	8014924 <_puts_r+0x5c>
 8014964:	6823      	ldr	r3, [r4, #0]
 8014966:	250a      	movs	r5, #10
 8014968:	1c5a      	adds	r2, r3, #1
 801496a:	6022      	str	r2, [r4, #0]
 801496c:	701d      	strb	r5, [r3, #0]
 801496e:	e7db      	b.n	8014928 <_puts_r+0x60>

08014970 <puts>:
 8014970:	4b02      	ldr	r3, [pc, #8]	; (801497c <puts+0xc>)
 8014972:	4601      	mov	r1, r0
 8014974:	6818      	ldr	r0, [r3, #0]
 8014976:	f7ff bfa7 	b.w	80148c8 <_puts_r>
 801497a:	bf00      	nop
 801497c:	200001f0 	.word	0x200001f0

08014980 <__sread>:
 8014980:	b510      	push	{r4, lr}
 8014982:	460c      	mov	r4, r1
 8014984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014988:	f000 f9a4 	bl	8014cd4 <_read_r>
 801498c:	2800      	cmp	r0, #0
 801498e:	bfab      	itete	ge
 8014990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014992:	89a3      	ldrhlt	r3, [r4, #12]
 8014994:	181b      	addge	r3, r3, r0
 8014996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801499a:	bfac      	ite	ge
 801499c:	6563      	strge	r3, [r4, #84]	; 0x54
 801499e:	81a3      	strhlt	r3, [r4, #12]
 80149a0:	bd10      	pop	{r4, pc}

080149a2 <__swrite>:
 80149a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149a6:	461f      	mov	r7, r3
 80149a8:	898b      	ldrh	r3, [r1, #12]
 80149aa:	05db      	lsls	r3, r3, #23
 80149ac:	4605      	mov	r5, r0
 80149ae:	460c      	mov	r4, r1
 80149b0:	4616      	mov	r6, r2
 80149b2:	d505      	bpl.n	80149c0 <__swrite+0x1e>
 80149b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149b8:	2302      	movs	r3, #2
 80149ba:	2200      	movs	r2, #0
 80149bc:	f000 f978 	bl	8014cb0 <_lseek_r>
 80149c0:	89a3      	ldrh	r3, [r4, #12]
 80149c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80149ca:	81a3      	strh	r3, [r4, #12]
 80149cc:	4632      	mov	r2, r6
 80149ce:	463b      	mov	r3, r7
 80149d0:	4628      	mov	r0, r5
 80149d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149d6:	f000 b99f 	b.w	8014d18 <_write_r>

080149da <__sseek>:
 80149da:	b510      	push	{r4, lr}
 80149dc:	460c      	mov	r4, r1
 80149de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149e2:	f000 f965 	bl	8014cb0 <_lseek_r>
 80149e6:	1c43      	adds	r3, r0, #1
 80149e8:	89a3      	ldrh	r3, [r4, #12]
 80149ea:	bf15      	itete	ne
 80149ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80149ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80149f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80149f6:	81a3      	strheq	r3, [r4, #12]
 80149f8:	bf18      	it	ne
 80149fa:	81a3      	strhne	r3, [r4, #12]
 80149fc:	bd10      	pop	{r4, pc}

080149fe <__sclose>:
 80149fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a02:	f000 b945 	b.w	8014c90 <_close_r>

08014a06 <__swbuf_r>:
 8014a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a08:	460e      	mov	r6, r1
 8014a0a:	4614      	mov	r4, r2
 8014a0c:	4605      	mov	r5, r0
 8014a0e:	b118      	cbz	r0, 8014a18 <__swbuf_r+0x12>
 8014a10:	6a03      	ldr	r3, [r0, #32]
 8014a12:	b90b      	cbnz	r3, 8014a18 <__swbuf_r+0x12>
 8014a14:	f7ff ff10 	bl	8014838 <__sinit>
 8014a18:	69a3      	ldr	r3, [r4, #24]
 8014a1a:	60a3      	str	r3, [r4, #8]
 8014a1c:	89a3      	ldrh	r3, [r4, #12]
 8014a1e:	071a      	lsls	r2, r3, #28
 8014a20:	d525      	bpl.n	8014a6e <__swbuf_r+0x68>
 8014a22:	6923      	ldr	r3, [r4, #16]
 8014a24:	b31b      	cbz	r3, 8014a6e <__swbuf_r+0x68>
 8014a26:	6823      	ldr	r3, [r4, #0]
 8014a28:	6922      	ldr	r2, [r4, #16]
 8014a2a:	1a98      	subs	r0, r3, r2
 8014a2c:	6963      	ldr	r3, [r4, #20]
 8014a2e:	b2f6      	uxtb	r6, r6
 8014a30:	4283      	cmp	r3, r0
 8014a32:	4637      	mov	r7, r6
 8014a34:	dc04      	bgt.n	8014a40 <__swbuf_r+0x3a>
 8014a36:	4621      	mov	r1, r4
 8014a38:	4628      	mov	r0, r5
 8014a3a:	f002 fa9d 	bl	8016f78 <_fflush_r>
 8014a3e:	b9e0      	cbnz	r0, 8014a7a <__swbuf_r+0x74>
 8014a40:	68a3      	ldr	r3, [r4, #8]
 8014a42:	3b01      	subs	r3, #1
 8014a44:	60a3      	str	r3, [r4, #8]
 8014a46:	6823      	ldr	r3, [r4, #0]
 8014a48:	1c5a      	adds	r2, r3, #1
 8014a4a:	6022      	str	r2, [r4, #0]
 8014a4c:	701e      	strb	r6, [r3, #0]
 8014a4e:	6962      	ldr	r2, [r4, #20]
 8014a50:	1c43      	adds	r3, r0, #1
 8014a52:	429a      	cmp	r2, r3
 8014a54:	d004      	beq.n	8014a60 <__swbuf_r+0x5a>
 8014a56:	89a3      	ldrh	r3, [r4, #12]
 8014a58:	07db      	lsls	r3, r3, #31
 8014a5a:	d506      	bpl.n	8014a6a <__swbuf_r+0x64>
 8014a5c:	2e0a      	cmp	r6, #10
 8014a5e:	d104      	bne.n	8014a6a <__swbuf_r+0x64>
 8014a60:	4621      	mov	r1, r4
 8014a62:	4628      	mov	r0, r5
 8014a64:	f002 fa88 	bl	8016f78 <_fflush_r>
 8014a68:	b938      	cbnz	r0, 8014a7a <__swbuf_r+0x74>
 8014a6a:	4638      	mov	r0, r7
 8014a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a6e:	4621      	mov	r1, r4
 8014a70:	4628      	mov	r0, r5
 8014a72:	f000 f805 	bl	8014a80 <__swsetup_r>
 8014a76:	2800      	cmp	r0, #0
 8014a78:	d0d5      	beq.n	8014a26 <__swbuf_r+0x20>
 8014a7a:	f04f 37ff 	mov.w	r7, #4294967295
 8014a7e:	e7f4      	b.n	8014a6a <__swbuf_r+0x64>

08014a80 <__swsetup_r>:
 8014a80:	b538      	push	{r3, r4, r5, lr}
 8014a82:	4b2a      	ldr	r3, [pc, #168]	; (8014b2c <__swsetup_r+0xac>)
 8014a84:	4605      	mov	r5, r0
 8014a86:	6818      	ldr	r0, [r3, #0]
 8014a88:	460c      	mov	r4, r1
 8014a8a:	b118      	cbz	r0, 8014a94 <__swsetup_r+0x14>
 8014a8c:	6a03      	ldr	r3, [r0, #32]
 8014a8e:	b90b      	cbnz	r3, 8014a94 <__swsetup_r+0x14>
 8014a90:	f7ff fed2 	bl	8014838 <__sinit>
 8014a94:	89a3      	ldrh	r3, [r4, #12]
 8014a96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014a9a:	0718      	lsls	r0, r3, #28
 8014a9c:	d422      	bmi.n	8014ae4 <__swsetup_r+0x64>
 8014a9e:	06d9      	lsls	r1, r3, #27
 8014aa0:	d407      	bmi.n	8014ab2 <__swsetup_r+0x32>
 8014aa2:	2309      	movs	r3, #9
 8014aa4:	602b      	str	r3, [r5, #0]
 8014aa6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014aaa:	81a3      	strh	r3, [r4, #12]
 8014aac:	f04f 30ff 	mov.w	r0, #4294967295
 8014ab0:	e034      	b.n	8014b1c <__swsetup_r+0x9c>
 8014ab2:	0758      	lsls	r0, r3, #29
 8014ab4:	d512      	bpl.n	8014adc <__swsetup_r+0x5c>
 8014ab6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ab8:	b141      	cbz	r1, 8014acc <__swsetup_r+0x4c>
 8014aba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014abe:	4299      	cmp	r1, r3
 8014ac0:	d002      	beq.n	8014ac8 <__swsetup_r+0x48>
 8014ac2:	4628      	mov	r0, r5
 8014ac4:	f001 f81e 	bl	8015b04 <_free_r>
 8014ac8:	2300      	movs	r3, #0
 8014aca:	6363      	str	r3, [r4, #52]	; 0x34
 8014acc:	89a3      	ldrh	r3, [r4, #12]
 8014ace:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014ad2:	81a3      	strh	r3, [r4, #12]
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	6063      	str	r3, [r4, #4]
 8014ad8:	6923      	ldr	r3, [r4, #16]
 8014ada:	6023      	str	r3, [r4, #0]
 8014adc:	89a3      	ldrh	r3, [r4, #12]
 8014ade:	f043 0308 	orr.w	r3, r3, #8
 8014ae2:	81a3      	strh	r3, [r4, #12]
 8014ae4:	6923      	ldr	r3, [r4, #16]
 8014ae6:	b94b      	cbnz	r3, 8014afc <__swsetup_r+0x7c>
 8014ae8:	89a3      	ldrh	r3, [r4, #12]
 8014aea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014af2:	d003      	beq.n	8014afc <__swsetup_r+0x7c>
 8014af4:	4621      	mov	r1, r4
 8014af6:	4628      	mov	r0, r5
 8014af8:	f002 fa9e 	bl	8017038 <__smakebuf_r>
 8014afc:	89a0      	ldrh	r0, [r4, #12]
 8014afe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b02:	f010 0301 	ands.w	r3, r0, #1
 8014b06:	d00a      	beq.n	8014b1e <__swsetup_r+0x9e>
 8014b08:	2300      	movs	r3, #0
 8014b0a:	60a3      	str	r3, [r4, #8]
 8014b0c:	6963      	ldr	r3, [r4, #20]
 8014b0e:	425b      	negs	r3, r3
 8014b10:	61a3      	str	r3, [r4, #24]
 8014b12:	6923      	ldr	r3, [r4, #16]
 8014b14:	b943      	cbnz	r3, 8014b28 <__swsetup_r+0xa8>
 8014b16:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014b1a:	d1c4      	bne.n	8014aa6 <__swsetup_r+0x26>
 8014b1c:	bd38      	pop	{r3, r4, r5, pc}
 8014b1e:	0781      	lsls	r1, r0, #30
 8014b20:	bf58      	it	pl
 8014b22:	6963      	ldrpl	r3, [r4, #20]
 8014b24:	60a3      	str	r3, [r4, #8]
 8014b26:	e7f4      	b.n	8014b12 <__swsetup_r+0x92>
 8014b28:	2000      	movs	r0, #0
 8014b2a:	e7f7      	b.n	8014b1c <__swsetup_r+0x9c>
 8014b2c:	200001f0 	.word	0x200001f0

08014b30 <memcmp>:
 8014b30:	b510      	push	{r4, lr}
 8014b32:	3901      	subs	r1, #1
 8014b34:	4402      	add	r2, r0
 8014b36:	4290      	cmp	r0, r2
 8014b38:	d101      	bne.n	8014b3e <memcmp+0xe>
 8014b3a:	2000      	movs	r0, #0
 8014b3c:	e005      	b.n	8014b4a <memcmp+0x1a>
 8014b3e:	7803      	ldrb	r3, [r0, #0]
 8014b40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014b44:	42a3      	cmp	r3, r4
 8014b46:	d001      	beq.n	8014b4c <memcmp+0x1c>
 8014b48:	1b18      	subs	r0, r3, r4
 8014b4a:	bd10      	pop	{r4, pc}
 8014b4c:	3001      	adds	r0, #1
 8014b4e:	e7f2      	b.n	8014b36 <memcmp+0x6>

08014b50 <memset>:
 8014b50:	4402      	add	r2, r0
 8014b52:	4603      	mov	r3, r0
 8014b54:	4293      	cmp	r3, r2
 8014b56:	d100      	bne.n	8014b5a <memset+0xa>
 8014b58:	4770      	bx	lr
 8014b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8014b5e:	e7f9      	b.n	8014b54 <memset+0x4>

08014b60 <strncat>:
 8014b60:	b530      	push	{r4, r5, lr}
 8014b62:	4604      	mov	r4, r0
 8014b64:	7825      	ldrb	r5, [r4, #0]
 8014b66:	4623      	mov	r3, r4
 8014b68:	3401      	adds	r4, #1
 8014b6a:	2d00      	cmp	r5, #0
 8014b6c:	d1fa      	bne.n	8014b64 <strncat+0x4>
 8014b6e:	3a01      	subs	r2, #1
 8014b70:	d304      	bcc.n	8014b7c <strncat+0x1c>
 8014b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b76:	f803 4b01 	strb.w	r4, [r3], #1
 8014b7a:	b904      	cbnz	r4, 8014b7e <strncat+0x1e>
 8014b7c:	bd30      	pop	{r4, r5, pc}
 8014b7e:	2a00      	cmp	r2, #0
 8014b80:	d1f5      	bne.n	8014b6e <strncat+0xe>
 8014b82:	701a      	strb	r2, [r3, #0]
 8014b84:	e7f3      	b.n	8014b6e <strncat+0xe>

08014b86 <strncmp>:
 8014b86:	b510      	push	{r4, lr}
 8014b88:	b16a      	cbz	r2, 8014ba6 <strncmp+0x20>
 8014b8a:	3901      	subs	r1, #1
 8014b8c:	1884      	adds	r4, r0, r2
 8014b8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b92:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014b96:	429a      	cmp	r2, r3
 8014b98:	d103      	bne.n	8014ba2 <strncmp+0x1c>
 8014b9a:	42a0      	cmp	r0, r4
 8014b9c:	d001      	beq.n	8014ba2 <strncmp+0x1c>
 8014b9e:	2a00      	cmp	r2, #0
 8014ba0:	d1f5      	bne.n	8014b8e <strncmp+0x8>
 8014ba2:	1ad0      	subs	r0, r2, r3
 8014ba4:	bd10      	pop	{r4, pc}
 8014ba6:	4610      	mov	r0, r2
 8014ba8:	e7fc      	b.n	8014ba4 <strncmp+0x1e>

08014baa <strncpy>:
 8014baa:	b510      	push	{r4, lr}
 8014bac:	3901      	subs	r1, #1
 8014bae:	4603      	mov	r3, r0
 8014bb0:	b132      	cbz	r2, 8014bc0 <strncpy+0x16>
 8014bb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014bb6:	f803 4b01 	strb.w	r4, [r3], #1
 8014bba:	3a01      	subs	r2, #1
 8014bbc:	2c00      	cmp	r4, #0
 8014bbe:	d1f7      	bne.n	8014bb0 <strncpy+0x6>
 8014bc0:	441a      	add	r2, r3
 8014bc2:	2100      	movs	r1, #0
 8014bc4:	4293      	cmp	r3, r2
 8014bc6:	d100      	bne.n	8014bca <strncpy+0x20>
 8014bc8:	bd10      	pop	{r4, pc}
 8014bca:	f803 1b01 	strb.w	r1, [r3], #1
 8014bce:	e7f9      	b.n	8014bc4 <strncpy+0x1a>

08014bd0 <strtok>:
 8014bd0:	4b16      	ldr	r3, [pc, #88]	; (8014c2c <strtok+0x5c>)
 8014bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014bd4:	681e      	ldr	r6, [r3, #0]
 8014bd6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8014bd8:	4605      	mov	r5, r0
 8014bda:	b9fc      	cbnz	r4, 8014c1c <strtok+0x4c>
 8014bdc:	2050      	movs	r0, #80	; 0x50
 8014bde:	9101      	str	r1, [sp, #4]
 8014be0:	f7fe f93e 	bl	8012e60 <malloc>
 8014be4:	9901      	ldr	r1, [sp, #4]
 8014be6:	6470      	str	r0, [r6, #68]	; 0x44
 8014be8:	4602      	mov	r2, r0
 8014bea:	b920      	cbnz	r0, 8014bf6 <strtok+0x26>
 8014bec:	4b10      	ldr	r3, [pc, #64]	; (8014c30 <strtok+0x60>)
 8014bee:	4811      	ldr	r0, [pc, #68]	; (8014c34 <strtok+0x64>)
 8014bf0:	215b      	movs	r1, #91	; 0x5b
 8014bf2:	f000 f8ef 	bl	8014dd4 <__assert_func>
 8014bf6:	e9c0 4400 	strd	r4, r4, [r0]
 8014bfa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8014bfe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8014c02:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8014c06:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8014c0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8014c0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8014c12:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8014c16:	6184      	str	r4, [r0, #24]
 8014c18:	7704      	strb	r4, [r0, #28]
 8014c1a:	6244      	str	r4, [r0, #36]	; 0x24
 8014c1c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8014c1e:	2301      	movs	r3, #1
 8014c20:	4628      	mov	r0, r5
 8014c22:	b002      	add	sp, #8
 8014c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c28:	f000 b806 	b.w	8014c38 <__strtok_r>
 8014c2c:	200001f0 	.word	0x200001f0
 8014c30:	0801a7c0 	.word	0x0801a7c0
 8014c34:	0801a9bd 	.word	0x0801a9bd

08014c38 <__strtok_r>:
 8014c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c3a:	b908      	cbnz	r0, 8014c40 <__strtok_r+0x8>
 8014c3c:	6810      	ldr	r0, [r2, #0]
 8014c3e:	b188      	cbz	r0, 8014c64 <__strtok_r+0x2c>
 8014c40:	4604      	mov	r4, r0
 8014c42:	4620      	mov	r0, r4
 8014c44:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014c48:	460f      	mov	r7, r1
 8014c4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014c4e:	b91e      	cbnz	r6, 8014c58 <__strtok_r+0x20>
 8014c50:	b965      	cbnz	r5, 8014c6c <__strtok_r+0x34>
 8014c52:	6015      	str	r5, [r2, #0]
 8014c54:	4628      	mov	r0, r5
 8014c56:	e005      	b.n	8014c64 <__strtok_r+0x2c>
 8014c58:	42b5      	cmp	r5, r6
 8014c5a:	d1f6      	bne.n	8014c4a <__strtok_r+0x12>
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d1f0      	bne.n	8014c42 <__strtok_r+0xa>
 8014c60:	6014      	str	r4, [r2, #0]
 8014c62:	7003      	strb	r3, [r0, #0]
 8014c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c66:	461c      	mov	r4, r3
 8014c68:	e00c      	b.n	8014c84 <__strtok_r+0x4c>
 8014c6a:	b915      	cbnz	r5, 8014c72 <__strtok_r+0x3a>
 8014c6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014c70:	460e      	mov	r6, r1
 8014c72:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014c76:	42ab      	cmp	r3, r5
 8014c78:	d1f7      	bne.n	8014c6a <__strtok_r+0x32>
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d0f3      	beq.n	8014c66 <__strtok_r+0x2e>
 8014c7e:	2300      	movs	r3, #0
 8014c80:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014c84:	6014      	str	r4, [r2, #0]
 8014c86:	e7ed      	b.n	8014c64 <__strtok_r+0x2c>

08014c88 <_localeconv_r>:
 8014c88:	4800      	ldr	r0, [pc, #0]	; (8014c8c <_localeconv_r+0x4>)
 8014c8a:	4770      	bx	lr
 8014c8c:	20000128 	.word	0x20000128

08014c90 <_close_r>:
 8014c90:	b538      	push	{r3, r4, r5, lr}
 8014c92:	4d06      	ldr	r5, [pc, #24]	; (8014cac <_close_r+0x1c>)
 8014c94:	2300      	movs	r3, #0
 8014c96:	4604      	mov	r4, r0
 8014c98:	4608      	mov	r0, r1
 8014c9a:	602b      	str	r3, [r5, #0]
 8014c9c:	f7ed ff1f 	bl	8002ade <_close>
 8014ca0:	1c43      	adds	r3, r0, #1
 8014ca2:	d102      	bne.n	8014caa <_close_r+0x1a>
 8014ca4:	682b      	ldr	r3, [r5, #0]
 8014ca6:	b103      	cbz	r3, 8014caa <_close_r+0x1a>
 8014ca8:	6023      	str	r3, [r4, #0]
 8014caa:	bd38      	pop	{r3, r4, r5, pc}
 8014cac:	20000b3c 	.word	0x20000b3c

08014cb0 <_lseek_r>:
 8014cb0:	b538      	push	{r3, r4, r5, lr}
 8014cb2:	4d07      	ldr	r5, [pc, #28]	; (8014cd0 <_lseek_r+0x20>)
 8014cb4:	4604      	mov	r4, r0
 8014cb6:	4608      	mov	r0, r1
 8014cb8:	4611      	mov	r1, r2
 8014cba:	2200      	movs	r2, #0
 8014cbc:	602a      	str	r2, [r5, #0]
 8014cbe:	461a      	mov	r2, r3
 8014cc0:	f7ed ff34 	bl	8002b2c <_lseek>
 8014cc4:	1c43      	adds	r3, r0, #1
 8014cc6:	d102      	bne.n	8014cce <_lseek_r+0x1e>
 8014cc8:	682b      	ldr	r3, [r5, #0]
 8014cca:	b103      	cbz	r3, 8014cce <_lseek_r+0x1e>
 8014ccc:	6023      	str	r3, [r4, #0]
 8014cce:	bd38      	pop	{r3, r4, r5, pc}
 8014cd0:	20000b3c 	.word	0x20000b3c

08014cd4 <_read_r>:
 8014cd4:	b538      	push	{r3, r4, r5, lr}
 8014cd6:	4d07      	ldr	r5, [pc, #28]	; (8014cf4 <_read_r+0x20>)
 8014cd8:	4604      	mov	r4, r0
 8014cda:	4608      	mov	r0, r1
 8014cdc:	4611      	mov	r1, r2
 8014cde:	2200      	movs	r2, #0
 8014ce0:	602a      	str	r2, [r5, #0]
 8014ce2:	461a      	mov	r2, r3
 8014ce4:	f7ed fec2 	bl	8002a6c <_read>
 8014ce8:	1c43      	adds	r3, r0, #1
 8014cea:	d102      	bne.n	8014cf2 <_read_r+0x1e>
 8014cec:	682b      	ldr	r3, [r5, #0]
 8014cee:	b103      	cbz	r3, 8014cf2 <_read_r+0x1e>
 8014cf0:	6023      	str	r3, [r4, #0]
 8014cf2:	bd38      	pop	{r3, r4, r5, pc}
 8014cf4:	20000b3c 	.word	0x20000b3c

08014cf8 <_sbrk_r>:
 8014cf8:	b538      	push	{r3, r4, r5, lr}
 8014cfa:	4d06      	ldr	r5, [pc, #24]	; (8014d14 <_sbrk_r+0x1c>)
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	4604      	mov	r4, r0
 8014d00:	4608      	mov	r0, r1
 8014d02:	602b      	str	r3, [r5, #0]
 8014d04:	f7ed ff20 	bl	8002b48 <_sbrk>
 8014d08:	1c43      	adds	r3, r0, #1
 8014d0a:	d102      	bne.n	8014d12 <_sbrk_r+0x1a>
 8014d0c:	682b      	ldr	r3, [r5, #0]
 8014d0e:	b103      	cbz	r3, 8014d12 <_sbrk_r+0x1a>
 8014d10:	6023      	str	r3, [r4, #0]
 8014d12:	bd38      	pop	{r3, r4, r5, pc}
 8014d14:	20000b3c 	.word	0x20000b3c

08014d18 <_write_r>:
 8014d18:	b538      	push	{r3, r4, r5, lr}
 8014d1a:	4d07      	ldr	r5, [pc, #28]	; (8014d38 <_write_r+0x20>)
 8014d1c:	4604      	mov	r4, r0
 8014d1e:	4608      	mov	r0, r1
 8014d20:	4611      	mov	r1, r2
 8014d22:	2200      	movs	r2, #0
 8014d24:	602a      	str	r2, [r5, #0]
 8014d26:	461a      	mov	r2, r3
 8014d28:	f7ed febd 	bl	8002aa6 <_write>
 8014d2c:	1c43      	adds	r3, r0, #1
 8014d2e:	d102      	bne.n	8014d36 <_write_r+0x1e>
 8014d30:	682b      	ldr	r3, [r5, #0]
 8014d32:	b103      	cbz	r3, 8014d36 <_write_r+0x1e>
 8014d34:	6023      	str	r3, [r4, #0]
 8014d36:	bd38      	pop	{r3, r4, r5, pc}
 8014d38:	20000b3c 	.word	0x20000b3c

08014d3c <__errno>:
 8014d3c:	4b01      	ldr	r3, [pc, #4]	; (8014d44 <__errno+0x8>)
 8014d3e:	6818      	ldr	r0, [r3, #0]
 8014d40:	4770      	bx	lr
 8014d42:	bf00      	nop
 8014d44:	200001f0 	.word	0x200001f0

08014d48 <__libc_init_array>:
 8014d48:	b570      	push	{r4, r5, r6, lr}
 8014d4a:	4d0d      	ldr	r5, [pc, #52]	; (8014d80 <__libc_init_array+0x38>)
 8014d4c:	4c0d      	ldr	r4, [pc, #52]	; (8014d84 <__libc_init_array+0x3c>)
 8014d4e:	1b64      	subs	r4, r4, r5
 8014d50:	10a4      	asrs	r4, r4, #2
 8014d52:	2600      	movs	r6, #0
 8014d54:	42a6      	cmp	r6, r4
 8014d56:	d109      	bne.n	8014d6c <__libc_init_array+0x24>
 8014d58:	4d0b      	ldr	r5, [pc, #44]	; (8014d88 <__libc_init_array+0x40>)
 8014d5a:	4c0c      	ldr	r4, [pc, #48]	; (8014d8c <__libc_init_array+0x44>)
 8014d5c:	f002 fa2c 	bl	80171b8 <_init>
 8014d60:	1b64      	subs	r4, r4, r5
 8014d62:	10a4      	asrs	r4, r4, #2
 8014d64:	2600      	movs	r6, #0
 8014d66:	42a6      	cmp	r6, r4
 8014d68:	d105      	bne.n	8014d76 <__libc_init_array+0x2e>
 8014d6a:	bd70      	pop	{r4, r5, r6, pc}
 8014d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d70:	4798      	blx	r3
 8014d72:	3601      	adds	r6, #1
 8014d74:	e7ee      	b.n	8014d54 <__libc_init_array+0xc>
 8014d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d7a:	4798      	blx	r3
 8014d7c:	3601      	adds	r6, #1
 8014d7e:	e7f2      	b.n	8014d66 <__libc_init_array+0x1e>
 8014d80:	0801aca8 	.word	0x0801aca8
 8014d84:	0801aca8 	.word	0x0801aca8
 8014d88:	0801aca8 	.word	0x0801aca8
 8014d8c:	0801acac 	.word	0x0801acac

08014d90 <__retarget_lock_init_recursive>:
 8014d90:	4770      	bx	lr

08014d92 <__retarget_lock_acquire_recursive>:
 8014d92:	4770      	bx	lr

08014d94 <__retarget_lock_release_recursive>:
 8014d94:	4770      	bx	lr

08014d96 <memcpy>:
 8014d96:	440a      	add	r2, r1
 8014d98:	4291      	cmp	r1, r2
 8014d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8014d9e:	d100      	bne.n	8014da2 <memcpy+0xc>
 8014da0:	4770      	bx	lr
 8014da2:	b510      	push	{r4, lr}
 8014da4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014da8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014dac:	4291      	cmp	r1, r2
 8014dae:	d1f9      	bne.n	8014da4 <memcpy+0xe>
 8014db0:	bd10      	pop	{r4, pc}
 8014db2:	0000      	movs	r0, r0
 8014db4:	0000      	movs	r0, r0
	...

08014db8 <nan>:
 8014db8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014dc0 <nan+0x8>
 8014dbc:	4770      	bx	lr
 8014dbe:	bf00      	nop
 8014dc0:	00000000 	.word	0x00000000
 8014dc4:	7ff80000 	.word	0x7ff80000

08014dc8 <nanf>:
 8014dc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014dd0 <nanf+0x8>
 8014dcc:	4770      	bx	lr
 8014dce:	bf00      	nop
 8014dd0:	7fc00000 	.word	0x7fc00000

08014dd4 <__assert_func>:
 8014dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014dd6:	4614      	mov	r4, r2
 8014dd8:	461a      	mov	r2, r3
 8014dda:	4b09      	ldr	r3, [pc, #36]	; (8014e00 <__assert_func+0x2c>)
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	4605      	mov	r5, r0
 8014de0:	68d8      	ldr	r0, [r3, #12]
 8014de2:	b14c      	cbz	r4, 8014df8 <__assert_func+0x24>
 8014de4:	4b07      	ldr	r3, [pc, #28]	; (8014e04 <__assert_func+0x30>)
 8014de6:	9100      	str	r1, [sp, #0]
 8014de8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014dec:	4906      	ldr	r1, [pc, #24]	; (8014e08 <__assert_func+0x34>)
 8014dee:	462b      	mov	r3, r5
 8014df0:	f002 f8ea 	bl	8016fc8 <fiprintf>
 8014df4:	f002 f97e 	bl	80170f4 <abort>
 8014df8:	4b04      	ldr	r3, [pc, #16]	; (8014e0c <__assert_func+0x38>)
 8014dfa:	461c      	mov	r4, r3
 8014dfc:	e7f3      	b.n	8014de6 <__assert_func+0x12>
 8014dfe:	bf00      	nop
 8014e00:	200001f0 	.word	0x200001f0
 8014e04:	0801aa1f 	.word	0x0801aa1f
 8014e08:	0801aa2c 	.word	0x0801aa2c
 8014e0c:	0801aa5a 	.word	0x0801aa5a

08014e10 <quorem>:
 8014e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e14:	6903      	ldr	r3, [r0, #16]
 8014e16:	690c      	ldr	r4, [r1, #16]
 8014e18:	42a3      	cmp	r3, r4
 8014e1a:	4607      	mov	r7, r0
 8014e1c:	db7e      	blt.n	8014f1c <quorem+0x10c>
 8014e1e:	3c01      	subs	r4, #1
 8014e20:	f101 0814 	add.w	r8, r1, #20
 8014e24:	f100 0514 	add.w	r5, r0, #20
 8014e28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e2c:	9301      	str	r3, [sp, #4]
 8014e2e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014e32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e36:	3301      	adds	r3, #1
 8014e38:	429a      	cmp	r2, r3
 8014e3a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014e3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014e42:	fbb2 f6f3 	udiv	r6, r2, r3
 8014e46:	d331      	bcc.n	8014eac <quorem+0x9c>
 8014e48:	f04f 0e00 	mov.w	lr, #0
 8014e4c:	4640      	mov	r0, r8
 8014e4e:	46ac      	mov	ip, r5
 8014e50:	46f2      	mov	sl, lr
 8014e52:	f850 2b04 	ldr.w	r2, [r0], #4
 8014e56:	b293      	uxth	r3, r2
 8014e58:	fb06 e303 	mla	r3, r6, r3, lr
 8014e5c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014e60:	0c1a      	lsrs	r2, r3, #16
 8014e62:	b29b      	uxth	r3, r3
 8014e64:	ebaa 0303 	sub.w	r3, sl, r3
 8014e68:	f8dc a000 	ldr.w	sl, [ip]
 8014e6c:	fa13 f38a 	uxtah	r3, r3, sl
 8014e70:	fb06 220e 	mla	r2, r6, lr, r2
 8014e74:	9300      	str	r3, [sp, #0]
 8014e76:	9b00      	ldr	r3, [sp, #0]
 8014e78:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014e7c:	b292      	uxth	r2, r2
 8014e7e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014e82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014e86:	f8bd 3000 	ldrh.w	r3, [sp]
 8014e8a:	4581      	cmp	r9, r0
 8014e8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e90:	f84c 3b04 	str.w	r3, [ip], #4
 8014e94:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014e98:	d2db      	bcs.n	8014e52 <quorem+0x42>
 8014e9a:	f855 300b 	ldr.w	r3, [r5, fp]
 8014e9e:	b92b      	cbnz	r3, 8014eac <quorem+0x9c>
 8014ea0:	9b01      	ldr	r3, [sp, #4]
 8014ea2:	3b04      	subs	r3, #4
 8014ea4:	429d      	cmp	r5, r3
 8014ea6:	461a      	mov	r2, r3
 8014ea8:	d32c      	bcc.n	8014f04 <quorem+0xf4>
 8014eaa:	613c      	str	r4, [r7, #16]
 8014eac:	4638      	mov	r0, r7
 8014eae:	f001 fca5 	bl	80167fc <__mcmp>
 8014eb2:	2800      	cmp	r0, #0
 8014eb4:	db22      	blt.n	8014efc <quorem+0xec>
 8014eb6:	3601      	adds	r6, #1
 8014eb8:	4629      	mov	r1, r5
 8014eba:	2000      	movs	r0, #0
 8014ebc:	f858 2b04 	ldr.w	r2, [r8], #4
 8014ec0:	f8d1 c000 	ldr.w	ip, [r1]
 8014ec4:	b293      	uxth	r3, r2
 8014ec6:	1ac3      	subs	r3, r0, r3
 8014ec8:	0c12      	lsrs	r2, r2, #16
 8014eca:	fa13 f38c 	uxtah	r3, r3, ip
 8014ece:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014ed2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014ed6:	b29b      	uxth	r3, r3
 8014ed8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014edc:	45c1      	cmp	r9, r8
 8014ede:	f841 3b04 	str.w	r3, [r1], #4
 8014ee2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014ee6:	d2e9      	bcs.n	8014ebc <quorem+0xac>
 8014ee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014eec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014ef0:	b922      	cbnz	r2, 8014efc <quorem+0xec>
 8014ef2:	3b04      	subs	r3, #4
 8014ef4:	429d      	cmp	r5, r3
 8014ef6:	461a      	mov	r2, r3
 8014ef8:	d30a      	bcc.n	8014f10 <quorem+0x100>
 8014efa:	613c      	str	r4, [r7, #16]
 8014efc:	4630      	mov	r0, r6
 8014efe:	b003      	add	sp, #12
 8014f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f04:	6812      	ldr	r2, [r2, #0]
 8014f06:	3b04      	subs	r3, #4
 8014f08:	2a00      	cmp	r2, #0
 8014f0a:	d1ce      	bne.n	8014eaa <quorem+0x9a>
 8014f0c:	3c01      	subs	r4, #1
 8014f0e:	e7c9      	b.n	8014ea4 <quorem+0x94>
 8014f10:	6812      	ldr	r2, [r2, #0]
 8014f12:	3b04      	subs	r3, #4
 8014f14:	2a00      	cmp	r2, #0
 8014f16:	d1f0      	bne.n	8014efa <quorem+0xea>
 8014f18:	3c01      	subs	r4, #1
 8014f1a:	e7eb      	b.n	8014ef4 <quorem+0xe4>
 8014f1c:	2000      	movs	r0, #0
 8014f1e:	e7ee      	b.n	8014efe <quorem+0xee>

08014f20 <_dtoa_r>:
 8014f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f24:	ed2d 8b04 	vpush	{d8-d9}
 8014f28:	69c5      	ldr	r5, [r0, #28]
 8014f2a:	b093      	sub	sp, #76	; 0x4c
 8014f2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014f30:	ec57 6b10 	vmov	r6, r7, d0
 8014f34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014f38:	9107      	str	r1, [sp, #28]
 8014f3a:	4604      	mov	r4, r0
 8014f3c:	920a      	str	r2, [sp, #40]	; 0x28
 8014f3e:	930d      	str	r3, [sp, #52]	; 0x34
 8014f40:	b975      	cbnz	r5, 8014f60 <_dtoa_r+0x40>
 8014f42:	2010      	movs	r0, #16
 8014f44:	f7fd ff8c 	bl	8012e60 <malloc>
 8014f48:	4602      	mov	r2, r0
 8014f4a:	61e0      	str	r0, [r4, #28]
 8014f4c:	b920      	cbnz	r0, 8014f58 <_dtoa_r+0x38>
 8014f4e:	4bae      	ldr	r3, [pc, #696]	; (8015208 <_dtoa_r+0x2e8>)
 8014f50:	21ef      	movs	r1, #239	; 0xef
 8014f52:	48ae      	ldr	r0, [pc, #696]	; (801520c <_dtoa_r+0x2ec>)
 8014f54:	f7ff ff3e 	bl	8014dd4 <__assert_func>
 8014f58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014f5c:	6005      	str	r5, [r0, #0]
 8014f5e:	60c5      	str	r5, [r0, #12]
 8014f60:	69e3      	ldr	r3, [r4, #28]
 8014f62:	6819      	ldr	r1, [r3, #0]
 8014f64:	b151      	cbz	r1, 8014f7c <_dtoa_r+0x5c>
 8014f66:	685a      	ldr	r2, [r3, #4]
 8014f68:	604a      	str	r2, [r1, #4]
 8014f6a:	2301      	movs	r3, #1
 8014f6c:	4093      	lsls	r3, r2
 8014f6e:	608b      	str	r3, [r1, #8]
 8014f70:	4620      	mov	r0, r4
 8014f72:	f001 f9bd 	bl	80162f0 <_Bfree>
 8014f76:	69e3      	ldr	r3, [r4, #28]
 8014f78:	2200      	movs	r2, #0
 8014f7a:	601a      	str	r2, [r3, #0]
 8014f7c:	1e3b      	subs	r3, r7, #0
 8014f7e:	bfbb      	ittet	lt
 8014f80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014f84:	9303      	strlt	r3, [sp, #12]
 8014f86:	2300      	movge	r3, #0
 8014f88:	2201      	movlt	r2, #1
 8014f8a:	bfac      	ite	ge
 8014f8c:	f8c8 3000 	strge.w	r3, [r8]
 8014f90:	f8c8 2000 	strlt.w	r2, [r8]
 8014f94:	4b9e      	ldr	r3, [pc, #632]	; (8015210 <_dtoa_r+0x2f0>)
 8014f96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014f9a:	ea33 0308 	bics.w	r3, r3, r8
 8014f9e:	d11b      	bne.n	8014fd8 <_dtoa_r+0xb8>
 8014fa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014fa2:	f242 730f 	movw	r3, #9999	; 0x270f
 8014fa6:	6013      	str	r3, [r2, #0]
 8014fa8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8014fac:	4333      	orrs	r3, r6
 8014fae:	f000 8593 	beq.w	8015ad8 <_dtoa_r+0xbb8>
 8014fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fb4:	b963      	cbnz	r3, 8014fd0 <_dtoa_r+0xb0>
 8014fb6:	4b97      	ldr	r3, [pc, #604]	; (8015214 <_dtoa_r+0x2f4>)
 8014fb8:	e027      	b.n	801500a <_dtoa_r+0xea>
 8014fba:	4b97      	ldr	r3, [pc, #604]	; (8015218 <_dtoa_r+0x2f8>)
 8014fbc:	9300      	str	r3, [sp, #0]
 8014fbe:	3308      	adds	r3, #8
 8014fc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014fc2:	6013      	str	r3, [r2, #0]
 8014fc4:	9800      	ldr	r0, [sp, #0]
 8014fc6:	b013      	add	sp, #76	; 0x4c
 8014fc8:	ecbd 8b04 	vpop	{d8-d9}
 8014fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fd0:	4b90      	ldr	r3, [pc, #576]	; (8015214 <_dtoa_r+0x2f4>)
 8014fd2:	9300      	str	r3, [sp, #0]
 8014fd4:	3303      	adds	r3, #3
 8014fd6:	e7f3      	b.n	8014fc0 <_dtoa_r+0xa0>
 8014fd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014fdc:	2200      	movs	r2, #0
 8014fde:	ec51 0b17 	vmov	r0, r1, d7
 8014fe2:	eeb0 8a47 	vmov.f32	s16, s14
 8014fe6:	eef0 8a67 	vmov.f32	s17, s15
 8014fea:	2300      	movs	r3, #0
 8014fec:	f7eb fd8c 	bl	8000b08 <__aeabi_dcmpeq>
 8014ff0:	4681      	mov	r9, r0
 8014ff2:	b160      	cbz	r0, 801500e <_dtoa_r+0xee>
 8014ff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	6013      	str	r3, [r2, #0]
 8014ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	f000 8568 	beq.w	8015ad2 <_dtoa_r+0xbb2>
 8015002:	4b86      	ldr	r3, [pc, #536]	; (801521c <_dtoa_r+0x2fc>)
 8015004:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015006:	6013      	str	r3, [r2, #0]
 8015008:	3b01      	subs	r3, #1
 801500a:	9300      	str	r3, [sp, #0]
 801500c:	e7da      	b.n	8014fc4 <_dtoa_r+0xa4>
 801500e:	aa10      	add	r2, sp, #64	; 0x40
 8015010:	a911      	add	r1, sp, #68	; 0x44
 8015012:	4620      	mov	r0, r4
 8015014:	eeb0 0a48 	vmov.f32	s0, s16
 8015018:	eef0 0a68 	vmov.f32	s1, s17
 801501c:	f001 fd04 	bl	8016a28 <__d2b>
 8015020:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015024:	4682      	mov	sl, r0
 8015026:	2d00      	cmp	r5, #0
 8015028:	d07f      	beq.n	801512a <_dtoa_r+0x20a>
 801502a:	ee18 3a90 	vmov	r3, s17
 801502e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015032:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8015036:	ec51 0b18 	vmov	r0, r1, d8
 801503a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801503e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015042:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8015046:	4619      	mov	r1, r3
 8015048:	2200      	movs	r2, #0
 801504a:	4b75      	ldr	r3, [pc, #468]	; (8015220 <_dtoa_r+0x300>)
 801504c:	f7eb f93c 	bl	80002c8 <__aeabi_dsub>
 8015050:	a367      	add	r3, pc, #412	; (adr r3, 80151f0 <_dtoa_r+0x2d0>)
 8015052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015056:	f7eb faef 	bl	8000638 <__aeabi_dmul>
 801505a:	a367      	add	r3, pc, #412	; (adr r3, 80151f8 <_dtoa_r+0x2d8>)
 801505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015060:	f7eb f934 	bl	80002cc <__adddf3>
 8015064:	4606      	mov	r6, r0
 8015066:	4628      	mov	r0, r5
 8015068:	460f      	mov	r7, r1
 801506a:	f7eb fa7b 	bl	8000564 <__aeabi_i2d>
 801506e:	a364      	add	r3, pc, #400	; (adr r3, 8015200 <_dtoa_r+0x2e0>)
 8015070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015074:	f7eb fae0 	bl	8000638 <__aeabi_dmul>
 8015078:	4602      	mov	r2, r0
 801507a:	460b      	mov	r3, r1
 801507c:	4630      	mov	r0, r6
 801507e:	4639      	mov	r1, r7
 8015080:	f7eb f924 	bl	80002cc <__adddf3>
 8015084:	4606      	mov	r6, r0
 8015086:	460f      	mov	r7, r1
 8015088:	f7eb fd86 	bl	8000b98 <__aeabi_d2iz>
 801508c:	2200      	movs	r2, #0
 801508e:	4683      	mov	fp, r0
 8015090:	2300      	movs	r3, #0
 8015092:	4630      	mov	r0, r6
 8015094:	4639      	mov	r1, r7
 8015096:	f7eb fd41 	bl	8000b1c <__aeabi_dcmplt>
 801509a:	b148      	cbz	r0, 80150b0 <_dtoa_r+0x190>
 801509c:	4658      	mov	r0, fp
 801509e:	f7eb fa61 	bl	8000564 <__aeabi_i2d>
 80150a2:	4632      	mov	r2, r6
 80150a4:	463b      	mov	r3, r7
 80150a6:	f7eb fd2f 	bl	8000b08 <__aeabi_dcmpeq>
 80150aa:	b908      	cbnz	r0, 80150b0 <_dtoa_r+0x190>
 80150ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80150b0:	f1bb 0f16 	cmp.w	fp, #22
 80150b4:	d857      	bhi.n	8015166 <_dtoa_r+0x246>
 80150b6:	4b5b      	ldr	r3, [pc, #364]	; (8015224 <_dtoa_r+0x304>)
 80150b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80150bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150c0:	ec51 0b18 	vmov	r0, r1, d8
 80150c4:	f7eb fd2a 	bl	8000b1c <__aeabi_dcmplt>
 80150c8:	2800      	cmp	r0, #0
 80150ca:	d04e      	beq.n	801516a <_dtoa_r+0x24a>
 80150cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80150d0:	2300      	movs	r3, #0
 80150d2:	930c      	str	r3, [sp, #48]	; 0x30
 80150d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80150d6:	1b5b      	subs	r3, r3, r5
 80150d8:	1e5a      	subs	r2, r3, #1
 80150da:	bf45      	ittet	mi
 80150dc:	f1c3 0301 	rsbmi	r3, r3, #1
 80150e0:	9305      	strmi	r3, [sp, #20]
 80150e2:	2300      	movpl	r3, #0
 80150e4:	2300      	movmi	r3, #0
 80150e6:	9206      	str	r2, [sp, #24]
 80150e8:	bf54      	ite	pl
 80150ea:	9305      	strpl	r3, [sp, #20]
 80150ec:	9306      	strmi	r3, [sp, #24]
 80150ee:	f1bb 0f00 	cmp.w	fp, #0
 80150f2:	db3c      	blt.n	801516e <_dtoa_r+0x24e>
 80150f4:	9b06      	ldr	r3, [sp, #24]
 80150f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80150fa:	445b      	add	r3, fp
 80150fc:	9306      	str	r3, [sp, #24]
 80150fe:	2300      	movs	r3, #0
 8015100:	9308      	str	r3, [sp, #32]
 8015102:	9b07      	ldr	r3, [sp, #28]
 8015104:	2b09      	cmp	r3, #9
 8015106:	d868      	bhi.n	80151da <_dtoa_r+0x2ba>
 8015108:	2b05      	cmp	r3, #5
 801510a:	bfc4      	itt	gt
 801510c:	3b04      	subgt	r3, #4
 801510e:	9307      	strgt	r3, [sp, #28]
 8015110:	9b07      	ldr	r3, [sp, #28]
 8015112:	f1a3 0302 	sub.w	r3, r3, #2
 8015116:	bfcc      	ite	gt
 8015118:	2500      	movgt	r5, #0
 801511a:	2501      	movle	r5, #1
 801511c:	2b03      	cmp	r3, #3
 801511e:	f200 8085 	bhi.w	801522c <_dtoa_r+0x30c>
 8015122:	e8df f003 	tbb	[pc, r3]
 8015126:	3b2e      	.short	0x3b2e
 8015128:	5839      	.short	0x5839
 801512a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801512e:	441d      	add	r5, r3
 8015130:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015134:	2b20      	cmp	r3, #32
 8015136:	bfc1      	itttt	gt
 8015138:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801513c:	fa08 f803 	lslgt.w	r8, r8, r3
 8015140:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8015144:	fa26 f303 	lsrgt.w	r3, r6, r3
 8015148:	bfd6      	itet	le
 801514a:	f1c3 0320 	rsble	r3, r3, #32
 801514e:	ea48 0003 	orrgt.w	r0, r8, r3
 8015152:	fa06 f003 	lslle.w	r0, r6, r3
 8015156:	f7eb f9f5 	bl	8000544 <__aeabi_ui2d>
 801515a:	2201      	movs	r2, #1
 801515c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8015160:	3d01      	subs	r5, #1
 8015162:	920e      	str	r2, [sp, #56]	; 0x38
 8015164:	e76f      	b.n	8015046 <_dtoa_r+0x126>
 8015166:	2301      	movs	r3, #1
 8015168:	e7b3      	b.n	80150d2 <_dtoa_r+0x1b2>
 801516a:	900c      	str	r0, [sp, #48]	; 0x30
 801516c:	e7b2      	b.n	80150d4 <_dtoa_r+0x1b4>
 801516e:	9b05      	ldr	r3, [sp, #20]
 8015170:	eba3 030b 	sub.w	r3, r3, fp
 8015174:	9305      	str	r3, [sp, #20]
 8015176:	f1cb 0300 	rsb	r3, fp, #0
 801517a:	9308      	str	r3, [sp, #32]
 801517c:	2300      	movs	r3, #0
 801517e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015180:	e7bf      	b.n	8015102 <_dtoa_r+0x1e2>
 8015182:	2300      	movs	r3, #0
 8015184:	9309      	str	r3, [sp, #36]	; 0x24
 8015186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015188:	2b00      	cmp	r3, #0
 801518a:	dc52      	bgt.n	8015232 <_dtoa_r+0x312>
 801518c:	2301      	movs	r3, #1
 801518e:	9301      	str	r3, [sp, #4]
 8015190:	9304      	str	r3, [sp, #16]
 8015192:	461a      	mov	r2, r3
 8015194:	920a      	str	r2, [sp, #40]	; 0x28
 8015196:	e00b      	b.n	80151b0 <_dtoa_r+0x290>
 8015198:	2301      	movs	r3, #1
 801519a:	e7f3      	b.n	8015184 <_dtoa_r+0x264>
 801519c:	2300      	movs	r3, #0
 801519e:	9309      	str	r3, [sp, #36]	; 0x24
 80151a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151a2:	445b      	add	r3, fp
 80151a4:	9301      	str	r3, [sp, #4]
 80151a6:	3301      	adds	r3, #1
 80151a8:	2b01      	cmp	r3, #1
 80151aa:	9304      	str	r3, [sp, #16]
 80151ac:	bfb8      	it	lt
 80151ae:	2301      	movlt	r3, #1
 80151b0:	69e0      	ldr	r0, [r4, #28]
 80151b2:	2100      	movs	r1, #0
 80151b4:	2204      	movs	r2, #4
 80151b6:	f102 0614 	add.w	r6, r2, #20
 80151ba:	429e      	cmp	r6, r3
 80151bc:	d93d      	bls.n	801523a <_dtoa_r+0x31a>
 80151be:	6041      	str	r1, [r0, #4]
 80151c0:	4620      	mov	r0, r4
 80151c2:	f001 f855 	bl	8016270 <_Balloc>
 80151c6:	9000      	str	r0, [sp, #0]
 80151c8:	2800      	cmp	r0, #0
 80151ca:	d139      	bne.n	8015240 <_dtoa_r+0x320>
 80151cc:	4b16      	ldr	r3, [pc, #88]	; (8015228 <_dtoa_r+0x308>)
 80151ce:	4602      	mov	r2, r0
 80151d0:	f240 11af 	movw	r1, #431	; 0x1af
 80151d4:	e6bd      	b.n	8014f52 <_dtoa_r+0x32>
 80151d6:	2301      	movs	r3, #1
 80151d8:	e7e1      	b.n	801519e <_dtoa_r+0x27e>
 80151da:	2501      	movs	r5, #1
 80151dc:	2300      	movs	r3, #0
 80151de:	9307      	str	r3, [sp, #28]
 80151e0:	9509      	str	r5, [sp, #36]	; 0x24
 80151e2:	f04f 33ff 	mov.w	r3, #4294967295
 80151e6:	9301      	str	r3, [sp, #4]
 80151e8:	9304      	str	r3, [sp, #16]
 80151ea:	2200      	movs	r2, #0
 80151ec:	2312      	movs	r3, #18
 80151ee:	e7d1      	b.n	8015194 <_dtoa_r+0x274>
 80151f0:	636f4361 	.word	0x636f4361
 80151f4:	3fd287a7 	.word	0x3fd287a7
 80151f8:	8b60c8b3 	.word	0x8b60c8b3
 80151fc:	3fc68a28 	.word	0x3fc68a28
 8015200:	509f79fb 	.word	0x509f79fb
 8015204:	3fd34413 	.word	0x3fd34413
 8015208:	0801a7c0 	.word	0x0801a7c0
 801520c:	0801aa68 	.word	0x0801aa68
 8015210:	7ff00000 	.word	0x7ff00000
 8015214:	0801aa64 	.word	0x0801aa64
 8015218:	0801aa5b 	.word	0x0801aa5b
 801521c:	0801a99a 	.word	0x0801a99a
 8015220:	3ff80000 	.word	0x3ff80000
 8015224:	0801abb8 	.word	0x0801abb8
 8015228:	0801aac0 	.word	0x0801aac0
 801522c:	2301      	movs	r3, #1
 801522e:	9309      	str	r3, [sp, #36]	; 0x24
 8015230:	e7d7      	b.n	80151e2 <_dtoa_r+0x2c2>
 8015232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015234:	9301      	str	r3, [sp, #4]
 8015236:	9304      	str	r3, [sp, #16]
 8015238:	e7ba      	b.n	80151b0 <_dtoa_r+0x290>
 801523a:	3101      	adds	r1, #1
 801523c:	0052      	lsls	r2, r2, #1
 801523e:	e7ba      	b.n	80151b6 <_dtoa_r+0x296>
 8015240:	69e3      	ldr	r3, [r4, #28]
 8015242:	9a00      	ldr	r2, [sp, #0]
 8015244:	601a      	str	r2, [r3, #0]
 8015246:	9b04      	ldr	r3, [sp, #16]
 8015248:	2b0e      	cmp	r3, #14
 801524a:	f200 80a8 	bhi.w	801539e <_dtoa_r+0x47e>
 801524e:	2d00      	cmp	r5, #0
 8015250:	f000 80a5 	beq.w	801539e <_dtoa_r+0x47e>
 8015254:	f1bb 0f00 	cmp.w	fp, #0
 8015258:	dd38      	ble.n	80152cc <_dtoa_r+0x3ac>
 801525a:	4bc0      	ldr	r3, [pc, #768]	; (801555c <_dtoa_r+0x63c>)
 801525c:	f00b 020f 	and.w	r2, fp, #15
 8015260:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015264:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015268:	e9d3 6700 	ldrd	r6, r7, [r3]
 801526c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8015270:	d019      	beq.n	80152a6 <_dtoa_r+0x386>
 8015272:	4bbb      	ldr	r3, [pc, #748]	; (8015560 <_dtoa_r+0x640>)
 8015274:	ec51 0b18 	vmov	r0, r1, d8
 8015278:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801527c:	f7eb fb06 	bl	800088c <__aeabi_ddiv>
 8015280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015284:	f008 080f 	and.w	r8, r8, #15
 8015288:	2503      	movs	r5, #3
 801528a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015560 <_dtoa_r+0x640>
 801528e:	f1b8 0f00 	cmp.w	r8, #0
 8015292:	d10a      	bne.n	80152aa <_dtoa_r+0x38a>
 8015294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015298:	4632      	mov	r2, r6
 801529a:	463b      	mov	r3, r7
 801529c:	f7eb faf6 	bl	800088c <__aeabi_ddiv>
 80152a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80152a4:	e02b      	b.n	80152fe <_dtoa_r+0x3de>
 80152a6:	2502      	movs	r5, #2
 80152a8:	e7ef      	b.n	801528a <_dtoa_r+0x36a>
 80152aa:	f018 0f01 	tst.w	r8, #1
 80152ae:	d008      	beq.n	80152c2 <_dtoa_r+0x3a2>
 80152b0:	4630      	mov	r0, r6
 80152b2:	4639      	mov	r1, r7
 80152b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80152b8:	f7eb f9be 	bl	8000638 <__aeabi_dmul>
 80152bc:	3501      	adds	r5, #1
 80152be:	4606      	mov	r6, r0
 80152c0:	460f      	mov	r7, r1
 80152c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80152c6:	f109 0908 	add.w	r9, r9, #8
 80152ca:	e7e0      	b.n	801528e <_dtoa_r+0x36e>
 80152cc:	f000 809f 	beq.w	801540e <_dtoa_r+0x4ee>
 80152d0:	f1cb 0600 	rsb	r6, fp, #0
 80152d4:	4ba1      	ldr	r3, [pc, #644]	; (801555c <_dtoa_r+0x63c>)
 80152d6:	4fa2      	ldr	r7, [pc, #648]	; (8015560 <_dtoa_r+0x640>)
 80152d8:	f006 020f 	and.w	r2, r6, #15
 80152dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80152e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152e4:	ec51 0b18 	vmov	r0, r1, d8
 80152e8:	f7eb f9a6 	bl	8000638 <__aeabi_dmul>
 80152ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80152f0:	1136      	asrs	r6, r6, #4
 80152f2:	2300      	movs	r3, #0
 80152f4:	2502      	movs	r5, #2
 80152f6:	2e00      	cmp	r6, #0
 80152f8:	d17e      	bne.n	80153f8 <_dtoa_r+0x4d8>
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d1d0      	bne.n	80152a0 <_dtoa_r+0x380>
 80152fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015300:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015304:	2b00      	cmp	r3, #0
 8015306:	f000 8084 	beq.w	8015412 <_dtoa_r+0x4f2>
 801530a:	4b96      	ldr	r3, [pc, #600]	; (8015564 <_dtoa_r+0x644>)
 801530c:	2200      	movs	r2, #0
 801530e:	4640      	mov	r0, r8
 8015310:	4649      	mov	r1, r9
 8015312:	f7eb fc03 	bl	8000b1c <__aeabi_dcmplt>
 8015316:	2800      	cmp	r0, #0
 8015318:	d07b      	beq.n	8015412 <_dtoa_r+0x4f2>
 801531a:	9b04      	ldr	r3, [sp, #16]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d078      	beq.n	8015412 <_dtoa_r+0x4f2>
 8015320:	9b01      	ldr	r3, [sp, #4]
 8015322:	2b00      	cmp	r3, #0
 8015324:	dd39      	ble.n	801539a <_dtoa_r+0x47a>
 8015326:	4b90      	ldr	r3, [pc, #576]	; (8015568 <_dtoa_r+0x648>)
 8015328:	2200      	movs	r2, #0
 801532a:	4640      	mov	r0, r8
 801532c:	4649      	mov	r1, r9
 801532e:	f7eb f983 	bl	8000638 <__aeabi_dmul>
 8015332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015336:	9e01      	ldr	r6, [sp, #4]
 8015338:	f10b 37ff 	add.w	r7, fp, #4294967295
 801533c:	3501      	adds	r5, #1
 801533e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015342:	4628      	mov	r0, r5
 8015344:	f7eb f90e 	bl	8000564 <__aeabi_i2d>
 8015348:	4642      	mov	r2, r8
 801534a:	464b      	mov	r3, r9
 801534c:	f7eb f974 	bl	8000638 <__aeabi_dmul>
 8015350:	4b86      	ldr	r3, [pc, #536]	; (801556c <_dtoa_r+0x64c>)
 8015352:	2200      	movs	r2, #0
 8015354:	f7ea ffba 	bl	80002cc <__adddf3>
 8015358:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801535c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015360:	9303      	str	r3, [sp, #12]
 8015362:	2e00      	cmp	r6, #0
 8015364:	d158      	bne.n	8015418 <_dtoa_r+0x4f8>
 8015366:	4b82      	ldr	r3, [pc, #520]	; (8015570 <_dtoa_r+0x650>)
 8015368:	2200      	movs	r2, #0
 801536a:	4640      	mov	r0, r8
 801536c:	4649      	mov	r1, r9
 801536e:	f7ea ffab 	bl	80002c8 <__aeabi_dsub>
 8015372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015376:	4680      	mov	r8, r0
 8015378:	4689      	mov	r9, r1
 801537a:	f7eb fbed 	bl	8000b58 <__aeabi_dcmpgt>
 801537e:	2800      	cmp	r0, #0
 8015380:	f040 8296 	bne.w	80158b0 <_dtoa_r+0x990>
 8015384:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015388:	4640      	mov	r0, r8
 801538a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801538e:	4649      	mov	r1, r9
 8015390:	f7eb fbc4 	bl	8000b1c <__aeabi_dcmplt>
 8015394:	2800      	cmp	r0, #0
 8015396:	f040 8289 	bne.w	80158ac <_dtoa_r+0x98c>
 801539a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801539e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	f2c0 814e 	blt.w	8015642 <_dtoa_r+0x722>
 80153a6:	f1bb 0f0e 	cmp.w	fp, #14
 80153aa:	f300 814a 	bgt.w	8015642 <_dtoa_r+0x722>
 80153ae:	4b6b      	ldr	r3, [pc, #428]	; (801555c <_dtoa_r+0x63c>)
 80153b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80153b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80153b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	f280 80dc 	bge.w	8015578 <_dtoa_r+0x658>
 80153c0:	9b04      	ldr	r3, [sp, #16]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	f300 80d8 	bgt.w	8015578 <_dtoa_r+0x658>
 80153c8:	f040 826f 	bne.w	80158aa <_dtoa_r+0x98a>
 80153cc:	4b68      	ldr	r3, [pc, #416]	; (8015570 <_dtoa_r+0x650>)
 80153ce:	2200      	movs	r2, #0
 80153d0:	4640      	mov	r0, r8
 80153d2:	4649      	mov	r1, r9
 80153d4:	f7eb f930 	bl	8000638 <__aeabi_dmul>
 80153d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80153dc:	f7eb fbb2 	bl	8000b44 <__aeabi_dcmpge>
 80153e0:	9e04      	ldr	r6, [sp, #16]
 80153e2:	4637      	mov	r7, r6
 80153e4:	2800      	cmp	r0, #0
 80153e6:	f040 8245 	bne.w	8015874 <_dtoa_r+0x954>
 80153ea:	9d00      	ldr	r5, [sp, #0]
 80153ec:	2331      	movs	r3, #49	; 0x31
 80153ee:	f805 3b01 	strb.w	r3, [r5], #1
 80153f2:	f10b 0b01 	add.w	fp, fp, #1
 80153f6:	e241      	b.n	801587c <_dtoa_r+0x95c>
 80153f8:	07f2      	lsls	r2, r6, #31
 80153fa:	d505      	bpl.n	8015408 <_dtoa_r+0x4e8>
 80153fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015400:	f7eb f91a 	bl	8000638 <__aeabi_dmul>
 8015404:	3501      	adds	r5, #1
 8015406:	2301      	movs	r3, #1
 8015408:	1076      	asrs	r6, r6, #1
 801540a:	3708      	adds	r7, #8
 801540c:	e773      	b.n	80152f6 <_dtoa_r+0x3d6>
 801540e:	2502      	movs	r5, #2
 8015410:	e775      	b.n	80152fe <_dtoa_r+0x3de>
 8015412:	9e04      	ldr	r6, [sp, #16]
 8015414:	465f      	mov	r7, fp
 8015416:	e792      	b.n	801533e <_dtoa_r+0x41e>
 8015418:	9900      	ldr	r1, [sp, #0]
 801541a:	4b50      	ldr	r3, [pc, #320]	; (801555c <_dtoa_r+0x63c>)
 801541c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015420:	4431      	add	r1, r6
 8015422:	9102      	str	r1, [sp, #8]
 8015424:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015426:	eeb0 9a47 	vmov.f32	s18, s14
 801542a:	eef0 9a67 	vmov.f32	s19, s15
 801542e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015432:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015436:	2900      	cmp	r1, #0
 8015438:	d044      	beq.n	80154c4 <_dtoa_r+0x5a4>
 801543a:	494e      	ldr	r1, [pc, #312]	; (8015574 <_dtoa_r+0x654>)
 801543c:	2000      	movs	r0, #0
 801543e:	f7eb fa25 	bl	800088c <__aeabi_ddiv>
 8015442:	ec53 2b19 	vmov	r2, r3, d9
 8015446:	f7ea ff3f 	bl	80002c8 <__aeabi_dsub>
 801544a:	9d00      	ldr	r5, [sp, #0]
 801544c:	ec41 0b19 	vmov	d9, r0, r1
 8015450:	4649      	mov	r1, r9
 8015452:	4640      	mov	r0, r8
 8015454:	f7eb fba0 	bl	8000b98 <__aeabi_d2iz>
 8015458:	4606      	mov	r6, r0
 801545a:	f7eb f883 	bl	8000564 <__aeabi_i2d>
 801545e:	4602      	mov	r2, r0
 8015460:	460b      	mov	r3, r1
 8015462:	4640      	mov	r0, r8
 8015464:	4649      	mov	r1, r9
 8015466:	f7ea ff2f 	bl	80002c8 <__aeabi_dsub>
 801546a:	3630      	adds	r6, #48	; 0x30
 801546c:	f805 6b01 	strb.w	r6, [r5], #1
 8015470:	ec53 2b19 	vmov	r2, r3, d9
 8015474:	4680      	mov	r8, r0
 8015476:	4689      	mov	r9, r1
 8015478:	f7eb fb50 	bl	8000b1c <__aeabi_dcmplt>
 801547c:	2800      	cmp	r0, #0
 801547e:	d164      	bne.n	801554a <_dtoa_r+0x62a>
 8015480:	4642      	mov	r2, r8
 8015482:	464b      	mov	r3, r9
 8015484:	4937      	ldr	r1, [pc, #220]	; (8015564 <_dtoa_r+0x644>)
 8015486:	2000      	movs	r0, #0
 8015488:	f7ea ff1e 	bl	80002c8 <__aeabi_dsub>
 801548c:	ec53 2b19 	vmov	r2, r3, d9
 8015490:	f7eb fb44 	bl	8000b1c <__aeabi_dcmplt>
 8015494:	2800      	cmp	r0, #0
 8015496:	f040 80b6 	bne.w	8015606 <_dtoa_r+0x6e6>
 801549a:	9b02      	ldr	r3, [sp, #8]
 801549c:	429d      	cmp	r5, r3
 801549e:	f43f af7c 	beq.w	801539a <_dtoa_r+0x47a>
 80154a2:	4b31      	ldr	r3, [pc, #196]	; (8015568 <_dtoa_r+0x648>)
 80154a4:	ec51 0b19 	vmov	r0, r1, d9
 80154a8:	2200      	movs	r2, #0
 80154aa:	f7eb f8c5 	bl	8000638 <__aeabi_dmul>
 80154ae:	4b2e      	ldr	r3, [pc, #184]	; (8015568 <_dtoa_r+0x648>)
 80154b0:	ec41 0b19 	vmov	d9, r0, r1
 80154b4:	2200      	movs	r2, #0
 80154b6:	4640      	mov	r0, r8
 80154b8:	4649      	mov	r1, r9
 80154ba:	f7eb f8bd 	bl	8000638 <__aeabi_dmul>
 80154be:	4680      	mov	r8, r0
 80154c0:	4689      	mov	r9, r1
 80154c2:	e7c5      	b.n	8015450 <_dtoa_r+0x530>
 80154c4:	ec51 0b17 	vmov	r0, r1, d7
 80154c8:	f7eb f8b6 	bl	8000638 <__aeabi_dmul>
 80154cc:	9b02      	ldr	r3, [sp, #8]
 80154ce:	9d00      	ldr	r5, [sp, #0]
 80154d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80154d2:	ec41 0b19 	vmov	d9, r0, r1
 80154d6:	4649      	mov	r1, r9
 80154d8:	4640      	mov	r0, r8
 80154da:	f7eb fb5d 	bl	8000b98 <__aeabi_d2iz>
 80154de:	4606      	mov	r6, r0
 80154e0:	f7eb f840 	bl	8000564 <__aeabi_i2d>
 80154e4:	3630      	adds	r6, #48	; 0x30
 80154e6:	4602      	mov	r2, r0
 80154e8:	460b      	mov	r3, r1
 80154ea:	4640      	mov	r0, r8
 80154ec:	4649      	mov	r1, r9
 80154ee:	f7ea feeb 	bl	80002c8 <__aeabi_dsub>
 80154f2:	f805 6b01 	strb.w	r6, [r5], #1
 80154f6:	9b02      	ldr	r3, [sp, #8]
 80154f8:	429d      	cmp	r5, r3
 80154fa:	4680      	mov	r8, r0
 80154fc:	4689      	mov	r9, r1
 80154fe:	f04f 0200 	mov.w	r2, #0
 8015502:	d124      	bne.n	801554e <_dtoa_r+0x62e>
 8015504:	4b1b      	ldr	r3, [pc, #108]	; (8015574 <_dtoa_r+0x654>)
 8015506:	ec51 0b19 	vmov	r0, r1, d9
 801550a:	f7ea fedf 	bl	80002cc <__adddf3>
 801550e:	4602      	mov	r2, r0
 8015510:	460b      	mov	r3, r1
 8015512:	4640      	mov	r0, r8
 8015514:	4649      	mov	r1, r9
 8015516:	f7eb fb1f 	bl	8000b58 <__aeabi_dcmpgt>
 801551a:	2800      	cmp	r0, #0
 801551c:	d173      	bne.n	8015606 <_dtoa_r+0x6e6>
 801551e:	ec53 2b19 	vmov	r2, r3, d9
 8015522:	4914      	ldr	r1, [pc, #80]	; (8015574 <_dtoa_r+0x654>)
 8015524:	2000      	movs	r0, #0
 8015526:	f7ea fecf 	bl	80002c8 <__aeabi_dsub>
 801552a:	4602      	mov	r2, r0
 801552c:	460b      	mov	r3, r1
 801552e:	4640      	mov	r0, r8
 8015530:	4649      	mov	r1, r9
 8015532:	f7eb faf3 	bl	8000b1c <__aeabi_dcmplt>
 8015536:	2800      	cmp	r0, #0
 8015538:	f43f af2f 	beq.w	801539a <_dtoa_r+0x47a>
 801553c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801553e:	1e6b      	subs	r3, r5, #1
 8015540:	930f      	str	r3, [sp, #60]	; 0x3c
 8015542:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015546:	2b30      	cmp	r3, #48	; 0x30
 8015548:	d0f8      	beq.n	801553c <_dtoa_r+0x61c>
 801554a:	46bb      	mov	fp, r7
 801554c:	e04a      	b.n	80155e4 <_dtoa_r+0x6c4>
 801554e:	4b06      	ldr	r3, [pc, #24]	; (8015568 <_dtoa_r+0x648>)
 8015550:	f7eb f872 	bl	8000638 <__aeabi_dmul>
 8015554:	4680      	mov	r8, r0
 8015556:	4689      	mov	r9, r1
 8015558:	e7bd      	b.n	80154d6 <_dtoa_r+0x5b6>
 801555a:	bf00      	nop
 801555c:	0801abb8 	.word	0x0801abb8
 8015560:	0801ab90 	.word	0x0801ab90
 8015564:	3ff00000 	.word	0x3ff00000
 8015568:	40240000 	.word	0x40240000
 801556c:	401c0000 	.word	0x401c0000
 8015570:	40140000 	.word	0x40140000
 8015574:	3fe00000 	.word	0x3fe00000
 8015578:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801557c:	9d00      	ldr	r5, [sp, #0]
 801557e:	4642      	mov	r2, r8
 8015580:	464b      	mov	r3, r9
 8015582:	4630      	mov	r0, r6
 8015584:	4639      	mov	r1, r7
 8015586:	f7eb f981 	bl	800088c <__aeabi_ddiv>
 801558a:	f7eb fb05 	bl	8000b98 <__aeabi_d2iz>
 801558e:	9001      	str	r0, [sp, #4]
 8015590:	f7ea ffe8 	bl	8000564 <__aeabi_i2d>
 8015594:	4642      	mov	r2, r8
 8015596:	464b      	mov	r3, r9
 8015598:	f7eb f84e 	bl	8000638 <__aeabi_dmul>
 801559c:	4602      	mov	r2, r0
 801559e:	460b      	mov	r3, r1
 80155a0:	4630      	mov	r0, r6
 80155a2:	4639      	mov	r1, r7
 80155a4:	f7ea fe90 	bl	80002c8 <__aeabi_dsub>
 80155a8:	9e01      	ldr	r6, [sp, #4]
 80155aa:	9f04      	ldr	r7, [sp, #16]
 80155ac:	3630      	adds	r6, #48	; 0x30
 80155ae:	f805 6b01 	strb.w	r6, [r5], #1
 80155b2:	9e00      	ldr	r6, [sp, #0]
 80155b4:	1bae      	subs	r6, r5, r6
 80155b6:	42b7      	cmp	r7, r6
 80155b8:	4602      	mov	r2, r0
 80155ba:	460b      	mov	r3, r1
 80155bc:	d134      	bne.n	8015628 <_dtoa_r+0x708>
 80155be:	f7ea fe85 	bl	80002cc <__adddf3>
 80155c2:	4642      	mov	r2, r8
 80155c4:	464b      	mov	r3, r9
 80155c6:	4606      	mov	r6, r0
 80155c8:	460f      	mov	r7, r1
 80155ca:	f7eb fac5 	bl	8000b58 <__aeabi_dcmpgt>
 80155ce:	b9c8      	cbnz	r0, 8015604 <_dtoa_r+0x6e4>
 80155d0:	4642      	mov	r2, r8
 80155d2:	464b      	mov	r3, r9
 80155d4:	4630      	mov	r0, r6
 80155d6:	4639      	mov	r1, r7
 80155d8:	f7eb fa96 	bl	8000b08 <__aeabi_dcmpeq>
 80155dc:	b110      	cbz	r0, 80155e4 <_dtoa_r+0x6c4>
 80155de:	9b01      	ldr	r3, [sp, #4]
 80155e0:	07db      	lsls	r3, r3, #31
 80155e2:	d40f      	bmi.n	8015604 <_dtoa_r+0x6e4>
 80155e4:	4651      	mov	r1, sl
 80155e6:	4620      	mov	r0, r4
 80155e8:	f000 fe82 	bl	80162f0 <_Bfree>
 80155ec:	2300      	movs	r3, #0
 80155ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155f0:	702b      	strb	r3, [r5, #0]
 80155f2:	f10b 0301 	add.w	r3, fp, #1
 80155f6:	6013      	str	r3, [r2, #0]
 80155f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	f43f ace2 	beq.w	8014fc4 <_dtoa_r+0xa4>
 8015600:	601d      	str	r5, [r3, #0]
 8015602:	e4df      	b.n	8014fc4 <_dtoa_r+0xa4>
 8015604:	465f      	mov	r7, fp
 8015606:	462b      	mov	r3, r5
 8015608:	461d      	mov	r5, r3
 801560a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801560e:	2a39      	cmp	r2, #57	; 0x39
 8015610:	d106      	bne.n	8015620 <_dtoa_r+0x700>
 8015612:	9a00      	ldr	r2, [sp, #0]
 8015614:	429a      	cmp	r2, r3
 8015616:	d1f7      	bne.n	8015608 <_dtoa_r+0x6e8>
 8015618:	9900      	ldr	r1, [sp, #0]
 801561a:	2230      	movs	r2, #48	; 0x30
 801561c:	3701      	adds	r7, #1
 801561e:	700a      	strb	r2, [r1, #0]
 8015620:	781a      	ldrb	r2, [r3, #0]
 8015622:	3201      	adds	r2, #1
 8015624:	701a      	strb	r2, [r3, #0]
 8015626:	e790      	b.n	801554a <_dtoa_r+0x62a>
 8015628:	4ba3      	ldr	r3, [pc, #652]	; (80158b8 <_dtoa_r+0x998>)
 801562a:	2200      	movs	r2, #0
 801562c:	f7eb f804 	bl	8000638 <__aeabi_dmul>
 8015630:	2200      	movs	r2, #0
 8015632:	2300      	movs	r3, #0
 8015634:	4606      	mov	r6, r0
 8015636:	460f      	mov	r7, r1
 8015638:	f7eb fa66 	bl	8000b08 <__aeabi_dcmpeq>
 801563c:	2800      	cmp	r0, #0
 801563e:	d09e      	beq.n	801557e <_dtoa_r+0x65e>
 8015640:	e7d0      	b.n	80155e4 <_dtoa_r+0x6c4>
 8015642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015644:	2a00      	cmp	r2, #0
 8015646:	f000 80ca 	beq.w	80157de <_dtoa_r+0x8be>
 801564a:	9a07      	ldr	r2, [sp, #28]
 801564c:	2a01      	cmp	r2, #1
 801564e:	f300 80ad 	bgt.w	80157ac <_dtoa_r+0x88c>
 8015652:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015654:	2a00      	cmp	r2, #0
 8015656:	f000 80a5 	beq.w	80157a4 <_dtoa_r+0x884>
 801565a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801565e:	9e08      	ldr	r6, [sp, #32]
 8015660:	9d05      	ldr	r5, [sp, #20]
 8015662:	9a05      	ldr	r2, [sp, #20]
 8015664:	441a      	add	r2, r3
 8015666:	9205      	str	r2, [sp, #20]
 8015668:	9a06      	ldr	r2, [sp, #24]
 801566a:	2101      	movs	r1, #1
 801566c:	441a      	add	r2, r3
 801566e:	4620      	mov	r0, r4
 8015670:	9206      	str	r2, [sp, #24]
 8015672:	f000 ff3d 	bl	80164f0 <__i2b>
 8015676:	4607      	mov	r7, r0
 8015678:	b165      	cbz	r5, 8015694 <_dtoa_r+0x774>
 801567a:	9b06      	ldr	r3, [sp, #24]
 801567c:	2b00      	cmp	r3, #0
 801567e:	dd09      	ble.n	8015694 <_dtoa_r+0x774>
 8015680:	42ab      	cmp	r3, r5
 8015682:	9a05      	ldr	r2, [sp, #20]
 8015684:	bfa8      	it	ge
 8015686:	462b      	movge	r3, r5
 8015688:	1ad2      	subs	r2, r2, r3
 801568a:	9205      	str	r2, [sp, #20]
 801568c:	9a06      	ldr	r2, [sp, #24]
 801568e:	1aed      	subs	r5, r5, r3
 8015690:	1ad3      	subs	r3, r2, r3
 8015692:	9306      	str	r3, [sp, #24]
 8015694:	9b08      	ldr	r3, [sp, #32]
 8015696:	b1f3      	cbz	r3, 80156d6 <_dtoa_r+0x7b6>
 8015698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801569a:	2b00      	cmp	r3, #0
 801569c:	f000 80a3 	beq.w	80157e6 <_dtoa_r+0x8c6>
 80156a0:	2e00      	cmp	r6, #0
 80156a2:	dd10      	ble.n	80156c6 <_dtoa_r+0x7a6>
 80156a4:	4639      	mov	r1, r7
 80156a6:	4632      	mov	r2, r6
 80156a8:	4620      	mov	r0, r4
 80156aa:	f000 ffe1 	bl	8016670 <__pow5mult>
 80156ae:	4652      	mov	r2, sl
 80156b0:	4601      	mov	r1, r0
 80156b2:	4607      	mov	r7, r0
 80156b4:	4620      	mov	r0, r4
 80156b6:	f000 ff31 	bl	801651c <__multiply>
 80156ba:	4651      	mov	r1, sl
 80156bc:	4680      	mov	r8, r0
 80156be:	4620      	mov	r0, r4
 80156c0:	f000 fe16 	bl	80162f0 <_Bfree>
 80156c4:	46c2      	mov	sl, r8
 80156c6:	9b08      	ldr	r3, [sp, #32]
 80156c8:	1b9a      	subs	r2, r3, r6
 80156ca:	d004      	beq.n	80156d6 <_dtoa_r+0x7b6>
 80156cc:	4651      	mov	r1, sl
 80156ce:	4620      	mov	r0, r4
 80156d0:	f000 ffce 	bl	8016670 <__pow5mult>
 80156d4:	4682      	mov	sl, r0
 80156d6:	2101      	movs	r1, #1
 80156d8:	4620      	mov	r0, r4
 80156da:	f000 ff09 	bl	80164f0 <__i2b>
 80156de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	4606      	mov	r6, r0
 80156e4:	f340 8081 	ble.w	80157ea <_dtoa_r+0x8ca>
 80156e8:	461a      	mov	r2, r3
 80156ea:	4601      	mov	r1, r0
 80156ec:	4620      	mov	r0, r4
 80156ee:	f000 ffbf 	bl	8016670 <__pow5mult>
 80156f2:	9b07      	ldr	r3, [sp, #28]
 80156f4:	2b01      	cmp	r3, #1
 80156f6:	4606      	mov	r6, r0
 80156f8:	dd7a      	ble.n	80157f0 <_dtoa_r+0x8d0>
 80156fa:	f04f 0800 	mov.w	r8, #0
 80156fe:	6933      	ldr	r3, [r6, #16]
 8015700:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015704:	6918      	ldr	r0, [r3, #16]
 8015706:	f000 fea5 	bl	8016454 <__hi0bits>
 801570a:	f1c0 0020 	rsb	r0, r0, #32
 801570e:	9b06      	ldr	r3, [sp, #24]
 8015710:	4418      	add	r0, r3
 8015712:	f010 001f 	ands.w	r0, r0, #31
 8015716:	f000 8094 	beq.w	8015842 <_dtoa_r+0x922>
 801571a:	f1c0 0320 	rsb	r3, r0, #32
 801571e:	2b04      	cmp	r3, #4
 8015720:	f340 8085 	ble.w	801582e <_dtoa_r+0x90e>
 8015724:	9b05      	ldr	r3, [sp, #20]
 8015726:	f1c0 001c 	rsb	r0, r0, #28
 801572a:	4403      	add	r3, r0
 801572c:	9305      	str	r3, [sp, #20]
 801572e:	9b06      	ldr	r3, [sp, #24]
 8015730:	4403      	add	r3, r0
 8015732:	4405      	add	r5, r0
 8015734:	9306      	str	r3, [sp, #24]
 8015736:	9b05      	ldr	r3, [sp, #20]
 8015738:	2b00      	cmp	r3, #0
 801573a:	dd05      	ble.n	8015748 <_dtoa_r+0x828>
 801573c:	4651      	mov	r1, sl
 801573e:	461a      	mov	r2, r3
 8015740:	4620      	mov	r0, r4
 8015742:	f000 ffef 	bl	8016724 <__lshift>
 8015746:	4682      	mov	sl, r0
 8015748:	9b06      	ldr	r3, [sp, #24]
 801574a:	2b00      	cmp	r3, #0
 801574c:	dd05      	ble.n	801575a <_dtoa_r+0x83a>
 801574e:	4631      	mov	r1, r6
 8015750:	461a      	mov	r2, r3
 8015752:	4620      	mov	r0, r4
 8015754:	f000 ffe6 	bl	8016724 <__lshift>
 8015758:	4606      	mov	r6, r0
 801575a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801575c:	2b00      	cmp	r3, #0
 801575e:	d072      	beq.n	8015846 <_dtoa_r+0x926>
 8015760:	4631      	mov	r1, r6
 8015762:	4650      	mov	r0, sl
 8015764:	f001 f84a 	bl	80167fc <__mcmp>
 8015768:	2800      	cmp	r0, #0
 801576a:	da6c      	bge.n	8015846 <_dtoa_r+0x926>
 801576c:	2300      	movs	r3, #0
 801576e:	4651      	mov	r1, sl
 8015770:	220a      	movs	r2, #10
 8015772:	4620      	mov	r0, r4
 8015774:	f000 fdde 	bl	8016334 <__multadd>
 8015778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801577a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801577e:	4682      	mov	sl, r0
 8015780:	2b00      	cmp	r3, #0
 8015782:	f000 81b0 	beq.w	8015ae6 <_dtoa_r+0xbc6>
 8015786:	2300      	movs	r3, #0
 8015788:	4639      	mov	r1, r7
 801578a:	220a      	movs	r2, #10
 801578c:	4620      	mov	r0, r4
 801578e:	f000 fdd1 	bl	8016334 <__multadd>
 8015792:	9b01      	ldr	r3, [sp, #4]
 8015794:	2b00      	cmp	r3, #0
 8015796:	4607      	mov	r7, r0
 8015798:	f300 8096 	bgt.w	80158c8 <_dtoa_r+0x9a8>
 801579c:	9b07      	ldr	r3, [sp, #28]
 801579e:	2b02      	cmp	r3, #2
 80157a0:	dc59      	bgt.n	8015856 <_dtoa_r+0x936>
 80157a2:	e091      	b.n	80158c8 <_dtoa_r+0x9a8>
 80157a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80157a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80157aa:	e758      	b.n	801565e <_dtoa_r+0x73e>
 80157ac:	9b04      	ldr	r3, [sp, #16]
 80157ae:	1e5e      	subs	r6, r3, #1
 80157b0:	9b08      	ldr	r3, [sp, #32]
 80157b2:	42b3      	cmp	r3, r6
 80157b4:	bfbf      	itttt	lt
 80157b6:	9b08      	ldrlt	r3, [sp, #32]
 80157b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80157ba:	9608      	strlt	r6, [sp, #32]
 80157bc:	1af3      	sublt	r3, r6, r3
 80157be:	bfb4      	ite	lt
 80157c0:	18d2      	addlt	r2, r2, r3
 80157c2:	1b9e      	subge	r6, r3, r6
 80157c4:	9b04      	ldr	r3, [sp, #16]
 80157c6:	bfbc      	itt	lt
 80157c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80157ca:	2600      	movlt	r6, #0
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	bfb7      	itett	lt
 80157d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80157d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80157d8:	1a9d      	sublt	r5, r3, r2
 80157da:	2300      	movlt	r3, #0
 80157dc:	e741      	b.n	8015662 <_dtoa_r+0x742>
 80157de:	9e08      	ldr	r6, [sp, #32]
 80157e0:	9d05      	ldr	r5, [sp, #20]
 80157e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80157e4:	e748      	b.n	8015678 <_dtoa_r+0x758>
 80157e6:	9a08      	ldr	r2, [sp, #32]
 80157e8:	e770      	b.n	80156cc <_dtoa_r+0x7ac>
 80157ea:	9b07      	ldr	r3, [sp, #28]
 80157ec:	2b01      	cmp	r3, #1
 80157ee:	dc19      	bgt.n	8015824 <_dtoa_r+0x904>
 80157f0:	9b02      	ldr	r3, [sp, #8]
 80157f2:	b9bb      	cbnz	r3, 8015824 <_dtoa_r+0x904>
 80157f4:	9b03      	ldr	r3, [sp, #12]
 80157f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157fa:	b99b      	cbnz	r3, 8015824 <_dtoa_r+0x904>
 80157fc:	9b03      	ldr	r3, [sp, #12]
 80157fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015802:	0d1b      	lsrs	r3, r3, #20
 8015804:	051b      	lsls	r3, r3, #20
 8015806:	b183      	cbz	r3, 801582a <_dtoa_r+0x90a>
 8015808:	9b05      	ldr	r3, [sp, #20]
 801580a:	3301      	adds	r3, #1
 801580c:	9305      	str	r3, [sp, #20]
 801580e:	9b06      	ldr	r3, [sp, #24]
 8015810:	3301      	adds	r3, #1
 8015812:	9306      	str	r3, [sp, #24]
 8015814:	f04f 0801 	mov.w	r8, #1
 8015818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801581a:	2b00      	cmp	r3, #0
 801581c:	f47f af6f 	bne.w	80156fe <_dtoa_r+0x7de>
 8015820:	2001      	movs	r0, #1
 8015822:	e774      	b.n	801570e <_dtoa_r+0x7ee>
 8015824:	f04f 0800 	mov.w	r8, #0
 8015828:	e7f6      	b.n	8015818 <_dtoa_r+0x8f8>
 801582a:	4698      	mov	r8, r3
 801582c:	e7f4      	b.n	8015818 <_dtoa_r+0x8f8>
 801582e:	d082      	beq.n	8015736 <_dtoa_r+0x816>
 8015830:	9a05      	ldr	r2, [sp, #20]
 8015832:	331c      	adds	r3, #28
 8015834:	441a      	add	r2, r3
 8015836:	9205      	str	r2, [sp, #20]
 8015838:	9a06      	ldr	r2, [sp, #24]
 801583a:	441a      	add	r2, r3
 801583c:	441d      	add	r5, r3
 801583e:	9206      	str	r2, [sp, #24]
 8015840:	e779      	b.n	8015736 <_dtoa_r+0x816>
 8015842:	4603      	mov	r3, r0
 8015844:	e7f4      	b.n	8015830 <_dtoa_r+0x910>
 8015846:	9b04      	ldr	r3, [sp, #16]
 8015848:	2b00      	cmp	r3, #0
 801584a:	dc37      	bgt.n	80158bc <_dtoa_r+0x99c>
 801584c:	9b07      	ldr	r3, [sp, #28]
 801584e:	2b02      	cmp	r3, #2
 8015850:	dd34      	ble.n	80158bc <_dtoa_r+0x99c>
 8015852:	9b04      	ldr	r3, [sp, #16]
 8015854:	9301      	str	r3, [sp, #4]
 8015856:	9b01      	ldr	r3, [sp, #4]
 8015858:	b963      	cbnz	r3, 8015874 <_dtoa_r+0x954>
 801585a:	4631      	mov	r1, r6
 801585c:	2205      	movs	r2, #5
 801585e:	4620      	mov	r0, r4
 8015860:	f000 fd68 	bl	8016334 <__multadd>
 8015864:	4601      	mov	r1, r0
 8015866:	4606      	mov	r6, r0
 8015868:	4650      	mov	r0, sl
 801586a:	f000 ffc7 	bl	80167fc <__mcmp>
 801586e:	2800      	cmp	r0, #0
 8015870:	f73f adbb 	bgt.w	80153ea <_dtoa_r+0x4ca>
 8015874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015876:	9d00      	ldr	r5, [sp, #0]
 8015878:	ea6f 0b03 	mvn.w	fp, r3
 801587c:	f04f 0800 	mov.w	r8, #0
 8015880:	4631      	mov	r1, r6
 8015882:	4620      	mov	r0, r4
 8015884:	f000 fd34 	bl	80162f0 <_Bfree>
 8015888:	2f00      	cmp	r7, #0
 801588a:	f43f aeab 	beq.w	80155e4 <_dtoa_r+0x6c4>
 801588e:	f1b8 0f00 	cmp.w	r8, #0
 8015892:	d005      	beq.n	80158a0 <_dtoa_r+0x980>
 8015894:	45b8      	cmp	r8, r7
 8015896:	d003      	beq.n	80158a0 <_dtoa_r+0x980>
 8015898:	4641      	mov	r1, r8
 801589a:	4620      	mov	r0, r4
 801589c:	f000 fd28 	bl	80162f0 <_Bfree>
 80158a0:	4639      	mov	r1, r7
 80158a2:	4620      	mov	r0, r4
 80158a4:	f000 fd24 	bl	80162f0 <_Bfree>
 80158a8:	e69c      	b.n	80155e4 <_dtoa_r+0x6c4>
 80158aa:	2600      	movs	r6, #0
 80158ac:	4637      	mov	r7, r6
 80158ae:	e7e1      	b.n	8015874 <_dtoa_r+0x954>
 80158b0:	46bb      	mov	fp, r7
 80158b2:	4637      	mov	r7, r6
 80158b4:	e599      	b.n	80153ea <_dtoa_r+0x4ca>
 80158b6:	bf00      	nop
 80158b8:	40240000 	.word	0x40240000
 80158bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158be:	2b00      	cmp	r3, #0
 80158c0:	f000 80c8 	beq.w	8015a54 <_dtoa_r+0xb34>
 80158c4:	9b04      	ldr	r3, [sp, #16]
 80158c6:	9301      	str	r3, [sp, #4]
 80158c8:	2d00      	cmp	r5, #0
 80158ca:	dd05      	ble.n	80158d8 <_dtoa_r+0x9b8>
 80158cc:	4639      	mov	r1, r7
 80158ce:	462a      	mov	r2, r5
 80158d0:	4620      	mov	r0, r4
 80158d2:	f000 ff27 	bl	8016724 <__lshift>
 80158d6:	4607      	mov	r7, r0
 80158d8:	f1b8 0f00 	cmp.w	r8, #0
 80158dc:	d05b      	beq.n	8015996 <_dtoa_r+0xa76>
 80158de:	6879      	ldr	r1, [r7, #4]
 80158e0:	4620      	mov	r0, r4
 80158e2:	f000 fcc5 	bl	8016270 <_Balloc>
 80158e6:	4605      	mov	r5, r0
 80158e8:	b928      	cbnz	r0, 80158f6 <_dtoa_r+0x9d6>
 80158ea:	4b83      	ldr	r3, [pc, #524]	; (8015af8 <_dtoa_r+0xbd8>)
 80158ec:	4602      	mov	r2, r0
 80158ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80158f2:	f7ff bb2e 	b.w	8014f52 <_dtoa_r+0x32>
 80158f6:	693a      	ldr	r2, [r7, #16]
 80158f8:	3202      	adds	r2, #2
 80158fa:	0092      	lsls	r2, r2, #2
 80158fc:	f107 010c 	add.w	r1, r7, #12
 8015900:	300c      	adds	r0, #12
 8015902:	f7ff fa48 	bl	8014d96 <memcpy>
 8015906:	2201      	movs	r2, #1
 8015908:	4629      	mov	r1, r5
 801590a:	4620      	mov	r0, r4
 801590c:	f000 ff0a 	bl	8016724 <__lshift>
 8015910:	9b00      	ldr	r3, [sp, #0]
 8015912:	3301      	adds	r3, #1
 8015914:	9304      	str	r3, [sp, #16]
 8015916:	e9dd 2300 	ldrd	r2, r3, [sp]
 801591a:	4413      	add	r3, r2
 801591c:	9308      	str	r3, [sp, #32]
 801591e:	9b02      	ldr	r3, [sp, #8]
 8015920:	f003 0301 	and.w	r3, r3, #1
 8015924:	46b8      	mov	r8, r7
 8015926:	9306      	str	r3, [sp, #24]
 8015928:	4607      	mov	r7, r0
 801592a:	9b04      	ldr	r3, [sp, #16]
 801592c:	4631      	mov	r1, r6
 801592e:	3b01      	subs	r3, #1
 8015930:	4650      	mov	r0, sl
 8015932:	9301      	str	r3, [sp, #4]
 8015934:	f7ff fa6c 	bl	8014e10 <quorem>
 8015938:	4641      	mov	r1, r8
 801593a:	9002      	str	r0, [sp, #8]
 801593c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015940:	4650      	mov	r0, sl
 8015942:	f000 ff5b 	bl	80167fc <__mcmp>
 8015946:	463a      	mov	r2, r7
 8015948:	9005      	str	r0, [sp, #20]
 801594a:	4631      	mov	r1, r6
 801594c:	4620      	mov	r0, r4
 801594e:	f000 ff71 	bl	8016834 <__mdiff>
 8015952:	68c2      	ldr	r2, [r0, #12]
 8015954:	4605      	mov	r5, r0
 8015956:	bb02      	cbnz	r2, 801599a <_dtoa_r+0xa7a>
 8015958:	4601      	mov	r1, r0
 801595a:	4650      	mov	r0, sl
 801595c:	f000 ff4e 	bl	80167fc <__mcmp>
 8015960:	4602      	mov	r2, r0
 8015962:	4629      	mov	r1, r5
 8015964:	4620      	mov	r0, r4
 8015966:	9209      	str	r2, [sp, #36]	; 0x24
 8015968:	f000 fcc2 	bl	80162f0 <_Bfree>
 801596c:	9b07      	ldr	r3, [sp, #28]
 801596e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015970:	9d04      	ldr	r5, [sp, #16]
 8015972:	ea43 0102 	orr.w	r1, r3, r2
 8015976:	9b06      	ldr	r3, [sp, #24]
 8015978:	4319      	orrs	r1, r3
 801597a:	d110      	bne.n	801599e <_dtoa_r+0xa7e>
 801597c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015980:	d029      	beq.n	80159d6 <_dtoa_r+0xab6>
 8015982:	9b05      	ldr	r3, [sp, #20]
 8015984:	2b00      	cmp	r3, #0
 8015986:	dd02      	ble.n	801598e <_dtoa_r+0xa6e>
 8015988:	9b02      	ldr	r3, [sp, #8]
 801598a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801598e:	9b01      	ldr	r3, [sp, #4]
 8015990:	f883 9000 	strb.w	r9, [r3]
 8015994:	e774      	b.n	8015880 <_dtoa_r+0x960>
 8015996:	4638      	mov	r0, r7
 8015998:	e7ba      	b.n	8015910 <_dtoa_r+0x9f0>
 801599a:	2201      	movs	r2, #1
 801599c:	e7e1      	b.n	8015962 <_dtoa_r+0xa42>
 801599e:	9b05      	ldr	r3, [sp, #20]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	db04      	blt.n	80159ae <_dtoa_r+0xa8e>
 80159a4:	9907      	ldr	r1, [sp, #28]
 80159a6:	430b      	orrs	r3, r1
 80159a8:	9906      	ldr	r1, [sp, #24]
 80159aa:	430b      	orrs	r3, r1
 80159ac:	d120      	bne.n	80159f0 <_dtoa_r+0xad0>
 80159ae:	2a00      	cmp	r2, #0
 80159b0:	dded      	ble.n	801598e <_dtoa_r+0xa6e>
 80159b2:	4651      	mov	r1, sl
 80159b4:	2201      	movs	r2, #1
 80159b6:	4620      	mov	r0, r4
 80159b8:	f000 feb4 	bl	8016724 <__lshift>
 80159bc:	4631      	mov	r1, r6
 80159be:	4682      	mov	sl, r0
 80159c0:	f000 ff1c 	bl	80167fc <__mcmp>
 80159c4:	2800      	cmp	r0, #0
 80159c6:	dc03      	bgt.n	80159d0 <_dtoa_r+0xab0>
 80159c8:	d1e1      	bne.n	801598e <_dtoa_r+0xa6e>
 80159ca:	f019 0f01 	tst.w	r9, #1
 80159ce:	d0de      	beq.n	801598e <_dtoa_r+0xa6e>
 80159d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80159d4:	d1d8      	bne.n	8015988 <_dtoa_r+0xa68>
 80159d6:	9a01      	ldr	r2, [sp, #4]
 80159d8:	2339      	movs	r3, #57	; 0x39
 80159da:	7013      	strb	r3, [r2, #0]
 80159dc:	462b      	mov	r3, r5
 80159de:	461d      	mov	r5, r3
 80159e0:	3b01      	subs	r3, #1
 80159e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80159e6:	2a39      	cmp	r2, #57	; 0x39
 80159e8:	d06c      	beq.n	8015ac4 <_dtoa_r+0xba4>
 80159ea:	3201      	adds	r2, #1
 80159ec:	701a      	strb	r2, [r3, #0]
 80159ee:	e747      	b.n	8015880 <_dtoa_r+0x960>
 80159f0:	2a00      	cmp	r2, #0
 80159f2:	dd07      	ble.n	8015a04 <_dtoa_r+0xae4>
 80159f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80159f8:	d0ed      	beq.n	80159d6 <_dtoa_r+0xab6>
 80159fa:	9a01      	ldr	r2, [sp, #4]
 80159fc:	f109 0301 	add.w	r3, r9, #1
 8015a00:	7013      	strb	r3, [r2, #0]
 8015a02:	e73d      	b.n	8015880 <_dtoa_r+0x960>
 8015a04:	9b04      	ldr	r3, [sp, #16]
 8015a06:	9a08      	ldr	r2, [sp, #32]
 8015a08:	f803 9c01 	strb.w	r9, [r3, #-1]
 8015a0c:	4293      	cmp	r3, r2
 8015a0e:	d043      	beq.n	8015a98 <_dtoa_r+0xb78>
 8015a10:	4651      	mov	r1, sl
 8015a12:	2300      	movs	r3, #0
 8015a14:	220a      	movs	r2, #10
 8015a16:	4620      	mov	r0, r4
 8015a18:	f000 fc8c 	bl	8016334 <__multadd>
 8015a1c:	45b8      	cmp	r8, r7
 8015a1e:	4682      	mov	sl, r0
 8015a20:	f04f 0300 	mov.w	r3, #0
 8015a24:	f04f 020a 	mov.w	r2, #10
 8015a28:	4641      	mov	r1, r8
 8015a2a:	4620      	mov	r0, r4
 8015a2c:	d107      	bne.n	8015a3e <_dtoa_r+0xb1e>
 8015a2e:	f000 fc81 	bl	8016334 <__multadd>
 8015a32:	4680      	mov	r8, r0
 8015a34:	4607      	mov	r7, r0
 8015a36:	9b04      	ldr	r3, [sp, #16]
 8015a38:	3301      	adds	r3, #1
 8015a3a:	9304      	str	r3, [sp, #16]
 8015a3c:	e775      	b.n	801592a <_dtoa_r+0xa0a>
 8015a3e:	f000 fc79 	bl	8016334 <__multadd>
 8015a42:	4639      	mov	r1, r7
 8015a44:	4680      	mov	r8, r0
 8015a46:	2300      	movs	r3, #0
 8015a48:	220a      	movs	r2, #10
 8015a4a:	4620      	mov	r0, r4
 8015a4c:	f000 fc72 	bl	8016334 <__multadd>
 8015a50:	4607      	mov	r7, r0
 8015a52:	e7f0      	b.n	8015a36 <_dtoa_r+0xb16>
 8015a54:	9b04      	ldr	r3, [sp, #16]
 8015a56:	9301      	str	r3, [sp, #4]
 8015a58:	9d00      	ldr	r5, [sp, #0]
 8015a5a:	4631      	mov	r1, r6
 8015a5c:	4650      	mov	r0, sl
 8015a5e:	f7ff f9d7 	bl	8014e10 <quorem>
 8015a62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015a66:	9b00      	ldr	r3, [sp, #0]
 8015a68:	f805 9b01 	strb.w	r9, [r5], #1
 8015a6c:	1aea      	subs	r2, r5, r3
 8015a6e:	9b01      	ldr	r3, [sp, #4]
 8015a70:	4293      	cmp	r3, r2
 8015a72:	dd07      	ble.n	8015a84 <_dtoa_r+0xb64>
 8015a74:	4651      	mov	r1, sl
 8015a76:	2300      	movs	r3, #0
 8015a78:	220a      	movs	r2, #10
 8015a7a:	4620      	mov	r0, r4
 8015a7c:	f000 fc5a 	bl	8016334 <__multadd>
 8015a80:	4682      	mov	sl, r0
 8015a82:	e7ea      	b.n	8015a5a <_dtoa_r+0xb3a>
 8015a84:	9b01      	ldr	r3, [sp, #4]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	bfc8      	it	gt
 8015a8a:	461d      	movgt	r5, r3
 8015a8c:	9b00      	ldr	r3, [sp, #0]
 8015a8e:	bfd8      	it	le
 8015a90:	2501      	movle	r5, #1
 8015a92:	441d      	add	r5, r3
 8015a94:	f04f 0800 	mov.w	r8, #0
 8015a98:	4651      	mov	r1, sl
 8015a9a:	2201      	movs	r2, #1
 8015a9c:	4620      	mov	r0, r4
 8015a9e:	f000 fe41 	bl	8016724 <__lshift>
 8015aa2:	4631      	mov	r1, r6
 8015aa4:	4682      	mov	sl, r0
 8015aa6:	f000 fea9 	bl	80167fc <__mcmp>
 8015aaa:	2800      	cmp	r0, #0
 8015aac:	dc96      	bgt.n	80159dc <_dtoa_r+0xabc>
 8015aae:	d102      	bne.n	8015ab6 <_dtoa_r+0xb96>
 8015ab0:	f019 0f01 	tst.w	r9, #1
 8015ab4:	d192      	bne.n	80159dc <_dtoa_r+0xabc>
 8015ab6:	462b      	mov	r3, r5
 8015ab8:	461d      	mov	r5, r3
 8015aba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015abe:	2a30      	cmp	r2, #48	; 0x30
 8015ac0:	d0fa      	beq.n	8015ab8 <_dtoa_r+0xb98>
 8015ac2:	e6dd      	b.n	8015880 <_dtoa_r+0x960>
 8015ac4:	9a00      	ldr	r2, [sp, #0]
 8015ac6:	429a      	cmp	r2, r3
 8015ac8:	d189      	bne.n	80159de <_dtoa_r+0xabe>
 8015aca:	f10b 0b01 	add.w	fp, fp, #1
 8015ace:	2331      	movs	r3, #49	; 0x31
 8015ad0:	e796      	b.n	8015a00 <_dtoa_r+0xae0>
 8015ad2:	4b0a      	ldr	r3, [pc, #40]	; (8015afc <_dtoa_r+0xbdc>)
 8015ad4:	f7ff ba99 	b.w	801500a <_dtoa_r+0xea>
 8015ad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	f47f aa6d 	bne.w	8014fba <_dtoa_r+0x9a>
 8015ae0:	4b07      	ldr	r3, [pc, #28]	; (8015b00 <_dtoa_r+0xbe0>)
 8015ae2:	f7ff ba92 	b.w	801500a <_dtoa_r+0xea>
 8015ae6:	9b01      	ldr	r3, [sp, #4]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	dcb5      	bgt.n	8015a58 <_dtoa_r+0xb38>
 8015aec:	9b07      	ldr	r3, [sp, #28]
 8015aee:	2b02      	cmp	r3, #2
 8015af0:	f73f aeb1 	bgt.w	8015856 <_dtoa_r+0x936>
 8015af4:	e7b0      	b.n	8015a58 <_dtoa_r+0xb38>
 8015af6:	bf00      	nop
 8015af8:	0801aac0 	.word	0x0801aac0
 8015afc:	0801a999 	.word	0x0801a999
 8015b00:	0801aa5b 	.word	0x0801aa5b

08015b04 <_free_r>:
 8015b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015b06:	2900      	cmp	r1, #0
 8015b08:	d044      	beq.n	8015b94 <_free_r+0x90>
 8015b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b0e:	9001      	str	r0, [sp, #4]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	f1a1 0404 	sub.w	r4, r1, #4
 8015b16:	bfb8      	it	lt
 8015b18:	18e4      	addlt	r4, r4, r3
 8015b1a:	f7fd fa51 	bl	8012fc0 <__malloc_lock>
 8015b1e:	4a1e      	ldr	r2, [pc, #120]	; (8015b98 <_free_r+0x94>)
 8015b20:	9801      	ldr	r0, [sp, #4]
 8015b22:	6813      	ldr	r3, [r2, #0]
 8015b24:	b933      	cbnz	r3, 8015b34 <_free_r+0x30>
 8015b26:	6063      	str	r3, [r4, #4]
 8015b28:	6014      	str	r4, [r2, #0]
 8015b2a:	b003      	add	sp, #12
 8015b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015b30:	f7fd ba4c 	b.w	8012fcc <__malloc_unlock>
 8015b34:	42a3      	cmp	r3, r4
 8015b36:	d908      	bls.n	8015b4a <_free_r+0x46>
 8015b38:	6825      	ldr	r5, [r4, #0]
 8015b3a:	1961      	adds	r1, r4, r5
 8015b3c:	428b      	cmp	r3, r1
 8015b3e:	bf01      	itttt	eq
 8015b40:	6819      	ldreq	r1, [r3, #0]
 8015b42:	685b      	ldreq	r3, [r3, #4]
 8015b44:	1949      	addeq	r1, r1, r5
 8015b46:	6021      	streq	r1, [r4, #0]
 8015b48:	e7ed      	b.n	8015b26 <_free_r+0x22>
 8015b4a:	461a      	mov	r2, r3
 8015b4c:	685b      	ldr	r3, [r3, #4]
 8015b4e:	b10b      	cbz	r3, 8015b54 <_free_r+0x50>
 8015b50:	42a3      	cmp	r3, r4
 8015b52:	d9fa      	bls.n	8015b4a <_free_r+0x46>
 8015b54:	6811      	ldr	r1, [r2, #0]
 8015b56:	1855      	adds	r5, r2, r1
 8015b58:	42a5      	cmp	r5, r4
 8015b5a:	d10b      	bne.n	8015b74 <_free_r+0x70>
 8015b5c:	6824      	ldr	r4, [r4, #0]
 8015b5e:	4421      	add	r1, r4
 8015b60:	1854      	adds	r4, r2, r1
 8015b62:	42a3      	cmp	r3, r4
 8015b64:	6011      	str	r1, [r2, #0]
 8015b66:	d1e0      	bne.n	8015b2a <_free_r+0x26>
 8015b68:	681c      	ldr	r4, [r3, #0]
 8015b6a:	685b      	ldr	r3, [r3, #4]
 8015b6c:	6053      	str	r3, [r2, #4]
 8015b6e:	440c      	add	r4, r1
 8015b70:	6014      	str	r4, [r2, #0]
 8015b72:	e7da      	b.n	8015b2a <_free_r+0x26>
 8015b74:	d902      	bls.n	8015b7c <_free_r+0x78>
 8015b76:	230c      	movs	r3, #12
 8015b78:	6003      	str	r3, [r0, #0]
 8015b7a:	e7d6      	b.n	8015b2a <_free_r+0x26>
 8015b7c:	6825      	ldr	r5, [r4, #0]
 8015b7e:	1961      	adds	r1, r4, r5
 8015b80:	428b      	cmp	r3, r1
 8015b82:	bf04      	itt	eq
 8015b84:	6819      	ldreq	r1, [r3, #0]
 8015b86:	685b      	ldreq	r3, [r3, #4]
 8015b88:	6063      	str	r3, [r4, #4]
 8015b8a:	bf04      	itt	eq
 8015b8c:	1949      	addeq	r1, r1, r5
 8015b8e:	6021      	streq	r1, [r4, #0]
 8015b90:	6054      	str	r4, [r2, #4]
 8015b92:	e7ca      	b.n	8015b2a <_free_r+0x26>
 8015b94:	b003      	add	sp, #12
 8015b96:	bd30      	pop	{r4, r5, pc}
 8015b98:	200009f8 	.word	0x200009f8

08015b9c <rshift>:
 8015b9c:	6903      	ldr	r3, [r0, #16]
 8015b9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015ba2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ba6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015baa:	f100 0414 	add.w	r4, r0, #20
 8015bae:	dd45      	ble.n	8015c3c <rshift+0xa0>
 8015bb0:	f011 011f 	ands.w	r1, r1, #31
 8015bb4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015bb8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015bbc:	d10c      	bne.n	8015bd8 <rshift+0x3c>
 8015bbe:	f100 0710 	add.w	r7, r0, #16
 8015bc2:	4629      	mov	r1, r5
 8015bc4:	42b1      	cmp	r1, r6
 8015bc6:	d334      	bcc.n	8015c32 <rshift+0x96>
 8015bc8:	1a9b      	subs	r3, r3, r2
 8015bca:	009b      	lsls	r3, r3, #2
 8015bcc:	1eea      	subs	r2, r5, #3
 8015bce:	4296      	cmp	r6, r2
 8015bd0:	bf38      	it	cc
 8015bd2:	2300      	movcc	r3, #0
 8015bd4:	4423      	add	r3, r4
 8015bd6:	e015      	b.n	8015c04 <rshift+0x68>
 8015bd8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015bdc:	f1c1 0820 	rsb	r8, r1, #32
 8015be0:	40cf      	lsrs	r7, r1
 8015be2:	f105 0e04 	add.w	lr, r5, #4
 8015be6:	46a1      	mov	r9, r4
 8015be8:	4576      	cmp	r6, lr
 8015bea:	46f4      	mov	ip, lr
 8015bec:	d815      	bhi.n	8015c1a <rshift+0x7e>
 8015bee:	1a9a      	subs	r2, r3, r2
 8015bf0:	0092      	lsls	r2, r2, #2
 8015bf2:	3a04      	subs	r2, #4
 8015bf4:	3501      	adds	r5, #1
 8015bf6:	42ae      	cmp	r6, r5
 8015bf8:	bf38      	it	cc
 8015bfa:	2200      	movcc	r2, #0
 8015bfc:	18a3      	adds	r3, r4, r2
 8015bfe:	50a7      	str	r7, [r4, r2]
 8015c00:	b107      	cbz	r7, 8015c04 <rshift+0x68>
 8015c02:	3304      	adds	r3, #4
 8015c04:	1b1a      	subs	r2, r3, r4
 8015c06:	42a3      	cmp	r3, r4
 8015c08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015c0c:	bf08      	it	eq
 8015c0e:	2300      	moveq	r3, #0
 8015c10:	6102      	str	r2, [r0, #16]
 8015c12:	bf08      	it	eq
 8015c14:	6143      	streq	r3, [r0, #20]
 8015c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c1a:	f8dc c000 	ldr.w	ip, [ip]
 8015c1e:	fa0c fc08 	lsl.w	ip, ip, r8
 8015c22:	ea4c 0707 	orr.w	r7, ip, r7
 8015c26:	f849 7b04 	str.w	r7, [r9], #4
 8015c2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015c2e:	40cf      	lsrs	r7, r1
 8015c30:	e7da      	b.n	8015be8 <rshift+0x4c>
 8015c32:	f851 cb04 	ldr.w	ip, [r1], #4
 8015c36:	f847 cf04 	str.w	ip, [r7, #4]!
 8015c3a:	e7c3      	b.n	8015bc4 <rshift+0x28>
 8015c3c:	4623      	mov	r3, r4
 8015c3e:	e7e1      	b.n	8015c04 <rshift+0x68>

08015c40 <__hexdig_fun>:
 8015c40:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015c44:	2b09      	cmp	r3, #9
 8015c46:	d802      	bhi.n	8015c4e <__hexdig_fun+0xe>
 8015c48:	3820      	subs	r0, #32
 8015c4a:	b2c0      	uxtb	r0, r0
 8015c4c:	4770      	bx	lr
 8015c4e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015c52:	2b05      	cmp	r3, #5
 8015c54:	d801      	bhi.n	8015c5a <__hexdig_fun+0x1a>
 8015c56:	3847      	subs	r0, #71	; 0x47
 8015c58:	e7f7      	b.n	8015c4a <__hexdig_fun+0xa>
 8015c5a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015c5e:	2b05      	cmp	r3, #5
 8015c60:	d801      	bhi.n	8015c66 <__hexdig_fun+0x26>
 8015c62:	3827      	subs	r0, #39	; 0x27
 8015c64:	e7f1      	b.n	8015c4a <__hexdig_fun+0xa>
 8015c66:	2000      	movs	r0, #0
 8015c68:	4770      	bx	lr
	...

08015c6c <__gethex>:
 8015c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c70:	4617      	mov	r7, r2
 8015c72:	680a      	ldr	r2, [r1, #0]
 8015c74:	b085      	sub	sp, #20
 8015c76:	f102 0b02 	add.w	fp, r2, #2
 8015c7a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015c7e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015c82:	4681      	mov	r9, r0
 8015c84:	468a      	mov	sl, r1
 8015c86:	9302      	str	r3, [sp, #8]
 8015c88:	32fe      	adds	r2, #254	; 0xfe
 8015c8a:	eb02 030b 	add.w	r3, r2, fp
 8015c8e:	46d8      	mov	r8, fp
 8015c90:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8015c94:	9301      	str	r3, [sp, #4]
 8015c96:	2830      	cmp	r0, #48	; 0x30
 8015c98:	d0f7      	beq.n	8015c8a <__gethex+0x1e>
 8015c9a:	f7ff ffd1 	bl	8015c40 <__hexdig_fun>
 8015c9e:	4604      	mov	r4, r0
 8015ca0:	2800      	cmp	r0, #0
 8015ca2:	d138      	bne.n	8015d16 <__gethex+0xaa>
 8015ca4:	49a7      	ldr	r1, [pc, #668]	; (8015f44 <__gethex+0x2d8>)
 8015ca6:	2201      	movs	r2, #1
 8015ca8:	4640      	mov	r0, r8
 8015caa:	f7fe ff6c 	bl	8014b86 <strncmp>
 8015cae:	4606      	mov	r6, r0
 8015cb0:	2800      	cmp	r0, #0
 8015cb2:	d169      	bne.n	8015d88 <__gethex+0x11c>
 8015cb4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8015cb8:	465d      	mov	r5, fp
 8015cba:	f7ff ffc1 	bl	8015c40 <__hexdig_fun>
 8015cbe:	2800      	cmp	r0, #0
 8015cc0:	d064      	beq.n	8015d8c <__gethex+0x120>
 8015cc2:	465a      	mov	r2, fp
 8015cc4:	7810      	ldrb	r0, [r2, #0]
 8015cc6:	2830      	cmp	r0, #48	; 0x30
 8015cc8:	4690      	mov	r8, r2
 8015cca:	f102 0201 	add.w	r2, r2, #1
 8015cce:	d0f9      	beq.n	8015cc4 <__gethex+0x58>
 8015cd0:	f7ff ffb6 	bl	8015c40 <__hexdig_fun>
 8015cd4:	2301      	movs	r3, #1
 8015cd6:	fab0 f480 	clz	r4, r0
 8015cda:	0964      	lsrs	r4, r4, #5
 8015cdc:	465e      	mov	r6, fp
 8015cde:	9301      	str	r3, [sp, #4]
 8015ce0:	4642      	mov	r2, r8
 8015ce2:	4615      	mov	r5, r2
 8015ce4:	3201      	adds	r2, #1
 8015ce6:	7828      	ldrb	r0, [r5, #0]
 8015ce8:	f7ff ffaa 	bl	8015c40 <__hexdig_fun>
 8015cec:	2800      	cmp	r0, #0
 8015cee:	d1f8      	bne.n	8015ce2 <__gethex+0x76>
 8015cf0:	4994      	ldr	r1, [pc, #592]	; (8015f44 <__gethex+0x2d8>)
 8015cf2:	2201      	movs	r2, #1
 8015cf4:	4628      	mov	r0, r5
 8015cf6:	f7fe ff46 	bl	8014b86 <strncmp>
 8015cfa:	b978      	cbnz	r0, 8015d1c <__gethex+0xb0>
 8015cfc:	b946      	cbnz	r6, 8015d10 <__gethex+0xa4>
 8015cfe:	1c6e      	adds	r6, r5, #1
 8015d00:	4632      	mov	r2, r6
 8015d02:	4615      	mov	r5, r2
 8015d04:	3201      	adds	r2, #1
 8015d06:	7828      	ldrb	r0, [r5, #0]
 8015d08:	f7ff ff9a 	bl	8015c40 <__hexdig_fun>
 8015d0c:	2800      	cmp	r0, #0
 8015d0e:	d1f8      	bne.n	8015d02 <__gethex+0x96>
 8015d10:	1b73      	subs	r3, r6, r5
 8015d12:	009e      	lsls	r6, r3, #2
 8015d14:	e004      	b.n	8015d20 <__gethex+0xb4>
 8015d16:	2400      	movs	r4, #0
 8015d18:	4626      	mov	r6, r4
 8015d1a:	e7e1      	b.n	8015ce0 <__gethex+0x74>
 8015d1c:	2e00      	cmp	r6, #0
 8015d1e:	d1f7      	bne.n	8015d10 <__gethex+0xa4>
 8015d20:	782b      	ldrb	r3, [r5, #0]
 8015d22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015d26:	2b50      	cmp	r3, #80	; 0x50
 8015d28:	d13d      	bne.n	8015da6 <__gethex+0x13a>
 8015d2a:	786b      	ldrb	r3, [r5, #1]
 8015d2c:	2b2b      	cmp	r3, #43	; 0x2b
 8015d2e:	d02f      	beq.n	8015d90 <__gethex+0x124>
 8015d30:	2b2d      	cmp	r3, #45	; 0x2d
 8015d32:	d031      	beq.n	8015d98 <__gethex+0x12c>
 8015d34:	1c69      	adds	r1, r5, #1
 8015d36:	f04f 0b00 	mov.w	fp, #0
 8015d3a:	7808      	ldrb	r0, [r1, #0]
 8015d3c:	f7ff ff80 	bl	8015c40 <__hexdig_fun>
 8015d40:	1e42      	subs	r2, r0, #1
 8015d42:	b2d2      	uxtb	r2, r2
 8015d44:	2a18      	cmp	r2, #24
 8015d46:	d82e      	bhi.n	8015da6 <__gethex+0x13a>
 8015d48:	f1a0 0210 	sub.w	r2, r0, #16
 8015d4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015d50:	f7ff ff76 	bl	8015c40 <__hexdig_fun>
 8015d54:	f100 3cff 	add.w	ip, r0, #4294967295
 8015d58:	fa5f fc8c 	uxtb.w	ip, ip
 8015d5c:	f1bc 0f18 	cmp.w	ip, #24
 8015d60:	d91d      	bls.n	8015d9e <__gethex+0x132>
 8015d62:	f1bb 0f00 	cmp.w	fp, #0
 8015d66:	d000      	beq.n	8015d6a <__gethex+0xfe>
 8015d68:	4252      	negs	r2, r2
 8015d6a:	4416      	add	r6, r2
 8015d6c:	f8ca 1000 	str.w	r1, [sl]
 8015d70:	b1dc      	cbz	r4, 8015daa <__gethex+0x13e>
 8015d72:	9b01      	ldr	r3, [sp, #4]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	bf14      	ite	ne
 8015d78:	f04f 0800 	movne.w	r8, #0
 8015d7c:	f04f 0806 	moveq.w	r8, #6
 8015d80:	4640      	mov	r0, r8
 8015d82:	b005      	add	sp, #20
 8015d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d88:	4645      	mov	r5, r8
 8015d8a:	4626      	mov	r6, r4
 8015d8c:	2401      	movs	r4, #1
 8015d8e:	e7c7      	b.n	8015d20 <__gethex+0xb4>
 8015d90:	f04f 0b00 	mov.w	fp, #0
 8015d94:	1ca9      	adds	r1, r5, #2
 8015d96:	e7d0      	b.n	8015d3a <__gethex+0xce>
 8015d98:	f04f 0b01 	mov.w	fp, #1
 8015d9c:	e7fa      	b.n	8015d94 <__gethex+0x128>
 8015d9e:	230a      	movs	r3, #10
 8015da0:	fb03 0002 	mla	r0, r3, r2, r0
 8015da4:	e7d0      	b.n	8015d48 <__gethex+0xdc>
 8015da6:	4629      	mov	r1, r5
 8015da8:	e7e0      	b.n	8015d6c <__gethex+0x100>
 8015daa:	eba5 0308 	sub.w	r3, r5, r8
 8015dae:	3b01      	subs	r3, #1
 8015db0:	4621      	mov	r1, r4
 8015db2:	2b07      	cmp	r3, #7
 8015db4:	dc0a      	bgt.n	8015dcc <__gethex+0x160>
 8015db6:	4648      	mov	r0, r9
 8015db8:	f000 fa5a 	bl	8016270 <_Balloc>
 8015dbc:	4604      	mov	r4, r0
 8015dbe:	b940      	cbnz	r0, 8015dd2 <__gethex+0x166>
 8015dc0:	4b61      	ldr	r3, [pc, #388]	; (8015f48 <__gethex+0x2dc>)
 8015dc2:	4602      	mov	r2, r0
 8015dc4:	21e4      	movs	r1, #228	; 0xe4
 8015dc6:	4861      	ldr	r0, [pc, #388]	; (8015f4c <__gethex+0x2e0>)
 8015dc8:	f7ff f804 	bl	8014dd4 <__assert_func>
 8015dcc:	3101      	adds	r1, #1
 8015dce:	105b      	asrs	r3, r3, #1
 8015dd0:	e7ef      	b.n	8015db2 <__gethex+0x146>
 8015dd2:	f100 0a14 	add.w	sl, r0, #20
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	495a      	ldr	r1, [pc, #360]	; (8015f44 <__gethex+0x2d8>)
 8015dda:	f8cd a004 	str.w	sl, [sp, #4]
 8015dde:	469b      	mov	fp, r3
 8015de0:	45a8      	cmp	r8, r5
 8015de2:	d342      	bcc.n	8015e6a <__gethex+0x1fe>
 8015de4:	9801      	ldr	r0, [sp, #4]
 8015de6:	f840 bb04 	str.w	fp, [r0], #4
 8015dea:	eba0 000a 	sub.w	r0, r0, sl
 8015dee:	1080      	asrs	r0, r0, #2
 8015df0:	6120      	str	r0, [r4, #16]
 8015df2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8015df6:	4658      	mov	r0, fp
 8015df8:	f000 fb2c 	bl	8016454 <__hi0bits>
 8015dfc:	683d      	ldr	r5, [r7, #0]
 8015dfe:	eba8 0000 	sub.w	r0, r8, r0
 8015e02:	42a8      	cmp	r0, r5
 8015e04:	dd59      	ble.n	8015eba <__gethex+0x24e>
 8015e06:	eba0 0805 	sub.w	r8, r0, r5
 8015e0a:	4641      	mov	r1, r8
 8015e0c:	4620      	mov	r0, r4
 8015e0e:	f000 febb 	bl	8016b88 <__any_on>
 8015e12:	4683      	mov	fp, r0
 8015e14:	b1b8      	cbz	r0, 8015e46 <__gethex+0x1da>
 8015e16:	f108 33ff 	add.w	r3, r8, #4294967295
 8015e1a:	1159      	asrs	r1, r3, #5
 8015e1c:	f003 021f 	and.w	r2, r3, #31
 8015e20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015e24:	f04f 0b01 	mov.w	fp, #1
 8015e28:	fa0b f202 	lsl.w	r2, fp, r2
 8015e2c:	420a      	tst	r2, r1
 8015e2e:	d00a      	beq.n	8015e46 <__gethex+0x1da>
 8015e30:	455b      	cmp	r3, fp
 8015e32:	dd06      	ble.n	8015e42 <__gethex+0x1d6>
 8015e34:	f1a8 0102 	sub.w	r1, r8, #2
 8015e38:	4620      	mov	r0, r4
 8015e3a:	f000 fea5 	bl	8016b88 <__any_on>
 8015e3e:	2800      	cmp	r0, #0
 8015e40:	d138      	bne.n	8015eb4 <__gethex+0x248>
 8015e42:	f04f 0b02 	mov.w	fp, #2
 8015e46:	4641      	mov	r1, r8
 8015e48:	4620      	mov	r0, r4
 8015e4a:	f7ff fea7 	bl	8015b9c <rshift>
 8015e4e:	4446      	add	r6, r8
 8015e50:	68bb      	ldr	r3, [r7, #8]
 8015e52:	42b3      	cmp	r3, r6
 8015e54:	da41      	bge.n	8015eda <__gethex+0x26e>
 8015e56:	4621      	mov	r1, r4
 8015e58:	4648      	mov	r0, r9
 8015e5a:	f000 fa49 	bl	80162f0 <_Bfree>
 8015e5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e60:	2300      	movs	r3, #0
 8015e62:	6013      	str	r3, [r2, #0]
 8015e64:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8015e68:	e78a      	b.n	8015d80 <__gethex+0x114>
 8015e6a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8015e6e:	2a2e      	cmp	r2, #46	; 0x2e
 8015e70:	d014      	beq.n	8015e9c <__gethex+0x230>
 8015e72:	2b20      	cmp	r3, #32
 8015e74:	d106      	bne.n	8015e84 <__gethex+0x218>
 8015e76:	9b01      	ldr	r3, [sp, #4]
 8015e78:	f843 bb04 	str.w	fp, [r3], #4
 8015e7c:	f04f 0b00 	mov.w	fp, #0
 8015e80:	9301      	str	r3, [sp, #4]
 8015e82:	465b      	mov	r3, fp
 8015e84:	7828      	ldrb	r0, [r5, #0]
 8015e86:	9303      	str	r3, [sp, #12]
 8015e88:	f7ff feda 	bl	8015c40 <__hexdig_fun>
 8015e8c:	9b03      	ldr	r3, [sp, #12]
 8015e8e:	f000 000f 	and.w	r0, r0, #15
 8015e92:	4098      	lsls	r0, r3
 8015e94:	ea4b 0b00 	orr.w	fp, fp, r0
 8015e98:	3304      	adds	r3, #4
 8015e9a:	e7a1      	b.n	8015de0 <__gethex+0x174>
 8015e9c:	45a8      	cmp	r8, r5
 8015e9e:	d8e8      	bhi.n	8015e72 <__gethex+0x206>
 8015ea0:	2201      	movs	r2, #1
 8015ea2:	4628      	mov	r0, r5
 8015ea4:	9303      	str	r3, [sp, #12]
 8015ea6:	f7fe fe6e 	bl	8014b86 <strncmp>
 8015eaa:	4926      	ldr	r1, [pc, #152]	; (8015f44 <__gethex+0x2d8>)
 8015eac:	9b03      	ldr	r3, [sp, #12]
 8015eae:	2800      	cmp	r0, #0
 8015eb0:	d1df      	bne.n	8015e72 <__gethex+0x206>
 8015eb2:	e795      	b.n	8015de0 <__gethex+0x174>
 8015eb4:	f04f 0b03 	mov.w	fp, #3
 8015eb8:	e7c5      	b.n	8015e46 <__gethex+0x1da>
 8015eba:	da0b      	bge.n	8015ed4 <__gethex+0x268>
 8015ebc:	eba5 0800 	sub.w	r8, r5, r0
 8015ec0:	4621      	mov	r1, r4
 8015ec2:	4642      	mov	r2, r8
 8015ec4:	4648      	mov	r0, r9
 8015ec6:	f000 fc2d 	bl	8016724 <__lshift>
 8015eca:	eba6 0608 	sub.w	r6, r6, r8
 8015ece:	4604      	mov	r4, r0
 8015ed0:	f100 0a14 	add.w	sl, r0, #20
 8015ed4:	f04f 0b00 	mov.w	fp, #0
 8015ed8:	e7ba      	b.n	8015e50 <__gethex+0x1e4>
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	42b3      	cmp	r3, r6
 8015ede:	dd73      	ble.n	8015fc8 <__gethex+0x35c>
 8015ee0:	1b9e      	subs	r6, r3, r6
 8015ee2:	42b5      	cmp	r5, r6
 8015ee4:	dc34      	bgt.n	8015f50 <__gethex+0x2e4>
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	2b02      	cmp	r3, #2
 8015eea:	d023      	beq.n	8015f34 <__gethex+0x2c8>
 8015eec:	2b03      	cmp	r3, #3
 8015eee:	d025      	beq.n	8015f3c <__gethex+0x2d0>
 8015ef0:	2b01      	cmp	r3, #1
 8015ef2:	d115      	bne.n	8015f20 <__gethex+0x2b4>
 8015ef4:	42b5      	cmp	r5, r6
 8015ef6:	d113      	bne.n	8015f20 <__gethex+0x2b4>
 8015ef8:	2d01      	cmp	r5, #1
 8015efa:	d10b      	bne.n	8015f14 <__gethex+0x2a8>
 8015efc:	9a02      	ldr	r2, [sp, #8]
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	6013      	str	r3, [r2, #0]
 8015f02:	2301      	movs	r3, #1
 8015f04:	6123      	str	r3, [r4, #16]
 8015f06:	f8ca 3000 	str.w	r3, [sl]
 8015f0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f0c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8015f10:	601c      	str	r4, [r3, #0]
 8015f12:	e735      	b.n	8015d80 <__gethex+0x114>
 8015f14:	1e69      	subs	r1, r5, #1
 8015f16:	4620      	mov	r0, r4
 8015f18:	f000 fe36 	bl	8016b88 <__any_on>
 8015f1c:	2800      	cmp	r0, #0
 8015f1e:	d1ed      	bne.n	8015efc <__gethex+0x290>
 8015f20:	4621      	mov	r1, r4
 8015f22:	4648      	mov	r0, r9
 8015f24:	f000 f9e4 	bl	80162f0 <_Bfree>
 8015f28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	6013      	str	r3, [r2, #0]
 8015f2e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8015f32:	e725      	b.n	8015d80 <__gethex+0x114>
 8015f34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d1f2      	bne.n	8015f20 <__gethex+0x2b4>
 8015f3a:	e7df      	b.n	8015efc <__gethex+0x290>
 8015f3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d1dc      	bne.n	8015efc <__gethex+0x290>
 8015f42:	e7ed      	b.n	8015f20 <__gethex+0x2b4>
 8015f44:	0801a82f 	.word	0x0801a82f
 8015f48:	0801aac0 	.word	0x0801aac0
 8015f4c:	0801aad1 	.word	0x0801aad1
 8015f50:	f106 38ff 	add.w	r8, r6, #4294967295
 8015f54:	f1bb 0f00 	cmp.w	fp, #0
 8015f58:	d133      	bne.n	8015fc2 <__gethex+0x356>
 8015f5a:	f1b8 0f00 	cmp.w	r8, #0
 8015f5e:	d004      	beq.n	8015f6a <__gethex+0x2fe>
 8015f60:	4641      	mov	r1, r8
 8015f62:	4620      	mov	r0, r4
 8015f64:	f000 fe10 	bl	8016b88 <__any_on>
 8015f68:	4683      	mov	fp, r0
 8015f6a:	ea4f 1268 	mov.w	r2, r8, asr #5
 8015f6e:	2301      	movs	r3, #1
 8015f70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015f74:	f008 081f 	and.w	r8, r8, #31
 8015f78:	fa03 f308 	lsl.w	r3, r3, r8
 8015f7c:	4213      	tst	r3, r2
 8015f7e:	4631      	mov	r1, r6
 8015f80:	4620      	mov	r0, r4
 8015f82:	bf18      	it	ne
 8015f84:	f04b 0b02 	orrne.w	fp, fp, #2
 8015f88:	1bad      	subs	r5, r5, r6
 8015f8a:	f7ff fe07 	bl	8015b9c <rshift>
 8015f8e:	687e      	ldr	r6, [r7, #4]
 8015f90:	f04f 0802 	mov.w	r8, #2
 8015f94:	f1bb 0f00 	cmp.w	fp, #0
 8015f98:	d04a      	beq.n	8016030 <__gethex+0x3c4>
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	2b02      	cmp	r3, #2
 8015f9e:	d016      	beq.n	8015fce <__gethex+0x362>
 8015fa0:	2b03      	cmp	r3, #3
 8015fa2:	d018      	beq.n	8015fd6 <__gethex+0x36a>
 8015fa4:	2b01      	cmp	r3, #1
 8015fa6:	d109      	bne.n	8015fbc <__gethex+0x350>
 8015fa8:	f01b 0f02 	tst.w	fp, #2
 8015fac:	d006      	beq.n	8015fbc <__gethex+0x350>
 8015fae:	f8da 3000 	ldr.w	r3, [sl]
 8015fb2:	ea4b 0b03 	orr.w	fp, fp, r3
 8015fb6:	f01b 0f01 	tst.w	fp, #1
 8015fba:	d10f      	bne.n	8015fdc <__gethex+0x370>
 8015fbc:	f048 0810 	orr.w	r8, r8, #16
 8015fc0:	e036      	b.n	8016030 <__gethex+0x3c4>
 8015fc2:	f04f 0b01 	mov.w	fp, #1
 8015fc6:	e7d0      	b.n	8015f6a <__gethex+0x2fe>
 8015fc8:	f04f 0801 	mov.w	r8, #1
 8015fcc:	e7e2      	b.n	8015f94 <__gethex+0x328>
 8015fce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015fd0:	f1c3 0301 	rsb	r3, r3, #1
 8015fd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8015fd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d0ef      	beq.n	8015fbc <__gethex+0x350>
 8015fdc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015fe0:	f104 0214 	add.w	r2, r4, #20
 8015fe4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8015fe8:	9301      	str	r3, [sp, #4]
 8015fea:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8015fee:	2300      	movs	r3, #0
 8015ff0:	4694      	mov	ip, r2
 8015ff2:	f852 1b04 	ldr.w	r1, [r2], #4
 8015ff6:	f1b1 3fff 	cmp.w	r1, #4294967295
 8015ffa:	d01e      	beq.n	801603a <__gethex+0x3ce>
 8015ffc:	3101      	adds	r1, #1
 8015ffe:	f8cc 1000 	str.w	r1, [ip]
 8016002:	f1b8 0f02 	cmp.w	r8, #2
 8016006:	f104 0214 	add.w	r2, r4, #20
 801600a:	d13d      	bne.n	8016088 <__gethex+0x41c>
 801600c:	683b      	ldr	r3, [r7, #0]
 801600e:	3b01      	subs	r3, #1
 8016010:	42ab      	cmp	r3, r5
 8016012:	d10b      	bne.n	801602c <__gethex+0x3c0>
 8016014:	1169      	asrs	r1, r5, #5
 8016016:	2301      	movs	r3, #1
 8016018:	f005 051f 	and.w	r5, r5, #31
 801601c:	fa03 f505 	lsl.w	r5, r3, r5
 8016020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016024:	421d      	tst	r5, r3
 8016026:	bf18      	it	ne
 8016028:	f04f 0801 	movne.w	r8, #1
 801602c:	f048 0820 	orr.w	r8, r8, #32
 8016030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016032:	601c      	str	r4, [r3, #0]
 8016034:	9b02      	ldr	r3, [sp, #8]
 8016036:	601e      	str	r6, [r3, #0]
 8016038:	e6a2      	b.n	8015d80 <__gethex+0x114>
 801603a:	4290      	cmp	r0, r2
 801603c:	f842 3c04 	str.w	r3, [r2, #-4]
 8016040:	d8d6      	bhi.n	8015ff0 <__gethex+0x384>
 8016042:	68a2      	ldr	r2, [r4, #8]
 8016044:	4593      	cmp	fp, r2
 8016046:	db17      	blt.n	8016078 <__gethex+0x40c>
 8016048:	6861      	ldr	r1, [r4, #4]
 801604a:	4648      	mov	r0, r9
 801604c:	3101      	adds	r1, #1
 801604e:	f000 f90f 	bl	8016270 <_Balloc>
 8016052:	4682      	mov	sl, r0
 8016054:	b918      	cbnz	r0, 801605e <__gethex+0x3f2>
 8016056:	4b1b      	ldr	r3, [pc, #108]	; (80160c4 <__gethex+0x458>)
 8016058:	4602      	mov	r2, r0
 801605a:	2184      	movs	r1, #132	; 0x84
 801605c:	e6b3      	b.n	8015dc6 <__gethex+0x15a>
 801605e:	6922      	ldr	r2, [r4, #16]
 8016060:	3202      	adds	r2, #2
 8016062:	f104 010c 	add.w	r1, r4, #12
 8016066:	0092      	lsls	r2, r2, #2
 8016068:	300c      	adds	r0, #12
 801606a:	f7fe fe94 	bl	8014d96 <memcpy>
 801606e:	4621      	mov	r1, r4
 8016070:	4648      	mov	r0, r9
 8016072:	f000 f93d 	bl	80162f0 <_Bfree>
 8016076:	4654      	mov	r4, sl
 8016078:	6922      	ldr	r2, [r4, #16]
 801607a:	1c51      	adds	r1, r2, #1
 801607c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016080:	6121      	str	r1, [r4, #16]
 8016082:	2101      	movs	r1, #1
 8016084:	6151      	str	r1, [r2, #20]
 8016086:	e7bc      	b.n	8016002 <__gethex+0x396>
 8016088:	6921      	ldr	r1, [r4, #16]
 801608a:	4559      	cmp	r1, fp
 801608c:	dd0b      	ble.n	80160a6 <__gethex+0x43a>
 801608e:	2101      	movs	r1, #1
 8016090:	4620      	mov	r0, r4
 8016092:	f7ff fd83 	bl	8015b9c <rshift>
 8016096:	68bb      	ldr	r3, [r7, #8]
 8016098:	3601      	adds	r6, #1
 801609a:	42b3      	cmp	r3, r6
 801609c:	f6ff aedb 	blt.w	8015e56 <__gethex+0x1ea>
 80160a0:	f04f 0801 	mov.w	r8, #1
 80160a4:	e7c2      	b.n	801602c <__gethex+0x3c0>
 80160a6:	f015 051f 	ands.w	r5, r5, #31
 80160aa:	d0f9      	beq.n	80160a0 <__gethex+0x434>
 80160ac:	9b01      	ldr	r3, [sp, #4]
 80160ae:	441a      	add	r2, r3
 80160b0:	f1c5 0520 	rsb	r5, r5, #32
 80160b4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80160b8:	f000 f9cc 	bl	8016454 <__hi0bits>
 80160bc:	42a8      	cmp	r0, r5
 80160be:	dbe6      	blt.n	801608e <__gethex+0x422>
 80160c0:	e7ee      	b.n	80160a0 <__gethex+0x434>
 80160c2:	bf00      	nop
 80160c4:	0801aac0 	.word	0x0801aac0

080160c8 <L_shift>:
 80160c8:	f1c2 0208 	rsb	r2, r2, #8
 80160cc:	0092      	lsls	r2, r2, #2
 80160ce:	b570      	push	{r4, r5, r6, lr}
 80160d0:	f1c2 0620 	rsb	r6, r2, #32
 80160d4:	6843      	ldr	r3, [r0, #4]
 80160d6:	6804      	ldr	r4, [r0, #0]
 80160d8:	fa03 f506 	lsl.w	r5, r3, r6
 80160dc:	432c      	orrs	r4, r5
 80160de:	40d3      	lsrs	r3, r2
 80160e0:	6004      	str	r4, [r0, #0]
 80160e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80160e6:	4288      	cmp	r0, r1
 80160e8:	d3f4      	bcc.n	80160d4 <L_shift+0xc>
 80160ea:	bd70      	pop	{r4, r5, r6, pc}

080160ec <__match>:
 80160ec:	b530      	push	{r4, r5, lr}
 80160ee:	6803      	ldr	r3, [r0, #0]
 80160f0:	3301      	adds	r3, #1
 80160f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160f6:	b914      	cbnz	r4, 80160fe <__match+0x12>
 80160f8:	6003      	str	r3, [r0, #0]
 80160fa:	2001      	movs	r0, #1
 80160fc:	bd30      	pop	{r4, r5, pc}
 80160fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016102:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016106:	2d19      	cmp	r5, #25
 8016108:	bf98      	it	ls
 801610a:	3220      	addls	r2, #32
 801610c:	42a2      	cmp	r2, r4
 801610e:	d0f0      	beq.n	80160f2 <__match+0x6>
 8016110:	2000      	movs	r0, #0
 8016112:	e7f3      	b.n	80160fc <__match+0x10>

08016114 <__hexnan>:
 8016114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016118:	680b      	ldr	r3, [r1, #0]
 801611a:	6801      	ldr	r1, [r0, #0]
 801611c:	115e      	asrs	r6, r3, #5
 801611e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016122:	f013 031f 	ands.w	r3, r3, #31
 8016126:	b087      	sub	sp, #28
 8016128:	bf18      	it	ne
 801612a:	3604      	addne	r6, #4
 801612c:	2500      	movs	r5, #0
 801612e:	1f37      	subs	r7, r6, #4
 8016130:	4682      	mov	sl, r0
 8016132:	4690      	mov	r8, r2
 8016134:	9301      	str	r3, [sp, #4]
 8016136:	f846 5c04 	str.w	r5, [r6, #-4]
 801613a:	46b9      	mov	r9, r7
 801613c:	463c      	mov	r4, r7
 801613e:	9502      	str	r5, [sp, #8]
 8016140:	46ab      	mov	fp, r5
 8016142:	784a      	ldrb	r2, [r1, #1]
 8016144:	1c4b      	adds	r3, r1, #1
 8016146:	9303      	str	r3, [sp, #12]
 8016148:	b342      	cbz	r2, 801619c <__hexnan+0x88>
 801614a:	4610      	mov	r0, r2
 801614c:	9105      	str	r1, [sp, #20]
 801614e:	9204      	str	r2, [sp, #16]
 8016150:	f7ff fd76 	bl	8015c40 <__hexdig_fun>
 8016154:	2800      	cmp	r0, #0
 8016156:	d14f      	bne.n	80161f8 <__hexnan+0xe4>
 8016158:	9a04      	ldr	r2, [sp, #16]
 801615a:	9905      	ldr	r1, [sp, #20]
 801615c:	2a20      	cmp	r2, #32
 801615e:	d818      	bhi.n	8016192 <__hexnan+0x7e>
 8016160:	9b02      	ldr	r3, [sp, #8]
 8016162:	459b      	cmp	fp, r3
 8016164:	dd13      	ble.n	801618e <__hexnan+0x7a>
 8016166:	454c      	cmp	r4, r9
 8016168:	d206      	bcs.n	8016178 <__hexnan+0x64>
 801616a:	2d07      	cmp	r5, #7
 801616c:	dc04      	bgt.n	8016178 <__hexnan+0x64>
 801616e:	462a      	mov	r2, r5
 8016170:	4649      	mov	r1, r9
 8016172:	4620      	mov	r0, r4
 8016174:	f7ff ffa8 	bl	80160c8 <L_shift>
 8016178:	4544      	cmp	r4, r8
 801617a:	d950      	bls.n	801621e <__hexnan+0x10a>
 801617c:	2300      	movs	r3, #0
 801617e:	f1a4 0904 	sub.w	r9, r4, #4
 8016182:	f844 3c04 	str.w	r3, [r4, #-4]
 8016186:	f8cd b008 	str.w	fp, [sp, #8]
 801618a:	464c      	mov	r4, r9
 801618c:	461d      	mov	r5, r3
 801618e:	9903      	ldr	r1, [sp, #12]
 8016190:	e7d7      	b.n	8016142 <__hexnan+0x2e>
 8016192:	2a29      	cmp	r2, #41	; 0x29
 8016194:	d155      	bne.n	8016242 <__hexnan+0x12e>
 8016196:	3102      	adds	r1, #2
 8016198:	f8ca 1000 	str.w	r1, [sl]
 801619c:	f1bb 0f00 	cmp.w	fp, #0
 80161a0:	d04f      	beq.n	8016242 <__hexnan+0x12e>
 80161a2:	454c      	cmp	r4, r9
 80161a4:	d206      	bcs.n	80161b4 <__hexnan+0xa0>
 80161a6:	2d07      	cmp	r5, #7
 80161a8:	dc04      	bgt.n	80161b4 <__hexnan+0xa0>
 80161aa:	462a      	mov	r2, r5
 80161ac:	4649      	mov	r1, r9
 80161ae:	4620      	mov	r0, r4
 80161b0:	f7ff ff8a 	bl	80160c8 <L_shift>
 80161b4:	4544      	cmp	r4, r8
 80161b6:	d934      	bls.n	8016222 <__hexnan+0x10e>
 80161b8:	f1a8 0204 	sub.w	r2, r8, #4
 80161bc:	4623      	mov	r3, r4
 80161be:	f853 1b04 	ldr.w	r1, [r3], #4
 80161c2:	f842 1f04 	str.w	r1, [r2, #4]!
 80161c6:	429f      	cmp	r7, r3
 80161c8:	d2f9      	bcs.n	80161be <__hexnan+0xaa>
 80161ca:	1b3b      	subs	r3, r7, r4
 80161cc:	f023 0303 	bic.w	r3, r3, #3
 80161d0:	3304      	adds	r3, #4
 80161d2:	3e03      	subs	r6, #3
 80161d4:	3401      	adds	r4, #1
 80161d6:	42a6      	cmp	r6, r4
 80161d8:	bf38      	it	cc
 80161da:	2304      	movcc	r3, #4
 80161dc:	4443      	add	r3, r8
 80161de:	2200      	movs	r2, #0
 80161e0:	f843 2b04 	str.w	r2, [r3], #4
 80161e4:	429f      	cmp	r7, r3
 80161e6:	d2fb      	bcs.n	80161e0 <__hexnan+0xcc>
 80161e8:	683b      	ldr	r3, [r7, #0]
 80161ea:	b91b      	cbnz	r3, 80161f4 <__hexnan+0xe0>
 80161ec:	4547      	cmp	r7, r8
 80161ee:	d126      	bne.n	801623e <__hexnan+0x12a>
 80161f0:	2301      	movs	r3, #1
 80161f2:	603b      	str	r3, [r7, #0]
 80161f4:	2005      	movs	r0, #5
 80161f6:	e025      	b.n	8016244 <__hexnan+0x130>
 80161f8:	3501      	adds	r5, #1
 80161fa:	2d08      	cmp	r5, #8
 80161fc:	f10b 0b01 	add.w	fp, fp, #1
 8016200:	dd06      	ble.n	8016210 <__hexnan+0xfc>
 8016202:	4544      	cmp	r4, r8
 8016204:	d9c3      	bls.n	801618e <__hexnan+0x7a>
 8016206:	2300      	movs	r3, #0
 8016208:	f844 3c04 	str.w	r3, [r4, #-4]
 801620c:	2501      	movs	r5, #1
 801620e:	3c04      	subs	r4, #4
 8016210:	6822      	ldr	r2, [r4, #0]
 8016212:	f000 000f 	and.w	r0, r0, #15
 8016216:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801621a:	6020      	str	r0, [r4, #0]
 801621c:	e7b7      	b.n	801618e <__hexnan+0x7a>
 801621e:	2508      	movs	r5, #8
 8016220:	e7b5      	b.n	801618e <__hexnan+0x7a>
 8016222:	9b01      	ldr	r3, [sp, #4]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d0df      	beq.n	80161e8 <__hexnan+0xd4>
 8016228:	f1c3 0320 	rsb	r3, r3, #32
 801622c:	f04f 32ff 	mov.w	r2, #4294967295
 8016230:	40da      	lsrs	r2, r3
 8016232:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016236:	4013      	ands	r3, r2
 8016238:	f846 3c04 	str.w	r3, [r6, #-4]
 801623c:	e7d4      	b.n	80161e8 <__hexnan+0xd4>
 801623e:	3f04      	subs	r7, #4
 8016240:	e7d2      	b.n	80161e8 <__hexnan+0xd4>
 8016242:	2004      	movs	r0, #4
 8016244:	b007      	add	sp, #28
 8016246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801624a <__ascii_mbtowc>:
 801624a:	b082      	sub	sp, #8
 801624c:	b901      	cbnz	r1, 8016250 <__ascii_mbtowc+0x6>
 801624e:	a901      	add	r1, sp, #4
 8016250:	b142      	cbz	r2, 8016264 <__ascii_mbtowc+0x1a>
 8016252:	b14b      	cbz	r3, 8016268 <__ascii_mbtowc+0x1e>
 8016254:	7813      	ldrb	r3, [r2, #0]
 8016256:	600b      	str	r3, [r1, #0]
 8016258:	7812      	ldrb	r2, [r2, #0]
 801625a:	1e10      	subs	r0, r2, #0
 801625c:	bf18      	it	ne
 801625e:	2001      	movne	r0, #1
 8016260:	b002      	add	sp, #8
 8016262:	4770      	bx	lr
 8016264:	4610      	mov	r0, r2
 8016266:	e7fb      	b.n	8016260 <__ascii_mbtowc+0x16>
 8016268:	f06f 0001 	mvn.w	r0, #1
 801626c:	e7f8      	b.n	8016260 <__ascii_mbtowc+0x16>
	...

08016270 <_Balloc>:
 8016270:	b570      	push	{r4, r5, r6, lr}
 8016272:	69c6      	ldr	r6, [r0, #28]
 8016274:	4604      	mov	r4, r0
 8016276:	460d      	mov	r5, r1
 8016278:	b976      	cbnz	r6, 8016298 <_Balloc+0x28>
 801627a:	2010      	movs	r0, #16
 801627c:	f7fc fdf0 	bl	8012e60 <malloc>
 8016280:	4602      	mov	r2, r0
 8016282:	61e0      	str	r0, [r4, #28]
 8016284:	b920      	cbnz	r0, 8016290 <_Balloc+0x20>
 8016286:	4b18      	ldr	r3, [pc, #96]	; (80162e8 <_Balloc+0x78>)
 8016288:	4818      	ldr	r0, [pc, #96]	; (80162ec <_Balloc+0x7c>)
 801628a:	216b      	movs	r1, #107	; 0x6b
 801628c:	f7fe fda2 	bl	8014dd4 <__assert_func>
 8016290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016294:	6006      	str	r6, [r0, #0]
 8016296:	60c6      	str	r6, [r0, #12]
 8016298:	69e6      	ldr	r6, [r4, #28]
 801629a:	68f3      	ldr	r3, [r6, #12]
 801629c:	b183      	cbz	r3, 80162c0 <_Balloc+0x50>
 801629e:	69e3      	ldr	r3, [r4, #28]
 80162a0:	68db      	ldr	r3, [r3, #12]
 80162a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80162a6:	b9b8      	cbnz	r0, 80162d8 <_Balloc+0x68>
 80162a8:	2101      	movs	r1, #1
 80162aa:	fa01 f605 	lsl.w	r6, r1, r5
 80162ae:	1d72      	adds	r2, r6, #5
 80162b0:	0092      	lsls	r2, r2, #2
 80162b2:	4620      	mov	r0, r4
 80162b4:	f000 ff25 	bl	8017102 <_calloc_r>
 80162b8:	b160      	cbz	r0, 80162d4 <_Balloc+0x64>
 80162ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80162be:	e00e      	b.n	80162de <_Balloc+0x6e>
 80162c0:	2221      	movs	r2, #33	; 0x21
 80162c2:	2104      	movs	r1, #4
 80162c4:	4620      	mov	r0, r4
 80162c6:	f000 ff1c 	bl	8017102 <_calloc_r>
 80162ca:	69e3      	ldr	r3, [r4, #28]
 80162cc:	60f0      	str	r0, [r6, #12]
 80162ce:	68db      	ldr	r3, [r3, #12]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d1e4      	bne.n	801629e <_Balloc+0x2e>
 80162d4:	2000      	movs	r0, #0
 80162d6:	bd70      	pop	{r4, r5, r6, pc}
 80162d8:	6802      	ldr	r2, [r0, #0]
 80162da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80162de:	2300      	movs	r3, #0
 80162e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80162e4:	e7f7      	b.n	80162d6 <_Balloc+0x66>
 80162e6:	bf00      	nop
 80162e8:	0801a7c0 	.word	0x0801a7c0
 80162ec:	0801ab31 	.word	0x0801ab31

080162f0 <_Bfree>:
 80162f0:	b570      	push	{r4, r5, r6, lr}
 80162f2:	69c6      	ldr	r6, [r0, #28]
 80162f4:	4605      	mov	r5, r0
 80162f6:	460c      	mov	r4, r1
 80162f8:	b976      	cbnz	r6, 8016318 <_Bfree+0x28>
 80162fa:	2010      	movs	r0, #16
 80162fc:	f7fc fdb0 	bl	8012e60 <malloc>
 8016300:	4602      	mov	r2, r0
 8016302:	61e8      	str	r0, [r5, #28]
 8016304:	b920      	cbnz	r0, 8016310 <_Bfree+0x20>
 8016306:	4b09      	ldr	r3, [pc, #36]	; (801632c <_Bfree+0x3c>)
 8016308:	4809      	ldr	r0, [pc, #36]	; (8016330 <_Bfree+0x40>)
 801630a:	218f      	movs	r1, #143	; 0x8f
 801630c:	f7fe fd62 	bl	8014dd4 <__assert_func>
 8016310:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016314:	6006      	str	r6, [r0, #0]
 8016316:	60c6      	str	r6, [r0, #12]
 8016318:	b13c      	cbz	r4, 801632a <_Bfree+0x3a>
 801631a:	69eb      	ldr	r3, [r5, #28]
 801631c:	6862      	ldr	r2, [r4, #4]
 801631e:	68db      	ldr	r3, [r3, #12]
 8016320:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016324:	6021      	str	r1, [r4, #0]
 8016326:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801632a:	bd70      	pop	{r4, r5, r6, pc}
 801632c:	0801a7c0 	.word	0x0801a7c0
 8016330:	0801ab31 	.word	0x0801ab31

08016334 <__multadd>:
 8016334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016338:	690d      	ldr	r5, [r1, #16]
 801633a:	4607      	mov	r7, r0
 801633c:	460c      	mov	r4, r1
 801633e:	461e      	mov	r6, r3
 8016340:	f101 0c14 	add.w	ip, r1, #20
 8016344:	2000      	movs	r0, #0
 8016346:	f8dc 3000 	ldr.w	r3, [ip]
 801634a:	b299      	uxth	r1, r3
 801634c:	fb02 6101 	mla	r1, r2, r1, r6
 8016350:	0c1e      	lsrs	r6, r3, #16
 8016352:	0c0b      	lsrs	r3, r1, #16
 8016354:	fb02 3306 	mla	r3, r2, r6, r3
 8016358:	b289      	uxth	r1, r1
 801635a:	3001      	adds	r0, #1
 801635c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016360:	4285      	cmp	r5, r0
 8016362:	f84c 1b04 	str.w	r1, [ip], #4
 8016366:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801636a:	dcec      	bgt.n	8016346 <__multadd+0x12>
 801636c:	b30e      	cbz	r6, 80163b2 <__multadd+0x7e>
 801636e:	68a3      	ldr	r3, [r4, #8]
 8016370:	42ab      	cmp	r3, r5
 8016372:	dc19      	bgt.n	80163a8 <__multadd+0x74>
 8016374:	6861      	ldr	r1, [r4, #4]
 8016376:	4638      	mov	r0, r7
 8016378:	3101      	adds	r1, #1
 801637a:	f7ff ff79 	bl	8016270 <_Balloc>
 801637e:	4680      	mov	r8, r0
 8016380:	b928      	cbnz	r0, 801638e <__multadd+0x5a>
 8016382:	4602      	mov	r2, r0
 8016384:	4b0c      	ldr	r3, [pc, #48]	; (80163b8 <__multadd+0x84>)
 8016386:	480d      	ldr	r0, [pc, #52]	; (80163bc <__multadd+0x88>)
 8016388:	21ba      	movs	r1, #186	; 0xba
 801638a:	f7fe fd23 	bl	8014dd4 <__assert_func>
 801638e:	6922      	ldr	r2, [r4, #16]
 8016390:	3202      	adds	r2, #2
 8016392:	f104 010c 	add.w	r1, r4, #12
 8016396:	0092      	lsls	r2, r2, #2
 8016398:	300c      	adds	r0, #12
 801639a:	f7fe fcfc 	bl	8014d96 <memcpy>
 801639e:	4621      	mov	r1, r4
 80163a0:	4638      	mov	r0, r7
 80163a2:	f7ff ffa5 	bl	80162f0 <_Bfree>
 80163a6:	4644      	mov	r4, r8
 80163a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80163ac:	3501      	adds	r5, #1
 80163ae:	615e      	str	r6, [r3, #20]
 80163b0:	6125      	str	r5, [r4, #16]
 80163b2:	4620      	mov	r0, r4
 80163b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163b8:	0801aac0 	.word	0x0801aac0
 80163bc:	0801ab31 	.word	0x0801ab31

080163c0 <__s2b>:
 80163c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163c4:	460c      	mov	r4, r1
 80163c6:	4615      	mov	r5, r2
 80163c8:	461f      	mov	r7, r3
 80163ca:	2209      	movs	r2, #9
 80163cc:	3308      	adds	r3, #8
 80163ce:	4606      	mov	r6, r0
 80163d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80163d4:	2100      	movs	r1, #0
 80163d6:	2201      	movs	r2, #1
 80163d8:	429a      	cmp	r2, r3
 80163da:	db09      	blt.n	80163f0 <__s2b+0x30>
 80163dc:	4630      	mov	r0, r6
 80163de:	f7ff ff47 	bl	8016270 <_Balloc>
 80163e2:	b940      	cbnz	r0, 80163f6 <__s2b+0x36>
 80163e4:	4602      	mov	r2, r0
 80163e6:	4b19      	ldr	r3, [pc, #100]	; (801644c <__s2b+0x8c>)
 80163e8:	4819      	ldr	r0, [pc, #100]	; (8016450 <__s2b+0x90>)
 80163ea:	21d3      	movs	r1, #211	; 0xd3
 80163ec:	f7fe fcf2 	bl	8014dd4 <__assert_func>
 80163f0:	0052      	lsls	r2, r2, #1
 80163f2:	3101      	adds	r1, #1
 80163f4:	e7f0      	b.n	80163d8 <__s2b+0x18>
 80163f6:	9b08      	ldr	r3, [sp, #32]
 80163f8:	6143      	str	r3, [r0, #20]
 80163fa:	2d09      	cmp	r5, #9
 80163fc:	f04f 0301 	mov.w	r3, #1
 8016400:	6103      	str	r3, [r0, #16]
 8016402:	dd16      	ble.n	8016432 <__s2b+0x72>
 8016404:	f104 0909 	add.w	r9, r4, #9
 8016408:	46c8      	mov	r8, r9
 801640a:	442c      	add	r4, r5
 801640c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016410:	4601      	mov	r1, r0
 8016412:	3b30      	subs	r3, #48	; 0x30
 8016414:	220a      	movs	r2, #10
 8016416:	4630      	mov	r0, r6
 8016418:	f7ff ff8c 	bl	8016334 <__multadd>
 801641c:	45a0      	cmp	r8, r4
 801641e:	d1f5      	bne.n	801640c <__s2b+0x4c>
 8016420:	f1a5 0408 	sub.w	r4, r5, #8
 8016424:	444c      	add	r4, r9
 8016426:	1b2d      	subs	r5, r5, r4
 8016428:	1963      	adds	r3, r4, r5
 801642a:	42bb      	cmp	r3, r7
 801642c:	db04      	blt.n	8016438 <__s2b+0x78>
 801642e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016432:	340a      	adds	r4, #10
 8016434:	2509      	movs	r5, #9
 8016436:	e7f6      	b.n	8016426 <__s2b+0x66>
 8016438:	f814 3b01 	ldrb.w	r3, [r4], #1
 801643c:	4601      	mov	r1, r0
 801643e:	3b30      	subs	r3, #48	; 0x30
 8016440:	220a      	movs	r2, #10
 8016442:	4630      	mov	r0, r6
 8016444:	f7ff ff76 	bl	8016334 <__multadd>
 8016448:	e7ee      	b.n	8016428 <__s2b+0x68>
 801644a:	bf00      	nop
 801644c:	0801aac0 	.word	0x0801aac0
 8016450:	0801ab31 	.word	0x0801ab31

08016454 <__hi0bits>:
 8016454:	0c03      	lsrs	r3, r0, #16
 8016456:	041b      	lsls	r3, r3, #16
 8016458:	b9d3      	cbnz	r3, 8016490 <__hi0bits+0x3c>
 801645a:	0400      	lsls	r0, r0, #16
 801645c:	2310      	movs	r3, #16
 801645e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016462:	bf04      	itt	eq
 8016464:	0200      	lsleq	r0, r0, #8
 8016466:	3308      	addeq	r3, #8
 8016468:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801646c:	bf04      	itt	eq
 801646e:	0100      	lsleq	r0, r0, #4
 8016470:	3304      	addeq	r3, #4
 8016472:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016476:	bf04      	itt	eq
 8016478:	0080      	lsleq	r0, r0, #2
 801647a:	3302      	addeq	r3, #2
 801647c:	2800      	cmp	r0, #0
 801647e:	db05      	blt.n	801648c <__hi0bits+0x38>
 8016480:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016484:	f103 0301 	add.w	r3, r3, #1
 8016488:	bf08      	it	eq
 801648a:	2320      	moveq	r3, #32
 801648c:	4618      	mov	r0, r3
 801648e:	4770      	bx	lr
 8016490:	2300      	movs	r3, #0
 8016492:	e7e4      	b.n	801645e <__hi0bits+0xa>

08016494 <__lo0bits>:
 8016494:	6803      	ldr	r3, [r0, #0]
 8016496:	f013 0207 	ands.w	r2, r3, #7
 801649a:	d00c      	beq.n	80164b6 <__lo0bits+0x22>
 801649c:	07d9      	lsls	r1, r3, #31
 801649e:	d422      	bmi.n	80164e6 <__lo0bits+0x52>
 80164a0:	079a      	lsls	r2, r3, #30
 80164a2:	bf49      	itett	mi
 80164a4:	085b      	lsrmi	r3, r3, #1
 80164a6:	089b      	lsrpl	r3, r3, #2
 80164a8:	6003      	strmi	r3, [r0, #0]
 80164aa:	2201      	movmi	r2, #1
 80164ac:	bf5c      	itt	pl
 80164ae:	6003      	strpl	r3, [r0, #0]
 80164b0:	2202      	movpl	r2, #2
 80164b2:	4610      	mov	r0, r2
 80164b4:	4770      	bx	lr
 80164b6:	b299      	uxth	r1, r3
 80164b8:	b909      	cbnz	r1, 80164be <__lo0bits+0x2a>
 80164ba:	0c1b      	lsrs	r3, r3, #16
 80164bc:	2210      	movs	r2, #16
 80164be:	b2d9      	uxtb	r1, r3
 80164c0:	b909      	cbnz	r1, 80164c6 <__lo0bits+0x32>
 80164c2:	3208      	adds	r2, #8
 80164c4:	0a1b      	lsrs	r3, r3, #8
 80164c6:	0719      	lsls	r1, r3, #28
 80164c8:	bf04      	itt	eq
 80164ca:	091b      	lsreq	r3, r3, #4
 80164cc:	3204      	addeq	r2, #4
 80164ce:	0799      	lsls	r1, r3, #30
 80164d0:	bf04      	itt	eq
 80164d2:	089b      	lsreq	r3, r3, #2
 80164d4:	3202      	addeq	r2, #2
 80164d6:	07d9      	lsls	r1, r3, #31
 80164d8:	d403      	bmi.n	80164e2 <__lo0bits+0x4e>
 80164da:	085b      	lsrs	r3, r3, #1
 80164dc:	f102 0201 	add.w	r2, r2, #1
 80164e0:	d003      	beq.n	80164ea <__lo0bits+0x56>
 80164e2:	6003      	str	r3, [r0, #0]
 80164e4:	e7e5      	b.n	80164b2 <__lo0bits+0x1e>
 80164e6:	2200      	movs	r2, #0
 80164e8:	e7e3      	b.n	80164b2 <__lo0bits+0x1e>
 80164ea:	2220      	movs	r2, #32
 80164ec:	e7e1      	b.n	80164b2 <__lo0bits+0x1e>
	...

080164f0 <__i2b>:
 80164f0:	b510      	push	{r4, lr}
 80164f2:	460c      	mov	r4, r1
 80164f4:	2101      	movs	r1, #1
 80164f6:	f7ff febb 	bl	8016270 <_Balloc>
 80164fa:	4602      	mov	r2, r0
 80164fc:	b928      	cbnz	r0, 801650a <__i2b+0x1a>
 80164fe:	4b05      	ldr	r3, [pc, #20]	; (8016514 <__i2b+0x24>)
 8016500:	4805      	ldr	r0, [pc, #20]	; (8016518 <__i2b+0x28>)
 8016502:	f240 1145 	movw	r1, #325	; 0x145
 8016506:	f7fe fc65 	bl	8014dd4 <__assert_func>
 801650a:	2301      	movs	r3, #1
 801650c:	6144      	str	r4, [r0, #20]
 801650e:	6103      	str	r3, [r0, #16]
 8016510:	bd10      	pop	{r4, pc}
 8016512:	bf00      	nop
 8016514:	0801aac0 	.word	0x0801aac0
 8016518:	0801ab31 	.word	0x0801ab31

0801651c <__multiply>:
 801651c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016520:	4691      	mov	r9, r2
 8016522:	690a      	ldr	r2, [r1, #16]
 8016524:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016528:	429a      	cmp	r2, r3
 801652a:	bfb8      	it	lt
 801652c:	460b      	movlt	r3, r1
 801652e:	460c      	mov	r4, r1
 8016530:	bfbc      	itt	lt
 8016532:	464c      	movlt	r4, r9
 8016534:	4699      	movlt	r9, r3
 8016536:	6927      	ldr	r7, [r4, #16]
 8016538:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801653c:	68a3      	ldr	r3, [r4, #8]
 801653e:	6861      	ldr	r1, [r4, #4]
 8016540:	eb07 060a 	add.w	r6, r7, sl
 8016544:	42b3      	cmp	r3, r6
 8016546:	b085      	sub	sp, #20
 8016548:	bfb8      	it	lt
 801654a:	3101      	addlt	r1, #1
 801654c:	f7ff fe90 	bl	8016270 <_Balloc>
 8016550:	b930      	cbnz	r0, 8016560 <__multiply+0x44>
 8016552:	4602      	mov	r2, r0
 8016554:	4b44      	ldr	r3, [pc, #272]	; (8016668 <__multiply+0x14c>)
 8016556:	4845      	ldr	r0, [pc, #276]	; (801666c <__multiply+0x150>)
 8016558:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801655c:	f7fe fc3a 	bl	8014dd4 <__assert_func>
 8016560:	f100 0514 	add.w	r5, r0, #20
 8016564:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016568:	462b      	mov	r3, r5
 801656a:	2200      	movs	r2, #0
 801656c:	4543      	cmp	r3, r8
 801656e:	d321      	bcc.n	80165b4 <__multiply+0x98>
 8016570:	f104 0314 	add.w	r3, r4, #20
 8016574:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016578:	f109 0314 	add.w	r3, r9, #20
 801657c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016580:	9202      	str	r2, [sp, #8]
 8016582:	1b3a      	subs	r2, r7, r4
 8016584:	3a15      	subs	r2, #21
 8016586:	f022 0203 	bic.w	r2, r2, #3
 801658a:	3204      	adds	r2, #4
 801658c:	f104 0115 	add.w	r1, r4, #21
 8016590:	428f      	cmp	r7, r1
 8016592:	bf38      	it	cc
 8016594:	2204      	movcc	r2, #4
 8016596:	9201      	str	r2, [sp, #4]
 8016598:	9a02      	ldr	r2, [sp, #8]
 801659a:	9303      	str	r3, [sp, #12]
 801659c:	429a      	cmp	r2, r3
 801659e:	d80c      	bhi.n	80165ba <__multiply+0x9e>
 80165a0:	2e00      	cmp	r6, #0
 80165a2:	dd03      	ble.n	80165ac <__multiply+0x90>
 80165a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d05b      	beq.n	8016664 <__multiply+0x148>
 80165ac:	6106      	str	r6, [r0, #16]
 80165ae:	b005      	add	sp, #20
 80165b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165b4:	f843 2b04 	str.w	r2, [r3], #4
 80165b8:	e7d8      	b.n	801656c <__multiply+0x50>
 80165ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80165be:	f1ba 0f00 	cmp.w	sl, #0
 80165c2:	d024      	beq.n	801660e <__multiply+0xf2>
 80165c4:	f104 0e14 	add.w	lr, r4, #20
 80165c8:	46a9      	mov	r9, r5
 80165ca:	f04f 0c00 	mov.w	ip, #0
 80165ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80165d2:	f8d9 1000 	ldr.w	r1, [r9]
 80165d6:	fa1f fb82 	uxth.w	fp, r2
 80165da:	b289      	uxth	r1, r1
 80165dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80165e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80165e4:	f8d9 2000 	ldr.w	r2, [r9]
 80165e8:	4461      	add	r1, ip
 80165ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80165ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80165f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80165f6:	b289      	uxth	r1, r1
 80165f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80165fc:	4577      	cmp	r7, lr
 80165fe:	f849 1b04 	str.w	r1, [r9], #4
 8016602:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016606:	d8e2      	bhi.n	80165ce <__multiply+0xb2>
 8016608:	9a01      	ldr	r2, [sp, #4]
 801660a:	f845 c002 	str.w	ip, [r5, r2]
 801660e:	9a03      	ldr	r2, [sp, #12]
 8016610:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016614:	3304      	adds	r3, #4
 8016616:	f1b9 0f00 	cmp.w	r9, #0
 801661a:	d021      	beq.n	8016660 <__multiply+0x144>
 801661c:	6829      	ldr	r1, [r5, #0]
 801661e:	f104 0c14 	add.w	ip, r4, #20
 8016622:	46ae      	mov	lr, r5
 8016624:	f04f 0a00 	mov.w	sl, #0
 8016628:	f8bc b000 	ldrh.w	fp, [ip]
 801662c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016630:	fb09 220b 	mla	r2, r9, fp, r2
 8016634:	4452      	add	r2, sl
 8016636:	b289      	uxth	r1, r1
 8016638:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801663c:	f84e 1b04 	str.w	r1, [lr], #4
 8016640:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016644:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016648:	f8be 1000 	ldrh.w	r1, [lr]
 801664c:	fb09 110a 	mla	r1, r9, sl, r1
 8016650:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8016654:	4567      	cmp	r7, ip
 8016656:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801665a:	d8e5      	bhi.n	8016628 <__multiply+0x10c>
 801665c:	9a01      	ldr	r2, [sp, #4]
 801665e:	50a9      	str	r1, [r5, r2]
 8016660:	3504      	adds	r5, #4
 8016662:	e799      	b.n	8016598 <__multiply+0x7c>
 8016664:	3e01      	subs	r6, #1
 8016666:	e79b      	b.n	80165a0 <__multiply+0x84>
 8016668:	0801aac0 	.word	0x0801aac0
 801666c:	0801ab31 	.word	0x0801ab31

08016670 <__pow5mult>:
 8016670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016674:	4615      	mov	r5, r2
 8016676:	f012 0203 	ands.w	r2, r2, #3
 801667a:	4606      	mov	r6, r0
 801667c:	460f      	mov	r7, r1
 801667e:	d007      	beq.n	8016690 <__pow5mult+0x20>
 8016680:	4c25      	ldr	r4, [pc, #148]	; (8016718 <__pow5mult+0xa8>)
 8016682:	3a01      	subs	r2, #1
 8016684:	2300      	movs	r3, #0
 8016686:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801668a:	f7ff fe53 	bl	8016334 <__multadd>
 801668e:	4607      	mov	r7, r0
 8016690:	10ad      	asrs	r5, r5, #2
 8016692:	d03d      	beq.n	8016710 <__pow5mult+0xa0>
 8016694:	69f4      	ldr	r4, [r6, #28]
 8016696:	b97c      	cbnz	r4, 80166b8 <__pow5mult+0x48>
 8016698:	2010      	movs	r0, #16
 801669a:	f7fc fbe1 	bl	8012e60 <malloc>
 801669e:	4602      	mov	r2, r0
 80166a0:	61f0      	str	r0, [r6, #28]
 80166a2:	b928      	cbnz	r0, 80166b0 <__pow5mult+0x40>
 80166a4:	4b1d      	ldr	r3, [pc, #116]	; (801671c <__pow5mult+0xac>)
 80166a6:	481e      	ldr	r0, [pc, #120]	; (8016720 <__pow5mult+0xb0>)
 80166a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80166ac:	f7fe fb92 	bl	8014dd4 <__assert_func>
 80166b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80166b4:	6004      	str	r4, [r0, #0]
 80166b6:	60c4      	str	r4, [r0, #12]
 80166b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80166bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80166c0:	b94c      	cbnz	r4, 80166d6 <__pow5mult+0x66>
 80166c2:	f240 2171 	movw	r1, #625	; 0x271
 80166c6:	4630      	mov	r0, r6
 80166c8:	f7ff ff12 	bl	80164f0 <__i2b>
 80166cc:	2300      	movs	r3, #0
 80166ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80166d2:	4604      	mov	r4, r0
 80166d4:	6003      	str	r3, [r0, #0]
 80166d6:	f04f 0900 	mov.w	r9, #0
 80166da:	07eb      	lsls	r3, r5, #31
 80166dc:	d50a      	bpl.n	80166f4 <__pow5mult+0x84>
 80166de:	4639      	mov	r1, r7
 80166e0:	4622      	mov	r2, r4
 80166e2:	4630      	mov	r0, r6
 80166e4:	f7ff ff1a 	bl	801651c <__multiply>
 80166e8:	4639      	mov	r1, r7
 80166ea:	4680      	mov	r8, r0
 80166ec:	4630      	mov	r0, r6
 80166ee:	f7ff fdff 	bl	80162f0 <_Bfree>
 80166f2:	4647      	mov	r7, r8
 80166f4:	106d      	asrs	r5, r5, #1
 80166f6:	d00b      	beq.n	8016710 <__pow5mult+0xa0>
 80166f8:	6820      	ldr	r0, [r4, #0]
 80166fa:	b938      	cbnz	r0, 801670c <__pow5mult+0x9c>
 80166fc:	4622      	mov	r2, r4
 80166fe:	4621      	mov	r1, r4
 8016700:	4630      	mov	r0, r6
 8016702:	f7ff ff0b 	bl	801651c <__multiply>
 8016706:	6020      	str	r0, [r4, #0]
 8016708:	f8c0 9000 	str.w	r9, [r0]
 801670c:	4604      	mov	r4, r0
 801670e:	e7e4      	b.n	80166da <__pow5mult+0x6a>
 8016710:	4638      	mov	r0, r7
 8016712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016716:	bf00      	nop
 8016718:	0801ac80 	.word	0x0801ac80
 801671c:	0801a7c0 	.word	0x0801a7c0
 8016720:	0801ab31 	.word	0x0801ab31

08016724 <__lshift>:
 8016724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016728:	460c      	mov	r4, r1
 801672a:	6849      	ldr	r1, [r1, #4]
 801672c:	6923      	ldr	r3, [r4, #16]
 801672e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016732:	68a3      	ldr	r3, [r4, #8]
 8016734:	4607      	mov	r7, r0
 8016736:	4691      	mov	r9, r2
 8016738:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801673c:	f108 0601 	add.w	r6, r8, #1
 8016740:	42b3      	cmp	r3, r6
 8016742:	db0b      	blt.n	801675c <__lshift+0x38>
 8016744:	4638      	mov	r0, r7
 8016746:	f7ff fd93 	bl	8016270 <_Balloc>
 801674a:	4605      	mov	r5, r0
 801674c:	b948      	cbnz	r0, 8016762 <__lshift+0x3e>
 801674e:	4602      	mov	r2, r0
 8016750:	4b28      	ldr	r3, [pc, #160]	; (80167f4 <__lshift+0xd0>)
 8016752:	4829      	ldr	r0, [pc, #164]	; (80167f8 <__lshift+0xd4>)
 8016754:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8016758:	f7fe fb3c 	bl	8014dd4 <__assert_func>
 801675c:	3101      	adds	r1, #1
 801675e:	005b      	lsls	r3, r3, #1
 8016760:	e7ee      	b.n	8016740 <__lshift+0x1c>
 8016762:	2300      	movs	r3, #0
 8016764:	f100 0114 	add.w	r1, r0, #20
 8016768:	f100 0210 	add.w	r2, r0, #16
 801676c:	4618      	mov	r0, r3
 801676e:	4553      	cmp	r3, sl
 8016770:	db33      	blt.n	80167da <__lshift+0xb6>
 8016772:	6920      	ldr	r0, [r4, #16]
 8016774:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016778:	f104 0314 	add.w	r3, r4, #20
 801677c:	f019 091f 	ands.w	r9, r9, #31
 8016780:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016784:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016788:	d02b      	beq.n	80167e2 <__lshift+0xbe>
 801678a:	f1c9 0e20 	rsb	lr, r9, #32
 801678e:	468a      	mov	sl, r1
 8016790:	2200      	movs	r2, #0
 8016792:	6818      	ldr	r0, [r3, #0]
 8016794:	fa00 f009 	lsl.w	r0, r0, r9
 8016798:	4310      	orrs	r0, r2
 801679a:	f84a 0b04 	str.w	r0, [sl], #4
 801679e:	f853 2b04 	ldr.w	r2, [r3], #4
 80167a2:	459c      	cmp	ip, r3
 80167a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80167a8:	d8f3      	bhi.n	8016792 <__lshift+0x6e>
 80167aa:	ebac 0304 	sub.w	r3, ip, r4
 80167ae:	3b15      	subs	r3, #21
 80167b0:	f023 0303 	bic.w	r3, r3, #3
 80167b4:	3304      	adds	r3, #4
 80167b6:	f104 0015 	add.w	r0, r4, #21
 80167ba:	4584      	cmp	ip, r0
 80167bc:	bf38      	it	cc
 80167be:	2304      	movcc	r3, #4
 80167c0:	50ca      	str	r2, [r1, r3]
 80167c2:	b10a      	cbz	r2, 80167c8 <__lshift+0xa4>
 80167c4:	f108 0602 	add.w	r6, r8, #2
 80167c8:	3e01      	subs	r6, #1
 80167ca:	4638      	mov	r0, r7
 80167cc:	612e      	str	r6, [r5, #16]
 80167ce:	4621      	mov	r1, r4
 80167d0:	f7ff fd8e 	bl	80162f0 <_Bfree>
 80167d4:	4628      	mov	r0, r5
 80167d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167da:	f842 0f04 	str.w	r0, [r2, #4]!
 80167de:	3301      	adds	r3, #1
 80167e0:	e7c5      	b.n	801676e <__lshift+0x4a>
 80167e2:	3904      	subs	r1, #4
 80167e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80167e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80167ec:	459c      	cmp	ip, r3
 80167ee:	d8f9      	bhi.n	80167e4 <__lshift+0xc0>
 80167f0:	e7ea      	b.n	80167c8 <__lshift+0xa4>
 80167f2:	bf00      	nop
 80167f4:	0801aac0 	.word	0x0801aac0
 80167f8:	0801ab31 	.word	0x0801ab31

080167fc <__mcmp>:
 80167fc:	b530      	push	{r4, r5, lr}
 80167fe:	6902      	ldr	r2, [r0, #16]
 8016800:	690c      	ldr	r4, [r1, #16]
 8016802:	1b12      	subs	r2, r2, r4
 8016804:	d10e      	bne.n	8016824 <__mcmp+0x28>
 8016806:	f100 0314 	add.w	r3, r0, #20
 801680a:	3114      	adds	r1, #20
 801680c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016810:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016814:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016818:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801681c:	42a5      	cmp	r5, r4
 801681e:	d003      	beq.n	8016828 <__mcmp+0x2c>
 8016820:	d305      	bcc.n	801682e <__mcmp+0x32>
 8016822:	2201      	movs	r2, #1
 8016824:	4610      	mov	r0, r2
 8016826:	bd30      	pop	{r4, r5, pc}
 8016828:	4283      	cmp	r3, r0
 801682a:	d3f3      	bcc.n	8016814 <__mcmp+0x18>
 801682c:	e7fa      	b.n	8016824 <__mcmp+0x28>
 801682e:	f04f 32ff 	mov.w	r2, #4294967295
 8016832:	e7f7      	b.n	8016824 <__mcmp+0x28>

08016834 <__mdiff>:
 8016834:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016838:	460c      	mov	r4, r1
 801683a:	4606      	mov	r6, r0
 801683c:	4611      	mov	r1, r2
 801683e:	4620      	mov	r0, r4
 8016840:	4690      	mov	r8, r2
 8016842:	f7ff ffdb 	bl	80167fc <__mcmp>
 8016846:	1e05      	subs	r5, r0, #0
 8016848:	d110      	bne.n	801686c <__mdiff+0x38>
 801684a:	4629      	mov	r1, r5
 801684c:	4630      	mov	r0, r6
 801684e:	f7ff fd0f 	bl	8016270 <_Balloc>
 8016852:	b930      	cbnz	r0, 8016862 <__mdiff+0x2e>
 8016854:	4b3a      	ldr	r3, [pc, #232]	; (8016940 <__mdiff+0x10c>)
 8016856:	4602      	mov	r2, r0
 8016858:	f240 2137 	movw	r1, #567	; 0x237
 801685c:	4839      	ldr	r0, [pc, #228]	; (8016944 <__mdiff+0x110>)
 801685e:	f7fe fab9 	bl	8014dd4 <__assert_func>
 8016862:	2301      	movs	r3, #1
 8016864:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801686c:	bfa4      	itt	ge
 801686e:	4643      	movge	r3, r8
 8016870:	46a0      	movge	r8, r4
 8016872:	4630      	mov	r0, r6
 8016874:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016878:	bfa6      	itte	ge
 801687a:	461c      	movge	r4, r3
 801687c:	2500      	movge	r5, #0
 801687e:	2501      	movlt	r5, #1
 8016880:	f7ff fcf6 	bl	8016270 <_Balloc>
 8016884:	b920      	cbnz	r0, 8016890 <__mdiff+0x5c>
 8016886:	4b2e      	ldr	r3, [pc, #184]	; (8016940 <__mdiff+0x10c>)
 8016888:	4602      	mov	r2, r0
 801688a:	f240 2145 	movw	r1, #581	; 0x245
 801688e:	e7e5      	b.n	801685c <__mdiff+0x28>
 8016890:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016894:	6926      	ldr	r6, [r4, #16]
 8016896:	60c5      	str	r5, [r0, #12]
 8016898:	f104 0914 	add.w	r9, r4, #20
 801689c:	f108 0514 	add.w	r5, r8, #20
 80168a0:	f100 0e14 	add.w	lr, r0, #20
 80168a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80168a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80168ac:	f108 0210 	add.w	r2, r8, #16
 80168b0:	46f2      	mov	sl, lr
 80168b2:	2100      	movs	r1, #0
 80168b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80168b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80168bc:	fa11 f88b 	uxtah	r8, r1, fp
 80168c0:	b299      	uxth	r1, r3
 80168c2:	0c1b      	lsrs	r3, r3, #16
 80168c4:	eba8 0801 	sub.w	r8, r8, r1
 80168c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80168cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80168d0:	fa1f f888 	uxth.w	r8, r8
 80168d4:	1419      	asrs	r1, r3, #16
 80168d6:	454e      	cmp	r6, r9
 80168d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80168dc:	f84a 3b04 	str.w	r3, [sl], #4
 80168e0:	d8e8      	bhi.n	80168b4 <__mdiff+0x80>
 80168e2:	1b33      	subs	r3, r6, r4
 80168e4:	3b15      	subs	r3, #21
 80168e6:	f023 0303 	bic.w	r3, r3, #3
 80168ea:	3304      	adds	r3, #4
 80168ec:	3415      	adds	r4, #21
 80168ee:	42a6      	cmp	r6, r4
 80168f0:	bf38      	it	cc
 80168f2:	2304      	movcc	r3, #4
 80168f4:	441d      	add	r5, r3
 80168f6:	4473      	add	r3, lr
 80168f8:	469e      	mov	lr, r3
 80168fa:	462e      	mov	r6, r5
 80168fc:	4566      	cmp	r6, ip
 80168fe:	d30e      	bcc.n	801691e <__mdiff+0xea>
 8016900:	f10c 0203 	add.w	r2, ip, #3
 8016904:	1b52      	subs	r2, r2, r5
 8016906:	f022 0203 	bic.w	r2, r2, #3
 801690a:	3d03      	subs	r5, #3
 801690c:	45ac      	cmp	ip, r5
 801690e:	bf38      	it	cc
 8016910:	2200      	movcc	r2, #0
 8016912:	4413      	add	r3, r2
 8016914:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016918:	b17a      	cbz	r2, 801693a <__mdiff+0x106>
 801691a:	6107      	str	r7, [r0, #16]
 801691c:	e7a4      	b.n	8016868 <__mdiff+0x34>
 801691e:	f856 8b04 	ldr.w	r8, [r6], #4
 8016922:	fa11 f288 	uxtah	r2, r1, r8
 8016926:	1414      	asrs	r4, r2, #16
 8016928:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801692c:	b292      	uxth	r2, r2
 801692e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016932:	f84e 2b04 	str.w	r2, [lr], #4
 8016936:	1421      	asrs	r1, r4, #16
 8016938:	e7e0      	b.n	80168fc <__mdiff+0xc8>
 801693a:	3f01      	subs	r7, #1
 801693c:	e7ea      	b.n	8016914 <__mdiff+0xe0>
 801693e:	bf00      	nop
 8016940:	0801aac0 	.word	0x0801aac0
 8016944:	0801ab31 	.word	0x0801ab31

08016948 <__ulp>:
 8016948:	b082      	sub	sp, #8
 801694a:	ed8d 0b00 	vstr	d0, [sp]
 801694e:	9a01      	ldr	r2, [sp, #4]
 8016950:	4b0f      	ldr	r3, [pc, #60]	; (8016990 <__ulp+0x48>)
 8016952:	4013      	ands	r3, r2
 8016954:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8016958:	2b00      	cmp	r3, #0
 801695a:	dc08      	bgt.n	801696e <__ulp+0x26>
 801695c:	425b      	negs	r3, r3
 801695e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8016962:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016966:	da04      	bge.n	8016972 <__ulp+0x2a>
 8016968:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801696c:	4113      	asrs	r3, r2
 801696e:	2200      	movs	r2, #0
 8016970:	e008      	b.n	8016984 <__ulp+0x3c>
 8016972:	f1a2 0314 	sub.w	r3, r2, #20
 8016976:	2b1e      	cmp	r3, #30
 8016978:	bfda      	itte	le
 801697a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801697e:	40da      	lsrle	r2, r3
 8016980:	2201      	movgt	r2, #1
 8016982:	2300      	movs	r3, #0
 8016984:	4619      	mov	r1, r3
 8016986:	4610      	mov	r0, r2
 8016988:	ec41 0b10 	vmov	d0, r0, r1
 801698c:	b002      	add	sp, #8
 801698e:	4770      	bx	lr
 8016990:	7ff00000 	.word	0x7ff00000

08016994 <__b2d>:
 8016994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016998:	6906      	ldr	r6, [r0, #16]
 801699a:	f100 0814 	add.w	r8, r0, #20
 801699e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80169a2:	1f37      	subs	r7, r6, #4
 80169a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80169a8:	4610      	mov	r0, r2
 80169aa:	f7ff fd53 	bl	8016454 <__hi0bits>
 80169ae:	f1c0 0320 	rsb	r3, r0, #32
 80169b2:	280a      	cmp	r0, #10
 80169b4:	600b      	str	r3, [r1, #0]
 80169b6:	491b      	ldr	r1, [pc, #108]	; (8016a24 <__b2d+0x90>)
 80169b8:	dc15      	bgt.n	80169e6 <__b2d+0x52>
 80169ba:	f1c0 0c0b 	rsb	ip, r0, #11
 80169be:	fa22 f30c 	lsr.w	r3, r2, ip
 80169c2:	45b8      	cmp	r8, r7
 80169c4:	ea43 0501 	orr.w	r5, r3, r1
 80169c8:	bf34      	ite	cc
 80169ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80169ce:	2300      	movcs	r3, #0
 80169d0:	3015      	adds	r0, #21
 80169d2:	fa02 f000 	lsl.w	r0, r2, r0
 80169d6:	fa23 f30c 	lsr.w	r3, r3, ip
 80169da:	4303      	orrs	r3, r0
 80169dc:	461c      	mov	r4, r3
 80169de:	ec45 4b10 	vmov	d0, r4, r5
 80169e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169e6:	45b8      	cmp	r8, r7
 80169e8:	bf3a      	itte	cc
 80169ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80169ee:	f1a6 0708 	subcc.w	r7, r6, #8
 80169f2:	2300      	movcs	r3, #0
 80169f4:	380b      	subs	r0, #11
 80169f6:	d012      	beq.n	8016a1e <__b2d+0x8a>
 80169f8:	f1c0 0120 	rsb	r1, r0, #32
 80169fc:	fa23 f401 	lsr.w	r4, r3, r1
 8016a00:	4082      	lsls	r2, r0
 8016a02:	4322      	orrs	r2, r4
 8016a04:	4547      	cmp	r7, r8
 8016a06:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8016a0a:	bf8c      	ite	hi
 8016a0c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016a10:	2200      	movls	r2, #0
 8016a12:	4083      	lsls	r3, r0
 8016a14:	40ca      	lsrs	r2, r1
 8016a16:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016a1a:	4313      	orrs	r3, r2
 8016a1c:	e7de      	b.n	80169dc <__b2d+0x48>
 8016a1e:	ea42 0501 	orr.w	r5, r2, r1
 8016a22:	e7db      	b.n	80169dc <__b2d+0x48>
 8016a24:	3ff00000 	.word	0x3ff00000

08016a28 <__d2b>:
 8016a28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016a2c:	460f      	mov	r7, r1
 8016a2e:	2101      	movs	r1, #1
 8016a30:	ec59 8b10 	vmov	r8, r9, d0
 8016a34:	4616      	mov	r6, r2
 8016a36:	f7ff fc1b 	bl	8016270 <_Balloc>
 8016a3a:	4604      	mov	r4, r0
 8016a3c:	b930      	cbnz	r0, 8016a4c <__d2b+0x24>
 8016a3e:	4602      	mov	r2, r0
 8016a40:	4b24      	ldr	r3, [pc, #144]	; (8016ad4 <__d2b+0xac>)
 8016a42:	4825      	ldr	r0, [pc, #148]	; (8016ad8 <__d2b+0xb0>)
 8016a44:	f240 310f 	movw	r1, #783	; 0x30f
 8016a48:	f7fe f9c4 	bl	8014dd4 <__assert_func>
 8016a4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016a50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016a54:	bb2d      	cbnz	r5, 8016aa2 <__d2b+0x7a>
 8016a56:	9301      	str	r3, [sp, #4]
 8016a58:	f1b8 0300 	subs.w	r3, r8, #0
 8016a5c:	d026      	beq.n	8016aac <__d2b+0x84>
 8016a5e:	4668      	mov	r0, sp
 8016a60:	9300      	str	r3, [sp, #0]
 8016a62:	f7ff fd17 	bl	8016494 <__lo0bits>
 8016a66:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016a6a:	b1e8      	cbz	r0, 8016aa8 <__d2b+0x80>
 8016a6c:	f1c0 0320 	rsb	r3, r0, #32
 8016a70:	fa02 f303 	lsl.w	r3, r2, r3
 8016a74:	430b      	orrs	r3, r1
 8016a76:	40c2      	lsrs	r2, r0
 8016a78:	6163      	str	r3, [r4, #20]
 8016a7a:	9201      	str	r2, [sp, #4]
 8016a7c:	9b01      	ldr	r3, [sp, #4]
 8016a7e:	61a3      	str	r3, [r4, #24]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	bf14      	ite	ne
 8016a84:	2202      	movne	r2, #2
 8016a86:	2201      	moveq	r2, #1
 8016a88:	6122      	str	r2, [r4, #16]
 8016a8a:	b1bd      	cbz	r5, 8016abc <__d2b+0x94>
 8016a8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016a90:	4405      	add	r5, r0
 8016a92:	603d      	str	r5, [r7, #0]
 8016a94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016a98:	6030      	str	r0, [r6, #0]
 8016a9a:	4620      	mov	r0, r4
 8016a9c:	b003      	add	sp, #12
 8016a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016aa6:	e7d6      	b.n	8016a56 <__d2b+0x2e>
 8016aa8:	6161      	str	r1, [r4, #20]
 8016aaa:	e7e7      	b.n	8016a7c <__d2b+0x54>
 8016aac:	a801      	add	r0, sp, #4
 8016aae:	f7ff fcf1 	bl	8016494 <__lo0bits>
 8016ab2:	9b01      	ldr	r3, [sp, #4]
 8016ab4:	6163      	str	r3, [r4, #20]
 8016ab6:	3020      	adds	r0, #32
 8016ab8:	2201      	movs	r2, #1
 8016aba:	e7e5      	b.n	8016a88 <__d2b+0x60>
 8016abc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016ac0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016ac4:	6038      	str	r0, [r7, #0]
 8016ac6:	6918      	ldr	r0, [r3, #16]
 8016ac8:	f7ff fcc4 	bl	8016454 <__hi0bits>
 8016acc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016ad0:	e7e2      	b.n	8016a98 <__d2b+0x70>
 8016ad2:	bf00      	nop
 8016ad4:	0801aac0 	.word	0x0801aac0
 8016ad8:	0801ab31 	.word	0x0801ab31

08016adc <__ratio>:
 8016adc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ae0:	4688      	mov	r8, r1
 8016ae2:	4669      	mov	r1, sp
 8016ae4:	4681      	mov	r9, r0
 8016ae6:	f7ff ff55 	bl	8016994 <__b2d>
 8016aea:	a901      	add	r1, sp, #4
 8016aec:	4640      	mov	r0, r8
 8016aee:	ec55 4b10 	vmov	r4, r5, d0
 8016af2:	f7ff ff4f 	bl	8016994 <__b2d>
 8016af6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016afa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016afe:	eba3 0c02 	sub.w	ip, r3, r2
 8016b02:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016b06:	1a9b      	subs	r3, r3, r2
 8016b08:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016b0c:	ec51 0b10 	vmov	r0, r1, d0
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	bfd6      	itet	le
 8016b14:	460a      	movle	r2, r1
 8016b16:	462a      	movgt	r2, r5
 8016b18:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016b1c:	468b      	mov	fp, r1
 8016b1e:	462f      	mov	r7, r5
 8016b20:	bfd4      	ite	le
 8016b22:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016b26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016b2a:	4620      	mov	r0, r4
 8016b2c:	ee10 2a10 	vmov	r2, s0
 8016b30:	465b      	mov	r3, fp
 8016b32:	4639      	mov	r1, r7
 8016b34:	f7e9 feaa 	bl	800088c <__aeabi_ddiv>
 8016b38:	ec41 0b10 	vmov	d0, r0, r1
 8016b3c:	b003      	add	sp, #12
 8016b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016b42 <__copybits>:
 8016b42:	3901      	subs	r1, #1
 8016b44:	b570      	push	{r4, r5, r6, lr}
 8016b46:	1149      	asrs	r1, r1, #5
 8016b48:	6914      	ldr	r4, [r2, #16]
 8016b4a:	3101      	adds	r1, #1
 8016b4c:	f102 0314 	add.w	r3, r2, #20
 8016b50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016b54:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016b58:	1f05      	subs	r5, r0, #4
 8016b5a:	42a3      	cmp	r3, r4
 8016b5c:	d30c      	bcc.n	8016b78 <__copybits+0x36>
 8016b5e:	1aa3      	subs	r3, r4, r2
 8016b60:	3b11      	subs	r3, #17
 8016b62:	f023 0303 	bic.w	r3, r3, #3
 8016b66:	3211      	adds	r2, #17
 8016b68:	42a2      	cmp	r2, r4
 8016b6a:	bf88      	it	hi
 8016b6c:	2300      	movhi	r3, #0
 8016b6e:	4418      	add	r0, r3
 8016b70:	2300      	movs	r3, #0
 8016b72:	4288      	cmp	r0, r1
 8016b74:	d305      	bcc.n	8016b82 <__copybits+0x40>
 8016b76:	bd70      	pop	{r4, r5, r6, pc}
 8016b78:	f853 6b04 	ldr.w	r6, [r3], #4
 8016b7c:	f845 6f04 	str.w	r6, [r5, #4]!
 8016b80:	e7eb      	b.n	8016b5a <__copybits+0x18>
 8016b82:	f840 3b04 	str.w	r3, [r0], #4
 8016b86:	e7f4      	b.n	8016b72 <__copybits+0x30>

08016b88 <__any_on>:
 8016b88:	f100 0214 	add.w	r2, r0, #20
 8016b8c:	6900      	ldr	r0, [r0, #16]
 8016b8e:	114b      	asrs	r3, r1, #5
 8016b90:	4298      	cmp	r0, r3
 8016b92:	b510      	push	{r4, lr}
 8016b94:	db11      	blt.n	8016bba <__any_on+0x32>
 8016b96:	dd0a      	ble.n	8016bae <__any_on+0x26>
 8016b98:	f011 011f 	ands.w	r1, r1, #31
 8016b9c:	d007      	beq.n	8016bae <__any_on+0x26>
 8016b9e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016ba2:	fa24 f001 	lsr.w	r0, r4, r1
 8016ba6:	fa00 f101 	lsl.w	r1, r0, r1
 8016baa:	428c      	cmp	r4, r1
 8016bac:	d10b      	bne.n	8016bc6 <__any_on+0x3e>
 8016bae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016bb2:	4293      	cmp	r3, r2
 8016bb4:	d803      	bhi.n	8016bbe <__any_on+0x36>
 8016bb6:	2000      	movs	r0, #0
 8016bb8:	bd10      	pop	{r4, pc}
 8016bba:	4603      	mov	r3, r0
 8016bbc:	e7f7      	b.n	8016bae <__any_on+0x26>
 8016bbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016bc2:	2900      	cmp	r1, #0
 8016bc4:	d0f5      	beq.n	8016bb2 <__any_on+0x2a>
 8016bc6:	2001      	movs	r0, #1
 8016bc8:	e7f6      	b.n	8016bb8 <__any_on+0x30>

08016bca <__ascii_wctomb>:
 8016bca:	b149      	cbz	r1, 8016be0 <__ascii_wctomb+0x16>
 8016bcc:	2aff      	cmp	r2, #255	; 0xff
 8016bce:	bf85      	ittet	hi
 8016bd0:	238a      	movhi	r3, #138	; 0x8a
 8016bd2:	6003      	strhi	r3, [r0, #0]
 8016bd4:	700a      	strbls	r2, [r1, #0]
 8016bd6:	f04f 30ff 	movhi.w	r0, #4294967295
 8016bda:	bf98      	it	ls
 8016bdc:	2001      	movls	r0, #1
 8016bde:	4770      	bx	lr
 8016be0:	4608      	mov	r0, r1
 8016be2:	4770      	bx	lr

08016be4 <__sfputc_r>:
 8016be4:	6893      	ldr	r3, [r2, #8]
 8016be6:	3b01      	subs	r3, #1
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	b410      	push	{r4}
 8016bec:	6093      	str	r3, [r2, #8]
 8016bee:	da08      	bge.n	8016c02 <__sfputc_r+0x1e>
 8016bf0:	6994      	ldr	r4, [r2, #24]
 8016bf2:	42a3      	cmp	r3, r4
 8016bf4:	db01      	blt.n	8016bfa <__sfputc_r+0x16>
 8016bf6:	290a      	cmp	r1, #10
 8016bf8:	d103      	bne.n	8016c02 <__sfputc_r+0x1e>
 8016bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bfe:	f7fd bf02 	b.w	8014a06 <__swbuf_r>
 8016c02:	6813      	ldr	r3, [r2, #0]
 8016c04:	1c58      	adds	r0, r3, #1
 8016c06:	6010      	str	r0, [r2, #0]
 8016c08:	7019      	strb	r1, [r3, #0]
 8016c0a:	4608      	mov	r0, r1
 8016c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c10:	4770      	bx	lr

08016c12 <__sfputs_r>:
 8016c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c14:	4606      	mov	r6, r0
 8016c16:	460f      	mov	r7, r1
 8016c18:	4614      	mov	r4, r2
 8016c1a:	18d5      	adds	r5, r2, r3
 8016c1c:	42ac      	cmp	r4, r5
 8016c1e:	d101      	bne.n	8016c24 <__sfputs_r+0x12>
 8016c20:	2000      	movs	r0, #0
 8016c22:	e007      	b.n	8016c34 <__sfputs_r+0x22>
 8016c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c28:	463a      	mov	r2, r7
 8016c2a:	4630      	mov	r0, r6
 8016c2c:	f7ff ffda 	bl	8016be4 <__sfputc_r>
 8016c30:	1c43      	adds	r3, r0, #1
 8016c32:	d1f3      	bne.n	8016c1c <__sfputs_r+0xa>
 8016c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016c38 <_vfiprintf_r>:
 8016c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c3c:	460d      	mov	r5, r1
 8016c3e:	b09d      	sub	sp, #116	; 0x74
 8016c40:	4614      	mov	r4, r2
 8016c42:	4698      	mov	r8, r3
 8016c44:	4606      	mov	r6, r0
 8016c46:	b118      	cbz	r0, 8016c50 <_vfiprintf_r+0x18>
 8016c48:	6a03      	ldr	r3, [r0, #32]
 8016c4a:	b90b      	cbnz	r3, 8016c50 <_vfiprintf_r+0x18>
 8016c4c:	f7fd fdf4 	bl	8014838 <__sinit>
 8016c50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016c52:	07d9      	lsls	r1, r3, #31
 8016c54:	d405      	bmi.n	8016c62 <_vfiprintf_r+0x2a>
 8016c56:	89ab      	ldrh	r3, [r5, #12]
 8016c58:	059a      	lsls	r2, r3, #22
 8016c5a:	d402      	bmi.n	8016c62 <_vfiprintf_r+0x2a>
 8016c5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016c5e:	f7fe f898 	bl	8014d92 <__retarget_lock_acquire_recursive>
 8016c62:	89ab      	ldrh	r3, [r5, #12]
 8016c64:	071b      	lsls	r3, r3, #28
 8016c66:	d501      	bpl.n	8016c6c <_vfiprintf_r+0x34>
 8016c68:	692b      	ldr	r3, [r5, #16]
 8016c6a:	b99b      	cbnz	r3, 8016c94 <_vfiprintf_r+0x5c>
 8016c6c:	4629      	mov	r1, r5
 8016c6e:	4630      	mov	r0, r6
 8016c70:	f7fd ff06 	bl	8014a80 <__swsetup_r>
 8016c74:	b170      	cbz	r0, 8016c94 <_vfiprintf_r+0x5c>
 8016c76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016c78:	07dc      	lsls	r4, r3, #31
 8016c7a:	d504      	bpl.n	8016c86 <_vfiprintf_r+0x4e>
 8016c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8016c80:	b01d      	add	sp, #116	; 0x74
 8016c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c86:	89ab      	ldrh	r3, [r5, #12]
 8016c88:	0598      	lsls	r0, r3, #22
 8016c8a:	d4f7      	bmi.n	8016c7c <_vfiprintf_r+0x44>
 8016c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016c8e:	f7fe f881 	bl	8014d94 <__retarget_lock_release_recursive>
 8016c92:	e7f3      	b.n	8016c7c <_vfiprintf_r+0x44>
 8016c94:	2300      	movs	r3, #0
 8016c96:	9309      	str	r3, [sp, #36]	; 0x24
 8016c98:	2320      	movs	r3, #32
 8016c9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016c9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016ca2:	2330      	movs	r3, #48	; 0x30
 8016ca4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016e58 <_vfiprintf_r+0x220>
 8016ca8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016cac:	f04f 0901 	mov.w	r9, #1
 8016cb0:	4623      	mov	r3, r4
 8016cb2:	469a      	mov	sl, r3
 8016cb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016cb8:	b10a      	cbz	r2, 8016cbe <_vfiprintf_r+0x86>
 8016cba:	2a25      	cmp	r2, #37	; 0x25
 8016cbc:	d1f9      	bne.n	8016cb2 <_vfiprintf_r+0x7a>
 8016cbe:	ebba 0b04 	subs.w	fp, sl, r4
 8016cc2:	d00b      	beq.n	8016cdc <_vfiprintf_r+0xa4>
 8016cc4:	465b      	mov	r3, fp
 8016cc6:	4622      	mov	r2, r4
 8016cc8:	4629      	mov	r1, r5
 8016cca:	4630      	mov	r0, r6
 8016ccc:	f7ff ffa1 	bl	8016c12 <__sfputs_r>
 8016cd0:	3001      	adds	r0, #1
 8016cd2:	f000 80a9 	beq.w	8016e28 <_vfiprintf_r+0x1f0>
 8016cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016cd8:	445a      	add	r2, fp
 8016cda:	9209      	str	r2, [sp, #36]	; 0x24
 8016cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	f000 80a1 	beq.w	8016e28 <_vfiprintf_r+0x1f0>
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8016cec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016cf0:	f10a 0a01 	add.w	sl, sl, #1
 8016cf4:	9304      	str	r3, [sp, #16]
 8016cf6:	9307      	str	r3, [sp, #28]
 8016cf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016cfc:	931a      	str	r3, [sp, #104]	; 0x68
 8016cfe:	4654      	mov	r4, sl
 8016d00:	2205      	movs	r2, #5
 8016d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d06:	4854      	ldr	r0, [pc, #336]	; (8016e58 <_vfiprintf_r+0x220>)
 8016d08:	f7e9 fa82 	bl	8000210 <memchr>
 8016d0c:	9a04      	ldr	r2, [sp, #16]
 8016d0e:	b9d8      	cbnz	r0, 8016d48 <_vfiprintf_r+0x110>
 8016d10:	06d1      	lsls	r1, r2, #27
 8016d12:	bf44      	itt	mi
 8016d14:	2320      	movmi	r3, #32
 8016d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d1a:	0713      	lsls	r3, r2, #28
 8016d1c:	bf44      	itt	mi
 8016d1e:	232b      	movmi	r3, #43	; 0x2b
 8016d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d24:	f89a 3000 	ldrb.w	r3, [sl]
 8016d28:	2b2a      	cmp	r3, #42	; 0x2a
 8016d2a:	d015      	beq.n	8016d58 <_vfiprintf_r+0x120>
 8016d2c:	9a07      	ldr	r2, [sp, #28]
 8016d2e:	4654      	mov	r4, sl
 8016d30:	2000      	movs	r0, #0
 8016d32:	f04f 0c0a 	mov.w	ip, #10
 8016d36:	4621      	mov	r1, r4
 8016d38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d3c:	3b30      	subs	r3, #48	; 0x30
 8016d3e:	2b09      	cmp	r3, #9
 8016d40:	d94d      	bls.n	8016dde <_vfiprintf_r+0x1a6>
 8016d42:	b1b0      	cbz	r0, 8016d72 <_vfiprintf_r+0x13a>
 8016d44:	9207      	str	r2, [sp, #28]
 8016d46:	e014      	b.n	8016d72 <_vfiprintf_r+0x13a>
 8016d48:	eba0 0308 	sub.w	r3, r0, r8
 8016d4c:	fa09 f303 	lsl.w	r3, r9, r3
 8016d50:	4313      	orrs	r3, r2
 8016d52:	9304      	str	r3, [sp, #16]
 8016d54:	46a2      	mov	sl, r4
 8016d56:	e7d2      	b.n	8016cfe <_vfiprintf_r+0xc6>
 8016d58:	9b03      	ldr	r3, [sp, #12]
 8016d5a:	1d19      	adds	r1, r3, #4
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	9103      	str	r1, [sp, #12]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	bfbb      	ittet	lt
 8016d64:	425b      	neglt	r3, r3
 8016d66:	f042 0202 	orrlt.w	r2, r2, #2
 8016d6a:	9307      	strge	r3, [sp, #28]
 8016d6c:	9307      	strlt	r3, [sp, #28]
 8016d6e:	bfb8      	it	lt
 8016d70:	9204      	strlt	r2, [sp, #16]
 8016d72:	7823      	ldrb	r3, [r4, #0]
 8016d74:	2b2e      	cmp	r3, #46	; 0x2e
 8016d76:	d10c      	bne.n	8016d92 <_vfiprintf_r+0x15a>
 8016d78:	7863      	ldrb	r3, [r4, #1]
 8016d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8016d7c:	d134      	bne.n	8016de8 <_vfiprintf_r+0x1b0>
 8016d7e:	9b03      	ldr	r3, [sp, #12]
 8016d80:	1d1a      	adds	r2, r3, #4
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	9203      	str	r2, [sp, #12]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	bfb8      	it	lt
 8016d8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8016d8e:	3402      	adds	r4, #2
 8016d90:	9305      	str	r3, [sp, #20]
 8016d92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016e68 <_vfiprintf_r+0x230>
 8016d96:	7821      	ldrb	r1, [r4, #0]
 8016d98:	2203      	movs	r2, #3
 8016d9a:	4650      	mov	r0, sl
 8016d9c:	f7e9 fa38 	bl	8000210 <memchr>
 8016da0:	b138      	cbz	r0, 8016db2 <_vfiprintf_r+0x17a>
 8016da2:	9b04      	ldr	r3, [sp, #16]
 8016da4:	eba0 000a 	sub.w	r0, r0, sl
 8016da8:	2240      	movs	r2, #64	; 0x40
 8016daa:	4082      	lsls	r2, r0
 8016dac:	4313      	orrs	r3, r2
 8016dae:	3401      	adds	r4, #1
 8016db0:	9304      	str	r3, [sp, #16]
 8016db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016db6:	4829      	ldr	r0, [pc, #164]	; (8016e5c <_vfiprintf_r+0x224>)
 8016db8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016dbc:	2206      	movs	r2, #6
 8016dbe:	f7e9 fa27 	bl	8000210 <memchr>
 8016dc2:	2800      	cmp	r0, #0
 8016dc4:	d03f      	beq.n	8016e46 <_vfiprintf_r+0x20e>
 8016dc6:	4b26      	ldr	r3, [pc, #152]	; (8016e60 <_vfiprintf_r+0x228>)
 8016dc8:	bb1b      	cbnz	r3, 8016e12 <_vfiprintf_r+0x1da>
 8016dca:	9b03      	ldr	r3, [sp, #12]
 8016dcc:	3307      	adds	r3, #7
 8016dce:	f023 0307 	bic.w	r3, r3, #7
 8016dd2:	3308      	adds	r3, #8
 8016dd4:	9303      	str	r3, [sp, #12]
 8016dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dd8:	443b      	add	r3, r7
 8016dda:	9309      	str	r3, [sp, #36]	; 0x24
 8016ddc:	e768      	b.n	8016cb0 <_vfiprintf_r+0x78>
 8016dde:	fb0c 3202 	mla	r2, ip, r2, r3
 8016de2:	460c      	mov	r4, r1
 8016de4:	2001      	movs	r0, #1
 8016de6:	e7a6      	b.n	8016d36 <_vfiprintf_r+0xfe>
 8016de8:	2300      	movs	r3, #0
 8016dea:	3401      	adds	r4, #1
 8016dec:	9305      	str	r3, [sp, #20]
 8016dee:	4619      	mov	r1, r3
 8016df0:	f04f 0c0a 	mov.w	ip, #10
 8016df4:	4620      	mov	r0, r4
 8016df6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016dfa:	3a30      	subs	r2, #48	; 0x30
 8016dfc:	2a09      	cmp	r2, #9
 8016dfe:	d903      	bls.n	8016e08 <_vfiprintf_r+0x1d0>
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d0c6      	beq.n	8016d92 <_vfiprintf_r+0x15a>
 8016e04:	9105      	str	r1, [sp, #20]
 8016e06:	e7c4      	b.n	8016d92 <_vfiprintf_r+0x15a>
 8016e08:	fb0c 2101 	mla	r1, ip, r1, r2
 8016e0c:	4604      	mov	r4, r0
 8016e0e:	2301      	movs	r3, #1
 8016e10:	e7f0      	b.n	8016df4 <_vfiprintf_r+0x1bc>
 8016e12:	ab03      	add	r3, sp, #12
 8016e14:	9300      	str	r3, [sp, #0]
 8016e16:	462a      	mov	r2, r5
 8016e18:	4b12      	ldr	r3, [pc, #72]	; (8016e64 <_vfiprintf_r+0x22c>)
 8016e1a:	a904      	add	r1, sp, #16
 8016e1c:	4630      	mov	r0, r6
 8016e1e:	f7fd f8b9 	bl	8013f94 <_printf_float>
 8016e22:	4607      	mov	r7, r0
 8016e24:	1c78      	adds	r0, r7, #1
 8016e26:	d1d6      	bne.n	8016dd6 <_vfiprintf_r+0x19e>
 8016e28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016e2a:	07d9      	lsls	r1, r3, #31
 8016e2c:	d405      	bmi.n	8016e3a <_vfiprintf_r+0x202>
 8016e2e:	89ab      	ldrh	r3, [r5, #12]
 8016e30:	059a      	lsls	r2, r3, #22
 8016e32:	d402      	bmi.n	8016e3a <_vfiprintf_r+0x202>
 8016e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016e36:	f7fd ffad 	bl	8014d94 <__retarget_lock_release_recursive>
 8016e3a:	89ab      	ldrh	r3, [r5, #12]
 8016e3c:	065b      	lsls	r3, r3, #25
 8016e3e:	f53f af1d 	bmi.w	8016c7c <_vfiprintf_r+0x44>
 8016e42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e44:	e71c      	b.n	8016c80 <_vfiprintf_r+0x48>
 8016e46:	ab03      	add	r3, sp, #12
 8016e48:	9300      	str	r3, [sp, #0]
 8016e4a:	462a      	mov	r2, r5
 8016e4c:	4b05      	ldr	r3, [pc, #20]	; (8016e64 <_vfiprintf_r+0x22c>)
 8016e4e:	a904      	add	r1, sp, #16
 8016e50:	4630      	mov	r0, r6
 8016e52:	f7fd fb43 	bl	80144dc <_printf_i>
 8016e56:	e7e4      	b.n	8016e22 <_vfiprintf_r+0x1ea>
 8016e58:	0801ac8c 	.word	0x0801ac8c
 8016e5c:	0801ac96 	.word	0x0801ac96
 8016e60:	08013f95 	.word	0x08013f95
 8016e64:	08016c13 	.word	0x08016c13
 8016e68:	0801ac92 	.word	0x0801ac92

08016e6c <__sflush_r>:
 8016e6c:	898a      	ldrh	r2, [r1, #12]
 8016e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e72:	4605      	mov	r5, r0
 8016e74:	0710      	lsls	r0, r2, #28
 8016e76:	460c      	mov	r4, r1
 8016e78:	d458      	bmi.n	8016f2c <__sflush_r+0xc0>
 8016e7a:	684b      	ldr	r3, [r1, #4]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	dc05      	bgt.n	8016e8c <__sflush_r+0x20>
 8016e80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	dc02      	bgt.n	8016e8c <__sflush_r+0x20>
 8016e86:	2000      	movs	r0, #0
 8016e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e8e:	2e00      	cmp	r6, #0
 8016e90:	d0f9      	beq.n	8016e86 <__sflush_r+0x1a>
 8016e92:	2300      	movs	r3, #0
 8016e94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016e98:	682f      	ldr	r7, [r5, #0]
 8016e9a:	6a21      	ldr	r1, [r4, #32]
 8016e9c:	602b      	str	r3, [r5, #0]
 8016e9e:	d032      	beq.n	8016f06 <__sflush_r+0x9a>
 8016ea0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016ea2:	89a3      	ldrh	r3, [r4, #12]
 8016ea4:	075a      	lsls	r2, r3, #29
 8016ea6:	d505      	bpl.n	8016eb4 <__sflush_r+0x48>
 8016ea8:	6863      	ldr	r3, [r4, #4]
 8016eaa:	1ac0      	subs	r0, r0, r3
 8016eac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016eae:	b10b      	cbz	r3, 8016eb4 <__sflush_r+0x48>
 8016eb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016eb2:	1ac0      	subs	r0, r0, r3
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	4602      	mov	r2, r0
 8016eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016eba:	6a21      	ldr	r1, [r4, #32]
 8016ebc:	4628      	mov	r0, r5
 8016ebe:	47b0      	blx	r6
 8016ec0:	1c43      	adds	r3, r0, #1
 8016ec2:	89a3      	ldrh	r3, [r4, #12]
 8016ec4:	d106      	bne.n	8016ed4 <__sflush_r+0x68>
 8016ec6:	6829      	ldr	r1, [r5, #0]
 8016ec8:	291d      	cmp	r1, #29
 8016eca:	d82b      	bhi.n	8016f24 <__sflush_r+0xb8>
 8016ecc:	4a29      	ldr	r2, [pc, #164]	; (8016f74 <__sflush_r+0x108>)
 8016ece:	410a      	asrs	r2, r1
 8016ed0:	07d6      	lsls	r6, r2, #31
 8016ed2:	d427      	bmi.n	8016f24 <__sflush_r+0xb8>
 8016ed4:	2200      	movs	r2, #0
 8016ed6:	6062      	str	r2, [r4, #4]
 8016ed8:	04d9      	lsls	r1, r3, #19
 8016eda:	6922      	ldr	r2, [r4, #16]
 8016edc:	6022      	str	r2, [r4, #0]
 8016ede:	d504      	bpl.n	8016eea <__sflush_r+0x7e>
 8016ee0:	1c42      	adds	r2, r0, #1
 8016ee2:	d101      	bne.n	8016ee8 <__sflush_r+0x7c>
 8016ee4:	682b      	ldr	r3, [r5, #0]
 8016ee6:	b903      	cbnz	r3, 8016eea <__sflush_r+0x7e>
 8016ee8:	6560      	str	r0, [r4, #84]	; 0x54
 8016eea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016eec:	602f      	str	r7, [r5, #0]
 8016eee:	2900      	cmp	r1, #0
 8016ef0:	d0c9      	beq.n	8016e86 <__sflush_r+0x1a>
 8016ef2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ef6:	4299      	cmp	r1, r3
 8016ef8:	d002      	beq.n	8016f00 <__sflush_r+0x94>
 8016efa:	4628      	mov	r0, r5
 8016efc:	f7fe fe02 	bl	8015b04 <_free_r>
 8016f00:	2000      	movs	r0, #0
 8016f02:	6360      	str	r0, [r4, #52]	; 0x34
 8016f04:	e7c0      	b.n	8016e88 <__sflush_r+0x1c>
 8016f06:	2301      	movs	r3, #1
 8016f08:	4628      	mov	r0, r5
 8016f0a:	47b0      	blx	r6
 8016f0c:	1c41      	adds	r1, r0, #1
 8016f0e:	d1c8      	bne.n	8016ea2 <__sflush_r+0x36>
 8016f10:	682b      	ldr	r3, [r5, #0]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d0c5      	beq.n	8016ea2 <__sflush_r+0x36>
 8016f16:	2b1d      	cmp	r3, #29
 8016f18:	d001      	beq.n	8016f1e <__sflush_r+0xb2>
 8016f1a:	2b16      	cmp	r3, #22
 8016f1c:	d101      	bne.n	8016f22 <__sflush_r+0xb6>
 8016f1e:	602f      	str	r7, [r5, #0]
 8016f20:	e7b1      	b.n	8016e86 <__sflush_r+0x1a>
 8016f22:	89a3      	ldrh	r3, [r4, #12]
 8016f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f28:	81a3      	strh	r3, [r4, #12]
 8016f2a:	e7ad      	b.n	8016e88 <__sflush_r+0x1c>
 8016f2c:	690f      	ldr	r7, [r1, #16]
 8016f2e:	2f00      	cmp	r7, #0
 8016f30:	d0a9      	beq.n	8016e86 <__sflush_r+0x1a>
 8016f32:	0793      	lsls	r3, r2, #30
 8016f34:	680e      	ldr	r6, [r1, #0]
 8016f36:	bf08      	it	eq
 8016f38:	694b      	ldreq	r3, [r1, #20]
 8016f3a:	600f      	str	r7, [r1, #0]
 8016f3c:	bf18      	it	ne
 8016f3e:	2300      	movne	r3, #0
 8016f40:	eba6 0807 	sub.w	r8, r6, r7
 8016f44:	608b      	str	r3, [r1, #8]
 8016f46:	f1b8 0f00 	cmp.w	r8, #0
 8016f4a:	dd9c      	ble.n	8016e86 <__sflush_r+0x1a>
 8016f4c:	6a21      	ldr	r1, [r4, #32]
 8016f4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016f50:	4643      	mov	r3, r8
 8016f52:	463a      	mov	r2, r7
 8016f54:	4628      	mov	r0, r5
 8016f56:	47b0      	blx	r6
 8016f58:	2800      	cmp	r0, #0
 8016f5a:	dc06      	bgt.n	8016f6a <__sflush_r+0xfe>
 8016f5c:	89a3      	ldrh	r3, [r4, #12]
 8016f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f62:	81a3      	strh	r3, [r4, #12]
 8016f64:	f04f 30ff 	mov.w	r0, #4294967295
 8016f68:	e78e      	b.n	8016e88 <__sflush_r+0x1c>
 8016f6a:	4407      	add	r7, r0
 8016f6c:	eba8 0800 	sub.w	r8, r8, r0
 8016f70:	e7e9      	b.n	8016f46 <__sflush_r+0xda>
 8016f72:	bf00      	nop
 8016f74:	dfbffffe 	.word	0xdfbffffe

08016f78 <_fflush_r>:
 8016f78:	b538      	push	{r3, r4, r5, lr}
 8016f7a:	690b      	ldr	r3, [r1, #16]
 8016f7c:	4605      	mov	r5, r0
 8016f7e:	460c      	mov	r4, r1
 8016f80:	b913      	cbnz	r3, 8016f88 <_fflush_r+0x10>
 8016f82:	2500      	movs	r5, #0
 8016f84:	4628      	mov	r0, r5
 8016f86:	bd38      	pop	{r3, r4, r5, pc}
 8016f88:	b118      	cbz	r0, 8016f92 <_fflush_r+0x1a>
 8016f8a:	6a03      	ldr	r3, [r0, #32]
 8016f8c:	b90b      	cbnz	r3, 8016f92 <_fflush_r+0x1a>
 8016f8e:	f7fd fc53 	bl	8014838 <__sinit>
 8016f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d0f3      	beq.n	8016f82 <_fflush_r+0xa>
 8016f9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016f9c:	07d0      	lsls	r0, r2, #31
 8016f9e:	d404      	bmi.n	8016faa <_fflush_r+0x32>
 8016fa0:	0599      	lsls	r1, r3, #22
 8016fa2:	d402      	bmi.n	8016faa <_fflush_r+0x32>
 8016fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fa6:	f7fd fef4 	bl	8014d92 <__retarget_lock_acquire_recursive>
 8016faa:	4628      	mov	r0, r5
 8016fac:	4621      	mov	r1, r4
 8016fae:	f7ff ff5d 	bl	8016e6c <__sflush_r>
 8016fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016fb4:	07da      	lsls	r2, r3, #31
 8016fb6:	4605      	mov	r5, r0
 8016fb8:	d4e4      	bmi.n	8016f84 <_fflush_r+0xc>
 8016fba:	89a3      	ldrh	r3, [r4, #12]
 8016fbc:	059b      	lsls	r3, r3, #22
 8016fbe:	d4e1      	bmi.n	8016f84 <_fflush_r+0xc>
 8016fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fc2:	f7fd fee7 	bl	8014d94 <__retarget_lock_release_recursive>
 8016fc6:	e7dd      	b.n	8016f84 <_fflush_r+0xc>

08016fc8 <fiprintf>:
 8016fc8:	b40e      	push	{r1, r2, r3}
 8016fca:	b503      	push	{r0, r1, lr}
 8016fcc:	4601      	mov	r1, r0
 8016fce:	ab03      	add	r3, sp, #12
 8016fd0:	4805      	ldr	r0, [pc, #20]	; (8016fe8 <fiprintf+0x20>)
 8016fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8016fd6:	6800      	ldr	r0, [r0, #0]
 8016fd8:	9301      	str	r3, [sp, #4]
 8016fda:	f7ff fe2d 	bl	8016c38 <_vfiprintf_r>
 8016fde:	b002      	add	sp, #8
 8016fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8016fe4:	b003      	add	sp, #12
 8016fe6:	4770      	bx	lr
 8016fe8:	200001f0 	.word	0x200001f0

08016fec <__swhatbuf_r>:
 8016fec:	b570      	push	{r4, r5, r6, lr}
 8016fee:	460c      	mov	r4, r1
 8016ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ff4:	2900      	cmp	r1, #0
 8016ff6:	b096      	sub	sp, #88	; 0x58
 8016ff8:	4615      	mov	r5, r2
 8016ffa:	461e      	mov	r6, r3
 8016ffc:	da0d      	bge.n	801701a <__swhatbuf_r+0x2e>
 8016ffe:	89a3      	ldrh	r3, [r4, #12]
 8017000:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017004:	f04f 0100 	mov.w	r1, #0
 8017008:	bf0c      	ite	eq
 801700a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801700e:	2340      	movne	r3, #64	; 0x40
 8017010:	2000      	movs	r0, #0
 8017012:	6031      	str	r1, [r6, #0]
 8017014:	602b      	str	r3, [r5, #0]
 8017016:	b016      	add	sp, #88	; 0x58
 8017018:	bd70      	pop	{r4, r5, r6, pc}
 801701a:	466a      	mov	r2, sp
 801701c:	f000 f848 	bl	80170b0 <_fstat_r>
 8017020:	2800      	cmp	r0, #0
 8017022:	dbec      	blt.n	8016ffe <__swhatbuf_r+0x12>
 8017024:	9901      	ldr	r1, [sp, #4]
 8017026:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801702a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801702e:	4259      	negs	r1, r3
 8017030:	4159      	adcs	r1, r3
 8017032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017036:	e7eb      	b.n	8017010 <__swhatbuf_r+0x24>

08017038 <__smakebuf_r>:
 8017038:	898b      	ldrh	r3, [r1, #12]
 801703a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801703c:	079d      	lsls	r5, r3, #30
 801703e:	4606      	mov	r6, r0
 8017040:	460c      	mov	r4, r1
 8017042:	d507      	bpl.n	8017054 <__smakebuf_r+0x1c>
 8017044:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017048:	6023      	str	r3, [r4, #0]
 801704a:	6123      	str	r3, [r4, #16]
 801704c:	2301      	movs	r3, #1
 801704e:	6163      	str	r3, [r4, #20]
 8017050:	b002      	add	sp, #8
 8017052:	bd70      	pop	{r4, r5, r6, pc}
 8017054:	ab01      	add	r3, sp, #4
 8017056:	466a      	mov	r2, sp
 8017058:	f7ff ffc8 	bl	8016fec <__swhatbuf_r>
 801705c:	9900      	ldr	r1, [sp, #0]
 801705e:	4605      	mov	r5, r0
 8017060:	4630      	mov	r0, r6
 8017062:	f7fb ff2d 	bl	8012ec0 <_malloc_r>
 8017066:	b948      	cbnz	r0, 801707c <__smakebuf_r+0x44>
 8017068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801706c:	059a      	lsls	r2, r3, #22
 801706e:	d4ef      	bmi.n	8017050 <__smakebuf_r+0x18>
 8017070:	f023 0303 	bic.w	r3, r3, #3
 8017074:	f043 0302 	orr.w	r3, r3, #2
 8017078:	81a3      	strh	r3, [r4, #12]
 801707a:	e7e3      	b.n	8017044 <__smakebuf_r+0xc>
 801707c:	89a3      	ldrh	r3, [r4, #12]
 801707e:	6020      	str	r0, [r4, #0]
 8017080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017084:	81a3      	strh	r3, [r4, #12]
 8017086:	9b00      	ldr	r3, [sp, #0]
 8017088:	6163      	str	r3, [r4, #20]
 801708a:	9b01      	ldr	r3, [sp, #4]
 801708c:	6120      	str	r0, [r4, #16]
 801708e:	b15b      	cbz	r3, 80170a8 <__smakebuf_r+0x70>
 8017090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017094:	4630      	mov	r0, r6
 8017096:	f000 f81d 	bl	80170d4 <_isatty_r>
 801709a:	b128      	cbz	r0, 80170a8 <__smakebuf_r+0x70>
 801709c:	89a3      	ldrh	r3, [r4, #12]
 801709e:	f023 0303 	bic.w	r3, r3, #3
 80170a2:	f043 0301 	orr.w	r3, r3, #1
 80170a6:	81a3      	strh	r3, [r4, #12]
 80170a8:	89a3      	ldrh	r3, [r4, #12]
 80170aa:	431d      	orrs	r5, r3
 80170ac:	81a5      	strh	r5, [r4, #12]
 80170ae:	e7cf      	b.n	8017050 <__smakebuf_r+0x18>

080170b0 <_fstat_r>:
 80170b0:	b538      	push	{r3, r4, r5, lr}
 80170b2:	4d07      	ldr	r5, [pc, #28]	; (80170d0 <_fstat_r+0x20>)
 80170b4:	2300      	movs	r3, #0
 80170b6:	4604      	mov	r4, r0
 80170b8:	4608      	mov	r0, r1
 80170ba:	4611      	mov	r1, r2
 80170bc:	602b      	str	r3, [r5, #0]
 80170be:	f7eb fd1a 	bl	8002af6 <_fstat>
 80170c2:	1c43      	adds	r3, r0, #1
 80170c4:	d102      	bne.n	80170cc <_fstat_r+0x1c>
 80170c6:	682b      	ldr	r3, [r5, #0]
 80170c8:	b103      	cbz	r3, 80170cc <_fstat_r+0x1c>
 80170ca:	6023      	str	r3, [r4, #0]
 80170cc:	bd38      	pop	{r3, r4, r5, pc}
 80170ce:	bf00      	nop
 80170d0:	20000b3c 	.word	0x20000b3c

080170d4 <_isatty_r>:
 80170d4:	b538      	push	{r3, r4, r5, lr}
 80170d6:	4d06      	ldr	r5, [pc, #24]	; (80170f0 <_isatty_r+0x1c>)
 80170d8:	2300      	movs	r3, #0
 80170da:	4604      	mov	r4, r0
 80170dc:	4608      	mov	r0, r1
 80170de:	602b      	str	r3, [r5, #0]
 80170e0:	f7eb fd19 	bl	8002b16 <_isatty>
 80170e4:	1c43      	adds	r3, r0, #1
 80170e6:	d102      	bne.n	80170ee <_isatty_r+0x1a>
 80170e8:	682b      	ldr	r3, [r5, #0]
 80170ea:	b103      	cbz	r3, 80170ee <_isatty_r+0x1a>
 80170ec:	6023      	str	r3, [r4, #0]
 80170ee:	bd38      	pop	{r3, r4, r5, pc}
 80170f0:	20000b3c 	.word	0x20000b3c

080170f4 <abort>:
 80170f4:	b508      	push	{r3, lr}
 80170f6:	2006      	movs	r0, #6
 80170f8:	f000 f842 	bl	8017180 <raise>
 80170fc:	2001      	movs	r0, #1
 80170fe:	f7eb fcab 	bl	8002a58 <_exit>

08017102 <_calloc_r>:
 8017102:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017104:	fba1 2402 	umull	r2, r4, r1, r2
 8017108:	b94c      	cbnz	r4, 801711e <_calloc_r+0x1c>
 801710a:	4611      	mov	r1, r2
 801710c:	9201      	str	r2, [sp, #4]
 801710e:	f7fb fed7 	bl	8012ec0 <_malloc_r>
 8017112:	9a01      	ldr	r2, [sp, #4]
 8017114:	4605      	mov	r5, r0
 8017116:	b930      	cbnz	r0, 8017126 <_calloc_r+0x24>
 8017118:	4628      	mov	r0, r5
 801711a:	b003      	add	sp, #12
 801711c:	bd30      	pop	{r4, r5, pc}
 801711e:	220c      	movs	r2, #12
 8017120:	6002      	str	r2, [r0, #0]
 8017122:	2500      	movs	r5, #0
 8017124:	e7f8      	b.n	8017118 <_calloc_r+0x16>
 8017126:	4621      	mov	r1, r4
 8017128:	f7fd fd12 	bl	8014b50 <memset>
 801712c:	e7f4      	b.n	8017118 <_calloc_r+0x16>

0801712e <_raise_r>:
 801712e:	291f      	cmp	r1, #31
 8017130:	b538      	push	{r3, r4, r5, lr}
 8017132:	4604      	mov	r4, r0
 8017134:	460d      	mov	r5, r1
 8017136:	d904      	bls.n	8017142 <_raise_r+0x14>
 8017138:	2316      	movs	r3, #22
 801713a:	6003      	str	r3, [r0, #0]
 801713c:	f04f 30ff 	mov.w	r0, #4294967295
 8017140:	bd38      	pop	{r3, r4, r5, pc}
 8017142:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017144:	b112      	cbz	r2, 801714c <_raise_r+0x1e>
 8017146:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801714a:	b94b      	cbnz	r3, 8017160 <_raise_r+0x32>
 801714c:	4620      	mov	r0, r4
 801714e:	f000 f831 	bl	80171b4 <_getpid_r>
 8017152:	462a      	mov	r2, r5
 8017154:	4601      	mov	r1, r0
 8017156:	4620      	mov	r0, r4
 8017158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801715c:	f000 b818 	b.w	8017190 <_kill_r>
 8017160:	2b01      	cmp	r3, #1
 8017162:	d00a      	beq.n	801717a <_raise_r+0x4c>
 8017164:	1c59      	adds	r1, r3, #1
 8017166:	d103      	bne.n	8017170 <_raise_r+0x42>
 8017168:	2316      	movs	r3, #22
 801716a:	6003      	str	r3, [r0, #0]
 801716c:	2001      	movs	r0, #1
 801716e:	e7e7      	b.n	8017140 <_raise_r+0x12>
 8017170:	2400      	movs	r4, #0
 8017172:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017176:	4628      	mov	r0, r5
 8017178:	4798      	blx	r3
 801717a:	2000      	movs	r0, #0
 801717c:	e7e0      	b.n	8017140 <_raise_r+0x12>
	...

08017180 <raise>:
 8017180:	4b02      	ldr	r3, [pc, #8]	; (801718c <raise+0xc>)
 8017182:	4601      	mov	r1, r0
 8017184:	6818      	ldr	r0, [r3, #0]
 8017186:	f7ff bfd2 	b.w	801712e <_raise_r>
 801718a:	bf00      	nop
 801718c:	200001f0 	.word	0x200001f0

08017190 <_kill_r>:
 8017190:	b538      	push	{r3, r4, r5, lr}
 8017192:	4d07      	ldr	r5, [pc, #28]	; (80171b0 <_kill_r+0x20>)
 8017194:	2300      	movs	r3, #0
 8017196:	4604      	mov	r4, r0
 8017198:	4608      	mov	r0, r1
 801719a:	4611      	mov	r1, r2
 801719c:	602b      	str	r3, [r5, #0]
 801719e:	f7eb fc49 	bl	8002a34 <_kill>
 80171a2:	1c43      	adds	r3, r0, #1
 80171a4:	d102      	bne.n	80171ac <_kill_r+0x1c>
 80171a6:	682b      	ldr	r3, [r5, #0]
 80171a8:	b103      	cbz	r3, 80171ac <_kill_r+0x1c>
 80171aa:	6023      	str	r3, [r4, #0]
 80171ac:	bd38      	pop	{r3, r4, r5, pc}
 80171ae:	bf00      	nop
 80171b0:	20000b3c 	.word	0x20000b3c

080171b4 <_getpid_r>:
 80171b4:	f7eb bc36 	b.w	8002a24 <_getpid>

080171b8 <_init>:
 80171b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171ba:	bf00      	nop
 80171bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80171be:	bc08      	pop	{r3}
 80171c0:	469e      	mov	lr, r3
 80171c2:	4770      	bx	lr

080171c4 <_fini>:
 80171c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171c6:	bf00      	nop
 80171c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80171ca:	bc08      	pop	{r3}
 80171cc:	469e      	mov	lr, r3
 80171ce:	4770      	bx	lr
