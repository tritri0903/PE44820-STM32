
PE44820-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017470  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b28  08017620  08017620  00027620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b148  0801b148  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801b148  0801b148  0002b148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b150  0801b150  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b150  0801b150  0002b150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b154  0801b154  0002b154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801b158  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f4  2**0
                  CONTENTS
 10 .bss          0000ac8c  200001f8  200001f8  000301f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000ae84  2000ae84  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025841  00000000  00000000  00030267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006215  00000000  00000000  00055aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019c8  00000000  00000000  0005bcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000147e  00000000  00000000  0005d688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003438f  00000000  00000000  0005eb06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ba60  00000000  00000000  00092e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f3d08  00000000  00000000  000be8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000080e8  00000000  00000000  001b2600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  001ba6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017608 	.word	0x08017608

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	08017608 	.word	0x08017608

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>:

#include "main.h"
#include "PE43xx.h"


PE43xx::PE43xx(GPIO_TypeDef* si_port, GPIO_InitTypeDef si_pin, GPIO_TypeDef* le_port, GPIO_InitTypeDef le_pin, GPIO_TypeDef* clk_port, GPIO_InitTypeDef clk_pin, uint8_t data, uint8_t type)
 8001030:	b082      	sub	sp, #8
 8001032:	b5b0      	push	{r4, r5, r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
 800103c:	f107 0118 	add.w	r1, r7, #24
 8001040:	e881 000c 	stmia.w	r1, {r2, r3}
{

	_si_pin = si_pin;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	1d1c      	adds	r4, r3, #4
 8001048:	f107 0518 	add.w	r5, r7, #24
 800104c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001050:	682b      	ldr	r3, [r5, #0]
 8001052:	6023      	str	r3, [r4, #0]
	_le_pin = le_pin;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f103 0418 	add.w	r4, r3, #24
 800105a:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800105e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001062:	682b      	ldr	r3, [r5, #0]
 8001064:	6023      	str	r3, [r4, #0]
	_clk_pin = clk_pin;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800106c:	f107 0548 	add.w	r5, r7, #72	; 0x48
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	682b      	ldr	r3, [r5, #0]
 8001076:	6023      	str	r3, [r4, #0]

	_si_port = si_port;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
	_le_port = le_port;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001082:	645a      	str	r2, [r3, #68]	; 0x44
	_clk_port = clk_port;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001088:	649a      	str	r2, [r3, #72]	; 0x48

	begin();
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f808 	bl	80010a0 <_ZN6PE43xx5beginEv>
}
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800109c:	b002      	add	sp, #8
 800109e:	4770      	bx	lr

080010a0 <_ZN6PE43xx5beginEv>:


void PE43xx::begin() {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    // set pins
	HAL_GPIO_WritePin(_si_port, _si_pin.Pin, GPIO_PIN_RESET);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	f004 f9a3 	bl	8005400 <HAL_GPIO_WritePin>

    // set our internal max and step values
    switch (_type) {
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b0c      	cmp	r3, #12
 80010c0:	d006      	beq.n	80010d0 <_ZN6PE43xx5beginEv+0x30>
 80010c2:	2b0c      	cmp	r3, #12
 80010c4:	dc14      	bgt.n	80010f0 <_ZN6PE43xx5beginEv+0x50>
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d002      	beq.n	80010d0 <_ZN6PE43xx5beginEv+0x30>
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d008      	beq.n	80010e0 <_ZN6PE43xx5beginEv+0x40>
 80010ce:	e00f      	b.n	80010f0 <_ZN6PE43xx5beginEv+0x50>
        case PE4302:
        case PE4312:
            _max = 31.5;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <_ZN6PE43xx5beginEv+0x74>)
 80010d4:	655a      	str	r2, [r3, #84]	; 0x54
            _step = 0.5;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80010dc:	651a      	str	r2, [r3, #80]	; 0x50
            break;
 80010de:	e00f      	b.n	8001100 <_ZN6PE43xx5beginEv+0x60>
        case PE4306:
            _max = 30;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <_ZN6PE43xx5beginEv+0x78>)
 80010e4:	655a      	str	r2, [r3, #84]	; 0x54
            _step = 1;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010ec:	651a      	str	r2, [r3, #80]	; 0x50
            break;
 80010ee:	e007      	b.n	8001100 <_ZN6PE43xx5beginEv+0x60>
        default:
            _step = 1;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010f6:	651a      	str	r2, [r3, #80]	; 0x50
            _max = 30;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a07      	ldr	r2, [pc, #28]	; (8001118 <_ZN6PE43xx5beginEv+0x78>)
 80010fc:	655a      	str	r2, [r3, #84]	; 0x54
            break;
 80010fe:	bf00      	nop
    }

    // set level to 0
    setLevel(0);
 8001100:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800111c <_ZN6PE43xx5beginEv+0x7c>
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f80b 	bl	8001120 <_ZN6PE43xx8setLevelEf>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	41fc0000 	.word	0x41fc0000
 8001118:	41f00000 	.word	0x41f00000
 800111c:	00000000 	.word	0x00000000

08001120 <_ZN6PE43xx8setLevelEf>:

bool PE43xx::setLevel(float level) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	ed87 0a00 	vstr	s0, [r7]
    // bounds check
    if(level < 0 || level > getMax() ) {
 800112c:	edd7 7a00 	vldr	s15, [r7]
 8001130:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	d40b      	bmi.n	8001152 <_ZN6PE43xx8setLevelEf+0x32>
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f879 	bl	8001232 <_ZN6PE43xx6getMaxEv>
 8001140:	eeb0 7a40 	vmov.f32	s14, s0
 8001144:	edd7 7a00 	vldr	s15, [r7]
 8001148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	dd01      	ble.n	8001156 <_ZN6PE43xx8setLevelEf+0x36>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <_ZN6PE43xx8setLevelEf+0x38>
 8001156:	2300      	movs	r3, #0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <_ZN6PE43xx8setLevelEf+0x40>
        return false;
 800115c:	2300      	movs	r3, #0
 800115e:	e006      	b.n	800116e <_ZN6PE43xx8setLevelEf+0x4e>
    }

    _level = level;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	64da      	str	r2, [r3, #76]	; 0x4c
    _writeLevel();
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f805 	bl	8001176 <_ZN6PE43xx11_writeLevelEv>

    return true;
 800116c:	2301      	movs	r3, #1
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <_ZN6PE43xx11_writeLevelEv>:

void PE43xx::_writeLevel() {
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
    //  1    1   1   1   1  => 31db

    // so the big different is that one can set the .5 bit or not

    // get the integer part, it will be the same for both chips
    int intlevel = int(_level);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001188:	ee17 3a90 	vmov	r3, s15
 800118c:	613b      	str	r3, [r7, #16]
    // default to 6 bits
    int bits = 6;
 800118e:	2306      	movs	r3, #6
 8001190:	60fb      	str	r3, [r7, #12]
            bitWrite(intlevel, 0, 0);
        }
    }*/

    // LE and CLOCK down to get the chip listen
    HAL_GPIO_WritePin(_le_port, _le_pin.Pin, GPIO_PIN_RESET);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	b29b      	uxth	r3, r3
 800119c:	2200      	movs	r2, #0
 800119e:	4619      	mov	r1, r3
 80011a0:	f004 f92e 	bl	8005400 <HAL_GPIO_WritePin>
    HAL_Delay(3);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f002 fc53 	bl	8003a50 <HAL_Delay>

    // Write the level out MSB first
    int b;
    for (int bit = bits; bit >= 0; bit--) {
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	e030      	b.n	8001212 <_ZN6PE43xx11_writeLevelEv+0x9c>
        b = ((intlevel << 1) >> bit) & 0x01;
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	005a      	lsls	r2, r3, #1
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa42 f303 	asr.w	r3, r2, r3
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]

        HAL_GPIO_WritePin(_clk_port, _clk_pin.Pin, GPIO_PIN_SET);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	2201      	movs	r2, #1
 80011cc:	4619      	mov	r1, r3
 80011ce:	f004 f917 	bl	8005400 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(_si_port, _si_pin.Pin, (b != 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	b299      	uxth	r1, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <_ZN6PE43xx11_writeLevelEv+0x70>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <_ZN6PE43xx11_writeLevelEv+0x72>
 80011e6:	2300      	movs	r3, #0
 80011e8:	461a      	mov	r2, r3
 80011ea:	f004 f909 	bl	8005400 <HAL_GPIO_WritePin>

        HAL_Delay(1);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f002 fc2e 	bl	8003a50 <HAL_Delay>

        HAL_GPIO_WritePin(_clk_port, _clk_pin.Pin, GPIO_PIN_RESET);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	2200      	movs	r2, #0
 8001200:	4619      	mov	r1, r3
 8001202:	f004 f8fd 	bl	8005400 <HAL_GPIO_WritePin>

        HAL_Delay(1);
 8001206:	2001      	movs	r0, #1
 8001208:	f002 fc22 	bl	8003a50 <HAL_Delay>
    for (int bit = bits; bit >= 0; bit--) {
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3b01      	subs	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2b00      	cmp	r3, #0
 8001216:	dacb      	bge.n	80011b0 <_ZN6PE43xx11_writeLevelEv+0x3a>
    }

    // toggle LE to latch
    HAL_GPIO_WritePin(_le_port, _le_pin.Pin, GPIO_PIN_SET);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	b29b      	uxth	r3, r3
 8001222:	2201      	movs	r2, #1
 8001224:	4619      	mov	r1, r3
 8001226:	f004 f8eb 	bl	8005400 <HAL_GPIO_WritePin>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_ZN6PE43xx6getMaxEv>:
// getters
float PE43xx::getLevel() {
    return _level;
}

float PE43xx::getMax() {
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
    return _max;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123e:	ee07 3a90 	vmov	s15, r3
}
 8001242:	eeb0 0a67 	vmov.f32	s0, s15
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>:
  /**
   * @brief Delay ~109nS function with nop function at F_CPU=64MHz
   *
   * @param val The delay circle(s). Delay time = 109.375nS * val.
   */
  inline void _PS_delay_100ns(uint32_t val)
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
    while (val-- > 0)
    {
      __asm__("nop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\t");
    }
#else
    HAL_Delay(val);
 800125a:	6838      	ldr	r0, [r7, #0]
 800125c:	f002 fbf8 	bl	8003a50 <HAL_Delay>
#endif
  }
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>:
#include "PhaseShifter.h"
#include "mapping.h"

#define abs(x) ((x) > 0 ? (x) : -(x))

PhaseShifter::PhaseShifter(GPIO_TypeDef* si_port, GPIO_InitTypeDef si_pin, GPIO_TypeDef* le_port, GPIO_InitTypeDef le_pin, GPIO_TypeDef* clk_port, GPIO_InitTypeDef clk_pin, uint8_t address, mode_e mode)
 8001268:	b082      	sub	sp, #8
 800126a:	b5b0      	push	{r4, r5, r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
 8001274:	f107 0118 	add.w	r1, r7, #24
 8001278:	e881 000c 	stmia.w	r1, {r2, r3}
{
  this->_data.raw = 0;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	801a      	strh	r2, [r3, #0]
  this->_address = address;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001288:	709a      	strb	r2, [r3, #2]
  this->_mode = mode;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001290:	70da      	strb	r2, [r3, #3]

  this->_si_pin = si_pin;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	1d1c      	adds	r4, r3, #4
 8001296:	f107 0518 	add.w	r5, r7, #24
 800129a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800129c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129e:	682b      	ldr	r3, [r5, #0]
 80012a0:	6023      	str	r3, [r4, #0]
  this->_le_pin = le_pin;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f103 0418 	add.w	r4, r3, #24
 80012a8:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80012ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b0:	682b      	ldr	r3, [r5, #0]
 80012b2:	6023      	str	r3, [r4, #0]
  this->_clk_pin = clk_pin;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80012ba:	f107 0548 	add.w	r5, r7, #72	; 0x48
 80012be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c2:	682b      	ldr	r3, [r5, #0]
 80012c4:	6023      	str	r3, [r4, #0]

  this->_si_port = si_port;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	641a      	str	r2, [r3, #64]	; 0x40
  this->_le_port = le_port;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44
  this->_clk_port = clk_port;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012d6:	649a      	str	r2, [r3, #72]	; 0x48

  begin();
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 f808 	bl	80012ee <_ZN12PhaseShifter5beginEv>
}
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80012ea:	b002      	add	sp, #8
 80012ec:	4770      	bx	lr

080012ee <_ZN12PhaseShifter5beginEv>:

void PhaseShifter::begin(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  /* GPIOs Initialize */
	//HAL_GPIO_Init(&this->_si_port, &this->_si_pin);
	HAL_GPIO_WritePin(this->_si_port, this->_si_pin.Pin, GPIO_PIN_RESET);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	f004 f87c 	bl	8005400 <HAL_GPIO_WritePin>

	//HAL_GPIO_Init(this->_le_port, this->_le_pin);
	HAL_GPIO_WritePin(this->_le_port, this->_le_pin.Pin, GPIO_PIN_RESET);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	b29b      	uxth	r3, r3
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	f004 f873 	bl	8005400 <HAL_GPIO_WritePin>

	//HAL_GPIO_Init(this->_clk_port,this->_clk_pin);
	HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_SET);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001322:	b29b      	uxth	r3, r3
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	f004 f86a 	bl	8005400 <HAL_GPIO_WritePin>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_ZN12PhaseShifter12dataShiftOutEh6data_u>:

void PhaseShifter::dataShiftOut(uint8_t addr, data_u data)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	803a      	strh	r2, [r7, #0]
 8001340:	70fb      	strb	r3, [r7, #3]
  int8_t bit_index;

  HAL_GPIO_WritePin(this->_le_port, this->_le_pin.Pin, GPIO_PIN_RESET);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	b29b      	uxth	r3, r3
 800134c:	2200      	movs	r2, #0
 800134e:	4619      	mov	r1, r3
 8001350:	f004 f856 	bl	8005400 <HAL_GPIO_WritePin>
  _PS_delay_100ns(1); // Tsettle > 10ns
 8001354:	2101      	movs	r1, #1
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ff7a 	bl	8001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>

  // Data
  for (bit_index = 0; bit_index < 8; bit_index++)
 800135c:	2300      	movs	r3, #0
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	e031      	b.n	80013c6 <_ZN12PhaseShifter12dataShiftOutEh6data_u+0x92>
  {
	  HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_SET);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136a:	b29b      	uxth	r3, r3
 800136c:	2201      	movs	r2, #1
 800136e:	4619      	mov	r1, r3
 8001370:	f004 f846 	bl	8005400 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(this->_si_port, this->_si_pin.Pin,(((data.data.data >> bit_index) & 0x01) != 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	b299      	uxth	r1, r3
 800137e:	783b      	ldrb	r3, [r7, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	fa42 f303 	asr.w	r3, r2, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	461a      	mov	r2, r3
 8001394:	f004 f834 	bl	8005400 <HAL_GPIO_WritePin>

    _PS_delay_100ns(3); // Tclkh > 30ns
 8001398:	2103      	movs	r1, #3
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff58 	bl	8001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>

	HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_RESET);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	f004 f827 	bl	8005400 <HAL_GPIO_WritePin>
    _PS_delay_100ns(3); // Tclkl > 30ns
 80013b2:	2103      	movs	r1, #3
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff4b 	bl	8001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>
  for (bit_index = 0; bit_index < 8; bit_index++)
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	2b07      	cmp	r3, #7
 80013cc:	ddc9      	ble.n	8001362 <_ZN12PhaseShifter12dataShiftOutEh6data_u+0x2e>
  }

  // OPT
  HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_SET);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2201      	movs	r2, #1
 80013da:	4619      	mov	r1, r3
 80013dc:	f004 f810 	bl	8005400 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(this->_si_port, this->_si_pin.Pin, (data.data.opt != 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	b299      	uxth	r1, r3
 80013ea:	787b      	ldrb	r3, [r7, #1]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	461a      	mov	r2, r3
 80013f4:	f004 f804 	bl	8005400 <HAL_GPIO_WritePin>
  _PS_delay_100ns(3); // Tclkh > 30ns
 80013f8:	2103      	movs	r1, #3
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ff28 	bl	8001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>

  HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_RESET);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	b29b      	uxth	r3, r3
 800140a:	2200      	movs	r2, #0
 800140c:	4619      	mov	r1, r3
 800140e:	f003 fff7 	bl	8005400 <HAL_GPIO_WritePin>
  _PS_delay_100ns(3); // Tclkl > 30ns
 8001412:	2103      	movs	r1, #3
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff1b 	bl	8001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>

  // Address
  for (bit_index = 0; bit_index < 4; bit_index++)
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	e030      	b.n	8001482 <_ZN12PhaseShifter12dataShiftOutEh6data_u+0x14e>
  {
	  HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_SET);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	b29b      	uxth	r3, r3
 800142a:	2201      	movs	r2, #1
 800142c:	4619      	mov	r1, r3
 800142e:	f003 ffe7 	bl	8005400 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(this->_si_port, this->_si_pin.Pin, (((addr >> bit_index) & 0x01) != 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	b299      	uxth	r1, r3
 800143c:	78fa      	ldrb	r2, [r7, #3]
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	fa42 f303 	asr.w	r3, r2, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	f003 ffd6 	bl	8005400 <HAL_GPIO_WritePin>
    _PS_delay_100ns(3); // Tclkh > 30ns
 8001454:	2103      	movs	r1, #3
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fefa 	bl	8001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>

    HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_RESET);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	b29b      	uxth	r3, r3
 8001466:	2200      	movs	r2, #0
 8001468:	4619      	mov	r1, r3
 800146a:	f003 ffc9 	bl	8005400 <HAL_GPIO_WritePin>
    _PS_delay_100ns(3); // Tclkl > 30ns
 800146e:	2103      	movs	r1, #3
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff feed 	bl	8001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>
  for (bit_index = 0; bit_index < 4; bit_index++)
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	3301      	adds	r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001486:	2b03      	cmp	r3, #3
 8001488:	ddca      	ble.n	8001420 <_ZN12PhaseShifter12dataShiftOutEh6data_u+0xec>
  }

  // Reset SI & SLK Pin
  HAL_GPIO_WritePin(this->_si_port, this->_si_pin.Pin, GPIO_PIN_RESET);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	b29b      	uxth	r3, r3
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	f003 ffb2 	bl	8005400 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_SET);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	2201      	movs	r2, #1
 80014a8:	4619      	mov	r1, r3
 80014aa:	f003 ffa9 	bl	8005400 <HAL_GPIO_WritePin>

  _PS_delay_100ns(1); // Tsettle > 10ns
 80014ae:	2101      	movs	r1, #1
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff fecd 	bl	8001250 <_ZN12PhaseShifter15_PS_delay_100nsEm>
  HAL_GPIO_WritePin(this->_le_port, this->_le_pin.Pin, GPIO_PIN_SET);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	2201      	movs	r2, #1
 80014c2:	4619      	mov	r1, r3
 80014c4:	f003 ff9c 	bl	8005400 <HAL_GPIO_WritePin>
}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_ZN12PhaseShifter9findAngleEf6mode_ePf>:

uint16_t PhaseShifter::findAngle(float angle, mode_e mode, float *foundAngle)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80014dc:	460b      	mov	r3, r1
 80014de:	603a      	str	r2, [r7, #0]
 80014e0:	71fb      	strb	r3, [r7, #7]
  uint16_t idx = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	83fb      	strh	r3, [r7, #30]
  int16_t targetAngle = angle * 10;
 80014e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80014ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f6:	ee17 3a90 	vmov	r3, s15
 80014fa:	837b      	strh	r3, [r7, #26]

  for (idx = 0; idx <= 255; idx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	83fb      	strh	r3, [r7, #30]
 8001500:	e00a      	b.n	8001518 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x48>
  {
    if (targetAngle <= PHASE_SHIFT_VALUE[idx])
 8001502:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001506:	8bfa      	ldrh	r2, [r7, #30]
 8001508:	4937      	ldr	r1, [pc, #220]	; (80015e8 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x118>)
 800150a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800150e:	4293      	cmp	r3, r2
 8001510:	dd06      	ble.n	8001520 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x50>
  for (idx = 0; idx <= 255; idx++)
 8001512:	8bfb      	ldrh	r3, [r7, #30]
 8001514:	3301      	adds	r3, #1
 8001516:	83fb      	strh	r3, [r7, #30]
 8001518:	8bfb      	ldrh	r3, [r7, #30]
 800151a:	2bff      	cmp	r3, #255	; 0xff
 800151c:	d9f1      	bls.n	8001502 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x32>
 800151e:	e000      	b.n	8001522 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x52>
    {
      break;
 8001520:	bf00      	nop
    }
  }

  if ((idx != 0) && (idx != 255))
 8001522:	8bfb      	ldrh	r3, [r7, #30]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d020      	beq.n	800156a <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x9a>
 8001528:	8bfb      	ldrh	r3, [r7, #30]
 800152a:	2bff      	cmp	r3, #255	; 0xff
 800152c:	d01d      	beq.n	800156a <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x9a>
  {
    uint16_t value1 = abs(targetAngle - PHASE_SHIFT_VALUE[idx - 1]);
 800152e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001532:	8bfa      	ldrh	r2, [r7, #30]
 8001534:	3a01      	subs	r2, #1
 8001536:	492c      	ldr	r1, [pc, #176]	; (80015e8 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x118>)
 8001538:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800153c:	1a9b      	subs	r3, r3, r2
 800153e:	2b00      	cmp	r3, #0
 8001540:	bfb8      	it	lt
 8001542:	425b      	neglt	r3, r3
 8001544:	833b      	strh	r3, [r7, #24]
    uint16_t value2 = abs(targetAngle - PHASE_SHIFT_VALUE[idx]);
 8001546:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800154a:	8bfa      	ldrh	r2, [r7, #30]
 800154c:	4926      	ldr	r1, [pc, #152]	; (80015e8 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x118>)
 800154e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	bfb8      	it	lt
 8001558:	425b      	neglt	r3, r3
 800155a:	82fb      	strh	r3, [r7, #22]

    if (value1 < value2)
 800155c:	8b3a      	ldrh	r2, [r7, #24]
 800155e:	8afb      	ldrh	r3, [r7, #22]
 8001560:	429a      	cmp	r2, r3
 8001562:	d202      	bcs.n	800156a <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x9a>
    {
      idx -= 1;
 8001564:	8bfb      	ldrh	r3, [r7, #30]
 8001566:	3b01      	subs	r3, #1
 8001568:	83fb      	strh	r3, [r7, #30]
    }
  }
  if (foundAngle != NULL)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d014      	beq.n	800159a <_ZN12PhaseShifter9findAngleEf6mode_ePf+0xca>
  {
    (*foundAngle) = PHASE_SHIFT_VALUE[idx] / 10.0;
 8001570:	8bfb      	ldrh	r3, [r7, #30]
 8001572:	4a1d      	ldr	r2, [pc, #116]	; (80015e8 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x118>)
 8001574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe fff3 	bl	8000564 <__aeabi_i2d>
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x11c>)
 8001584:	f7ff f982 	bl	800088c <__aeabi_ddiv>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fb4a 	bl	8000c28 <__aeabi_d2f>
 8001594:	4602      	mov	r2, r0
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	601a      	str	r2, [r3, #0]
  }

  uint16_t retVal = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	83bb      	strh	r3, [r7, #28]
  switch (mode)
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d012      	beq.n	80015ca <_ZN12PhaseShifter9findAngleEf6mode_ePf+0xfa>
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	dc16      	bgt.n	80015d6 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x106>
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0xe2>
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d006      	beq.n	80015be <_ZN12PhaseShifter9findAngleEf6mode_ePf+0xee>
 80015b0:	e011      	b.n	80015d6 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x106>
  {
  case MODE_BINARY_WEIGHTED:
    retVal = BINARY_WEIGHTED_DATA[idx];
 80015b2:	8bfb      	ldrh	r3, [r7, #30]
 80015b4:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x120>)
 80015b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ba:	83bb      	strh	r3, [r7, #28]
    break;
 80015bc:	e00e      	b.n	80015dc <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x10c>
  case MODE_OPT_1700_2200:
    retVal = OPT_1700_2200_DATA[idx];
 80015be:	8bfb      	ldrh	r3, [r7, #30]
 80015c0:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x124>)
 80015c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015c6:	83bb      	strh	r3, [r7, #28]
    break;
 80015c8:	e008      	b.n	80015dc <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x10c>
  case MODE_OPT_2600:
    retVal = OPT_2600_DATA[idx];
 80015ca:	8bfb      	ldrh	r3, [r7, #30]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x128>)
 80015ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015d2:	83bb      	strh	r3, [r7, #28]
    break;
 80015d4:	e002      	b.n	80015dc <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x10c>
  default:
    retVal = 0x0000;
 80015d6:	2300      	movs	r3, #0
 80015d8:	83bb      	strh	r3, [r7, #28]
    break;
 80015da:	bf00      	nop
  }

  return retVal;
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	0801a188 	.word	0x0801a188
 80015ec:	40240000 	.word	0x40240000
 80015f0:	0801a788 	.word	0x0801a788
 80015f4:	0801a388 	.word	0x0801a388
 80015f8:	0801a588 	.word	0x0801a588

080015fc <_ZN12PhaseShifter8setAngleEf>:

float PhaseShifter::setAngle(float angle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	ed87 0a00 	vstr	s0, [r7]
  float foundAngle = 0;
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]

  if (angle < 0)
 800160e:	edd7 7a00 	vldr	s15, [r7]
 8001612:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161a:	d502      	bpl.n	8001622 <_ZN12PhaseShifter8setAngleEf+0x26>
    angle = 0;
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	603b      	str	r3, [r7, #0]
  for (;angle > 360;){
 8001622:	e007      	b.n	8001634 <_ZN12PhaseShifter8setAngleEf+0x38>
	 angle -= 360;
 8001624:	edd7 7a00 	vldr	s15, [r7]
 8001628:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001680 <_ZN12PhaseShifter8setAngleEf+0x84>
 800162c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001630:	edc7 7a00 	vstr	s15, [r7]
  for (;angle > 360;){
 8001634:	edd7 7a00 	vldr	s15, [r7]
 8001638:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001680 <_ZN12PhaseShifter8setAngleEf+0x84>
 800163c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001644:	dcee      	bgt.n	8001624 <_ZN12PhaseShifter8setAngleEf+0x28>
  }


  this->_data.raw = findAngle(angle, this->_mode, &foundAngle);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	78db      	ldrb	r3, [r3, #3]
 800164a:	f107 020c 	add.w	r2, r7, #12
 800164e:	4619      	mov	r1, r3
 8001650:	ed97 0a00 	vldr	s0, [r7]
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff3b 	bl	80014d0 <_ZN12PhaseShifter9findAngleEf6mode_ePf>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	801a      	strh	r2, [r3, #0]
  this->dataShiftOut(this->_address, this->_data);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7899      	ldrb	r1, [r3, #2]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	881a      	ldrh	r2, [r3, #0]
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fe62 	bl	8001334 <_ZN12PhaseShifter12dataShiftOutEh6data_u>

  return foundAngle;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	ee07 3a90 	vmov	s15, r3
}
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	43b40000 	.word	0x43b40000
 8001684:	00000000 	.word	0x00000000

08001688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168a:	ed2d 8b02 	vpush	{d8}
 800168e:	f2ad 7d5c 	subw	sp, sp, #1884	; 0x75c
 8001692:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001694:	f002 f96a 	bl	800396c <HAL_Init>

  /* USER CODE BEGIN Init */

  GPIO_InitTypeDef GPIO_InitStruct_Si = {
 8001698:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
 80016a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ac:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 80016b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016b4:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
		  .Pin = SI_Pin,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le = {
 80016b8:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016cc:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
 80016d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016d4:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
		  .Pin = LE_Pin,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Clk = {
 80016d8:	f207 63ac 	addw	r3, r7, #1708	; 0x6ac
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016ec:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 80016f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016f4:	f8c7 36b0 	str.w	r3, [r7, #1712]	; 0x6b0
		  .Pin = CLK_Pin,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Si_Att = {
 80016f8:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
 8001708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170c:	f8c7 3698 	str.w	r3, [r7, #1688]	; 0x698
 8001710:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001714:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
		  .Pin = SDI_Att_Pin,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Clk_Att = {
 8001718:	f207 6384 	addw	r3, r7, #1668	; 0x684
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800172c:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 8001730:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001734:	f8c7 3688 	str.w	r3, [r7, #1672]	; 0x688
		  .Pin = CLK_Att_Pin,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att_A = {
 8001738:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
 8001748:	2308      	movs	r3, #8
 800174a:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
 800174e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001752:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
		  .Pin = LE_ATT_PIN_A,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att_B = {
 8001756:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	2308      	movs	r3, #8
 8001768:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 800176c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001770:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
		  .Pin = LE_ATT_PIN_B,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att_C = {
 8001774:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
 8001784:	2309      	movs	r3, #9
 8001786:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 800178a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800178e:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
		  .Pin = LE_ATT_PIN_C,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att_D = {
 8001792:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]
 80017a2:	230c      	movs	r3, #12
 80017a4:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 80017a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017ac:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638
		  .Pin = LE_ATT_PIN_D,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att_E = {
 80017b0:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
 80017c0:	2308      	movs	r3, #8
 80017c2:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 80017c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017ca:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
		  .Pin = LE_ATT_PIN_E,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att_F = {
 80017ce:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80017d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017d6:	461a      	mov	r2, r3
 80017d8:	2300      	movs	r3, #0
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	6053      	str	r3, [r2, #4]
 80017de:	6093      	str	r3, [r2, #8]
 80017e0:	60d3      	str	r3, [r2, #12]
 80017e2:	6113      	str	r3, [r2, #16]
 80017e4:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80017e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017ec:	220e      	movs	r2, #14
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80017f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017f8:	f44f 1204 	mov.w	r2, #2162688	; 0x210000
 80017fc:	605a      	str	r2, [r3, #4]
		  .Pin = LE_ATT_PIN_F,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att_G = {
 80017fe:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001802:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001806:	461a      	mov	r2, r3
 8001808:	2300      	movs	r3, #0
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	6053      	str	r3, [r2, #4]
 800180e:	6093      	str	r3, [r2, #8]
 8001810:	60d3      	str	r3, [r2, #12]
 8001812:	6113      	str	r3, [r2, #16]
 8001814:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001818:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800181c:	220b      	movs	r2, #11
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001824:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001828:	f44f 1204 	mov.w	r2, #2162688	; 0x210000
 800182c:	605a      	str	r2, [r3, #4]
		  .Pin = LE_ATT_PIN_G,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att_H = {
 800182e:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001832:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001836:	461a      	mov	r2, r3
 8001838:	2300      	movs	r3, #0
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	6053      	str	r3, [r2, #4]
 800183e:	6093      	str	r3, [r2, #8]
 8001840:	60d3      	str	r3, [r2, #12]
 8001842:	6113      	str	r3, [r2, #16]
 8001844:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001848:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001854:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001858:	f44f 1204 	mov.w	r2, #2162688	; 0x210000
 800185c:	605a      	str	r2, [r3, #4]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185e:	f000 fdbd 	bl	80023dc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001862:	f000 ff07 	bl	8002674 <_ZL12MX_GPIO_Initv>
  //MX_ETH_Init();
  MX_USART3_UART_Init();
 8001866:	f000 fea5 	bl	80025b4 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 800186a:	f000 fed1 	bl	8002610 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_SPI1_Init();
 800186e:	f000 fe29 	bl	80024c4 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8001872:	f000 fe63 	bl	800253c <_ZL12MX_SPI2_Initv>
  MX_LWIP_Init();
 8001876:	f005 fb17 	bl	8006ea8 <MX_LWIP_Init>
  //MX_LWIP_Init();
  /* USER CODE BEGIN 2 */

  server_pcb = tcp_server_init();
 800187a:	f001 fc13 	bl	80030a4 <_Z15tcp_server_initv>
 800187e:	4603      	mov	r3, r0
 8001880:	4aab      	ldr	r2, [pc, #684]	; (8001b30 <main+0x4a8>)
 8001882:	6013      	str	r3, [r2, #0]

  char *cmd, *arg, *option;
  char serial_output[100] = "";
 8001884:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001888:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	3304      	adds	r3, #4
 8001892:	2260      	movs	r2, #96	; 0x60
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f013 fb82 	bl	8014fa0 <memset>

  antenna_distance = 0.05;
 800189c:	4ba5      	ldr	r3, [pc, #660]	; (8001b34 <main+0x4ac>)
 800189e:	4aa6      	ldr	r2, [pc, #664]	; (8001b38 <main+0x4b0>)
 80018a0:	601a      	str	r2, [r3, #0]

  PhaseShifter pe44820_A = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x000, MODE_BINARY_WEIGHTED);
 80018a2:	f207 5634 	addw	r6, r7, #1332	; 0x534
 80018a6:	2300      	movs	r3, #0
 80018a8:	9310      	str	r3, [sp, #64]	; 0x40
 80018aa:	2300      	movs	r3, #0
 80018ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80018ae:	ad0a      	add	r5, sp, #40	; 0x28
 80018b0:	f207 64ac 	addw	r4, r7, #1708	; 0x6ac
 80018b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	602b      	str	r3, [r5, #0]
 80018bc:	4b9f      	ldr	r3, [pc, #636]	; (8001b3c <main+0x4b4>)
 80018be:	9309      	str	r3, [sp, #36]	; 0x24
 80018c0:	ad04      	add	r5, sp, #16
 80018c2:	f507 64d8 	add.w	r4, r7, #1728	; 0x6c0
 80018c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	602b      	str	r3, [r5, #0]
 80018ce:	4b9c      	ldr	r3, [pc, #624]	; (8001b40 <main+0x4b8>)
 80018d0:	9303      	str	r3, [sp, #12]
 80018d2:	466c      	mov	r4, sp
 80018d4:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80018d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80018e0:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 80018e4:	cb0c      	ldmia	r3, {r2, r3}
 80018e6:	4995      	ldr	r1, [pc, #596]	; (8001b3c <main+0x4b4>)
 80018e8:	4630      	mov	r0, r6
 80018ea:	f7ff fcbd 	bl	8001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>
  PhaseShifter pe44820_B = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x001, MODE_BINARY_WEIGHTED);
 80018ee:	f507 669d 	add.w	r6, r7, #1256	; 0x4e8
 80018f2:	2300      	movs	r3, #0
 80018f4:	9310      	str	r3, [sp, #64]	; 0x40
 80018f6:	2301      	movs	r3, #1
 80018f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80018fa:	ad0a      	add	r5, sp, #40	; 0x28
 80018fc:	f207 64ac 	addw	r4, r7, #1708	; 0x6ac
 8001900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	602b      	str	r3, [r5, #0]
 8001908:	4b8c      	ldr	r3, [pc, #560]	; (8001b3c <main+0x4b4>)
 800190a:	9309      	str	r3, [sp, #36]	; 0x24
 800190c:	ad04      	add	r5, sp, #16
 800190e:	f507 64d8 	add.w	r4, r7, #1728	; 0x6c0
 8001912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	602b      	str	r3, [r5, #0]
 800191a:	4b89      	ldr	r3, [pc, #548]	; (8001b40 <main+0x4b8>)
 800191c:	9303      	str	r3, [sp, #12]
 800191e:	466c      	mov	r4, sp
 8001920:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8001924:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001928:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800192c:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 8001930:	cb0c      	ldmia	r3, {r2, r3}
 8001932:	4982      	ldr	r1, [pc, #520]	; (8001b3c <main+0x4b4>)
 8001934:	4630      	mov	r0, r6
 8001936:	f7ff fc97 	bl	8001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>
  PhaseShifter pe44820_C = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x002, MODE_BINARY_WEIGHTED);
 800193a:	f207 469c 	addw	r6, r7, #1180	; 0x49c
 800193e:	2300      	movs	r3, #0
 8001940:	9310      	str	r3, [sp, #64]	; 0x40
 8001942:	2302      	movs	r3, #2
 8001944:	930f      	str	r3, [sp, #60]	; 0x3c
 8001946:	ad0a      	add	r5, sp, #40	; 0x28
 8001948:	f207 64ac 	addw	r4, r7, #1708	; 0x6ac
 800194c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800194e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	602b      	str	r3, [r5, #0]
 8001954:	4b79      	ldr	r3, [pc, #484]	; (8001b3c <main+0x4b4>)
 8001956:	9309      	str	r3, [sp, #36]	; 0x24
 8001958:	ad04      	add	r5, sp, #16
 800195a:	f507 64d8 	add.w	r4, r7, #1728	; 0x6c0
 800195e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	602b      	str	r3, [r5, #0]
 8001966:	4b76      	ldr	r3, [pc, #472]	; (8001b40 <main+0x4b8>)
 8001968:	9303      	str	r3, [sp, #12]
 800196a:	466c      	mov	r4, sp
 800196c:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8001970:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001974:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001978:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 800197c:	cb0c      	ldmia	r3, {r2, r3}
 800197e:	496f      	ldr	r1, [pc, #444]	; (8001b3c <main+0x4b4>)
 8001980:	4630      	mov	r0, r6
 8001982:	f7ff fc71 	bl	8001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>
  PhaseShifter pe44820_D = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x003, MODE_BINARY_WEIGHTED);
 8001986:	f507 668a 	add.w	r6, r7, #1104	; 0x450
 800198a:	2300      	movs	r3, #0
 800198c:	9310      	str	r3, [sp, #64]	; 0x40
 800198e:	2303      	movs	r3, #3
 8001990:	930f      	str	r3, [sp, #60]	; 0x3c
 8001992:	ad0a      	add	r5, sp, #40	; 0x28
 8001994:	f207 64ac 	addw	r4, r7, #1708	; 0x6ac
 8001998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	602b      	str	r3, [r5, #0]
 80019a0:	4b66      	ldr	r3, [pc, #408]	; (8001b3c <main+0x4b4>)
 80019a2:	9309      	str	r3, [sp, #36]	; 0x24
 80019a4:	ad04      	add	r5, sp, #16
 80019a6:	f507 64d8 	add.w	r4, r7, #1728	; 0x6c0
 80019aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	602b      	str	r3, [r5, #0]
 80019b2:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <main+0x4b8>)
 80019b4:	9303      	str	r3, [sp, #12]
 80019b6:	466c      	mov	r4, sp
 80019b8:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80019bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019c4:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 80019c8:	cb0c      	ldmia	r3, {r2, r3}
 80019ca:	495c      	ldr	r1, [pc, #368]	; (8001b3c <main+0x4b4>)
 80019cc:	4630      	mov	r0, r6
 80019ce:	f7ff fc4b 	bl	8001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>
  PhaseShifter pe44820_E = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x004, MODE_BINARY_WEIGHTED);
 80019d2:	f207 4604 	addw	r6, r7, #1028	; 0x404
 80019d6:	2300      	movs	r3, #0
 80019d8:	9310      	str	r3, [sp, #64]	; 0x40
 80019da:	2304      	movs	r3, #4
 80019dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80019de:	ad0a      	add	r5, sp, #40	; 0x28
 80019e0:	f207 64ac 	addw	r4, r7, #1708	; 0x6ac
 80019e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	602b      	str	r3, [r5, #0]
 80019ec:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <main+0x4b4>)
 80019ee:	9309      	str	r3, [sp, #36]	; 0x24
 80019f0:	ad04      	add	r5, sp, #16
 80019f2:	f507 64d8 	add.w	r4, r7, #1728	; 0x6c0
 80019f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	602b      	str	r3, [r5, #0]
 80019fe:	4b50      	ldr	r3, [pc, #320]	; (8001b40 <main+0x4b8>)
 8001a00:	9303      	str	r3, [sp, #12]
 8001a02:	466c      	mov	r4, sp
 8001a04:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8001a08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a10:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 8001a14:	cb0c      	ldmia	r3, {r2, r3}
 8001a16:	4949      	ldr	r1, [pc, #292]	; (8001b3c <main+0x4b4>)
 8001a18:	4630      	mov	r0, r6
 8001a1a:	f7ff fc25 	bl	8001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>
  PhaseShifter pe44820_F = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x005, MODE_BINARY_WEIGHTED);
 8001a1e:	f507 766e 	add.w	r6, r7, #952	; 0x3b8
 8001a22:	2300      	movs	r3, #0
 8001a24:	9310      	str	r3, [sp, #64]	; 0x40
 8001a26:	2305      	movs	r3, #5
 8001a28:	930f      	str	r3, [sp, #60]	; 0x3c
 8001a2a:	ad0a      	add	r5, sp, #40	; 0x28
 8001a2c:	f207 64ac 	addw	r4, r7, #1708	; 0x6ac
 8001a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	602b      	str	r3, [r5, #0]
 8001a38:	4b40      	ldr	r3, [pc, #256]	; (8001b3c <main+0x4b4>)
 8001a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8001a3c:	ad04      	add	r5, sp, #16
 8001a3e:	f507 64d8 	add.w	r4, r7, #1728	; 0x6c0
 8001a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	602b      	str	r3, [r5, #0]
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	; (8001b40 <main+0x4b8>)
 8001a4c:	9303      	str	r3, [sp, #12]
 8001a4e:	466c      	mov	r4, sp
 8001a50:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8001a54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a5c:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 8001a60:	cb0c      	ldmia	r3, {r2, r3}
 8001a62:	4936      	ldr	r1, [pc, #216]	; (8001b3c <main+0x4b4>)
 8001a64:	4630      	mov	r0, r6
 8001a66:	f7ff fbff 	bl	8001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>
  PhaseShifter pe44820_G = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x006, MODE_BINARY_WEIGHTED);
 8001a6a:	f507 765b 	add.w	r6, r7, #876	; 0x36c
 8001a6e:	2300      	movs	r3, #0
 8001a70:	9310      	str	r3, [sp, #64]	; 0x40
 8001a72:	2306      	movs	r3, #6
 8001a74:	930f      	str	r3, [sp, #60]	; 0x3c
 8001a76:	ad0a      	add	r5, sp, #40	; 0x28
 8001a78:	f207 64ac 	addw	r4, r7, #1708	; 0x6ac
 8001a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	602b      	str	r3, [r5, #0]
 8001a84:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <main+0x4b4>)
 8001a86:	9309      	str	r3, [sp, #36]	; 0x24
 8001a88:	ad04      	add	r5, sp, #16
 8001a8a:	f507 64d8 	add.w	r4, r7, #1728	; 0x6c0
 8001a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	602b      	str	r3, [r5, #0]
 8001a96:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <main+0x4b8>)
 8001a98:	9303      	str	r3, [sp, #12]
 8001a9a:	466c      	mov	r4, sp
 8001a9c:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8001aa0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001aa4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001aa8:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 8001aac:	cb0c      	ldmia	r3, {r2, r3}
 8001aae:	4923      	ldr	r1, [pc, #140]	; (8001b3c <main+0x4b4>)
 8001ab0:	4630      	mov	r0, r6
 8001ab2:	f7ff fbd9 	bl	8001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>
  PhaseShifter pe44820_H = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x007, MODE_BINARY_WEIGHTED);
 8001ab6:	f507 7648 	add.w	r6, r7, #800	; 0x320
 8001aba:	2300      	movs	r3, #0
 8001abc:	9310      	str	r3, [sp, #64]	; 0x40
 8001abe:	2307      	movs	r3, #7
 8001ac0:	930f      	str	r3, [sp, #60]	; 0x3c
 8001ac2:	ad0a      	add	r5, sp, #40	; 0x28
 8001ac4:	f207 64ac 	addw	r4, r7, #1708	; 0x6ac
 8001ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	602b      	str	r3, [r5, #0]
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <main+0x4b4>)
 8001ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8001ad4:	ad04      	add	r5, sp, #16
 8001ad6:	f507 64d8 	add.w	r4, r7, #1728	; 0x6c0
 8001ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ade:	6823      	ldr	r3, [r4, #0]
 8001ae0:	602b      	str	r3, [r5, #0]
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <main+0x4b8>)
 8001ae4:	9303      	str	r3, [sp, #12]
 8001ae6:	466c      	mov	r4, sp
 8001ae8:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8001aec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001af0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001af4:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 8001af8:	cb0c      	ldmia	r3, {r2, r3}
 8001afa:	4910      	ldr	r1, [pc, #64]	; (8001b3c <main+0x4b4>)
 8001afc:	4630      	mov	r0, r6
 8001afe:	f7ff fbb3 	bl	8001268 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>


  PE43xx pe4312_A = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, LE_ATT_PORT_A, GPIO_InitStruct_Le_Att_A, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001b02:	f507 7632 	add.w	r6, r7, #712	; 0x2c8
 8001b06:	2300      	movs	r3, #0
 8001b08:	9310      	str	r3, [sp, #64]	; 0x40
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8001b0e:	ad0a      	add	r5, sp, #40	; 0x28
 8001b10:	f207 6484 	addw	r4, r7, #1668	; 0x684
 8001b14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	602b      	str	r3, [r5, #0]
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <main+0x4bc>)
 8001b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8001b20:	ad04      	add	r5, sp, #16
 8001b22:	f507 64ce 	add.w	r4, r7, #1648	; 0x670
 8001b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	e00c      	b.n	8001b48 <main+0x4c0>
 8001b2e:	bf00      	nop
 8001b30:	20000864 	.word	0x20000864
 8001b34:	20000860 	.word	0x20000860
 8001b38:	3d4ccccd 	.word	0x3d4ccccd
 8001b3c:	40020c00 	.word	0x40020c00
 8001b40:	40021400 	.word	0x40021400
 8001b44:	40021000 	.word	0x40021000
 8001b48:	602b      	str	r3, [r5, #0]
 8001b4a:	4bb6      	ldr	r3, [pc, #728]	; (8001e24 <main+0x79c>)
 8001b4c:	9303      	str	r3, [sp, #12]
 8001b4e:	466c      	mov	r4, sp
 8001b50:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8001b54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b5c:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8001b60:	cb0c      	ldmia	r3, {r2, r3}
 8001b62:	49b1      	ldr	r1, [pc, #708]	; (8001e28 <main+0x7a0>)
 8001b64:	4630      	mov	r0, r6
 8001b66:	f7ff fa63 	bl	8001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>
  PE43xx pe4312_B = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, LE_ATT_PORT_B, GPIO_InitStruct_Le_Att_B, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001b6a:	f507 761c 	add.w	r6, r7, #624	; 0x270
 8001b6e:	2300      	movs	r3, #0
 8001b70:	9310      	str	r3, [sp, #64]	; 0x40
 8001b72:	2300      	movs	r3, #0
 8001b74:	930f      	str	r3, [sp, #60]	; 0x3c
 8001b76:	ad0a      	add	r5, sp, #40	; 0x28
 8001b78:	f207 6484 	addw	r4, r7, #1668	; 0x684
 8001b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	602b      	str	r3, [r5, #0]
 8001b84:	4ba8      	ldr	r3, [pc, #672]	; (8001e28 <main+0x7a0>)
 8001b86:	9309      	str	r3, [sp, #36]	; 0x24
 8001b88:	ad04      	add	r5, sp, #16
 8001b8a:	f207 645c 	addw	r4, r7, #1628	; 0x65c
 8001b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	602b      	str	r3, [r5, #0]
 8001b96:	4ba5      	ldr	r3, [pc, #660]	; (8001e2c <main+0x7a4>)
 8001b98:	9303      	str	r3, [sp, #12]
 8001b9a:	466c      	mov	r4, sp
 8001b9c:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8001ba0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ba4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ba8:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8001bac:	cb0c      	ldmia	r3, {r2, r3}
 8001bae:	499e      	ldr	r1, [pc, #632]	; (8001e28 <main+0x7a0>)
 8001bb0:	4630      	mov	r0, r6
 8001bb2:	f7ff fa3d 	bl	8001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>
  PE43xx pe4312_C = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, LE_ATT_PORT_C, GPIO_InitStruct_Le_Att_C, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001bb6:	f507 7606 	add.w	r6, r7, #536	; 0x218
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9310      	str	r3, [sp, #64]	; 0x40
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8001bc2:	ad0a      	add	r5, sp, #40	; 0x28
 8001bc4:	f207 6484 	addw	r4, r7, #1668	; 0x684
 8001bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	602b      	str	r3, [r5, #0]
 8001bd0:	4b95      	ldr	r3, [pc, #596]	; (8001e28 <main+0x7a0>)
 8001bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8001bd4:	ad04      	add	r5, sp, #16
 8001bd6:	f507 64c9 	add.w	r4, r7, #1608	; 0x648
 8001bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	602b      	str	r3, [r5, #0]
 8001be2:	4b92      	ldr	r3, [pc, #584]	; (8001e2c <main+0x7a4>)
 8001be4:	9303      	str	r3, [sp, #12]
 8001be6:	466c      	mov	r4, sp
 8001be8:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8001bec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001bf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001bf4:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8001bf8:	cb0c      	ldmia	r3, {r2, r3}
 8001bfa:	498b      	ldr	r1, [pc, #556]	; (8001e28 <main+0x7a0>)
 8001bfc:	4630      	mov	r0, r6
 8001bfe:	f7ff fa17 	bl	8001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>
  PE43xx pe4312_D = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, LE_ATT_PORT_D, GPIO_InitStruct_Le_Att_D, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001c02:	f507 76e0 	add.w	r6, r7, #448	; 0x1c0
 8001c06:	2300      	movs	r3, #0
 8001c08:	9310      	str	r3, [sp, #64]	; 0x40
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c0e:	ad0a      	add	r5, sp, #40	; 0x28
 8001c10:	f207 6484 	addw	r4, r7, #1668	; 0x684
 8001c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	602b      	str	r3, [r5, #0]
 8001c1c:	4b82      	ldr	r3, [pc, #520]	; (8001e28 <main+0x7a0>)
 8001c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8001c20:	ad04      	add	r5, sp, #16
 8001c22:	f207 6434 	addw	r4, r7, #1588	; 0x634
 8001c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	602b      	str	r3, [r5, #0]
 8001c2e:	4b80      	ldr	r3, [pc, #512]	; (8001e30 <main+0x7a8>)
 8001c30:	9303      	str	r3, [sp, #12]
 8001c32:	466c      	mov	r4, sp
 8001c34:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8001c38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c40:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8001c44:	cb0c      	ldmia	r3, {r2, r3}
 8001c46:	4978      	ldr	r1, [pc, #480]	; (8001e28 <main+0x7a0>)
 8001c48:	4630      	mov	r0, r6
 8001c4a:	f7ff f9f1 	bl	8001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>
  PE43xx pe4312_E = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, LE_ATT_PORT_E, GPIO_InitStruct_Le_Att_E, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001c4e:	f507 76b4 	add.w	r6, r7, #360	; 0x168
 8001c52:	2300      	movs	r3, #0
 8001c54:	9310      	str	r3, [sp, #64]	; 0x40
 8001c56:	2300      	movs	r3, #0
 8001c58:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c5a:	ad0a      	add	r5, sp, #40	; 0x28
 8001c5c:	f207 6484 	addw	r4, r7, #1668	; 0x684
 8001c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	602b      	str	r3, [r5, #0]
 8001c68:	4b6f      	ldr	r3, [pc, #444]	; (8001e28 <main+0x7a0>)
 8001c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8001c6c:	ad04      	add	r5, sp, #16
 8001c6e:	f507 64c4 	add.w	r4, r7, #1568	; 0x620
 8001c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	602b      	str	r3, [r5, #0]
 8001c7a:	4b6b      	ldr	r3, [pc, #428]	; (8001e28 <main+0x7a0>)
 8001c7c:	9303      	str	r3, [sp, #12]
 8001c7e:	466c      	mov	r4, sp
 8001c80:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8001c84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c8c:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8001c90:	cb0c      	ldmia	r3, {r2, r3}
 8001c92:	4965      	ldr	r1, [pc, #404]	; (8001e28 <main+0x7a0>)
 8001c94:	4630      	mov	r0, r6
 8001c96:	f7ff f9cb 	bl	8001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>
  PE43xx pe4312_F = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, LE_ATT_PORT_F, GPIO_InitStruct_Le_Att_F, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001c9a:	f507 7688 	add.w	r6, r7, #272	; 0x110
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9310      	str	r3, [sp, #64]	; 0x40
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	930f      	str	r3, [sp, #60]	; 0x3c
 8001ca6:	ad0a      	add	r5, sp, #40	; 0x28
 8001ca8:	f207 6484 	addw	r4, r7, #1668	; 0x684
 8001cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	602b      	str	r3, [r5, #0]
 8001cb4:	4b5c      	ldr	r3, [pc, #368]	; (8001e28 <main+0x7a0>)
 8001cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8001cb8:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001cbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cc0:	ac04      	add	r4, sp, #16
 8001cc2:	461d      	mov	r5, r3
 8001cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc8:	682b      	ldr	r3, [r5, #0]
 8001cca:	6023      	str	r3, [r4, #0]
 8001ccc:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <main+0x7a0>)
 8001cce:	9303      	str	r3, [sp, #12]
 8001cd0:	466c      	mov	r4, sp
 8001cd2:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8001cd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cde:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8001ce2:	cb0c      	ldmia	r3, {r2, r3}
 8001ce4:	4950      	ldr	r1, [pc, #320]	; (8001e28 <main+0x7a0>)
 8001ce6:	4630      	mov	r0, r6
 8001ce8:	f7ff f9a2 	bl	8001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>
  PE43xx pe4312_G = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, LE_ATT_PORT_G, GPIO_InitStruct_Le_Att_G, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001cec:	f107 06b8 	add.w	r6, r7, #184	; 0xb8
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9310      	str	r3, [sp, #64]	; 0x40
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8001cf8:	ad0a      	add	r5, sp, #40	; 0x28
 8001cfa:	f207 6484 	addw	r4, r7, #1668	; 0x684
 8001cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	602b      	str	r3, [r5, #0]
 8001d06:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <main+0x7a0>)
 8001d08:	9309      	str	r3, [sp, #36]	; 0x24
 8001d0a:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001d0e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d12:	ac04      	add	r4, sp, #16
 8001d14:	461d      	mov	r5, r3
 8001d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d1a:	682b      	ldr	r3, [r5, #0]
 8001d1c:	6023      	str	r3, [r4, #0]
 8001d1e:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <main+0x7a4>)
 8001d20:	9303      	str	r3, [sp, #12]
 8001d22:	466c      	mov	r4, sp
 8001d24:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8001d28:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d30:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8001d34:	cb0c      	ldmia	r3, {r2, r3}
 8001d36:	493c      	ldr	r1, [pc, #240]	; (8001e28 <main+0x7a0>)
 8001d38:	4630      	mov	r0, r6
 8001d3a:	f7ff f979 	bl	8001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>
  PE43xx pe4312_H = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, LE_ATT_PORT_H, GPIO_InitStruct_Le_Att_H, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001d3e:	f107 0660 	add.w	r6, r7, #96	; 0x60
 8001d42:	2300      	movs	r3, #0
 8001d44:	9310      	str	r3, [sp, #64]	; 0x40
 8001d46:	2300      	movs	r3, #0
 8001d48:	930f      	str	r3, [sp, #60]	; 0x3c
 8001d4a:	ad0a      	add	r5, sp, #40	; 0x28
 8001d4c:	f207 6484 	addw	r4, r7, #1668	; 0x684
 8001d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	602b      	str	r3, [r5, #0]
 8001d58:	4b33      	ldr	r3, [pc, #204]	; (8001e28 <main+0x7a0>)
 8001d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8001d5c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001d60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d64:	ac04      	add	r4, sp, #16
 8001d66:	461d      	mov	r5, r3
 8001d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d6c:	682b      	ldr	r3, [r5, #0]
 8001d6e:	6023      	str	r3, [r4, #0]
 8001d70:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <main+0x7ac>)
 8001d72:	9303      	str	r3, [sp, #12]
 8001d74:	466c      	mov	r4, sp
 8001d76:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8001d7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d82:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8001d86:	cb0c      	ldmia	r3, {r2, r3}
 8001d88:	4927      	ldr	r1, [pc, #156]	; (8001e28 <main+0x7a0>)
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	f7ff f950 	bl	8001030 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>

  HAL_GPIO_WritePin(GPIOC, LE_Att_Pin, GPIO_PIN_RESET);
 8001d90:	2200      	movs	r2, #0
 8001d92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d96:	4823      	ldr	r0, [pc, #140]	; (8001e24 <main+0x79c>)
 8001d98:	f003 fb32 	bl	8005400 <HAL_GPIO_WritePin>

  // Define the size of the vectors
  int size = 8;
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
  double vectorD[8];
  int vectorA[8];

  // Initialize the vectors to zero
  memset(vectorD, 0, sizeof(vectorD));
 8001da2:	f107 0320 	add.w	r3, r7, #32
 8001da6:	2240      	movs	r2, #64	; 0x40
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f013 f8f8 	bl	8014fa0 <memset>
  memset(vectorA, 0, sizeof(vectorA));
 8001db0:	463b      	mov	r3, r7
 8001db2:	2220      	movs	r2, #32
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f013 f8f2 	bl	8014fa0 <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8001dbc:	f005 f9b4 	bl	8007128 <MX_LWIP_Process>
	  if(input[0] != '\0'){
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <main+0x7b0>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f9      	beq.n	8001dbc <main+0x734>

	  		  cmd = strtok(input, " ");
 8001dc8:	491c      	ldr	r1, [pc, #112]	; (8001e3c <main+0x7b4>)
 8001dca:	481b      	ldr	r0, [pc, #108]	; (8001e38 <main+0x7b0>)
 8001dcc:	f013 f928 	bl	8015020 <strtok>
 8001dd0:	f8c7 0708 	str.w	r0, [r7, #1800]	; 0x708
	  		  arg = strtok(NULL, " ");
 8001dd4:	4919      	ldr	r1, [pc, #100]	; (8001e3c <main+0x7b4>)
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f013 f922 	bl	8015020 <strtok>
 8001ddc:	f8c7 0704 	str.w	r0, [r7, #1796]	; 0x704
	  		  option = strtok(NULL, " ");
 8001de0:	4916      	ldr	r1, [pc, #88]	; (8001e3c <main+0x7b4>)
 8001de2:	2000      	movs	r0, #0
 8001de4:	f013 f91c 	bl	8015020 <strtok>
 8001de8:	f8c7 0700 	str.w	r0, [r7, #1792]	; 0x700

	  		  if(!strcmp(cmd, "BEAM")){
 8001dec:	4914      	ldr	r1, [pc, #80]	; (8001e40 <main+0x7b8>)
 8001dee:	f8d7 0708 	ldr.w	r0, [r7, #1800]	; 0x708
 8001df2:	f7fe f9fd 	bl	80001f0 <strcmp>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f040 8129 	bne.w	8002050 <main+0x9c8>
	  			  // Commande pour orienter le faisceau dans un angle spécifique
	  			  strncpy(serial_output, "Command Received\n\r", 21);
 8001dfe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8001e02:	2215      	movs	r2, #21
 8001e04:	490f      	ldr	r1, [pc, #60]	; (8001e44 <main+0x7bc>)
 8001e06:	4618      	mov	r0, r3
 8001e08:	f013 f8f7 	bl	8014ffa <strncpy>
	  			  int value = strtol(arg, NULL, 10);
 8001e0c:	220a      	movs	r2, #10
 8001e0e:	2100      	movs	r1, #0
 8001e10:	f8d7 0704 	ldr.w	r0, [r7, #1796]	; 0x704
 8001e14:	f012 fa3c 	bl	8014290 <strtol>
 8001e18:	f8c7 06ec 	str.w	r0, [r7, #1772]	; 0x6ec
	  			  if(value){
 8001e1c:	f8d7 36ec 	ldr.w	r3, [r7, #1772]	; 0x6ec
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	e011      	b.n	8001e48 <main+0x7c0>
 8001e24:	40020800 	.word	0x40020800
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	40021400 	.word	0x40021400
 8001e34:	40021800 	.word	0x40021800
 8001e38:	200007f0 	.word	0x200007f0
 8001e3c:	08017620 	.word	0x08017620
 8001e40:	08017624 	.word	0x08017624
 8001e44:	0801762c 	.word	0x0801762c
 8001e48:	f000 82a5 	beq.w	8002396 <main+0xd0e>
					// Convertir l'angle d'attaque en radians
					angle_of_attack = value * PI / 180.0;
 8001e4c:	f8d7 06ec 	ldr.w	r0, [r7, #1772]	; 0x6ec
 8001e50:	f7fe fb88 	bl	8000564 <__aeabi_i2d>
 8001e54:	a3ad      	add	r3, pc, #692	; (adr r3, 800210c <main+0xa84>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fbed 	bl	8000638 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	4b9f      	ldr	r3, [pc, #636]	; (80020e8 <main+0xa60>)
 8001e6c:	f7fe fd0e 	bl	800088c <__aeabi_ddiv>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	499d      	ldr	r1, [pc, #628]	; (80020ec <main+0xa64>)
 8001e76:	e9c1 2300 	strd	r2, r3, [r1]

					// Calculer les déphasages
					calculate_phase_shifts(angle_of_attack, 0.03, antenna_distance, 8, vectorD);
 8001e7a:	4b9c      	ldr	r3, [pc, #624]	; (80020ec <main+0xa64>)
 8001e7c:	ed93 8b00 	vldr	d8, [r3]
 8001e80:	4b9b      	ldr	r3, [pc, #620]	; (80020f0 <main+0xa68>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fb7f 	bl	8000588 <__aeabi_f2d>
 8001e8a:	4604      	mov	r4, r0
 8001e8c:	460d      	mov	r5, r1
 8001e8e:	f107 0320 	add.w	r3, r7, #32
 8001e92:	4619      	mov	r1, r3
 8001e94:	2008      	movs	r0, #8
 8001e96:	ec45 4b12 	vmov	d2, r4, r5
 8001e9a:	ed9f 1b91 	vldr	d1, [pc, #580]	; 80020e0 <main+0xa58>
 8001e9e:	eeb0 0a48 	vmov.f32	s0, s16
 8001ea2:	eef0 0a68 	vmov.f32	s1, s17
 8001ea6:	f000 fd0b 	bl	80028c0 <_Z22calculate_phase_shiftsdddiPd>
					pe44820_A.setAngle(vectorD[0]);
 8001eaa:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001eae:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe feb5 	bl	8000c28 <__aeabi_d2f>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8001ec4:	ee00 2a10 	vmov	s0, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fb97 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
					pe44820_B.setAngle(vectorD[1]);
 8001ece:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001ed2:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 8001ed6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7fe fea3 	bl	8000c28 <__aeabi_d2f>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8001ee8:	ee00 2a10 	vmov	s0, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fb85 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_C.setAngle(vectorD[2]);
 8001ef2:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001ef6:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 8001efa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	f7fe fe91 	bl	8000c28 <__aeabi_d2f>
 8001f06:	4602      	mov	r2, r0
 8001f08:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 8001f0c:	ee00 2a10 	vmov	s0, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fb73 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_D.setAngle(vectorD[3]);
 8001f16:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001f1a:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 8001f1e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	f7fe fe7f 	bl	8000c28 <__aeabi_d2f>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001f30:	ee00 2a10 	vmov	s0, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fb61 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_E.setAngle(vectorD[4]);
 8001f3a:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001f3e:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 8001f42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f7fe fe6d 	bl	8000c28 <__aeabi_d2f>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8001f54:	ee00 2a10 	vmov	s0, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fb4f 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_F.setAngle(vectorD[5]);
 8001f5e:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001f62:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 8001f66:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7fe fe5b 	bl	8000c28 <__aeabi_d2f>
 8001f72:	4602      	mov	r2, r0
 8001f74:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001f78:	ee00 2a10 	vmov	s0, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fb3d 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_G.setAngle(vectorD[6]);
 8001f82:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001f86:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 8001f8a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f7fe fe49 	bl	8000c28 <__aeabi_d2f>
 8001f96:	4602      	mov	r2, r0
 8001f98:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8001f9c:	ee00 2a10 	vmov	s0, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fb2b 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_H.setAngle(vectorD[7]);
 8001fa6:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001faa:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 8001fae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f7fe fe37 	bl	8000c28 <__aeabi_d2f>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001fc0:	ee00 2a10 	vmov	s0, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fb19 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe4312_A.setLevel(30);
 8001fca:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8001fce:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff f8a4 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_B.setLevel(30);
 8001fd8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001fdc:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff f89d 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_C.setLevel(30);
 8001fe6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001fea:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff f896 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_D.setLevel(30);
 8001ff4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001ff8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff f88f 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_E.setLevel(30);
 8002002:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002006:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff f888 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_F.setLevel(30);
 8002010:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002014:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff f881 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_G.setLevel(30);
 800201e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002022:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff f87a 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_H.setLevel(30);
 800202c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002030:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff f873 	bl	8001120 <_ZN6PE43xx8setLevelEf>

	  				// Réponse TCP
		  			const char *test_message = "BEAM Command Received";
 800203a:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <main+0xa6c>)
 800203c:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
		  			tcp_server_send_message(server_pcb, test_message);
 8002040:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <main+0xa70>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	; 0x6e8
 8002048:	4618      	mov	r0, r3
 800204a:	f000 ffe5 	bl	8003018 <_Z23tcp_server_send_messageP7tcp_pcbPKc>
 800204e:	e1a2      	b.n	8002396 <main+0xd0e>
	  			  }

	  		  }
	  		  else if(!strcmp(cmd, "DISTANCE")){
 8002050:	492a      	ldr	r1, [pc, #168]	; (80020fc <main+0xa74>)
 8002052:	f8d7 0708 	ldr.w	r0, [r7, #1800]	; 0x708
 8002056:	f7fe f8cb 	bl	80001f0 <strcmp>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d159      	bne.n	8002114 <main+0xa8c>
	  			  // Défini la valeur entre les antennes pour calculer le déphasage
	  			  float value = strtof(arg, NULL);
 8002060:	2100      	movs	r1, #0
 8002062:	f8d7 0704 	ldr.w	r0, [r7, #1796]	; 0x704
 8002066:	f012 f82b 	bl	80140c0 <strtof>
 800206a:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 800206e:	ed83 0a00 	vstr	s0, [r3]
	  			  antenna_distance = value;
 8002072:	4a1f      	ldr	r2, [pc, #124]	; (80020f0 <main+0xa68>)
 8002074:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6013      	str	r3, [r2, #0]

	  			  // Réponse TCP
	  			  const char *test_message = "Antenna distance set ";
 800207c:	4b20      	ldr	r3, [pc, #128]	; (8002100 <main+0xa78>)
 800207e:	f8c7 36f0 	str.w	r3, [r7, #1776]	; 0x6f0
	  			  tcp_server_send_message(server_pcb, test_message);
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <main+0xa70>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	; 0x6f0
 800208a:	4618      	mov	r0, r3
 800208c:	f000 ffc4 	bl	8003018 <_Z23tcp_server_send_messageP7tcp_pcbPKc>

	  			  // Serial
	  			  strncpy(serial_output, "Antenna distance set to ", 25);
 8002090:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8002094:	4a1b      	ldr	r2, [pc, #108]	; (8002104 <main+0xa7c>)
 8002096:	461c      	mov	r4, r3
 8002098:	4615      	mov	r5, r2
 800209a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800209c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800209e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020a2:	c403      	stmia	r4!, {r0, r1}
 80020a4:	7022      	strb	r2, [r4, #0]
	  			  strncat(serial_output, arg, 5);
 80020a6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80020aa:	2205      	movs	r2, #5
 80020ac:	f8d7 1704 	ldr.w	r1, [r7, #1796]	; 0x704
 80020b0:	4618      	mov	r0, r3
 80020b2:	f012 ff7d 	bl	8014fb0 <strncat>
	  			  strncat(serial_output, " meter \n\r", 11);
 80020b6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe f8f8 	bl	80002b0 <strlen>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80020c8:	4413      	add	r3, r2
 80020ca:	490f      	ldr	r1, [pc, #60]	; (8002108 <main+0xa80>)
 80020cc:	461a      	mov	r2, r3
 80020ce:	460b      	mov	r3, r1
 80020d0:	cb03      	ldmia	r3!, {r0, r1}
 80020d2:	6010      	str	r0, [r2, #0]
 80020d4:	6051      	str	r1, [r2, #4]
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	8113      	strh	r3, [r2, #8]
 80020da:	e15c      	b.n	8002396 <main+0xd0e>
 80020dc:	f3af 8000 	nop.w
 80020e0:	eb851eb8 	.word	0xeb851eb8
 80020e4:	3f9eb851 	.word	0x3f9eb851
 80020e8:	40668000 	.word	0x40668000
 80020ec:	20000858 	.word	0x20000858
 80020f0:	20000860 	.word	0x20000860
 80020f4:	08017640 	.word	0x08017640
 80020f8:	20000864 	.word	0x20000864
 80020fc:	08017658 	.word	0x08017658
 8002100:	08017664 	.word	0x08017664
 8002104:	0801767c 	.word	0x0801767c
 8002108:	08017698 	.word	0x08017698
 800210c:	54442d18 	.word	0x54442d18
 8002110:	400921fb 	.word	0x400921fb
	  		  }
	  		  else if(!strcmp(cmd, "MANUEL")){
 8002114:	49aa      	ldr	r1, [pc, #680]	; (80023c0 <main+0xd38>)
 8002116:	f8d7 0708 	ldr.w	r0, [r7, #1800]	; 0x708
 800211a:	f7fe f869 	bl	80001f0 <strcmp>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	f040 8127 	bne.w	8002374 <main+0xcec>
	  			  // Permet de contôler la valeur de déphasage et d'atténuation de chaque puces
	  			  removeLeadingChars(input, sizeof("MANUAL"));
 8002126:	2107      	movs	r1, #7
 8002128:	48a6      	ldr	r0, [pc, #664]	; (80023c4 <main+0xd3c>)
 800212a:	f000 fc29 	bl	8002980 <_Z18removeLeadingCharsPci>
	  			  parseString(input, vectorD, vectorA, size);
 800212e:	463a      	mov	r2, r7
 8002130:	f107 0120 	add.w	r1, r7, #32
 8002134:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
 8002138:	48a2      	ldr	r0, [pc, #648]	; (80023c4 <main+0xd3c>)
 800213a:	f000 fc3c 	bl	80029b6 <_Z11parseStringPKcPdPii>
					pe44820_A.setAngle(vectorD[0]);
 800213e:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8002142:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	f7fe fd6b 	bl	8000c28 <__aeabi_d2f>
 8002152:	4602      	mov	r2, r0
 8002154:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8002158:	ee00 2a10 	vmov	s0, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fa4d 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
					pe44820_B.setAngle(vectorD[1]);
 8002162:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8002166:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 800216a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	f7fe fd59 	bl	8000c28 <__aeabi_d2f>
 8002176:	4602      	mov	r2, r0
 8002178:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800217c:	ee00 2a10 	vmov	s0, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fa3b 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_C.setAngle(vectorD[2]);
 8002186:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800218a:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 800218e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f7fe fd47 	bl	8000c28 <__aeabi_d2f>
 800219a:	4602      	mov	r2, r0
 800219c:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 80021a0:	ee00 2a10 	vmov	s0, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fa29 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_D.setAngle(vectorD[3]);
 80021aa:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80021ae:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 80021b2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7fe fd35 	bl	8000c28 <__aeabi_d2f>
 80021be:	4602      	mov	r2, r0
 80021c0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80021c4:	ee00 2a10 	vmov	s0, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fa17 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_E.setAngle(vectorD[4]);
 80021ce:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80021d2:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 80021d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f7fe fd23 	bl	8000c28 <__aeabi_d2f>
 80021e2:	4602      	mov	r2, r0
 80021e4:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80021e8:	ee00 2a10 	vmov	s0, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fa05 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_F.setAngle(vectorD[5]);
 80021f2:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80021f6:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 80021fa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f7fe fd11 	bl	8000c28 <__aeabi_d2f>
 8002206:	4602      	mov	r2, r0
 8002208:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800220c:	ee00 2a10 	vmov	s0, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff f9f3 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_G.setAngle(vectorD[6]);
 8002216:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800221a:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 800221e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	f7fe fcff 	bl	8000c28 <__aeabi_d2f>
 800222a:	4602      	mov	r2, r0
 800222c:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8002230:	ee00 2a10 	vmov	s0, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff f9e1 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe44820_H.setAngle(vectorD[7]);
 800223a:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800223e:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 8002242:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	f7fe fced 	bl	8000c28 <__aeabi_d2f>
 800224e:	4602      	mov	r2, r0
 8002250:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8002254:	ee00 2a10 	vmov	s0, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff f9cf 	bl	80015fc <_ZN12PhaseShifter8setAngleEf>
	  				pe4312_A.setLevel(vectorA[0]);
 800225e:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8002262:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	ee07 3a90 	vmov	s15, r3
 800226c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002270:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002274:	eeb0 0a67 	vmov.f32	s0, s15
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe ff51 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_B.setLevel(vectorA[1]);
 800227e:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8002282:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	ee07 3a90 	vmov	s15, r3
 800228c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002290:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002294:	eeb0 0a67 	vmov.f32	s0, s15
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe ff41 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_C.setLevel(vectorA[2]);
 800229e:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80022a2:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	ee07 3a90 	vmov	s15, r3
 80022ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80022b4:	eeb0 0a67 	vmov.f32	s0, s15
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe ff31 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_D.setLevel(vectorA[3]);
 80022be:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80022c2:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	ee07 3a90 	vmov	s15, r3
 80022cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80022d4:	eeb0 0a67 	vmov.f32	s0, s15
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe ff21 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_E.setLevel(vectorA[4]);
 80022de:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80022e2:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	ee07 3a90 	vmov	s15, r3
 80022ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80022f4:	eeb0 0a67 	vmov.f32	s0, s15
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe ff11 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_F.setLevel(vectorA[5]);
 80022fe:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8002302:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	ee07 3a90 	vmov	s15, r3
 800230c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002310:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002314:	eeb0 0a67 	vmov.f32	s0, s15
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe ff01 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_G.setLevel(vectorA[6]);
 800231e:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8002322:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	ee07 3a90 	vmov	s15, r3
 800232c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002330:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002334:	eeb0 0a67 	vmov.f32	s0, s15
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe fef1 	bl	8001120 <_ZN6PE43xx8setLevelEf>
	  				pe4312_H.setLevel(vectorA[7]);
 800233e:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8002342:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	ee07 3a90 	vmov	s15, r3
 800234c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002350:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002354:	eeb0 0a67 	vmov.f32	s0, s15
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fee1 	bl	8001120 <_ZN6PE43xx8setLevelEf>

	  				// Réponse TCP
		  			const char *test_message = "All values are set ";
 800235e:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <main+0xd40>)
 8002360:	f8c7 36f8 	str.w	r3, [r7, #1784]	; 0x6f8
		  			tcp_server_send_message(server_pcb, test_message);
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <main+0xd44>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	; 0x6f8
 800236c:	4618      	mov	r0, r3
 800236e:	f000 fe53 	bl	8003018 <_Z23tcp_server_send_messageP7tcp_pcbPKc>
 8002372:	e010      	b.n	8002396 <main+0xd0e>
	  		  }
	  		  else{
	  			  // Commande unconnue
	  			  strncpy(serial_output, "Unknown Command\n\r", 20);
 8002374:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8002378:	2214      	movs	r2, #20
 800237a:	4915      	ldr	r1, [pc, #84]	; (80023d0 <main+0xd48>)
 800237c:	4618      	mov	r0, r3
 800237e:	f012 fe3c 	bl	8014ffa <strncpy>

	  			  // Réponse TCP
	  			  const char *test_message = "Unknown command Received";
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <main+0xd4c>)
 8002384:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
	  			  tcp_server_send_message(server_pcb, test_message);
 8002388:	4b10      	ldr	r3, [pc, #64]	; (80023cc <main+0xd44>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	; 0x6fc
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fe41 	bl	8003018 <_Z23tcp_server_send_messageP7tcp_pcbPKc>
	  		  }

	  		  HAL_UART_Transmit(&huart3, (const uint8_t*)serial_output, sizeof(serial_output), 10);
 8002396:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 800239a:	230a      	movs	r3, #10
 800239c:	2264      	movs	r2, #100	; 0x64
 800239e:	480e      	ldr	r0, [pc, #56]	; (80023d8 <main+0xd50>)
 80023a0:	f003 fec7 	bl	8006132 <HAL_UART_Transmit>
	  		  memset (serial_output, '\0', 100);
 80023a4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80023a8:	2264      	movs	r2, #100	; 0x64
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f012 fdf7 	bl	8014fa0 <memset>
	  		  memset (input, '\0', 100);
 80023b2:	2264      	movs	r2, #100	; 0x64
 80023b4:	2100      	movs	r1, #0
 80023b6:	4803      	ldr	r0, [pc, #12]	; (80023c4 <main+0xd3c>)
 80023b8:	f012 fdf2 	bl	8014fa0 <memset>
	  	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80023bc:	e4fe      	b.n	8001dbc <main+0x734>
 80023be:	bf00      	nop
 80023c0:	080176a4 	.word	0x080176a4
 80023c4:	200007f0 	.word	0x200007f0
 80023c8:	080176ac 	.word	0x080176ac
 80023cc:	20000864 	.word	0x20000864
 80023d0:	080176c0 	.word	0x080176c0
 80023d4:	080176d4 	.word	0x080176d4
 80023d8:	200002c4 	.word	0x200002c4

080023dc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b094      	sub	sp, #80	; 0x50
 80023e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023e2:	f107 0320 	add.w	r3, r7, #32
 80023e6:	2230      	movs	r2, #48	; 0x30
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f012 fdd8 	bl	8014fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <_Z18SystemClock_Configv+0xe0>)
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	4a2c      	ldr	r2, [pc, #176]	; (80024bc <_Z18SystemClock_Configv+0xe0>)
 800240a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240e:	6413      	str	r3, [r2, #64]	; 0x40
 8002410:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <_Z18SystemClock_Configv+0xe0>)
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800241c:	2300      	movs	r3, #0
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <_Z18SystemClock_Configv+0xe4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a26      	ldr	r2, [pc, #152]	; (80024c0 <_Z18SystemClock_Configv+0xe4>)
 8002426:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <_Z18SystemClock_Configv+0xe4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002438:	2301      	movs	r3, #1
 800243a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800243c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002442:	2302      	movs	r3, #2
 8002444:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002446:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800244a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800244c:	2304      	movs	r3, #4
 800244e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002450:	23a8      	movs	r3, #168	; 0xa8
 8002452:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002454:	2302      	movs	r3, #2
 8002456:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002458:	2307      	movs	r3, #7
 800245a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800245c:	f107 0320 	add.w	r3, r7, #32
 8002460:	4618      	mov	r0, r3
 8002462:	f003 f8f5 	bl	8005650 <HAL_RCC_OscConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	bf14      	ite	ne
 800246c:	2301      	movne	r3, #1
 800246e:	2300      	moveq	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002476:	f000 fb34 	bl	8002ae2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800247a:	230f      	movs	r3, #15
 800247c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800247e:	2302      	movs	r3, #2
 8002480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002486:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800248a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800248c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002490:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002492:	f107 030c 	add.w	r3, r7, #12
 8002496:	2105      	movs	r1, #5
 8002498:	4618      	mov	r0, r3
 800249a:	f003 fb51 	bl	8005b40 <HAL_RCC_ClockConfig>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80024ae:	f000 fb18 	bl	8002ae2 <Error_Handler>
  }
}
 80024b2:	bf00      	nop
 80024b4:	3750      	adds	r7, #80	; 0x50
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40007000 	.word	0x40007000

080024c4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024c8:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <_ZL12MX_SPI1_Initv+0x70>)
 80024ca:	4a1b      	ldr	r2, [pc, #108]	; (8002538 <_ZL12MX_SPI1_Initv+0x74>)
 80024cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024ce:	4b19      	ldr	r3, [pc, #100]	; (8002534 <_ZL12MX_SPI1_Initv+0x70>)
 80024d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <_ZL12MX_SPI1_Initv+0x70>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024dc:	4b15      	ldr	r3, [pc, #84]	; (8002534 <_ZL12MX_SPI1_Initv+0x70>)
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <_ZL12MX_SPI1_Initv+0x70>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <_ZL12MX_SPI1_Initv+0x70>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <_ZL12MX_SPI1_Initv+0x70>)
 80024f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024f6:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <_ZL12MX_SPI1_Initv+0x70>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024fc:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <_ZL12MX_SPI1_Initv+0x70>)
 80024fe:	2200      	movs	r2, #0
 8002500:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <_ZL12MX_SPI1_Initv+0x70>)
 8002504:	2200      	movs	r2, #0
 8002506:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <_ZL12MX_SPI1_Initv+0x70>)
 800250a:	2200      	movs	r2, #0
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <_ZL12MX_SPI1_Initv+0x70>)
 8002510:	220a      	movs	r2, #10
 8002512:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002514:	4807      	ldr	r0, [pc, #28]	; (8002534 <_ZL12MX_SPI1_Initv+0x70>)
 8002516:	f003 fd33 	bl	8005f80 <HAL_SPI_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf14      	ite	ne
 8002520:	2301      	movne	r3, #1
 8002522:	2300      	moveq	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800252a:	f000 fada 	bl	8002ae2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000214 	.word	0x20000214
 8002538:	40013000 	.word	0x40013000

0800253c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <_ZL12MX_SPI2_Initv+0x70>)
 8002542:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <_ZL12MX_SPI2_Initv+0x74>)
 8002544:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <_ZL12MX_SPI2_Initv+0x70>)
 8002548:	f44f 7282 	mov.w	r2, #260	; 0x104
 800254c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800254e:	4b17      	ldr	r3, [pc, #92]	; (80025ac <_ZL12MX_SPI2_Initv+0x70>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <_ZL12MX_SPI2_Initv+0x70>)
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800255a:	4b14      	ldr	r3, [pc, #80]	; (80025ac <_ZL12MX_SPI2_Initv+0x70>)
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002560:	4b12      	ldr	r3, [pc, #72]	; (80025ac <_ZL12MX_SPI2_Initv+0x70>)
 8002562:	2200      	movs	r2, #0
 8002564:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <_ZL12MX_SPI2_Initv+0x70>)
 8002568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800256c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <_ZL12MX_SPI2_Initv+0x70>)
 8002570:	2200      	movs	r2, #0
 8002572:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002574:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <_ZL12MX_SPI2_Initv+0x70>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <_ZL12MX_SPI2_Initv+0x70>)
 800257c:	2200      	movs	r2, #0
 800257e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <_ZL12MX_SPI2_Initv+0x70>)
 8002582:	2200      	movs	r2, #0
 8002584:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <_ZL12MX_SPI2_Initv+0x70>)
 8002588:	220a      	movs	r2, #10
 800258a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800258c:	4807      	ldr	r0, [pc, #28]	; (80025ac <_ZL12MX_SPI2_Initv+0x70>)
 800258e:	f003 fcf7 	bl	8005f80 <HAL_SPI_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	bf14      	ite	ne
 8002598:	2301      	movne	r3, #1
 800259a:	2300      	moveq	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 80025a2:	f000 fa9e 	bl	8002ae2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	2000026c 	.word	0x2000026c
 80025b0:	40003800 	.word	0x40003800

080025b4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025b8:	4b13      	ldr	r3, [pc, #76]	; (8002608 <_ZL19MX_USART3_UART_Initv+0x54>)
 80025ba:	4a14      	ldr	r2, [pc, #80]	; (800260c <_ZL19MX_USART3_UART_Initv+0x58>)
 80025bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025be:	4b12      	ldr	r3, [pc, #72]	; (8002608 <_ZL19MX_USART3_UART_Initv+0x54>)
 80025c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <_ZL19MX_USART3_UART_Initv+0x54>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <_ZL19MX_USART3_UART_Initv+0x54>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <_ZL19MX_USART3_UART_Initv+0x54>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <_ZL19MX_USART3_UART_Initv+0x54>)
 80025da:	220c      	movs	r2, #12
 80025dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <_ZL19MX_USART3_UART_Initv+0x54>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <_ZL19MX_USART3_UART_Initv+0x54>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025ea:	4807      	ldr	r0, [pc, #28]	; (8002608 <_ZL19MX_USART3_UART_Initv+0x54>)
 80025ec:	f003 fd51 	bl	8006092 <HAL_UART_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	bf14      	ite	ne
 80025f6:	2301      	movne	r3, #1
 80025f8:	2300      	moveq	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002600:	f000 fa6f 	bl	8002ae2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	200002c4 	.word	0x200002c4
 800260c:	40004800 	.word	0x40004800

08002610 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002614:	4b16      	ldr	r3, [pc, #88]	; (8002670 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8002616:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800261a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800261e:	2204      	movs	r2, #4
 8002620:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002622:	4b13      	ldr	r3, [pc, #76]	; (8002670 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8002624:	2202      	movs	r2, #2
 8002626:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800262a:	2200      	movs	r2, #0
 800262c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8002630:	2202      	movs	r2, #2
 8002632:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002634:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8002636:	2201      	movs	r2, #1
 8002638:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800263a:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800263c:	2200      	movs	r2, #0
 800263e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8002642:	2200      	movs	r2, #0
 8002644:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8002648:	2201      	movs	r2, #1
 800264a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800264e:	2200      	movs	r2, #0
 8002650:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002652:	4807      	ldr	r0, [pc, #28]	; (8002670 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8002654:	f002 feed 	bl	8005432 <HAL_PCD_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 8002668:	f000 fa3b 	bl	8002ae2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	2000030c 	.word	0x2000030c

08002674 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08e      	sub	sp, #56	; 0x38
 8002678:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
 8002688:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
 800268e:	4b84      	ldr	r3, [pc, #528]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a83      	ldr	r2, [pc, #524]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b81      	ldr	r3, [pc, #516]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	623b      	str	r3, [r7, #32]
 80026a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	4b7d      	ldr	r3, [pc, #500]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a7c      	ldr	r2, [pc, #496]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 80026b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b7a      	ldr	r3, [pc, #488]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	61bb      	str	r3, [r7, #24]
 80026c6:	4b76      	ldr	r3, [pc, #472]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a75      	ldr	r2, [pc, #468]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b73      	ldr	r3, [pc, #460]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	61bb      	str	r3, [r7, #24]
 80026dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	4b6f      	ldr	r3, [pc, #444]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4a6e      	ldr	r2, [pc, #440]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	6313      	str	r3, [r2, #48]	; 0x30
 80026ee:	4b6c      	ldr	r3, [pc, #432]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	4b68      	ldr	r3, [pc, #416]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a67      	ldr	r2, [pc, #412]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 8002704:	f043 0320 	orr.w	r3, r3, #32
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b65      	ldr	r3, [pc, #404]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	4b61      	ldr	r3, [pc, #388]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4a60      	ldr	r2, [pc, #384]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 8002720:	f043 0310 	orr.w	r3, r3, #16
 8002724:	6313      	str	r3, [r2, #48]	; 0x30
 8002726:	4b5e      	ldr	r3, [pc, #376]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	4b5a      	ldr	r3, [pc, #360]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a59      	ldr	r2, [pc, #356]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 800273c:	f043 0308 	orr.w	r3, r3, #8
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b57      	ldr	r3, [pc, #348]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	4a52      	ldr	r2, [pc, #328]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 8002758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800275c:	6313      	str	r3, [r2, #48]	; 0x30
 800275e:	4b50      	ldr	r3, [pc, #320]	; (80028a0 <_ZL12MX_GPIO_Initv+0x22c>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800276a:	2200      	movs	r2, #0
 800276c:	f244 0181 	movw	r1, #16513	; 0x4081
 8002770:	484c      	ldr	r0, [pc, #304]	; (80028a4 <_ZL12MX_GPIO_Initv+0x230>)
 8002772:	f002 fe45 	bl	8005400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LE_GPIO_Port, LE_Pin, GPIO_PIN_RESET);
 8002776:	2200      	movs	r2, #0
 8002778:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800277c:	484a      	ldr	r0, [pc, #296]	; (80028a8 <_ZL12MX_GPIO_Initv+0x234>)
 800277e:	f002 fe3f 	bl	8005400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SDI_Att_Pin|CLK_Att_Pin, GPIO_PIN_RESET);
 8002782:	2200      	movs	r2, #0
 8002784:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8002788:	4848      	ldr	r0, [pc, #288]	; (80028ac <_ZL12MX_GPIO_Initv+0x238>)
 800278a:	f002 fe39 	bl	8005400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SI_Pin|CLK_Pin, GPIO_PIN_RESET);
 800278e:	2200      	movs	r2, #0
 8002790:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002794:	4846      	ldr	r0, [pc, #280]	; (80028b0 <_ZL12MX_GPIO_Initv+0x23c>)
 8002796:	f002 fe33 	bl	8005400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800279a:	2200      	movs	r2, #0
 800279c:	2140      	movs	r1, #64	; 0x40
 800279e:	4845      	ldr	r0, [pc, #276]	; (80028b4 <_ZL12MX_GPIO_Initv+0x240>)
 80027a0:	f002 fe2e 	bl	8005400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LE_Att_GPIO_Port, LE_Att_Pin, GPIO_PIN_RESET);
 80027a4:	2200      	movs	r2, #0
 80027a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027aa:	4843      	ldr	r0, [pc, #268]	; (80028b8 <_ZL12MX_GPIO_Initv+0x244>)
 80027ac:	f002 fe28 	bl	8005400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80027b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80027c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c4:	4619      	mov	r1, r3
 80027c6:	483c      	ldr	r0, [pc, #240]	; (80028b8 <_ZL12MX_GPIO_Initv+0x244>)
 80027c8:	f002 fc6e 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80027cc:	f244 0381 	movw	r3, #16513	; 0x4081
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d2:	2301      	movs	r3, #1
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027da:	2300      	movs	r3, #0
 80027dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e2:	4619      	mov	r1, r3
 80027e4:	482f      	ldr	r0, [pc, #188]	; (80028a4 <_ZL12MX_GPIO_Initv+0x230>)
 80027e6:	f002 fc5f 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LE_Pin */
  GPIO_InitStruct.Pin = LE_Pin;
 80027ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f0:	2301      	movs	r3, #1
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2300      	movs	r3, #0
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LE_GPIO_Port, &GPIO_InitStruct);
 80027fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002800:	4619      	mov	r1, r3
 8002802:	4829      	ldr	r0, [pc, #164]	; (80028a8 <_ZL12MX_GPIO_Initv+0x234>)
 8002804:	f002 fc50 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDI_Att_Pin CLK_Att_Pin */
  GPIO_InitStruct.Pin = SDI_Att_Pin|CLK_Att_Pin;
 8002808:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280e:	2301      	movs	r3, #1
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	2300      	movs	r3, #0
 8002818:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800281a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281e:	4619      	mov	r1, r3
 8002820:	4822      	ldr	r0, [pc, #136]	; (80028ac <_ZL12MX_GPIO_Initv+0x238>)
 8002822:	f002 fc41 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SI_Pin CLK_Pin */
  GPIO_InitStruct.Pin = SI_Pin|CLK_Pin;
 8002826:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282c:	2301      	movs	r3, #1
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002834:	2300      	movs	r3, #0
 8002836:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283c:	4619      	mov	r1, r3
 800283e:	481c      	ldr	r0, [pc, #112]	; (80028b0 <_ZL12MX_GPIO_Initv+0x23c>)
 8002840:	f002 fc32 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002844:	2340      	movs	r3, #64	; 0x40
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002848:	2301      	movs	r3, #1
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2300      	movs	r3, #0
 8002852:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002858:	4619      	mov	r1, r3
 800285a:	4816      	ldr	r0, [pc, #88]	; (80028b4 <_ZL12MX_GPIO_Initv+0x240>)
 800285c:	f002 fc24 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002864:	2300      	movs	r3, #0
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800286c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002870:	4619      	mov	r1, r3
 8002872:	4810      	ldr	r0, [pc, #64]	; (80028b4 <_ZL12MX_GPIO_Initv+0x240>)
 8002874:	f002 fc18 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LE_Att_Pin */
  GPIO_InitStruct.Pin = LE_Att_Pin;
 8002878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287e:	2301      	movs	r3, #1
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	2300      	movs	r3, #0
 8002888:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LE_Att_GPIO_Port, &GPIO_InitStruct);
 800288a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288e:	4619      	mov	r1, r3
 8002890:	4809      	ldr	r0, [pc, #36]	; (80028b8 <_ZL12MX_GPIO_Initv+0x244>)
 8002892:	f002 fc09 	bl	80050a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002896:	bf00      	nop
 8002898:	3738      	adds	r7, #56	; 0x38
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40020400 	.word	0x40020400
 80028a8:	40021400 	.word	0x40021400
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40020c00 	.word	0x40020c00
 80028b4:	40021800 	.word	0x40021800
 80028b8:	40020800 	.word	0x40020800
 80028bc:	00000000 	.word	0x00000000

080028c0 <_Z22calculate_phase_shiftsdddiPd>:

/* USER CODE BEGIN 4 */

// Fonction pour calculer le déphasage de chaque antenne
void calculate_phase_shifts(double angle_of_attack, double wavelength, double distance, int num_antennas, double phase_shifts[]) {
 80028c0:	b5b0      	push	{r4, r5, r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	ed87 0b06 	vstr	d0, [r7, #24]
 80028ca:	ed87 1b04 	vstr	d1, [r7, #16]
 80028ce:	ed87 2b02 	vstr	d2, [r7, #8]
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
    for (int n = 0; n < num_antennas; n++) {
 80028d6:	2300      	movs	r3, #0
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
 80028da:	e03d      	b.n	8002958 <_Z22calculate_phase_shiftsdddiPd+0x98>
        phase_shifts[n] = (2 * PI * distance / wavelength) * n * sin(angle_of_attack) * 57.3;
 80028dc:	a324      	add	r3, pc, #144	; (adr r3, 8002970 <_Z22calculate_phase_shiftsdddiPd+0xb0>)
 80028de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028e6:	f7fd fea7 	bl	8000638 <__aeabi_dmul>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028f6:	f7fd ffc9 	bl	800088c <__aeabi_ddiv>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4614      	mov	r4, r2
 8002900:	461d      	mov	r5, r3
 8002902:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002904:	f7fd fe2e 	bl	8000564 <__aeabi_i2d>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4620      	mov	r0, r4
 800290e:	4629      	mov	r1, r5
 8002910:	f7fd fe92 	bl	8000638 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4614      	mov	r4, r2
 800291a:	461d      	mov	r5, r3
 800291c:	ed97 0b06 	vldr	d0, [r7, #24]
 8002920:	f00f fc82 	bl	8012228 <sin>
 8002924:	ec53 2b10 	vmov	r2, r3, d0
 8002928:	4620      	mov	r0, r4
 800292a:	4629      	mov	r1, r5
 800292c:	f7fd fe84 	bl	8000638 <__aeabi_dmul>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	18d4      	adds	r4, r2, r3
 8002940:	a30d      	add	r3, pc, #52	; (adr r3, 8002978 <_Z22calculate_phase_shiftsdddiPd+0xb8>)
 8002942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002946:	f7fd fe77 	bl	8000638 <__aeabi_dmul>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	e9c4 2300 	strd	r2, r3, [r4]
    for (int n = 0; n < num_antennas; n++) {
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	3301      	adds	r3, #1
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
 8002958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	429a      	cmp	r2, r3
 800295e:	dbbd      	blt.n	80028dc <_Z22calculate_phase_shiftsdddiPd+0x1c>
    }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3728      	adds	r7, #40	; 0x28
 8002966:	46bd      	mov	sp, r7
 8002968:	bdb0      	pop	{r4, r5, r7, pc}
 800296a:	bf00      	nop
 800296c:	f3af 8000 	nop.w
 8002970:	54442d18 	.word	0x54442d18
 8002974:	401921fb 	.word	0x401921fb
 8002978:	66666666 	.word	0x66666666
 800297c:	404ca666 	.word	0x404ca666

08002980 <_Z18removeLeadingCharsPci>:

void removeLeadingChars(char *str, int numCharsToRemove) {
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < numCharsToRemove; i++){
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e007      	b.n	80029a0 <_Z18removeLeadingCharsPci+0x20>
    	str[i] = '\0';
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < numCharsToRemove; i++){
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3301      	adds	r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	dbf3      	blt.n	8002990 <_Z18removeLeadingCharsPci+0x10>
    }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <_Z11parseStringPKcPdPii>:

// Function to parse the input string and store values into two arrays
void parseString(const char *input, double *vector1, int *vector2, int size) {
 80029b6:	b590      	push	{r4, r7, lr}
 80029b8:	b08b      	sub	sp, #44	; 0x2c
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	603b      	str	r3, [r7, #0]
    const char *p = input;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
    int index1 = 0, index2 = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	623b      	str	r3, [r7, #32]
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
    int isVector1 = 1; // Start with the first vector
 80029d0:	2301      	movs	r3, #1
 80029d2:	61bb      	str	r3, [r7, #24]
    char temp[4]; // Assuming single-digit integers with possible '\0' padding

    while (*p != 'S') {
 80029d4:	e07b      	b.n	8002ace <_Z11parseStringPKcPdPii+0x118>
        // Move to the start of the first vector
        if (*p == '[') {
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b5b      	cmp	r3, #91	; 0x5b
 80029dc:	d16b      	bne.n	8002ab6 <_Z11parseStringPKcPdPii+0x100>
            p++;
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	3301      	adds	r3, #1
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
            while (*p != ']') {
 80029e4:	e063      	b.n	8002aae <_Z11parseStringPKcPdPii+0xf8>
                if (*p >= '0' && *p <= '9') {
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b2f      	cmp	r3, #47	; 0x2f
 80029ec:	d95c      	bls.n	8002aa8 <_Z11parseStringPKcPdPii+0xf2>
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b39      	cmp	r3, #57	; 0x39
 80029f4:	d858      	bhi.n	8002aa8 <_Z11parseStringPKcPdPii+0xf2>
                    // Find the length of the current number
                    int len = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
                    while (p[len] >= '0' && p[len] <= '9' && len < 3) {
 80029fa:	e00c      	b.n	8002a16 <_Z11parseStringPKcPdPii+0x60>
                        temp[len] = p[len];
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a00:	4413      	add	r3, r2
 8002a02:	7819      	ldrb	r1, [r3, #0]
 8002a04:	f107 0210 	add.w	r2, r7, #16
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	460a      	mov	r2, r1
 8002a0e:	701a      	strb	r2, [r3, #0]
                        len++;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	3301      	adds	r3, #1
 8002a14:	617b      	str	r3, [r7, #20]
                    while (p[len] >= '0' && p[len] <= '9' && len < 3) {
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1a:	4413      	add	r3, r2
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b2f      	cmp	r3, #47	; 0x2f
 8002a20:	d908      	bls.n	8002a34 <_Z11parseStringPKcPdPii+0x7e>
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a26:	4413      	add	r3, r2
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b39      	cmp	r3, #57	; 0x39
 8002a2c:	d802      	bhi.n	8002a34 <_Z11parseStringPKcPdPii+0x7e>
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	dde3      	ble.n	80029fc <_Z11parseStringPKcPdPii+0x46>
                    }
                    temp[len] = '\0'; // Null-terminate the number string
 8002a34:	f107 0210 	add.w	r2, r7, #16
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]

                    // Convert to integer and store in the appropriate vector
                    if (isVector1 && index1 < size) {
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d017      	beq.n	8002a76 <_Z11parseStringPKcPdPii+0xc0>
 8002a46:	6a3a      	ldr	r2, [r7, #32]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	da13      	bge.n	8002a76 <_Z11parseStringPKcPdPii+0xc0>
                        vector1[index1++] = atoi(temp);
 8002a4e:	f107 0310 	add.w	r3, r7, #16
 8002a52:	4618      	mov	r0, r3
 8002a54:	f010 fc28 	bl	80132a8 <atoi>
 8002a58:	4601      	mov	r1, r0
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	623a      	str	r2, [r7, #32]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	18d4      	adds	r4, r2, r3
 8002a66:	4608      	mov	r0, r1
 8002a68:	f7fd fd7c 	bl	8000564 <__aeabi_i2d>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	e9c4 2300 	strd	r2, r3, [r4]
 8002a74:	e013      	b.n	8002a9e <_Z11parseStringPKcPdPii+0xe8>
                    } else if (!isVector1 && index2 < size) {
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d110      	bne.n	8002a9e <_Z11parseStringPKcPdPii+0xe8>
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	da0c      	bge.n	8002a9e <_Z11parseStringPKcPdPii+0xe8>
                        vector2[index2++] = atoi(temp);
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	61fa      	str	r2, [r7, #28]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	18d4      	adds	r4, r2, r3
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	4618      	mov	r0, r3
 8002a96:	f010 fc07 	bl	80132a8 <atoi>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	6023      	str	r3, [r4, #0]
                    }
                    p += len; // Move the pointer to the end of the current number
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa2:	4413      	add	r3, r2
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
                } else {
 8002aa6:	e002      	b.n	8002aae <_Z11parseStringPKcPdPii+0xf8>
                    p++;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	3301      	adds	r3, #1
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
            while (*p != ']') {
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b5d      	cmp	r3, #93	; 0x5d
 8002ab4:	d197      	bne.n	80029e6 <_Z11parseStringPKcPdPii+0x30>
                }
            }
        }
        if (*p == ']') {
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b5d      	cmp	r3, #93	; 0x5d
 8002abc:	d104      	bne.n	8002ac8 <_Z11parseStringPKcPdPii+0x112>
            // Move to the start of the second vector
            if (isVector1) {
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <_Z11parseStringPKcPdPii+0x112>
                isVector1 = 0; // Switch to the second vector
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
            }
        }
        p++;
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	3301      	adds	r3, #1
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
    while (*p != 'S') {
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b53      	cmp	r3, #83	; 0x53
 8002ad4:	f47f af7f 	bne.w	80029d6 <_Z11parseStringPKcPdPii+0x20>
    }
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	372c      	adds	r7, #44	; 0x2c
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd90      	pop	{r4, r7, pc}

08002ae2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae6:	b672      	cpsid	i
}
 8002ae8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002aea:	e7fe      	b.n	8002aea <Error_Handler+0x8>

08002aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <HAL_MspInit+0x4c>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	4a0f      	ldr	r2, [pc, #60]	; (8002b38 <HAL_MspInit+0x4c>)
 8002afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b00:	6453      	str	r3, [r2, #68]	; 0x44
 8002b02:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <HAL_MspInit+0x4c>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	603b      	str	r3, [r7, #0]
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_MspInit+0x4c>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <HAL_MspInit+0x4c>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_MspInit+0x4c>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800

08002b3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08e      	sub	sp, #56	; 0x38
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a50      	ldr	r2, [pc, #320]	; (8002c9c <HAL_SPI_MspInit+0x160>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d14a      	bne.n	8002bf4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	623b      	str	r3, [r7, #32]
 8002b62:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	4a4e      	ldr	r2, [pc, #312]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002b68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6e:	4b4c      	ldr	r3, [pc, #304]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b76:	623b      	str	r3, [r7, #32]
 8002b78:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	4b48      	ldr	r3, [pc, #288]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a47      	ldr	r2, [pc, #284]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b45      	ldr	r3, [pc, #276]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	61fb      	str	r3, [r7, #28]
 8002b94:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a40      	ldr	r2, [pc, #256]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b3e      	ldr	r3, [pc, #248]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bc2:	2305      	movs	r3, #5
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4835      	ldr	r0, [pc, #212]	; (8002ca4 <HAL_SPI_MspInit+0x168>)
 8002bce:	f002 fa6b 	bl	80050a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bde:	2303      	movs	r3, #3
 8002be0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002be2:	2305      	movs	r3, #5
 8002be4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bea:	4619      	mov	r1, r3
 8002bec:	482e      	ldr	r0, [pc, #184]	; (8002ca8 <HAL_SPI_MspInit+0x16c>)
 8002bee:	f002 fa5b 	bl	80050a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002bf2:	e04f      	b.n	8002c94 <HAL_SPI_MspInit+0x158>
  else if(hspi->Instance==SPI2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a2c      	ldr	r2, [pc, #176]	; (8002cac <HAL_SPI_MspInit+0x170>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d14a      	bne.n	8002c94 <HAL_SPI_MspInit+0x158>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0e:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <HAL_SPI_MspInit+0x164>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c52:	2308      	movs	r3, #8
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c62:	2305      	movs	r3, #5
 8002c64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4810      	ldr	r0, [pc, #64]	; (8002cb0 <HAL_SPI_MspInit+0x174>)
 8002c6e:	f002 fa1b 	bl	80050a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c84:	2305      	movs	r3, #5
 8002c86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4806      	ldr	r0, [pc, #24]	; (8002ca8 <HAL_SPI_MspInit+0x16c>)
 8002c90:	f002 fa0a 	bl	80050a8 <HAL_GPIO_Init>
}
 8002c94:	bf00      	nop
 8002c96:	3738      	adds	r7, #56	; 0x38
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40013000 	.word	0x40013000
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40020400 	.word	0x40020400
 8002cac:	40003800 	.word	0x40003800
 8002cb0:	40020800 	.word	0x40020800

08002cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08a      	sub	sp, #40	; 0x28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbc:	f107 0314 	add.w	r3, r7, #20
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <HAL_UART_MspInit+0x84>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d12c      	bne.n	8002d30 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <HAL_UART_MspInit+0x88>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a17      	ldr	r2, [pc, #92]	; (8002d3c <HAL_UART_MspInit+0x88>)
 8002ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <HAL_UART_MspInit+0x88>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <HAL_UART_MspInit+0x88>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a10      	ldr	r2, [pc, #64]	; (8002d3c <HAL_UART_MspInit+0x88>)
 8002cfc:	f043 0308 	orr.w	r3, r3, #8
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <HAL_UART_MspInit+0x88>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002d0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d20:	2307      	movs	r3, #7
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4805      	ldr	r0, [pc, #20]	; (8002d40 <HAL_UART_MspInit+0x8c>)
 8002d2c:	f002 f9bc 	bl	80050a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d30:	bf00      	nop
 8002d32:	3728      	adds	r7, #40	; 0x28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40004800 	.word	0x40004800
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40020c00 	.word	0x40020c00

08002d44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d64:	d13f      	bne.n	8002de6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <HAL_PCD_MspInit+0xac>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4a20      	ldr	r2, [pc, #128]	; (8002df0 <HAL_PCD_MspInit+0xac>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <HAL_PCD_MspInit+0xac>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d82:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d90:	2303      	movs	r3, #3
 8002d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d94:	230a      	movs	r3, #10
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4815      	ldr	r0, [pc, #84]	; (8002df4 <HAL_PCD_MspInit+0xb0>)
 8002da0:	f002 f982 	bl	80050a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	4619      	mov	r1, r3
 8002db8:	480e      	ldr	r0, [pc, #56]	; (8002df4 <HAL_PCD_MspInit+0xb0>)
 8002dba:	f002 f975 	bl	80050a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <HAL_PCD_MspInit+0xac>)
 8002dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc2:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <HAL_PCD_MspInit+0xac>)
 8002dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc8:	6353      	str	r3, [r2, #52]	; 0x34
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_PCD_MspInit+0xac>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <HAL_PCD_MspInit+0xac>)
 8002dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_PCD_MspInit+0xac>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002de6:	bf00      	nop
 8002de8:	3728      	adds	r7, #40	; 0x28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40020000 	.word	0x40020000

08002df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002dfc:	e7fe      	b.n	8002dfc <NMI_Handler+0x4>

08002dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e02:	e7fe      	b.n	8002e02 <HardFault_Handler+0x4>

08002e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e08:	e7fe      	b.n	8002e08 <MemManage_Handler+0x4>

08002e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e0e:	e7fe      	b.n	8002e0e <BusFault_Handler+0x4>

08002e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e14:	e7fe      	b.n	8002e14 <UsageFault_Handler+0x4>

08002e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e32:	b480      	push	{r7}
 8002e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e44:	f000 fde4 	bl	8003a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <ETH_IRQHandler+0x10>)
 8002e52:	f001 fa41 	bl	80042d8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	2000567c 	.word	0x2000567c

08002e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return 1;
 8002e64:	2301      	movs	r3, #1
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <_kill>:

int _kill(int pid, int sig)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <_kill+0x20>)
 8002e7c:	2216      	movs	r2, #22
 8002e7e:	601a      	str	r2, [r3, #0]
  return -1;
 8002e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	20000b3c 	.word	0x20000b3c

08002e94 <_exit>:

void _exit (int status)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ffe5 	bl	8002e70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ea6:	e7fe      	b.n	8002ea6 <_exit+0x12>

08002ea8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	e00a      	b.n	8002ed0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002eba:	f3af 8000 	nop.w
 8002ebe:	4601      	mov	r1, r0
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	60ba      	str	r2, [r7, #8]
 8002ec6:	b2ca      	uxtb	r2, r1
 8002ec8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	dbf0      	blt.n	8002eba <_read+0x12>
  }

  return len;
 8002ed8:	687b      	ldr	r3, [r7, #4]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	e009      	b.n	8002f08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	60ba      	str	r2, [r7, #8]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	3301      	adds	r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	dbf1      	blt.n	8002ef4 <_write+0x12>
  }
  return len;
 8002f10:	687b      	ldr	r3, [r7, #4]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <_close>:

int _close(int file)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f42:	605a      	str	r2, [r3, #4]
  return 0;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <_isatty>:

int _isatty(int file)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f5a:	2301      	movs	r3, #1
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f8c:	4a14      	ldr	r2, [pc, #80]	; (8002fe0 <_sbrk+0x5c>)
 8002f8e:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <_sbrk+0x60>)
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <_sbrk+0x64>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d102      	bne.n	8002fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fa0:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <_sbrk+0x64>)
 8002fa2:	4a12      	ldr	r2, [pc, #72]	; (8002fec <_sbrk+0x68>)
 8002fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <_sbrk+0x64>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d205      	bcs.n	8002fc0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002fb4:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <_sbrk+0x6c>)
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbe:	e009      	b.n	8002fd4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <_sbrk+0x64>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <_sbrk+0x64>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	4a06      	ldr	r2, [pc, #24]	; (8002fe8 <_sbrk+0x64>)
 8002fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	371c      	adds	r7, #28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	20030000 	.word	0x20030000
 8002fe4:	00000400 	.word	0x00000400
 8002fe8:	20000868 	.word	0x20000868
 8002fec:	2000ae88 	.word	0x2000ae88
 8002ff0:	20000b3c 	.word	0x20000b3c

08002ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <SystemInit+0x20>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <SystemInit+0x20>)
 8003000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <_Z23tcp_server_send_messageP7tcp_pcbPKc>:
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es);
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es);


/* Function to send a message over the TCP connection */
void tcp_server_send_message(struct tcp_pcb *tpcb, const char *message) {
 8003018:	b590      	push	{r4, r7, lr}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
    struct pbuf *p;
    err_t wr_err;

    /* Allocate pbuf for sending the message */
    p = pbuf_alloc(PBUF_TRANSPORT, strlen(message), PBUF_POOL);
 8003022:	6838      	ldr	r0, [r7, #0]
 8003024:	f7fd f944 	bl	80002b0 <strlen>
 8003028:	4603      	mov	r3, r0
 800302a:	b29b      	uxth	r3, r3
 800302c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003030:	4619      	mov	r1, r3
 8003032:	2036      	movs	r0, #54	; 0x36
 8003034:	f005 fcc6 	bl	80089c4 <pbuf_alloc>
 8003038:	60f8      	str	r0, [r7, #12]
    if (p != NULL) {
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d026      	beq.n	800308e <_Z23tcp_server_send_messageP7tcp_pcbPKc+0x76>
        /* Copy the message into the pbuf payload */
        memcpy(p->payload, message, strlen(message));
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685c      	ldr	r4, [r3, #4]
 8003044:	6838      	ldr	r0, [r7, #0]
 8003046:	f7fd f933 	bl	80002b0 <strlen>
 800304a:	4603      	mov	r3, r0
 800304c:	461a      	mov	r2, r3
 800304e:	6839      	ldr	r1, [r7, #0]
 8003050:	4620      	mov	r0, r4
 8003052:	f012 f8c8 	bl	80151e6 <memcpy>

        /* Send the message */
        wr_err = tcp_write(tpcb, p->payload, p->len, TCP_WRITE_FLAG_COPY);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6859      	ldr	r1, [r3, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	895a      	ldrh	r2, [r3, #10]
 800305e:	2301      	movs	r3, #1
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f00a fd25 	bl	800dab0 <tcp_write>
 8003066:	4603      	mov	r3, r0
 8003068:	72fb      	strb	r3, [r7, #11]
        if (wr_err == ERR_OK) {
 800306a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d103      	bne.n	800307a <_Z23tcp_server_send_messageP7tcp_pcbPKc+0x62>
            tcp_output(tpcb);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f00b fb06 	bl	800e684 <tcp_output>
 8003078:	e005      	b.n	8003086 <_Z23tcp_server_send_messageP7tcp_pcbPKc+0x6e>
        } else {
            /* Handle the error */
            printf("Error sending message: %d\n", wr_err);
 800307a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800307e:	4619      	mov	r1, r3
 8003080:	4806      	ldr	r0, [pc, #24]	; (800309c <_Z23tcp_server_send_messageP7tcp_pcbPKc+0x84>)
 8003082:	f011 fe37 	bl	8014cf4 <iprintf>
        }

        /* Free the pbuf */
        pbuf_free(p);
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f005 ff80 	bl	8008f8c <pbuf_free>
    } else {
        /* Handle the error */
        printf("Error allocating pbuf\n");
    }
}
 800308c:	e002      	b.n	8003094 <_Z23tcp_server_send_messageP7tcp_pcbPKc+0x7c>
        printf("Error allocating pbuf\n");
 800308e:	4804      	ldr	r0, [pc, #16]	; (80030a0 <_Z23tcp_server_send_messageP7tcp_pcbPKc+0x88>)
 8003090:	f011 fe96 	bl	8014dc0 <puts>
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bd90      	pop	{r4, r7, pc}
 800309c:	080176f0 	.word	0x080176f0
 80030a0:	0801770c 	.word	0x0801770c

080030a4 <_Z15tcp_server_initv>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

struct tcp_pcb* tcp_server_init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 80030aa:	f007 fdb7 	bl	800ac1c <tcp_new>
 80030ae:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 110);
 80030b0:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <_Z15tcp_server_initv+0x50>)
 80030b2:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 7);
 80030b4:	1d3b      	adds	r3, r7, #4
 80030b6:	2207      	movs	r2, #7
 80030b8:	4619      	mov	r1, r3
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f006 fd0a 	bl	8009ad4 <tcp_bind>
 80030c0:	4603      	mov	r3, r0
 80030c2:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 80030c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <_Z15tcp_server_initv+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 80030cc:	21ff      	movs	r1, #255	; 0xff
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f006 fdb8 	bl	8009c44 <tcp_listen_with_backlog>
 80030d4:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 80030d6:	4908      	ldr	r1, [pc, #32]	; (80030f8 <_Z15tcp_server_initv+0x54>)
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f007 fe1f 	bl	800ad1c <tcp_accept>
 80030de:	e003      	b.n	80030e8 <_Z15tcp_server_initv+0x44>
	}
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
 80030e0:	68f9      	ldr	r1, [r7, #12]
 80030e2:	2001      	movs	r0, #1
 80030e4:	f005 f8dc 	bl	80082a0 <memp_free>
	}
	return tpcb;
 80030e8:	68fb      	ldr	r3, [r7, #12]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	6e01a8c0 	.word	0x6e01a8c0
 80030f8:	080030fd 	.word	0x080030fd

080030fc <_ZL17tcp_server_acceptPvP7tcp_pcba>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	4613      	mov	r3, r2
 8003108:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 800310a:	2101      	movs	r1, #1
 800310c:	68b8      	ldr	r0, [r7, #8]
 800310e:	f007 fb93 	bl	800a838 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8003112:	200c      	movs	r0, #12
 8003114:	f004 fec4 	bl	8007ea0 <mem_malloc>
 8003118:	4603      	mov	r3, r0
 800311a:	4a22      	ldr	r2, [pc, #136]	; (80031a4 <_ZL17tcp_server_acceptPvP7tcp_pcba+0xa8>)
 800311c:	6013      	str	r3, [r2, #0]
  if (es != NULL)
 800311e:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <_ZL17tcp_server_acceptPvP7tcp_pcba+0xa8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d030      	beq.n	8003188 <_ZL17tcp_server_acceptPvP7tcp_pcba+0x8c>
  {
    es->state = ES_ACCEPTED;
 8003126:	4b1f      	ldr	r3, [pc, #124]	; (80031a4 <_ZL17tcp_server_acceptPvP7tcp_pcba+0xa8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2201      	movs	r2, #1
 800312c:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 800312e:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <_ZL17tcp_server_acceptPvP7tcp_pcba+0xa8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8003136:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <_ZL17tcp_server_acceptPvP7tcp_pcba+0xa8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2200      	movs	r2, #0
 800313c:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 800313e:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <_ZL17tcp_server_acceptPvP7tcp_pcba+0xa8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]

    server_pcb = newpcb;
 8003146:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <_ZL17tcp_server_acceptPvP7tcp_pcba+0xac>)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	6013      	str	r3, [r2, #0]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 800314c:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <_ZL17tcp_server_acceptPvP7tcp_pcba+0xa8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4619      	mov	r1, r3
 8003152:	68b8      	ldr	r0, [r7, #8]
 8003154:	f007 fd6a 	bl	800ac2c <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8003158:	4914      	ldr	r1, [pc, #80]	; (80031ac <_ZL17tcp_server_acceptPvP7tcp_pcba+0xb0>)
 800315a:	68b8      	ldr	r0, [r7, #8]
 800315c:	f007 fd78 	bl	800ac50 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8003160:	4913      	ldr	r1, [pc, #76]	; (80031b0 <_ZL17tcp_server_acceptPvP7tcp_pcba+0xb4>)
 8003162:	68b8      	ldr	r0, [r7, #8]
 8003164:	f007 fdb8 	bl	800acd8 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8003168:	2200      	movs	r2, #0
 800316a:	4912      	ldr	r1, [pc, #72]	; (80031b4 <_ZL17tcp_server_acceptPvP7tcp_pcba+0xb8>)
 800316c:	68b8      	ldr	r0, [r7, #8]
 800316e:	f007 fded 	bl	800ad4c <tcp_poll>

	const char *test_message = "TCP Connected";
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <_ZL17tcp_server_acceptPvP7tcp_pcba+0xbc>)
 8003174:	613b      	str	r3, [r7, #16]
	tcp_server_send_message(server_pcb, test_message);
 8003176:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <_ZL17tcp_server_acceptPvP7tcp_pcba+0xac>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6939      	ldr	r1, [r7, #16]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff4b 	bl	8003018 <_Z23tcp_server_send_messageP7tcp_pcbPKc>

    ret_err = ERR_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	75fb      	strb	r3, [r7, #23]
 8003186:	e007      	b.n	8003198 <_ZL17tcp_server_acceptPvP7tcp_pcba+0x9c>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <_ZL17tcp_server_acceptPvP7tcp_pcba+0xa8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4619      	mov	r1, r3
 800318e:	68b8      	ldr	r0, [r7, #8]
 8003190:	f000 f9a1 	bl	80034d6 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct>
    /* return memory error */
    ret_err = ERR_MEM;
 8003194:	23ff      	movs	r3, #255	; 0xff
 8003196:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8003198:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	2000086c 	.word	0x2000086c
 80031a8:	20000864 	.word	0x20000864
 80031ac:	080031bd 	.word	0x080031bd
 80031b0:	08003329 	.word	0x08003329
 80031b4:	08003359 	.word	0x08003359
 80031b8:	08017724 	.word	0x08017724

080031bc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	70fb      	strb	r3, [r7, #3]

  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x20>
 80031d0:	4b4f      	ldr	r3, [pc, #316]	; (8003310 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x154>)
 80031d2:	22d6      	movs	r2, #214	; 0xd6
 80031d4:	494f      	ldr	r1, [pc, #316]	; (8003314 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x158>)
 80031d6:	4850      	ldr	r0, [pc, #320]	; (8003318 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x15c>)
 80031d8:	f011 fd8c 	bl	8014cf4 <iprintf>

  es = (struct tcp_server_struct *)arg;
 80031dc:	4a4f      	ldr	r2, [pc, #316]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6013      	str	r3, [r2, #0]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d11c      	bne.n	8003222 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x66>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 80031e8:	4b4c      	ldr	r3, [pc, #304]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2203      	movs	r2, #3
 80031ee:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 80031f0:	4b4a      	ldr	r3, [pc, #296]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x4c>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 80031fa:	4b48      	ldr	r3, [pc, #288]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4619      	mov	r1, r3
 8003200:	68b8      	ldr	r0, [r7, #8]
 8003202:	f000 f968 	bl	80034d6 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct>
 8003206:	e009      	b.n	800321c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x60>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8003208:	4945      	ldr	r1, [pc, #276]	; (8003320 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x164>)
 800320a:	68b8      	ldr	r0, [r7, #8]
 800320c:	f007 fd42 	bl	800ac94 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8003210:	4b42      	ldr	r3, [pc, #264]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4619      	mov	r1, r3
 8003216:	68b8      	ldr	r0, [r7, #8]
 8003218:	f000 f90a 	bl	8003430 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct>
    }
    ret_err = ERR_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	75fb      	strb	r3, [r7, #23]
 8003220:	e070      	b.n	8003304 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x148>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8003222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x88>
  {
    /* free received pbuf*/
    if (p != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d006      	beq.n	800323e <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x82>
    {
      es->p = NULL;
 8003230:	4b3a      	ldr	r3, [pc, #232]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f005 fea7 	bl	8008f8c <pbuf_free>
    }
    ret_err = err;
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	75fb      	strb	r3, [r7, #23]
 8003242:	e05f      	b.n	8003304 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x148>
  }
  else if(es->state == ES_ACCEPTED)
 8003244:	4b35      	ldr	r3, [pc, #212]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d115      	bne.n	800327a <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0xbe>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 800324e:	4b33      	ldr	r3, [pc, #204]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2202      	movs	r2, #2
 8003254:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8003256:	4b31      	ldr	r3, [pc, #196]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 800325e:	4930      	ldr	r1, [pc, #192]	; (8003320 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x164>)
 8003260:	68b8      	ldr	r0, [r7, #8]
 8003262:	f007 fd17 	bl	800ac94 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es, "Okay");
 8003266:	4b2d      	ldr	r3, [pc, #180]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a2e      	ldr	r2, [pc, #184]	; (8003324 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x168>)
 800326c:	4619      	mov	r1, r3
 800326e:	68b8      	ldr	r0, [r7, #8]
 8003270:	f000 f958 	bl	8003524 <_Z17tcp_server_handleP7tcp_pcbP17tcp_server_structPKc>

    ret_err = ERR_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	75fb      	strb	r3, [r7, #23]
 8003278:	e044      	b.n	8003304 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x148>
  }
  else if (es->state == ES_RECEIVED)
 800327a:	4b28      	ldr	r3, [pc, #160]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d11b      	bne.n	80032bc <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x100>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8003284:	4b25      	ldr	r3, [pc, #148]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10b      	bne.n	80032a6 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0xea>
    {
      es->p = p;
 800328e:	4b23      	ldr	r3, [pc, #140]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es, "Okay");
 8003296:	4b21      	ldr	r3, [pc, #132]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a22      	ldr	r2, [pc, #136]	; (8003324 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x168>)
 800329c:	4619      	mov	r1, r3
 800329e:	68b8      	ldr	r0, [r7, #8]
 80032a0:	f000 f940 	bl	8003524 <_Z17tcp_server_handleP7tcp_pcbP17tcp_server_structPKc>
 80032a4:	e007      	b.n	80032b6 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0xfa>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 80032a6:	4b1d      	ldr	r3, [pc, #116]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	613b      	str	r3, [r7, #16]
      pbuf_chain(ptr,p);
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	6938      	ldr	r0, [r7, #16]
 80032b2:	f005 ff83 	bl	80091bc <pbuf_chain>
    }
    ret_err = ERR_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]
 80032ba:	e023      	b.n	8003304 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x148>
  }
  else if(es->state == ES_CLOSING)
 80032bc:	4b17      	ldr	r3, [pc, #92]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d10f      	bne.n	80032e6 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x12a>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	891b      	ldrh	r3, [r3, #8]
 80032ca:	4619      	mov	r1, r3
 80032cc:	68b8      	ldr	r0, [r7, #8]
 80032ce:	f006 fdcf 	bl	8009e70 <tcp_recved>
    es->p = NULL;
 80032d2:	4b12      	ldr	r3, [pc, #72]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f005 fe56 	bl	8008f8c <pbuf_free>
    ret_err = ERR_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	75fb      	strb	r3, [r7, #23]
 80032e4:	e00e      	b.n	8003304 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x148>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	891b      	ldrh	r3, [r3, #8]
 80032ea:	4619      	mov	r1, r3
 80032ec:	68b8      	ldr	r0, [r7, #8]
 80032ee:	f006 fdbf 	bl	8009e70 <tcp_recved>
    es->p = NULL;
 80032f2:	4b0a      	ldr	r3, [pc, #40]	; (800331c <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x160>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f005 fe46 	bl	8008f8c <pbuf_free>
    ret_err = ERR_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8003304:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	08017734 	.word	0x08017734
 8003314:	08017754 	.word	0x08017754
 8003318:	08017760 	.word	0x08017760
 800331c:	2000086c 	.word	0x2000086c
 8003320:	080033cd 	.word	0x080033cd
 8003324:	08017788 	.word	0x08017788

08003328 <_ZL16tcp_server_errorPva>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	70fb      	strb	r3, [r7, #3]


  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8003334:	4a07      	ldr	r2, [pc, #28]	; (8003354 <_ZL16tcp_server_errorPva+0x2c>)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6013      	str	r3, [r2, #0]
  if (es != NULL)
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <_ZL16tcp_server_errorPva+0x2c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d004      	beq.n	800334c <_ZL16tcp_server_errorPva+0x24>
  {
    /*  free es structure */
    mem_free(es);
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <_ZL16tcp_server_errorPva+0x2c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f004 fc44 	bl	8007bd4 <mem_free>
  }
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	2000086c 	.word	0x2000086c

08003358 <_ZL15tcp_server_pollPvP7tcp_pcb>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  err_t ret_err;


  es = (struct tcp_server_struct *)arg;
 8003362:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <_ZL15tcp_server_pollPvP7tcp_pcb+0x6c>)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6013      	str	r3, [r2, #0]
  if (es != NULL)
 8003368:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <_ZL15tcp_server_pollPvP7tcp_pcb+0x6c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01d      	beq.n	80033ac <_ZL15tcp_server_pollPvP7tcp_pcb+0x54>
  {
    if (es->p != NULL)
 8003370:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <_ZL15tcp_server_pollPvP7tcp_pcb+0x6c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <_ZL15tcp_server_pollPvP7tcp_pcb+0x38>
    {
      tcp_sent(tpcb, tcp_server_sent);
 800337a:	4913      	ldr	r1, [pc, #76]	; (80033c8 <_ZL15tcp_server_pollPvP7tcp_pcb+0x70>)
 800337c:	6838      	ldr	r0, [r7, #0]
 800337e:	f007 fc89 	bl	800ac94 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8003382:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <_ZL15tcp_server_pollPvP7tcp_pcb+0x6c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4619      	mov	r1, r3
 8003388:	6838      	ldr	r0, [r7, #0]
 800338a:	f000 f851 	bl	8003430 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct>
 800338e:	e00a      	b.n	80033a6 <_ZL15tcp_server_pollPvP7tcp_pcb+0x4e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <_ZL15tcp_server_pollPvP7tcp_pcb+0x6c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d105      	bne.n	80033a6 <_ZL15tcp_server_pollPvP7tcp_pcb+0x4e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 800339a:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <_ZL15tcp_server_pollPvP7tcp_pcb+0x6c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4619      	mov	r1, r3
 80033a0:	6838      	ldr	r0, [r7, #0]
 80033a2:	f000 f898 	bl	80034d6 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct>
      }
    }
    ret_err = ERR_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
 80033aa:	e004      	b.n	80033b6 <_ZL15tcp_server_pollPvP7tcp_pcb+0x5e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 80033ac:	6838      	ldr	r0, [r7, #0]
 80033ae:	f006 fb85 	bl	8009abc <tcp_abort>
    ret_err = ERR_ABRT;
 80033b2:	23f3      	movs	r3, #243	; 0xf3
 80033b4:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 80033b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	2000086c 	.word	0x2000086c
 80033c8:	080033cd 	.word	0x080033cd

080033cc <_ZL15tcp_server_sentPvP7tcp_pcbt>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	4613      	mov	r3, r2
 80033d8:	80fb      	strh	r3, [r7, #6]


  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 80033da:	4a13      	ldr	r2, [pc, #76]	; (8003428 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x5c>)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6013      	str	r3, [r2, #0]
  es->retries = 0;
 80033e0:	4b11      	ldr	r3, [pc, #68]	; (8003428 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x5c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2200      	movs	r2, #0
 80033e6:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x5c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x3c>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 80033f2:	490e      	ldr	r1, [pc, #56]	; (800342c <_ZL15tcp_server_sentPvP7tcp_pcbt+0x60>)
 80033f4:	68b8      	ldr	r0, [r7, #8]
 80033f6:	f007 fc4d 	bl	800ac94 <tcp_sent>
    tcp_server_send(tpcb, es);
 80033fa:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x5c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4619      	mov	r1, r3
 8003400:	68b8      	ldr	r0, [r7, #8]
 8003402:	f000 f815 	bl	8003430 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct>
 8003406:	e00a      	b.n	800341e <_ZL15tcp_server_sentPvP7tcp_pcbt+0x52>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8003408:	4b07      	ldr	r3, [pc, #28]	; (8003428 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x5c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d105      	bne.n	800341e <_ZL15tcp_server_sentPvP7tcp_pcbt+0x52>
      tcp_server_connection_close(tpcb, es);
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x5c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	68b8      	ldr	r0, [r7, #8]
 800341a:	f000 f85c 	bl	80034d6 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct>
  }
  return ERR_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	2000086c 	.word	0x2000086c
 800342c:	080033cd 	.word	0x080033cd

08003430 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 800343e:	e036      	b.n	80034ae <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	6859      	ldr	r1, [r3, #4]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	895a      	ldrh	r2, [r3, #10]
 800344e:	2301      	movs	r3, #1
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f00a fb2d 	bl	800dab0 <tcp_write>
 8003456:	4603      	mov	r3, r0
 8003458:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 800345a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d11d      	bne.n	800349e <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	895b      	ldrh	r3, [r3, #10]
 8003466:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d004      	beq.n	8003482 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4618      	mov	r0, r3
 800347e:	f005 fe25 	bl	80090cc <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8003482:	6938      	ldr	r0, [r7, #16]
 8003484:	f005 fd82 	bl	8008f8c <pbuf_free>
 8003488:	4603      	mov	r3, r0
 800348a:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 800348c:	7b7b      	ldrb	r3, [r7, #13]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f7      	beq.n	8003482 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8003492:	89fb      	ldrh	r3, [r7, #14]
 8003494:	4619      	mov	r1, r3
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f006 fcea 	bl	8009e70 <tcp_recved>
 800349c:	e007      	b.n	80034ae <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x7e>
   }
   else if(wr_err == ERR_MEM)
 800349e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a6:	d102      	bne.n	80034ae <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	609a      	str	r2, [r3, #8]
         (es->p != NULL) &&
 80034ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x9e>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d007      	beq.n	80034ce <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	895a      	ldrh	r2, [r3, #10]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d9b8      	bls.n	8003440 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 80034ce:	bf00      	nop
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 80034e0:	2100      	movs	r1, #0
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f007 fba2 	bl	800ac2c <tcp_arg>
  tcp_sent(tpcb, NULL);
 80034e8:	2100      	movs	r1, #0
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f007 fbd2 	bl	800ac94 <tcp_sent>
  tcp_recv(tpcb, NULL);
 80034f0:	2100      	movs	r1, #0
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f007 fbac 	bl	800ac50 <tcp_recv>
  tcp_err(tpcb, NULL);
 80034f8:	2100      	movs	r1, #0
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f007 fbec 	bl	800acd8 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8003500:	2200      	movs	r2, #0
 8003502:	2100      	movs	r1, #0
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f007 fc21 	bl	800ad4c <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct+0x40>
  {
    mem_free(es);
 8003510:	6838      	ldr	r0, [r7, #0]
 8003512:	f004 fb5f 	bl	8007bd4 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f006 f9e6 	bl	80098e8 <tcp_close>
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <_Z17tcp_server_handleP7tcp_pcbP17tcp_server_structPKc>:

/* Handle the incoming TCP Data */

void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es, const char* ans)
{
 8003524:	b5b0      	push	{r4, r5, r7, lr}
 8003526:	b0a2      	sub	sp, #136	; 0x88
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
	struct tcp_server_struct *esTx;

    // Allouer de la mémoire pour esTx
    esTx = (struct tcp_server_struct *)malloc(sizeof(struct tcp_server_struct));
 8003530:	200c      	movs	r0, #12
 8003532:	f00f febd 	bl	80132b0 <malloc>
 8003536:	4603      	mov	r3, r0
 8003538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (esTx == NULL) {
 800353c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8081 	beq.w	8003648 <_Z17tcp_server_handleP7tcp_pcbP17tcp_server_structPKc+0x124>
        // Gérer l'échec de l'allocation mémoire
        return;
    }

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	67bb      	str	r3, [r7, #120]	; 0x78
	uint16_t inPort = tpcb->remote_port;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8b1b      	ldrh	r3, [r3, #24]
 8003550:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8003554:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003558:	4618      	mov	r0, r3
 800355a:	f00d febf 	bl	80112dc <ip4addr_ntoa>
 800355e:	67f8      	str	r0, [r7, #124]	; 0x7c

	esTx->state = es->state;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003568:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003572:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800357c:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 800357e:	f107 0314 	add.w	r3, r7, #20
 8003582:	2264      	movs	r2, #100	; 0x64
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f011 fd0a 	bl	8014fa0 <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	6859      	ldr	r1, [r3, #4]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	891b      	ldrh	r3, [r3, #8]
 8003598:	461a      	mov	r2, r3
 800359a:	f107 0314 	add.w	r3, r7, #20
 800359e:	4618      	mov	r0, r3
 80035a0:	f011 fd2b 	bl	8014ffa <strncpy>
	strncpy(input, buf, strlen(buf));
 80035a4:	f107 0314 	add.w	r3, r7, #20
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fc fe81 	bl	80002b0 <strlen>
 80035ae:	4602      	mov	r2, r0
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	4619      	mov	r1, r3
 80035b6:	4826      	ldr	r0, [pc, #152]	; (8003650 <_Z17tcp_server_handleP7tcp_pcbP17tcp_server_structPKc+0x12c>)
 80035b8:	f011 fd1f 	bl	8014ffa <strncpy>
	strcat (buf, " -> Command Received\n");
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fc fe75 	bl	80002b0 <strlen>
 80035c6:	4603      	mov	r3, r0
 80035c8:	461a      	mov	r2, r3
 80035ca:	f107 0314 	add.w	r3, r7, #20
 80035ce:	4413      	add	r3, r2
 80035d0:	4a20      	ldr	r2, [pc, #128]	; (8003654 <_Z17tcp_server_handleP7tcp_pcbP17tcp_server_structPKc+0x130>)
 80035d2:	461d      	mov	r5, r3
 80035d4:	4614      	mov	r4, r2
 80035d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d8:	6028      	str	r0, [r5, #0]
 80035da:	6069      	str	r1, [r5, #4]
 80035dc:	60aa      	str	r2, [r5, #8]
 80035de:	60eb      	str	r3, [r5, #12]
 80035e0:	6820      	ldr	r0, [r4, #0]
 80035e2:	6128      	str	r0, [r5, #16]
 80035e4:	88a3      	ldrh	r3, [r4, #4]
 80035e6:	82ab      	strh	r3, [r5, #20]


	esTx->p->payload = (void *)buf;
 80035e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f107 0214 	add.w	r2, r7, #20
 80035f2:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	891a      	ldrh	r2, [r3, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	895b      	ldrh	r3, [r3, #10]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	b29c      	uxth	r4, r3
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4618      	mov	r0, r3
 800360a:	f7fc fe51 	bl	80002b0 <strlen>
 800360e:	4603      	mov	r3, r0
 8003610:	b29a      	uxth	r2, r3
 8003612:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4422      	add	r2, r4
 800361a:	b292      	uxth	r2, r2
 800361c:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 800361e:	f107 0314 	add.w	r3, r7, #20
 8003622:	4618      	mov	r0, r3
 8003624:	f7fc fe44 	bl	80002b0 <strlen>
 8003628:	4602      	mov	r2, r0
 800362a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	b292      	uxth	r2, r2
 8003632:	815a      	strh	r2, [r3, #10]

	//tcp_server_send(tpcb, esTx);

	pbuf_free(es->p);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4618      	mov	r0, r3
 800363a:	f005 fca7 	bl	8008f8c <pbuf_free>

	free(esTx);
 800363e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8003642:	f00f fe3d 	bl	80132c0 <free>
 8003646:	e000      	b.n	800364a <_Z17tcp_server_handleP7tcp_pcbP17tcp_server_structPKc+0x126>
        return;
 8003648:	bf00      	nop

}
 800364a:	3788      	adds	r7, #136	; 0x88
 800364c:	46bd      	mov	sp, r7
 800364e:	bdb0      	pop	{r4, r5, r7, pc}
 8003650:	200007f0 	.word	0x200007f0
 8003654:	08017790 	.word	0x08017790

08003658 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003690 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800365c:	f7ff fcca 	bl	8002ff4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003660:	480c      	ldr	r0, [pc, #48]	; (8003694 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003662:	490d      	ldr	r1, [pc, #52]	; (8003698 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003664:	4a0d      	ldr	r2, [pc, #52]	; (800369c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003668:	e002      	b.n	8003670 <LoopCopyDataInit>

0800366a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800366a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800366c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800366e:	3304      	adds	r3, #4

08003670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003674:	d3f9      	bcc.n	800366a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003676:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003678:	4c0a      	ldr	r4, [pc, #40]	; (80036a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800367a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800367c:	e001      	b.n	8003682 <LoopFillZerobss>

0800367e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800367e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003680:	3204      	adds	r2, #4

08003682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003684:	d3fb      	bcc.n	800367e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003686:	f011 fd87 	bl	8015198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800368a:	f7fd fffd 	bl	8001688 <main>
  bx  lr    
 800368e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003690:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003698:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800369c:	0801b158 	.word	0x0801b158
  ldr r2, =_sbss
 80036a0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80036a4:	2000ae84 	.word	0x2000ae84

080036a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036a8:	e7fe      	b.n	80036a8 <ADC_IRQHandler>

080036aa <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <LAN8742_RegisterBusIO+0x28>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <LAN8742_RegisterBusIO+0x28>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <LAN8742_RegisterBusIO+0x28>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d102      	bne.n	80036d8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295
 80036d6:	e014      	b.n	8003702 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d17c      	bne.n	8003828 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	e01c      	b.n	8003782 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f107 0208 	add.w	r2, r7, #8
 8003750:	2112      	movs	r1, #18
 8003752:	6978      	ldr	r0, [r7, #20]
 8003754:	4798      	blx	r3
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	da03      	bge.n	8003764 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800375c:	f06f 0304 	mvn.w	r3, #4
 8003760:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8003762:	e00b      	b.n	800377c <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	429a      	cmp	r2, r3
 800376e:	d105      	bne.n	800377c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
         break;
 800377a:	e005      	b.n	8003788 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	3301      	adds	r3, #1
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b1f      	cmp	r3, #31
 8003786:	d9df      	bls.n	8003748 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b1f      	cmp	r3, #31
 800378e:	d902      	bls.n	8003796 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003790:	f06f 0302 	mvn.w	r3, #2
 8003794:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d145      	bne.n	8003828 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6810      	ldr	r0, [r2, #0]
 80037a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037a8:	2100      	movs	r1, #0
 80037aa:	4798      	blx	r3
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	db37      	blt.n	8003822 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6810      	ldr	r0, [r2, #0]
 80037ba:	f107 0208 	add.w	r2, r7, #8
 80037be:	2100      	movs	r1, #0
 80037c0:	4798      	blx	r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	db28      	blt.n	800381a <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	4798      	blx	r3
 80037ce:	4603      	mov	r3, r0
 80037d0:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80037d2:	e01c      	b.n	800380e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	4798      	blx	r3
 80037da:	4603      	mov	r3, r0
 80037dc:	461a      	mov	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80037e6:	d80e      	bhi.n	8003806 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6810      	ldr	r0, [r2, #0]
 80037f0:	f107 0208 	add.w	r2, r7, #8
 80037f4:	2100      	movs	r1, #0
 80037f6:	4798      	blx	r3
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	da07      	bge.n	800380e <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 80037fe:	f06f 0304 	mvn.w	r3, #4
 8003802:	613b      	str	r3, [r7, #16]
                 break;
 8003804:	e010      	b.n	8003828 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003806:	f06f 0301 	mvn.w	r3, #1
 800380a:	613b      	str	r3, [r7, #16]
               break;
 800380c:	e00c      	b.n	8003828 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1dd      	bne.n	80037d4 <LAN8742_Init+0xc6>
 8003818:	e006      	b.n	8003828 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800381a:	f06f 0304 	mvn.w	r3, #4
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	e002      	b.n	8003828 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003822:	f06f 0303 	mvn.w	r3, #3
 8003826:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d112      	bne.n	8003854 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	4798      	blx	r3
 8003834:	4603      	mov	r3, r0
 8003836:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003838:	bf00      	nop
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	4798      	blx	r3
 8003840:	4603      	mov	r3, r0
 8003842:	461a      	mov	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800384c:	d9f5      	bls.n	800383a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	605a      	str	r2, [r3, #4]
   }

   return status;
 8003854:	693b      	ldr	r3, [r7, #16]
 }
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6810      	ldr	r0, [r2, #0]
 8003872:	f107 020c 	add.w	r2, r7, #12
 8003876:	2101      	movs	r1, #1
 8003878:	4798      	blx	r3
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	da02      	bge.n	8003886 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003880:	f06f 0304 	mvn.w	r3, #4
 8003884:	e06e      	b.n	8003964 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6810      	ldr	r0, [r2, #0]
 800388e:	f107 020c 	add.w	r2, r7, #12
 8003892:	2101      	movs	r1, #1
 8003894:	4798      	blx	r3
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	da02      	bge.n	80038a2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800389c:	f06f 0304 	mvn.w	r3, #4
 80038a0:	e060      	b.n	8003964 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e059      	b.n	8003964 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6810      	ldr	r0, [r2, #0]
 80038b8:	f107 020c 	add.w	r2, r7, #12
 80038bc:	2100      	movs	r1, #0
 80038be:	4798      	blx	r3
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	da02      	bge.n	80038cc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80038c6:	f06f 0304 	mvn.w	r3, #4
 80038ca:	e04b      	b.n	8003964 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d11b      	bne.n	800390e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d006      	beq.n	80038ee <LAN8742_GetLinkState+0x90>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80038ea:	2302      	movs	r3, #2
 80038ec:	e03a      	b.n	8003964 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e033      	b.n	8003964 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003906:	2304      	movs	r3, #4
 8003908:	e02c      	b.n	8003964 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800390a:	2305      	movs	r3, #5
 800390c:	e02a      	b.n	8003964 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6810      	ldr	r0, [r2, #0]
 8003916:	f107 020c 	add.w	r2, r7, #12
 800391a:	211f      	movs	r1, #31
 800391c:	4798      	blx	r3
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	da02      	bge.n	800392a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003924:	f06f 0304 	mvn.w	r3, #4
 8003928:	e01c      	b.n	8003964 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003934:	2306      	movs	r3, #6
 8003936:	e015      	b.n	8003964 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 031c 	and.w	r3, r3, #28
 800393e:	2b18      	cmp	r3, #24
 8003940:	d101      	bne.n	8003946 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003942:	2302      	movs	r3, #2
 8003944:	e00e      	b.n	8003964 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 031c 	and.w	r3, r3, #28
 800394c:	2b08      	cmp	r3, #8
 800394e:	d101      	bne.n	8003954 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003950:	2303      	movs	r3, #3
 8003952:	e007      	b.n	8003964 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 031c 	and.w	r3, r3, #28
 800395a:	2b14      	cmp	r3, #20
 800395c:	d101      	bne.n	8003962 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800395e:	2304      	movs	r3, #4
 8003960:	e000      	b.n	8003964 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003962:	2305      	movs	r3, #5
    }
  }
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003970:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <HAL_Init+0x40>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <HAL_Init+0x40>)
 8003976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800397a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_Init+0x40>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <HAL_Init+0x40>)
 8003982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_Init+0x40>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a07      	ldr	r2, [pc, #28]	; (80039ac <HAL_Init+0x40>)
 800398e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003994:	2003      	movs	r0, #3
 8003996:	f000 f94f 	bl	8003c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800399a:	200f      	movs	r0, #15
 800399c:	f000 f808 	bl	80039b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039a0:	f7ff f8a4 	bl	8002aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023c00 	.word	0x40023c00

080039b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039b8:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <HAL_InitTick+0x54>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_InitTick+0x58>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	4619      	mov	r1, r3
 80039c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f967 	bl	8003ca2 <HAL_SYSTICK_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e00e      	b.n	80039fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b0f      	cmp	r3, #15
 80039e2:	d80a      	bhi.n	80039fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039e4:	2200      	movs	r2, #0
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	f000 f92f 	bl	8003c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039f0:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <HAL_InitTick+0x5c>)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e000      	b.n	80039fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000000 	.word	0x20000000
 8003a08:	20000008 	.word	0x20000008
 8003a0c:	20000004 	.word	0x20000004

08003a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a14:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <HAL_IncTick+0x20>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_IncTick+0x24>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	4a04      	ldr	r2, [pc, #16]	; (8003a34 <HAL_IncTick+0x24>)
 8003a22:	6013      	str	r3, [r2, #0]
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000008 	.word	0x20000008
 8003a34:	20000b44 	.word	0x20000b44

08003a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a3c:	4b03      	ldr	r3, [pc, #12]	; (8003a4c <HAL_GetTick+0x14>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	20000b44 	.word	0x20000b44

08003a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a58:	f7ff ffee 	bl	8003a38 <HAL_GetTick>
 8003a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d005      	beq.n	8003a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_Delay+0x44>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a76:	bf00      	nop
 8003a78:	f7ff ffde 	bl	8003a38 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d8f7      	bhi.n	8003a78 <HAL_Delay+0x28>
  {
  }
}
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000008 	.word	0x20000008

08003a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <__NVIC_SetPriorityGrouping+0x44>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aca:	4a04      	ldr	r2, [pc, #16]	; (8003adc <__NVIC_SetPriorityGrouping+0x44>)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	60d3      	str	r3, [r2, #12]
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	e000ed00 	.word	0xe000ed00

08003ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae4:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	0a1b      	lsrs	r3, r3, #8
 8003aea:	f003 0307 	and.w	r3, r3, #7
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	e000ed00 	.word	0xe000ed00

08003afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	db0b      	blt.n	8003b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	f003 021f 	and.w	r2, r3, #31
 8003b14:	4907      	ldr	r1, [pc, #28]	; (8003b34 <__NVIC_EnableIRQ+0x38>)
 8003b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	e000e100 	.word	0xe000e100

08003b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	6039      	str	r1, [r7, #0]
 8003b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	db0a      	blt.n	8003b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	490c      	ldr	r1, [pc, #48]	; (8003b84 <__NVIC_SetPriority+0x4c>)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	0112      	lsls	r2, r2, #4
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b60:	e00a      	b.n	8003b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	4908      	ldr	r1, [pc, #32]	; (8003b88 <__NVIC_SetPriority+0x50>)
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	3b04      	subs	r3, #4
 8003b70:	0112      	lsls	r2, r2, #4
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	440b      	add	r3, r1
 8003b76:	761a      	strb	r2, [r3, #24]
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	e000e100 	.word	0xe000e100
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b089      	sub	sp, #36	; 0x24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f1c3 0307 	rsb	r3, r3, #7
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	bf28      	it	cs
 8003baa:	2304      	movcs	r3, #4
 8003bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	2b06      	cmp	r3, #6
 8003bb4:	d902      	bls.n	8003bbc <NVIC_EncodePriority+0x30>
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3b03      	subs	r3, #3
 8003bba:	e000      	b.n	8003bbe <NVIC_EncodePriority+0x32>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	401a      	ands	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	fa01 f303 	lsl.w	r3, r1, r3
 8003bde:	43d9      	mvns	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be4:	4313      	orrs	r3, r2
         );
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3724      	adds	r7, #36	; 0x24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c04:	d301      	bcc.n	8003c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c06:	2301      	movs	r3, #1
 8003c08:	e00f      	b.n	8003c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c0a:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <SysTick_Config+0x40>)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c12:	210f      	movs	r1, #15
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295
 8003c18:	f7ff ff8e 	bl	8003b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <SysTick_Config+0x40>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c22:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <SysTick_Config+0x40>)
 8003c24:	2207      	movs	r2, #7
 8003c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	e000e010 	.word	0xe000e010

08003c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff29 	bl	8003a98 <__NVIC_SetPriorityGrouping>
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	4603      	mov	r3, r0
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c60:	f7ff ff3e 	bl	8003ae0 <__NVIC_GetPriorityGrouping>
 8003c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	6978      	ldr	r0, [r7, #20]
 8003c6c:	f7ff ff8e 	bl	8003b8c <NVIC_EncodePriority>
 8003c70:	4602      	mov	r2, r0
 8003c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ff5d 	bl	8003b38 <__NVIC_SetPriority>
}
 8003c7e:	bf00      	nop
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ff31 	bl	8003afc <__NVIC_EnableIRQ>
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff ffa2 	bl	8003bf4 <SysTick_Config>
 8003cb0:	4603      	mov	r3, r0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e06c      	b.n	8003da8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d106      	bne.n	8003ce6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2223      	movs	r2, #35	; 0x23
 8003cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f003 fbdd 	bl	80074a0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	4b31      	ldr	r3, [pc, #196]	; (8003db0 <HAL_ETH_Init+0xf4>)
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	4a30      	ldr	r2, [pc, #192]	; (8003db0 <HAL_ETH_Init+0xf4>)
 8003cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cf6:	4b2e      	ldr	r3, [pc, #184]	; (8003db0 <HAL_ETH_Init+0xf4>)
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003d02:	4b2c      	ldr	r3, [pc, #176]	; (8003db4 <HAL_ETH_Init+0xf8>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4a2b      	ldr	r2, [pc, #172]	; (8003db4 <HAL_ETH_Init+0xf8>)
 8003d08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d0c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003d0e:	4b29      	ldr	r3, [pc, #164]	; (8003db4 <HAL_ETH_Init+0xf8>)
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	4927      	ldr	r1, [pc, #156]	; (8003db4 <HAL_ETH_Init+0xf8>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003d1c:	4b25      	ldr	r3, [pc, #148]	; (8003db4 <HAL_ETH_Init+0xf8>)
 8003d1e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d38:	f7ff fe7e 	bl	8003a38 <HAL_GetTick>
 8003d3c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003d3e:	e011      	b.n	8003d64 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003d40:	f7ff fe7a 	bl	8003a38 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d4e:	d909      	bls.n	8003d64 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2204      	movs	r2, #4
 8003d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	22e0      	movs	r2, #224	; 0xe0
 8003d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e021      	b.n	8003da8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1e4      	bne.n	8003d40 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fef0 	bl	8004b5c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 ff97 	bl	8004cb0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 ffed 	bl	8004d62 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2100      	movs	r1, #0
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 ff55 	bl	8004c40 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2210      	movs	r2, #16
 8003da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40013800 	.word	0x40013800

08003db8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc6:	2b10      	cmp	r3, #16
 8003dc8:	d150      	bne.n	8003e6c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2223      	movs	r2, #35	; 0x23
 8003dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f9fd 	bl	80041d8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0208 	orr.w	r2, r2, #8
 8003dec:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003df6:	2001      	movs	r0, #1
 8003df8:	f7ff fe2a 	bl	8003a50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0204 	orr.w	r2, r2, #4
 8003e12:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	f7ff fe17 	bl	8003a50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fd36 	bl	800489c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e46:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	f043 0302 	orr.w	r3, r3, #2
 8003e5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e5e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2223      	movs	r2, #35	; 0x23
 8003e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e000      	b.n	8003e6e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e84:	2b23      	cmp	r3, #35	; 0x23
 8003e86:	d14a      	bne.n	8003f1e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2223      	movs	r2, #35	; 0x23
 8003e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ea2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ea6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6812      	ldr	r2, [r2, #0]
 8003eb6:	f023 0302 	bic.w	r3, r3, #2
 8003eba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ebe:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0204 	bic.w	r2, r2, #4
 8003ece:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ed8:	2001      	movs	r0, #1
 8003eda:	f7ff fdb9 	bl	8003a50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fcd8 	bl	800489c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0208 	bic.w	r2, r2, #8
 8003efa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f04:	2001      	movs	r0, #1
 8003f06:	f7ff fda3 	bl	8003a50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2210      	movs	r2, #16
 8003f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e000      	b.n	8003f20 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
  }
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d109      	bne.n	8003f4e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f40:	f043 0201 	orr.w	r2, r3, #1
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e07c      	b.n	8004048 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f54:	2b23      	cmp	r3, #35	; 0x23
 8003f56:	d176      	bne.n	8004046 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 ff6d 	bl	8004e3c <ETH_Prepare_Tx_Descriptors>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d009      	beq.n	8003f7c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6e:	f043 0202 	orr.w	r2, r3, #2
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e065      	b.n	8004048 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8003f7c:	f3bf 8f4f 	dsb	sy
}
 8003f80:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3206      	adds	r2, #6
 8003f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f8e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	629a      	str	r2, [r3, #40]	; 0x28
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d904      	bls.n	8003fac <HAL_ETH_Transmit+0x84>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	1f1a      	subs	r2, r3, #4
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3106      	adds	r1, #6
 8003fb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003fbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fc0:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003fc2:	f7ff fd39 	bl	8003a38 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003fc8:	e037      	b.n	800403a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d011      	beq.n	8004000 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	f043 0208 	orr.w	r2, r3, #8
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e023      	b.n	8004048 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	d018      	beq.n	800403a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004008:	f7ff fd16 	bl	8003a38 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	429a      	cmp	r2, r3
 8004016:	d302      	bcc.n	800401e <HAL_ETH_Transmit+0xf6>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10d      	bne.n	800403a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004024:	f043 0204 	orr.w	r2, r3, #4
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8004034:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e006      	b.n	8004048 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	dbc3      	blt.n	8003fca <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	e000      	b.n	8004048 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
  }
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	f043 0201 	orr.w	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0a8      	b.n	80041ce <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004082:	2b23      	cmp	r3, #35	; 0x23
 8004084:	d001      	beq.n	800408a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0a1      	b.n	80041ce <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	3212      	adds	r2, #18
 8004096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800409a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a0:	f1c3 0304 	rsb	r3, r3, #4
 80040a4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80040a6:	e06a      	b.n	800417e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	69da      	ldr	r2, [r3, #28]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	699a      	ldr	r2, [r3, #24]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d103      	bne.n	80040d8 <HAL_ETH_ReadData+0x88>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d040      	beq.n	800415a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00c      	beq.n	800411c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	0c1b      	lsrs	r3, r3, #16
 8004108:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800410c:	3b04      	subs	r3, #4
 800410e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004134:	461a      	mov	r2, r3
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	b29b      	uxth	r3, r3
 800413a:	f003 fb89 	bl	8007850 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	441a      	add	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	2200      	movs	r2, #0
 8004158:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3301      	adds	r3, #1
 800415e:	61fb      	str	r3, [r7, #28]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d902      	bls.n	800416c <HAL_ETH_ReadData+0x11c>
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3b04      	subs	r3, #4
 800416a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	3212      	adds	r2, #18
 8004172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004176:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	3301      	adds	r3, #1
 800417c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004182:	2b00      	cmp	r3, #0
 8004184:	db06      	blt.n	8004194 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	429a      	cmp	r2, r3
 800418c:	d202      	bcs.n	8004194 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d089      	beq.n	80040a8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	441a      	add	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f815 	bl	80041d8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d108      	bne.n	80041cc <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e000      	b.n	80041ce <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80041e4:	2301      	movs	r3, #1
 80041e6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041ec:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	3212      	adds	r2, #18
 80041f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041fe:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004200:	e03d      	b.n	800427e <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d112      	bne.n	8004230 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800420a:	f107 0308 	add.w	r3, r7, #8
 800420e:	4618      	mov	r0, r3
 8004210:	f003 faee 	bl	80077f0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d102      	bne.n	8004220 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	74fb      	strb	r3, [r7, #19]
 800421e:	e007      	b.n	8004230 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	461a      	mov	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	461a      	mov	r2, r3
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004230:	7cfb      	ldrb	r3, [r7, #19]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d023      	beq.n	800427e <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423a:	2b00      	cmp	r3, #0
 800423c:	d103      	bne.n	8004246 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	4a24      	ldr	r2, [pc, #144]	; (80042d4 <ETH_UpdateDescriptor+0xfc>)
 8004242:	605a      	str	r2, [r3, #4]
 8004244:	e003      	b.n	800424e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800424c:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3301      	adds	r3, #1
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b03      	cmp	r3, #3
 8004264:	d902      	bls.n	800426c <ETH_UpdateDescriptor+0x94>
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	3b04      	subs	r3, #4
 800426a:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	3212      	adds	r2, #18
 8004272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004276:	617b      	str	r3, [r7, #20]
      desccount--;
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	3b01      	subs	r3, #1
 800427c:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <ETH_UpdateDescriptor+0xb2>
 8004284:	7cfb      	ldrb	r3, [r7, #19]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1bb      	bne.n	8004202 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	429a      	cmp	r2, r3
 8004292:	d01a      	beq.n	80042ca <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	3301      	adds	r3, #1
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800429e:	f3bf 8f5f 	dmb	sy
}
 80042a2:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6919      	ldr	r1, [r3, #16]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	18ca      	adds	r2, r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042bc:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80042ca:	bf00      	nop
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	80004600 	.word	0x80004600

080042d8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	d112      	bne.n	8004318 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004300:	2b40      	cmp	r3, #64	; 0x40
 8004302:	d109      	bne.n	8004318 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800430c:	461a      	mov	r2, r3
 800430e:	4b50      	ldr	r3, [pc, #320]	; (8004450 <HAL_ETH_IRQHandler+0x178>)
 8004310:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f8ac 	bl	8004470 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b01      	cmp	r3, #1
 8004328:	d113      	bne.n	8004352 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b01      	cmp	r3, #1
 800433a:	d10a      	bne.n	8004352 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004344:	461a      	mov	r2, r3
 8004346:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800434a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f885 	bl	800445c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004364:	d14c      	bne.n	8004400 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004378:	d142      	bne.n	8004400 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	f043 0208 	orr.w	r2, r3, #8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800439c:	d11a      	bne.n	80043d4 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	4b2a      	ldr	r3, [pc, #168]	; (8004454 <HAL_ETH_IRQHandler+0x17c>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80043c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043c8:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	22e0      	movs	r2, #224	; 0xe0
 80043ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80043d2:	e012      	b.n	80043fa <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	f248 6380 	movw	r3, #34432	; 0x8680
 80043e2:	4013      	ands	r3, r2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f2:	461a      	mov	r2, r3
 80043f4:	f248 6380 	movw	r3, #34432	; 0x8680
 80043f8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f842 	bl	8004484 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b08      	cmp	r3, #8
 800440c:	d10e      	bne.n	800442c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f83a 	bl	8004498 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <HAL_ETH_IRQHandler+0x180>)
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d006      	beq.n	8004446 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <HAL_ETH_IRQHandler+0x180>)
 800443a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800443e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f833 	bl	80044ac <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	00010040 	.word	0x00010040
 8004454:	007e2000 	.word	0x007e2000
 8004458:	40013c00 	.word	0x40013c00

0800445c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f003 031c 	and.w	r3, r3, #28
 80044dc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	02db      	lsls	r3, r3, #11
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	019b      	lsls	r3, r3, #6
 80044ee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f023 0302 	bic.w	r3, r3, #2
 80044fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004510:	f7ff fa92 	bl	8003a38 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004516:	e00d      	b.n	8004534 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004518:	f7ff fa8e 	bl	8003a38 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004526:	d301      	bcc.n	800452c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e010      	b.n	800454e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1ec      	bne.n	8004518 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	b29b      	uxth	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b086      	sub	sp, #24
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
 8004562:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f003 031c 	and.w	r3, r3, #28
 8004572:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	02db      	lsls	r3, r3, #11
 8004578:	b29b      	uxth	r3, r3
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	019b      	lsls	r3, r3, #6
 8004584:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f043 0302 	orr.w	r3, r3, #2
 8004594:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045b0:	f7ff fa42 	bl	8003a38 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80045b6:	e00d      	b.n	80045d4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80045b8:	f7ff fa3e 	bl	8003a38 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c6:	d301      	bcc.n	80045cc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e009      	b.n	80045e0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1ec      	bne.n	80045b8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0d9      	b.n	80047b0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b00      	cmp	r3, #0
 8004608:	bf14      	ite	ne
 800460a:	2301      	movne	r3, #1
 800460c:	2300      	moveq	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004630:	2b00      	cmp	r3, #0
 8004632:	bf0c      	ite	eq
 8004634:	2301      	moveq	r3, #1
 8004636:	2300      	movne	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf14      	ite	ne
 8004650:	2301      	movne	r3, #1
 8004652:	2300      	moveq	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004666:	2b00      	cmp	r3, #0
 8004668:	bf0c      	ite	eq
 800466a:	2301      	moveq	r3, #1
 800466c:	2300      	movne	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf14      	ite	ne
 8004684:	2301      	movne	r3, #1
 8004686:	2300      	moveq	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bf0c      	ite	eq
 80046ba:	2301      	moveq	r3, #1
 80046bc:	2300      	movne	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bf0c      	ite	eq
 80046d4:	2301      	moveq	r3, #1
 80046d6:	2300      	movne	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	461a      	mov	r2, r3
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bf14      	ite	ne
 80046ee:	2301      	movne	r3, #1
 80046f0:	2300      	moveq	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004712:	2b00      	cmp	r3, #0
 8004714:	bf14      	ite	ne
 8004716:	2301      	movne	r3, #1
 8004718:	2300      	moveq	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	bf14      	ite	ne
 8004730:	2301      	movne	r3, #1
 8004732:	2300      	moveq	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004748:	2b00      	cmp	r3, #0
 800474a:	bf0c      	ite	eq
 800474c:	2301      	moveq	r3, #1
 800474e:	2300      	movne	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	461a      	mov	r2, r3
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	0c1b      	lsrs	r3, r3, #16
 8004770:	b29a      	uxth	r2, r3
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf14      	ite	ne
 8004784:	2301      	movne	r3, #1
 8004786:	2300      	moveq	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf14      	ite	ne
 80047a0:	2301      	movne	r3, #1
 80047a2:	2300      	moveq	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e00b      	b.n	80047e8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d6:	2b10      	cmp	r3, #16
 80047d8:	d105      	bne.n	80047e6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80047da:	6839      	ldr	r1, [r7, #0]
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f883 	bl	80048e8 <ETH_SetMACConfig>

    return HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	e000      	b.n	80047e8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
  }
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 031c 	bic.w	r3, r3, #28
 8004806:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004808:	f001 fb86 	bl	8005f18 <HAL_RCC_GetHCLKFreq>
 800480c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	4a1d      	ldr	r2, [pc, #116]	; (8004888 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d908      	bls.n	8004828 <HAL_ETH_SetMDIOClockRange+0x38>
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	4a1c      	ldr	r2, [pc, #112]	; (800488c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d804      	bhi.n	8004828 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f043 0308 	orr.w	r3, r3, #8
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	e027      	b.n	8004878 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4a18      	ldr	r2, [pc, #96]	; (800488c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d908      	bls.n	8004842 <HAL_ETH_SetMDIOClockRange+0x52>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4a17      	ldr	r2, [pc, #92]	; (8004890 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d204      	bcs.n	8004842 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f043 030c 	orr.w	r3, r3, #12
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	e01a      	b.n	8004878 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	4a12      	ldr	r2, [pc, #72]	; (8004890 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d303      	bcc.n	8004852 <HAL_ETH_SetMDIOClockRange+0x62>
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	4a11      	ldr	r2, [pc, #68]	; (8004894 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d911      	bls.n	8004876 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	4a0f      	ldr	r2, [pc, #60]	; (8004894 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d908      	bls.n	800486c <HAL_ETH_SetMDIOClockRange+0x7c>
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	4a0e      	ldr	r2, [pc, #56]	; (8004898 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d804      	bhi.n	800486c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f043 0304 	orr.w	r3, r3, #4
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	e005      	b.n	8004878 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f043 0310 	orr.w	r3, r3, #16
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e000      	b.n	8004878 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004876:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	611a      	str	r2, [r3, #16]
}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	01312cff 	.word	0x01312cff
 800488c:	02160ebf 	.word	0x02160ebf
 8004890:	03938700 	.word	0x03938700
 8004894:	05f5e0ff 	.word	0x05f5e0ff
 8004898:	08f0d17f 	.word	0x08f0d17f

0800489c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6812      	ldr	r2, [r2, #0]
 80048b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048be:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80048cc:	2001      	movs	r0, #1
 80048ce:	f7ff f8bf 	bl	8003a50 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048dc:	6193      	str	r3, [r2, #24]
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4b51      	ldr	r3, [pc, #324]	; (8004a44 <ETH_SetMACConfig+0x15c>)
 80048fe:	4013      	ands	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	7c1b      	ldrb	r3, [r3, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d102      	bne.n	8004910 <ETH_SetMACConfig+0x28>
 800490a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800490e:	e000      	b.n	8004912 <ETH_SetMACConfig+0x2a>
 8004910:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	7c5b      	ldrb	r3, [r3, #17]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d102      	bne.n	8004920 <ETH_SetMACConfig+0x38>
 800491a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800491e:	e000      	b.n	8004922 <ETH_SetMACConfig+0x3a>
 8004920:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004922:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004928:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	7fdb      	ldrb	r3, [r3, #31]
 800492e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004930:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004936:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	7f92      	ldrb	r2, [r2, #30]
 800493c:	2a00      	cmp	r2, #0
 800493e:	d102      	bne.n	8004946 <ETH_SetMACConfig+0x5e>
 8004940:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004944:	e000      	b.n	8004948 <ETH_SetMACConfig+0x60>
 8004946:	2200      	movs	r2, #0
                        macconf->Speed |
 8004948:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	7f1b      	ldrb	r3, [r3, #28]
 800494e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004950:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004956:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	791b      	ldrb	r3, [r3, #4]
 800495c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800495e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004966:	2a00      	cmp	r2, #0
 8004968:	d102      	bne.n	8004970 <ETH_SetMACConfig+0x88>
 800496a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800496e:	e000      	b.n	8004972 <ETH_SetMACConfig+0x8a>
 8004970:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004972:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	7bdb      	ldrb	r3, [r3, #15]
 8004978:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800497a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004980:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004988:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800498a:	4313      	orrs	r3, r2
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80049a2:	2001      	movs	r0, #1
 80049a4:	f7ff f854 	bl	8003a50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	f64f 7341 	movw	r3, #65345	; 0xff41
 80049be:	4013      	ands	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80049ce:	2a00      	cmp	r2, #0
 80049d0:	d101      	bne.n	80049d6 <ETH_SetMACConfig+0xee>
 80049d2:	2280      	movs	r2, #128	; 0x80
 80049d4:	e000      	b.n	80049d8 <ETH_SetMACConfig+0xf0>
 80049d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049d8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80049de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80049e6:	2a01      	cmp	r2, #1
 80049e8:	d101      	bne.n	80049ee <ETH_SetMACConfig+0x106>
 80049ea:	2208      	movs	r2, #8
 80049ec:	e000      	b.n	80049f0 <ETH_SetMACConfig+0x108>
 80049ee:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80049f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80049f8:	2a01      	cmp	r2, #1
 80049fa:	d101      	bne.n	8004a00 <ETH_SetMACConfig+0x118>
 80049fc:	2204      	movs	r2, #4
 80049fe:	e000      	b.n	8004a02 <ETH_SetMACConfig+0x11a>
 8004a00:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004a0a:	2a01      	cmp	r2, #1
 8004a0c:	d101      	bne.n	8004a12 <ETH_SetMACConfig+0x12a>
 8004a0e:	2202      	movs	r2, #2
 8004a10:	e000      	b.n	8004a14 <ETH_SetMACConfig+0x12c>
 8004a12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a14:	4313      	orrs	r3, r2
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	f7ff f80f 	bl	8003a50 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	619a      	str	r2, [r3, #24]
}
 8004a3a:	bf00      	nop
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	ff20810f 	.word	0xff20810f

08004a48 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4b3d      	ldr	r3, [pc, #244]	; (8004b58 <ETH_SetDMAConfig+0x110>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	7b1b      	ldrb	r3, [r3, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d102      	bne.n	8004a74 <ETH_SetDMAConfig+0x2c>
 8004a6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a72:	e000      	b.n	8004a76 <ETH_SetDMAConfig+0x2e>
 8004a74:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	7b5b      	ldrb	r3, [r3, #13]
 8004a7a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a7c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	7f52      	ldrb	r2, [r2, #29]
 8004a82:	2a00      	cmp	r2, #0
 8004a84:	d102      	bne.n	8004a8c <ETH_SetDMAConfig+0x44>
 8004a86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a8a:	e000      	b.n	8004a8e <ETH_SetDMAConfig+0x46>
 8004a8c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a8e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	7b9b      	ldrb	r3, [r3, #14]
 8004a94:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a96:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a9c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	7f1b      	ldrb	r3, [r3, #28]
 8004aa2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004aa4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	7f9b      	ldrb	r3, [r3, #30]
 8004aaa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004aac:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004ab2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004aba:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004abc:	4313      	orrs	r3, r2
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004acc:	461a      	mov	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ade:	2001      	movs	r0, #1
 8004ae0:	f7fe ffb6 	bl	8003a50 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aec:	461a      	mov	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	791b      	ldrb	r3, [r3, #4]
 8004af6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004afc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004b02:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004b08:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b10:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004b12:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b1a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b20:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b2e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	f7fe ff87 	bl	8003a50 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6013      	str	r3, [r2, #0]
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	f8de3f23 	.word	0xf8de3f23

08004b5c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b0a6      	sub	sp, #152	; 0x98
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004b64:	2301      	movs	r3, #1
 8004b66:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004b70:	2300      	movs	r3, #0
 8004b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004b74:	2300      	movs	r3, #0
 8004b76:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004b80:	2300      	movs	r3, #0
 8004b82:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004bac:	2300      	movs	r3, #0
 8004bae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004bbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004bc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004bd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff fe86 	bl	80048e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004be4:	2301      	movs	r3, #1
 8004be6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004bea:	2301      	movs	r3, #1
 8004bec:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004c0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c10:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c16:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c1c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004c2c:	f107 0308 	add.w	r3, r7, #8
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff ff08 	bl	8004a48 <ETH_SetDMAConfig>
}
 8004c38:	bf00      	nop
 8004c3a:	3798      	adds	r7, #152	; 0x98
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3305      	adds	r3, #5
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	3204      	adds	r2, #4
 8004c58:	7812      	ldrb	r2, [r2, #0]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <ETH_MACAddressConfig+0x68>)
 8004c62:	4413      	add	r3, r2
 8004c64:	461a      	mov	r2, r3
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3303      	adds	r3, #3
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	061a      	lsls	r2, r3, #24
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3302      	adds	r3, #2
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	4313      	orrs	r3, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	7812      	ldrb	r2, [r2, #0]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	4b06      	ldr	r3, [pc, #24]	; (8004cac <ETH_MACAddressConfig+0x6c>)
 8004c92:	4413      	add	r3, r2
 8004c94:	461a      	mov	r2, r3
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	6013      	str	r3, [r2, #0]
}
 8004c9a:	bf00      	nop
 8004c9c:	371c      	adds	r7, #28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	40028040 	.word	0x40028040
 8004cac:	40028044 	.word	0x40028044

08004cb0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e03e      	b.n	8004d3c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68d9      	ldr	r1, [r3, #12]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	440b      	add	r3, r1
 8004cce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	3206      	adds	r2, #6
 8004cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d80c      	bhi.n	8004d20 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68d9      	ldr	r1, [r3, #12]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	4613      	mov	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	440b      	add	r3, r1
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	60da      	str	r2, [r3, #12]
 8004d1e:	e004      	b.n	8004d2a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	461a      	mov	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d9bd      	bls.n	8004cbe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d54:	611a      	str	r2, [r3, #16]
}
 8004d56:	bf00      	nop
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b085      	sub	sp, #20
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	e046      	b.n	8004dfe <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6919      	ldr	r1, [r3, #16]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	440b      	add	r3, r1
 8004d80:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2200      	movs	r2, #0
 8004d92:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2200      	movs	r2, #0
 8004d98:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2200      	movs	r2, #0
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004dac:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004db4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	3212      	adds	r2, #18
 8004dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d80c      	bhi.n	8004dee <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6919      	ldr	r1, [r3, #16]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	440b      	add	r3, r1
 8004de6:	461a      	mov	r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	60da      	str	r2, [r3, #12]
 8004dec:	e004      	b.n	8004df8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	461a      	mov	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d9b5      	bls.n	8004d70 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e2e:	60da      	str	r2, [r3, #12]
}
 8004e30:	bf00      	nop
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b08d      	sub	sp, #52	; 0x34
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	3318      	adds	r3, #24
 8004e4c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e66:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e7e:	d007      	beq.n	8004e90 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	3304      	adds	r3, #4
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004e90:	2302      	movs	r3, #2
 8004e92:	e103      	b.n	800509c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	3301      	adds	r3, #1
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004eac:	f023 031f 	bic.w	r3, r3, #31
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	6852      	ldr	r2, [r2, #4]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d008      	beq.n	8004ed8 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004f1a:	f3bf 8f5f 	dmb	sy
}
 8004f1e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004f2c:	e084      	b.n	8005038 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d006      	beq.n	8004f4e <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	e005      	b.n	8004f5a <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d902      	bls.n	8004f6c <ETH_Prepare_Tx_Descriptors+0x130>
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	3b04      	subs	r3, #4
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f74:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f8e:	d007      	beq.n	8004fa0 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f94:	3304      	adds	r3, #4
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d029      	beq.n	8004ff4 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fac:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004fae:	2300      	movs	r3, #0
 8004fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb2:	e019      	b.n	8004fe8 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8004fb4:	f3bf 8f5f 	dmb	sy
}
 8004fb8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	3301      	adds	r3, #1
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d902      	bls.n	8004fd8 <ETH_Prepare_Tx_Descriptors+0x19c>
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	3b04      	subs	r3, #4
 8004fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d3e1      	bcc.n	8004fb4 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e053      	b.n	800509c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8005012:	f023 031f 	bic.w	r3, r3, #31
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	6852      	ldr	r2, [r2, #4]
 800501a:	431a      	orrs	r2, r3
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	3301      	adds	r3, #1
 8005024:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005026:	f3bf 8f5f 	dmb	sy
}
 800502a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	f47f af76 	bne.w	8004f2e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d006      	beq.n	8005056 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	e005      	b.n	8005062 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005072:	6979      	ldr	r1, [r7, #20]
 8005074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005076:	3304      	adds	r3, #4
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005082:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005084:	b672      	cpsid	i
}
 8005086:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	4413      	add	r3, r2
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005096:	b662      	cpsie	i
}
 8005098:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3734      	adds	r7, #52	; 0x34
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b089      	sub	sp, #36	; 0x24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	e177      	b.n	80053b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050c4:	2201      	movs	r2, #1
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4013      	ands	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	429a      	cmp	r2, r3
 80050de:	f040 8166 	bne.w	80053ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d005      	beq.n	80050fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d130      	bne.n	800515c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	2203      	movs	r2, #3
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	43db      	mvns	r3, r3
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	4013      	ands	r3, r2
 8005110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	4313      	orrs	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005130:	2201      	movs	r2, #1
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	43db      	mvns	r3, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4013      	ands	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	091b      	lsrs	r3, r3, #4
 8005146:	f003 0201 	and.w	r2, r3, #1
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4313      	orrs	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	2b03      	cmp	r3, #3
 8005166:	d017      	beq.n	8005198 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	2203      	movs	r2, #3
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	43db      	mvns	r3, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4013      	ands	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4313      	orrs	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d123      	bne.n	80051ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	08da      	lsrs	r2, r3, #3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3208      	adds	r2, #8
 80051ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	220f      	movs	r2, #15
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4013      	ands	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	4313      	orrs	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	08da      	lsrs	r2, r3, #3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3208      	adds	r2, #8
 80051e6:	69b9      	ldr	r1, [r7, #24]
 80051e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	2203      	movs	r2, #3
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	43db      	mvns	r3, r3
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4013      	ands	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 0203 	and.w	r2, r3, #3
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4313      	orrs	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80c0 	beq.w	80053ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	4b66      	ldr	r3, [pc, #408]	; (80053cc <HAL_GPIO_Init+0x324>)
 8005234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005236:	4a65      	ldr	r2, [pc, #404]	; (80053cc <HAL_GPIO_Init+0x324>)
 8005238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800523c:	6453      	str	r3, [r2, #68]	; 0x44
 800523e:	4b63      	ldr	r3, [pc, #396]	; (80053cc <HAL_GPIO_Init+0x324>)
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800524a:	4a61      	ldr	r2, [pc, #388]	; (80053d0 <HAL_GPIO_Init+0x328>)
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	089b      	lsrs	r3, r3, #2
 8005250:	3302      	adds	r3, #2
 8005252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	220f      	movs	r2, #15
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	43db      	mvns	r3, r3
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	4013      	ands	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a58      	ldr	r2, [pc, #352]	; (80053d4 <HAL_GPIO_Init+0x32c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d037      	beq.n	80052e6 <HAL_GPIO_Init+0x23e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a57      	ldr	r2, [pc, #348]	; (80053d8 <HAL_GPIO_Init+0x330>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d031      	beq.n	80052e2 <HAL_GPIO_Init+0x23a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a56      	ldr	r2, [pc, #344]	; (80053dc <HAL_GPIO_Init+0x334>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d02b      	beq.n	80052de <HAL_GPIO_Init+0x236>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a55      	ldr	r2, [pc, #340]	; (80053e0 <HAL_GPIO_Init+0x338>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d025      	beq.n	80052da <HAL_GPIO_Init+0x232>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a54      	ldr	r2, [pc, #336]	; (80053e4 <HAL_GPIO_Init+0x33c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d01f      	beq.n	80052d6 <HAL_GPIO_Init+0x22e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a53      	ldr	r2, [pc, #332]	; (80053e8 <HAL_GPIO_Init+0x340>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d019      	beq.n	80052d2 <HAL_GPIO_Init+0x22a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a52      	ldr	r2, [pc, #328]	; (80053ec <HAL_GPIO_Init+0x344>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <HAL_GPIO_Init+0x226>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a51      	ldr	r2, [pc, #324]	; (80053f0 <HAL_GPIO_Init+0x348>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00d      	beq.n	80052ca <HAL_GPIO_Init+0x222>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a50      	ldr	r2, [pc, #320]	; (80053f4 <HAL_GPIO_Init+0x34c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d007      	beq.n	80052c6 <HAL_GPIO_Init+0x21e>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a4f      	ldr	r2, [pc, #316]	; (80053f8 <HAL_GPIO_Init+0x350>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d101      	bne.n	80052c2 <HAL_GPIO_Init+0x21a>
 80052be:	2309      	movs	r3, #9
 80052c0:	e012      	b.n	80052e8 <HAL_GPIO_Init+0x240>
 80052c2:	230a      	movs	r3, #10
 80052c4:	e010      	b.n	80052e8 <HAL_GPIO_Init+0x240>
 80052c6:	2308      	movs	r3, #8
 80052c8:	e00e      	b.n	80052e8 <HAL_GPIO_Init+0x240>
 80052ca:	2307      	movs	r3, #7
 80052cc:	e00c      	b.n	80052e8 <HAL_GPIO_Init+0x240>
 80052ce:	2306      	movs	r3, #6
 80052d0:	e00a      	b.n	80052e8 <HAL_GPIO_Init+0x240>
 80052d2:	2305      	movs	r3, #5
 80052d4:	e008      	b.n	80052e8 <HAL_GPIO_Init+0x240>
 80052d6:	2304      	movs	r3, #4
 80052d8:	e006      	b.n	80052e8 <HAL_GPIO_Init+0x240>
 80052da:	2303      	movs	r3, #3
 80052dc:	e004      	b.n	80052e8 <HAL_GPIO_Init+0x240>
 80052de:	2302      	movs	r3, #2
 80052e0:	e002      	b.n	80052e8 <HAL_GPIO_Init+0x240>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <HAL_GPIO_Init+0x240>
 80052e6:	2300      	movs	r3, #0
 80052e8:	69fa      	ldr	r2, [r7, #28]
 80052ea:	f002 0203 	and.w	r2, r2, #3
 80052ee:	0092      	lsls	r2, r2, #2
 80052f0:	4093      	lsls	r3, r2
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052f8:	4935      	ldr	r1, [pc, #212]	; (80053d0 <HAL_GPIO_Init+0x328>)
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	089b      	lsrs	r3, r3, #2
 80052fe:	3302      	adds	r3, #2
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005306:	4b3d      	ldr	r3, [pc, #244]	; (80053fc <HAL_GPIO_Init+0x354>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	43db      	mvns	r3, r3
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	4013      	ands	r3, r2
 8005314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800532a:	4a34      	ldr	r2, [pc, #208]	; (80053fc <HAL_GPIO_Init+0x354>)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005330:	4b32      	ldr	r3, [pc, #200]	; (80053fc <HAL_GPIO_Init+0x354>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	43db      	mvns	r3, r3
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4013      	ands	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005354:	4a29      	ldr	r2, [pc, #164]	; (80053fc <HAL_GPIO_Init+0x354>)
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800535a:	4b28      	ldr	r3, [pc, #160]	; (80053fc <HAL_GPIO_Init+0x354>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	43db      	mvns	r3, r3
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	4013      	ands	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800537e:	4a1f      	ldr	r2, [pc, #124]	; (80053fc <HAL_GPIO_Init+0x354>)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005384:	4b1d      	ldr	r3, [pc, #116]	; (80053fc <HAL_GPIO_Init+0x354>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	43db      	mvns	r3, r3
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	4013      	ands	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053a8:	4a14      	ldr	r2, [pc, #80]	; (80053fc <HAL_GPIO_Init+0x354>)
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	3301      	adds	r3, #1
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	2b0f      	cmp	r3, #15
 80053b8:	f67f ae84 	bls.w	80050c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	3724      	adds	r7, #36	; 0x24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40023800 	.word	0x40023800
 80053d0:	40013800 	.word	0x40013800
 80053d4:	40020000 	.word	0x40020000
 80053d8:	40020400 	.word	0x40020400
 80053dc:	40020800 	.word	0x40020800
 80053e0:	40020c00 	.word	0x40020c00
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40021400 	.word	0x40021400
 80053ec:	40021800 	.word	0x40021800
 80053f0:	40021c00 	.word	0x40021c00
 80053f4:	40022000 	.word	0x40022000
 80053f8:	40022400 	.word	0x40022400
 80053fc:	40013c00 	.word	0x40013c00

08005400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	807b      	strh	r3, [r7, #2]
 800540c:	4613      	mov	r3, r2
 800540e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005410:	787b      	ldrb	r3, [r7, #1]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005416:	887a      	ldrh	r2, [r7, #2]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800541c:	e003      	b.n	8005426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800541e:	887b      	ldrh	r3, [r7, #2]
 8005420:	041a      	lsls	r2, r3, #16
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	619a      	str	r2, [r3, #24]
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b086      	sub	sp, #24
 8005436:	af02      	add	r7, sp, #8
 8005438:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e101      	b.n	8005648 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fd fc70 	bl	8002d44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2203      	movs	r2, #3
 8005468:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005472:	d102      	bne.n	800547a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f001 fa76 	bl	8006970 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	7c1a      	ldrb	r2, [r3, #16]
 800548c:	f88d 2000 	strb.w	r2, [sp]
 8005490:	3304      	adds	r3, #4
 8005492:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005494:	f001 fa08 	bl	80068a8 <USB_CoreInit>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e0ce      	b.n	8005648 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2100      	movs	r1, #0
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 fa6e 	bl	8006992 <USB_SetCurrentMode>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0bf      	b.n	8005648 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
 80054cc:	e04a      	b.n	8005564 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80054ce:	7bfa      	ldrb	r2, [r7, #15]
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	3315      	adds	r3, #21
 80054de:	2201      	movs	r2, #1
 80054e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80054e2:	7bfa      	ldrb	r2, [r7, #15]
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	4413      	add	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	3314      	adds	r3, #20
 80054f2:	7bfa      	ldrb	r2, [r7, #15]
 80054f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80054f6:	7bfa      	ldrb	r2, [r7, #15]
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	b298      	uxth	r0, r3
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	4613      	mov	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	440b      	add	r3, r1
 8005508:	332e      	adds	r3, #46	; 0x2e
 800550a:	4602      	mov	r2, r0
 800550c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800550e:	7bfa      	ldrb	r2, [r7, #15]
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	4413      	add	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	3318      	adds	r3, #24
 800551e:	2200      	movs	r2, #0
 8005520:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005522:	7bfa      	ldrb	r2, [r7, #15]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	331c      	adds	r3, #28
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005536:	7bfa      	ldrb	r2, [r7, #15]
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	4613      	mov	r3, r2
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	440b      	add	r3, r1
 8005544:	3320      	adds	r3, #32
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800554a:	7bfa      	ldrb	r2, [r7, #15]
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	3324      	adds	r3, #36	; 0x24
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	3301      	adds	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	791b      	ldrb	r3, [r3, #4]
 8005568:	7bfa      	ldrb	r2, [r7, #15]
 800556a:	429a      	cmp	r2, r3
 800556c:	d3af      	bcc.n	80054ce <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]
 8005572:	e044      	b.n	80055fe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005574:	7bfa      	ldrb	r2, [r7, #15]
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	4613      	mov	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	f203 2355 	addw	r3, r3, #597	; 0x255
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800558a:	7bfa      	ldrb	r2, [r7, #15]
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800559c:	7bfa      	ldrb	r2, [r7, #15]
 800559e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80055a0:	7bfa      	ldrb	r2, [r7, #15]
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80055b2:	2200      	movs	r2, #0
 80055b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80055b6:	7bfa      	ldrb	r2, [r7, #15]
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80055cc:	7bfa      	ldrb	r2, [r7, #15]
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	4613      	mov	r3, r2
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	4413      	add	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	440b      	add	r3, r1
 80055da:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80055e2:	7bfa      	ldrb	r2, [r7, #15]
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	4613      	mov	r3, r2
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	440b      	add	r3, r1
 80055f0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	3301      	adds	r3, #1
 80055fc:	73fb      	strb	r3, [r7, #15]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	791b      	ldrb	r3, [r3, #4]
 8005602:	7bfa      	ldrb	r2, [r7, #15]
 8005604:	429a      	cmp	r2, r3
 8005606:	d3b5      	bcc.n	8005574 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6818      	ldr	r0, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	7c1a      	ldrb	r2, [r3, #16]
 8005610:	f88d 2000 	strb.w	r2, [sp]
 8005614:	3304      	adds	r3, #4
 8005616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005618:	f001 fa08 	bl	8006a2c <USB_DevInit>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e00c      	b.n	8005648 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4618      	mov	r0, r3
 8005642:	f001 fbd0 	bl	8006de6 <USB_DevDisconnect>

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e267      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d075      	beq.n	800575a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800566e:	4b88      	ldr	r3, [pc, #544]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 030c 	and.w	r3, r3, #12
 8005676:	2b04      	cmp	r3, #4
 8005678:	d00c      	beq.n	8005694 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800567a:	4b85      	ldr	r3, [pc, #532]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005682:	2b08      	cmp	r3, #8
 8005684:	d112      	bne.n	80056ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005686:	4b82      	ldr	r3, [pc, #520]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005692:	d10b      	bne.n	80056ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005694:	4b7e      	ldr	r3, [pc, #504]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d05b      	beq.n	8005758 <HAL_RCC_OscConfig+0x108>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d157      	bne.n	8005758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e242      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b4:	d106      	bne.n	80056c4 <HAL_RCC_OscConfig+0x74>
 80056b6:	4b76      	ldr	r3, [pc, #472]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a75      	ldr	r2, [pc, #468]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 80056bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	e01d      	b.n	8005700 <HAL_RCC_OscConfig+0xb0>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056cc:	d10c      	bne.n	80056e8 <HAL_RCC_OscConfig+0x98>
 80056ce:	4b70      	ldr	r3, [pc, #448]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a6f      	ldr	r2, [pc, #444]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 80056d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056d8:	6013      	str	r3, [r2, #0]
 80056da:	4b6d      	ldr	r3, [pc, #436]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a6c      	ldr	r2, [pc, #432]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 80056e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	e00b      	b.n	8005700 <HAL_RCC_OscConfig+0xb0>
 80056e8:	4b69      	ldr	r3, [pc, #420]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a68      	ldr	r2, [pc, #416]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 80056ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	4b66      	ldr	r3, [pc, #408]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a65      	ldr	r2, [pc, #404]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 80056fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d013      	beq.n	8005730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005708:	f7fe f996 	bl	8003a38 <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005710:	f7fe f992 	bl	8003a38 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b64      	cmp	r3, #100	; 0x64
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e207      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005722:	4b5b      	ldr	r3, [pc, #364]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0f0      	beq.n	8005710 <HAL_RCC_OscConfig+0xc0>
 800572e:	e014      	b.n	800575a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005730:	f7fe f982 	bl	8003a38 <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005738:	f7fe f97e 	bl	8003a38 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b64      	cmp	r3, #100	; 0x64
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e1f3      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800574a:	4b51      	ldr	r3, [pc, #324]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f0      	bne.n	8005738 <HAL_RCC_OscConfig+0xe8>
 8005756:	e000      	b.n	800575a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d063      	beq.n	800582e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005766:	4b4a      	ldr	r3, [pc, #296]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 030c 	and.w	r3, r3, #12
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005772:	4b47      	ldr	r3, [pc, #284]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800577a:	2b08      	cmp	r3, #8
 800577c:	d11c      	bne.n	80057b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800577e:	4b44      	ldr	r3, [pc, #272]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d116      	bne.n	80057b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800578a:	4b41      	ldr	r3, [pc, #260]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <HAL_RCC_OscConfig+0x152>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d001      	beq.n	80057a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e1c7      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057a2:	4b3b      	ldr	r3, [pc, #236]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4937      	ldr	r1, [pc, #220]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057b6:	e03a      	b.n	800582e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d020      	beq.n	8005802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057c0:	4b34      	ldr	r3, [pc, #208]	; (8005894 <HAL_RCC_OscConfig+0x244>)
 80057c2:	2201      	movs	r2, #1
 80057c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c6:	f7fe f937 	bl	8003a38 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057cc:	e008      	b.n	80057e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057ce:	f7fe f933 	bl	8003a38 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e1a8      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e0:	4b2b      	ldr	r3, [pc, #172]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f0      	beq.n	80057ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ec:	4b28      	ldr	r3, [pc, #160]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	4925      	ldr	r1, [pc, #148]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	600b      	str	r3, [r1, #0]
 8005800:	e015      	b.n	800582e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005802:	4b24      	ldr	r3, [pc, #144]	; (8005894 <HAL_RCC_OscConfig+0x244>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005808:	f7fe f916 	bl	8003a38 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005810:	f7fe f912 	bl	8003a38 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e187      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005822:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d036      	beq.n	80058a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d016      	beq.n	8005870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005842:	4b15      	ldr	r3, [pc, #84]	; (8005898 <HAL_RCC_OscConfig+0x248>)
 8005844:	2201      	movs	r2, #1
 8005846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005848:	f7fe f8f6 	bl	8003a38 <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005850:	f7fe f8f2 	bl	8003a38 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e167      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005862:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <HAL_RCC_OscConfig+0x240>)
 8005864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0f0      	beq.n	8005850 <HAL_RCC_OscConfig+0x200>
 800586e:	e01b      	b.n	80058a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005870:	4b09      	ldr	r3, [pc, #36]	; (8005898 <HAL_RCC_OscConfig+0x248>)
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005876:	f7fe f8df 	bl	8003a38 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800587c:	e00e      	b.n	800589c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800587e:	f7fe f8db 	bl	8003a38 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d907      	bls.n	800589c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e150      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
 8005890:	40023800 	.word	0x40023800
 8005894:	42470000 	.word	0x42470000
 8005898:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800589c:	4b88      	ldr	r3, [pc, #544]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 800589e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1ea      	bne.n	800587e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8097 	beq.w	80059e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058b6:	2300      	movs	r3, #0
 80058b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ba:	4b81      	ldr	r3, [pc, #516]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10f      	bne.n	80058e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058c6:	2300      	movs	r3, #0
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	4b7d      	ldr	r3, [pc, #500]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	4a7c      	ldr	r2, [pc, #496]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 80058d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d4:	6413      	str	r3, [r2, #64]	; 0x40
 80058d6:	4b7a      	ldr	r3, [pc, #488]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058de:	60bb      	str	r3, [r7, #8]
 80058e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058e2:	2301      	movs	r3, #1
 80058e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e6:	4b77      	ldr	r3, [pc, #476]	; (8005ac4 <HAL_RCC_OscConfig+0x474>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d118      	bne.n	8005924 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058f2:	4b74      	ldr	r3, [pc, #464]	; (8005ac4 <HAL_RCC_OscConfig+0x474>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a73      	ldr	r2, [pc, #460]	; (8005ac4 <HAL_RCC_OscConfig+0x474>)
 80058f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058fe:	f7fe f89b 	bl	8003a38 <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005904:	e008      	b.n	8005918 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005906:	f7fe f897 	bl	8003a38 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e10c      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005918:	4b6a      	ldr	r3, [pc, #424]	; (8005ac4 <HAL_RCC_OscConfig+0x474>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0f0      	beq.n	8005906 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d106      	bne.n	800593a <HAL_RCC_OscConfig+0x2ea>
 800592c:	4b64      	ldr	r3, [pc, #400]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	4a63      	ldr	r2, [pc, #396]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005932:	f043 0301 	orr.w	r3, r3, #1
 8005936:	6713      	str	r3, [r2, #112]	; 0x70
 8005938:	e01c      	b.n	8005974 <HAL_RCC_OscConfig+0x324>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b05      	cmp	r3, #5
 8005940:	d10c      	bne.n	800595c <HAL_RCC_OscConfig+0x30c>
 8005942:	4b5f      	ldr	r3, [pc, #380]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	4a5e      	ldr	r2, [pc, #376]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005948:	f043 0304 	orr.w	r3, r3, #4
 800594c:	6713      	str	r3, [r2, #112]	; 0x70
 800594e:	4b5c      	ldr	r3, [pc, #368]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	4a5b      	ldr	r2, [pc, #364]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	6713      	str	r3, [r2, #112]	; 0x70
 800595a:	e00b      	b.n	8005974 <HAL_RCC_OscConfig+0x324>
 800595c:	4b58      	ldr	r3, [pc, #352]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 800595e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005960:	4a57      	ldr	r2, [pc, #348]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	6713      	str	r3, [r2, #112]	; 0x70
 8005968:	4b55      	ldr	r3, [pc, #340]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 800596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596c:	4a54      	ldr	r2, [pc, #336]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 800596e:	f023 0304 	bic.w	r3, r3, #4
 8005972:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d015      	beq.n	80059a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597c:	f7fe f85c 	bl	8003a38 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005982:	e00a      	b.n	800599a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005984:	f7fe f858 	bl	8003a38 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e0cb      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800599a:	4b49      	ldr	r3, [pc, #292]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0ee      	beq.n	8005984 <HAL_RCC_OscConfig+0x334>
 80059a6:	e014      	b.n	80059d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059a8:	f7fe f846 	bl	8003a38 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ae:	e00a      	b.n	80059c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b0:	f7fe f842 	bl	8003a38 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e0b5      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059c6:	4b3e      	ldr	r3, [pc, #248]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1ee      	bne.n	80059b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d105      	bne.n	80059e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059d8:	4b39      	ldr	r3, [pc, #228]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	4a38      	ldr	r2, [pc, #224]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 80059de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 80a1 	beq.w	8005b30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059ee:	4b34      	ldr	r3, [pc, #208]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 030c 	and.w	r3, r3, #12
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	d05c      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d141      	bne.n	8005a86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a02:	4b31      	ldr	r3, [pc, #196]	; (8005ac8 <HAL_RCC_OscConfig+0x478>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a08:	f7fe f816 	bl	8003a38 <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a10:	f7fe f812 	bl	8003a38 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e087      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a22:	4b27      	ldr	r3, [pc, #156]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f0      	bne.n	8005a10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69da      	ldr	r2, [r3, #28]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	019b      	lsls	r3, r3, #6
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	3b01      	subs	r3, #1
 8005a48:	041b      	lsls	r3, r3, #16
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	061b      	lsls	r3, r3, #24
 8005a52:	491b      	ldr	r1, [pc, #108]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a58:	4b1b      	ldr	r3, [pc, #108]	; (8005ac8 <HAL_RCC_OscConfig+0x478>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5e:	f7fd ffeb 	bl	8003a38 <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a66:	f7fd ffe7 	bl	8003a38 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e05c      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a78:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0f0      	beq.n	8005a66 <HAL_RCC_OscConfig+0x416>
 8005a84:	e054      	b.n	8005b30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a86:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <HAL_RCC_OscConfig+0x478>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a8c:	f7fd ffd4 	bl	8003a38 <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a94:	f7fd ffd0 	bl	8003a38 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e045      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aa6:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <HAL_RCC_OscConfig+0x470>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f0      	bne.n	8005a94 <HAL_RCC_OscConfig+0x444>
 8005ab2:	e03d      	b.n	8005b30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d107      	bne.n	8005acc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e038      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	40007000 	.word	0x40007000
 8005ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005acc:	4b1b      	ldr	r3, [pc, #108]	; (8005b3c <HAL_RCC_OscConfig+0x4ec>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d028      	beq.n	8005b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d121      	bne.n	8005b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d11a      	bne.n	8005b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005afc:	4013      	ands	r3, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d111      	bne.n	8005b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b12:	085b      	lsrs	r3, r3, #1
 8005b14:	3b01      	subs	r3, #1
 8005b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d107      	bne.n	8005b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d001      	beq.n	8005b30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40023800 	.word	0x40023800

08005b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e0cc      	b.n	8005cee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b54:	4b68      	ldr	r3, [pc, #416]	; (8005cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d90c      	bls.n	8005b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b62:	4b65      	ldr	r3, [pc, #404]	; (8005cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b6a:	4b63      	ldr	r3, [pc, #396]	; (8005cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d001      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e0b8      	b.n	8005cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d020      	beq.n	8005bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d005      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b94:	4b59      	ldr	r3, [pc, #356]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	4a58      	ldr	r2, [pc, #352]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005b9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bac:	4b53      	ldr	r3, [pc, #332]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	4a52      	ldr	r2, [pc, #328]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bb8:	4b50      	ldr	r3, [pc, #320]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	494d      	ldr	r1, [pc, #308]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d044      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d107      	bne.n	8005bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bde:	4b47      	ldr	r3, [pc, #284]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d119      	bne.n	8005c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e07f      	b.n	8005cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d003      	beq.n	8005bfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d107      	bne.n	8005c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bfe:	4b3f      	ldr	r3, [pc, #252]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d109      	bne.n	8005c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e06f      	b.n	8005cee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c0e:	4b3b      	ldr	r3, [pc, #236]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e067      	b.n	8005cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c1e:	4b37      	ldr	r3, [pc, #220]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f023 0203 	bic.w	r2, r3, #3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	4934      	ldr	r1, [pc, #208]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c30:	f7fd ff02 	bl	8003a38 <HAL_GetTick>
 8005c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c36:	e00a      	b.n	8005c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c38:	f7fd fefe 	bl	8003a38 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e04f      	b.n	8005cee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c4e:	4b2b      	ldr	r3, [pc, #172]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 020c 	and.w	r2, r3, #12
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d1eb      	bne.n	8005c38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c60:	4b25      	ldr	r3, [pc, #148]	; (8005cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d20c      	bcs.n	8005c88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c6e:	4b22      	ldr	r3, [pc, #136]	; (8005cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c76:	4b20      	ldr	r3, [pc, #128]	; (8005cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d001      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e032      	b.n	8005cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d008      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c94:	4b19      	ldr	r3, [pc, #100]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	4916      	ldr	r1, [pc, #88]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cb2:	4b12      	ldr	r3, [pc, #72]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	490e      	ldr	r1, [pc, #56]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cc6:	f000 f821 	bl	8005d0c <HAL_RCC_GetSysClockFreq>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <HAL_RCC_ClockConfig+0x1bc>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	091b      	lsrs	r3, r3, #4
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	490a      	ldr	r1, [pc, #40]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005cd8:	5ccb      	ldrb	r3, [r1, r3]
 8005cda:	fa22 f303 	lsr.w	r3, r2, r3
 8005cde:	4a09      	ldr	r2, [pc, #36]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ce2:	4b09      	ldr	r3, [pc, #36]	; (8005d08 <HAL_RCC_ClockConfig+0x1c8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fd fe62 	bl	80039b0 <HAL_InitTick>

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	40023c00 	.word	0x40023c00
 8005cfc:	40023800 	.word	0x40023800
 8005d00:	0801a988 	.word	0x0801a988
 8005d04:	20000000 	.word	0x20000000
 8005d08:	20000004 	.word	0x20000004

08005d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d10:	b094      	sub	sp, #80	; 0x50
 8005d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	647b      	str	r3, [r7, #68]	; 0x44
 8005d18:	2300      	movs	r3, #0
 8005d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d24:	4b79      	ldr	r3, [pc, #484]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f003 030c 	and.w	r3, r3, #12
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d00d      	beq.n	8005d4c <HAL_RCC_GetSysClockFreq+0x40>
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	f200 80e1 	bhi.w	8005ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <HAL_RCC_GetSysClockFreq+0x34>
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d003      	beq.n	8005d46 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d3e:	e0db      	b.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d40:	4b73      	ldr	r3, [pc, #460]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005d44:	e0db      	b.n	8005efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d46:	4b73      	ldr	r3, [pc, #460]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d4a:	e0d8      	b.n	8005efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d4c:	4b6f      	ldr	r3, [pc, #444]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d56:	4b6d      	ldr	r3, [pc, #436]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d063      	beq.n	8005e2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d62:	4b6a      	ldr	r3, [pc, #424]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	099b      	lsrs	r3, r3, #6
 8005d68:	2200      	movs	r2, #0
 8005d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d74:	633b      	str	r3, [r7, #48]	; 0x30
 8005d76:	2300      	movs	r3, #0
 8005d78:	637b      	str	r3, [r7, #52]	; 0x34
 8005d7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d7e:	4622      	mov	r2, r4
 8005d80:	462b      	mov	r3, r5
 8005d82:	f04f 0000 	mov.w	r0, #0
 8005d86:	f04f 0100 	mov.w	r1, #0
 8005d8a:	0159      	lsls	r1, r3, #5
 8005d8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d90:	0150      	lsls	r0, r2, #5
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4621      	mov	r1, r4
 8005d98:	1a51      	subs	r1, r2, r1
 8005d9a:	6139      	str	r1, [r7, #16]
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	f04f 0300 	mov.w	r3, #0
 8005dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005db0:	4659      	mov	r1, fp
 8005db2:	018b      	lsls	r3, r1, #6
 8005db4:	4651      	mov	r1, sl
 8005db6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dba:	4651      	mov	r1, sl
 8005dbc:	018a      	lsls	r2, r1, #6
 8005dbe:	4651      	mov	r1, sl
 8005dc0:	ebb2 0801 	subs.w	r8, r2, r1
 8005dc4:	4659      	mov	r1, fp
 8005dc6:	eb63 0901 	sbc.w	r9, r3, r1
 8005dca:	f04f 0200 	mov.w	r2, #0
 8005dce:	f04f 0300 	mov.w	r3, #0
 8005dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dde:	4690      	mov	r8, r2
 8005de0:	4699      	mov	r9, r3
 8005de2:	4623      	mov	r3, r4
 8005de4:	eb18 0303 	adds.w	r3, r8, r3
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	462b      	mov	r3, r5
 8005dec:	eb49 0303 	adc.w	r3, r9, r3
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dfe:	4629      	mov	r1, r5
 8005e00:	024b      	lsls	r3, r1, #9
 8005e02:	4621      	mov	r1, r4
 8005e04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e08:	4621      	mov	r1, r4
 8005e0a:	024a      	lsls	r2, r1, #9
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e12:	2200      	movs	r2, #0
 8005e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e1c:	f7fa ff54 	bl	8000cc8 <__aeabi_uldivmod>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4613      	mov	r3, r2
 8005e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e28:	e058      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e2a:	4b38      	ldr	r3, [pc, #224]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	099b      	lsrs	r3, r3, #6
 8005e30:	2200      	movs	r2, #0
 8005e32:	4618      	mov	r0, r3
 8005e34:	4611      	mov	r1, r2
 8005e36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e3a:	623b      	str	r3, [r7, #32]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e44:	4642      	mov	r2, r8
 8005e46:	464b      	mov	r3, r9
 8005e48:	f04f 0000 	mov.w	r0, #0
 8005e4c:	f04f 0100 	mov.w	r1, #0
 8005e50:	0159      	lsls	r1, r3, #5
 8005e52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e56:	0150      	lsls	r0, r2, #5
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4641      	mov	r1, r8
 8005e5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e62:	4649      	mov	r1, r9
 8005e64:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e68:	f04f 0200 	mov.w	r2, #0
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e7c:	ebb2 040a 	subs.w	r4, r2, sl
 8005e80:	eb63 050b 	sbc.w	r5, r3, fp
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	00eb      	lsls	r3, r5, #3
 8005e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e92:	00e2      	lsls	r2, r4, #3
 8005e94:	4614      	mov	r4, r2
 8005e96:	461d      	mov	r5, r3
 8005e98:	4643      	mov	r3, r8
 8005e9a:	18e3      	adds	r3, r4, r3
 8005e9c:	603b      	str	r3, [r7, #0]
 8005e9e:	464b      	mov	r3, r9
 8005ea0:	eb45 0303 	adc.w	r3, r5, r3
 8005ea4:	607b      	str	r3, [r7, #4]
 8005ea6:	f04f 0200 	mov.w	r2, #0
 8005eaa:	f04f 0300 	mov.w	r3, #0
 8005eae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	028b      	lsls	r3, r1, #10
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	028a      	lsls	r2, r1, #10
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	61fa      	str	r2, [r7, #28]
 8005ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ed0:	f7fa fefa 	bl	8000cc8 <__aeabi_uldivmod>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4613      	mov	r3, r2
 8005eda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005edc:	4b0b      	ldr	r3, [pc, #44]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	0c1b      	lsrs	r3, r3, #16
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005eec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ef6:	e002      	b.n	8005efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ef8:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8005efa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3750      	adds	r7, #80	; 0x50
 8005f04:	46bd      	mov	sp, r7
 8005f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f0a:	bf00      	nop
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	00f42400 	.word	0x00f42400
 8005f14:	007a1200 	.word	0x007a1200

08005f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f1c:	4b03      	ldr	r3, [pc, #12]	; (8005f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	20000000 	.word	0x20000000

08005f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f34:	f7ff fff0 	bl	8005f18 <HAL_RCC_GetHCLKFreq>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	0a9b      	lsrs	r3, r3, #10
 8005f40:	f003 0307 	and.w	r3, r3, #7
 8005f44:	4903      	ldr	r1, [pc, #12]	; (8005f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f46:	5ccb      	ldrb	r3, [r1, r3]
 8005f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40023800 	.word	0x40023800
 8005f54:	0801a998 	.word	0x0801a998

08005f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f5c:	f7ff ffdc 	bl	8005f18 <HAL_RCC_GetHCLKFreq>
 8005f60:	4602      	mov	r2, r0
 8005f62:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	0b5b      	lsrs	r3, r3, #13
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	4903      	ldr	r1, [pc, #12]	; (8005f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f6e:	5ccb      	ldrb	r3, [r1, r3]
 8005f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	40023800 	.word	0x40023800
 8005f7c:	0801a998 	.word	0x0801a998

08005f80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e07b      	b.n	800608a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d108      	bne.n	8005fac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fa2:	d009      	beq.n	8005fb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	61da      	str	r2, [r3, #28]
 8005faa:	e005      	b.n	8005fb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fc fdb2 	bl	8002b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006000:	431a      	orrs	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	431a      	orrs	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006028:	431a      	orrs	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603c:	ea42 0103 	orr.w	r1, r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006044:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	0c1b      	lsrs	r3, r3, #16
 8006056:	f003 0104 	and.w	r1, r3, #4
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	f003 0210 	and.w	r2, r3, #16
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69da      	ldr	r2, [r3, #28]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006078:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b082      	sub	sp, #8
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e042      	b.n	800612a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d106      	bne.n	80060be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7fc fdfb 	bl	8002cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2224      	movs	r2, #36	; 0x24
 80060c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f972 	bl	80063c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695a      	ldr	r2, [r3, #20]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68da      	ldr	r2, [r3, #12]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800610a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2220      	movs	r2, #32
 800611e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b08a      	sub	sp, #40	; 0x28
 8006136:	af02      	add	r7, sp, #8
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	603b      	str	r3, [r7, #0]
 800613e:	4613      	mov	r3, r2
 8006140:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b20      	cmp	r3, #32
 8006150:	d175      	bne.n	800623e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <HAL_UART_Transmit+0x2c>
 8006158:	88fb      	ldrh	r3, [r7, #6]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e06e      	b.n	8006240 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2221      	movs	r2, #33	; 0x21
 800616c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006170:	f7fd fc62 	bl	8003a38 <HAL_GetTick>
 8006174:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	88fa      	ldrh	r2, [r7, #6]
 800617a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	88fa      	ldrh	r2, [r7, #6]
 8006180:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618a:	d108      	bne.n	800619e <HAL_UART_Transmit+0x6c>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006194:	2300      	movs	r3, #0
 8006196:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	e003      	b.n	80061a6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061a6:	e02e      	b.n	8006206 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2200      	movs	r2, #0
 80061b0:	2180      	movs	r1, #128	; 0x80
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 f848 	bl	8006248 <UART_WaitOnFlagUntilTimeout>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d005      	beq.n	80061ca <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e03a      	b.n	8006240 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10b      	bne.n	80061e8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061de:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	3302      	adds	r3, #2
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	e007      	b.n	80061f8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	781a      	ldrb	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	3301      	adds	r3, #1
 80061f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1cb      	bne.n	80061a8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2200      	movs	r2, #0
 8006218:	2140      	movs	r1, #64	; 0x40
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 f814 	bl	8006248 <UART_WaitOnFlagUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d005      	beq.n	8006232 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e006      	b.n	8006240 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	e000      	b.n	8006240 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800623e:	2302      	movs	r3, #2
  }
}
 8006240:	4618      	mov	r0, r3
 8006242:	3720      	adds	r7, #32
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	4613      	mov	r3, r2
 8006256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006258:	e03b      	b.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006260:	d037      	beq.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006262:	f7fd fbe9 	bl	8003a38 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	6a3a      	ldr	r2, [r7, #32]
 800626e:	429a      	cmp	r2, r3
 8006270:	d302      	bcc.n	8006278 <UART_WaitOnFlagUntilTimeout+0x30>
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e03a      	b.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f003 0304 	and.w	r3, r3, #4
 8006286:	2b00      	cmp	r3, #0
 8006288:	d023      	beq.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2b80      	cmp	r3, #128	; 0x80
 800628e:	d020      	beq.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b40      	cmp	r3, #64	; 0x40
 8006294:	d01d      	beq.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d116      	bne.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 f81d 	bl	80062fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2208      	movs	r2, #8
 80062c4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e00f      	b.n	80062f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4013      	ands	r3, r2
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	429a      	cmp	r2, r3
 80062e0:	bf0c      	ite	eq
 80062e2:	2301      	moveq	r3, #1
 80062e4:	2300      	movne	r3, #0
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	461a      	mov	r2, r3
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d0b4      	beq.n	800625a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b095      	sub	sp, #84	; 0x54
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	330c      	adds	r3, #12
 8006308:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006318:	64fb      	str	r3, [r7, #76]	; 0x4c
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	330c      	adds	r3, #12
 8006320:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006322:	643a      	str	r2, [r7, #64]	; 0x40
 8006324:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006326:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006328:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1e5      	bne.n	8006302 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3314      	adds	r3, #20
 800633c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	61fb      	str	r3, [r7, #28]
   return(result);
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	f023 0301 	bic.w	r3, r3, #1
 800634c:	64bb      	str	r3, [r7, #72]	; 0x48
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3314      	adds	r3, #20
 8006354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006356:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800635c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e5      	bne.n	8006336 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636e:	2b01      	cmp	r3, #1
 8006370:	d119      	bne.n	80063a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	330c      	adds	r3, #12
 8006378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	60bb      	str	r3, [r7, #8]
   return(result);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f023 0310 	bic.w	r3, r3, #16
 8006388:	647b      	str	r3, [r7, #68]	; 0x44
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	330c      	adds	r3, #12
 8006390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006392:	61ba      	str	r2, [r7, #24]
 8006394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6979      	ldr	r1, [r7, #20]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	613b      	str	r3, [r7, #16]
   return(result);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063b4:	bf00      	nop
 80063b6:	3754      	adds	r7, #84	; 0x54
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063c4:	b0c0      	sub	sp, #256	; 0x100
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063dc:	68d9      	ldr	r1, [r3, #12]
 80063de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	ea40 0301 	orr.w	r3, r0, r1
 80063e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	431a      	orrs	r2, r3
 80063f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	431a      	orrs	r2, r3
 8006400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	4313      	orrs	r3, r2
 8006408:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006418:	f021 010c 	bic.w	r1, r1, #12
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006426:	430b      	orrs	r3, r1
 8006428:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800642a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643a:	6999      	ldr	r1, [r3, #24]
 800643c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	ea40 0301 	orr.w	r3, r0, r1
 8006446:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	4b8f      	ldr	r3, [pc, #572]	; (800668c <UART_SetConfig+0x2cc>)
 8006450:	429a      	cmp	r2, r3
 8006452:	d005      	beq.n	8006460 <UART_SetConfig+0xa0>
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4b8d      	ldr	r3, [pc, #564]	; (8006690 <UART_SetConfig+0x2d0>)
 800645c:	429a      	cmp	r2, r3
 800645e:	d104      	bne.n	800646a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006460:	f7ff fd7a 	bl	8005f58 <HAL_RCC_GetPCLK2Freq>
 8006464:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006468:	e003      	b.n	8006472 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800646a:	f7ff fd61 	bl	8005f30 <HAL_RCC_GetPCLK1Freq>
 800646e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800647c:	f040 810c 	bne.w	8006698 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006484:	2200      	movs	r2, #0
 8006486:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800648a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800648e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006492:	4622      	mov	r2, r4
 8006494:	462b      	mov	r3, r5
 8006496:	1891      	adds	r1, r2, r2
 8006498:	65b9      	str	r1, [r7, #88]	; 0x58
 800649a:	415b      	adcs	r3, r3
 800649c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800649e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064a2:	4621      	mov	r1, r4
 80064a4:	eb12 0801 	adds.w	r8, r2, r1
 80064a8:	4629      	mov	r1, r5
 80064aa:	eb43 0901 	adc.w	r9, r3, r1
 80064ae:	f04f 0200 	mov.w	r2, #0
 80064b2:	f04f 0300 	mov.w	r3, #0
 80064b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064c2:	4690      	mov	r8, r2
 80064c4:	4699      	mov	r9, r3
 80064c6:	4623      	mov	r3, r4
 80064c8:	eb18 0303 	adds.w	r3, r8, r3
 80064cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064d0:	462b      	mov	r3, r5
 80064d2:	eb49 0303 	adc.w	r3, r9, r3
 80064d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80064ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80064ee:	460b      	mov	r3, r1
 80064f0:	18db      	adds	r3, r3, r3
 80064f2:	653b      	str	r3, [r7, #80]	; 0x50
 80064f4:	4613      	mov	r3, r2
 80064f6:	eb42 0303 	adc.w	r3, r2, r3
 80064fa:	657b      	str	r3, [r7, #84]	; 0x54
 80064fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006500:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006504:	f7fa fbe0 	bl	8000cc8 <__aeabi_uldivmod>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4b61      	ldr	r3, [pc, #388]	; (8006694 <UART_SetConfig+0x2d4>)
 800650e:	fba3 2302 	umull	r2, r3, r3, r2
 8006512:	095b      	lsrs	r3, r3, #5
 8006514:	011c      	lsls	r4, r3, #4
 8006516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800651a:	2200      	movs	r2, #0
 800651c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006520:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006524:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006528:	4642      	mov	r2, r8
 800652a:	464b      	mov	r3, r9
 800652c:	1891      	adds	r1, r2, r2
 800652e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006530:	415b      	adcs	r3, r3
 8006532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006534:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006538:	4641      	mov	r1, r8
 800653a:	eb12 0a01 	adds.w	sl, r2, r1
 800653e:	4649      	mov	r1, r9
 8006540:	eb43 0b01 	adc.w	fp, r3, r1
 8006544:	f04f 0200 	mov.w	r2, #0
 8006548:	f04f 0300 	mov.w	r3, #0
 800654c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006550:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006554:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006558:	4692      	mov	sl, r2
 800655a:	469b      	mov	fp, r3
 800655c:	4643      	mov	r3, r8
 800655e:	eb1a 0303 	adds.w	r3, sl, r3
 8006562:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006566:	464b      	mov	r3, r9
 8006568:	eb4b 0303 	adc.w	r3, fp, r3
 800656c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800657c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006580:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006584:	460b      	mov	r3, r1
 8006586:	18db      	adds	r3, r3, r3
 8006588:	643b      	str	r3, [r7, #64]	; 0x40
 800658a:	4613      	mov	r3, r2
 800658c:	eb42 0303 	adc.w	r3, r2, r3
 8006590:	647b      	str	r3, [r7, #68]	; 0x44
 8006592:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006596:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800659a:	f7fa fb95 	bl	8000cc8 <__aeabi_uldivmod>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4611      	mov	r1, r2
 80065a4:	4b3b      	ldr	r3, [pc, #236]	; (8006694 <UART_SetConfig+0x2d4>)
 80065a6:	fba3 2301 	umull	r2, r3, r3, r1
 80065aa:	095b      	lsrs	r3, r3, #5
 80065ac:	2264      	movs	r2, #100	; 0x64
 80065ae:	fb02 f303 	mul.w	r3, r2, r3
 80065b2:	1acb      	subs	r3, r1, r3
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80065ba:	4b36      	ldr	r3, [pc, #216]	; (8006694 <UART_SetConfig+0x2d4>)
 80065bc:	fba3 2302 	umull	r2, r3, r3, r2
 80065c0:	095b      	lsrs	r3, r3, #5
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065c8:	441c      	add	r4, r3
 80065ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ce:	2200      	movs	r2, #0
 80065d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80065d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80065dc:	4642      	mov	r2, r8
 80065de:	464b      	mov	r3, r9
 80065e0:	1891      	adds	r1, r2, r2
 80065e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80065e4:	415b      	adcs	r3, r3
 80065e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065ec:	4641      	mov	r1, r8
 80065ee:	1851      	adds	r1, r2, r1
 80065f0:	6339      	str	r1, [r7, #48]	; 0x30
 80065f2:	4649      	mov	r1, r9
 80065f4:	414b      	adcs	r3, r1
 80065f6:	637b      	str	r3, [r7, #52]	; 0x34
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006604:	4659      	mov	r1, fp
 8006606:	00cb      	lsls	r3, r1, #3
 8006608:	4651      	mov	r1, sl
 800660a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800660e:	4651      	mov	r1, sl
 8006610:	00ca      	lsls	r2, r1, #3
 8006612:	4610      	mov	r0, r2
 8006614:	4619      	mov	r1, r3
 8006616:	4603      	mov	r3, r0
 8006618:	4642      	mov	r2, r8
 800661a:	189b      	adds	r3, r3, r2
 800661c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006620:	464b      	mov	r3, r9
 8006622:	460a      	mov	r2, r1
 8006624:	eb42 0303 	adc.w	r3, r2, r3
 8006628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800662c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006638:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800663c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006640:	460b      	mov	r3, r1
 8006642:	18db      	adds	r3, r3, r3
 8006644:	62bb      	str	r3, [r7, #40]	; 0x28
 8006646:	4613      	mov	r3, r2
 8006648:	eb42 0303 	adc.w	r3, r2, r3
 800664c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800664e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006652:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006656:	f7fa fb37 	bl	8000cc8 <__aeabi_uldivmod>
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	4b0d      	ldr	r3, [pc, #52]	; (8006694 <UART_SetConfig+0x2d4>)
 8006660:	fba3 1302 	umull	r1, r3, r3, r2
 8006664:	095b      	lsrs	r3, r3, #5
 8006666:	2164      	movs	r1, #100	; 0x64
 8006668:	fb01 f303 	mul.w	r3, r1, r3
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	3332      	adds	r3, #50	; 0x32
 8006672:	4a08      	ldr	r2, [pc, #32]	; (8006694 <UART_SetConfig+0x2d4>)
 8006674:	fba2 2303 	umull	r2, r3, r2, r3
 8006678:	095b      	lsrs	r3, r3, #5
 800667a:	f003 0207 	and.w	r2, r3, #7
 800667e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4422      	add	r2, r4
 8006686:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006688:	e106      	b.n	8006898 <UART_SetConfig+0x4d8>
 800668a:	bf00      	nop
 800668c:	40011000 	.word	0x40011000
 8006690:	40011400 	.word	0x40011400
 8006694:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800669c:	2200      	movs	r2, #0
 800669e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80066a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80066aa:	4642      	mov	r2, r8
 80066ac:	464b      	mov	r3, r9
 80066ae:	1891      	adds	r1, r2, r2
 80066b0:	6239      	str	r1, [r7, #32]
 80066b2:	415b      	adcs	r3, r3
 80066b4:	627b      	str	r3, [r7, #36]	; 0x24
 80066b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066ba:	4641      	mov	r1, r8
 80066bc:	1854      	adds	r4, r2, r1
 80066be:	4649      	mov	r1, r9
 80066c0:	eb43 0501 	adc.w	r5, r3, r1
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	00eb      	lsls	r3, r5, #3
 80066ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066d2:	00e2      	lsls	r2, r4, #3
 80066d4:	4614      	mov	r4, r2
 80066d6:	461d      	mov	r5, r3
 80066d8:	4643      	mov	r3, r8
 80066da:	18e3      	adds	r3, r4, r3
 80066dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066e0:	464b      	mov	r3, r9
 80066e2:	eb45 0303 	adc.w	r3, r5, r3
 80066e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066fa:	f04f 0200 	mov.w	r2, #0
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006706:	4629      	mov	r1, r5
 8006708:	008b      	lsls	r3, r1, #2
 800670a:	4621      	mov	r1, r4
 800670c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006710:	4621      	mov	r1, r4
 8006712:	008a      	lsls	r2, r1, #2
 8006714:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006718:	f7fa fad6 	bl	8000cc8 <__aeabi_uldivmod>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	4b60      	ldr	r3, [pc, #384]	; (80068a4 <UART_SetConfig+0x4e4>)
 8006722:	fba3 2302 	umull	r2, r3, r3, r2
 8006726:	095b      	lsrs	r3, r3, #5
 8006728:	011c      	lsls	r4, r3, #4
 800672a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800672e:	2200      	movs	r2, #0
 8006730:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006734:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006738:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800673c:	4642      	mov	r2, r8
 800673e:	464b      	mov	r3, r9
 8006740:	1891      	adds	r1, r2, r2
 8006742:	61b9      	str	r1, [r7, #24]
 8006744:	415b      	adcs	r3, r3
 8006746:	61fb      	str	r3, [r7, #28]
 8006748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800674c:	4641      	mov	r1, r8
 800674e:	1851      	adds	r1, r2, r1
 8006750:	6139      	str	r1, [r7, #16]
 8006752:	4649      	mov	r1, r9
 8006754:	414b      	adcs	r3, r1
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	f04f 0300 	mov.w	r3, #0
 8006760:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006764:	4659      	mov	r1, fp
 8006766:	00cb      	lsls	r3, r1, #3
 8006768:	4651      	mov	r1, sl
 800676a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800676e:	4651      	mov	r1, sl
 8006770:	00ca      	lsls	r2, r1, #3
 8006772:	4610      	mov	r0, r2
 8006774:	4619      	mov	r1, r3
 8006776:	4603      	mov	r3, r0
 8006778:	4642      	mov	r2, r8
 800677a:	189b      	adds	r3, r3, r2
 800677c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006780:	464b      	mov	r3, r9
 8006782:	460a      	mov	r2, r1
 8006784:	eb42 0303 	adc.w	r3, r2, r3
 8006788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	67bb      	str	r3, [r7, #120]	; 0x78
 8006796:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006798:	f04f 0200 	mov.w	r2, #0
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80067a4:	4649      	mov	r1, r9
 80067a6:	008b      	lsls	r3, r1, #2
 80067a8:	4641      	mov	r1, r8
 80067aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067ae:	4641      	mov	r1, r8
 80067b0:	008a      	lsls	r2, r1, #2
 80067b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80067b6:	f7fa fa87 	bl	8000cc8 <__aeabi_uldivmod>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	4611      	mov	r1, r2
 80067c0:	4b38      	ldr	r3, [pc, #224]	; (80068a4 <UART_SetConfig+0x4e4>)
 80067c2:	fba3 2301 	umull	r2, r3, r3, r1
 80067c6:	095b      	lsrs	r3, r3, #5
 80067c8:	2264      	movs	r2, #100	; 0x64
 80067ca:	fb02 f303 	mul.w	r3, r2, r3
 80067ce:	1acb      	subs	r3, r1, r3
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	3332      	adds	r3, #50	; 0x32
 80067d4:	4a33      	ldr	r2, [pc, #204]	; (80068a4 <UART_SetConfig+0x4e4>)
 80067d6:	fba2 2303 	umull	r2, r3, r2, r3
 80067da:	095b      	lsrs	r3, r3, #5
 80067dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067e0:	441c      	add	r4, r3
 80067e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067e6:	2200      	movs	r2, #0
 80067e8:	673b      	str	r3, [r7, #112]	; 0x70
 80067ea:	677a      	str	r2, [r7, #116]	; 0x74
 80067ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80067f0:	4642      	mov	r2, r8
 80067f2:	464b      	mov	r3, r9
 80067f4:	1891      	adds	r1, r2, r2
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	415b      	adcs	r3, r3
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006800:	4641      	mov	r1, r8
 8006802:	1851      	adds	r1, r2, r1
 8006804:	6039      	str	r1, [r7, #0]
 8006806:	4649      	mov	r1, r9
 8006808:	414b      	adcs	r3, r1
 800680a:	607b      	str	r3, [r7, #4]
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006818:	4659      	mov	r1, fp
 800681a:	00cb      	lsls	r3, r1, #3
 800681c:	4651      	mov	r1, sl
 800681e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006822:	4651      	mov	r1, sl
 8006824:	00ca      	lsls	r2, r1, #3
 8006826:	4610      	mov	r0, r2
 8006828:	4619      	mov	r1, r3
 800682a:	4603      	mov	r3, r0
 800682c:	4642      	mov	r2, r8
 800682e:	189b      	adds	r3, r3, r2
 8006830:	66bb      	str	r3, [r7, #104]	; 0x68
 8006832:	464b      	mov	r3, r9
 8006834:	460a      	mov	r2, r1
 8006836:	eb42 0303 	adc.w	r3, r2, r3
 800683a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800683c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	663b      	str	r3, [r7, #96]	; 0x60
 8006846:	667a      	str	r2, [r7, #100]	; 0x64
 8006848:	f04f 0200 	mov.w	r2, #0
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006854:	4649      	mov	r1, r9
 8006856:	008b      	lsls	r3, r1, #2
 8006858:	4641      	mov	r1, r8
 800685a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800685e:	4641      	mov	r1, r8
 8006860:	008a      	lsls	r2, r1, #2
 8006862:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006866:	f7fa fa2f 	bl	8000cc8 <__aeabi_uldivmod>
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <UART_SetConfig+0x4e4>)
 8006870:	fba3 1302 	umull	r1, r3, r3, r2
 8006874:	095b      	lsrs	r3, r3, #5
 8006876:	2164      	movs	r1, #100	; 0x64
 8006878:	fb01 f303 	mul.w	r3, r1, r3
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	3332      	adds	r3, #50	; 0x32
 8006882:	4a08      	ldr	r2, [pc, #32]	; (80068a4 <UART_SetConfig+0x4e4>)
 8006884:	fba2 2303 	umull	r2, r3, r2, r3
 8006888:	095b      	lsrs	r3, r3, #5
 800688a:	f003 020f 	and.w	r2, r3, #15
 800688e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4422      	add	r2, r4
 8006896:	609a      	str	r2, [r3, #8]
}
 8006898:	bf00      	nop
 800689a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800689e:	46bd      	mov	sp, r7
 80068a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068a4:	51eb851f 	.word	0x51eb851f

080068a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068a8:	b084      	sub	sp, #16
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	f107 001c 	add.w	r0, r7, #28
 80068b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068ba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d123      	bne.n	800690a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80068d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d105      	bne.n	80068fe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 faa0 	bl	8006e44 <USB_CoreReset>
 8006904:	4603      	mov	r3, r0
 8006906:	73fb      	strb	r3, [r7, #15]
 8006908:	e01b      	b.n	8006942 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fa94 	bl	8006e44 <USB_CoreReset>
 800691c:	4603      	mov	r3, r0
 800691e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006920:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006924:	2b00      	cmp	r3, #0
 8006926:	d106      	bne.n	8006936 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	639a      	str	r2, [r3, #56]	; 0x38
 8006934:	e005      	b.n	8006942 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006942:	7fbb      	ldrb	r3, [r7, #30]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d10b      	bne.n	8006960 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f043 0206 	orr.w	r2, r3, #6
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f043 0220 	orr.w	r2, r3, #32
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006960:	7bfb      	ldrb	r3, [r7, #15]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800696c:	b004      	add	sp, #16
 800696e:	4770      	bx	lr

08006970 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f023 0201 	bic.w	r2, r3, #1
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	460b      	mov	r3, r1
 800699c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069ae:	78fb      	ldrb	r3, [r7, #3]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d115      	bne.n	80069e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80069c0:	200a      	movs	r0, #10
 80069c2:	f7fd f845 	bl	8003a50 <HAL_Delay>
      ms += 10U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	330a      	adds	r3, #10
 80069ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fa2b 	bl	8006e28 <USB_GetMode>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d01e      	beq.n	8006a16 <USB_SetCurrentMode+0x84>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2bc7      	cmp	r3, #199	; 0xc7
 80069dc:	d9f0      	bls.n	80069c0 <USB_SetCurrentMode+0x2e>
 80069de:	e01a      	b.n	8006a16 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80069e0:	78fb      	ldrb	r3, [r7, #3]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d115      	bne.n	8006a12 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80069f2:	200a      	movs	r0, #10
 80069f4:	f7fd f82c 	bl	8003a50 <HAL_Delay>
      ms += 10U;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	330a      	adds	r3, #10
 80069fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fa12 	bl	8006e28 <USB_GetMode>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d005      	beq.n	8006a16 <USB_SetCurrentMode+0x84>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2bc7      	cmp	r3, #199	; 0xc7
 8006a0e:	d9f0      	bls.n	80069f2 <USB_SetCurrentMode+0x60>
 8006a10:	e001      	b.n	8006a16 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e005      	b.n	8006a22 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2bc8      	cmp	r3, #200	; 0xc8
 8006a1a:	d101      	bne.n	8006a20 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b086      	sub	sp, #24
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a46:	2300      	movs	r3, #0
 8006a48:	613b      	str	r3, [r7, #16]
 8006a4a:	e009      	b.n	8006a60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	3340      	adds	r3, #64	; 0x40
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	2200      	movs	r2, #0
 8006a58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	613b      	str	r3, [r7, #16]
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	2b0e      	cmp	r3, #14
 8006a64:	d9f2      	bls.n	8006a4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d11c      	bne.n	8006aa8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a7c:	f043 0302 	orr.w	r3, r3, #2
 8006a80:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	639a      	str	r2, [r3, #56]	; 0x38
 8006aa6:	e00b      	b.n	8006ac0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	2300      	movs	r3, #0
 8006aca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006acc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d10d      	bne.n	8006af0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d104      	bne.n	8006ae6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006adc:	2100      	movs	r1, #0
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f968 	bl	8006db4 <USB_SetDevSpeed>
 8006ae4:	e008      	b.n	8006af8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f963 	bl	8006db4 <USB_SetDevSpeed>
 8006aee:	e003      	b.n	8006af8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006af0:	2103      	movs	r1, #3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f95e 	bl	8006db4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006af8:	2110      	movs	r1, #16
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f8fa 	bl	8006cf4 <USB_FlushTxFifo>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f924 	bl	8006d58 <USB_FlushRxFifo>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b20:	461a      	mov	r2, r3
 8006b22:	2300      	movs	r3, #0
 8006b24:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	2300      	movs	r3, #0
 8006b30:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b38:	461a      	mov	r2, r3
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b3e:	2300      	movs	r3, #0
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	e043      	b.n	8006bcc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b5a:	d118      	bne.n	8006b8e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	e013      	b.n	8006ba0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b84:	461a      	mov	r2, r3
 8006b86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	e008      	b.n	8006ba0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bac:	461a      	mov	r2, r3
 8006bae:	2300      	movs	r3, #0
 8006bb0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bc4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d3b5      	bcc.n	8006b44 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bd8:	2300      	movs	r3, #0
 8006bda:	613b      	str	r3, [r7, #16]
 8006bdc:	e043      	b.n	8006c66 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bf4:	d118      	bne.n	8006c28 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c08:	461a      	mov	r2, r3
 8006c0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	e013      	b.n	8006c3a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1e:	461a      	mov	r2, r3
 8006c20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	e008      	b.n	8006c3a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c34:	461a      	mov	r2, r3
 8006c36:	2300      	movs	r3, #0
 8006c38:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c46:	461a      	mov	r2, r3
 8006c48:	2300      	movs	r3, #0
 8006c4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c58:	461a      	mov	r2, r3
 8006c5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	3301      	adds	r3, #1
 8006c64:	613b      	str	r3, [r7, #16]
 8006c66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d3b5      	bcc.n	8006bde <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c84:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006c92:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d105      	bne.n	8006ca8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	f043 0210 	orr.w	r2, r3, #16
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	699a      	ldr	r2, [r3, #24]
 8006cac:	4b10      	ldr	r3, [pc, #64]	; (8006cf0 <USB_DevInit+0x2c4>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006cb4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d005      	beq.n	8006cc8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	f043 0208 	orr.w	r2, r3, #8
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006cc8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d107      	bne.n	8006ce0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cd8:	f043 0304 	orr.w	r3, r3, #4
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cec:	b004      	add	sp, #16
 8006cee:	4770      	bx	lr
 8006cf0:	803c3800 	.word	0x803c3800

08006cf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3301      	adds	r3, #1
 8006d06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006d0e:	d901      	bls.n	8006d14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e01b      	b.n	8006d4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	daf2      	bge.n	8006d02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	019b      	lsls	r3, r3, #6
 8006d24:	f043 0220 	orr.w	r2, r3, #32
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006d38:	d901      	bls.n	8006d3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e006      	b.n	8006d4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	d0f0      	beq.n	8006d2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	3301      	adds	r3, #1
 8006d68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006d70:	d901      	bls.n	8006d76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e018      	b.n	8006da8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	daf2      	bge.n	8006d64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2210      	movs	r2, #16
 8006d86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006d94:	d901      	bls.n	8006d9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e006      	b.n	8006da8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0310 	and.w	r3, r3, #16
 8006da2:	2b10      	cmp	r3, #16
 8006da4:	d0f0      	beq.n	8006d88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	78fb      	ldrb	r3, [r7, #3]
 8006dce:	68f9      	ldr	r1, [r7, #12]
 8006dd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b085      	sub	sp, #20
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e00:	f023 0303 	bic.w	r3, r3, #3
 8006e04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e14:	f043 0302 	orr.w	r3, r3, #2
 8006e18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	f003 0301 	and.w	r3, r3, #1
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3301      	adds	r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e5c:	d901      	bls.n	8006e62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e01b      	b.n	8006e9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	daf2      	bge.n	8006e50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f043 0201 	orr.w	r2, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e86:	d901      	bls.n	8006e8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e006      	b.n	8006e9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d0f0      	beq.n	8006e7a <USB_CoreReset+0x36>

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006eae:	4b87      	ldr	r3, [pc, #540]	; (80070cc <MX_LWIP_Init+0x224>)
 8006eb0:	22c0      	movs	r2, #192	; 0xc0
 8006eb2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006eb4:	4b85      	ldr	r3, [pc, #532]	; (80070cc <MX_LWIP_Init+0x224>)
 8006eb6:	22a8      	movs	r2, #168	; 0xa8
 8006eb8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8006eba:	4b84      	ldr	r3, [pc, #528]	; (80070cc <MX_LWIP_Init+0x224>)
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 110;
 8006ec0:	4b82      	ldr	r3, [pc, #520]	; (80070cc <MX_LWIP_Init+0x224>)
 8006ec2:	226e      	movs	r2, #110	; 0x6e
 8006ec4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006ec6:	4b82      	ldr	r3, [pc, #520]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006ec8:	22ff      	movs	r2, #255	; 0xff
 8006eca:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006ecc:	4b80      	ldr	r3, [pc, #512]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006ece:	22ff      	movs	r2, #255	; 0xff
 8006ed0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006ed2:	4b7f      	ldr	r3, [pc, #508]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006ed4:	22ff      	movs	r2, #255	; 0xff
 8006ed6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006ed8:	4b7d      	ldr	r3, [pc, #500]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8006ede:	4b7d      	ldr	r3, [pc, #500]	; (80070d4 <MX_LWIP_Init+0x22c>)
 8006ee0:	22c0      	movs	r2, #192	; 0xc0
 8006ee2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006ee4:	4b7b      	ldr	r3, [pc, #492]	; (80070d4 <MX_LWIP_Init+0x22c>)
 8006ee6:	22a8      	movs	r2, #168	; 0xa8
 8006ee8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8006eea:	4b7a      	ldr	r3, [pc, #488]	; (80070d4 <MX_LWIP_Init+0x22c>)
 8006eec:	2201      	movs	r2, #1
 8006eee:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006ef0:	4b78      	ldr	r3, [pc, #480]	; (80070d4 <MX_LWIP_Init+0x22c>)
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8006ef6:	f000 fd19 	bl	800792c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006efa:	4b74      	ldr	r3, [pc, #464]	; (80070cc <MX_LWIP_Init+0x224>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	061a      	lsls	r2, r3, #24
 8006f00:	4b72      	ldr	r3, [pc, #456]	; (80070cc <MX_LWIP_Init+0x224>)
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	041b      	lsls	r3, r3, #16
 8006f06:	431a      	orrs	r2, r3
 8006f08:	4b70      	ldr	r3, [pc, #448]	; (80070cc <MX_LWIP_Init+0x224>)
 8006f0a:	789b      	ldrb	r3, [r3, #2]
 8006f0c:	021b      	lsls	r3, r3, #8
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	4a6e      	ldr	r2, [pc, #440]	; (80070cc <MX_LWIP_Init+0x224>)
 8006f12:	78d2      	ldrb	r2, [r2, #3]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	061a      	lsls	r2, r3, #24
 8006f18:	4b6c      	ldr	r3, [pc, #432]	; (80070cc <MX_LWIP_Init+0x224>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	0619      	lsls	r1, r3, #24
 8006f1e:	4b6b      	ldr	r3, [pc, #428]	; (80070cc <MX_LWIP_Init+0x224>)
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	041b      	lsls	r3, r3, #16
 8006f24:	4319      	orrs	r1, r3
 8006f26:	4b69      	ldr	r3, [pc, #420]	; (80070cc <MX_LWIP_Init+0x224>)
 8006f28:	789b      	ldrb	r3, [r3, #2]
 8006f2a:	021b      	lsls	r3, r3, #8
 8006f2c:	430b      	orrs	r3, r1
 8006f2e:	4967      	ldr	r1, [pc, #412]	; (80070cc <MX_LWIP_Init+0x224>)
 8006f30:	78c9      	ldrb	r1, [r1, #3]
 8006f32:	430b      	orrs	r3, r1
 8006f34:	021b      	lsls	r3, r3, #8
 8006f36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	4b63      	ldr	r3, [pc, #396]	; (80070cc <MX_LWIP_Init+0x224>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	0619      	lsls	r1, r3, #24
 8006f42:	4b62      	ldr	r3, [pc, #392]	; (80070cc <MX_LWIP_Init+0x224>)
 8006f44:	785b      	ldrb	r3, [r3, #1]
 8006f46:	041b      	lsls	r3, r3, #16
 8006f48:	4319      	orrs	r1, r3
 8006f4a:	4b60      	ldr	r3, [pc, #384]	; (80070cc <MX_LWIP_Init+0x224>)
 8006f4c:	789b      	ldrb	r3, [r3, #2]
 8006f4e:	021b      	lsls	r3, r3, #8
 8006f50:	430b      	orrs	r3, r1
 8006f52:	495e      	ldr	r1, [pc, #376]	; (80070cc <MX_LWIP_Init+0x224>)
 8006f54:	78c9      	ldrb	r1, [r1, #3]
 8006f56:	430b      	orrs	r3, r1
 8006f58:	0a1b      	lsrs	r3, r3, #8
 8006f5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	4b5a      	ldr	r3, [pc, #360]	; (80070cc <MX_LWIP_Init+0x224>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	0619      	lsls	r1, r3, #24
 8006f66:	4b59      	ldr	r3, [pc, #356]	; (80070cc <MX_LWIP_Init+0x224>)
 8006f68:	785b      	ldrb	r3, [r3, #1]
 8006f6a:	041b      	lsls	r3, r3, #16
 8006f6c:	4319      	orrs	r1, r3
 8006f6e:	4b57      	ldr	r3, [pc, #348]	; (80070cc <MX_LWIP_Init+0x224>)
 8006f70:	789b      	ldrb	r3, [r3, #2]
 8006f72:	021b      	lsls	r3, r3, #8
 8006f74:	430b      	orrs	r3, r1
 8006f76:	4955      	ldr	r1, [pc, #340]	; (80070cc <MX_LWIP_Init+0x224>)
 8006f78:	78c9      	ldrb	r1, [r1, #3]
 8006f7a:	430b      	orrs	r3, r1
 8006f7c:	0e1b      	lsrs	r3, r3, #24
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	4a55      	ldr	r2, [pc, #340]	; (80070d8 <MX_LWIP_Init+0x230>)
 8006f82:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006f84:	4b52      	ldr	r3, [pc, #328]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	061a      	lsls	r2, r3, #24
 8006f8a:	4b51      	ldr	r3, [pc, #324]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006f8c:	785b      	ldrb	r3, [r3, #1]
 8006f8e:	041b      	lsls	r3, r3, #16
 8006f90:	431a      	orrs	r2, r3
 8006f92:	4b4f      	ldr	r3, [pc, #316]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006f94:	789b      	ldrb	r3, [r3, #2]
 8006f96:	021b      	lsls	r3, r3, #8
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	4a4d      	ldr	r2, [pc, #308]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006f9c:	78d2      	ldrb	r2, [r2, #3]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	061a      	lsls	r2, r3, #24
 8006fa2:	4b4b      	ldr	r3, [pc, #300]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	0619      	lsls	r1, r3, #24
 8006fa8:	4b49      	ldr	r3, [pc, #292]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	041b      	lsls	r3, r3, #16
 8006fae:	4319      	orrs	r1, r3
 8006fb0:	4b47      	ldr	r3, [pc, #284]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006fb2:	789b      	ldrb	r3, [r3, #2]
 8006fb4:	021b      	lsls	r3, r3, #8
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	4945      	ldr	r1, [pc, #276]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006fba:	78c9      	ldrb	r1, [r1, #3]
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	021b      	lsls	r3, r3, #8
 8006fc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	4b42      	ldr	r3, [pc, #264]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	0619      	lsls	r1, r3, #24
 8006fcc:	4b40      	ldr	r3, [pc, #256]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006fce:	785b      	ldrb	r3, [r3, #1]
 8006fd0:	041b      	lsls	r3, r3, #16
 8006fd2:	4319      	orrs	r1, r3
 8006fd4:	4b3e      	ldr	r3, [pc, #248]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006fd6:	789b      	ldrb	r3, [r3, #2]
 8006fd8:	021b      	lsls	r3, r3, #8
 8006fda:	430b      	orrs	r3, r1
 8006fdc:	493c      	ldr	r1, [pc, #240]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006fde:	78c9      	ldrb	r1, [r1, #3]
 8006fe0:	430b      	orrs	r3, r1
 8006fe2:	0a1b      	lsrs	r3, r3, #8
 8006fe4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	4b39      	ldr	r3, [pc, #228]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	0619      	lsls	r1, r3, #24
 8006ff0:	4b37      	ldr	r3, [pc, #220]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006ff2:	785b      	ldrb	r3, [r3, #1]
 8006ff4:	041b      	lsls	r3, r3, #16
 8006ff6:	4319      	orrs	r1, r3
 8006ff8:	4b35      	ldr	r3, [pc, #212]	; (80070d0 <MX_LWIP_Init+0x228>)
 8006ffa:	789b      	ldrb	r3, [r3, #2]
 8006ffc:	021b      	lsls	r3, r3, #8
 8006ffe:	430b      	orrs	r3, r1
 8007000:	4933      	ldr	r1, [pc, #204]	; (80070d0 <MX_LWIP_Init+0x228>)
 8007002:	78c9      	ldrb	r1, [r1, #3]
 8007004:	430b      	orrs	r3, r1
 8007006:	0e1b      	lsrs	r3, r3, #24
 8007008:	4313      	orrs	r3, r2
 800700a:	4a34      	ldr	r2, [pc, #208]	; (80070dc <MX_LWIP_Init+0x234>)
 800700c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800700e:	4b31      	ldr	r3, [pc, #196]	; (80070d4 <MX_LWIP_Init+0x22c>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	061a      	lsls	r2, r3, #24
 8007014:	4b2f      	ldr	r3, [pc, #188]	; (80070d4 <MX_LWIP_Init+0x22c>)
 8007016:	785b      	ldrb	r3, [r3, #1]
 8007018:	041b      	lsls	r3, r3, #16
 800701a:	431a      	orrs	r2, r3
 800701c:	4b2d      	ldr	r3, [pc, #180]	; (80070d4 <MX_LWIP_Init+0x22c>)
 800701e:	789b      	ldrb	r3, [r3, #2]
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	4313      	orrs	r3, r2
 8007024:	4a2b      	ldr	r2, [pc, #172]	; (80070d4 <MX_LWIP_Init+0x22c>)
 8007026:	78d2      	ldrb	r2, [r2, #3]
 8007028:	4313      	orrs	r3, r2
 800702a:	061a      	lsls	r2, r3, #24
 800702c:	4b29      	ldr	r3, [pc, #164]	; (80070d4 <MX_LWIP_Init+0x22c>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	0619      	lsls	r1, r3, #24
 8007032:	4b28      	ldr	r3, [pc, #160]	; (80070d4 <MX_LWIP_Init+0x22c>)
 8007034:	785b      	ldrb	r3, [r3, #1]
 8007036:	041b      	lsls	r3, r3, #16
 8007038:	4319      	orrs	r1, r3
 800703a:	4b26      	ldr	r3, [pc, #152]	; (80070d4 <MX_LWIP_Init+0x22c>)
 800703c:	789b      	ldrb	r3, [r3, #2]
 800703e:	021b      	lsls	r3, r3, #8
 8007040:	430b      	orrs	r3, r1
 8007042:	4924      	ldr	r1, [pc, #144]	; (80070d4 <MX_LWIP_Init+0x22c>)
 8007044:	78c9      	ldrb	r1, [r1, #3]
 8007046:	430b      	orrs	r3, r1
 8007048:	021b      	lsls	r3, r3, #8
 800704a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800704e:	431a      	orrs	r2, r3
 8007050:	4b20      	ldr	r3, [pc, #128]	; (80070d4 <MX_LWIP_Init+0x22c>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	0619      	lsls	r1, r3, #24
 8007056:	4b1f      	ldr	r3, [pc, #124]	; (80070d4 <MX_LWIP_Init+0x22c>)
 8007058:	785b      	ldrb	r3, [r3, #1]
 800705a:	041b      	lsls	r3, r3, #16
 800705c:	4319      	orrs	r1, r3
 800705e:	4b1d      	ldr	r3, [pc, #116]	; (80070d4 <MX_LWIP_Init+0x22c>)
 8007060:	789b      	ldrb	r3, [r3, #2]
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	430b      	orrs	r3, r1
 8007066:	491b      	ldr	r1, [pc, #108]	; (80070d4 <MX_LWIP_Init+0x22c>)
 8007068:	78c9      	ldrb	r1, [r1, #3]
 800706a:	430b      	orrs	r3, r1
 800706c:	0a1b      	lsrs	r3, r3, #8
 800706e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007072:	431a      	orrs	r2, r3
 8007074:	4b17      	ldr	r3, [pc, #92]	; (80070d4 <MX_LWIP_Init+0x22c>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	0619      	lsls	r1, r3, #24
 800707a:	4b16      	ldr	r3, [pc, #88]	; (80070d4 <MX_LWIP_Init+0x22c>)
 800707c:	785b      	ldrb	r3, [r3, #1]
 800707e:	041b      	lsls	r3, r3, #16
 8007080:	4319      	orrs	r1, r3
 8007082:	4b14      	ldr	r3, [pc, #80]	; (80070d4 <MX_LWIP_Init+0x22c>)
 8007084:	789b      	ldrb	r3, [r3, #2]
 8007086:	021b      	lsls	r3, r3, #8
 8007088:	430b      	orrs	r3, r1
 800708a:	4912      	ldr	r1, [pc, #72]	; (80070d4 <MX_LWIP_Init+0x22c>)
 800708c:	78c9      	ldrb	r1, [r1, #3]
 800708e:	430b      	orrs	r3, r1
 8007090:	0e1b      	lsrs	r3, r3, #24
 8007092:	4313      	orrs	r3, r2
 8007094:	4a12      	ldr	r2, [pc, #72]	; (80070e0 <MX_LWIP_Init+0x238>)
 8007096:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007098:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <MX_LWIP_Init+0x23c>)
 800709a:	9302      	str	r3, [sp, #8]
 800709c:	4b12      	ldr	r3, [pc, #72]	; (80070e8 <MX_LWIP_Init+0x240>)
 800709e:	9301      	str	r3, [sp, #4]
 80070a0:	2300      	movs	r3, #0
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	4b0e      	ldr	r3, [pc, #56]	; (80070e0 <MX_LWIP_Init+0x238>)
 80070a6:	4a0d      	ldr	r2, [pc, #52]	; (80070dc <MX_LWIP_Init+0x234>)
 80070a8:	490b      	ldr	r1, [pc, #44]	; (80070d8 <MX_LWIP_Init+0x230>)
 80070aa:	4810      	ldr	r0, [pc, #64]	; (80070ec <MX_LWIP_Init+0x244>)
 80070ac:	f001 f92a 	bl	8008304 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80070b0:	480e      	ldr	r0, [pc, #56]	; (80070ec <MX_LWIP_Init+0x244>)
 80070b2:	f001 fad9 	bl	8008668 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80070b6:	480d      	ldr	r0, [pc, #52]	; (80070ec <MX_LWIP_Init+0x244>)
 80070b8:	f001 fae6 	bl	8008688 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80070bc:	490c      	ldr	r1, [pc, #48]	; (80070f0 <MX_LWIP_Init+0x248>)
 80070be:	480b      	ldr	r0, [pc, #44]	; (80070ec <MX_LWIP_Init+0x244>)
 80070c0:	f001 fbe4 	bl	800888c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80070c4:	bf00      	nop
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	20000b8c 	.word	0x20000b8c
 80070d0:	20000b88 	.word	0x20000b88
 80070d4:	20000b48 	.word	0x20000b48
 80070d8:	20000b80 	.word	0x20000b80
 80070dc:	20000b90 	.word	0x20000b90
 80070e0:	20000b94 	.word	0x20000b94
 80070e4:	08012079 	.word	0x08012079
 80070e8:	08007401 	.word	0x08007401
 80070ec:	20000b4c 	.word	0x20000b4c
 80070f0:	08007145 	.word	0x08007145

080070f4 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80070fc:	f7fc fc9c 	bl	8003a38 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	4b08      	ldr	r3, [pc, #32]	; (8007124 <Ethernet_Link_Periodic_Handle+0x30>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b63      	cmp	r3, #99	; 0x63
 800710a:	d907      	bls.n	800711c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800710c:	f7fc fc94 	bl	8003a38 <HAL_GetTick>
 8007110:	4603      	mov	r3, r0
 8007112:	4a04      	ldr	r2, [pc, #16]	; (8007124 <Ethernet_Link_Periodic_Handle+0x30>)
 8007114:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fade 	bl	80076d8 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	20000b84 	.word	0x20000b84

08007128 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800712c:	4804      	ldr	r0, [pc, #16]	; (8007140 <MX_LWIP_Process+0x18>)
 800712e:	f000 f947 	bl	80073c0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8007132:	f008 fb25 	bl	800f780 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8007136:	4802      	ldr	r0, [pc, #8]	; (8007140 <MX_LWIP_Process+0x18>)
 8007138:	f7ff ffdc 	bl	80070f4 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800713c:	bf00      	nop
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20000b4c 	.word	0x20000b4c

08007144 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007164:	4b40      	ldr	r3, [pc, #256]	; (8007268 <low_level_init+0x110>)
 8007166:	4a41      	ldr	r2, [pc, #260]	; (800726c <low_level_init+0x114>)
 8007168:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800716a:	2300      	movs	r3, #0
 800716c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800716e:	2380      	movs	r3, #128	; 0x80
 8007170:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007172:	23e1      	movs	r3, #225	; 0xe1
 8007174:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007176:	2300      	movs	r3, #0
 8007178:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800717a:	2300      	movs	r3, #0
 800717c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800717e:	2300      	movs	r3, #0
 8007180:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007182:	4a39      	ldr	r2, [pc, #228]	; (8007268 <low_level_init+0x110>)
 8007184:	f107 0308 	add.w	r3, r7, #8
 8007188:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800718a:	4b37      	ldr	r3, [pc, #220]	; (8007268 <low_level_init+0x110>)
 800718c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007190:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007192:	4b35      	ldr	r3, [pc, #212]	; (8007268 <low_level_init+0x110>)
 8007194:	4a36      	ldr	r2, [pc, #216]	; (8007270 <low_level_init+0x118>)
 8007196:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007198:	4b33      	ldr	r3, [pc, #204]	; (8007268 <low_level_init+0x110>)
 800719a:	4a36      	ldr	r2, [pc, #216]	; (8007274 <low_level_init+0x11c>)
 800719c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800719e:	4b32      	ldr	r3, [pc, #200]	; (8007268 <low_level_init+0x110>)
 80071a0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80071a4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80071a6:	4830      	ldr	r0, [pc, #192]	; (8007268 <low_level_init+0x110>)
 80071a8:	f7fc fd88 	bl	8003cbc <HAL_ETH_Init>
 80071ac:	4603      	mov	r3, r0
 80071ae:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80071b0:	2238      	movs	r2, #56	; 0x38
 80071b2:	2100      	movs	r1, #0
 80071b4:	4830      	ldr	r0, [pc, #192]	; (8007278 <low_level_init+0x120>)
 80071b6:	f00d fef3 	bl	8014fa0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80071ba:	4b2f      	ldr	r3, [pc, #188]	; (8007278 <low_level_init+0x120>)
 80071bc:	2221      	movs	r2, #33	; 0x21
 80071be:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80071c0:	4b2d      	ldr	r3, [pc, #180]	; (8007278 <low_level_init+0x120>)
 80071c2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80071c6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80071c8:	4b2b      	ldr	r3, [pc, #172]	; (8007278 <low_level_init+0x120>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80071ce:	482b      	ldr	r0, [pc, #172]	; (800727c <low_level_init+0x124>)
 80071d0:	f000 ff60 	bl	8008094 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2206      	movs	r2, #6
 80071d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80071dc:	4b22      	ldr	r3, [pc, #136]	; (8007268 <low_level_init+0x110>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	781a      	ldrb	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80071e8:	4b1f      	ldr	r3, [pc, #124]	; (8007268 <low_level_init+0x110>)
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	785a      	ldrb	r2, [r3, #1]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80071f4:	4b1c      	ldr	r3, [pc, #112]	; (8007268 <low_level_init+0x110>)
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	789a      	ldrb	r2, [r3, #2]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007200:	4b19      	ldr	r3, [pc, #100]	; (8007268 <low_level_init+0x110>)
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	78da      	ldrb	r2, [r3, #3]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800720c:	4b16      	ldr	r3, [pc, #88]	; (8007268 <low_level_init+0x110>)
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	791a      	ldrb	r2, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007218:	4b13      	ldr	r3, [pc, #76]	; (8007268 <low_level_init+0x110>)
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	795a      	ldrb	r2, [r3, #5]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800722a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007232:	f043 030a 	orr.w	r3, r3, #10
 8007236:	b2da      	uxtb	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800723e:	4910      	ldr	r1, [pc, #64]	; (8007280 <low_level_init+0x128>)
 8007240:	4810      	ldr	r0, [pc, #64]	; (8007284 <low_level_init+0x12c>)
 8007242:	f7fc fa32 	bl	80036aa <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007246:	480f      	ldr	r0, [pc, #60]	; (8007284 <low_level_init+0x12c>)
 8007248:	f7fc fa61 	bl	800370e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d103      	bne.n	800725a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fa40 	bl	80076d8 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007258:	e001      	b.n	800725e <low_level_init+0x106>
    Error_Handler();
 800725a:	f7fb fc42 	bl	8002ae2 <Error_Handler>
}
 800725e:	bf00      	nop
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	2000567c 	.word	0x2000567c
 800726c:	40028000 	.word	0x40028000
 8007270:	20000b98 	.word	0x20000b98
 8007274:	200055bc 	.word	0x200055bc
 8007278:	2000572c 	.word	0x2000572c
 800727c:	0801a9a0 	.word	0x0801a9a0
 8007280:	2000000c 	.word	0x2000000c
 8007284:	2000565c 	.word	0x2000565c

08007288 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b092      	sub	sp, #72	; 0x48
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8007296:	2300      	movs	r3, #0
 8007298:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80072a0:	f107 030c 	add.w	r3, r7, #12
 80072a4:	2230      	movs	r2, #48	; 0x30
 80072a6:	2100      	movs	r1, #0
 80072a8:	4618      	mov	r0, r3
 80072aa:	f00d fe79 	bl	8014fa0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80072ae:	f107 030c 	add.w	r3, r7, #12
 80072b2:	2230      	movs	r2, #48	; 0x30
 80072b4:	2100      	movs	r1, #0
 80072b6:	4618      	mov	r0, r3
 80072b8:	f00d fe72 	bl	8014fa0 <memset>

  for(q = p; q != NULL; q = q->next)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	643b      	str	r3, [r7, #64]	; 0x40
 80072c0:	e045      	b.n	800734e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80072c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d902      	bls.n	80072ce <low_level_output+0x46>
      return ERR_IF;
 80072c8:	f06f 030b 	mvn.w	r3, #11
 80072cc:	e055      	b.n	800737a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80072ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072d0:	6859      	ldr	r1, [r3, #4]
 80072d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072d4:	4613      	mov	r3, r2
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	3348      	adds	r3, #72	; 0x48
 80072de:	443b      	add	r3, r7
 80072e0:	3b3c      	subs	r3, #60	; 0x3c
 80072e2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80072e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e6:	895b      	ldrh	r3, [r3, #10]
 80072e8:	4619      	mov	r1, r3
 80072ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072ec:	4613      	mov	r3, r2
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	3348      	adds	r3, #72	; 0x48
 80072f6:	443b      	add	r3, r7
 80072f8:	3b38      	subs	r3, #56	; 0x38
 80072fa:	6019      	str	r1, [r3, #0]

    if(i>0)
 80072fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d011      	beq.n	8007326 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007304:	1e5a      	subs	r2, r3, #1
 8007306:	f107 000c 	add.w	r0, r7, #12
 800730a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800730c:	460b      	mov	r3, r1
 800730e:	005b      	lsls	r3, r3, #1
 8007310:	440b      	add	r3, r1
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	18c1      	adds	r1, r0, r3
 8007316:	4613      	mov	r3, r2
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	4413      	add	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	3348      	adds	r3, #72	; 0x48
 8007320:	443b      	add	r3, r7
 8007322:	3b34      	subs	r3, #52	; 0x34
 8007324:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d109      	bne.n	8007342 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800732e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007330:	4613      	mov	r3, r2
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	4413      	add	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	3348      	adds	r3, #72	; 0x48
 800733a:	443b      	add	r3, r7
 800733c:	3b34      	subs	r3, #52	; 0x34
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007344:	3301      	adds	r3, #1
 8007346:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	643b      	str	r3, [r7, #64]	; 0x40
 800734e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1b6      	bne.n	80072c2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	891b      	ldrh	r3, [r3, #8]
 8007358:	461a      	mov	r2, r3
 800735a:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <low_level_output+0xfc>)
 800735c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800735e:	4a09      	ldr	r2, [pc, #36]	; (8007384 <low_level_output+0xfc>)
 8007360:	f107 030c 	add.w	r3, r7, #12
 8007364:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007366:	4a07      	ldr	r2, [pc, #28]	; (8007384 <low_level_output+0xfc>)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800736c:	2214      	movs	r2, #20
 800736e:	4905      	ldr	r1, [pc, #20]	; (8007384 <low_level_output+0xfc>)
 8007370:	4805      	ldr	r0, [pc, #20]	; (8007388 <low_level_output+0x100>)
 8007372:	f7fc fdd9 	bl	8003f28 <HAL_ETH_Transmit>

  return errval;
 8007376:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800737a:	4618      	mov	r0, r3
 800737c:	3748      	adds	r7, #72	; 0x48
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	2000572c 	.word	0x2000572c
 8007388:	2000567c 	.word	0x2000567c

0800738c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007398:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <low_level_input+0x2c>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d105      	bne.n	80073ac <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80073a0:	f107 030c 	add.w	r3, r7, #12
 80073a4:	4619      	mov	r1, r3
 80073a6:	4805      	ldr	r0, [pc, #20]	; (80073bc <low_level_input+0x30>)
 80073a8:	f7fc fe52 	bl	8004050 <HAL_ETH_ReadData>
  }

  return p;
 80073ac:	68fb      	ldr	r3, [r7, #12]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	20000874 	.word	0x20000874
 80073bc:	2000567c 	.word	0x2000567c

080073c0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff ffdd 	bl	800738c <low_level_input>
 80073d2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	4798      	blx	r3
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f001 fdce 	bl	8008f8c <pbuf_free>
      }
    }
  } while(p!=NULL);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1ea      	bne.n	80073cc <ethernetif_input+0xc>
}
 80073f6:	bf00      	nop
 80073f8:	bf00      	nop
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d106      	bne.n	800741c <ethernetif_init+0x1c>
 800740e:	4b0e      	ldr	r3, [pc, #56]	; (8007448 <ethernetif_init+0x48>)
 8007410:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8007414:	490d      	ldr	r1, [pc, #52]	; (800744c <ethernetif_init+0x4c>)
 8007416:	480e      	ldr	r0, [pc, #56]	; (8007450 <ethernetif_init+0x50>)
 8007418:	f00d fc6c 	bl	8014cf4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2273      	movs	r2, #115	; 0x73
 8007420:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2274      	movs	r2, #116	; 0x74
 8007428:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a09      	ldr	r2, [pc, #36]	; (8007454 <ethernetif_init+0x54>)
 8007430:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a08      	ldr	r2, [pc, #32]	; (8007458 <ethernetif_init+0x58>)
 8007436:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff fe8d 	bl	8007158 <low_level_init>

  return ERR_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	080177a8 	.word	0x080177a8
 800744c:	080177c4 	.word	0x080177c4
 8007450:	080177d4 	.word	0x080177d4
 8007454:	08010411 	.word	0x08010411
 8007458:	08007289 	.word	0x08007289

0800745c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007468:	68f9      	ldr	r1, [r7, #12]
 800746a:	4807      	ldr	r0, [pc, #28]	; (8007488 <pbuf_free_custom+0x2c>)
 800746c:	f000 fef4 	bl	8008258 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007470:	4b06      	ldr	r3, [pc, #24]	; (800748c <pbuf_free_custom+0x30>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d102      	bne.n	800747e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007478:	4b04      	ldr	r3, [pc, #16]	; (800748c <pbuf_free_custom+0x30>)
 800747a:	2200      	movs	r2, #0
 800747c:	701a      	strb	r2, [r3, #0]
  }
}
 800747e:	bf00      	nop
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	0801a9a0 	.word	0x0801a9a0
 800748c:	20000874 	.word	0x20000874

08007490 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007494:	f7fc fad0 	bl	8003a38 <HAL_GetTick>
 8007498:	4603      	mov	r3, r0
}
 800749a:	4618      	mov	r0, r3
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b08e      	sub	sp, #56	; 0x38
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074ac:	2200      	movs	r2, #0
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	605a      	str	r2, [r3, #4]
 80074b2:	609a      	str	r2, [r3, #8]
 80074b4:	60da      	str	r2, [r3, #12]
 80074b6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a59      	ldr	r2, [pc, #356]	; (8007624 <HAL_ETH_MspInit+0x184>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	f040 80ac 	bne.w	800761c <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80074c4:	2300      	movs	r3, #0
 80074c6:	623b      	str	r3, [r7, #32]
 80074c8:	4b57      	ldr	r3, [pc, #348]	; (8007628 <HAL_ETH_MspInit+0x188>)
 80074ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074cc:	4a56      	ldr	r2, [pc, #344]	; (8007628 <HAL_ETH_MspInit+0x188>)
 80074ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80074d2:	6313      	str	r3, [r2, #48]	; 0x30
 80074d4:	4b54      	ldr	r3, [pc, #336]	; (8007628 <HAL_ETH_MspInit+0x188>)
 80074d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074dc:	623b      	str	r3, [r7, #32]
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	2300      	movs	r3, #0
 80074e2:	61fb      	str	r3, [r7, #28]
 80074e4:	4b50      	ldr	r3, [pc, #320]	; (8007628 <HAL_ETH_MspInit+0x188>)
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	4a4f      	ldr	r2, [pc, #316]	; (8007628 <HAL_ETH_MspInit+0x188>)
 80074ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074ee:	6313      	str	r3, [r2, #48]	; 0x30
 80074f0:	4b4d      	ldr	r3, [pc, #308]	; (8007628 <HAL_ETH_MspInit+0x188>)
 80074f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	2300      	movs	r3, #0
 80074fe:	61bb      	str	r3, [r7, #24]
 8007500:	4b49      	ldr	r3, [pc, #292]	; (8007628 <HAL_ETH_MspInit+0x188>)
 8007502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007504:	4a48      	ldr	r2, [pc, #288]	; (8007628 <HAL_ETH_MspInit+0x188>)
 8007506:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800750a:	6313      	str	r3, [r2, #48]	; 0x30
 800750c:	4b46      	ldr	r3, [pc, #280]	; (8007628 <HAL_ETH_MspInit+0x188>)
 800750e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007514:	61bb      	str	r3, [r7, #24]
 8007516:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007518:	2300      	movs	r3, #0
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	4b42      	ldr	r3, [pc, #264]	; (8007628 <HAL_ETH_MspInit+0x188>)
 800751e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007520:	4a41      	ldr	r2, [pc, #260]	; (8007628 <HAL_ETH_MspInit+0x188>)
 8007522:	f043 0304 	orr.w	r3, r3, #4
 8007526:	6313      	str	r3, [r2, #48]	; 0x30
 8007528:	4b3f      	ldr	r3, [pc, #252]	; (8007628 <HAL_ETH_MspInit+0x188>)
 800752a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	617b      	str	r3, [r7, #20]
 8007532:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007534:	2300      	movs	r3, #0
 8007536:	613b      	str	r3, [r7, #16]
 8007538:	4b3b      	ldr	r3, [pc, #236]	; (8007628 <HAL_ETH_MspInit+0x188>)
 800753a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753c:	4a3a      	ldr	r2, [pc, #232]	; (8007628 <HAL_ETH_MspInit+0x188>)
 800753e:	f043 0301 	orr.w	r3, r3, #1
 8007542:	6313      	str	r3, [r2, #48]	; 0x30
 8007544:	4b38      	ldr	r3, [pc, #224]	; (8007628 <HAL_ETH_MspInit+0x188>)
 8007546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	613b      	str	r3, [r7, #16]
 800754e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	4b34      	ldr	r3, [pc, #208]	; (8007628 <HAL_ETH_MspInit+0x188>)
 8007556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007558:	4a33      	ldr	r2, [pc, #204]	; (8007628 <HAL_ETH_MspInit+0x188>)
 800755a:	f043 0302 	orr.w	r3, r3, #2
 800755e:	6313      	str	r3, [r2, #48]	; 0x30
 8007560:	4b31      	ldr	r3, [pc, #196]	; (8007628 <HAL_ETH_MspInit+0x188>)
 8007562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800756c:	2300      	movs	r3, #0
 800756e:	60bb      	str	r3, [r7, #8]
 8007570:	4b2d      	ldr	r3, [pc, #180]	; (8007628 <HAL_ETH_MspInit+0x188>)
 8007572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007574:	4a2c      	ldr	r2, [pc, #176]	; (8007628 <HAL_ETH_MspInit+0x188>)
 8007576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800757a:	6313      	str	r3, [r2, #48]	; 0x30
 800757c:	4b2a      	ldr	r3, [pc, #168]	; (8007628 <HAL_ETH_MspInit+0x188>)
 800757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007584:	60bb      	str	r3, [r7, #8]
 8007586:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007588:	2332      	movs	r3, #50	; 0x32
 800758a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800758c:	2302      	movs	r3, #2
 800758e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007590:	2300      	movs	r3, #0
 8007592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007594:	2303      	movs	r3, #3
 8007596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007598:	230b      	movs	r3, #11
 800759a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800759c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075a0:	4619      	mov	r1, r3
 80075a2:	4822      	ldr	r0, [pc, #136]	; (800762c <HAL_ETH_MspInit+0x18c>)
 80075a4:	f7fd fd80 	bl	80050a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80075a8:	2386      	movs	r3, #134	; 0x86
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075ac:	2302      	movs	r3, #2
 80075ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075b4:	2303      	movs	r3, #3
 80075b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80075b8:	230b      	movs	r3, #11
 80075ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075c0:	4619      	mov	r1, r3
 80075c2:	481b      	ldr	r0, [pc, #108]	; (8007630 <HAL_ETH_MspInit+0x190>)
 80075c4:	f7fd fd70 	bl	80050a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80075c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075ce:	2302      	movs	r3, #2
 80075d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075d6:	2303      	movs	r3, #3
 80075d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80075da:	230b      	movs	r3, #11
 80075dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80075de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075e2:	4619      	mov	r1, r3
 80075e4:	4813      	ldr	r0, [pc, #76]	; (8007634 <HAL_ETH_MspInit+0x194>)
 80075e6:	f7fd fd5f 	bl	80050a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80075ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075f0:	2302      	movs	r3, #2
 80075f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075f4:	2300      	movs	r3, #0
 80075f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075f8:	2303      	movs	r3, #3
 80075fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80075fc:	230b      	movs	r3, #11
 80075fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007604:	4619      	mov	r1, r3
 8007606:	480c      	ldr	r0, [pc, #48]	; (8007638 <HAL_ETH_MspInit+0x198>)
 8007608:	f7fd fd4e 	bl	80050a8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800760c:	2200      	movs	r2, #0
 800760e:	2100      	movs	r1, #0
 8007610:	203d      	movs	r0, #61	; 0x3d
 8007612:	f7fc fb1c 	bl	8003c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007616:	203d      	movs	r0, #61	; 0x3d
 8007618:	f7fc fb35 	bl	8003c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800761c:	bf00      	nop
 800761e:	3738      	adds	r7, #56	; 0x38
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40028000 	.word	0x40028000
 8007628:	40023800 	.word	0x40023800
 800762c:	40020800 	.word	0x40020800
 8007630:	40020000 	.word	0x40020000
 8007634:	40020400 	.word	0x40020400
 8007638:	40021800 	.word	0x40021800

0800763c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007640:	4802      	ldr	r0, [pc, #8]	; (800764c <ETH_PHY_IO_Init+0x10>)
 8007642:	f7fd f8d5 	bl	80047f0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	bd80      	pop	{r7, pc}
 800764c:	2000567c 	.word	0x2000567c

08007650 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007650:	b480      	push	{r7}
 8007652:	af00      	add	r7, sp, #0
  return 0;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	68f9      	ldr	r1, [r7, #12]
 8007672:	4807      	ldr	r0, [pc, #28]	; (8007690 <ETH_PHY_IO_ReadReg+0x30>)
 8007674:	f7fc ff24 	bl	80044c0 <HAL_ETH_ReadPHYRegister>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800767e:	f04f 33ff 	mov.w	r3, #4294967295
 8007682:	e000      	b.n	8007686 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	2000567c 	.word	0x2000567c

08007694 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	68f9      	ldr	r1, [r7, #12]
 80076a6:	4807      	ldr	r0, [pc, #28]	; (80076c4 <ETH_PHY_IO_WriteReg+0x30>)
 80076a8:	f7fc ff55 	bl	8004556 <HAL_ETH_WritePHYRegister>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80076b2:	f04f 33ff 	mov.w	r3, #4294967295
 80076b6:	e000      	b.n	80076ba <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	2000567c 	.word	0x2000567c

080076c8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80076cc:	f7fc f9b4 	bl	8003a38 <HAL_GetTick>
 80076d0:	4603      	mov	r3, r0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b0a0      	sub	sp, #128	; 0x80
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80076e0:	f107 030c 	add.w	r3, r7, #12
 80076e4:	2264      	movs	r2, #100	; 0x64
 80076e6:	2100      	movs	r1, #0
 80076e8:	4618      	mov	r0, r3
 80076ea:	f00d fc59 	bl	8014fa0 <memset>
  int32_t PHYLinkState = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076f6:	2300      	movs	r3, #0
 80076f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80076fa:	2300      	movs	r3, #0
 80076fc:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80076fe:	483a      	ldr	r0, [pc, #232]	; (80077e8 <ethernet_link_check_state+0x110>)
 8007700:	f7fc f8ad 	bl	800385e <LAN8742_GetLinkState>
 8007704:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800770c:	089b      	lsrs	r3, r3, #2
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00c      	beq.n	8007732 <ethernet_link_check_state+0x5a>
 8007718:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800771a:	2b01      	cmp	r3, #1
 800771c:	dc09      	bgt.n	8007732 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800771e:	4833      	ldr	r0, [pc, #204]	; (80077ec <ethernet_link_check_state+0x114>)
 8007720:	f7fc fba9 	bl	8003e76 <HAL_ETH_Stop>
    netif_set_down(netif);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f001 f81b 	bl	8008760 <netif_set_down>
    netif_set_link_down(netif);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f001 f87e 	bl	800882c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8007730:	e055      	b.n	80077de <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d14e      	bne.n	80077de <ethernet_link_check_state+0x106>
 8007740:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007742:	2b01      	cmp	r3, #1
 8007744:	dd4b      	ble.n	80077de <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8007746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007748:	3b02      	subs	r3, #2
 800774a:	2b03      	cmp	r3, #3
 800774c:	d82a      	bhi.n	80077a4 <ethernet_link_check_state+0xcc>
 800774e:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <ethernet_link_check_state+0x7c>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	08007765 	.word	0x08007765
 8007758:	08007777 	.word	0x08007777
 800775c:	08007787 	.word	0x08007787
 8007760:	08007797 	.word	0x08007797
      duplex = ETH_FULLDUPLEX_MODE;
 8007764:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007768:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800776a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800776e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007770:	2301      	movs	r3, #1
 8007772:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007774:	e017      	b.n	80077a6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007776:	2300      	movs	r3, #0
 8007778:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800777a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800777e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007780:	2301      	movs	r3, #1
 8007782:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007784:	e00f      	b.n	80077a6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8007786:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800778a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800778c:	2300      	movs	r3, #0
 800778e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007790:	2301      	movs	r3, #1
 8007792:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007794:	e007      	b.n	80077a6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007796:	2300      	movs	r3, #0
 8007798:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800779a:	2300      	movs	r3, #0
 800779c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800779e:	2301      	movs	r3, #1
 80077a0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80077a2:	e000      	b.n	80077a6 <ethernet_link_check_state+0xce>
      break;
 80077a4:	bf00      	nop
    if(linkchanged)
 80077a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d018      	beq.n	80077de <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80077ac:	f107 030c 	add.w	r3, r7, #12
 80077b0:	4619      	mov	r1, r3
 80077b2:	480e      	ldr	r0, [pc, #56]	; (80077ec <ethernet_link_check_state+0x114>)
 80077b4:	f7fc ff18 	bl	80045e8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80077b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80077bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077be:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80077c0:	f107 030c 	add.w	r3, r7, #12
 80077c4:	4619      	mov	r1, r3
 80077c6:	4809      	ldr	r0, [pc, #36]	; (80077ec <ethernet_link_check_state+0x114>)
 80077c8:	f7fc fff8 	bl	80047bc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80077cc:	4807      	ldr	r0, [pc, #28]	; (80077ec <ethernet_link_check_state+0x114>)
 80077ce:	f7fc faf3 	bl	8003db8 <HAL_ETH_Start>
      netif_set_up(netif);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 ff58 	bl	8008688 <netif_set_up>
      netif_set_link_up(netif);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fff3 	bl	80087c4 <netif_set_link_up>
}
 80077de:	bf00      	nop
 80077e0:	3780      	adds	r7, #128	; 0x80
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	2000565c 	.word	0x2000565c
 80077ec:	2000567c 	.word	0x2000567c

080077f0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af02      	add	r7, sp, #8
 80077f6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80077f8:	4812      	ldr	r0, [pc, #72]	; (8007844 <HAL_ETH_RxAllocateCallback+0x54>)
 80077fa:	f000 fcbf 	bl	800817c <memp_malloc_pool>
 80077fe:	60f8      	str	r0, [r7, #12]
  if (p)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d014      	beq.n	8007830 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f103 0220 	add.w	r2, r3, #32
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4a0d      	ldr	r2, [pc, #52]	; (8007848 <HAL_ETH_RxAllocateCallback+0x58>)
 8007814:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800781e:	9201      	str	r2, [sp, #4]
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2241      	movs	r2, #65	; 0x41
 8007826:	2100      	movs	r1, #0
 8007828:	2000      	movs	r0, #0
 800782a:	f001 f9f5 	bl	8008c18 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800782e:	e005      	b.n	800783c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007830:	4b06      	ldr	r3, [pc, #24]	; (800784c <HAL_ETH_RxAllocateCallback+0x5c>)
 8007832:	2201      	movs	r2, #1
 8007834:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]
}
 800783c:	bf00      	nop
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	0801a9a0 	.word	0x0801a9a0
 8007848:	0800745d 	.word	0x0800745d
 800784c:	20000874 	.word	0x20000874

08007850 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007850:	b480      	push	{r7}
 8007852:	b089      	sub	sp, #36	; 0x24
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007866:	2300      	movs	r3, #0
 8007868:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3b20      	subs	r3, #32
 800786e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	2200      	movs	r2, #0
 8007874:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	2200      	movs	r2, #0
 800787a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	887a      	ldrh	r2, [r7, #2]
 8007880:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d103      	bne.n	8007892 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	69fa      	ldr	r2, [r7, #28]
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	e003      	b.n	800789a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69fa      	ldr	r2, [r7, #28]
 8007898:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	69fa      	ldr	r2, [r7, #28]
 800789e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	61fb      	str	r3, [r7, #28]
 80078a6:	e009      	b.n	80078bc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	891a      	ldrh	r2, [r3, #8]
 80078ac:	887b      	ldrh	r3, [r7, #2]
 80078ae:	4413      	add	r3, r2
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	61fb      	str	r3, [r7, #28]
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1f2      	bne.n	80078a8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80078c2:	bf00      	nop
 80078c4:	bf00      	nop
 80078c6:	3724      	adds	r7, #36	; 0x24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	4603      	mov	r3, r0
 80078d8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80078da:	88fb      	ldrh	r3, [r7, #6]
 80078dc:	021b      	lsls	r3, r3, #8
 80078de:	b21a      	sxth	r2, r3
 80078e0:	88fb      	ldrh	r3, [r7, #6]
 80078e2:	0a1b      	lsrs	r3, r3, #8
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	b21b      	sxth	r3, r3
 80078e8:	4313      	orrs	r3, r2
 80078ea:	b21b      	sxth	r3, r3
 80078ec:	b29b      	uxth	r3, r3
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	061a      	lsls	r2, r3, #24
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	021b      	lsls	r3, r3, #8
 800790a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800790e:	431a      	orrs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	0a1b      	lsrs	r3, r3, #8
 8007914:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007918:	431a      	orrs	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	0e1b      	lsrs	r3, r3, #24
 800791e:	4313      	orrs	r3, r2
}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007936:	f000 f8d5 	bl	8007ae4 <mem_init>
  memp_init();
 800793a:	f000 fbdb 	bl	80080f4 <memp_init>
  pbuf_init();
  netif_init();
 800793e:	f000 fcd9 	bl	80082f4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007942:	f007 ff5f 	bl	800f804 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007946:	f001 fdbf 	bl	80094c8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800794a:	f007 fed1 	bl	800f6f0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800794e:	bf00      	nop
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
	...

08007958 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	4603      	mov	r3, r0
 8007960:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007962:	4b05      	ldr	r3, [pc, #20]	; (8007978 <ptr_to_mem+0x20>)
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	88fb      	ldrh	r3, [r7, #6]
 8007968:	4413      	add	r3, r2
}
 800796a:	4618      	mov	r0, r3
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20000878 	.word	0x20000878

0800797c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007984:	4b05      	ldr	r3, [pc, #20]	; (800799c <mem_to_ptr+0x20>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	b29b      	uxth	r3, r3
}
 800798e:	4618      	mov	r0, r3
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	20000878 	.word	0x20000878

080079a0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80079a0:	b590      	push	{r4, r7, lr}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80079a8:	4b45      	ldr	r3, [pc, #276]	; (8007ac0 <plug_holes+0x120>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d206      	bcs.n	80079c0 <plug_holes+0x20>
 80079b2:	4b44      	ldr	r3, [pc, #272]	; (8007ac4 <plug_holes+0x124>)
 80079b4:	f240 12df 	movw	r2, #479	; 0x1df
 80079b8:	4943      	ldr	r1, [pc, #268]	; (8007ac8 <plug_holes+0x128>)
 80079ba:	4844      	ldr	r0, [pc, #272]	; (8007acc <plug_holes+0x12c>)
 80079bc:	f00d f99a 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80079c0:	4b43      	ldr	r3, [pc, #268]	; (8007ad0 <plug_holes+0x130>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d306      	bcc.n	80079d8 <plug_holes+0x38>
 80079ca:	4b3e      	ldr	r3, [pc, #248]	; (8007ac4 <plug_holes+0x124>)
 80079cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80079d0:	4940      	ldr	r1, [pc, #256]	; (8007ad4 <plug_holes+0x134>)
 80079d2:	483e      	ldr	r0, [pc, #248]	; (8007acc <plug_holes+0x12c>)
 80079d4:	f00d f98e 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	791b      	ldrb	r3, [r3, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d006      	beq.n	80079ee <plug_holes+0x4e>
 80079e0:	4b38      	ldr	r3, [pc, #224]	; (8007ac4 <plug_holes+0x124>)
 80079e2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80079e6:	493c      	ldr	r1, [pc, #240]	; (8007ad8 <plug_holes+0x138>)
 80079e8:	4838      	ldr	r0, [pc, #224]	; (8007acc <plug_holes+0x12c>)
 80079ea:	f00d f983 	bl	8014cf4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80079f6:	d906      	bls.n	8007a06 <plug_holes+0x66>
 80079f8:	4b32      	ldr	r3, [pc, #200]	; (8007ac4 <plug_holes+0x124>)
 80079fa:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80079fe:	4937      	ldr	r1, [pc, #220]	; (8007adc <plug_holes+0x13c>)
 8007a00:	4832      	ldr	r0, [pc, #200]	; (8007acc <plug_holes+0x12c>)
 8007a02:	f00d f977 	bl	8014cf4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff ffa4 	bl	8007958 <ptr_to_mem>
 8007a10:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d024      	beq.n	8007a64 <plug_holes+0xc4>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	791b      	ldrb	r3, [r3, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d120      	bne.n	8007a64 <plug_holes+0xc4>
 8007a22:	4b2b      	ldr	r3, [pc, #172]	; (8007ad0 <plug_holes+0x130>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d01b      	beq.n	8007a64 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007a2c:	4b2c      	ldr	r3, [pc, #176]	; (8007ae0 <plug_holes+0x140>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d102      	bne.n	8007a3c <plug_holes+0x9c>
      lfree = mem;
 8007a36:	4a2a      	ldr	r2, [pc, #168]	; (8007ae0 <plug_holes+0x140>)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	881a      	ldrh	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007a4c:	d00a      	beq.n	8007a64 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7ff ff80 	bl	8007958 <ptr_to_mem>
 8007a58:	4604      	mov	r4, r0
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff ff8e 	bl	800797c <mem_to_ptr>
 8007a60:	4603      	mov	r3, r0
 8007a62:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	885b      	ldrh	r3, [r3, #2]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff ff75 	bl	8007958 <ptr_to_mem>
 8007a6e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d01f      	beq.n	8007ab8 <plug_holes+0x118>
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	791b      	ldrb	r3, [r3, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d11b      	bne.n	8007ab8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007a80:	4b17      	ldr	r3, [pc, #92]	; (8007ae0 <plug_holes+0x140>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d102      	bne.n	8007a90 <plug_holes+0xf0>
      lfree = pmem;
 8007a8a:	4a15      	ldr	r2, [pc, #84]	; (8007ae0 <plug_holes+0x140>)
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	881a      	ldrh	r2, [r3, #0]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007aa0:	d00a      	beq.n	8007ab8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7ff ff56 	bl	8007958 <ptr_to_mem>
 8007aac:	4604      	mov	r4, r0
 8007aae:	68b8      	ldr	r0, [r7, #8]
 8007ab0:	f7ff ff64 	bl	800797c <mem_to_ptr>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007ab8:	bf00      	nop
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd90      	pop	{r4, r7, pc}
 8007ac0:	20000878 	.word	0x20000878
 8007ac4:	080177fc 	.word	0x080177fc
 8007ac8:	0801782c 	.word	0x0801782c
 8007acc:	08017844 	.word	0x08017844
 8007ad0:	2000087c 	.word	0x2000087c
 8007ad4:	0801786c 	.word	0x0801786c
 8007ad8:	08017888 	.word	0x08017888
 8007adc:	080178a4 	.word	0x080178a4
 8007ae0:	20000880 	.word	0x20000880

08007ae4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007aea:	4b18      	ldr	r3, [pc, #96]	; (8007b4c <mem_init+0x68>)
 8007aec:	3303      	adds	r3, #3
 8007aee:	f023 0303 	bic.w	r3, r3, #3
 8007af2:	461a      	mov	r2, r3
 8007af4:	4b16      	ldr	r3, [pc, #88]	; (8007b50 <mem_init+0x6c>)
 8007af6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007af8:	4b15      	ldr	r3, [pc, #84]	; (8007b50 <mem_init+0x6c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007b04:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007b12:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8007b16:	f7ff ff1f 	bl	8007958 <ptr_to_mem>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	4a0d      	ldr	r2, [pc, #52]	; (8007b54 <mem_init+0x70>)
 8007b1e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007b20:	4b0c      	ldr	r3, [pc, #48]	; (8007b54 <mem_init+0x70>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2201      	movs	r2, #1
 8007b26:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007b28:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <mem_init+0x70>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007b30:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007b32:	4b08      	ldr	r3, [pc, #32]	; (8007b54 <mem_init+0x70>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007b3a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007b3c:	4b04      	ldr	r3, [pc, #16]	; (8007b50 <mem_init+0x6c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a05      	ldr	r2, [pc, #20]	; (8007b58 <mem_init+0x74>)
 8007b42:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007b44:	bf00      	nop
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	2000577c 	.word	0x2000577c
 8007b50:	20000878 	.word	0x20000878
 8007b54:	2000087c 	.word	0x2000087c
 8007b58:	20000880 	.word	0x20000880

08007b5c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff ff09 	bl	800797c <mem_to_ptr>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7ff fef0 	bl	8007958 <ptr_to_mem>
 8007b78:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	885b      	ldrh	r3, [r3, #2]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7ff feea 	bl	8007958 <ptr_to_mem>
 8007b84:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007b8e:	d818      	bhi.n	8007bc2 <mem_link_valid+0x66>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	885b      	ldrh	r3, [r3, #2]
 8007b94:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007b98:	d813      	bhi.n	8007bc2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007b9e:	8afa      	ldrh	r2, [r7, #22]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d004      	beq.n	8007bae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	8afa      	ldrh	r2, [r7, #22]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d109      	bne.n	8007bc2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007bae:	4b08      	ldr	r3, [pc, #32]	; (8007bd0 <mem_link_valid+0x74>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d006      	beq.n	8007bc6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	885b      	ldrh	r3, [r3, #2]
 8007bbc:	8afa      	ldrh	r2, [r7, #22]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d001      	beq.n	8007bc6 <mem_link_valid+0x6a>
    return 0;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	e000      	b.n	8007bc8 <mem_link_valid+0x6c>
  }
  return 1;
 8007bc6:	2301      	movs	r3, #1
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	2000087c 	.word	0x2000087c

08007bd4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d04c      	beq.n	8007c7c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f003 0303 	and.w	r3, r3, #3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d007      	beq.n	8007bfc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007bec:	4b25      	ldr	r3, [pc, #148]	; (8007c84 <mem_free+0xb0>)
 8007bee:	f240 2273 	movw	r2, #627	; 0x273
 8007bf2:	4925      	ldr	r1, [pc, #148]	; (8007c88 <mem_free+0xb4>)
 8007bf4:	4825      	ldr	r0, [pc, #148]	; (8007c8c <mem_free+0xb8>)
 8007bf6:	f00d f87d 	bl	8014cf4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007bfa:	e040      	b.n	8007c7e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3b08      	subs	r3, #8
 8007c00:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007c02:	4b23      	ldr	r3, [pc, #140]	; (8007c90 <mem_free+0xbc>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d306      	bcc.n	8007c1a <mem_free+0x46>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f103 020c 	add.w	r2, r3, #12
 8007c12:	4b20      	ldr	r3, [pc, #128]	; (8007c94 <mem_free+0xc0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d907      	bls.n	8007c2a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007c1a:	4b1a      	ldr	r3, [pc, #104]	; (8007c84 <mem_free+0xb0>)
 8007c1c:	f240 227f 	movw	r2, #639	; 0x27f
 8007c20:	491d      	ldr	r1, [pc, #116]	; (8007c98 <mem_free+0xc4>)
 8007c22:	481a      	ldr	r0, [pc, #104]	; (8007c8c <mem_free+0xb8>)
 8007c24:	f00d f866 	bl	8014cf4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007c28:	e029      	b.n	8007c7e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	791b      	ldrb	r3, [r3, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d107      	bne.n	8007c42 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007c32:	4b14      	ldr	r3, [pc, #80]	; (8007c84 <mem_free+0xb0>)
 8007c34:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007c38:	4918      	ldr	r1, [pc, #96]	; (8007c9c <mem_free+0xc8>)
 8007c3a:	4814      	ldr	r0, [pc, #80]	; (8007c8c <mem_free+0xb8>)
 8007c3c:	f00d f85a 	bl	8014cf4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007c40:	e01d      	b.n	8007c7e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f7ff ff8a 	bl	8007b5c <mem_link_valid>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d107      	bne.n	8007c5e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007c4e:	4b0d      	ldr	r3, [pc, #52]	; (8007c84 <mem_free+0xb0>)
 8007c50:	f240 2295 	movw	r2, #661	; 0x295
 8007c54:	4912      	ldr	r1, [pc, #72]	; (8007ca0 <mem_free+0xcc>)
 8007c56:	480d      	ldr	r0, [pc, #52]	; (8007c8c <mem_free+0xb8>)
 8007c58:	f00d f84c 	bl	8014cf4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007c5c:	e00f      	b.n	8007c7e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007c64:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <mem_free+0xd0>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d202      	bcs.n	8007c74 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007c6e:	4a0d      	ldr	r2, [pc, #52]	; (8007ca4 <mem_free+0xd0>)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f7ff fe93 	bl	80079a0 <plug_holes>
 8007c7a:	e000      	b.n	8007c7e <mem_free+0xaa>
    return;
 8007c7c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	080177fc 	.word	0x080177fc
 8007c88:	080178d0 	.word	0x080178d0
 8007c8c:	08017844 	.word	0x08017844
 8007c90:	20000878 	.word	0x20000878
 8007c94:	2000087c 	.word	0x2000087c
 8007c98:	080178f4 	.word	0x080178f4
 8007c9c:	08017910 	.word	0x08017910
 8007ca0:	08017938 	.word	0x08017938
 8007ca4:	20000880 	.word	0x20000880

08007ca8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007cb4:	887b      	ldrh	r3, [r7, #2]
 8007cb6:	3303      	adds	r3, #3
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f023 0303 	bic.w	r3, r3, #3
 8007cbe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007cc0:	8bfb      	ldrh	r3, [r7, #30]
 8007cc2:	2b0b      	cmp	r3, #11
 8007cc4:	d801      	bhi.n	8007cca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007cca:	8bfb      	ldrh	r3, [r7, #30]
 8007ccc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007cd0:	d803      	bhi.n	8007cda <mem_trim+0x32>
 8007cd2:	8bfa      	ldrh	r2, [r7, #30]
 8007cd4:	887b      	ldrh	r3, [r7, #2]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d201      	bcs.n	8007cde <mem_trim+0x36>
    return NULL;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	e0cc      	b.n	8007e78 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007cde:	4b68      	ldr	r3, [pc, #416]	; (8007e80 <mem_trim+0x1d8>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d304      	bcc.n	8007cf2 <mem_trim+0x4a>
 8007ce8:	4b66      	ldr	r3, [pc, #408]	; (8007e84 <mem_trim+0x1dc>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d306      	bcc.n	8007d00 <mem_trim+0x58>
 8007cf2:	4b65      	ldr	r3, [pc, #404]	; (8007e88 <mem_trim+0x1e0>)
 8007cf4:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007cf8:	4964      	ldr	r1, [pc, #400]	; (8007e8c <mem_trim+0x1e4>)
 8007cfa:	4865      	ldr	r0, [pc, #404]	; (8007e90 <mem_trim+0x1e8>)
 8007cfc:	f00c fffa 	bl	8014cf4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007d00:	4b5f      	ldr	r3, [pc, #380]	; (8007e80 <mem_trim+0x1d8>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d304      	bcc.n	8007d14 <mem_trim+0x6c>
 8007d0a:	4b5e      	ldr	r3, [pc, #376]	; (8007e84 <mem_trim+0x1dc>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d301      	bcc.n	8007d18 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	e0af      	b.n	8007e78 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3b08      	subs	r3, #8
 8007d1c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007d1e:	69b8      	ldr	r0, [r7, #24]
 8007d20:	f7ff fe2c 	bl	800797c <mem_to_ptr>
 8007d24:	4603      	mov	r3, r0
 8007d26:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	881a      	ldrh	r2, [r3, #0]
 8007d2c:	8afb      	ldrh	r3, [r7, #22]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	3b08      	subs	r3, #8
 8007d34:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007d36:	8bfa      	ldrh	r2, [r7, #30]
 8007d38:	8abb      	ldrh	r3, [r7, #20]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d906      	bls.n	8007d4c <mem_trim+0xa4>
 8007d3e:	4b52      	ldr	r3, [pc, #328]	; (8007e88 <mem_trim+0x1e0>)
 8007d40:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007d44:	4953      	ldr	r1, [pc, #332]	; (8007e94 <mem_trim+0x1ec>)
 8007d46:	4852      	ldr	r0, [pc, #328]	; (8007e90 <mem_trim+0x1e8>)
 8007d48:	f00c ffd4 	bl	8014cf4 <iprintf>
  if (newsize > size) {
 8007d4c:	8bfa      	ldrh	r2, [r7, #30]
 8007d4e:	8abb      	ldrh	r3, [r7, #20]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d901      	bls.n	8007d58 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007d54:	2300      	movs	r3, #0
 8007d56:	e08f      	b.n	8007e78 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007d58:	8bfa      	ldrh	r2, [r7, #30]
 8007d5a:	8abb      	ldrh	r3, [r7, #20]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d101      	bne.n	8007d64 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	e089      	b.n	8007e78 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7ff fdf5 	bl	8007958 <ptr_to_mem>
 8007d6e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	791b      	ldrb	r3, [r3, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d13f      	bne.n	8007df8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007d80:	d106      	bne.n	8007d90 <mem_trim+0xe8>
 8007d82:	4b41      	ldr	r3, [pc, #260]	; (8007e88 <mem_trim+0x1e0>)
 8007d84:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007d88:	4943      	ldr	r1, [pc, #268]	; (8007e98 <mem_trim+0x1f0>)
 8007d8a:	4841      	ldr	r0, [pc, #260]	; (8007e90 <mem_trim+0x1e8>)
 8007d8c:	f00c ffb2 	bl	8014cf4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007d96:	8afa      	ldrh	r2, [r7, #22]
 8007d98:	8bfb      	ldrh	r3, [r7, #30]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3308      	adds	r3, #8
 8007da0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007da2:	4b3e      	ldr	r3, [pc, #248]	; (8007e9c <mem_trim+0x1f4>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d106      	bne.n	8007dba <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007dac:	89fb      	ldrh	r3, [r7, #14]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff fdd2 	bl	8007958 <ptr_to_mem>
 8007db4:	4603      	mov	r3, r0
 8007db6:	4a39      	ldr	r2, [pc, #228]	; (8007e9c <mem_trim+0x1f4>)
 8007db8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007dba:	89fb      	ldrh	r3, [r7, #14]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7ff fdcb 	bl	8007958 <ptr_to_mem>
 8007dc2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	89ba      	ldrh	r2, [r7, #12]
 8007dce:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	8afa      	ldrh	r2, [r7, #22]
 8007dd4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	89fa      	ldrh	r2, [r7, #14]
 8007dda:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007de4:	d047      	beq.n	8007e76 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7ff fdb4 	bl	8007958 <ptr_to_mem>
 8007df0:	4602      	mov	r2, r0
 8007df2:	89fb      	ldrh	r3, [r7, #14]
 8007df4:	8053      	strh	r3, [r2, #2]
 8007df6:	e03e      	b.n	8007e76 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007df8:	8bfb      	ldrh	r3, [r7, #30]
 8007dfa:	f103 0214 	add.w	r2, r3, #20
 8007dfe:	8abb      	ldrh	r3, [r7, #20]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d838      	bhi.n	8007e76 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007e04:	8afa      	ldrh	r2, [r7, #22]
 8007e06:	8bfb      	ldrh	r3, [r7, #30]
 8007e08:	4413      	add	r3, r2
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	3308      	adds	r3, #8
 8007e0e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007e18:	d106      	bne.n	8007e28 <mem_trim+0x180>
 8007e1a:	4b1b      	ldr	r3, [pc, #108]	; (8007e88 <mem_trim+0x1e0>)
 8007e1c:	f240 3216 	movw	r2, #790	; 0x316
 8007e20:	491d      	ldr	r1, [pc, #116]	; (8007e98 <mem_trim+0x1f0>)
 8007e22:	481b      	ldr	r0, [pc, #108]	; (8007e90 <mem_trim+0x1e8>)
 8007e24:	f00c ff66 	bl	8014cf4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007e28:	89fb      	ldrh	r3, [r7, #14]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7ff fd94 	bl	8007958 <ptr_to_mem>
 8007e30:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007e32:	4b1a      	ldr	r3, [pc, #104]	; (8007e9c <mem_trim+0x1f4>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d202      	bcs.n	8007e42 <mem_trim+0x19a>
      lfree = mem2;
 8007e3c:	4a17      	ldr	r2, [pc, #92]	; (8007e9c <mem_trim+0x1f4>)
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	2200      	movs	r2, #0
 8007e46:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	881a      	ldrh	r2, [r3, #0]
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	8afa      	ldrh	r2, [r7, #22]
 8007e54:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	89fa      	ldrh	r2, [r7, #14]
 8007e5a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007e64:	d007      	beq.n	8007e76 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	881b      	ldrh	r3, [r3, #0]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7ff fd74 	bl	8007958 <ptr_to_mem>
 8007e70:	4602      	mov	r2, r0
 8007e72:	89fb      	ldrh	r3, [r7, #14]
 8007e74:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007e76:	687b      	ldr	r3, [r7, #4]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3720      	adds	r7, #32
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	20000878 	.word	0x20000878
 8007e84:	2000087c 	.word	0x2000087c
 8007e88:	080177fc 	.word	0x080177fc
 8007e8c:	0801796c 	.word	0x0801796c
 8007e90:	08017844 	.word	0x08017844
 8007e94:	08017984 	.word	0x08017984
 8007e98:	080179a4 	.word	0x080179a4
 8007e9c:	20000880 	.word	0x20000880

08007ea0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b088      	sub	sp, #32
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007eaa:	88fb      	ldrh	r3, [r7, #6]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <mem_malloc+0x14>
    return NULL;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	e0d9      	b.n	8008068 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007eb4:	88fb      	ldrh	r3, [r7, #6]
 8007eb6:	3303      	adds	r3, #3
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	f023 0303 	bic.w	r3, r3, #3
 8007ebe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007ec0:	8bbb      	ldrh	r3, [r7, #28]
 8007ec2:	2b0b      	cmp	r3, #11
 8007ec4:	d801      	bhi.n	8007eca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007eca:	8bbb      	ldrh	r3, [r7, #28]
 8007ecc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007ed0:	d803      	bhi.n	8007eda <mem_malloc+0x3a>
 8007ed2:	8bba      	ldrh	r2, [r7, #28]
 8007ed4:	88fb      	ldrh	r3, [r7, #6]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d201      	bcs.n	8007ede <mem_malloc+0x3e>
    return NULL;
 8007eda:	2300      	movs	r3, #0
 8007edc:	e0c4      	b.n	8008068 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007ede:	4b64      	ldr	r3, [pc, #400]	; (8008070 <mem_malloc+0x1d0>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7ff fd4a 	bl	800797c <mem_to_ptr>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	83fb      	strh	r3, [r7, #30]
 8007eec:	e0b4      	b.n	8008058 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007eee:	8bfb      	ldrh	r3, [r7, #30]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7ff fd31 	bl	8007958 <ptr_to_mem>
 8007ef6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	791b      	ldrb	r3, [r3, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f040 80a4 	bne.w	800804a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	8bfb      	ldrh	r3, [r7, #30]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	f1a3 0208 	sub.w	r2, r3, #8
 8007f10:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007f12:	429a      	cmp	r2, r3
 8007f14:	f0c0 8099 	bcc.w	800804a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	8bfb      	ldrh	r3, [r7, #30]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	f1a3 0208 	sub.w	r2, r3, #8
 8007f26:	8bbb      	ldrh	r3, [r7, #28]
 8007f28:	3314      	adds	r3, #20
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d333      	bcc.n	8007f96 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007f2e:	8bfa      	ldrh	r2, [r7, #30]
 8007f30:	8bbb      	ldrh	r3, [r7, #28]
 8007f32:	4413      	add	r3, r2
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	3308      	adds	r3, #8
 8007f38:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007f3a:	8a7b      	ldrh	r3, [r7, #18]
 8007f3c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007f40:	d106      	bne.n	8007f50 <mem_malloc+0xb0>
 8007f42:	4b4c      	ldr	r3, [pc, #304]	; (8008074 <mem_malloc+0x1d4>)
 8007f44:	f240 3287 	movw	r2, #903	; 0x387
 8007f48:	494b      	ldr	r1, [pc, #300]	; (8008078 <mem_malloc+0x1d8>)
 8007f4a:	484c      	ldr	r0, [pc, #304]	; (800807c <mem_malloc+0x1dc>)
 8007f4c:	f00c fed2 	bl	8014cf4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007f50:	8a7b      	ldrh	r3, [r7, #18]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff fd00 	bl	8007958 <ptr_to_mem>
 8007f58:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	881a      	ldrh	r2, [r3, #0]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	8bfa      	ldrh	r2, [r7, #30]
 8007f6c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	8a7a      	ldrh	r2, [r7, #18]
 8007f72:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2201      	movs	r2, #1
 8007f78:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007f82:	d00b      	beq.n	8007f9c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7ff fce5 	bl	8007958 <ptr_to_mem>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	8a7b      	ldrh	r3, [r7, #18]
 8007f92:	8053      	strh	r3, [r2, #2]
 8007f94:	e002      	b.n	8007f9c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007f9c:	4b34      	ldr	r3, [pc, #208]	; (8008070 <mem_malloc+0x1d0>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d127      	bne.n	8007ff6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8007fa6:	4b32      	ldr	r3, [pc, #200]	; (8008070 <mem_malloc+0x1d0>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007fac:	e005      	b.n	8007fba <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7ff fcd0 	bl	8007958 <ptr_to_mem>
 8007fb8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	791b      	ldrb	r3, [r3, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <mem_malloc+0x12c>
 8007fc2:	4b2f      	ldr	r3, [pc, #188]	; (8008080 <mem_malloc+0x1e0>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d1f0      	bne.n	8007fae <mem_malloc+0x10e>
          }
          lfree = cur;
 8007fcc:	4a28      	ldr	r2, [pc, #160]	; (8008070 <mem_malloc+0x1d0>)
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007fd2:	4b27      	ldr	r3, [pc, #156]	; (8008070 <mem_malloc+0x1d0>)
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	4b2a      	ldr	r3, [pc, #168]	; (8008080 <mem_malloc+0x1e0>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d00b      	beq.n	8007ff6 <mem_malloc+0x156>
 8007fde:	4b24      	ldr	r3, [pc, #144]	; (8008070 <mem_malloc+0x1d0>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	791b      	ldrb	r3, [r3, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d006      	beq.n	8007ff6 <mem_malloc+0x156>
 8007fe8:	4b22      	ldr	r3, [pc, #136]	; (8008074 <mem_malloc+0x1d4>)
 8007fea:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007fee:	4925      	ldr	r1, [pc, #148]	; (8008084 <mem_malloc+0x1e4>)
 8007ff0:	4822      	ldr	r0, [pc, #136]	; (800807c <mem_malloc+0x1dc>)
 8007ff2:	f00c fe7f 	bl	8014cf4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007ff6:	8bba      	ldrh	r2, [r7, #28]
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	4a20      	ldr	r2, [pc, #128]	; (8008080 <mem_malloc+0x1e0>)
 8008000:	6812      	ldr	r2, [r2, #0]
 8008002:	4293      	cmp	r3, r2
 8008004:	d906      	bls.n	8008014 <mem_malloc+0x174>
 8008006:	4b1b      	ldr	r3, [pc, #108]	; (8008074 <mem_malloc+0x1d4>)
 8008008:	f240 32b9 	movw	r2, #953	; 0x3b9
 800800c:	491e      	ldr	r1, [pc, #120]	; (8008088 <mem_malloc+0x1e8>)
 800800e:	481b      	ldr	r0, [pc, #108]	; (800807c <mem_malloc+0x1dc>)
 8008010:	f00c fe70 	bl	8014cf4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f003 0303 	and.w	r3, r3, #3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d006      	beq.n	800802c <mem_malloc+0x18c>
 800801e:	4b15      	ldr	r3, [pc, #84]	; (8008074 <mem_malloc+0x1d4>)
 8008020:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008024:	4919      	ldr	r1, [pc, #100]	; (800808c <mem_malloc+0x1ec>)
 8008026:	4815      	ldr	r0, [pc, #84]	; (800807c <mem_malloc+0x1dc>)
 8008028:	f00c fe64 	bl	8014cf4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	f003 0303 	and.w	r3, r3, #3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d006      	beq.n	8008044 <mem_malloc+0x1a4>
 8008036:	4b0f      	ldr	r3, [pc, #60]	; (8008074 <mem_malloc+0x1d4>)
 8008038:	f240 32bd 	movw	r2, #957	; 0x3bd
 800803c:	4914      	ldr	r1, [pc, #80]	; (8008090 <mem_malloc+0x1f0>)
 800803e:	480f      	ldr	r0, [pc, #60]	; (800807c <mem_malloc+0x1dc>)
 8008040:	f00c fe58 	bl	8014cf4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	3308      	adds	r3, #8
 8008048:	e00e      	b.n	8008068 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800804a:	8bfb      	ldrh	r3, [r7, #30]
 800804c:	4618      	mov	r0, r3
 800804e:	f7ff fc83 	bl	8007958 <ptr_to_mem>
 8008052:	4603      	mov	r3, r0
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008058:	8bfa      	ldrh	r2, [r7, #30]
 800805a:	8bbb      	ldrh	r3, [r7, #28]
 800805c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8008060:	429a      	cmp	r2, r3
 8008062:	f4ff af44 	bcc.w	8007eee <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3720      	adds	r7, #32
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20000880 	.word	0x20000880
 8008074:	080177fc 	.word	0x080177fc
 8008078:	080179a4 	.word	0x080179a4
 800807c:	08017844 	.word	0x08017844
 8008080:	2000087c 	.word	0x2000087c
 8008084:	080179b8 	.word	0x080179b8
 8008088:	080179d4 	.word	0x080179d4
 800808c:	08017a04 	.word	0x08017a04
 8008090:	08017a34 	.word	0x08017a34

08008094 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	3303      	adds	r3, #3
 80080aa:	f023 0303 	bic.w	r3, r3, #3
 80080ae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	e011      	b.n	80080da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	881b      	ldrh	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	4413      	add	r3, r2
 80080d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	3301      	adds	r3, #1
 80080d8:	60fb      	str	r3, [r7, #12]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	885b      	ldrh	r3, [r3, #2]
 80080de:	461a      	mov	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4293      	cmp	r3, r2
 80080e4:	dbe7      	blt.n	80080b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80080e6:	bf00      	nop
 80080e8:	bf00      	nop
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80080fa:	2300      	movs	r3, #0
 80080fc:	80fb      	strh	r3, [r7, #6]
 80080fe:	e009      	b.n	8008114 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008100:	88fb      	ldrh	r3, [r7, #6]
 8008102:	4a08      	ldr	r2, [pc, #32]	; (8008124 <memp_init+0x30>)
 8008104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff ffc3 	bl	8008094 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800810e:	88fb      	ldrh	r3, [r7, #6]
 8008110:	3301      	adds	r3, #1
 8008112:	80fb      	strh	r3, [r7, #6]
 8008114:	88fb      	ldrh	r3, [r7, #6]
 8008116:	2b08      	cmp	r3, #8
 8008118:	d9f2      	bls.n	8008100 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800811a:	bf00      	nop
 800811c:	bf00      	nop
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	0801aa18 	.word	0x0801aa18

08008128 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d012      	beq.n	8008164 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	6812      	ldr	r2, [r2, #0]
 8008146:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f003 0303 	and.w	r3, r3, #3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d006      	beq.n	8008160 <do_memp_malloc_pool+0x38>
 8008152:	4b07      	ldr	r3, [pc, #28]	; (8008170 <do_memp_malloc_pool+0x48>)
 8008154:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008158:	4906      	ldr	r1, [pc, #24]	; (8008174 <do_memp_malloc_pool+0x4c>)
 800815a:	4807      	ldr	r0, [pc, #28]	; (8008178 <do_memp_malloc_pool+0x50>)
 800815c:	f00c fdca 	bl	8014cf4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	e000      	b.n	8008166 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	08017a58 	.word	0x08017a58
 8008174:	08017a88 	.word	0x08017a88
 8008178:	08017aac 	.word	0x08017aac

0800817c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d106      	bne.n	8008198 <memp_malloc_pool+0x1c>
 800818a:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <memp_malloc_pool+0x38>)
 800818c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8008190:	4909      	ldr	r1, [pc, #36]	; (80081b8 <memp_malloc_pool+0x3c>)
 8008192:	480a      	ldr	r0, [pc, #40]	; (80081bc <memp_malloc_pool+0x40>)
 8008194:	f00c fdae 	bl	8014cf4 <iprintf>
  if (desc == NULL) {
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <memp_malloc_pool+0x26>
    return NULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	e003      	b.n	80081aa <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7ff ffc0 	bl	8008128 <do_memp_malloc_pool>
 80081a8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	08017a58 	.word	0x08017a58
 80081b8:	08017ad4 	.word	0x08017ad4
 80081bc:	08017aac 	.word	0x08017aac

080081c0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	4603      	mov	r3, r0
 80081c8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	2b08      	cmp	r3, #8
 80081ce:	d908      	bls.n	80081e2 <memp_malloc+0x22>
 80081d0:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <memp_malloc+0x3c>)
 80081d2:	f240 1257 	movw	r2, #343	; 0x157
 80081d6:	490a      	ldr	r1, [pc, #40]	; (8008200 <memp_malloc+0x40>)
 80081d8:	480a      	ldr	r0, [pc, #40]	; (8008204 <memp_malloc+0x44>)
 80081da:	f00c fd8b 	bl	8014cf4 <iprintf>
 80081de:	2300      	movs	r3, #0
 80081e0:	e008      	b.n	80081f4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80081e2:	79fb      	ldrb	r3, [r7, #7]
 80081e4:	4a08      	ldr	r2, [pc, #32]	; (8008208 <memp_malloc+0x48>)
 80081e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff ff9c 	bl	8008128 <do_memp_malloc_pool>
 80081f0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80081f2:	68fb      	ldr	r3, [r7, #12]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	08017a58 	.word	0x08017a58
 8008200:	08017ae8 	.word	0x08017ae8
 8008204:	08017aac 	.word	0x08017aac
 8008208:	0801aa18 	.word	0x0801aa18

0800820c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	f003 0303 	and.w	r3, r3, #3
 800821c:	2b00      	cmp	r3, #0
 800821e:	d006      	beq.n	800822e <do_memp_free_pool+0x22>
 8008220:	4b0a      	ldr	r3, [pc, #40]	; (800824c <do_memp_free_pool+0x40>)
 8008222:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008226:	490a      	ldr	r1, [pc, #40]	; (8008250 <do_memp_free_pool+0x44>)
 8008228:	480a      	ldr	r0, [pc, #40]	; (8008254 <do_memp_free_pool+0x48>)
 800822a:	f00c fd63 	bl	8014cf4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008244:	bf00      	nop
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	08017a58 	.word	0x08017a58
 8008250:	08017b08 	.word	0x08017b08
 8008254:	08017aac 	.word	0x08017aac

08008258 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d106      	bne.n	8008276 <memp_free_pool+0x1e>
 8008268:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <memp_free_pool+0x3c>)
 800826a:	f240 1295 	movw	r2, #405	; 0x195
 800826e:	490a      	ldr	r1, [pc, #40]	; (8008298 <memp_free_pool+0x40>)
 8008270:	480a      	ldr	r0, [pc, #40]	; (800829c <memp_free_pool+0x44>)
 8008272:	f00c fd3f 	bl	8014cf4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d007      	beq.n	800828c <memp_free_pool+0x34>
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d004      	beq.n	800828c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7ff ffc1 	bl	800820c <do_memp_free_pool>
 800828a:	e000      	b.n	800828e <memp_free_pool+0x36>
    return;
 800828c:	bf00      	nop
}
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	08017a58 	.word	0x08017a58
 8008298:	08017ad4 	.word	0x08017ad4
 800829c:	08017aac 	.word	0x08017aac

080082a0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	6039      	str	r1, [r7, #0]
 80082aa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	2b08      	cmp	r3, #8
 80082b0:	d907      	bls.n	80082c2 <memp_free+0x22>
 80082b2:	4b0c      	ldr	r3, [pc, #48]	; (80082e4 <memp_free+0x44>)
 80082b4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80082b8:	490b      	ldr	r1, [pc, #44]	; (80082e8 <memp_free+0x48>)
 80082ba:	480c      	ldr	r0, [pc, #48]	; (80082ec <memp_free+0x4c>)
 80082bc:	f00c fd1a 	bl	8014cf4 <iprintf>
 80082c0:	e00c      	b.n	80082dc <memp_free+0x3c>

  if (mem == NULL) {
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d008      	beq.n	80082da <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	4a09      	ldr	r2, [pc, #36]	; (80082f0 <memp_free+0x50>)
 80082cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7ff ff9a 	bl	800820c <do_memp_free_pool>
 80082d8:	e000      	b.n	80082dc <memp_free+0x3c>
    return;
 80082da:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	08017a58 	.word	0x08017a58
 80082e8:	08017b28 	.word	0x08017b28
 80082ec:	08017aac 	.word	0x08017aac
 80082f0:	0801aa18 	.word	0x0801aa18

080082f4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80082f8:	bf00      	nop
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
	...

08008304 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d108      	bne.n	800832a <netif_add+0x26>
 8008318:	4b57      	ldr	r3, [pc, #348]	; (8008478 <netif_add+0x174>)
 800831a:	f240 1227 	movw	r2, #295	; 0x127
 800831e:	4957      	ldr	r1, [pc, #348]	; (800847c <netif_add+0x178>)
 8008320:	4857      	ldr	r0, [pc, #348]	; (8008480 <netif_add+0x17c>)
 8008322:	f00c fce7 	bl	8014cf4 <iprintf>
 8008326:	2300      	movs	r3, #0
 8008328:	e0a2      	b.n	8008470 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	2b00      	cmp	r3, #0
 800832e:	d108      	bne.n	8008342 <netif_add+0x3e>
 8008330:	4b51      	ldr	r3, [pc, #324]	; (8008478 <netif_add+0x174>)
 8008332:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008336:	4953      	ldr	r1, [pc, #332]	; (8008484 <netif_add+0x180>)
 8008338:	4851      	ldr	r0, [pc, #324]	; (8008480 <netif_add+0x17c>)
 800833a:	f00c fcdb 	bl	8014cf4 <iprintf>
 800833e:	2300      	movs	r3, #0
 8008340:	e096      	b.n	8008470 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008348:	4b4f      	ldr	r3, [pc, #316]	; (8008488 <netif_add+0x184>)
 800834a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008352:	4b4d      	ldr	r3, [pc, #308]	; (8008488 <netif_add+0x184>)
 8008354:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800835c:	4b4a      	ldr	r3, [pc, #296]	; (8008488 <netif_add+0x184>)
 800835e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	4a45      	ldr	r2, [pc, #276]	; (800848c <netif_add+0x188>)
 8008376:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6a3a      	ldr	r2, [r7, #32]
 8008390:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008392:	4b3f      	ldr	r3, [pc, #252]	; (8008490 <netif_add+0x18c>)
 8008394:	781a      	ldrb	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083a0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	68b9      	ldr	r1, [r7, #8]
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 f913 	bl	80085d4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	4798      	blx	r3
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <netif_add+0xba>
    return NULL;
 80083ba:	2300      	movs	r3, #0
 80083bc:	e058      	b.n	8008470 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083c4:	2bff      	cmp	r3, #255	; 0xff
 80083c6:	d103      	bne.n	80083d0 <netif_add+0xcc>
        netif->num = 0;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80083d4:	4b2f      	ldr	r3, [pc, #188]	; (8008494 <netif_add+0x190>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	617b      	str	r3, [r7, #20]
 80083da:	e02b      	b.n	8008434 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d106      	bne.n	80083f2 <netif_add+0xee>
 80083e4:	4b24      	ldr	r3, [pc, #144]	; (8008478 <netif_add+0x174>)
 80083e6:	f240 128b 	movw	r2, #395	; 0x18b
 80083ea:	492b      	ldr	r1, [pc, #172]	; (8008498 <netif_add+0x194>)
 80083ec:	4824      	ldr	r0, [pc, #144]	; (8008480 <netif_add+0x17c>)
 80083ee:	f00c fc81 	bl	8014cf4 <iprintf>
        num_netifs++;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	3301      	adds	r3, #1
 80083f6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	2bff      	cmp	r3, #255	; 0xff
 80083fc:	dd06      	ble.n	800840c <netif_add+0x108>
 80083fe:	4b1e      	ldr	r3, [pc, #120]	; (8008478 <netif_add+0x174>)
 8008400:	f240 128d 	movw	r2, #397	; 0x18d
 8008404:	4925      	ldr	r1, [pc, #148]	; (800849c <netif_add+0x198>)
 8008406:	481e      	ldr	r0, [pc, #120]	; (8008480 <netif_add+0x17c>)
 8008408:	f00c fc74 	bl	8014cf4 <iprintf>
        if (netif2->num == netif->num) {
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008418:	429a      	cmp	r2, r3
 800841a:	d108      	bne.n	800842e <netif_add+0x12a>
          netif->num++;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008422:	3301      	adds	r3, #1
 8008424:	b2da      	uxtb	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800842c:	e005      	b.n	800843a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	617b      	str	r3, [r7, #20]
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1d0      	bne.n	80083dc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1be      	bne.n	80083be <netif_add+0xba>
  }
  if (netif->num == 254) {
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008446:	2bfe      	cmp	r3, #254	; 0xfe
 8008448:	d103      	bne.n	8008452 <netif_add+0x14e>
    netif_num = 0;
 800844a:	4b11      	ldr	r3, [pc, #68]	; (8008490 <netif_add+0x18c>)
 800844c:	2200      	movs	r2, #0
 800844e:	701a      	strb	r2, [r3, #0]
 8008450:	e006      	b.n	8008460 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008458:	3301      	adds	r3, #1
 800845a:	b2da      	uxtb	r2, r3
 800845c:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <netif_add+0x18c>)
 800845e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008460:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <netif_add+0x190>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008468:	4a0a      	ldr	r2, [pc, #40]	; (8008494 <netif_add+0x190>)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800846e:	68fb      	ldr	r3, [r7, #12]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	08017b44 	.word	0x08017b44
 800847c:	08017bd8 	.word	0x08017bd8
 8008480:	08017b94 	.word	0x08017b94
 8008484:	08017bf4 	.word	0x08017bf4
 8008488:	0801aa7c 	.word	0x0801aa7c
 800848c:	080088af 	.word	0x080088af
 8008490:	200008a8 	.word	0x200008a8
 8008494:	2000ae58 	.word	0x2000ae58
 8008498:	08017c18 	.word	0x08017c18
 800849c:	08017c2c 	.word	0x08017c2c

080084a0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f002 fdf3 	bl	800b098 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f007 fb2f 	bl	800fb18 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80084ba:	bf00      	nop
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
	...

080084c4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d106      	bne.n	80084e4 <netif_do_set_ipaddr+0x20>
 80084d6:	4b1d      	ldr	r3, [pc, #116]	; (800854c <netif_do_set_ipaddr+0x88>)
 80084d8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80084dc:	491c      	ldr	r1, [pc, #112]	; (8008550 <netif_do_set_ipaddr+0x8c>)
 80084de:	481d      	ldr	r0, [pc, #116]	; (8008554 <netif_do_set_ipaddr+0x90>)
 80084e0:	f00c fc08 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d106      	bne.n	80084f8 <netif_do_set_ipaddr+0x34>
 80084ea:	4b18      	ldr	r3, [pc, #96]	; (800854c <netif_do_set_ipaddr+0x88>)
 80084ec:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80084f0:	4917      	ldr	r1, [pc, #92]	; (8008550 <netif_do_set_ipaddr+0x8c>)
 80084f2:	4818      	ldr	r0, [pc, #96]	; (8008554 <netif_do_set_ipaddr+0x90>)
 80084f4:	f00c fbfe 	bl	8014cf4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3304      	adds	r3, #4
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	429a      	cmp	r2, r3
 8008504:	d01c      	beq.n	8008540 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3304      	adds	r3, #4
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008516:	f107 0314 	add.w	r3, r7, #20
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7ff ffbf 	bl	80084a0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <netif_do_set_ipaddr+0x6a>
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	e000      	b.n	8008530 <netif_do_set_ipaddr+0x6c>
 800852e:	2300      	movs	r3, #0
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008534:	2101      	movs	r1, #1
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 f8d2 	bl	80086e0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800853c:	2301      	movs	r3, #1
 800853e:	e000      	b.n	8008542 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	08017b44 	.word	0x08017b44
 8008550:	08017c5c 	.word	0x08017c5c
 8008554:	08017b94 	.word	0x08017b94

08008558 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3308      	adds	r3, #8
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	429a      	cmp	r2, r3
 8008570:	d00a      	beq.n	8008588 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <netif_do_set_netmask+0x26>
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	e000      	b.n	8008580 <netif_do_set_netmask+0x28>
 800857e:	2300      	movs	r3, #0
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008584:	2301      	movs	r3, #1
 8008586:	e000      	b.n	800858a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008596:	b480      	push	{r7}
 8008598:	b085      	sub	sp, #20
 800859a:	af00      	add	r7, sp, #0
 800859c:	60f8      	str	r0, [r7, #12]
 800859e:	60b9      	str	r1, [r7, #8]
 80085a0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	330c      	adds	r3, #12
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d00a      	beq.n	80085c6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <netif_do_set_gw+0x26>
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	e000      	b.n	80085be <netif_do_set_gw+0x28>
 80085bc:	2300      	movs	r3, #0
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80085c2:	2301      	movs	r3, #1
 80085c4:	e000      	b.n	80085c8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80085e6:	2300      	movs	r3, #0
 80085e8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d101      	bne.n	80085f4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80085f0:	4b1c      	ldr	r3, [pc, #112]	; (8008664 <netif_set_addr+0x90>)
 80085f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80085fa:	4b1a      	ldr	r3, [pc, #104]	; (8008664 <netif_set_addr+0x90>)
 80085fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d101      	bne.n	8008608 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008604:	4b17      	ldr	r3, [pc, #92]	; (8008664 <netif_set_addr+0x90>)
 8008606:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <netif_set_addr+0x42>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <netif_set_addr+0x46>
 8008616:	2301      	movs	r3, #1
 8008618:	e000      	b.n	800861c <netif_set_addr+0x48>
 800861a:	2300      	movs	r3, #0
 800861c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d006      	beq.n	8008632 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008624:	f107 0310 	add.w	r3, r7, #16
 8008628:	461a      	mov	r2, r3
 800862a:	68b9      	ldr	r1, [r7, #8]
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f7ff ff49 	bl	80084c4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008632:	69fa      	ldr	r2, [r7, #28]
 8008634:	6879      	ldr	r1, [r7, #4]
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f7ff ff8e 	bl	8008558 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f7ff ffa8 	bl	8008596 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d106      	bne.n	800865a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800864c:	f107 0310 	add.w	r3, r7, #16
 8008650:	461a      	mov	r2, r3
 8008652:	68b9      	ldr	r1, [r7, #8]
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f7ff ff35 	bl	80084c4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800865a:	bf00      	nop
 800865c:	3720      	adds	r7, #32
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	0801aa7c 	.word	0x0801aa7c

08008668 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008670:	4a04      	ldr	r2, [pc, #16]	; (8008684 <netif_set_default+0x1c>)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	2000ae5c 	.word	0x2000ae5c

08008688 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d107      	bne.n	80086a6 <netif_set_up+0x1e>
 8008696:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <netif_set_up+0x4c>)
 8008698:	f44f 7254 	mov.w	r2, #848	; 0x350
 800869c:	490e      	ldr	r1, [pc, #56]	; (80086d8 <netif_set_up+0x50>)
 800869e:	480f      	ldr	r0, [pc, #60]	; (80086dc <netif_set_up+0x54>)
 80086a0:	f00c fb28 	bl	8014cf4 <iprintf>
 80086a4:	e013      	b.n	80086ce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10c      	bne.n	80086ce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80086ba:	f043 0301 	orr.w	r3, r3, #1
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80086c6:	2103      	movs	r1, #3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f809 	bl	80086e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	08017b44 	.word	0x08017b44
 80086d8:	08017ccc 	.word	0x08017ccc
 80086dc:	08017b94 	.word	0x08017b94

080086e0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d106      	bne.n	8008700 <netif_issue_reports+0x20>
 80086f2:	4b18      	ldr	r3, [pc, #96]	; (8008754 <netif_issue_reports+0x74>)
 80086f4:	f240 326d 	movw	r2, #877	; 0x36d
 80086f8:	4917      	ldr	r1, [pc, #92]	; (8008758 <netif_issue_reports+0x78>)
 80086fa:	4818      	ldr	r0, [pc, #96]	; (800875c <netif_issue_reports+0x7c>)
 80086fc:	f00c fafa 	bl	8014cf4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008706:	f003 0304 	and.w	r3, r3, #4
 800870a:	2b00      	cmp	r3, #0
 800870c:	d01e      	beq.n	800874c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008714:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008718:	2b00      	cmp	r3, #0
 800871a:	d017      	beq.n	800874c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b00      	cmp	r3, #0
 8008724:	d013      	beq.n	800874e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	3304      	adds	r3, #4
 800872a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00e      	beq.n	800874e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008736:	f003 0308 	and.w	r3, r3, #8
 800873a:	2b00      	cmp	r3, #0
 800873c:	d007      	beq.n	800874e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	3304      	adds	r3, #4
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f008 f951 	bl	80109ec <etharp_request>
 800874a:	e000      	b.n	800874e <netif_issue_reports+0x6e>
    return;
 800874c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	08017b44 	.word	0x08017b44
 8008758:	08017ce8 	.word	0x08017ce8
 800875c:	08017b94 	.word	0x08017b94

08008760 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d107      	bne.n	800877e <netif_set_down+0x1e>
 800876e:	4b12      	ldr	r3, [pc, #72]	; (80087b8 <netif_set_down+0x58>)
 8008770:	f240 329b 	movw	r2, #923	; 0x39b
 8008774:	4911      	ldr	r1, [pc, #68]	; (80087bc <netif_set_down+0x5c>)
 8008776:	4812      	ldr	r0, [pc, #72]	; (80087c0 <netif_set_down+0x60>)
 8008778:	f00c fabc 	bl	8014cf4 <iprintf>
 800877c:	e019      	b.n	80087b2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	d012      	beq.n	80087b2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008792:	f023 0301 	bic.w	r3, r3, #1
 8008796:	b2da      	uxtb	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087a4:	f003 0308 	and.w	r3, r3, #8
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f007 fcdb 	bl	8010168 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	08017b44 	.word	0x08017b44
 80087bc:	08017d0c 	.word	0x08017d0c
 80087c0:	08017b94 	.word	0x08017b94

080087c4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d107      	bne.n	80087e2 <netif_set_link_up+0x1e>
 80087d2:	4b13      	ldr	r3, [pc, #76]	; (8008820 <netif_set_link_up+0x5c>)
 80087d4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80087d8:	4912      	ldr	r1, [pc, #72]	; (8008824 <netif_set_link_up+0x60>)
 80087da:	4813      	ldr	r0, [pc, #76]	; (8008828 <netif_set_link_up+0x64>)
 80087dc:	f00c fa8a 	bl	8014cf4 <iprintf>
 80087e0:	e01b      	b.n	800881a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087e8:	f003 0304 	and.w	r3, r3, #4
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d114      	bne.n	800881a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087f6:	f043 0304 	orr.w	r3, r3, #4
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008802:	2103      	movs	r1, #3
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f7ff ff6b 	bl	80086e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	69db      	ldr	r3, [r3, #28]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <netif_set_link_up+0x56>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	08017b44 	.word	0x08017b44
 8008824:	08017d2c 	.word	0x08017d2c
 8008828:	08017b94 	.word	0x08017b94

0800882c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d107      	bne.n	800884a <netif_set_link_down+0x1e>
 800883a:	4b11      	ldr	r3, [pc, #68]	; (8008880 <netif_set_link_down+0x54>)
 800883c:	f240 4206 	movw	r2, #1030	; 0x406
 8008840:	4910      	ldr	r1, [pc, #64]	; (8008884 <netif_set_link_down+0x58>)
 8008842:	4811      	ldr	r0, [pc, #68]	; (8008888 <netif_set_link_down+0x5c>)
 8008844:	f00c fa56 	bl	8014cf4 <iprintf>
 8008848:	e017      	b.n	800887a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b00      	cmp	r3, #0
 8008856:	d010      	beq.n	800887a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800885e:	f023 0304 	bic.w	r3, r3, #4
 8008862:	b2da      	uxtb	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <netif_set_link_down+0x4e>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	08017b44 	.word	0x08017b44
 8008884:	08017d50 	.word	0x08017d50
 8008888:	08017b94 	.word	0x08017b94

0800888c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	61da      	str	r2, [r3, #28]
  }
}
 80088a2:	bf00      	nop
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b085      	sub	sp, #20
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80088ba:	f06f 030b 	mvn.w	r3, #11
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
	...

080088cc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	4603      	mov	r3, r0
 80088d4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80088d6:	79fb      	ldrb	r3, [r7, #7]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d013      	beq.n	8008904 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80088dc:	4b0d      	ldr	r3, [pc, #52]	; (8008914 <netif_get_by_index+0x48>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	60fb      	str	r3, [r7, #12]
 80088e2:	e00c      	b.n	80088fe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088ea:	3301      	adds	r3, #1
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	79fa      	ldrb	r2, [r7, #7]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d101      	bne.n	80088f8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	e006      	b.n	8008906 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	60fb      	str	r3, [r7, #12]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1ef      	bne.n	80088e4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	2000ae58 	.word	0x2000ae58

08008918 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800891e:	4b0c      	ldr	r3, [pc, #48]	; (8008950 <pbuf_free_ooseq+0x38>)
 8008920:	2200      	movs	r2, #0
 8008922:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008924:	4b0b      	ldr	r3, [pc, #44]	; (8008954 <pbuf_free_ooseq+0x3c>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	607b      	str	r3, [r7, #4]
 800892a:	e00a      	b.n	8008942 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f002 fbed 	bl	800b114 <tcp_free_ooseq>
      return;
 800893a:	e005      	b.n	8008948 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	607b      	str	r3, [r7, #4]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1f1      	bne.n	800892c <pbuf_free_ooseq+0x14>
    }
  }
}
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	2000ae60 	.word	0x2000ae60
 8008954:	2000ae68 	.word	0x2000ae68

08008958 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008958:	b480      	push	{r7}
 800895a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800895c:	4b03      	ldr	r3, [pc, #12]	; (800896c <pbuf_pool_is_empty+0x14>)
 800895e:	2201      	movs	r2, #1
 8008960:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008962:	bf00      	nop
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	2000ae60 	.word	0x2000ae60

08008970 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	4611      	mov	r1, r2
 800897c:	461a      	mov	r2, r3
 800897e:	460b      	mov	r3, r1
 8008980:	80fb      	strh	r3, [r7, #6]
 8008982:	4613      	mov	r3, r2
 8008984:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	88fa      	ldrh	r2, [r7, #6]
 8008996:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	88ba      	ldrh	r2, [r7, #4]
 800899c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800899e:	8b3b      	ldrh	r3, [r7, #24]
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	7f3a      	ldrb	r2, [r7, #28]
 80089aa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2201      	movs	r2, #1
 80089b0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	73da      	strb	r2, [r3, #15]
}
 80089b8:	bf00      	nop
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08c      	sub	sp, #48	; 0x30
 80089c8:	af02      	add	r7, sp, #8
 80089ca:	4603      	mov	r3, r0
 80089cc:	71fb      	strb	r3, [r7, #7]
 80089ce:	460b      	mov	r3, r1
 80089d0:	80bb      	strh	r3, [r7, #4]
 80089d2:	4613      	mov	r3, r2
 80089d4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80089d6:	79fb      	ldrb	r3, [r7, #7]
 80089d8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80089da:	887b      	ldrh	r3, [r7, #2]
 80089dc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80089e0:	d07f      	beq.n	8008ae2 <pbuf_alloc+0x11e>
 80089e2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80089e6:	f300 80c8 	bgt.w	8008b7a <pbuf_alloc+0x1b6>
 80089ea:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80089ee:	d010      	beq.n	8008a12 <pbuf_alloc+0x4e>
 80089f0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80089f4:	f300 80c1 	bgt.w	8008b7a <pbuf_alloc+0x1b6>
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d002      	beq.n	8008a02 <pbuf_alloc+0x3e>
 80089fc:	2b41      	cmp	r3, #65	; 0x41
 80089fe:	f040 80bc 	bne.w	8008b7a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008a02:	887a      	ldrh	r2, [r7, #2]
 8008a04:	88bb      	ldrh	r3, [r7, #4]
 8008a06:	4619      	mov	r1, r3
 8008a08:	2000      	movs	r0, #0
 8008a0a:	f000 f8d1 	bl	8008bb0 <pbuf_alloc_reference>
 8008a0e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008a10:	e0bd      	b.n	8008b8e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008a1a:	88bb      	ldrh	r3, [r7, #4]
 8008a1c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008a1e:	2008      	movs	r0, #8
 8008a20:	f7ff fbce 	bl	80081c0 <memp_malloc>
 8008a24:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d109      	bne.n	8008a40 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008a2c:	f7ff ff94 	bl	8008958 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d002      	beq.n	8008a3c <pbuf_alloc+0x78>
            pbuf_free(p);
 8008a36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a38:	f000 faa8 	bl	8008f8c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	e0a7      	b.n	8008b90 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008a40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a42:	3303      	adds	r3, #3
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	f023 0303 	bic.w	r3, r3, #3
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	8b7a      	ldrh	r2, [r7, #26]
 8008a54:	4293      	cmp	r3, r2
 8008a56:	bf28      	it	cs
 8008a58:	4613      	movcs	r3, r2
 8008a5a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008a5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a5e:	3310      	adds	r3, #16
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	4413      	add	r3, r2
 8008a64:	3303      	adds	r3, #3
 8008a66:	f023 0303 	bic.w	r3, r3, #3
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	89f9      	ldrh	r1, [r7, #14]
 8008a6e:	8b7a      	ldrh	r2, [r7, #26]
 8008a70:	2300      	movs	r3, #0
 8008a72:	9301      	str	r3, [sp, #4]
 8008a74:	887b      	ldrh	r3, [r7, #2]
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	6938      	ldr	r0, [r7, #16]
 8008a7e:	f7ff ff77 	bl	8008970 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f003 0303 	and.w	r3, r3, #3
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d006      	beq.n	8008a9c <pbuf_alloc+0xd8>
 8008a8e:	4b42      	ldr	r3, [pc, #264]	; (8008b98 <pbuf_alloc+0x1d4>)
 8008a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a94:	4941      	ldr	r1, [pc, #260]	; (8008b9c <pbuf_alloc+0x1d8>)
 8008a96:	4842      	ldr	r0, [pc, #264]	; (8008ba0 <pbuf_alloc+0x1dc>)
 8008a98:	f00c f92c 	bl	8014cf4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008a9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a9e:	3303      	adds	r3, #3
 8008aa0:	f023 0303 	bic.w	r3, r3, #3
 8008aa4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008aa8:	d106      	bne.n	8008ab8 <pbuf_alloc+0xf4>
 8008aaa:	4b3b      	ldr	r3, [pc, #236]	; (8008b98 <pbuf_alloc+0x1d4>)
 8008aac:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008ab0:	493c      	ldr	r1, [pc, #240]	; (8008ba4 <pbuf_alloc+0x1e0>)
 8008ab2:	483b      	ldr	r0, [pc, #236]	; (8008ba0 <pbuf_alloc+0x1dc>)
 8008ab4:	f00c f91e 	bl	8014cf4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d102      	bne.n	8008ac4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac2:	e002      	b.n	8008aca <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008ace:	8b7a      	ldrh	r2, [r7, #26]
 8008ad0:	89fb      	ldrh	r3, [r7, #14]
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008ada:	8b7b      	ldrh	r3, [r7, #26]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d19e      	bne.n	8008a1e <pbuf_alloc+0x5a>
      break;
 8008ae0:	e055      	b.n	8008b8e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008ae2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ae4:	3303      	adds	r3, #3
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	f023 0303 	bic.w	r3, r3, #3
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	88bb      	ldrh	r3, [r7, #4]
 8008af0:	3303      	adds	r3, #3
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	f023 0303 	bic.w	r3, r3, #3
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	4413      	add	r3, r2
 8008afc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008afe:	8b3b      	ldrh	r3, [r7, #24]
 8008b00:	3310      	adds	r3, #16
 8008b02:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008b04:	8b3a      	ldrh	r2, [r7, #24]
 8008b06:	88bb      	ldrh	r3, [r7, #4]
 8008b08:	3303      	adds	r3, #3
 8008b0a:	f023 0303 	bic.w	r3, r3, #3
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d306      	bcc.n	8008b20 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008b12:	8afa      	ldrh	r2, [r7, #22]
 8008b14:	88bb      	ldrh	r3, [r7, #4]
 8008b16:	3303      	adds	r3, #3
 8008b18:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d201      	bcs.n	8008b24 <pbuf_alloc+0x160>
        return NULL;
 8008b20:	2300      	movs	r3, #0
 8008b22:	e035      	b.n	8008b90 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008b24:	8afb      	ldrh	r3, [r7, #22]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff f9ba 	bl	8007ea0 <mem_malloc>
 8008b2c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d101      	bne.n	8008b38 <pbuf_alloc+0x174>
        return NULL;
 8008b34:	2300      	movs	r3, #0
 8008b36:	e02b      	b.n	8008b90 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008b38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b3a:	3310      	adds	r3, #16
 8008b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b3e:	4413      	add	r3, r2
 8008b40:	3303      	adds	r3, #3
 8008b42:	f023 0303 	bic.w	r3, r3, #3
 8008b46:	4618      	mov	r0, r3
 8008b48:	88b9      	ldrh	r1, [r7, #4]
 8008b4a:	88ba      	ldrh	r2, [r7, #4]
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	9301      	str	r3, [sp, #4]
 8008b50:	887b      	ldrh	r3, [r7, #2]
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	460b      	mov	r3, r1
 8008b56:	4601      	mov	r1, r0
 8008b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b5a:	f7ff ff09 	bl	8008970 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f003 0303 	and.w	r3, r3, #3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d010      	beq.n	8008b8c <pbuf_alloc+0x1c8>
 8008b6a:	4b0b      	ldr	r3, [pc, #44]	; (8008b98 <pbuf_alloc+0x1d4>)
 8008b6c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008b70:	490d      	ldr	r1, [pc, #52]	; (8008ba8 <pbuf_alloc+0x1e4>)
 8008b72:	480b      	ldr	r0, [pc, #44]	; (8008ba0 <pbuf_alloc+0x1dc>)
 8008b74:	f00c f8be 	bl	8014cf4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008b78:	e008      	b.n	8008b8c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008b7a:	4b07      	ldr	r3, [pc, #28]	; (8008b98 <pbuf_alloc+0x1d4>)
 8008b7c:	f240 1227 	movw	r2, #295	; 0x127
 8008b80:	490a      	ldr	r1, [pc, #40]	; (8008bac <pbuf_alloc+0x1e8>)
 8008b82:	4807      	ldr	r0, [pc, #28]	; (8008ba0 <pbuf_alloc+0x1dc>)
 8008b84:	f00c f8b6 	bl	8014cf4 <iprintf>
      return NULL;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	e001      	b.n	8008b90 <pbuf_alloc+0x1cc>
      break;
 8008b8c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3728      	adds	r7, #40	; 0x28
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	08017d74 	.word	0x08017d74
 8008b9c:	08017da4 	.word	0x08017da4
 8008ba0:	08017dd4 	.word	0x08017dd4
 8008ba4:	08017dfc 	.word	0x08017dfc
 8008ba8:	08017e30 	.word	0x08017e30
 8008bac:	08017e5c 	.word	0x08017e5c

08008bb0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af02      	add	r7, sp, #8
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	807b      	strh	r3, [r7, #2]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008bc0:	883b      	ldrh	r3, [r7, #0]
 8008bc2:	2b41      	cmp	r3, #65	; 0x41
 8008bc4:	d009      	beq.n	8008bda <pbuf_alloc_reference+0x2a>
 8008bc6:	883b      	ldrh	r3, [r7, #0]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d006      	beq.n	8008bda <pbuf_alloc_reference+0x2a>
 8008bcc:	4b0f      	ldr	r3, [pc, #60]	; (8008c0c <pbuf_alloc_reference+0x5c>)
 8008bce:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008bd2:	490f      	ldr	r1, [pc, #60]	; (8008c10 <pbuf_alloc_reference+0x60>)
 8008bd4:	480f      	ldr	r0, [pc, #60]	; (8008c14 <pbuf_alloc_reference+0x64>)
 8008bd6:	f00c f88d 	bl	8014cf4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008bda:	2007      	movs	r0, #7
 8008bdc:	f7ff faf0 	bl	80081c0 <memp_malloc>
 8008be0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008be8:	2300      	movs	r3, #0
 8008bea:	e00b      	b.n	8008c04 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008bec:	8879      	ldrh	r1, [r7, #2]
 8008bee:	887a      	ldrh	r2, [r7, #2]
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	9301      	str	r3, [sp, #4]
 8008bf4:	883b      	ldrh	r3, [r7, #0]
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	6879      	ldr	r1, [r7, #4]
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f7ff feb7 	bl	8008970 <pbuf_init_alloced_pbuf>
  return p;
 8008c02:	68fb      	ldr	r3, [r7, #12]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	08017d74 	.word	0x08017d74
 8008c10:	08017e78 	.word	0x08017e78
 8008c14:	08017dd4 	.word	0x08017dd4

08008c18 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b088      	sub	sp, #32
 8008c1c:	af02      	add	r7, sp, #8
 8008c1e:	607b      	str	r3, [r7, #4]
 8008c20:	4603      	mov	r3, r0
 8008c22:	73fb      	strb	r3, [r7, #15]
 8008c24:	460b      	mov	r3, r1
 8008c26:	81bb      	strh	r3, [r7, #12]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
 8008c2e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008c30:	8a7b      	ldrh	r3, [r7, #18]
 8008c32:	3303      	adds	r3, #3
 8008c34:	f023 0203 	bic.w	r2, r3, #3
 8008c38:	89bb      	ldrh	r3, [r7, #12]
 8008c3a:	441a      	add	r2, r3
 8008c3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d901      	bls.n	8008c46 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	e018      	b.n	8008c78 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d007      	beq.n	8008c5c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008c4c:	8a7b      	ldrh	r3, [r7, #18]
 8008c4e:	3303      	adds	r3, #3
 8008c50:	f023 0303 	bic.w	r3, r3, #3
 8008c54:	6a3a      	ldr	r2, [r7, #32]
 8008c56:	4413      	add	r3, r2
 8008c58:	617b      	str	r3, [r7, #20]
 8008c5a:	e001      	b.n	8008c60 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	89b9      	ldrh	r1, [r7, #12]
 8008c64:	89ba      	ldrh	r2, [r7, #12]
 8008c66:	2302      	movs	r3, #2
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	897b      	ldrh	r3, [r7, #10]
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	460b      	mov	r3, r1
 8008c70:	6979      	ldr	r1, [r7, #20]
 8008c72:	f7ff fe7d 	bl	8008970 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008c76:	687b      	ldr	r3, [r7, #4]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3718      	adds	r7, #24
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d106      	bne.n	8008ca0 <pbuf_realloc+0x20>
 8008c92:	4b3a      	ldr	r3, [pc, #232]	; (8008d7c <pbuf_realloc+0xfc>)
 8008c94:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008c98:	4939      	ldr	r1, [pc, #228]	; (8008d80 <pbuf_realloc+0x100>)
 8008c9a:	483a      	ldr	r0, [pc, #232]	; (8008d84 <pbuf_realloc+0x104>)
 8008c9c:	f00c f82a 	bl	8014cf4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	891b      	ldrh	r3, [r3, #8]
 8008ca4:	887a      	ldrh	r2, [r7, #2]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d263      	bcs.n	8008d72 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	891a      	ldrh	r2, [r3, #8]
 8008cae:	887b      	ldrh	r3, [r7, #2]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008cb4:	887b      	ldrh	r3, [r7, #2]
 8008cb6:	817b      	strh	r3, [r7, #10]
  q = p;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008cbc:	e018      	b.n	8008cf0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	895b      	ldrh	r3, [r3, #10]
 8008cc2:	897a      	ldrh	r2, [r7, #10]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	891a      	ldrh	r2, [r3, #8]
 8008ccc:	893b      	ldrh	r3, [r7, #8]
 8008cce:	1ad3      	subs	r3, r2, r3
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d106      	bne.n	8008cf0 <pbuf_realloc+0x70>
 8008ce2:	4b26      	ldr	r3, [pc, #152]	; (8008d7c <pbuf_realloc+0xfc>)
 8008ce4:	f240 12af 	movw	r2, #431	; 0x1af
 8008ce8:	4927      	ldr	r1, [pc, #156]	; (8008d88 <pbuf_realloc+0x108>)
 8008cea:	4826      	ldr	r0, [pc, #152]	; (8008d84 <pbuf_realloc+0x104>)
 8008cec:	f00c f802 	bl	8014cf4 <iprintf>
  while (rem_len > q->len) {
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	895b      	ldrh	r3, [r3, #10]
 8008cf4:	897a      	ldrh	r2, [r7, #10]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d8e1      	bhi.n	8008cbe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	7b1b      	ldrb	r3, [r3, #12]
 8008cfe:	f003 030f 	and.w	r3, r3, #15
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d121      	bne.n	8008d4a <pbuf_realloc+0xca>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	895b      	ldrh	r3, [r3, #10]
 8008d0a:	897a      	ldrh	r2, [r7, #10]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d01c      	beq.n	8008d4a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	7b5b      	ldrb	r3, [r3, #13]
 8008d14:	f003 0302 	and.w	r3, r3, #2
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d116      	bne.n	8008d4a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	685a      	ldr	r2, [r3, #4]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	897b      	ldrh	r3, [r7, #10]
 8008d28:	4413      	add	r3, r2
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f7fe ffba 	bl	8007ca8 <mem_trim>
 8008d34:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d106      	bne.n	8008d4a <pbuf_realloc+0xca>
 8008d3c:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <pbuf_realloc+0xfc>)
 8008d3e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008d42:	4912      	ldr	r1, [pc, #72]	; (8008d8c <pbuf_realloc+0x10c>)
 8008d44:	480f      	ldr	r0, [pc, #60]	; (8008d84 <pbuf_realloc+0x104>)
 8008d46:	f00b ffd5 	bl	8014cf4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	897a      	ldrh	r2, [r7, #10]
 8008d4e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	895a      	ldrh	r2, [r3, #10]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d004      	beq.n	8008d6a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 f911 	bl	8008f8c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	e000      	b.n	8008d74 <pbuf_realloc+0xf4>
    return;
 8008d72:	bf00      	nop

}
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	08017d74 	.word	0x08017d74
 8008d80:	08017e8c 	.word	0x08017e8c
 8008d84:	08017dd4 	.word	0x08017dd4
 8008d88:	08017ea4 	.word	0x08017ea4
 8008d8c:	08017ebc 	.word	0x08017ebc

08008d90 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d106      	bne.n	8008db2 <pbuf_add_header_impl+0x22>
 8008da4:	4b2b      	ldr	r3, [pc, #172]	; (8008e54 <pbuf_add_header_impl+0xc4>)
 8008da6:	f240 12df 	movw	r2, #479	; 0x1df
 8008daa:	492b      	ldr	r1, [pc, #172]	; (8008e58 <pbuf_add_header_impl+0xc8>)
 8008dac:	482b      	ldr	r0, [pc, #172]	; (8008e5c <pbuf_add_header_impl+0xcc>)
 8008dae:	f00b ffa1 	bl	8014cf4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d003      	beq.n	8008dc0 <pbuf_add_header_impl+0x30>
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dbe:	d301      	bcc.n	8008dc4 <pbuf_add_header_impl+0x34>
    return 1;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e043      	b.n	8008e4c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <pbuf_add_header_impl+0x3e>
    return 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e03e      	b.n	8008e4c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	891a      	ldrh	r2, [r3, #8]
 8008dd6:	8a7b      	ldrh	r3, [r7, #18]
 8008dd8:	4413      	add	r3, r2
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	8a7a      	ldrh	r2, [r7, #18]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d901      	bls.n	8008de6 <pbuf_add_header_impl+0x56>
    return 1;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e032      	b.n	8008e4c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	7b1b      	ldrb	r3, [r3, #12]
 8008dea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008dec:	8a3b      	ldrh	r3, [r7, #16]
 8008dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00c      	beq.n	8008e10 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	425b      	negs	r3, r3
 8008dfe:	4413      	add	r3, r2
 8008e00:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	3310      	adds	r3, #16
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d20d      	bcs.n	8008e28 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e01d      	b.n	8008e4c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008e10:	79fb      	ldrb	r3, [r7, #7]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d006      	beq.n	8008e24 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	425b      	negs	r3, r3
 8008e1e:	4413      	add	r3, r2
 8008e20:	617b      	str	r3, [r7, #20]
 8008e22:	e001      	b.n	8008e28 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e011      	b.n	8008e4c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	895a      	ldrh	r2, [r3, #10]
 8008e32:	8a7b      	ldrh	r3, [r7, #18]
 8008e34:	4413      	add	r3, r2
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	891a      	ldrh	r2, [r3, #8]
 8008e40:	8a7b      	ldrh	r3, [r7, #18]
 8008e42:	4413      	add	r3, r2
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	811a      	strh	r2, [r3, #8]


  return 0;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3718      	adds	r7, #24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	08017d74 	.word	0x08017d74
 8008e58:	08017ed8 	.word	0x08017ed8
 8008e5c:	08017dd4 	.word	0x08017dd4

08008e60 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7ff ff8e 	bl	8008d90 <pbuf_add_header_impl>
 8008e74:	4603      	mov	r3, r0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
	...

08008e80 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d106      	bne.n	8008e9e <pbuf_remove_header+0x1e>
 8008e90:	4b20      	ldr	r3, [pc, #128]	; (8008f14 <pbuf_remove_header+0x94>)
 8008e92:	f240 224b 	movw	r2, #587	; 0x24b
 8008e96:	4920      	ldr	r1, [pc, #128]	; (8008f18 <pbuf_remove_header+0x98>)
 8008e98:	4820      	ldr	r0, [pc, #128]	; (8008f1c <pbuf_remove_header+0x9c>)
 8008e9a:	f00b ff2b 	bl	8014cf4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d003      	beq.n	8008eac <pbuf_remove_header+0x2c>
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eaa:	d301      	bcc.n	8008eb0 <pbuf_remove_header+0x30>
    return 1;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e02c      	b.n	8008f0a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <pbuf_remove_header+0x3a>
    return 0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	e027      	b.n	8008f0a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	895b      	ldrh	r3, [r3, #10]
 8008ec2:	89fa      	ldrh	r2, [r7, #14]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d908      	bls.n	8008eda <pbuf_remove_header+0x5a>
 8008ec8:	4b12      	ldr	r3, [pc, #72]	; (8008f14 <pbuf_remove_header+0x94>)
 8008eca:	f240 2255 	movw	r2, #597	; 0x255
 8008ece:	4914      	ldr	r1, [pc, #80]	; (8008f20 <pbuf_remove_header+0xa0>)
 8008ed0:	4812      	ldr	r0, [pc, #72]	; (8008f1c <pbuf_remove_header+0x9c>)
 8008ed2:	f00b ff0f 	bl	8014cf4 <iprintf>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e017      	b.n	8008f0a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685a      	ldr	r2, [r3, #4]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	441a      	add	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	895a      	ldrh	r2, [r3, #10]
 8008ef0:	89fb      	ldrh	r3, [r7, #14]
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	891a      	ldrh	r2, [r3, #8]
 8008efe:	89fb      	ldrh	r3, [r7, #14]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	08017d74 	.word	0x08017d74
 8008f18:	08017ed8 	.word	0x08017ed8
 8008f1c:	08017dd4 	.word	0x08017dd4
 8008f20:	08017ee4 	.word	0x08017ee4

08008f24 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	807b      	strh	r3, [r7, #2]
 8008f30:	4613      	mov	r3, r2
 8008f32:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008f34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	da08      	bge.n	8008f4e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008f3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f40:	425b      	negs	r3, r3
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff ff9b 	bl	8008e80 <pbuf_remove_header>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	e007      	b.n	8008f5e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008f4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f52:	787a      	ldrb	r2, [r7, #1]
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7ff ff1a 	bl	8008d90 <pbuf_add_header_impl>
 8008f5c:	4603      	mov	r3, r0
  }
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b082      	sub	sp, #8
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008f72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f76:	2201      	movs	r2, #1
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff ffd2 	bl	8008f24 <pbuf_header_impl>
 8008f80:	4603      	mov	r3, r0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
	...

08008f8c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b086      	sub	sp, #24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10b      	bne.n	8008fb2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d106      	bne.n	8008fae <pbuf_free+0x22>
 8008fa0:	4b38      	ldr	r3, [pc, #224]	; (8009084 <pbuf_free+0xf8>)
 8008fa2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008fa6:	4938      	ldr	r1, [pc, #224]	; (8009088 <pbuf_free+0xfc>)
 8008fa8:	4838      	ldr	r0, [pc, #224]	; (800908c <pbuf_free+0x100>)
 8008faa:	f00b fea3 	bl	8014cf4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	e063      	b.n	800907a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008fb6:	e05c      	b.n	8009072 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	7b9b      	ldrb	r3, [r3, #14]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d106      	bne.n	8008fce <pbuf_free+0x42>
 8008fc0:	4b30      	ldr	r3, [pc, #192]	; (8009084 <pbuf_free+0xf8>)
 8008fc2:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008fc6:	4932      	ldr	r1, [pc, #200]	; (8009090 <pbuf_free+0x104>)
 8008fc8:	4830      	ldr	r0, [pc, #192]	; (800908c <pbuf_free+0x100>)
 8008fca:	f00b fe93 	bl	8014cf4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	7b9b      	ldrb	r3, [r3, #14]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	739a      	strb	r2, [r3, #14]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	7b9b      	ldrb	r3, [r3, #14]
 8008fde:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008fe0:	7dbb      	ldrb	r3, [r7, #22]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d143      	bne.n	800906e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	7b1b      	ldrb	r3, [r3, #12]
 8008ff0:	f003 030f 	and.w	r3, r3, #15
 8008ff4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	7b5b      	ldrb	r3, [r3, #13]
 8008ffa:	f003 0302 	and.w	r3, r3, #2
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d011      	beq.n	8009026 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d106      	bne.n	800901c <pbuf_free+0x90>
 800900e:	4b1d      	ldr	r3, [pc, #116]	; (8009084 <pbuf_free+0xf8>)
 8009010:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009014:	491f      	ldr	r1, [pc, #124]	; (8009094 <pbuf_free+0x108>)
 8009016:	481d      	ldr	r0, [pc, #116]	; (800908c <pbuf_free+0x100>)
 8009018:	f00b fe6c 	bl	8014cf4 <iprintf>
        pc->custom_free_function(p);
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	4798      	blx	r3
 8009024:	e01d      	b.n	8009062 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009026:	7bfb      	ldrb	r3, [r7, #15]
 8009028:	2b02      	cmp	r3, #2
 800902a:	d104      	bne.n	8009036 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800902c:	6879      	ldr	r1, [r7, #4]
 800902e:	2008      	movs	r0, #8
 8009030:	f7ff f936 	bl	80082a0 <memp_free>
 8009034:	e015      	b.n	8009062 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009036:	7bfb      	ldrb	r3, [r7, #15]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d104      	bne.n	8009046 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800903c:	6879      	ldr	r1, [r7, #4]
 800903e:	2007      	movs	r0, #7
 8009040:	f7ff f92e 	bl	80082a0 <memp_free>
 8009044:	e00d      	b.n	8009062 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d103      	bne.n	8009054 <pbuf_free+0xc8>
          mem_free(p);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7fe fdc1 	bl	8007bd4 <mem_free>
 8009052:	e006      	b.n	8009062 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009054:	4b0b      	ldr	r3, [pc, #44]	; (8009084 <pbuf_free+0xf8>)
 8009056:	f240 320f 	movw	r2, #783	; 0x30f
 800905a:	490f      	ldr	r1, [pc, #60]	; (8009098 <pbuf_free+0x10c>)
 800905c:	480b      	ldr	r0, [pc, #44]	; (800908c <pbuf_free+0x100>)
 800905e:	f00b fe49 	bl	8014cf4 <iprintf>
        }
      }
      count++;
 8009062:	7dfb      	ldrb	r3, [r7, #23]
 8009064:	3301      	adds	r3, #1
 8009066:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	607b      	str	r3, [r7, #4]
 800906c:	e001      	b.n	8009072 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800906e:	2300      	movs	r3, #0
 8009070:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d19f      	bne.n	8008fb8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009078:	7dfb      	ldrb	r3, [r7, #23]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3718      	adds	r7, #24
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	08017d74 	.word	0x08017d74
 8009088:	08017ed8 	.word	0x08017ed8
 800908c:	08017dd4 	.word	0x08017dd4
 8009090:	08017f04 	.word	0x08017f04
 8009094:	08017f1c 	.word	0x08017f1c
 8009098:	08017f40 	.word	0x08017f40

0800909c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80090a8:	e005      	b.n	80090b6 <pbuf_clen+0x1a>
    ++len;
 80090aa:	89fb      	ldrh	r3, [r7, #14]
 80090ac:	3301      	adds	r3, #1
 80090ae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1f6      	bne.n	80090aa <pbuf_clen+0xe>
  }
  return len;
 80090bc:	89fb      	ldrh	r3, [r7, #14]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3714      	adds	r7, #20
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
	...

080090cc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d010      	beq.n	80090fc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	7b9b      	ldrb	r3, [r3, #14]
 80090de:	3301      	adds	r3, #1
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	7b9b      	ldrb	r3, [r3, #14]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d106      	bne.n	80090fc <pbuf_ref+0x30>
 80090ee:	4b05      	ldr	r3, [pc, #20]	; (8009104 <pbuf_ref+0x38>)
 80090f0:	f240 3242 	movw	r2, #834	; 0x342
 80090f4:	4904      	ldr	r1, [pc, #16]	; (8009108 <pbuf_ref+0x3c>)
 80090f6:	4805      	ldr	r0, [pc, #20]	; (800910c <pbuf_ref+0x40>)
 80090f8:	f00b fdfc 	bl	8014cf4 <iprintf>
  }
}
 80090fc:	bf00      	nop
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	08017d74 	.word	0x08017d74
 8009108:	08017f54 	.word	0x08017f54
 800910c:	08017dd4 	.word	0x08017dd4

08009110 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <pbuf_cat+0x16>
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d107      	bne.n	8009136 <pbuf_cat+0x26>
 8009126:	4b20      	ldr	r3, [pc, #128]	; (80091a8 <pbuf_cat+0x98>)
 8009128:	f240 3259 	movw	r2, #857	; 0x359
 800912c:	491f      	ldr	r1, [pc, #124]	; (80091ac <pbuf_cat+0x9c>)
 800912e:	4820      	ldr	r0, [pc, #128]	; (80091b0 <pbuf_cat+0xa0>)
 8009130:	f00b fde0 	bl	8014cf4 <iprintf>
 8009134:	e034      	b.n	80091a0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	60fb      	str	r3, [r7, #12]
 800913a:	e00a      	b.n	8009152 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	891a      	ldrh	r2, [r3, #8]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	891b      	ldrh	r3, [r3, #8]
 8009144:	4413      	add	r3, r2
 8009146:	b29a      	uxth	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	60fb      	str	r3, [r7, #12]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1f0      	bne.n	800913c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	891a      	ldrh	r2, [r3, #8]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	895b      	ldrh	r3, [r3, #10]
 8009162:	429a      	cmp	r2, r3
 8009164:	d006      	beq.n	8009174 <pbuf_cat+0x64>
 8009166:	4b10      	ldr	r3, [pc, #64]	; (80091a8 <pbuf_cat+0x98>)
 8009168:	f240 3262 	movw	r2, #866	; 0x362
 800916c:	4911      	ldr	r1, [pc, #68]	; (80091b4 <pbuf_cat+0xa4>)
 800916e:	4810      	ldr	r0, [pc, #64]	; (80091b0 <pbuf_cat+0xa0>)
 8009170:	f00b fdc0 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d006      	beq.n	800918a <pbuf_cat+0x7a>
 800917c:	4b0a      	ldr	r3, [pc, #40]	; (80091a8 <pbuf_cat+0x98>)
 800917e:	f240 3263 	movw	r2, #867	; 0x363
 8009182:	490d      	ldr	r1, [pc, #52]	; (80091b8 <pbuf_cat+0xa8>)
 8009184:	480a      	ldr	r0, [pc, #40]	; (80091b0 <pbuf_cat+0xa0>)
 8009186:	f00b fdb5 	bl	8014cf4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	891a      	ldrh	r2, [r3, #8]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	891b      	ldrh	r3, [r3, #8]
 8009192:	4413      	add	r3, r2
 8009194:	b29a      	uxth	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	08017d74 	.word	0x08017d74
 80091ac:	08017f68 	.word	0x08017f68
 80091b0:	08017dd4 	.word	0x08017dd4
 80091b4:	08017fa0 	.word	0x08017fa0
 80091b8:	08017fd0 	.word	0x08017fd0

080091bc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff ffa1 	bl	8009110 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80091ce:	6838      	ldr	r0, [r7, #0]
 80091d0:	f7ff ff7c 	bl	80090cc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80091d4:	bf00      	nop
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80091e6:	2300      	movs	r3, #0
 80091e8:	617b      	str	r3, [r7, #20]
 80091ea:	2300      	movs	r3, #0
 80091ec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d008      	beq.n	8009206 <pbuf_copy+0x2a>
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d005      	beq.n	8009206 <pbuf_copy+0x2a>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	891a      	ldrh	r2, [r3, #8]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	891b      	ldrh	r3, [r3, #8]
 8009202:	429a      	cmp	r2, r3
 8009204:	d209      	bcs.n	800921a <pbuf_copy+0x3e>
 8009206:	4b57      	ldr	r3, [pc, #348]	; (8009364 <pbuf_copy+0x188>)
 8009208:	f240 32c9 	movw	r2, #969	; 0x3c9
 800920c:	4956      	ldr	r1, [pc, #344]	; (8009368 <pbuf_copy+0x18c>)
 800920e:	4857      	ldr	r0, [pc, #348]	; (800936c <pbuf_copy+0x190>)
 8009210:	f00b fd70 	bl	8014cf4 <iprintf>
 8009214:	f06f 030f 	mvn.w	r3, #15
 8009218:	e09f      	b.n	800935a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	895b      	ldrh	r3, [r3, #10]
 800921e:	461a      	mov	r2, r3
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	1ad2      	subs	r2, r2, r3
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	895b      	ldrh	r3, [r3, #10]
 8009228:	4619      	mov	r1, r3
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	1acb      	subs	r3, r1, r3
 800922e:	429a      	cmp	r2, r3
 8009230:	d306      	bcc.n	8009240 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	895b      	ldrh	r3, [r3, #10]
 8009236:	461a      	mov	r2, r3
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	60fb      	str	r3, [r7, #12]
 800923e:	e005      	b.n	800924c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	895b      	ldrh	r3, [r3, #10]
 8009244:	461a      	mov	r2, r3
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	1ad3      	subs	r3, r2, r3
 800924a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	18d0      	adds	r0, r2, r3
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	4413      	add	r3, r2
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	4619      	mov	r1, r3
 8009260:	f00b ffc1 	bl	80151e6 <memcpy>
    offset_to += len;
 8009264:	697a      	ldr	r2, [r7, #20]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	4413      	add	r3, r2
 800926a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800926c:	693a      	ldr	r2, [r7, #16]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	4413      	add	r3, r2
 8009272:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	895b      	ldrh	r3, [r3, #10]
 8009278:	461a      	mov	r2, r3
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	4293      	cmp	r3, r2
 800927e:	d906      	bls.n	800928e <pbuf_copy+0xb2>
 8009280:	4b38      	ldr	r3, [pc, #224]	; (8009364 <pbuf_copy+0x188>)
 8009282:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009286:	493a      	ldr	r1, [pc, #232]	; (8009370 <pbuf_copy+0x194>)
 8009288:	4838      	ldr	r0, [pc, #224]	; (800936c <pbuf_copy+0x190>)
 800928a:	f00b fd33 	bl	8014cf4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	895b      	ldrh	r3, [r3, #10]
 8009292:	461a      	mov	r2, r3
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	4293      	cmp	r3, r2
 8009298:	d906      	bls.n	80092a8 <pbuf_copy+0xcc>
 800929a:	4b32      	ldr	r3, [pc, #200]	; (8009364 <pbuf_copy+0x188>)
 800929c:	f240 32da 	movw	r2, #986	; 0x3da
 80092a0:	4934      	ldr	r1, [pc, #208]	; (8009374 <pbuf_copy+0x198>)
 80092a2:	4832      	ldr	r0, [pc, #200]	; (800936c <pbuf_copy+0x190>)
 80092a4:	f00b fd26 	bl	8014cf4 <iprintf>
    if (offset_from >= p_from->len) {
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	895b      	ldrh	r3, [r3, #10]
 80092ac:	461a      	mov	r2, r3
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d304      	bcc.n	80092be <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80092b4:	2300      	movs	r3, #0
 80092b6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	895b      	ldrh	r3, [r3, #10]
 80092c2:	461a      	mov	r2, r3
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d114      	bne.n	80092f4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10c      	bne.n	80092f4 <pbuf_copy+0x118>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d009      	beq.n	80092f4 <pbuf_copy+0x118>
 80092e0:	4b20      	ldr	r3, [pc, #128]	; (8009364 <pbuf_copy+0x188>)
 80092e2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80092e6:	4924      	ldr	r1, [pc, #144]	; (8009378 <pbuf_copy+0x19c>)
 80092e8:	4820      	ldr	r0, [pc, #128]	; (800936c <pbuf_copy+0x190>)
 80092ea:	f00b fd03 	bl	8014cf4 <iprintf>
 80092ee:	f06f 030f 	mvn.w	r3, #15
 80092f2:	e032      	b.n	800935a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d013      	beq.n	8009322 <pbuf_copy+0x146>
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	895a      	ldrh	r2, [r3, #10]
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	891b      	ldrh	r3, [r3, #8]
 8009302:	429a      	cmp	r2, r3
 8009304:	d10d      	bne.n	8009322 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d009      	beq.n	8009322 <pbuf_copy+0x146>
 800930e:	4b15      	ldr	r3, [pc, #84]	; (8009364 <pbuf_copy+0x188>)
 8009310:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009314:	4919      	ldr	r1, [pc, #100]	; (800937c <pbuf_copy+0x1a0>)
 8009316:	4815      	ldr	r0, [pc, #84]	; (800936c <pbuf_copy+0x190>)
 8009318:	f00b fcec 	bl	8014cf4 <iprintf>
 800931c:	f06f 0305 	mvn.w	r3, #5
 8009320:	e01b      	b.n	800935a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d013      	beq.n	8009350 <pbuf_copy+0x174>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	895a      	ldrh	r2, [r3, #10]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	891b      	ldrh	r3, [r3, #8]
 8009330:	429a      	cmp	r2, r3
 8009332:	d10d      	bne.n	8009350 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d009      	beq.n	8009350 <pbuf_copy+0x174>
 800933c:	4b09      	ldr	r3, [pc, #36]	; (8009364 <pbuf_copy+0x188>)
 800933e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009342:	490e      	ldr	r1, [pc, #56]	; (800937c <pbuf_copy+0x1a0>)
 8009344:	4809      	ldr	r0, [pc, #36]	; (800936c <pbuf_copy+0x190>)
 8009346:	f00b fcd5 	bl	8014cf4 <iprintf>
 800934a:	f06f 0305 	mvn.w	r3, #5
 800934e:	e004      	b.n	800935a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	f47f af61 	bne.w	800921a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	08017d74 	.word	0x08017d74
 8009368:	0801801c 	.word	0x0801801c
 800936c:	08017dd4 	.word	0x08017dd4
 8009370:	0801804c 	.word	0x0801804c
 8009374:	08018064 	.word	0x08018064
 8009378:	08018080 	.word	0x08018080
 800937c:	08018090 	.word	0x08018090

08009380 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b088      	sub	sp, #32
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	4611      	mov	r1, r2
 800938c:	461a      	mov	r2, r3
 800938e:	460b      	mov	r3, r1
 8009390:	80fb      	strh	r3, [r7, #6]
 8009392:	4613      	mov	r3, r2
 8009394:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800939a:	2300      	movs	r3, #0
 800939c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d108      	bne.n	80093b6 <pbuf_copy_partial+0x36>
 80093a4:	4b2b      	ldr	r3, [pc, #172]	; (8009454 <pbuf_copy_partial+0xd4>)
 80093a6:	f240 420a 	movw	r2, #1034	; 0x40a
 80093aa:	492b      	ldr	r1, [pc, #172]	; (8009458 <pbuf_copy_partial+0xd8>)
 80093ac:	482b      	ldr	r0, [pc, #172]	; (800945c <pbuf_copy_partial+0xdc>)
 80093ae:	f00b fca1 	bl	8014cf4 <iprintf>
 80093b2:	2300      	movs	r3, #0
 80093b4:	e04a      	b.n	800944c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d108      	bne.n	80093ce <pbuf_copy_partial+0x4e>
 80093bc:	4b25      	ldr	r3, [pc, #148]	; (8009454 <pbuf_copy_partial+0xd4>)
 80093be:	f240 420b 	movw	r2, #1035	; 0x40b
 80093c2:	4927      	ldr	r1, [pc, #156]	; (8009460 <pbuf_copy_partial+0xe0>)
 80093c4:	4825      	ldr	r0, [pc, #148]	; (800945c <pbuf_copy_partial+0xdc>)
 80093c6:	f00b fc95 	bl	8014cf4 <iprintf>
 80093ca:	2300      	movs	r3, #0
 80093cc:	e03e      	b.n	800944c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	61fb      	str	r3, [r7, #28]
 80093d2:	e034      	b.n	800943e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80093d4:	88bb      	ldrh	r3, [r7, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00a      	beq.n	80093f0 <pbuf_copy_partial+0x70>
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	895b      	ldrh	r3, [r3, #10]
 80093de:	88ba      	ldrh	r2, [r7, #4]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d305      	bcc.n	80093f0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	895b      	ldrh	r3, [r3, #10]
 80093e8:	88ba      	ldrh	r2, [r7, #4]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	80bb      	strh	r3, [r7, #4]
 80093ee:	e023      	b.n	8009438 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	895a      	ldrh	r2, [r3, #10]
 80093f4:	88bb      	ldrh	r3, [r7, #4]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80093fa:	8b3a      	ldrh	r2, [r7, #24]
 80093fc:	88fb      	ldrh	r3, [r7, #6]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d901      	bls.n	8009406 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009402:	88fb      	ldrh	r3, [r7, #6]
 8009404:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009406:	8b7b      	ldrh	r3, [r7, #26]
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	18d0      	adds	r0, r2, r3
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	88bb      	ldrh	r3, [r7, #4]
 8009412:	4413      	add	r3, r2
 8009414:	8b3a      	ldrh	r2, [r7, #24]
 8009416:	4619      	mov	r1, r3
 8009418:	f00b fee5 	bl	80151e6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800941c:	8afa      	ldrh	r2, [r7, #22]
 800941e:	8b3b      	ldrh	r3, [r7, #24]
 8009420:	4413      	add	r3, r2
 8009422:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009424:	8b7a      	ldrh	r2, [r7, #26]
 8009426:	8b3b      	ldrh	r3, [r7, #24]
 8009428:	4413      	add	r3, r2
 800942a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800942c:	88fa      	ldrh	r2, [r7, #6]
 800942e:	8b3b      	ldrh	r3, [r7, #24]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	61fb      	str	r3, [r7, #28]
 800943e:	88fb      	ldrh	r3, [r7, #6]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <pbuf_copy_partial+0xca>
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1c4      	bne.n	80093d4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800944a:	8afb      	ldrh	r3, [r7, #22]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3720      	adds	r7, #32
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	08017d74 	.word	0x08017d74
 8009458:	080180bc 	.word	0x080180bc
 800945c:	08017dd4 	.word	0x08017dd4
 8009460:	080180dc 	.word	0x080180dc

08009464 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	603a      	str	r2, [r7, #0]
 800946e:	71fb      	strb	r3, [r7, #7]
 8009470:	460b      	mov	r3, r1
 8009472:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	8919      	ldrh	r1, [r3, #8]
 8009478:	88ba      	ldrh	r2, [r7, #4]
 800947a:	79fb      	ldrb	r3, [r7, #7]
 800947c:	4618      	mov	r0, r3
 800947e:	f7ff faa1 	bl	80089c4 <pbuf_alloc>
 8009482:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d101      	bne.n	800948e <pbuf_clone+0x2a>
    return NULL;
 800948a:	2300      	movs	r3, #0
 800948c:	e011      	b.n	80094b2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f7ff fea3 	bl	80091dc <pbuf_copy>
 8009496:	4603      	mov	r3, r0
 8009498:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800949a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d006      	beq.n	80094b0 <pbuf_clone+0x4c>
 80094a2:	4b06      	ldr	r3, [pc, #24]	; (80094bc <pbuf_clone+0x58>)
 80094a4:	f240 5224 	movw	r2, #1316	; 0x524
 80094a8:	4905      	ldr	r1, [pc, #20]	; (80094c0 <pbuf_clone+0x5c>)
 80094aa:	4806      	ldr	r0, [pc, #24]	; (80094c4 <pbuf_clone+0x60>)
 80094ac:	f00b fc22 	bl	8014cf4 <iprintf>
  return q;
 80094b0:	68fb      	ldr	r3, [r7, #12]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	08017d74 	.word	0x08017d74
 80094c0:	080181e8 	.word	0x080181e8
 80094c4:	08017dd4 	.word	0x08017dd4

080094c8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80094cc:	f009 ffac 	bl	8013428 <rand>
 80094d0:	4603      	mov	r3, r0
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80094d8:	b29b      	uxth	r3, r3
 80094da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80094de:	b29a      	uxth	r2, r3
 80094e0:	4b01      	ldr	r3, [pc, #4]	; (80094e8 <tcp_init+0x20>)
 80094e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80094e4:	bf00      	nop
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	20000020 	.word	0x20000020

080094ec <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	7d1b      	ldrb	r3, [r3, #20]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d105      	bne.n	8009508 <tcp_free+0x1c>
 80094fc:	4b06      	ldr	r3, [pc, #24]	; (8009518 <tcp_free+0x2c>)
 80094fe:	22d4      	movs	r2, #212	; 0xd4
 8009500:	4906      	ldr	r1, [pc, #24]	; (800951c <tcp_free+0x30>)
 8009502:	4807      	ldr	r0, [pc, #28]	; (8009520 <tcp_free+0x34>)
 8009504:	f00b fbf6 	bl	8014cf4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009508:	6879      	ldr	r1, [r7, #4]
 800950a:	2001      	movs	r0, #1
 800950c:	f7fe fec8 	bl	80082a0 <memp_free>
}
 8009510:	bf00      	nop
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	08018274 	.word	0x08018274
 800951c:	080182a4 	.word	0x080182a4
 8009520:	080182b8 	.word	0x080182b8

08009524 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	7d1b      	ldrb	r3, [r3, #20]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d105      	bne.n	8009540 <tcp_free_listen+0x1c>
 8009534:	4b06      	ldr	r3, [pc, #24]	; (8009550 <tcp_free_listen+0x2c>)
 8009536:	22df      	movs	r2, #223	; 0xdf
 8009538:	4906      	ldr	r1, [pc, #24]	; (8009554 <tcp_free_listen+0x30>)
 800953a:	4807      	ldr	r0, [pc, #28]	; (8009558 <tcp_free_listen+0x34>)
 800953c:	f00b fbda 	bl	8014cf4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009540:	6879      	ldr	r1, [r7, #4]
 8009542:	2002      	movs	r0, #2
 8009544:	f7fe feac 	bl	80082a0 <memp_free>
}
 8009548:	bf00      	nop
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	08018274 	.word	0x08018274
 8009554:	080182e0 	.word	0x080182e0
 8009558:	080182b8 	.word	0x080182b8

0800955c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009560:	f001 f85c 	bl	800a61c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009564:	4b07      	ldr	r3, [pc, #28]	; (8009584 <tcp_tmr+0x28>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	3301      	adds	r3, #1
 800956a:	b2da      	uxtb	r2, r3
 800956c:	4b05      	ldr	r3, [pc, #20]	; (8009584 <tcp_tmr+0x28>)
 800956e:	701a      	strb	r2, [r3, #0]
 8009570:	4b04      	ldr	r3, [pc, #16]	; (8009584 <tcp_tmr+0x28>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	f003 0301 	and.w	r3, r3, #1
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800957c:	f000 fd0e 	bl	8009f9c <tcp_slowtmr>
  }
}
 8009580:	bf00      	nop
 8009582:	bd80      	pop	{r7, pc}
 8009584:	200008a9 	.word	0x200008a9

08009588 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d105      	bne.n	80095a4 <tcp_remove_listener+0x1c>
 8009598:	4b0d      	ldr	r3, [pc, #52]	; (80095d0 <tcp_remove_listener+0x48>)
 800959a:	22ff      	movs	r2, #255	; 0xff
 800959c:	490d      	ldr	r1, [pc, #52]	; (80095d4 <tcp_remove_listener+0x4c>)
 800959e:	480e      	ldr	r0, [pc, #56]	; (80095d8 <tcp_remove_listener+0x50>)
 80095a0:	f00b fba8 	bl	8014cf4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	60fb      	str	r3, [r7, #12]
 80095a8:	e00a      	b.n	80095c0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d102      	bne.n	80095ba <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1f1      	bne.n	80095aa <tcp_remove_listener+0x22>
    }
  }
}
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	08018274 	.word	0x08018274
 80095d4:	080182fc 	.word	0x080182fc
 80095d8:	080182b8 	.word	0x080182b8

080095dc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d106      	bne.n	80095f8 <tcp_listen_closed+0x1c>
 80095ea:	4b14      	ldr	r3, [pc, #80]	; (800963c <tcp_listen_closed+0x60>)
 80095ec:	f240 1211 	movw	r2, #273	; 0x111
 80095f0:	4913      	ldr	r1, [pc, #76]	; (8009640 <tcp_listen_closed+0x64>)
 80095f2:	4814      	ldr	r0, [pc, #80]	; (8009644 <tcp_listen_closed+0x68>)
 80095f4:	f00b fb7e 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	7d1b      	ldrb	r3, [r3, #20]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d006      	beq.n	800960e <tcp_listen_closed+0x32>
 8009600:	4b0e      	ldr	r3, [pc, #56]	; (800963c <tcp_listen_closed+0x60>)
 8009602:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009606:	4910      	ldr	r1, [pc, #64]	; (8009648 <tcp_listen_closed+0x6c>)
 8009608:	480e      	ldr	r0, [pc, #56]	; (8009644 <tcp_listen_closed+0x68>)
 800960a:	f00b fb73 	bl	8014cf4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800960e:	2301      	movs	r3, #1
 8009610:	60fb      	str	r3, [r7, #12]
 8009612:	e00b      	b.n	800962c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009614:	4a0d      	ldr	r2, [pc, #52]	; (800964c <tcp_listen_closed+0x70>)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	6879      	ldr	r1, [r7, #4]
 8009620:	4618      	mov	r0, r3
 8009622:	f7ff ffb1 	bl	8009588 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3301      	adds	r3, #1
 800962a:	60fb      	str	r3, [r7, #12]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2b03      	cmp	r3, #3
 8009630:	d9f0      	bls.n	8009614 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009632:	bf00      	nop
 8009634:	bf00      	nop
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	08018274 	.word	0x08018274
 8009640:	08018324 	.word	0x08018324
 8009644:	080182b8 	.word	0x080182b8
 8009648:	08018330 	.word	0x08018330
 800964c:	0801aa54 	.word	0x0801aa54

08009650 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009650:	b5b0      	push	{r4, r5, r7, lr}
 8009652:	b088      	sub	sp, #32
 8009654:	af04      	add	r7, sp, #16
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	460b      	mov	r3, r1
 800965a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d106      	bne.n	8009670 <tcp_close_shutdown+0x20>
 8009662:	4b63      	ldr	r3, [pc, #396]	; (80097f0 <tcp_close_shutdown+0x1a0>)
 8009664:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009668:	4962      	ldr	r1, [pc, #392]	; (80097f4 <tcp_close_shutdown+0x1a4>)
 800966a:	4863      	ldr	r0, [pc, #396]	; (80097f8 <tcp_close_shutdown+0x1a8>)
 800966c:	f00b fb42 	bl	8014cf4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009670:	78fb      	ldrb	r3, [r7, #3]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d066      	beq.n	8009744 <tcp_close_shutdown+0xf4>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	7d1b      	ldrb	r3, [r3, #20]
 800967a:	2b04      	cmp	r3, #4
 800967c:	d003      	beq.n	8009686 <tcp_close_shutdown+0x36>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	7d1b      	ldrb	r3, [r3, #20]
 8009682:	2b07      	cmp	r3, #7
 8009684:	d15e      	bne.n	8009744 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800968a:	2b00      	cmp	r3, #0
 800968c:	d104      	bne.n	8009698 <tcp_close_shutdown+0x48>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009692:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009696:	d055      	beq.n	8009744 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	8b5b      	ldrh	r3, [r3, #26]
 800969c:	f003 0310 	and.w	r3, r3, #16
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d106      	bne.n	80096b2 <tcp_close_shutdown+0x62>
 80096a4:	4b52      	ldr	r3, [pc, #328]	; (80097f0 <tcp_close_shutdown+0x1a0>)
 80096a6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80096aa:	4954      	ldr	r1, [pc, #336]	; (80097fc <tcp_close_shutdown+0x1ac>)
 80096ac:	4852      	ldr	r0, [pc, #328]	; (80097f8 <tcp_close_shutdown+0x1a8>)
 80096ae:	f00b fb21 	bl	8014cf4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80096ba:	687d      	ldr	r5, [r7, #4]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	3304      	adds	r3, #4
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	8ad2      	ldrh	r2, [r2, #22]
 80096c4:	6879      	ldr	r1, [r7, #4]
 80096c6:	8b09      	ldrh	r1, [r1, #24]
 80096c8:	9102      	str	r1, [sp, #8]
 80096ca:	9201      	str	r2, [sp, #4]
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	462b      	mov	r3, r5
 80096d0:	4622      	mov	r2, r4
 80096d2:	4601      	mov	r1, r0
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f005 fd89 	bl	800f1ec <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f001 fb66 	bl	800adac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80096e0:	4b47      	ldr	r3, [pc, #284]	; (8009800 <tcp_close_shutdown+0x1b0>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d105      	bne.n	80096f6 <tcp_close_shutdown+0xa6>
 80096ea:	4b45      	ldr	r3, [pc, #276]	; (8009800 <tcp_close_shutdown+0x1b0>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	4a43      	ldr	r2, [pc, #268]	; (8009800 <tcp_close_shutdown+0x1b0>)
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	e013      	b.n	800971e <tcp_close_shutdown+0xce>
 80096f6:	4b42      	ldr	r3, [pc, #264]	; (8009800 <tcp_close_shutdown+0x1b0>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	60fb      	str	r3, [r7, #12]
 80096fc:	e00c      	b.n	8009718 <tcp_close_shutdown+0xc8>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	429a      	cmp	r2, r3
 8009706:	d104      	bne.n	8009712 <tcp_close_shutdown+0xc2>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	68da      	ldr	r2, [r3, #12]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	60da      	str	r2, [r3, #12]
 8009710:	e005      	b.n	800971e <tcp_close_shutdown+0xce>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	60fb      	str	r3, [r7, #12]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1ef      	bne.n	80096fe <tcp_close_shutdown+0xae>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	60da      	str	r2, [r3, #12]
 8009724:	4b37      	ldr	r3, [pc, #220]	; (8009804 <tcp_close_shutdown+0x1b4>)
 8009726:	2201      	movs	r2, #1
 8009728:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800972a:	4b37      	ldr	r3, [pc, #220]	; (8009808 <tcp_close_shutdown+0x1b8>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	429a      	cmp	r2, r3
 8009732:	d102      	bne.n	800973a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009734:	f003 fffe 	bl	800d734 <tcp_trigger_input_pcb_close>
 8009738:	e002      	b.n	8009740 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7ff fed6 	bl	80094ec <tcp_free>
      }
      return ERR_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	e050      	b.n	80097e6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	7d1b      	ldrb	r3, [r3, #20]
 8009748:	2b02      	cmp	r3, #2
 800974a:	d03b      	beq.n	80097c4 <tcp_close_shutdown+0x174>
 800974c:	2b02      	cmp	r3, #2
 800974e:	dc44      	bgt.n	80097da <tcp_close_shutdown+0x18a>
 8009750:	2b00      	cmp	r3, #0
 8009752:	d002      	beq.n	800975a <tcp_close_shutdown+0x10a>
 8009754:	2b01      	cmp	r3, #1
 8009756:	d02a      	beq.n	80097ae <tcp_close_shutdown+0x15e>
 8009758:	e03f      	b.n	80097da <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	8adb      	ldrh	r3, [r3, #22]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d021      	beq.n	80097a6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009762:	4b2a      	ldr	r3, [pc, #168]	; (800980c <tcp_close_shutdown+0x1bc>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	429a      	cmp	r2, r3
 800976a:	d105      	bne.n	8009778 <tcp_close_shutdown+0x128>
 800976c:	4b27      	ldr	r3, [pc, #156]	; (800980c <tcp_close_shutdown+0x1bc>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	4a26      	ldr	r2, [pc, #152]	; (800980c <tcp_close_shutdown+0x1bc>)
 8009774:	6013      	str	r3, [r2, #0]
 8009776:	e013      	b.n	80097a0 <tcp_close_shutdown+0x150>
 8009778:	4b24      	ldr	r3, [pc, #144]	; (800980c <tcp_close_shutdown+0x1bc>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	60bb      	str	r3, [r7, #8]
 800977e:	e00c      	b.n	800979a <tcp_close_shutdown+0x14a>
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	429a      	cmp	r2, r3
 8009788:	d104      	bne.n	8009794 <tcp_close_shutdown+0x144>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	68da      	ldr	r2, [r3, #12]
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	60da      	str	r2, [r3, #12]
 8009792:	e005      	b.n	80097a0 <tcp_close_shutdown+0x150>
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	60bb      	str	r3, [r7, #8]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1ef      	bne.n	8009780 <tcp_close_shutdown+0x130>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff fea0 	bl	80094ec <tcp_free>
      break;
 80097ac:	e01a      	b.n	80097e4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7ff ff14 	bl	80095dc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80097b4:	6879      	ldr	r1, [r7, #4]
 80097b6:	4816      	ldr	r0, [pc, #88]	; (8009810 <tcp_close_shutdown+0x1c0>)
 80097b8:	f001 fb48 	bl	800ae4c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7ff feb1 	bl	8009524 <tcp_free_listen>
      break;
 80097c2:	e00f      	b.n	80097e4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80097c4:	6879      	ldr	r1, [r7, #4]
 80097c6:	480e      	ldr	r0, [pc, #56]	; (8009800 <tcp_close_shutdown+0x1b0>)
 80097c8:	f001 fb40 	bl	800ae4c <tcp_pcb_remove>
 80097cc:	4b0d      	ldr	r3, [pc, #52]	; (8009804 <tcp_close_shutdown+0x1b4>)
 80097ce:	2201      	movs	r2, #1
 80097d0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7ff fe8a 	bl	80094ec <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80097d8:	e004      	b.n	80097e4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f81a 	bl	8009814 <tcp_close_shutdown_fin>
 80097e0:	4603      	mov	r3, r0
 80097e2:	e000      	b.n	80097e6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bdb0      	pop	{r4, r5, r7, pc}
 80097ee:	bf00      	nop
 80097f0:	08018274 	.word	0x08018274
 80097f4:	08018348 	.word	0x08018348
 80097f8:	080182b8 	.word	0x080182b8
 80097fc:	08018368 	.word	0x08018368
 8009800:	2000ae68 	.word	0x2000ae68
 8009804:	2000ae64 	.word	0x2000ae64
 8009808:	2000ae7c 	.word	0x2000ae7c
 800980c:	2000ae74 	.word	0x2000ae74
 8009810:	2000ae70 	.word	0x2000ae70

08009814 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d106      	bne.n	8009830 <tcp_close_shutdown_fin+0x1c>
 8009822:	4b2e      	ldr	r3, [pc, #184]	; (80098dc <tcp_close_shutdown_fin+0xc8>)
 8009824:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009828:	492d      	ldr	r1, [pc, #180]	; (80098e0 <tcp_close_shutdown_fin+0xcc>)
 800982a:	482e      	ldr	r0, [pc, #184]	; (80098e4 <tcp_close_shutdown_fin+0xd0>)
 800982c:	f00b fa62 	bl	8014cf4 <iprintf>

  switch (pcb->state) {
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	7d1b      	ldrb	r3, [r3, #20]
 8009834:	2b07      	cmp	r3, #7
 8009836:	d020      	beq.n	800987a <tcp_close_shutdown_fin+0x66>
 8009838:	2b07      	cmp	r3, #7
 800983a:	dc2b      	bgt.n	8009894 <tcp_close_shutdown_fin+0x80>
 800983c:	2b03      	cmp	r3, #3
 800983e:	d002      	beq.n	8009846 <tcp_close_shutdown_fin+0x32>
 8009840:	2b04      	cmp	r3, #4
 8009842:	d00d      	beq.n	8009860 <tcp_close_shutdown_fin+0x4c>
 8009844:	e026      	b.n	8009894 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f004 fdde 	bl	800e408 <tcp_send_fin>
 800984c:	4603      	mov	r3, r0
 800984e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d11f      	bne.n	8009898 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2205      	movs	r2, #5
 800985c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800985e:	e01b      	b.n	8009898 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f004 fdd1 	bl	800e408 <tcp_send_fin>
 8009866:	4603      	mov	r3, r0
 8009868:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800986a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d114      	bne.n	800989c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2205      	movs	r2, #5
 8009876:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009878:	e010      	b.n	800989c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f004 fdc4 	bl	800e408 <tcp_send_fin>
 8009880:	4603      	mov	r3, r0
 8009882:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d109      	bne.n	80098a0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2209      	movs	r2, #9
 8009890:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009892:	e005      	b.n	80098a0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	e01c      	b.n	80098d2 <tcp_close_shutdown_fin+0xbe>
      break;
 8009898:	bf00      	nop
 800989a:	e002      	b.n	80098a2 <tcp_close_shutdown_fin+0x8e>
      break;
 800989c:	bf00      	nop
 800989e:	e000      	b.n	80098a2 <tcp_close_shutdown_fin+0x8e>
      break;
 80098a0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80098a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d103      	bne.n	80098b2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f004 feea 	bl	800e684 <tcp_output>
 80098b0:	e00d      	b.n	80098ce <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80098b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ba:	d108      	bne.n	80098ce <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	8b5b      	ldrh	r3, [r3, #26]
 80098c0:	f043 0308 	orr.w	r3, r3, #8
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	e001      	b.n	80098d2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80098ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	08018274 	.word	0x08018274
 80098e0:	08018324 	.word	0x08018324
 80098e4:	080182b8 	.word	0x080182b8

080098e8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d109      	bne.n	800990a <tcp_close+0x22>
 80098f6:	4b0f      	ldr	r3, [pc, #60]	; (8009934 <tcp_close+0x4c>)
 80098f8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80098fc:	490e      	ldr	r1, [pc, #56]	; (8009938 <tcp_close+0x50>)
 80098fe:	480f      	ldr	r0, [pc, #60]	; (800993c <tcp_close+0x54>)
 8009900:	f00b f9f8 	bl	8014cf4 <iprintf>
 8009904:	f06f 030f 	mvn.w	r3, #15
 8009908:	e00f      	b.n	800992a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	7d1b      	ldrb	r3, [r3, #20]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d006      	beq.n	8009920 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	8b5b      	ldrh	r3, [r3, #26]
 8009916:	f043 0310 	orr.w	r3, r3, #16
 800991a:	b29a      	uxth	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009920:	2101      	movs	r1, #1
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff fe94 	bl	8009650 <tcp_close_shutdown>
 8009928:	4603      	mov	r3, r0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	08018274 	.word	0x08018274
 8009938:	08018384 	.word	0x08018384
 800993c:	080182b8 	.word	0x080182b8

08009940 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08e      	sub	sp, #56	; 0x38
 8009944:	af04      	add	r7, sp, #16
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d107      	bne.n	8009960 <tcp_abandon+0x20>
 8009950:	4b52      	ldr	r3, [pc, #328]	; (8009a9c <tcp_abandon+0x15c>)
 8009952:	f240 223d 	movw	r2, #573	; 0x23d
 8009956:	4952      	ldr	r1, [pc, #328]	; (8009aa0 <tcp_abandon+0x160>)
 8009958:	4852      	ldr	r0, [pc, #328]	; (8009aa4 <tcp_abandon+0x164>)
 800995a:	f00b f9cb 	bl	8014cf4 <iprintf>
 800995e:	e099      	b.n	8009a94 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	7d1b      	ldrb	r3, [r3, #20]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d106      	bne.n	8009976 <tcp_abandon+0x36>
 8009968:	4b4c      	ldr	r3, [pc, #304]	; (8009a9c <tcp_abandon+0x15c>)
 800996a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800996e:	494e      	ldr	r1, [pc, #312]	; (8009aa8 <tcp_abandon+0x168>)
 8009970:	484c      	ldr	r0, [pc, #304]	; (8009aa4 <tcp_abandon+0x164>)
 8009972:	f00b f9bf 	bl	8014cf4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	7d1b      	ldrb	r3, [r3, #20]
 800997a:	2b0a      	cmp	r3, #10
 800997c:	d107      	bne.n	800998e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800997e:	6879      	ldr	r1, [r7, #4]
 8009980:	484a      	ldr	r0, [pc, #296]	; (8009aac <tcp_abandon+0x16c>)
 8009982:	f001 fa63 	bl	800ae4c <tcp_pcb_remove>
    tcp_free(pcb);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7ff fdb0 	bl	80094ec <tcp_free>
 800998c:	e082      	b.n	8009a94 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800998e:	2300      	movs	r3, #0
 8009990:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800999a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099a8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	7d1b      	ldrb	r3, [r3, #20]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d126      	bne.n	8009a06 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	8adb      	ldrh	r3, [r3, #22]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d02e      	beq.n	8009a1e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80099c0:	4b3b      	ldr	r3, [pc, #236]	; (8009ab0 <tcp_abandon+0x170>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d105      	bne.n	80099d6 <tcp_abandon+0x96>
 80099ca:	4b39      	ldr	r3, [pc, #228]	; (8009ab0 <tcp_abandon+0x170>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	4a37      	ldr	r2, [pc, #220]	; (8009ab0 <tcp_abandon+0x170>)
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	e013      	b.n	80099fe <tcp_abandon+0xbe>
 80099d6:	4b36      	ldr	r3, [pc, #216]	; (8009ab0 <tcp_abandon+0x170>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	61fb      	str	r3, [r7, #28]
 80099dc:	e00c      	b.n	80099f8 <tcp_abandon+0xb8>
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d104      	bne.n	80099f2 <tcp_abandon+0xb2>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	68da      	ldr	r2, [r3, #12]
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	60da      	str	r2, [r3, #12]
 80099f0:	e005      	b.n	80099fe <tcp_abandon+0xbe>
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	61fb      	str	r3, [r7, #28]
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1ef      	bne.n	80099de <tcp_abandon+0x9e>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	60da      	str	r2, [r3, #12]
 8009a04:	e00b      	b.n	8009a1e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	8adb      	ldrh	r3, [r3, #22]
 8009a0e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009a10:	6879      	ldr	r1, [r7, #4]
 8009a12:	4828      	ldr	r0, [pc, #160]	; (8009ab4 <tcp_abandon+0x174>)
 8009a14:	f001 fa1a 	bl	800ae4c <tcp_pcb_remove>
 8009a18:	4b27      	ldr	r3, [pc, #156]	; (8009ab8 <tcp_abandon+0x178>)
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d004      	beq.n	8009a30 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 fed6 	bl	800a7dc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d004      	beq.n	8009a42 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f000 fecd 	bl	800a7dc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d004      	beq.n	8009a54 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 fec4 	bl	800a7dc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00e      	beq.n	8009a78 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	3304      	adds	r3, #4
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	8b12      	ldrh	r2, [r2, #24]
 8009a64:	9202      	str	r2, [sp, #8]
 8009a66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009a68:	9201      	str	r2, [sp, #4]
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	69b9      	ldr	r1, [r7, #24]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f005 fbba 	bl	800f1ec <tcp_rst>
    }
    last_state = pcb->state;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	7d1b      	ldrb	r3, [r3, #20]
 8009a7c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7ff fd34 	bl	80094ec <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d004      	beq.n	8009a94 <tcp_abandon+0x154>
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	f06f 010c 	mvn.w	r1, #12
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	4798      	blx	r3
  }
}
 8009a94:	3728      	adds	r7, #40	; 0x28
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	08018274 	.word	0x08018274
 8009aa0:	080183b8 	.word	0x080183b8
 8009aa4:	080182b8 	.word	0x080182b8
 8009aa8:	080183d4 	.word	0x080183d4
 8009aac:	2000ae78 	.word	0x2000ae78
 8009ab0:	2000ae74 	.word	0x2000ae74
 8009ab4:	2000ae68 	.word	0x2000ae68
 8009ab8:	2000ae64 	.word	0x2000ae64

08009abc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7ff ff3a 	bl	8009940 <tcp_abandon>
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8009ae2:	2304      	movs	r3, #4
 8009ae4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d101      	bne.n	8009af0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8009aec:	4b3e      	ldr	r3, [pc, #248]	; (8009be8 <tcp_bind+0x114>)
 8009aee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d109      	bne.n	8009b0a <tcp_bind+0x36>
 8009af6:	4b3d      	ldr	r3, [pc, #244]	; (8009bec <tcp_bind+0x118>)
 8009af8:	f240 22a9 	movw	r2, #681	; 0x2a9
 8009afc:	493c      	ldr	r1, [pc, #240]	; (8009bf0 <tcp_bind+0x11c>)
 8009afe:	483d      	ldr	r0, [pc, #244]	; (8009bf4 <tcp_bind+0x120>)
 8009b00:	f00b f8f8 	bl	8014cf4 <iprintf>
 8009b04:	f06f 030f 	mvn.w	r3, #15
 8009b08:	e06a      	b.n	8009be0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	7d1b      	ldrb	r3, [r3, #20]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d009      	beq.n	8009b26 <tcp_bind+0x52>
 8009b12:	4b36      	ldr	r3, [pc, #216]	; (8009bec <tcp_bind+0x118>)
 8009b14:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009b18:	4937      	ldr	r1, [pc, #220]	; (8009bf8 <tcp_bind+0x124>)
 8009b1a:	4836      	ldr	r0, [pc, #216]	; (8009bf4 <tcp_bind+0x120>)
 8009b1c:	f00b f8ea 	bl	8014cf4 <iprintf>
 8009b20:	f06f 0305 	mvn.w	r3, #5
 8009b24:	e05c      	b.n	8009be0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8009b26:	88fb      	ldrh	r3, [r7, #6]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d109      	bne.n	8009b40 <tcp_bind+0x6c>
    port = tcp_new_port();
 8009b2c:	f000 f9f0 	bl	8009f10 <tcp_new_port>
 8009b30:	4603      	mov	r3, r0
 8009b32:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8009b34:	88fb      	ldrh	r3, [r7, #6]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d135      	bne.n	8009ba6 <tcp_bind+0xd2>
      return ERR_BUF;
 8009b3a:	f06f 0301 	mvn.w	r3, #1
 8009b3e:	e04f      	b.n	8009be0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8009b40:	2300      	movs	r3, #0
 8009b42:	61fb      	str	r3, [r7, #28]
 8009b44:	e02b      	b.n	8009b9e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009b46:	4a2d      	ldr	r2, [pc, #180]	; (8009bfc <tcp_bind+0x128>)
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	61bb      	str	r3, [r7, #24]
 8009b52:	e01e      	b.n	8009b92 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	8adb      	ldrh	r3, [r3, #22]
 8009b58:	88fa      	ldrh	r2, [r7, #6]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d116      	bne.n	8009b8c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8009b5e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d010      	beq.n	8009b86 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00c      	beq.n	8009b86 <tcp_bind+0xb2>
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d009      	beq.n	8009b86 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d005      	beq.n	8009b86 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d102      	bne.n	8009b8c <tcp_bind+0xb8>
              return ERR_USE;
 8009b86:	f06f 0307 	mvn.w	r3, #7
 8009b8a:	e029      	b.n	8009be0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	61bb      	str	r3, [r7, #24]
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1dd      	bne.n	8009b54 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	61fb      	str	r3, [r7, #28]
 8009b9e:	69fa      	ldr	r2, [r7, #28]
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	dbcf      	blt.n	8009b46 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00c      	beq.n	8009bc6 <tcp_bind+0xf2>
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d008      	beq.n	8009bc6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <tcp_bind+0xec>
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	e000      	b.n	8009bc2 <tcp_bind+0xee>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	88fa      	ldrh	r2, [r7, #6]
 8009bca:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009bcc:	4b0c      	ldr	r3, [pc, #48]	; (8009c00 <tcp_bind+0x12c>)
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	60da      	str	r2, [r3, #12]
 8009bd4:	4a0a      	ldr	r2, [pc, #40]	; (8009c00 <tcp_bind+0x12c>)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6013      	str	r3, [r2, #0]
 8009bda:	f005 fcc9 	bl	800f570 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3720      	adds	r7, #32
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	0801aa7c 	.word	0x0801aa7c
 8009bec:	08018274 	.word	0x08018274
 8009bf0:	08018408 	.word	0x08018408
 8009bf4:	080182b8 	.word	0x080182b8
 8009bf8:	08018420 	.word	0x08018420
 8009bfc:	0801aa54 	.word	0x0801aa54
 8009c00:	2000ae74 	.word	0x2000ae74

08009c04 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d106      	bne.n	8009c26 <tcp_accept_null+0x22>
 8009c18:	4b07      	ldr	r3, [pc, #28]	; (8009c38 <tcp_accept_null+0x34>)
 8009c1a:	f240 320f 	movw	r2, #783	; 0x30f
 8009c1e:	4907      	ldr	r1, [pc, #28]	; (8009c3c <tcp_accept_null+0x38>)
 8009c20:	4807      	ldr	r0, [pc, #28]	; (8009c40 <tcp_accept_null+0x3c>)
 8009c22:	f00b f867 	bl	8014cf4 <iprintf>

  tcp_abort(pcb);
 8009c26:	68b8      	ldr	r0, [r7, #8]
 8009c28:	f7ff ff48 	bl	8009abc <tcp_abort>

  return ERR_ABRT;
 8009c2c:	f06f 030c 	mvn.w	r3, #12
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	08018274 	.word	0x08018274
 8009c3c:	08018448 	.word	0x08018448
 8009c40:	080182b8 	.word	0x080182b8

08009c44 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009c50:	78fb      	ldrb	r3, [r7, #3]
 8009c52:	2200      	movs	r2, #0
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f806 	bl	8009c68 <tcp_listen_with_backlog_and_err>
 8009c5c:	4603      	mov	r3, r0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3708      	adds	r7, #8
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
	...

08009c68 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b088      	sub	sp, #32
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	460b      	mov	r3, r1
 8009c72:	607a      	str	r2, [r7, #4]
 8009c74:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8009c76:	2300      	movs	r3, #0
 8009c78:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d109      	bne.n	8009c94 <tcp_listen_with_backlog_and_err+0x2c>
 8009c80:	4b47      	ldr	r3, [pc, #284]	; (8009da0 <tcp_listen_with_backlog_and_err+0x138>)
 8009c82:	f240 3259 	movw	r2, #857	; 0x359
 8009c86:	4947      	ldr	r1, [pc, #284]	; (8009da4 <tcp_listen_with_backlog_and_err+0x13c>)
 8009c88:	4847      	ldr	r0, [pc, #284]	; (8009da8 <tcp_listen_with_backlog_and_err+0x140>)
 8009c8a:	f00b f833 	bl	8014cf4 <iprintf>
 8009c8e:	23f0      	movs	r3, #240	; 0xf0
 8009c90:	76fb      	strb	r3, [r7, #27]
 8009c92:	e079      	b.n	8009d88 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	7d1b      	ldrb	r3, [r3, #20]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d009      	beq.n	8009cb0 <tcp_listen_with_backlog_and_err+0x48>
 8009c9c:	4b40      	ldr	r3, [pc, #256]	; (8009da0 <tcp_listen_with_backlog_and_err+0x138>)
 8009c9e:	f240 325a 	movw	r2, #858	; 0x35a
 8009ca2:	4942      	ldr	r1, [pc, #264]	; (8009dac <tcp_listen_with_backlog_and_err+0x144>)
 8009ca4:	4840      	ldr	r0, [pc, #256]	; (8009da8 <tcp_listen_with_backlog_and_err+0x140>)
 8009ca6:	f00b f825 	bl	8014cf4 <iprintf>
 8009caa:	23f1      	movs	r3, #241	; 0xf1
 8009cac:	76fb      	strb	r3, [r7, #27]
 8009cae:	e06b      	b.n	8009d88 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	7d1b      	ldrb	r3, [r3, #20]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d104      	bne.n	8009cc2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009cbc:	23f7      	movs	r3, #247	; 0xf7
 8009cbe:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009cc0:	e062      	b.n	8009d88 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009cc2:	2002      	movs	r0, #2
 8009cc4:	f7fe fa7c 	bl	80081c0 <memp_malloc>
 8009cc8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d102      	bne.n	8009cd6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8009cd0:	23ff      	movs	r3, #255	; 0xff
 8009cd2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009cd4:	e058      	b.n	8009d88 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	691a      	ldr	r2, [r3, #16]
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	8ada      	ldrh	r2, [r3, #22]
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	7d5a      	ldrb	r2, [r3, #21]
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	7a5a      	ldrb	r2, [r3, #9]
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	7ada      	ldrb	r2, [r3, #11]
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	7a9a      	ldrb	r2, [r3, #10]
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	8adb      	ldrh	r3, [r3, #22]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d021      	beq.n	8009d66 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009d22:	4b23      	ldr	r3, [pc, #140]	; (8009db0 <tcp_listen_with_backlog_and_err+0x148>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d105      	bne.n	8009d38 <tcp_listen_with_backlog_and_err+0xd0>
 8009d2c:	4b20      	ldr	r3, [pc, #128]	; (8009db0 <tcp_listen_with_backlog_and_err+0x148>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	4a1f      	ldr	r2, [pc, #124]	; (8009db0 <tcp_listen_with_backlog_and_err+0x148>)
 8009d34:	6013      	str	r3, [r2, #0]
 8009d36:	e013      	b.n	8009d60 <tcp_listen_with_backlog_and_err+0xf8>
 8009d38:	4b1d      	ldr	r3, [pc, #116]	; (8009db0 <tcp_listen_with_backlog_and_err+0x148>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	617b      	str	r3, [r7, #20]
 8009d3e:	e00c      	b.n	8009d5a <tcp_listen_with_backlog_and_err+0xf2>
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d104      	bne.n	8009d54 <tcp_listen_with_backlog_and_err+0xec>
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	68da      	ldr	r2, [r3, #12]
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	60da      	str	r2, [r3, #12]
 8009d52:	e005      	b.n	8009d60 <tcp_listen_with_backlog_and_err+0xf8>
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	617b      	str	r3, [r7, #20]
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1ef      	bne.n	8009d40 <tcp_listen_with_backlog_and_err+0xd8>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f7ff fbc0 	bl	80094ec <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	4a11      	ldr	r2, [pc, #68]	; (8009db4 <tcp_listen_with_backlog_and_err+0x14c>)
 8009d70:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009d72:	4b11      	ldr	r3, [pc, #68]	; (8009db8 <tcp_listen_with_backlog_and_err+0x150>)
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	60da      	str	r2, [r3, #12]
 8009d7a:	4a0f      	ldr	r2, [pc, #60]	; (8009db8 <tcp_listen_with_backlog_and_err+0x150>)
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	6013      	str	r3, [r2, #0]
 8009d80:	f005 fbf6 	bl	800f570 <tcp_timer_needed>
  res = ERR_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d002      	beq.n	8009d94 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	7efa      	ldrb	r2, [r7, #27]
 8009d92:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8009d94:	69fb      	ldr	r3, [r7, #28]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3720      	adds	r7, #32
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	08018274 	.word	0x08018274
 8009da4:	08018468 	.word	0x08018468
 8009da8:	080182b8 	.word	0x080182b8
 8009dac:	08018498 	.word	0x08018498
 8009db0:	2000ae74 	.word	0x2000ae74
 8009db4:	08009c05 	.word	0x08009c05
 8009db8:	2000ae70 	.word	0x2000ae70

08009dbc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d106      	bne.n	8009dd8 <tcp_update_rcv_ann_wnd+0x1c>
 8009dca:	4b25      	ldr	r3, [pc, #148]	; (8009e60 <tcp_update_rcv_ann_wnd+0xa4>)
 8009dcc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009dd0:	4924      	ldr	r1, [pc, #144]	; (8009e64 <tcp_update_rcv_ann_wnd+0xa8>)
 8009dd2:	4825      	ldr	r0, [pc, #148]	; (8009e68 <tcp_update_rcv_ann_wnd+0xac>)
 8009dd4:	f00a ff8e 	bl	8014cf4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009de0:	4413      	add	r3, r2
 8009de2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009dec:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009df0:	bf28      	it	cs
 8009df2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009df6:	b292      	uxth	r2, r2
 8009df8:	4413      	add	r3, r2
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	db08      	blt.n	8009e14 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	e020      	b.n	8009e56 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	dd03      	ble.n	8009e2a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e28:	e014      	b.n	8009e54 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e3c:	d306      	bcc.n	8009e4c <tcp_update_rcv_ann_wnd+0x90>
 8009e3e:	4b08      	ldr	r3, [pc, #32]	; (8009e60 <tcp_update_rcv_ann_wnd+0xa4>)
 8009e40:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009e44:	4909      	ldr	r1, [pc, #36]	; (8009e6c <tcp_update_rcv_ann_wnd+0xb0>)
 8009e46:	4808      	ldr	r0, [pc, #32]	; (8009e68 <tcp_update_rcv_ann_wnd+0xac>)
 8009e48:	f00a ff54 	bl	8014cf4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009e54:	2300      	movs	r3, #0
  }
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	08018274 	.word	0x08018274
 8009e64:	080184d0 	.word	0x080184d0
 8009e68:	080182b8 	.word	0x080182b8
 8009e6c:	080184f4 	.word	0x080184f4

08009e70 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	460b      	mov	r3, r1
 8009e7a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d107      	bne.n	8009e92 <tcp_recved+0x22>
 8009e82:	4b1f      	ldr	r3, [pc, #124]	; (8009f00 <tcp_recved+0x90>)
 8009e84:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009e88:	491e      	ldr	r1, [pc, #120]	; (8009f04 <tcp_recved+0x94>)
 8009e8a:	481f      	ldr	r0, [pc, #124]	; (8009f08 <tcp_recved+0x98>)
 8009e8c:	f00a ff32 	bl	8014cf4 <iprintf>
 8009e90:	e032      	b.n	8009ef8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	7d1b      	ldrb	r3, [r3, #20]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d106      	bne.n	8009ea8 <tcp_recved+0x38>
 8009e9a:	4b19      	ldr	r3, [pc, #100]	; (8009f00 <tcp_recved+0x90>)
 8009e9c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009ea0:	491a      	ldr	r1, [pc, #104]	; (8009f0c <tcp_recved+0x9c>)
 8009ea2:	4819      	ldr	r0, [pc, #100]	; (8009f08 <tcp_recved+0x98>)
 8009ea4:	f00a ff26 	bl	8014cf4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009eac:	887b      	ldrh	r3, [r7, #2]
 8009eae:	4413      	add	r3, r2
 8009eb0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009eb2:	89fb      	ldrh	r3, [r7, #14]
 8009eb4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009eb8:	d804      	bhi.n	8009ec4 <tcp_recved+0x54>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ebe:	89fa      	ldrh	r2, [r7, #14]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d204      	bcs.n	8009ece <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009eca:	851a      	strh	r2, [r3, #40]	; 0x28
 8009ecc:	e002      	b.n	8009ed4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	89fa      	ldrh	r2, [r7, #14]
 8009ed2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f7ff ff71 	bl	8009dbc <tcp_update_rcv_ann_wnd>
 8009eda:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009ee2:	d309      	bcc.n	8009ef8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	8b5b      	ldrh	r3, [r3, #26]
 8009ee8:	f043 0302 	orr.w	r3, r3, #2
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f004 fbc6 	bl	800e684 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	08018274 	.word	0x08018274
 8009f04:	08018510 	.word	0x08018510
 8009f08:	080182b8 	.word	0x080182b8
 8009f0c:	08018528 	.word	0x08018528

08009f10 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8009f16:	2300      	movs	r3, #0
 8009f18:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8009f1a:	4b1e      	ldr	r3, [pc, #120]	; (8009f94 <tcp_new_port+0x84>)
 8009f1c:	881b      	ldrh	r3, [r3, #0]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	4b1c      	ldr	r3, [pc, #112]	; (8009f94 <tcp_new_port+0x84>)
 8009f24:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8009f26:	4b1b      	ldr	r3, [pc, #108]	; (8009f94 <tcp_new_port+0x84>)
 8009f28:	881b      	ldrh	r3, [r3, #0]
 8009f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d103      	bne.n	8009f3a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8009f32:	4b18      	ldr	r3, [pc, #96]	; (8009f94 <tcp_new_port+0x84>)
 8009f34:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009f38:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	71fb      	strb	r3, [r7, #7]
 8009f3e:	e01e      	b.n	8009f7e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009f40:	79fb      	ldrb	r3, [r7, #7]
 8009f42:	4a15      	ldr	r2, [pc, #84]	; (8009f98 <tcp_new_port+0x88>)
 8009f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	e011      	b.n	8009f72 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	8ada      	ldrh	r2, [r3, #22]
 8009f52:	4b10      	ldr	r3, [pc, #64]	; (8009f94 <tcp_new_port+0x84>)
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d108      	bne.n	8009f6c <tcp_new_port+0x5c>
        n++;
 8009f5a:	88bb      	ldrh	r3, [r7, #4]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009f60:	88bb      	ldrh	r3, [r7, #4]
 8009f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f66:	d3d8      	bcc.n	8009f1a <tcp_new_port+0xa>
          return 0;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	e00d      	b.n	8009f88 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	603b      	str	r3, [r7, #0]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1ea      	bne.n	8009f4e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009f78:	79fb      	ldrb	r3, [r7, #7]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	71fb      	strb	r3, [r7, #7]
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	2b03      	cmp	r3, #3
 8009f82:	d9dd      	bls.n	8009f40 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009f84:	4b03      	ldr	r3, [pc, #12]	; (8009f94 <tcp_new_port+0x84>)
 8009f86:	881b      	ldrh	r3, [r3, #0]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	20000020 	.word	0x20000020
 8009f98:	0801aa54 	.word	0x0801aa54

08009f9c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009f9c:	b5b0      	push	{r4, r5, r7, lr}
 8009f9e:	b090      	sub	sp, #64	; 0x40
 8009fa0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009fa8:	4b94      	ldr	r3, [pc, #592]	; (800a1fc <tcp_slowtmr+0x260>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	3301      	adds	r3, #1
 8009fae:	4a93      	ldr	r2, [pc, #588]	; (800a1fc <tcp_slowtmr+0x260>)
 8009fb0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009fb2:	4b93      	ldr	r3, [pc, #588]	; (800a200 <tcp_slowtmr+0x264>)
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	b2da      	uxtb	r2, r3
 8009fba:	4b91      	ldr	r3, [pc, #580]	; (800a200 <tcp_slowtmr+0x264>)
 8009fbc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8009fc2:	4b90      	ldr	r3, [pc, #576]	; (800a204 <tcp_slowtmr+0x268>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009fc8:	e29f      	b.n	800a50a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fcc:	7d1b      	ldrb	r3, [r3, #20]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d106      	bne.n	8009fe0 <tcp_slowtmr+0x44>
 8009fd2:	4b8d      	ldr	r3, [pc, #564]	; (800a208 <tcp_slowtmr+0x26c>)
 8009fd4:	f240 42be 	movw	r2, #1214	; 0x4be
 8009fd8:	498c      	ldr	r1, [pc, #560]	; (800a20c <tcp_slowtmr+0x270>)
 8009fda:	488d      	ldr	r0, [pc, #564]	; (800a210 <tcp_slowtmr+0x274>)
 8009fdc:	f00a fe8a 	bl	8014cf4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe2:	7d1b      	ldrb	r3, [r3, #20]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d106      	bne.n	8009ff6 <tcp_slowtmr+0x5a>
 8009fe8:	4b87      	ldr	r3, [pc, #540]	; (800a208 <tcp_slowtmr+0x26c>)
 8009fea:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009fee:	4989      	ldr	r1, [pc, #548]	; (800a214 <tcp_slowtmr+0x278>)
 8009ff0:	4887      	ldr	r0, [pc, #540]	; (800a210 <tcp_slowtmr+0x274>)
 8009ff2:	f00a fe7f 	bl	8014cf4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff8:	7d1b      	ldrb	r3, [r3, #20]
 8009ffa:	2b0a      	cmp	r3, #10
 8009ffc:	d106      	bne.n	800a00c <tcp_slowtmr+0x70>
 8009ffe:	4b82      	ldr	r3, [pc, #520]	; (800a208 <tcp_slowtmr+0x26c>)
 800a000:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a004:	4984      	ldr	r1, [pc, #528]	; (800a218 <tcp_slowtmr+0x27c>)
 800a006:	4882      	ldr	r0, [pc, #520]	; (800a210 <tcp_slowtmr+0x274>)
 800a008:	f00a fe74 	bl	8014cf4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00e:	7f9a      	ldrb	r2, [r3, #30]
 800a010:	4b7b      	ldr	r3, [pc, #492]	; (800a200 <tcp_slowtmr+0x264>)
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	429a      	cmp	r2, r3
 800a016:	d105      	bne.n	800a024 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a022:	e272      	b.n	800a50a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a024:	4b76      	ldr	r3, [pc, #472]	; (800a200 <tcp_slowtmr+0x264>)
 800a026:	781a      	ldrb	r2, [r3, #0]
 800a028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a02a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a02c:	2300      	movs	r3, #0
 800a02e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a032:	2300      	movs	r3, #0
 800a034:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03a:	7d1b      	ldrb	r3, [r3, #20]
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d10a      	bne.n	800a056 <tcp_slowtmr+0xba>
 800a040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a042:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a046:	2b05      	cmp	r3, #5
 800a048:	d905      	bls.n	800a056 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a04a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a04e:	3301      	adds	r3, #1
 800a050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a054:	e11e      	b.n	800a294 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a058:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a05c:	2b0b      	cmp	r3, #11
 800a05e:	d905      	bls.n	800a06c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a064:	3301      	adds	r3, #1
 800a066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a06a:	e113      	b.n	800a294 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a072:	2b00      	cmp	r3, #0
 800a074:	d075      	beq.n	800a162 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d006      	beq.n	800a08c <tcp_slowtmr+0xf0>
 800a07e:	4b62      	ldr	r3, [pc, #392]	; (800a208 <tcp_slowtmr+0x26c>)
 800a080:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a084:	4965      	ldr	r1, [pc, #404]	; (800a21c <tcp_slowtmr+0x280>)
 800a086:	4862      	ldr	r0, [pc, #392]	; (800a210 <tcp_slowtmr+0x274>)
 800a088:	f00a fe34 	bl	8014cf4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a090:	2b00      	cmp	r3, #0
 800a092:	d106      	bne.n	800a0a2 <tcp_slowtmr+0x106>
 800a094:	4b5c      	ldr	r3, [pc, #368]	; (800a208 <tcp_slowtmr+0x26c>)
 800a096:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a09a:	4961      	ldr	r1, [pc, #388]	; (800a220 <tcp_slowtmr+0x284>)
 800a09c:	485c      	ldr	r0, [pc, #368]	; (800a210 <tcp_slowtmr+0x274>)
 800a09e:	f00a fe29 	bl	8014cf4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a0a8:	2b0b      	cmp	r3, #11
 800a0aa:	d905      	bls.n	800a0b8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a0ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a0b6:	e0ed      	b.n	800a294 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	4a58      	ldr	r2, [pc, #352]	; (800a224 <tcp_slowtmr+0x288>)
 800a0c2:	5cd3      	ldrb	r3, [r2, r3]
 800a0c4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a0cc:	7c7a      	ldrb	r2, [r7, #17]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d907      	bls.n	800a0e2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a0d8:	3301      	adds	r3, #1
 800a0da:	b2da      	uxtb	r2, r3
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a0e8:	7c7a      	ldrb	r2, [r7, #17]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	f200 80d2 	bhi.w	800a294 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d108      	bne.n	800a110 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a0fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a100:	f005 f968 	bl	800f3d4 <tcp_zero_window_probe>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d014      	beq.n	800a134 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a10a:	2300      	movs	r3, #0
 800a10c:	623b      	str	r3, [r7, #32]
 800a10e:	e011      	b.n	800a134 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a112:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a116:	4619      	mov	r1, r3
 800a118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a11a:	f004 f82d 	bl	800e178 <tcp_split_unsent_seg>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d107      	bne.n	800a134 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a124:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a126:	f004 faad 	bl	800e684 <tcp_output>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a130:	2300      	movs	r3, #0
 800a132:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a134:	6a3b      	ldr	r3, [r7, #32]
 800a136:	2b00      	cmp	r3, #0
 800a138:	f000 80ac 	beq.w	800a294 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a146:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a14a:	2b06      	cmp	r3, #6
 800a14c:	f200 80a2 	bhi.w	800a294 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a152:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a156:	3301      	adds	r3, #1
 800a158:	b2da      	uxtb	r2, r3
 800a15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a160:	e098      	b.n	800a294 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a164:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a168:	2b00      	cmp	r3, #0
 800a16a:	db0f      	blt.n	800a18c <tcp_slowtmr+0x1f0>
 800a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a172:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a176:	4293      	cmp	r3, r2
 800a178:	d008      	beq.n	800a18c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a180:	b29b      	uxth	r3, r3
 800a182:	3301      	adds	r3, #1
 800a184:	b29b      	uxth	r3, r3
 800a186:	b21a      	sxth	r2, r3
 800a188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a194:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a198:	429a      	cmp	r2, r3
 800a19a:	db7b      	blt.n	800a294 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a19c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a19e:	f004 fd65 	bl	800ec6c <tcp_rexmit_rto_prepare>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d007      	beq.n	800a1b8 <tcp_slowtmr+0x21c>
 800a1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d171      	bne.n	800a294 <tcp_slowtmr+0x2f8>
 800a1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d06d      	beq.n	800a294 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ba:	7d1b      	ldrb	r3, [r3, #20]
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d03a      	beq.n	800a236 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1c6:	2b0c      	cmp	r3, #12
 800a1c8:	bf28      	it	cs
 800a1ca:	230c      	movcs	r3, #12
 800a1cc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a1d4:	10db      	asrs	r3, r3, #3
 800a1d6:	b21b      	sxth	r3, r3
 800a1d8:	461a      	mov	r2, r3
 800a1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a1e0:	4413      	add	r3, r2
 800a1e2:	7efa      	ldrb	r2, [r7, #27]
 800a1e4:	4910      	ldr	r1, [pc, #64]	; (800a228 <tcp_slowtmr+0x28c>)
 800a1e6:	5c8a      	ldrb	r2, [r1, r2]
 800a1e8:	4093      	lsls	r3, r2
 800a1ea:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	dc1a      	bgt.n	800a22c <tcp_slowtmr+0x290>
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	b21a      	sxth	r2, r3
 800a1fa:	e019      	b.n	800a230 <tcp_slowtmr+0x294>
 800a1fc:	2000ae6c 	.word	0x2000ae6c
 800a200:	200008aa 	.word	0x200008aa
 800a204:	2000ae68 	.word	0x2000ae68
 800a208:	08018274 	.word	0x08018274
 800a20c:	080185b8 	.word	0x080185b8
 800a210:	080182b8 	.word	0x080182b8
 800a214:	080185e4 	.word	0x080185e4
 800a218:	08018610 	.word	0x08018610
 800a21c:	08018640 	.word	0x08018640
 800a220:	08018674 	.word	0x08018674
 800a224:	0801aa4c 	.word	0x0801aa4c
 800a228:	0801aa3c 	.word	0x0801aa3c
 800a22c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a232:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a238:	2200      	movs	r2, #0
 800a23a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a244:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a248:	4293      	cmp	r3, r2
 800a24a:	bf28      	it	cs
 800a24c:	4613      	movcs	r3, r2
 800a24e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a250:	8a7b      	ldrh	r3, [r7, #18]
 800a252:	085b      	lsrs	r3, r3, #1
 800a254:	b29a      	uxth	r2, r3
 800a256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a258:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a264:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a266:	005b      	lsls	r3, r3, #1
 800a268:	b29b      	uxth	r3, r3
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d206      	bcs.n	800a27c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a270:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a272:	005b      	lsls	r3, r3, #1
 800a274:	b29a      	uxth	r2, r3
 800a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a278:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a282:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a288:	2200      	movs	r2, #0
 800a28a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a28e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a290:	f004 fd5c 	bl	800ed4c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a296:	7d1b      	ldrb	r3, [r3, #20]
 800a298:	2b06      	cmp	r3, #6
 800a29a:	d111      	bne.n	800a2c0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29e:	8b5b      	ldrh	r3, [r3, #26]
 800a2a0:	f003 0310 	and.w	r3, r3, #16
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00b      	beq.n	800a2c0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a2a8:	4b9d      	ldr	r3, [pc, #628]	; (800a520 <tcp_slowtmr+0x584>)
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ae:	6a1b      	ldr	r3, [r3, #32]
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	2b28      	cmp	r3, #40	; 0x28
 800a2b4:	d904      	bls.n	800a2c0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a2b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c2:	7a5b      	ldrb	r3, [r3, #9]
 800a2c4:	f003 0308 	and.w	r3, r3, #8
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d04c      	beq.n	800a366 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800a2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ce:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a2d0:	2b04      	cmp	r3, #4
 800a2d2:	d003      	beq.n	800a2dc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a2d8:	2b07      	cmp	r3, #7
 800a2da:	d144      	bne.n	800a366 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a2dc:	4b90      	ldr	r3, [pc, #576]	; (800a520 <tcp_slowtmr+0x584>)
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e2:	6a1b      	ldr	r3, [r3, #32]
 800a2e4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2ec:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800a2f0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800a2f4:	498b      	ldr	r1, [pc, #556]	; (800a524 <tcp_slowtmr+0x588>)
 800a2f6:	fba1 1303 	umull	r1, r3, r1, r3
 800a2fa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d90a      	bls.n	800a316 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a304:	3301      	adds	r3, #1
 800a306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a30a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a30e:	3301      	adds	r3, #1
 800a310:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a314:	e027      	b.n	800a366 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a316:	4b82      	ldr	r3, [pc, #520]	; (800a520 <tcp_slowtmr+0x584>)
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a322:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a328:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a32c:	4618      	mov	r0, r3
 800a32e:	4b7e      	ldr	r3, [pc, #504]	; (800a528 <tcp_slowtmr+0x58c>)
 800a330:	fb00 f303 	mul.w	r3, r0, r3
 800a334:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a336:	497b      	ldr	r1, [pc, #492]	; (800a524 <tcp_slowtmr+0x588>)
 800a338:	fba1 1303 	umull	r1, r3, r1, r3
 800a33c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a33e:	429a      	cmp	r2, r3
 800a340:	d911      	bls.n	800a366 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800a342:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a344:	f005 f806 	bl	800f354 <tcp_keepalive>
 800a348:	4603      	mov	r3, r0
 800a34a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a34e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a352:	2b00      	cmp	r3, #0
 800a354:	d107      	bne.n	800a366 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800a356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a358:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a35c:	3301      	adds	r3, #1
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a362:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d011      	beq.n	800a392 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a36e:	4b6c      	ldr	r3, [pc, #432]	; (800a520 <tcp_slowtmr+0x584>)
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	1ad2      	subs	r2, r2, r3
 800a378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a37e:	4619      	mov	r1, r3
 800a380:	460b      	mov	r3, r1
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	440b      	add	r3, r1
 800a386:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a388:	429a      	cmp	r2, r3
 800a38a:	d302      	bcc.n	800a392 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a38c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a38e:	f000 fec1 	bl	800b114 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a394:	7d1b      	ldrb	r3, [r3, #20]
 800a396:	2b03      	cmp	r3, #3
 800a398:	d10b      	bne.n	800a3b2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a39a:	4b61      	ldr	r3, [pc, #388]	; (800a520 <tcp_slowtmr+0x584>)
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	2b28      	cmp	r3, #40	; 0x28
 800a3a6:	d904      	bls.n	800a3b2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a3a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b4:	7d1b      	ldrb	r3, [r3, #20]
 800a3b6:	2b09      	cmp	r3, #9
 800a3b8:	d10b      	bne.n	800a3d2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a3ba:	4b59      	ldr	r3, [pc, #356]	; (800a520 <tcp_slowtmr+0x584>)
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c0:	6a1b      	ldr	r3, [r3, #32]
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	2bf0      	cmp	r3, #240	; 0xf0
 800a3c6:	d904      	bls.n	800a3d2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800a3c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a3d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d060      	beq.n	800a49c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3e0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a3e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3e4:	f000 fce2 	bl	800adac <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d010      	beq.n	800a410 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a3ee:	4b4f      	ldr	r3, [pc, #316]	; (800a52c <tcp_slowtmr+0x590>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d106      	bne.n	800a406 <tcp_slowtmr+0x46a>
 800a3f8:	4b4d      	ldr	r3, [pc, #308]	; (800a530 <tcp_slowtmr+0x594>)
 800a3fa:	f240 526d 	movw	r2, #1389	; 0x56d
 800a3fe:	494d      	ldr	r1, [pc, #308]	; (800a534 <tcp_slowtmr+0x598>)
 800a400:	484d      	ldr	r0, [pc, #308]	; (800a538 <tcp_slowtmr+0x59c>)
 800a402:	f00a fc77 	bl	8014cf4 <iprintf>
        prev->next = pcb->next;
 800a406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a408:	68da      	ldr	r2, [r3, #12]
 800a40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40c:	60da      	str	r2, [r3, #12]
 800a40e:	e00f      	b.n	800a430 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a410:	4b46      	ldr	r3, [pc, #280]	; (800a52c <tcp_slowtmr+0x590>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a416:	429a      	cmp	r2, r3
 800a418:	d006      	beq.n	800a428 <tcp_slowtmr+0x48c>
 800a41a:	4b45      	ldr	r3, [pc, #276]	; (800a530 <tcp_slowtmr+0x594>)
 800a41c:	f240 5271 	movw	r2, #1393	; 0x571
 800a420:	4946      	ldr	r1, [pc, #280]	; (800a53c <tcp_slowtmr+0x5a0>)
 800a422:	4845      	ldr	r0, [pc, #276]	; (800a538 <tcp_slowtmr+0x59c>)
 800a424:	f00a fc66 	bl	8014cf4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	4a3f      	ldr	r2, [pc, #252]	; (800a52c <tcp_slowtmr+0x590>)
 800a42e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a430:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a434:	2b00      	cmp	r3, #0
 800a436:	d013      	beq.n	800a460 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a440:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	3304      	adds	r3, #4
 800a446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a448:	8ad2      	ldrh	r2, [r2, #22]
 800a44a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a44c:	8b09      	ldrh	r1, [r1, #24]
 800a44e:	9102      	str	r1, [sp, #8]
 800a450:	9201      	str	r2, [sp, #4]
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	462b      	mov	r3, r5
 800a456:	4622      	mov	r2, r4
 800a458:	4601      	mov	r1, r0
 800a45a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a45c:	f004 fec6 	bl	800f1ec <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a468:	7d1b      	ldrb	r3, [r3, #20]
 800a46a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a476:	6838      	ldr	r0, [r7, #0]
 800a478:	f7ff f838 	bl	80094ec <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a47c:	4b30      	ldr	r3, [pc, #192]	; (800a540 <tcp_slowtmr+0x5a4>)
 800a47e:	2200      	movs	r2, #0
 800a480:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d004      	beq.n	800a492 <tcp_slowtmr+0x4f6>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f06f 010c 	mvn.w	r1, #12
 800a48e:	68b8      	ldr	r0, [r7, #8]
 800a490:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a492:	4b2b      	ldr	r3, [pc, #172]	; (800a540 <tcp_slowtmr+0x5a4>)
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d037      	beq.n	800a50a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800a49a:	e590      	b.n	8009fbe <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a8:	7f1b      	ldrb	r3, [r3, #28]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b4:	7f1a      	ldrb	r2, [r3, #28]
 800a4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b8:	7f5b      	ldrb	r3, [r3, #29]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d325      	bcc.n	800a50a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a4c4:	4b1e      	ldr	r3, [pc, #120]	; (800a540 <tcp_slowtmr+0x5a4>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00b      	beq.n	800a4ec <tcp_slowtmr+0x550>
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4dc:	6912      	ldr	r2, [r2, #16]
 800a4de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4e0:	4610      	mov	r0, r2
 800a4e2:	4798      	blx	r3
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a4ea:	e002      	b.n	800a4f2 <tcp_slowtmr+0x556>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a4f2:	4b13      	ldr	r3, [pc, #76]	; (800a540 <tcp_slowtmr+0x5a4>)
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d000      	beq.n	800a4fc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800a4fa:	e560      	b.n	8009fbe <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a4fc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a500:	2b00      	cmp	r3, #0
 800a502:	d102      	bne.n	800a50a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800a504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a506:	f004 f8bd 	bl	800e684 <tcp_output>
  while (pcb != NULL) {
 800a50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f47f ad5c 	bne.w	8009fca <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a512:	2300      	movs	r3, #0
 800a514:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a516:	4b0b      	ldr	r3, [pc, #44]	; (800a544 <tcp_slowtmr+0x5a8>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a51c:	e067      	b.n	800a5ee <tcp_slowtmr+0x652>
 800a51e:	bf00      	nop
 800a520:	2000ae6c 	.word	0x2000ae6c
 800a524:	10624dd3 	.word	0x10624dd3
 800a528:	000124f8 	.word	0x000124f8
 800a52c:	2000ae68 	.word	0x2000ae68
 800a530:	08018274 	.word	0x08018274
 800a534:	080186ac 	.word	0x080186ac
 800a538:	080182b8 	.word	0x080182b8
 800a53c:	080186d8 	.word	0x080186d8
 800a540:	2000ae64 	.word	0x2000ae64
 800a544:	2000ae78 	.word	0x2000ae78
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54a:	7d1b      	ldrb	r3, [r3, #20]
 800a54c:	2b0a      	cmp	r3, #10
 800a54e:	d006      	beq.n	800a55e <tcp_slowtmr+0x5c2>
 800a550:	4b2b      	ldr	r3, [pc, #172]	; (800a600 <tcp_slowtmr+0x664>)
 800a552:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a556:	492b      	ldr	r1, [pc, #172]	; (800a604 <tcp_slowtmr+0x668>)
 800a558:	482b      	ldr	r0, [pc, #172]	; (800a608 <tcp_slowtmr+0x66c>)
 800a55a:	f00a fbcb 	bl	8014cf4 <iprintf>
    pcb_remove = 0;
 800a55e:	2300      	movs	r3, #0
 800a560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a564:	4b29      	ldr	r3, [pc, #164]	; (800a60c <tcp_slowtmr+0x670>)
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56a:	6a1b      	ldr	r3, [r3, #32]
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	2bf0      	cmp	r3, #240	; 0xf0
 800a570:	d904      	bls.n	800a57c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a576:	3301      	adds	r3, #1
 800a578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a57c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a580:	2b00      	cmp	r3, #0
 800a582:	d02f      	beq.n	800a5e4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a584:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a586:	f000 fc11 	bl	800adac <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d010      	beq.n	800a5b2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a590:	4b1f      	ldr	r3, [pc, #124]	; (800a610 <tcp_slowtmr+0x674>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a596:	429a      	cmp	r2, r3
 800a598:	d106      	bne.n	800a5a8 <tcp_slowtmr+0x60c>
 800a59a:	4b19      	ldr	r3, [pc, #100]	; (800a600 <tcp_slowtmr+0x664>)
 800a59c:	f240 52af 	movw	r2, #1455	; 0x5af
 800a5a0:	491c      	ldr	r1, [pc, #112]	; (800a614 <tcp_slowtmr+0x678>)
 800a5a2:	4819      	ldr	r0, [pc, #100]	; (800a608 <tcp_slowtmr+0x66c>)
 800a5a4:	f00a fba6 	bl	8014cf4 <iprintf>
        prev->next = pcb->next;
 800a5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5aa:	68da      	ldr	r2, [r3, #12]
 800a5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ae:	60da      	str	r2, [r3, #12]
 800a5b0:	e00f      	b.n	800a5d2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a5b2:	4b17      	ldr	r3, [pc, #92]	; (800a610 <tcp_slowtmr+0x674>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d006      	beq.n	800a5ca <tcp_slowtmr+0x62e>
 800a5bc:	4b10      	ldr	r3, [pc, #64]	; (800a600 <tcp_slowtmr+0x664>)
 800a5be:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a5c2:	4915      	ldr	r1, [pc, #84]	; (800a618 <tcp_slowtmr+0x67c>)
 800a5c4:	4810      	ldr	r0, [pc, #64]	; (800a608 <tcp_slowtmr+0x66c>)
 800a5c6:	f00a fb95 	bl	8014cf4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	4a10      	ldr	r2, [pc, #64]	; (800a610 <tcp_slowtmr+0x674>)
 800a5d0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a5dc:	69f8      	ldr	r0, [r7, #28]
 800a5de:	f7fe ff85 	bl	80094ec <tcp_free>
 800a5e2:	e004      	b.n	800a5ee <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1a9      	bne.n	800a548 <tcp_slowtmr+0x5ac>
    }
  }
}
 800a5f4:	bf00      	nop
 800a5f6:	bf00      	nop
 800a5f8:	3730      	adds	r7, #48	; 0x30
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bdb0      	pop	{r4, r5, r7, pc}
 800a5fe:	bf00      	nop
 800a600:	08018274 	.word	0x08018274
 800a604:	08018704 	.word	0x08018704
 800a608:	080182b8 	.word	0x080182b8
 800a60c:	2000ae6c 	.word	0x2000ae6c
 800a610:	2000ae78 	.word	0x2000ae78
 800a614:	08018734 	.word	0x08018734
 800a618:	0801875c 	.word	0x0801875c

0800a61c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a622:	4b2d      	ldr	r3, [pc, #180]	; (800a6d8 <tcp_fasttmr+0xbc>)
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	3301      	adds	r3, #1
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	4b2b      	ldr	r3, [pc, #172]	; (800a6d8 <tcp_fasttmr+0xbc>)
 800a62c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a62e:	4b2b      	ldr	r3, [pc, #172]	; (800a6dc <tcp_fasttmr+0xc0>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a634:	e048      	b.n	800a6c8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	7f9a      	ldrb	r2, [r3, #30]
 800a63a:	4b27      	ldr	r3, [pc, #156]	; (800a6d8 <tcp_fasttmr+0xbc>)
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d03f      	beq.n	800a6c2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a642:	4b25      	ldr	r3, [pc, #148]	; (800a6d8 <tcp_fasttmr+0xbc>)
 800a644:	781a      	ldrb	r2, [r3, #0]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	8b5b      	ldrh	r3, [r3, #26]
 800a64e:	f003 0301 	and.w	r3, r3, #1
 800a652:	2b00      	cmp	r3, #0
 800a654:	d010      	beq.n	800a678 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	8b5b      	ldrh	r3, [r3, #26]
 800a65a:	f043 0302 	orr.w	r3, r3, #2
 800a65e:	b29a      	uxth	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f004 f80d 	bl	800e684 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	8b5b      	ldrh	r3, [r3, #26]
 800a66e:	f023 0303 	bic.w	r3, r3, #3
 800a672:	b29a      	uxth	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	8b5b      	ldrh	r3, [r3, #26]
 800a67c:	f003 0308 	and.w	r3, r3, #8
 800a680:	2b00      	cmp	r3, #0
 800a682:	d009      	beq.n	800a698 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	8b5b      	ldrh	r3, [r3, #26]
 800a688:	f023 0308 	bic.w	r3, r3, #8
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7ff f8be 	bl	8009814 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00a      	beq.n	800a6bc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a6a6:	4b0e      	ldr	r3, [pc, #56]	; (800a6e0 <tcp_fasttmr+0xc4>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 f819 	bl	800a6e4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a6b2:	4b0b      	ldr	r3, [pc, #44]	; (800a6e0 <tcp_fasttmr+0xc4>)
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d000      	beq.n	800a6bc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a6ba:	e7b8      	b.n	800a62e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	607b      	str	r3, [r7, #4]
 800a6c0:	e002      	b.n	800a6c8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1b3      	bne.n	800a636 <tcp_fasttmr+0x1a>
    }
  }
}
 800a6ce:	bf00      	nop
 800a6d0:	bf00      	nop
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	200008aa 	.word	0x200008aa
 800a6dc:	2000ae68 	.word	0x2000ae68
 800a6e0:	2000ae64 	.word	0x2000ae64

0800a6e4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a6e4:	b590      	push	{r4, r7, lr}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d109      	bne.n	800a706 <tcp_process_refused_data+0x22>
 800a6f2:	4b37      	ldr	r3, [pc, #220]	; (800a7d0 <tcp_process_refused_data+0xec>)
 800a6f4:	f240 6209 	movw	r2, #1545	; 0x609
 800a6f8:	4936      	ldr	r1, [pc, #216]	; (800a7d4 <tcp_process_refused_data+0xf0>)
 800a6fa:	4837      	ldr	r0, [pc, #220]	; (800a7d8 <tcp_process_refused_data+0xf4>)
 800a6fc:	f00a fafa 	bl	8014cf4 <iprintf>
 800a700:	f06f 030f 	mvn.w	r3, #15
 800a704:	e060      	b.n	800a7c8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a70a:	7b5b      	ldrb	r3, [r3, #13]
 800a70c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a712:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00b      	beq.n	800a73c <tcp_process_refused_data+0x58>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6918      	ldr	r0, [r3, #16]
 800a72e:	2300      	movs	r3, #0
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	6879      	ldr	r1, [r7, #4]
 800a734:	47a0      	blx	r4
 800a736:	4603      	mov	r3, r0
 800a738:	73fb      	strb	r3, [r7, #15]
 800a73a:	e007      	b.n	800a74c <tcp_process_refused_data+0x68>
 800a73c:	2300      	movs	r3, #0
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	6879      	ldr	r1, [r7, #4]
 800a742:	2000      	movs	r0, #0
 800a744:	f000 f8c2 	bl	800a8cc <tcp_recv_null>
 800a748:	4603      	mov	r3, r0
 800a74a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a74c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d12a      	bne.n	800a7aa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	f003 0320 	and.w	r3, r3, #32
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d033      	beq.n	800a7c6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a762:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a766:	d005      	beq.n	800a774 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a76c:	3301      	adds	r3, #1
 800a76e:	b29a      	uxth	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00b      	beq.n	800a796 <tcp_process_refused_data+0xb2>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6918      	ldr	r0, [r3, #16]
 800a788:	2300      	movs	r3, #0
 800a78a:	2200      	movs	r2, #0
 800a78c:	6879      	ldr	r1, [r7, #4]
 800a78e:	47a0      	blx	r4
 800a790:	4603      	mov	r3, r0
 800a792:	73fb      	strb	r3, [r7, #15]
 800a794:	e001      	b.n	800a79a <tcp_process_refused_data+0xb6>
 800a796:	2300      	movs	r3, #0
 800a798:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a79a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a79e:	f113 0f0d 	cmn.w	r3, #13
 800a7a2:	d110      	bne.n	800a7c6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a7a4:	f06f 030c 	mvn.w	r3, #12
 800a7a8:	e00e      	b.n	800a7c8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a7aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7ae:	f113 0f0d 	cmn.w	r3, #13
 800a7b2:	d102      	bne.n	800a7ba <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a7b4:	f06f 030c 	mvn.w	r3, #12
 800a7b8:	e006      	b.n	800a7c8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a7c0:	f06f 0304 	mvn.w	r3, #4
 800a7c4:	e000      	b.n	800a7c8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd90      	pop	{r4, r7, pc}
 800a7d0:	08018274 	.word	0x08018274
 800a7d4:	08018784 	.word	0x08018784
 800a7d8:	080182b8 	.word	0x080182b8

0800a7dc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a7e4:	e007      	b.n	800a7f6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f80a 	bl	800a806 <tcp_seg_free>
    seg = next;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1f4      	bne.n	800a7e6 <tcp_segs_free+0xa>
  }
}
 800a7fc:	bf00      	nop
 800a7fe:	bf00      	nop
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b082      	sub	sp, #8
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00c      	beq.n	800a82e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d004      	beq.n	800a826 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	4618      	mov	r0, r3
 800a822:	f7fe fbb3 	bl	8008f8c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a826:	6879      	ldr	r1, [r7, #4]
 800a828:	2003      	movs	r0, #3
 800a82a:	f7fd fd39 	bl	80082a0 <memp_free>
  }
}
 800a82e:	bf00      	nop
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
	...

0800a838 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	460b      	mov	r3, r1
 800a842:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d107      	bne.n	800a85a <tcp_setprio+0x22>
 800a84a:	4b07      	ldr	r3, [pc, #28]	; (800a868 <tcp_setprio+0x30>)
 800a84c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800a850:	4906      	ldr	r1, [pc, #24]	; (800a86c <tcp_setprio+0x34>)
 800a852:	4807      	ldr	r0, [pc, #28]	; (800a870 <tcp_setprio+0x38>)
 800a854:	f00a fa4e 	bl	8014cf4 <iprintf>
 800a858:	e002      	b.n	800a860 <tcp_setprio+0x28>

  pcb->prio = prio;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	78fa      	ldrb	r2, [r7, #3]
 800a85e:	755a      	strb	r2, [r3, #21]
}
 800a860:	3708      	adds	r7, #8
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	08018274 	.word	0x08018274
 800a86c:	080187ac 	.word	0x080187ac
 800a870:	080182b8 	.word	0x080182b8

0800a874 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d106      	bne.n	800a890 <tcp_seg_copy+0x1c>
 800a882:	4b0f      	ldr	r3, [pc, #60]	; (800a8c0 <tcp_seg_copy+0x4c>)
 800a884:	f240 6282 	movw	r2, #1666	; 0x682
 800a888:	490e      	ldr	r1, [pc, #56]	; (800a8c4 <tcp_seg_copy+0x50>)
 800a88a:	480f      	ldr	r0, [pc, #60]	; (800a8c8 <tcp_seg_copy+0x54>)
 800a88c:	f00a fa32 	bl	8014cf4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a890:	2003      	movs	r0, #3
 800a892:	f7fd fc95 	bl	80081c0 <memp_malloc>
 800a896:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d101      	bne.n	800a8a2 <tcp_seg_copy+0x2e>
    return NULL;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e00a      	b.n	800a8b8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a8a2:	2210      	movs	r2, #16
 800a8a4:	6879      	ldr	r1, [r7, #4]
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f00a fc9d 	bl	80151e6 <memcpy>
  pbuf_ref(cseg->p);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fe fc0b 	bl	80090cc <pbuf_ref>
  return cseg;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	08018274 	.word	0x08018274
 800a8c4:	080187c8 	.word	0x080187c8
 800a8c8:	080182b8 	.word	0x080182b8

0800a8cc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
 800a8d8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d109      	bne.n	800a8f4 <tcp_recv_null+0x28>
 800a8e0:	4b12      	ldr	r3, [pc, #72]	; (800a92c <tcp_recv_null+0x60>)
 800a8e2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a8e6:	4912      	ldr	r1, [pc, #72]	; (800a930 <tcp_recv_null+0x64>)
 800a8e8:	4812      	ldr	r0, [pc, #72]	; (800a934 <tcp_recv_null+0x68>)
 800a8ea:	f00a fa03 	bl	8014cf4 <iprintf>
 800a8ee:	f06f 030f 	mvn.w	r3, #15
 800a8f2:	e016      	b.n	800a922 <tcp_recv_null+0x56>

  if (p != NULL) {
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d009      	beq.n	800a90e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	891b      	ldrh	r3, [r3, #8]
 800a8fe:	4619      	mov	r1, r3
 800a900:	68b8      	ldr	r0, [r7, #8]
 800a902:	f7ff fab5 	bl	8009e70 <tcp_recved>
    pbuf_free(p);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7fe fb40 	bl	8008f8c <pbuf_free>
 800a90c:	e008      	b.n	800a920 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a90e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d104      	bne.n	800a920 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a916:	68b8      	ldr	r0, [r7, #8]
 800a918:	f7fe ffe6 	bl	80098e8 <tcp_close>
 800a91c:	4603      	mov	r3, r0
 800a91e:	e000      	b.n	800a922 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	08018274 	.word	0x08018274
 800a930:	080187e4 	.word	0x080187e4
 800a934:	080182b8 	.word	0x080182b8

0800a938 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b086      	sub	sp, #24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	4603      	mov	r3, r0
 800a940:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a946:	2b00      	cmp	r3, #0
 800a948:	db01      	blt.n	800a94e <tcp_kill_prio+0x16>
 800a94a:	79fb      	ldrb	r3, [r7, #7]
 800a94c:	e000      	b.n	800a950 <tcp_kill_prio+0x18>
 800a94e:	237f      	movs	r3, #127	; 0x7f
 800a950:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a952:	7afb      	ldrb	r3, [r7, #11]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d034      	beq.n	800a9c2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a958:	7afb      	ldrb	r3, [r7, #11]
 800a95a:	3b01      	subs	r3, #1
 800a95c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a962:	2300      	movs	r3, #0
 800a964:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a966:	4b19      	ldr	r3, [pc, #100]	; (800a9cc <tcp_kill_prio+0x94>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	617b      	str	r3, [r7, #20]
 800a96c:	e01f      	b.n	800a9ae <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	7d5b      	ldrb	r3, [r3, #21]
 800a972:	7afa      	ldrb	r2, [r7, #11]
 800a974:	429a      	cmp	r2, r3
 800a976:	d80c      	bhi.n	800a992 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a97c:	7afa      	ldrb	r2, [r7, #11]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d112      	bne.n	800a9a8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a982:	4b13      	ldr	r3, [pc, #76]	; (800a9d0 <tcp_kill_prio+0x98>)
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	1ad3      	subs	r3, r2, r3
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d80a      	bhi.n	800a9a8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a992:	4b0f      	ldr	r3, [pc, #60]	; (800a9d0 <tcp_kill_prio+0x98>)
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	1ad3      	subs	r3, r2, r3
 800a99c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	7d5b      	ldrb	r3, [r3, #21]
 800a9a6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	617b      	str	r3, [r7, #20]
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d1dc      	bne.n	800a96e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d004      	beq.n	800a9c4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a9ba:	6938      	ldr	r0, [r7, #16]
 800a9bc:	f7ff f87e 	bl	8009abc <tcp_abort>
 800a9c0:	e000      	b.n	800a9c4 <tcp_kill_prio+0x8c>
    return;
 800a9c2:	bf00      	nop
  }
}
 800a9c4:	3718      	adds	r7, #24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	2000ae68 	.word	0x2000ae68
 800a9d0:	2000ae6c 	.word	0x2000ae6c

0800a9d4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b086      	sub	sp, #24
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	4603      	mov	r3, r0
 800a9dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a9de:	79fb      	ldrb	r3, [r7, #7]
 800a9e0:	2b08      	cmp	r3, #8
 800a9e2:	d009      	beq.n	800a9f8 <tcp_kill_state+0x24>
 800a9e4:	79fb      	ldrb	r3, [r7, #7]
 800a9e6:	2b09      	cmp	r3, #9
 800a9e8:	d006      	beq.n	800a9f8 <tcp_kill_state+0x24>
 800a9ea:	4b1a      	ldr	r3, [pc, #104]	; (800aa54 <tcp_kill_state+0x80>)
 800a9ec:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a9f0:	4919      	ldr	r1, [pc, #100]	; (800aa58 <tcp_kill_state+0x84>)
 800a9f2:	481a      	ldr	r0, [pc, #104]	; (800aa5c <tcp_kill_state+0x88>)
 800a9f4:	f00a f97e 	bl	8014cf4 <iprintf>

  inactivity = 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa00:	4b17      	ldr	r3, [pc, #92]	; (800aa60 <tcp_kill_state+0x8c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	617b      	str	r3, [r7, #20]
 800aa06:	e017      	b.n	800aa38 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	7d1b      	ldrb	r3, [r3, #20]
 800aa0c:	79fa      	ldrb	r2, [r7, #7]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d10f      	bne.n	800aa32 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aa12:	4b14      	ldr	r3, [pc, #80]	; (800aa64 <tcp_kill_state+0x90>)
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d807      	bhi.n	800aa32 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800aa22:	4b10      	ldr	r3, [pc, #64]	; (800aa64 <tcp_kill_state+0x90>)
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	6a1b      	ldr	r3, [r3, #32]
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	617b      	str	r3, [r7, #20]
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1e4      	bne.n	800aa08 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d003      	beq.n	800aa4c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800aa44:	2100      	movs	r1, #0
 800aa46:	6938      	ldr	r0, [r7, #16]
 800aa48:	f7fe ff7a 	bl	8009940 <tcp_abandon>
  }
}
 800aa4c:	bf00      	nop
 800aa4e:	3718      	adds	r7, #24
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	08018274 	.word	0x08018274
 800aa58:	08018800 	.word	0x08018800
 800aa5c:	080182b8 	.word	0x080182b8
 800aa60:	2000ae68 	.word	0x2000ae68
 800aa64:	2000ae6c 	.word	0x2000ae6c

0800aa68 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800aa72:	2300      	movs	r3, #0
 800aa74:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa76:	4b12      	ldr	r3, [pc, #72]	; (800aac0 <tcp_kill_timewait+0x58>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	60fb      	str	r3, [r7, #12]
 800aa7c:	e012      	b.n	800aaa4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aa7e:	4b11      	ldr	r3, [pc, #68]	; (800aac4 <tcp_kill_timewait+0x5c>)
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	1ad3      	subs	r3, r2, r3
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d807      	bhi.n	800aa9e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800aa8e:	4b0d      	ldr	r3, [pc, #52]	; (800aac4 <tcp_kill_timewait+0x5c>)
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6a1b      	ldr	r3, [r3, #32]
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	60fb      	str	r3, [r7, #12]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1e9      	bne.n	800aa7e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800aab0:	68b8      	ldr	r0, [r7, #8]
 800aab2:	f7ff f803 	bl	8009abc <tcp_abort>
  }
}
 800aab6:	bf00      	nop
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	2000ae78 	.word	0x2000ae78
 800aac4:	2000ae6c 	.word	0x2000ae6c

0800aac8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800aace:	4b10      	ldr	r3, [pc, #64]	; (800ab10 <tcp_handle_closepend+0x48>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800aad4:	e014      	b.n	800ab00 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	8b5b      	ldrh	r3, [r3, #26]
 800aae0:	f003 0308 	and.w	r3, r3, #8
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d009      	beq.n	800aafc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	8b5b      	ldrh	r3, [r3, #26]
 800aaec:	f023 0308 	bic.w	r3, r3, #8
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f7fe fe8c 	bl	8009814 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1e7      	bne.n	800aad6 <tcp_handle_closepend+0xe>
  }
}
 800ab06:	bf00      	nop
 800ab08:	bf00      	nop
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	2000ae68 	.word	0x2000ae68

0800ab14 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab1e:	2001      	movs	r0, #1
 800ab20:	f7fd fb4e 	bl	80081c0 <memp_malloc>
 800ab24:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d126      	bne.n	800ab7a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ab2c:	f7ff ffcc 	bl	800aac8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ab30:	f7ff ff9a 	bl	800aa68 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab34:	2001      	movs	r0, #1
 800ab36:	f7fd fb43 	bl	80081c0 <memp_malloc>
 800ab3a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d11b      	bne.n	800ab7a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ab42:	2009      	movs	r0, #9
 800ab44:	f7ff ff46 	bl	800a9d4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab48:	2001      	movs	r0, #1
 800ab4a:	f7fd fb39 	bl	80081c0 <memp_malloc>
 800ab4e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d111      	bne.n	800ab7a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ab56:	2008      	movs	r0, #8
 800ab58:	f7ff ff3c 	bl	800a9d4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab5c:	2001      	movs	r0, #1
 800ab5e:	f7fd fb2f 	bl	80081c0 <memp_malloc>
 800ab62:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d107      	bne.n	800ab7a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ab6a:	79fb      	ldrb	r3, [r7, #7]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7ff fee3 	bl	800a938 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab72:	2001      	movs	r0, #1
 800ab74:	f7fd fb24 	bl	80081c0 <memp_malloc>
 800ab78:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d03f      	beq.n	800ac00 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ab80:	229c      	movs	r2, #156	; 0x9c
 800ab82:	2100      	movs	r1, #0
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f00a fa0b 	bl	8014fa0 <memset>
    pcb->prio = prio;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	79fa      	ldrb	r2, [r7, #7]
 800ab8e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ab96:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800aba0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	22ff      	movs	r2, #255	; 0xff
 800abae:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800abb6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2206      	movs	r2, #6
 800abbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2206      	movs	r2, #6
 800abc4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abcc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2201      	movs	r2, #1
 800abd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800abd6:	4b0d      	ldr	r3, [pc, #52]	; (800ac0c <tcp_alloc+0xf8>)
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800abde:	4b0c      	ldr	r3, [pc, #48]	; (800ac10 <tcp_alloc+0xfc>)
 800abe0:	781a      	ldrb	r2, [r3, #0]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800abec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	4a08      	ldr	r2, [pc, #32]	; (800ac14 <tcp_alloc+0x100>)
 800abf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	4a07      	ldr	r2, [pc, #28]	; (800ac18 <tcp_alloc+0x104>)
 800abfc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ac00:	68fb      	ldr	r3, [r7, #12]
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	2000ae6c 	.word	0x2000ae6c
 800ac10:	200008aa 	.word	0x200008aa
 800ac14:	0800a8cd 	.word	0x0800a8cd
 800ac18:	006ddd00 	.word	0x006ddd00

0800ac1c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800ac20:	2040      	movs	r0, #64	; 0x40
 800ac22:	f7ff ff77 	bl	800ab14 <tcp_alloc>
 800ac26:	4603      	mov	r3, r0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d002      	beq.n	800ac42 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	683a      	ldr	r2, [r7, #0]
 800ac40:	611a      	str	r2, [r3, #16]
  }
}
 800ac42:	bf00      	nop
 800ac44:	370c      	adds	r7, #12
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
	...

0800ac50 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00e      	beq.n	800ac7e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	7d1b      	ldrb	r3, [r3, #20]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d106      	bne.n	800ac76 <tcp_recv+0x26>
 800ac68:	4b07      	ldr	r3, [pc, #28]	; (800ac88 <tcp_recv+0x38>)
 800ac6a:	f240 72df 	movw	r2, #2015	; 0x7df
 800ac6e:	4907      	ldr	r1, [pc, #28]	; (800ac8c <tcp_recv+0x3c>)
 800ac70:	4807      	ldr	r0, [pc, #28]	; (800ac90 <tcp_recv+0x40>)
 800ac72:	f00a f83f 	bl	8014cf4 <iprintf>
    pcb->recv = recv;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	683a      	ldr	r2, [r7, #0]
 800ac7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800ac7e:	bf00      	nop
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	08018274 	.word	0x08018274
 800ac8c:	08018810 	.word	0x08018810
 800ac90:	080182b8 	.word	0x080182b8

0800ac94 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00e      	beq.n	800acc2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	7d1b      	ldrb	r3, [r3, #20]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d106      	bne.n	800acba <tcp_sent+0x26>
 800acac:	4b07      	ldr	r3, [pc, #28]	; (800accc <tcp_sent+0x38>)
 800acae:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800acb2:	4907      	ldr	r1, [pc, #28]	; (800acd0 <tcp_sent+0x3c>)
 800acb4:	4807      	ldr	r0, [pc, #28]	; (800acd4 <tcp_sent+0x40>)
 800acb6:	f00a f81d 	bl	8014cf4 <iprintf>
    pcb->sent = sent;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	683a      	ldr	r2, [r7, #0]
 800acbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800acc2:	bf00      	nop
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	08018274 	.word	0x08018274
 800acd0:	08018838 	.word	0x08018838
 800acd4:	080182b8 	.word	0x080182b8

0800acd8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00e      	beq.n	800ad06 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	7d1b      	ldrb	r3, [r3, #20]
 800acec:	2b01      	cmp	r3, #1
 800acee:	d106      	bne.n	800acfe <tcp_err+0x26>
 800acf0:	4b07      	ldr	r3, [pc, #28]	; (800ad10 <tcp_err+0x38>)
 800acf2:	f640 020d 	movw	r2, #2061	; 0x80d
 800acf6:	4907      	ldr	r1, [pc, #28]	; (800ad14 <tcp_err+0x3c>)
 800acf8:	4807      	ldr	r0, [pc, #28]	; (800ad18 <tcp_err+0x40>)
 800acfa:	f009 fffb 	bl	8014cf4 <iprintf>
    pcb->errf = err;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800ad06:	bf00      	nop
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	08018274 	.word	0x08018274
 800ad14:	08018860 	.word	0x08018860
 800ad18:	080182b8 	.word	0x080182b8

0800ad1c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d008      	beq.n	800ad3e <tcp_accept+0x22>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	7d1b      	ldrb	r3, [r3, #20]
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d104      	bne.n	800ad3e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	683a      	ldr	r2, [r7, #0]
 800ad3c:	619a      	str	r2, [r3, #24]
  }
}
 800ad3e:	bf00      	nop
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
	...

0800ad4c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	4613      	mov	r3, r2
 800ad58:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d107      	bne.n	800ad70 <tcp_poll+0x24>
 800ad60:	4b0e      	ldr	r3, [pc, #56]	; (800ad9c <tcp_poll+0x50>)
 800ad62:	f640 023d 	movw	r2, #2109	; 0x83d
 800ad66:	490e      	ldr	r1, [pc, #56]	; (800ada0 <tcp_poll+0x54>)
 800ad68:	480e      	ldr	r0, [pc, #56]	; (800ada4 <tcp_poll+0x58>)
 800ad6a:	f009 ffc3 	bl	8014cf4 <iprintf>
 800ad6e:	e011      	b.n	800ad94 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	7d1b      	ldrb	r3, [r3, #20]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d106      	bne.n	800ad86 <tcp_poll+0x3a>
 800ad78:	4b08      	ldr	r3, [pc, #32]	; (800ad9c <tcp_poll+0x50>)
 800ad7a:	f640 023e 	movw	r2, #2110	; 0x83e
 800ad7e:	490a      	ldr	r1, [pc, #40]	; (800ada8 <tcp_poll+0x5c>)
 800ad80:	4808      	ldr	r0, [pc, #32]	; (800ada4 <tcp_poll+0x58>)
 800ad82:	f009 ffb7 	bl	8014cf4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	79fa      	ldrb	r2, [r7, #7]
 800ad92:	775a      	strb	r2, [r3, #29]
}
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	08018274 	.word	0x08018274
 800ada0:	08018888 	.word	0x08018888
 800ada4:	080182b8 	.word	0x080182b8
 800ada8:	080188a0 	.word	0x080188a0

0800adac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d107      	bne.n	800adca <tcp_pcb_purge+0x1e>
 800adba:	4b21      	ldr	r3, [pc, #132]	; (800ae40 <tcp_pcb_purge+0x94>)
 800adbc:	f640 0251 	movw	r2, #2129	; 0x851
 800adc0:	4920      	ldr	r1, [pc, #128]	; (800ae44 <tcp_pcb_purge+0x98>)
 800adc2:	4821      	ldr	r0, [pc, #132]	; (800ae48 <tcp_pcb_purge+0x9c>)
 800adc4:	f009 ff96 	bl	8014cf4 <iprintf>
 800adc8:	e037      	b.n	800ae3a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	7d1b      	ldrb	r3, [r3, #20]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d033      	beq.n	800ae3a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800add6:	2b0a      	cmp	r3, #10
 800add8:	d02f      	beq.n	800ae3a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d02b      	beq.n	800ae3a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d007      	beq.n	800adfa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fe f8cc 	bl	8008f8c <pbuf_free>
      pcb->refused_data = NULL;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d002      	beq.n	800ae08 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f986 	bl	800b114 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae0e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7ff fce1 	bl	800a7dc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7ff fcdc 	bl	800a7dc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	66da      	str	r2, [r3, #108]	; 0x6c
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	08018274 	.word	0x08018274
 800ae44:	080188c0 	.word	0x080188c0
 800ae48:	080182b8 	.word	0x080182b8

0800ae4c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d106      	bne.n	800ae6a <tcp_pcb_remove+0x1e>
 800ae5c:	4b3e      	ldr	r3, [pc, #248]	; (800af58 <tcp_pcb_remove+0x10c>)
 800ae5e:	f640 0283 	movw	r2, #2179	; 0x883
 800ae62:	493e      	ldr	r1, [pc, #248]	; (800af5c <tcp_pcb_remove+0x110>)
 800ae64:	483e      	ldr	r0, [pc, #248]	; (800af60 <tcp_pcb_remove+0x114>)
 800ae66:	f009 ff45 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d106      	bne.n	800ae7e <tcp_pcb_remove+0x32>
 800ae70:	4b39      	ldr	r3, [pc, #228]	; (800af58 <tcp_pcb_remove+0x10c>)
 800ae72:	f640 0284 	movw	r2, #2180	; 0x884
 800ae76:	493b      	ldr	r1, [pc, #236]	; (800af64 <tcp_pcb_remove+0x118>)
 800ae78:	4839      	ldr	r0, [pc, #228]	; (800af60 <tcp_pcb_remove+0x114>)
 800ae7a:	f009 ff3b 	bl	8014cf4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	683a      	ldr	r2, [r7, #0]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d105      	bne.n	800ae94 <tcp_pcb_remove+0x48>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68da      	ldr	r2, [r3, #12]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	601a      	str	r2, [r3, #0]
 800ae92:	e013      	b.n	800aebc <tcp_pcb_remove+0x70>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	60fb      	str	r3, [r7, #12]
 800ae9a:	e00c      	b.n	800aeb6 <tcp_pcb_remove+0x6a>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	683a      	ldr	r2, [r7, #0]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d104      	bne.n	800aeb0 <tcp_pcb_remove+0x64>
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	68da      	ldr	r2, [r3, #12]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	60da      	str	r2, [r3, #12]
 800aeae:	e005      	b.n	800aebc <tcp_pcb_remove+0x70>
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	60fb      	str	r3, [r7, #12]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1ef      	bne.n	800ae9c <tcp_pcb_remove+0x50>
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	2200      	movs	r2, #0
 800aec0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800aec2:	6838      	ldr	r0, [r7, #0]
 800aec4:	f7ff ff72 	bl	800adac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	7d1b      	ldrb	r3, [r3, #20]
 800aecc:	2b0a      	cmp	r3, #10
 800aece:	d013      	beq.n	800aef8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d00f      	beq.n	800aef8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	8b5b      	ldrh	r3, [r3, #26]
 800aedc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d009      	beq.n	800aef8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	8b5b      	ldrh	r3, [r3, #26]
 800aee8:	f043 0302 	orr.w	r3, r3, #2
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800aef2:	6838      	ldr	r0, [r7, #0]
 800aef4:	f003 fbc6 	bl	800e684 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	7d1b      	ldrb	r3, [r3, #20]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d020      	beq.n	800af42 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af04:	2b00      	cmp	r3, #0
 800af06:	d006      	beq.n	800af16 <tcp_pcb_remove+0xca>
 800af08:	4b13      	ldr	r3, [pc, #76]	; (800af58 <tcp_pcb_remove+0x10c>)
 800af0a:	f640 0293 	movw	r2, #2195	; 0x893
 800af0e:	4916      	ldr	r1, [pc, #88]	; (800af68 <tcp_pcb_remove+0x11c>)
 800af10:	4813      	ldr	r0, [pc, #76]	; (800af60 <tcp_pcb_remove+0x114>)
 800af12:	f009 feef 	bl	8014cf4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d006      	beq.n	800af2c <tcp_pcb_remove+0xe0>
 800af1e:	4b0e      	ldr	r3, [pc, #56]	; (800af58 <tcp_pcb_remove+0x10c>)
 800af20:	f640 0294 	movw	r2, #2196	; 0x894
 800af24:	4911      	ldr	r1, [pc, #68]	; (800af6c <tcp_pcb_remove+0x120>)
 800af26:	480e      	ldr	r0, [pc, #56]	; (800af60 <tcp_pcb_remove+0x114>)
 800af28:	f009 fee4 	bl	8014cf4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af30:	2b00      	cmp	r3, #0
 800af32:	d006      	beq.n	800af42 <tcp_pcb_remove+0xf6>
 800af34:	4b08      	ldr	r3, [pc, #32]	; (800af58 <tcp_pcb_remove+0x10c>)
 800af36:	f640 0296 	movw	r2, #2198	; 0x896
 800af3a:	490d      	ldr	r1, [pc, #52]	; (800af70 <tcp_pcb_remove+0x124>)
 800af3c:	4808      	ldr	r0, [pc, #32]	; (800af60 <tcp_pcb_remove+0x114>)
 800af3e:	f009 fed9 	bl	8014cf4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	2200      	movs	r2, #0
 800af46:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	2200      	movs	r2, #0
 800af4c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800af4e:	bf00      	nop
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	08018274 	.word	0x08018274
 800af5c:	080188dc 	.word	0x080188dc
 800af60:	080182b8 	.word	0x080182b8
 800af64:	080188f8 	.word	0x080188f8
 800af68:	08018918 	.word	0x08018918
 800af6c:	08018930 	.word	0x08018930
 800af70:	0801894c 	.word	0x0801894c

0800af74 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d106      	bne.n	800af90 <tcp_next_iss+0x1c>
 800af82:	4b0a      	ldr	r3, [pc, #40]	; (800afac <tcp_next_iss+0x38>)
 800af84:	f640 02af 	movw	r2, #2223	; 0x8af
 800af88:	4909      	ldr	r1, [pc, #36]	; (800afb0 <tcp_next_iss+0x3c>)
 800af8a:	480a      	ldr	r0, [pc, #40]	; (800afb4 <tcp_next_iss+0x40>)
 800af8c:	f009 feb2 	bl	8014cf4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800af90:	4b09      	ldr	r3, [pc, #36]	; (800afb8 <tcp_next_iss+0x44>)
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	4b09      	ldr	r3, [pc, #36]	; (800afbc <tcp_next_iss+0x48>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4413      	add	r3, r2
 800af9a:	4a07      	ldr	r2, [pc, #28]	; (800afb8 <tcp_next_iss+0x44>)
 800af9c:	6013      	str	r3, [r2, #0]
  return iss;
 800af9e:	4b06      	ldr	r3, [pc, #24]	; (800afb8 <tcp_next_iss+0x44>)
 800afa0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	08018274 	.word	0x08018274
 800afb0:	08018964 	.word	0x08018964
 800afb4:	080182b8 	.word	0x080182b8
 800afb8:	20000024 	.word	0x20000024
 800afbc:	2000ae6c 	.word	0x2000ae6c

0800afc0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	4603      	mov	r3, r0
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
 800afcc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d106      	bne.n	800afe2 <tcp_eff_send_mss_netif+0x22>
 800afd4:	4b14      	ldr	r3, [pc, #80]	; (800b028 <tcp_eff_send_mss_netif+0x68>)
 800afd6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800afda:	4914      	ldr	r1, [pc, #80]	; (800b02c <tcp_eff_send_mss_netif+0x6c>)
 800afdc:	4814      	ldr	r0, [pc, #80]	; (800b030 <tcp_eff_send_mss_netif+0x70>)
 800afde:	f009 fe89 	bl	8014cf4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800afe8:	89fb      	ldrh	r3, [r7, #14]
 800afea:	e019      	b.n	800b020 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aff0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800aff2:	8afb      	ldrh	r3, [r7, #22]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d012      	beq.n	800b01e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800aff8:	2328      	movs	r3, #40	; 0x28
 800affa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800affc:	8afa      	ldrh	r2, [r7, #22]
 800affe:	8abb      	ldrh	r3, [r7, #20]
 800b000:	429a      	cmp	r2, r3
 800b002:	d904      	bls.n	800b00e <tcp_eff_send_mss_netif+0x4e>
 800b004:	8afa      	ldrh	r2, [r7, #22]
 800b006:	8abb      	ldrh	r3, [r7, #20]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	e000      	b.n	800b010 <tcp_eff_send_mss_netif+0x50>
 800b00e:	2300      	movs	r3, #0
 800b010:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b012:	8a7a      	ldrh	r2, [r7, #18]
 800b014:	89fb      	ldrh	r3, [r7, #14]
 800b016:	4293      	cmp	r3, r2
 800b018:	bf28      	it	cs
 800b01a:	4613      	movcs	r3, r2
 800b01c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b01e:	89fb      	ldrh	r3, [r7, #14]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3718      	adds	r7, #24
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	08018274 	.word	0x08018274
 800b02c:	08018980 	.word	0x08018980
 800b030:	080182b8 	.word	0x080182b8

0800b034 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d119      	bne.n	800b07c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b048:	4b10      	ldr	r3, [pc, #64]	; (800b08c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b04a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b04e:	4910      	ldr	r1, [pc, #64]	; (800b090 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b050:	4810      	ldr	r0, [pc, #64]	; (800b094 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b052:	f009 fe4f 	bl	8014cf4 <iprintf>

  while (pcb != NULL) {
 800b056:	e011      	b.n	800b07c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	429a      	cmp	r2, r3
 800b062:	d108      	bne.n	800b076 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f7fe fd26 	bl	8009abc <tcp_abort>
      pcb = next;
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	60fb      	str	r3, [r7, #12]
 800b074:	e002      	b.n	800b07c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1ea      	bne.n	800b058 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b082:	bf00      	nop
 800b084:	bf00      	nop
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	08018274 	.word	0x08018274
 800b090:	080189a8 	.word	0x080189a8
 800b094:	080182b8 	.word	0x080182b8

0800b098 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d02a      	beq.n	800b0fe <tcp_netif_ip_addr_changed+0x66>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d026      	beq.n	800b0fe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b0b0:	4b15      	ldr	r3, [pc, #84]	; (800b108 <tcp_netif_ip_addr_changed+0x70>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f7ff ffbc 	bl	800b034 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b0bc:	4b13      	ldr	r3, [pc, #76]	; (800b10c <tcp_netif_ip_addr_changed+0x74>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7ff ffb6 	bl	800b034 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d017      	beq.n	800b0fe <tcp_netif_ip_addr_changed+0x66>
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d013      	beq.n	800b0fe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b0d6:	4b0e      	ldr	r3, [pc, #56]	; (800b110 <tcp_netif_ip_addr_changed+0x78>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	e00c      	b.n	800b0f8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d103      	bne.n	800b0f2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	60fb      	str	r3, [r7, #12]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1ef      	bne.n	800b0de <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b0fe:	bf00      	nop
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	2000ae68 	.word	0x2000ae68
 800b10c:	2000ae74 	.word	0x2000ae74
 800b110:	2000ae70 	.word	0x2000ae70

0800b114 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b120:	2b00      	cmp	r3, #0
 800b122:	d007      	beq.n	800b134 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b128:	4618      	mov	r0, r3
 800b12a:	f7ff fb57 	bl	800a7dc <tcp_segs_free>
    pcb->ooseq = NULL;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b134:	bf00      	nop
 800b136:	3708      	adds	r7, #8
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b13c:	b590      	push	{r4, r7, lr}
 800b13e:	b08d      	sub	sp, #52	; 0x34
 800b140:	af04      	add	r7, sp, #16
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d105      	bne.n	800b158 <tcp_input+0x1c>
 800b14c:	4b9b      	ldr	r3, [pc, #620]	; (800b3bc <tcp_input+0x280>)
 800b14e:	2283      	movs	r2, #131	; 0x83
 800b150:	499b      	ldr	r1, [pc, #620]	; (800b3c0 <tcp_input+0x284>)
 800b152:	489c      	ldr	r0, [pc, #624]	; (800b3c4 <tcp_input+0x288>)
 800b154:	f009 fdce 	bl	8014cf4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	4a9a      	ldr	r2, [pc, #616]	; (800b3c8 <tcp_input+0x28c>)
 800b15e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	895b      	ldrh	r3, [r3, #10]
 800b164:	2b13      	cmp	r3, #19
 800b166:	f240 83d1 	bls.w	800b90c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b16a:	4b98      	ldr	r3, [pc, #608]	; (800b3cc <tcp_input+0x290>)
 800b16c:	695b      	ldr	r3, [r3, #20]
 800b16e:	4a97      	ldr	r2, [pc, #604]	; (800b3cc <tcp_input+0x290>)
 800b170:	6812      	ldr	r2, [r2, #0]
 800b172:	4611      	mov	r1, r2
 800b174:	4618      	mov	r0, r3
 800b176:	f006 f86f 	bl	8011258 <ip4_addr_isbroadcast_u32>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f040 83c7 	bne.w	800b910 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b182:	4b92      	ldr	r3, [pc, #584]	; (800b3cc <tcp_input+0x290>)
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b18a:	2be0      	cmp	r3, #224	; 0xe0
 800b18c:	f000 83c0 	beq.w	800b910 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b190:	4b8d      	ldr	r3, [pc, #564]	; (800b3c8 <tcp_input+0x28c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	899b      	ldrh	r3, [r3, #12]
 800b196:	b29b      	uxth	r3, r3
 800b198:	4618      	mov	r0, r3
 800b19a:	f7fc fb99 	bl	80078d0 <lwip_htons>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	0b1b      	lsrs	r3, r3, #12
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b1aa:	7cbb      	ldrb	r3, [r7, #18]
 800b1ac:	2b13      	cmp	r3, #19
 800b1ae:	f240 83b1 	bls.w	800b914 <tcp_input+0x7d8>
 800b1b2:	7cbb      	ldrb	r3, [r7, #18]
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	891b      	ldrh	r3, [r3, #8]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	f200 83aa 	bhi.w	800b914 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b1c0:	7cbb      	ldrb	r3, [r7, #18]
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	3b14      	subs	r3, #20
 800b1c6:	b29a      	uxth	r2, r3
 800b1c8:	4b81      	ldr	r3, [pc, #516]	; (800b3d0 <tcp_input+0x294>)
 800b1ca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b1cc:	4b81      	ldr	r3, [pc, #516]	; (800b3d4 <tcp_input+0x298>)
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	895a      	ldrh	r2, [r3, #10]
 800b1d6:	7cbb      	ldrb	r3, [r7, #18]
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d309      	bcc.n	800b1f2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b1de:	4b7c      	ldr	r3, [pc, #496]	; (800b3d0 <tcp_input+0x294>)
 800b1e0:	881a      	ldrh	r2, [r3, #0]
 800b1e2:	4b7d      	ldr	r3, [pc, #500]	; (800b3d8 <tcp_input+0x29c>)
 800b1e4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b1e6:	7cbb      	ldrb	r3, [r7, #18]
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7fd fe48 	bl	8008e80 <pbuf_remove_header>
 800b1f0:	e04e      	b.n	800b290 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d105      	bne.n	800b206 <tcp_input+0xca>
 800b1fa:	4b70      	ldr	r3, [pc, #448]	; (800b3bc <tcp_input+0x280>)
 800b1fc:	22c2      	movs	r2, #194	; 0xc2
 800b1fe:	4977      	ldr	r1, [pc, #476]	; (800b3dc <tcp_input+0x2a0>)
 800b200:	4870      	ldr	r0, [pc, #448]	; (800b3c4 <tcp_input+0x288>)
 800b202:	f009 fd77 	bl	8014cf4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b206:	2114      	movs	r1, #20
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f7fd fe39 	bl	8008e80 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	895a      	ldrh	r2, [r3, #10]
 800b212:	4b71      	ldr	r3, [pc, #452]	; (800b3d8 <tcp_input+0x29c>)
 800b214:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b216:	4b6e      	ldr	r3, [pc, #440]	; (800b3d0 <tcp_input+0x294>)
 800b218:	881a      	ldrh	r2, [r3, #0]
 800b21a:	4b6f      	ldr	r3, [pc, #444]	; (800b3d8 <tcp_input+0x29c>)
 800b21c:	881b      	ldrh	r3, [r3, #0]
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b222:	4b6d      	ldr	r3, [pc, #436]	; (800b3d8 <tcp_input+0x29c>)
 800b224:	881b      	ldrh	r3, [r3, #0]
 800b226:	4619      	mov	r1, r3
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f7fd fe29 	bl	8008e80 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	895b      	ldrh	r3, [r3, #10]
 800b234:	8a3a      	ldrh	r2, [r7, #16]
 800b236:	429a      	cmp	r2, r3
 800b238:	f200 836e 	bhi.w	800b918 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	4a64      	ldr	r2, [pc, #400]	; (800b3d4 <tcp_input+0x298>)
 800b244:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	8a3a      	ldrh	r2, [r7, #16]
 800b24c:	4611      	mov	r1, r2
 800b24e:	4618      	mov	r0, r3
 800b250:	f7fd fe16 	bl	8008e80 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	891a      	ldrh	r2, [r3, #8]
 800b258:	8a3b      	ldrh	r3, [r7, #16]
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	b29a      	uxth	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	895b      	ldrh	r3, [r3, #10]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d005      	beq.n	800b276 <tcp_input+0x13a>
 800b26a:	4b54      	ldr	r3, [pc, #336]	; (800b3bc <tcp_input+0x280>)
 800b26c:	22df      	movs	r2, #223	; 0xdf
 800b26e:	495c      	ldr	r1, [pc, #368]	; (800b3e0 <tcp_input+0x2a4>)
 800b270:	4854      	ldr	r0, [pc, #336]	; (800b3c4 <tcp_input+0x288>)
 800b272:	f009 fd3f 	bl	8014cf4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	891a      	ldrh	r2, [r3, #8]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	891b      	ldrh	r3, [r3, #8]
 800b280:	429a      	cmp	r2, r3
 800b282:	d005      	beq.n	800b290 <tcp_input+0x154>
 800b284:	4b4d      	ldr	r3, [pc, #308]	; (800b3bc <tcp_input+0x280>)
 800b286:	22e0      	movs	r2, #224	; 0xe0
 800b288:	4956      	ldr	r1, [pc, #344]	; (800b3e4 <tcp_input+0x2a8>)
 800b28a:	484e      	ldr	r0, [pc, #312]	; (800b3c4 <tcp_input+0x288>)
 800b28c:	f009 fd32 	bl	8014cf4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b290:	4b4d      	ldr	r3, [pc, #308]	; (800b3c8 <tcp_input+0x28c>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	b29b      	uxth	r3, r3
 800b298:	4a4b      	ldr	r2, [pc, #300]	; (800b3c8 <tcp_input+0x28c>)
 800b29a:	6814      	ldr	r4, [r2, #0]
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fc fb17 	bl	80078d0 <lwip_htons>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b2a6:	4b48      	ldr	r3, [pc, #288]	; (800b3c8 <tcp_input+0x28c>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	885b      	ldrh	r3, [r3, #2]
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	4a46      	ldr	r2, [pc, #280]	; (800b3c8 <tcp_input+0x28c>)
 800b2b0:	6814      	ldr	r4, [r2, #0]
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7fc fb0c 	bl	80078d0 <lwip_htons>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b2bc:	4b42      	ldr	r3, [pc, #264]	; (800b3c8 <tcp_input+0x28c>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	4a41      	ldr	r2, [pc, #260]	; (800b3c8 <tcp_input+0x28c>)
 800b2c4:	6814      	ldr	r4, [r2, #0]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7fc fb17 	bl	80078fa <lwip_htonl>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	6063      	str	r3, [r4, #4]
 800b2d0:	6863      	ldr	r3, [r4, #4]
 800b2d2:	4a45      	ldr	r2, [pc, #276]	; (800b3e8 <tcp_input+0x2ac>)
 800b2d4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b2d6:	4b3c      	ldr	r3, [pc, #240]	; (800b3c8 <tcp_input+0x28c>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	4a3a      	ldr	r2, [pc, #232]	; (800b3c8 <tcp_input+0x28c>)
 800b2de:	6814      	ldr	r4, [r2, #0]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fc fb0a 	bl	80078fa <lwip_htonl>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	60a3      	str	r3, [r4, #8]
 800b2ea:	68a3      	ldr	r3, [r4, #8]
 800b2ec:	4a3f      	ldr	r2, [pc, #252]	; (800b3ec <tcp_input+0x2b0>)
 800b2ee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b2f0:	4b35      	ldr	r3, [pc, #212]	; (800b3c8 <tcp_input+0x28c>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	89db      	ldrh	r3, [r3, #14]
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	4a33      	ldr	r2, [pc, #204]	; (800b3c8 <tcp_input+0x28c>)
 800b2fa:	6814      	ldr	r4, [r2, #0]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7fc fae7 	bl	80078d0 <lwip_htons>
 800b302:	4603      	mov	r3, r0
 800b304:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b306:	4b30      	ldr	r3, [pc, #192]	; (800b3c8 <tcp_input+0x28c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	899b      	ldrh	r3, [r3, #12]
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fc fade 	bl	80078d0 <lwip_htons>
 800b314:	4603      	mov	r3, r0
 800b316:	b2db      	uxtb	r3, r3
 800b318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b31c:	b2da      	uxtb	r2, r3
 800b31e:	4b34      	ldr	r3, [pc, #208]	; (800b3f0 <tcp_input+0x2b4>)
 800b320:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	891a      	ldrh	r2, [r3, #8]
 800b326:	4b33      	ldr	r3, [pc, #204]	; (800b3f4 <tcp_input+0x2b8>)
 800b328:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b32a:	4b31      	ldr	r3, [pc, #196]	; (800b3f0 <tcp_input+0x2b4>)
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	f003 0303 	and.w	r3, r3, #3
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00c      	beq.n	800b350 <tcp_input+0x214>
    tcplen++;
 800b336:	4b2f      	ldr	r3, [pc, #188]	; (800b3f4 <tcp_input+0x2b8>)
 800b338:	881b      	ldrh	r3, [r3, #0]
 800b33a:	3301      	adds	r3, #1
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	4b2d      	ldr	r3, [pc, #180]	; (800b3f4 <tcp_input+0x2b8>)
 800b340:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	891a      	ldrh	r2, [r3, #8]
 800b346:	4b2b      	ldr	r3, [pc, #172]	; (800b3f4 <tcp_input+0x2b8>)
 800b348:	881b      	ldrh	r3, [r3, #0]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	f200 82e6 	bhi.w	800b91c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b350:	2300      	movs	r3, #0
 800b352:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b354:	4b28      	ldr	r3, [pc, #160]	; (800b3f8 <tcp_input+0x2bc>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	61fb      	str	r3, [r7, #28]
 800b35a:	e09d      	b.n	800b498 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	7d1b      	ldrb	r3, [r3, #20]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d105      	bne.n	800b370 <tcp_input+0x234>
 800b364:	4b15      	ldr	r3, [pc, #84]	; (800b3bc <tcp_input+0x280>)
 800b366:	22fb      	movs	r2, #251	; 0xfb
 800b368:	4924      	ldr	r1, [pc, #144]	; (800b3fc <tcp_input+0x2c0>)
 800b36a:	4816      	ldr	r0, [pc, #88]	; (800b3c4 <tcp_input+0x288>)
 800b36c:	f009 fcc2 	bl	8014cf4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	7d1b      	ldrb	r3, [r3, #20]
 800b374:	2b0a      	cmp	r3, #10
 800b376:	d105      	bne.n	800b384 <tcp_input+0x248>
 800b378:	4b10      	ldr	r3, [pc, #64]	; (800b3bc <tcp_input+0x280>)
 800b37a:	22fc      	movs	r2, #252	; 0xfc
 800b37c:	4920      	ldr	r1, [pc, #128]	; (800b400 <tcp_input+0x2c4>)
 800b37e:	4811      	ldr	r0, [pc, #68]	; (800b3c4 <tcp_input+0x288>)
 800b380:	f009 fcb8 	bl	8014cf4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	7d1b      	ldrb	r3, [r3, #20]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d105      	bne.n	800b398 <tcp_input+0x25c>
 800b38c:	4b0b      	ldr	r3, [pc, #44]	; (800b3bc <tcp_input+0x280>)
 800b38e:	22fd      	movs	r2, #253	; 0xfd
 800b390:	491c      	ldr	r1, [pc, #112]	; (800b404 <tcp_input+0x2c8>)
 800b392:	480c      	ldr	r0, [pc, #48]	; (800b3c4 <tcp_input+0x288>)
 800b394:	f009 fcae 	bl	8014cf4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	7a1b      	ldrb	r3, [r3, #8]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d033      	beq.n	800b408 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	7a1a      	ldrb	r2, [r3, #8]
 800b3a4:	4b09      	ldr	r3, [pc, #36]	; (800b3cc <tcp_input+0x290>)
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d029      	beq.n	800b408 <tcp_input+0x2cc>
      prev = pcb;
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	61bb      	str	r3, [r7, #24]
      continue;
 800b3b8:	e06b      	b.n	800b492 <tcp_input+0x356>
 800b3ba:	bf00      	nop
 800b3bc:	080189dc 	.word	0x080189dc
 800b3c0:	08018a10 	.word	0x08018a10
 800b3c4:	08018a28 	.word	0x08018a28
 800b3c8:	200008bc 	.word	0x200008bc
 800b3cc:	20005764 	.word	0x20005764
 800b3d0:	200008c0 	.word	0x200008c0
 800b3d4:	200008c4 	.word	0x200008c4
 800b3d8:	200008c2 	.word	0x200008c2
 800b3dc:	08018a50 	.word	0x08018a50
 800b3e0:	08018a60 	.word	0x08018a60
 800b3e4:	08018a6c 	.word	0x08018a6c
 800b3e8:	200008cc 	.word	0x200008cc
 800b3ec:	200008d0 	.word	0x200008d0
 800b3f0:	200008d8 	.word	0x200008d8
 800b3f4:	200008d6 	.word	0x200008d6
 800b3f8:	2000ae68 	.word	0x2000ae68
 800b3fc:	08018a8c 	.word	0x08018a8c
 800b400:	08018ab4 	.word	0x08018ab4
 800b404:	08018ae0 	.word	0x08018ae0
    }

    if (pcb->remote_port == tcphdr->src &&
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	8b1a      	ldrh	r2, [r3, #24]
 800b40c:	4b72      	ldr	r3, [pc, #456]	; (800b5d8 <tcp_input+0x49c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	881b      	ldrh	r3, [r3, #0]
 800b412:	b29b      	uxth	r3, r3
 800b414:	429a      	cmp	r2, r3
 800b416:	d13a      	bne.n	800b48e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	8ada      	ldrh	r2, [r3, #22]
 800b41c:	4b6e      	ldr	r3, [pc, #440]	; (800b5d8 <tcp_input+0x49c>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	885b      	ldrh	r3, [r3, #2]
 800b422:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b424:	429a      	cmp	r2, r3
 800b426:	d132      	bne.n	800b48e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	685a      	ldr	r2, [r3, #4]
 800b42c:	4b6b      	ldr	r3, [pc, #428]	; (800b5dc <tcp_input+0x4a0>)
 800b42e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b430:	429a      	cmp	r2, r3
 800b432:	d12c      	bne.n	800b48e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	4b68      	ldr	r3, [pc, #416]	; (800b5dc <tcp_input+0x4a0>)
 800b43a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d126      	bne.n	800b48e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	69fa      	ldr	r2, [r7, #28]
 800b446:	429a      	cmp	r2, r3
 800b448:	d106      	bne.n	800b458 <tcp_input+0x31c>
 800b44a:	4b65      	ldr	r3, [pc, #404]	; (800b5e0 <tcp_input+0x4a4>)
 800b44c:	f240 120d 	movw	r2, #269	; 0x10d
 800b450:	4964      	ldr	r1, [pc, #400]	; (800b5e4 <tcp_input+0x4a8>)
 800b452:	4865      	ldr	r0, [pc, #404]	; (800b5e8 <tcp_input+0x4ac>)
 800b454:	f009 fc4e 	bl	8014cf4 <iprintf>
      if (prev != NULL) {
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00a      	beq.n	800b474 <tcp_input+0x338>
        prev->next = pcb->next;
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	68da      	ldr	r2, [r3, #12]
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b466:	4b61      	ldr	r3, [pc, #388]	; (800b5ec <tcp_input+0x4b0>)
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b46e:	4a5f      	ldr	r2, [pc, #380]	; (800b5ec <tcp_input+0x4b0>)
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	69fa      	ldr	r2, [r7, #28]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d111      	bne.n	800b4a2 <tcp_input+0x366>
 800b47e:	4b58      	ldr	r3, [pc, #352]	; (800b5e0 <tcp_input+0x4a4>)
 800b480:	f240 1215 	movw	r2, #277	; 0x115
 800b484:	495a      	ldr	r1, [pc, #360]	; (800b5f0 <tcp_input+0x4b4>)
 800b486:	4858      	ldr	r0, [pc, #352]	; (800b5e8 <tcp_input+0x4ac>)
 800b488:	f009 fc34 	bl	8014cf4 <iprintf>
      break;
 800b48c:	e009      	b.n	800b4a2 <tcp_input+0x366>
    }
    prev = pcb;
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	61fb      	str	r3, [r7, #28]
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f47f af5e 	bne.w	800b35c <tcp_input+0x220>
 800b4a0:	e000      	b.n	800b4a4 <tcp_input+0x368>
      break;
 800b4a2:	bf00      	nop
  }

  if (pcb == NULL) {
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f040 80aa 	bne.w	800b600 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4ac:	4b51      	ldr	r3, [pc, #324]	; (800b5f4 <tcp_input+0x4b8>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	61fb      	str	r3, [r7, #28]
 800b4b2:	e03f      	b.n	800b534 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	7d1b      	ldrb	r3, [r3, #20]
 800b4b8:	2b0a      	cmp	r3, #10
 800b4ba:	d006      	beq.n	800b4ca <tcp_input+0x38e>
 800b4bc:	4b48      	ldr	r3, [pc, #288]	; (800b5e0 <tcp_input+0x4a4>)
 800b4be:	f240 121f 	movw	r2, #287	; 0x11f
 800b4c2:	494d      	ldr	r1, [pc, #308]	; (800b5f8 <tcp_input+0x4bc>)
 800b4c4:	4848      	ldr	r0, [pc, #288]	; (800b5e8 <tcp_input+0x4ac>)
 800b4c6:	f009 fc15 	bl	8014cf4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	7a1b      	ldrb	r3, [r3, #8]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d009      	beq.n	800b4e6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b4d2:	69fb      	ldr	r3, [r7, #28]
 800b4d4:	7a1a      	ldrb	r2, [r3, #8]
 800b4d6:	4b41      	ldr	r3, [pc, #260]	; (800b5dc <tcp_input+0x4a0>)
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b4de:	3301      	adds	r3, #1
 800b4e0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d122      	bne.n	800b52c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b4e6:	69fb      	ldr	r3, [r7, #28]
 800b4e8:	8b1a      	ldrh	r2, [r3, #24]
 800b4ea:	4b3b      	ldr	r3, [pc, #236]	; (800b5d8 <tcp_input+0x49c>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	881b      	ldrh	r3, [r3, #0]
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d11b      	bne.n	800b52e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	8ada      	ldrh	r2, [r3, #22]
 800b4fa:	4b37      	ldr	r3, [pc, #220]	; (800b5d8 <tcp_input+0x49c>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	885b      	ldrh	r3, [r3, #2]
 800b500:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b502:	429a      	cmp	r2, r3
 800b504:	d113      	bne.n	800b52e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	685a      	ldr	r2, [r3, #4]
 800b50a:	4b34      	ldr	r3, [pc, #208]	; (800b5dc <tcp_input+0x4a0>)
 800b50c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b50e:	429a      	cmp	r2, r3
 800b510:	d10d      	bne.n	800b52e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	4b31      	ldr	r3, [pc, #196]	; (800b5dc <tcp_input+0x4a0>)
 800b518:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d107      	bne.n	800b52e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b51e:	69f8      	ldr	r0, [r7, #28]
 800b520:	f000 fb56 	bl	800bbd0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f7fd fd31 	bl	8008f8c <pbuf_free>
        return;
 800b52a:	e1fd      	b.n	800b928 <tcp_input+0x7ec>
        continue;
 800b52c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	61fb      	str	r3, [r7, #28]
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1bc      	bne.n	800b4b4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b53a:	2300      	movs	r3, #0
 800b53c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b53e:	4b2f      	ldr	r3, [pc, #188]	; (800b5fc <tcp_input+0x4c0>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	617b      	str	r3, [r7, #20]
 800b544:	e02a      	b.n	800b59c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	7a1b      	ldrb	r3, [r3, #8]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00c      	beq.n	800b568 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	7a1a      	ldrb	r2, [r3, #8]
 800b552:	4b22      	ldr	r3, [pc, #136]	; (800b5dc <tcp_input+0x4a0>)
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b55a:	3301      	adds	r3, #1
 800b55c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b55e:	429a      	cmp	r2, r3
 800b560:	d002      	beq.n	800b568 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	61bb      	str	r3, [r7, #24]
        continue;
 800b566:	e016      	b.n	800b596 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	8ada      	ldrh	r2, [r3, #22]
 800b56c:	4b1a      	ldr	r3, [pc, #104]	; (800b5d8 <tcp_input+0x49c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	885b      	ldrh	r3, [r3, #2]
 800b572:	b29b      	uxth	r3, r3
 800b574:	429a      	cmp	r2, r3
 800b576:	d10c      	bne.n	800b592 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	4b17      	ldr	r3, [pc, #92]	; (800b5dc <tcp_input+0x4a0>)
 800b57e:	695b      	ldr	r3, [r3, #20]
 800b580:	429a      	cmp	r2, r3
 800b582:	d00f      	beq.n	800b5a4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00d      	beq.n	800b5a6 <tcp_input+0x46a>
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d009      	beq.n	800b5a6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	617b      	str	r3, [r7, #20]
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1d1      	bne.n	800b546 <tcp_input+0x40a>
 800b5a2:	e000      	b.n	800b5a6 <tcp_input+0x46a>
            break;
 800b5a4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d029      	beq.n	800b600 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00a      	beq.n	800b5c8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	68da      	ldr	r2, [r3, #12]
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b5ba:	4b10      	ldr	r3, [pc, #64]	; (800b5fc <tcp_input+0x4c0>)
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b5c2:	4a0e      	ldr	r2, [pc, #56]	; (800b5fc <tcp_input+0x4c0>)
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b5c8:	6978      	ldr	r0, [r7, #20]
 800b5ca:	f000 fa03 	bl	800b9d4 <tcp_listen_input>
      }
      pbuf_free(p);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7fd fcdc 	bl	8008f8c <pbuf_free>
      return;
 800b5d4:	e1a8      	b.n	800b928 <tcp_input+0x7ec>
 800b5d6:	bf00      	nop
 800b5d8:	200008bc 	.word	0x200008bc
 800b5dc:	20005764 	.word	0x20005764
 800b5e0:	080189dc 	.word	0x080189dc
 800b5e4:	08018b08 	.word	0x08018b08
 800b5e8:	08018a28 	.word	0x08018a28
 800b5ec:	2000ae68 	.word	0x2000ae68
 800b5f0:	08018b34 	.word	0x08018b34
 800b5f4:	2000ae78 	.word	0x2000ae78
 800b5f8:	08018b60 	.word	0x08018b60
 800b5fc:	2000ae70 	.word	0x2000ae70
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	2b00      	cmp	r3, #0
 800b604:	f000 8158 	beq.w	800b8b8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b608:	4b95      	ldr	r3, [pc, #596]	; (800b860 <tcp_input+0x724>)
 800b60a:	2200      	movs	r2, #0
 800b60c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	891a      	ldrh	r2, [r3, #8]
 800b612:	4b93      	ldr	r3, [pc, #588]	; (800b860 <tcp_input+0x724>)
 800b614:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b616:	4a92      	ldr	r2, [pc, #584]	; (800b860 <tcp_input+0x724>)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b61c:	4b91      	ldr	r3, [pc, #580]	; (800b864 <tcp_input+0x728>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a8f      	ldr	r2, [pc, #572]	; (800b860 <tcp_input+0x724>)
 800b622:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b624:	4b90      	ldr	r3, [pc, #576]	; (800b868 <tcp_input+0x72c>)
 800b626:	2200      	movs	r2, #0
 800b628:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b62a:	4b90      	ldr	r3, [pc, #576]	; (800b86c <tcp_input+0x730>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b630:	4b8f      	ldr	r3, [pc, #572]	; (800b870 <tcp_input+0x734>)
 800b632:	2200      	movs	r2, #0
 800b634:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b636:	4b8f      	ldr	r3, [pc, #572]	; (800b874 <tcp_input+0x738>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	f003 0308 	and.w	r3, r3, #8
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d006      	beq.n	800b650 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	7b5b      	ldrb	r3, [r3, #13]
 800b646:	f043 0301 	orr.w	r3, r3, #1
 800b64a:	b2da      	uxtb	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b654:	2b00      	cmp	r3, #0
 800b656:	d017      	beq.n	800b688 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b658:	69f8      	ldr	r0, [r7, #28]
 800b65a:	f7ff f843 	bl	800a6e4 <tcp_process_refused_data>
 800b65e:	4603      	mov	r3, r0
 800b660:	f113 0f0d 	cmn.w	r3, #13
 800b664:	d007      	beq.n	800b676 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b666:	69fb      	ldr	r3, [r7, #28]
 800b668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00c      	beq.n	800b688 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b66e:	4b82      	ldr	r3, [pc, #520]	; (800b878 <tcp_input+0x73c>)
 800b670:	881b      	ldrh	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d008      	beq.n	800b688 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f040 80e3 	bne.w	800b846 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b680:	69f8      	ldr	r0, [r7, #28]
 800b682:	f003 fe05 	bl	800f290 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b686:	e0de      	b.n	800b846 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b688:	4a7c      	ldr	r2, [pc, #496]	; (800b87c <tcp_input+0x740>)
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b68e:	69f8      	ldr	r0, [r7, #28]
 800b690:	f000 fb18 	bl	800bcc4 <tcp_process>
 800b694:	4603      	mov	r3, r0
 800b696:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b698:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b69c:	f113 0f0d 	cmn.w	r3, #13
 800b6a0:	f000 80d3 	beq.w	800b84a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b6a4:	4b71      	ldr	r3, [pc, #452]	; (800b86c <tcp_input+0x730>)
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	f003 0308 	and.w	r3, r3, #8
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d015      	beq.n	800b6dc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d008      	beq.n	800b6cc <tcp_input+0x590>
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6c0:	69fa      	ldr	r2, [r7, #28]
 800b6c2:	6912      	ldr	r2, [r2, #16]
 800b6c4:	f06f 010d 	mvn.w	r1, #13
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b6cc:	69f9      	ldr	r1, [r7, #28]
 800b6ce:	486c      	ldr	r0, [pc, #432]	; (800b880 <tcp_input+0x744>)
 800b6d0:	f7ff fbbc 	bl	800ae4c <tcp_pcb_remove>
        tcp_free(pcb);
 800b6d4:	69f8      	ldr	r0, [r7, #28]
 800b6d6:	f7fd ff09 	bl	80094ec <tcp_free>
 800b6da:	e0da      	b.n	800b892 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b6e0:	4b63      	ldr	r3, [pc, #396]	; (800b870 <tcp_input+0x734>)
 800b6e2:	881b      	ldrh	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d01d      	beq.n	800b724 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b6e8:	4b61      	ldr	r3, [pc, #388]	; (800b870 <tcp_input+0x734>)
 800b6ea:	881b      	ldrh	r3, [r3, #0]
 800b6ec:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00a      	beq.n	800b70e <tcp_input+0x5d2>
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6fe:	69fa      	ldr	r2, [r7, #28]
 800b700:	6910      	ldr	r0, [r2, #16]
 800b702:	89fa      	ldrh	r2, [r7, #14]
 800b704:	69f9      	ldr	r1, [r7, #28]
 800b706:	4798      	blx	r3
 800b708:	4603      	mov	r3, r0
 800b70a:	74fb      	strb	r3, [r7, #19]
 800b70c:	e001      	b.n	800b712 <tcp_input+0x5d6>
 800b70e:	2300      	movs	r3, #0
 800b710:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b712:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b716:	f113 0f0d 	cmn.w	r3, #13
 800b71a:	f000 8098 	beq.w	800b84e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b71e:	4b54      	ldr	r3, [pc, #336]	; (800b870 <tcp_input+0x734>)
 800b720:	2200      	movs	r2, #0
 800b722:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b724:	69f8      	ldr	r0, [r7, #28]
 800b726:	f000 f915 	bl	800b954 <tcp_input_delayed_close>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f040 8090 	bne.w	800b852 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b732:	4b4d      	ldr	r3, [pc, #308]	; (800b868 <tcp_input+0x72c>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d041      	beq.n	800b7be <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d006      	beq.n	800b750 <tcp_input+0x614>
 800b742:	4b50      	ldr	r3, [pc, #320]	; (800b884 <tcp_input+0x748>)
 800b744:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b748:	494f      	ldr	r1, [pc, #316]	; (800b888 <tcp_input+0x74c>)
 800b74a:	4850      	ldr	r0, [pc, #320]	; (800b88c <tcp_input+0x750>)
 800b74c:	f009 fad2 	bl	8014cf4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b750:	69fb      	ldr	r3, [r7, #28]
 800b752:	8b5b      	ldrh	r3, [r3, #26]
 800b754:	f003 0310 	and.w	r3, r3, #16
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d008      	beq.n	800b76e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b75c:	4b42      	ldr	r3, [pc, #264]	; (800b868 <tcp_input+0x72c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4618      	mov	r0, r3
 800b762:	f7fd fc13 	bl	8008f8c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b766:	69f8      	ldr	r0, [r7, #28]
 800b768:	f7fe f9a8 	bl	8009abc <tcp_abort>
            goto aborted;
 800b76c:	e091      	b.n	800b892 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00c      	beq.n	800b792 <tcp_input+0x656>
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b77e:	69fb      	ldr	r3, [r7, #28]
 800b780:	6918      	ldr	r0, [r3, #16]
 800b782:	4b39      	ldr	r3, [pc, #228]	; (800b868 <tcp_input+0x72c>)
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	2300      	movs	r3, #0
 800b788:	69f9      	ldr	r1, [r7, #28]
 800b78a:	47a0      	blx	r4
 800b78c:	4603      	mov	r3, r0
 800b78e:	74fb      	strb	r3, [r7, #19]
 800b790:	e008      	b.n	800b7a4 <tcp_input+0x668>
 800b792:	4b35      	ldr	r3, [pc, #212]	; (800b868 <tcp_input+0x72c>)
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	2300      	movs	r3, #0
 800b798:	69f9      	ldr	r1, [r7, #28]
 800b79a:	2000      	movs	r0, #0
 800b79c:	f7ff f896 	bl	800a8cc <tcp_recv_null>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b7a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b7a8:	f113 0f0d 	cmn.w	r3, #13
 800b7ac:	d053      	beq.n	800b856 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b7ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d003      	beq.n	800b7be <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b7b6:	4b2c      	ldr	r3, [pc, #176]	; (800b868 <tcp_input+0x72c>)
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b7be:	4b2b      	ldr	r3, [pc, #172]	; (800b86c <tcp_input+0x730>)
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	f003 0320 	and.w	r3, r3, #32
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d030      	beq.n	800b82c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b7ca:	69fb      	ldr	r3, [r7, #28]
 800b7cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d009      	beq.n	800b7e6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7d6:	7b5a      	ldrb	r2, [r3, #13]
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7dc:	f042 0220 	orr.w	r2, r2, #32
 800b7e0:	b2d2      	uxtb	r2, r2
 800b7e2:	735a      	strb	r2, [r3, #13]
 800b7e4:	e022      	b.n	800b82c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b7ee:	d005      	beq.n	800b7fc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	69fb      	ldr	r3, [r7, #28]
 800b7fa:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00b      	beq.n	800b81e <tcp_input+0x6e2>
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	6918      	ldr	r0, [r3, #16]
 800b810:	2300      	movs	r3, #0
 800b812:	2200      	movs	r2, #0
 800b814:	69f9      	ldr	r1, [r7, #28]
 800b816:	47a0      	blx	r4
 800b818:	4603      	mov	r3, r0
 800b81a:	74fb      	strb	r3, [r7, #19]
 800b81c:	e001      	b.n	800b822 <tcp_input+0x6e6>
 800b81e:	2300      	movs	r3, #0
 800b820:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b822:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b826:	f113 0f0d 	cmn.w	r3, #13
 800b82a:	d016      	beq.n	800b85a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b82c:	4b13      	ldr	r3, [pc, #76]	; (800b87c <tcp_input+0x740>)
 800b82e:	2200      	movs	r2, #0
 800b830:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b832:	69f8      	ldr	r0, [r7, #28]
 800b834:	f000 f88e 	bl	800b954 <tcp_input_delayed_close>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d128      	bne.n	800b890 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b83e:	69f8      	ldr	r0, [r7, #28]
 800b840:	f002 ff20 	bl	800e684 <tcp_output>
 800b844:	e025      	b.n	800b892 <tcp_input+0x756>
        goto aborted;
 800b846:	bf00      	nop
 800b848:	e023      	b.n	800b892 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b84a:	bf00      	nop
 800b84c:	e021      	b.n	800b892 <tcp_input+0x756>
              goto aborted;
 800b84e:	bf00      	nop
 800b850:	e01f      	b.n	800b892 <tcp_input+0x756>
          goto aborted;
 800b852:	bf00      	nop
 800b854:	e01d      	b.n	800b892 <tcp_input+0x756>
            goto aborted;
 800b856:	bf00      	nop
 800b858:	e01b      	b.n	800b892 <tcp_input+0x756>
              goto aborted;
 800b85a:	bf00      	nop
 800b85c:	e019      	b.n	800b892 <tcp_input+0x756>
 800b85e:	bf00      	nop
 800b860:	200008ac 	.word	0x200008ac
 800b864:	200008bc 	.word	0x200008bc
 800b868:	200008dc 	.word	0x200008dc
 800b86c:	200008d9 	.word	0x200008d9
 800b870:	200008d4 	.word	0x200008d4
 800b874:	200008d8 	.word	0x200008d8
 800b878:	200008d6 	.word	0x200008d6
 800b87c:	2000ae7c 	.word	0x2000ae7c
 800b880:	2000ae68 	.word	0x2000ae68
 800b884:	080189dc 	.word	0x080189dc
 800b888:	08018b90 	.word	0x08018b90
 800b88c:	08018a28 	.word	0x08018a28
          goto aborted;
 800b890:	bf00      	nop
    tcp_input_pcb = NULL;
 800b892:	4b27      	ldr	r3, [pc, #156]	; (800b930 <tcp_input+0x7f4>)
 800b894:	2200      	movs	r2, #0
 800b896:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b898:	4b26      	ldr	r3, [pc, #152]	; (800b934 <tcp_input+0x7f8>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b89e:	4b26      	ldr	r3, [pc, #152]	; (800b938 <tcp_input+0x7fc>)
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d03f      	beq.n	800b926 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b8a6:	4b24      	ldr	r3, [pc, #144]	; (800b938 <tcp_input+0x7fc>)
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fd fb6e 	bl	8008f8c <pbuf_free>
      inseg.p = NULL;
 800b8b0:	4b21      	ldr	r3, [pc, #132]	; (800b938 <tcp_input+0x7fc>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b8b6:	e036      	b.n	800b926 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b8b8:	4b20      	ldr	r3, [pc, #128]	; (800b93c <tcp_input+0x800>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	899b      	ldrh	r3, [r3, #12]
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7fc f805 	bl	80078d0 <lwip_htons>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	f003 0304 	and.w	r3, r3, #4
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d118      	bne.n	800b904 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8d2:	4b1b      	ldr	r3, [pc, #108]	; (800b940 <tcp_input+0x804>)
 800b8d4:	6819      	ldr	r1, [r3, #0]
 800b8d6:	4b1b      	ldr	r3, [pc, #108]	; (800b944 <tcp_input+0x808>)
 800b8d8:	881b      	ldrh	r3, [r3, #0]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	4b1a      	ldr	r3, [pc, #104]	; (800b948 <tcp_input+0x80c>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8e2:	4b16      	ldr	r3, [pc, #88]	; (800b93c <tcp_input+0x800>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8e6:	885b      	ldrh	r3, [r3, #2]
 800b8e8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8ea:	4a14      	ldr	r2, [pc, #80]	; (800b93c <tcp_input+0x800>)
 800b8ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8ee:	8812      	ldrh	r2, [r2, #0]
 800b8f0:	b292      	uxth	r2, r2
 800b8f2:	9202      	str	r2, [sp, #8]
 800b8f4:	9301      	str	r3, [sp, #4]
 800b8f6:	4b15      	ldr	r3, [pc, #84]	; (800b94c <tcp_input+0x810>)
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	4b15      	ldr	r3, [pc, #84]	; (800b950 <tcp_input+0x814>)
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	2000      	movs	r0, #0
 800b900:	f003 fc74 	bl	800f1ec <tcp_rst>
    pbuf_free(p);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7fd fb41 	bl	8008f8c <pbuf_free>
  return;
 800b90a:	e00c      	b.n	800b926 <tcp_input+0x7ea>
    goto dropped;
 800b90c:	bf00      	nop
 800b90e:	e006      	b.n	800b91e <tcp_input+0x7e2>
    goto dropped;
 800b910:	bf00      	nop
 800b912:	e004      	b.n	800b91e <tcp_input+0x7e2>
    goto dropped;
 800b914:	bf00      	nop
 800b916:	e002      	b.n	800b91e <tcp_input+0x7e2>
      goto dropped;
 800b918:	bf00      	nop
 800b91a:	e000      	b.n	800b91e <tcp_input+0x7e2>
      goto dropped;
 800b91c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7fd fb34 	bl	8008f8c <pbuf_free>
 800b924:	e000      	b.n	800b928 <tcp_input+0x7ec>
  return;
 800b926:	bf00      	nop
}
 800b928:	3724      	adds	r7, #36	; 0x24
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd90      	pop	{r4, r7, pc}
 800b92e:	bf00      	nop
 800b930:	2000ae7c 	.word	0x2000ae7c
 800b934:	200008dc 	.word	0x200008dc
 800b938:	200008ac 	.word	0x200008ac
 800b93c:	200008bc 	.word	0x200008bc
 800b940:	200008d0 	.word	0x200008d0
 800b944:	200008d6 	.word	0x200008d6
 800b948:	200008cc 	.word	0x200008cc
 800b94c:	20005774 	.word	0x20005774
 800b950:	20005778 	.word	0x20005778

0800b954 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d106      	bne.n	800b970 <tcp_input_delayed_close+0x1c>
 800b962:	4b17      	ldr	r3, [pc, #92]	; (800b9c0 <tcp_input_delayed_close+0x6c>)
 800b964:	f240 225a 	movw	r2, #602	; 0x25a
 800b968:	4916      	ldr	r1, [pc, #88]	; (800b9c4 <tcp_input_delayed_close+0x70>)
 800b96a:	4817      	ldr	r0, [pc, #92]	; (800b9c8 <tcp_input_delayed_close+0x74>)
 800b96c:	f009 f9c2 	bl	8014cf4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b970:	4b16      	ldr	r3, [pc, #88]	; (800b9cc <tcp_input_delayed_close+0x78>)
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	f003 0310 	and.w	r3, r3, #16
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d01c      	beq.n	800b9b6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	8b5b      	ldrh	r3, [r3, #26]
 800b980:	f003 0310 	and.w	r3, r3, #16
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10d      	bne.n	800b9a4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d008      	beq.n	800b9a4 <tcp_input_delayed_close+0x50>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	6912      	ldr	r2, [r2, #16]
 800b99c:	f06f 010e 	mvn.w	r1, #14
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b9a4:	6879      	ldr	r1, [r7, #4]
 800b9a6:	480a      	ldr	r0, [pc, #40]	; (800b9d0 <tcp_input_delayed_close+0x7c>)
 800b9a8:	f7ff fa50 	bl	800ae4c <tcp_pcb_remove>
    tcp_free(pcb);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7fd fd9d 	bl	80094ec <tcp_free>
    return 1;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e000      	b.n	800b9b8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	080189dc 	.word	0x080189dc
 800b9c4:	08018bac 	.word	0x08018bac
 800b9c8:	08018a28 	.word	0x08018a28
 800b9cc:	200008d9 	.word	0x200008d9
 800b9d0:	2000ae68 	.word	0x2000ae68

0800b9d4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b9d4:	b590      	push	{r4, r7, lr}
 800b9d6:	b08b      	sub	sp, #44	; 0x2c
 800b9d8:	af04      	add	r7, sp, #16
 800b9da:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b9dc:	4b6f      	ldr	r3, [pc, #444]	; (800bb9c <tcp_listen_input+0x1c8>)
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	f003 0304 	and.w	r3, r3, #4
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f040 80d2 	bne.w	800bb8e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d106      	bne.n	800b9fe <tcp_listen_input+0x2a>
 800b9f0:	4b6b      	ldr	r3, [pc, #428]	; (800bba0 <tcp_listen_input+0x1cc>)
 800b9f2:	f240 2281 	movw	r2, #641	; 0x281
 800b9f6:	496b      	ldr	r1, [pc, #428]	; (800bba4 <tcp_listen_input+0x1d0>)
 800b9f8:	486b      	ldr	r0, [pc, #428]	; (800bba8 <tcp_listen_input+0x1d4>)
 800b9fa:	f009 f97b 	bl	8014cf4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b9fe:	4b67      	ldr	r3, [pc, #412]	; (800bb9c <tcp_listen_input+0x1c8>)
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	f003 0310 	and.w	r3, r3, #16
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d019      	beq.n	800ba3e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba0a:	4b68      	ldr	r3, [pc, #416]	; (800bbac <tcp_listen_input+0x1d8>)
 800ba0c:	6819      	ldr	r1, [r3, #0]
 800ba0e:	4b68      	ldr	r3, [pc, #416]	; (800bbb0 <tcp_listen_input+0x1dc>)
 800ba10:	881b      	ldrh	r3, [r3, #0]
 800ba12:	461a      	mov	r2, r3
 800ba14:	4b67      	ldr	r3, [pc, #412]	; (800bbb4 <tcp_listen_input+0x1e0>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba1a:	4b67      	ldr	r3, [pc, #412]	; (800bbb8 <tcp_listen_input+0x1e4>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba1e:	885b      	ldrh	r3, [r3, #2]
 800ba20:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba22:	4a65      	ldr	r2, [pc, #404]	; (800bbb8 <tcp_listen_input+0x1e4>)
 800ba24:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba26:	8812      	ldrh	r2, [r2, #0]
 800ba28:	b292      	uxth	r2, r2
 800ba2a:	9202      	str	r2, [sp, #8]
 800ba2c:	9301      	str	r3, [sp, #4]
 800ba2e:	4b63      	ldr	r3, [pc, #396]	; (800bbbc <tcp_listen_input+0x1e8>)
 800ba30:	9300      	str	r3, [sp, #0]
 800ba32:	4b63      	ldr	r3, [pc, #396]	; (800bbc0 <tcp_listen_input+0x1ec>)
 800ba34:	4602      	mov	r2, r0
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f003 fbd8 	bl	800f1ec <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ba3c:	e0a9      	b.n	800bb92 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ba3e:	4b57      	ldr	r3, [pc, #348]	; (800bb9c <tcp_listen_input+0x1c8>)
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	f003 0302 	and.w	r3, r3, #2
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	f000 80a3 	beq.w	800bb92 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	7d5b      	ldrb	r3, [r3, #21]
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7ff f85f 	bl	800ab14 <tcp_alloc>
 800ba56:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d111      	bne.n	800ba82 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	699b      	ldr	r3, [r3, #24]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00a      	beq.n	800ba7c <tcp_listen_input+0xa8>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	6910      	ldr	r0, [r2, #16]
 800ba6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba72:	2100      	movs	r1, #0
 800ba74:	4798      	blx	r3
 800ba76:	4603      	mov	r3, r0
 800ba78:	73bb      	strb	r3, [r7, #14]
      return;
 800ba7a:	e08b      	b.n	800bb94 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ba7c:	23f0      	movs	r3, #240	; 0xf0
 800ba7e:	73bb      	strb	r3, [r7, #14]
      return;
 800ba80:	e088      	b.n	800bb94 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ba82:	4b50      	ldr	r3, [pc, #320]	; (800bbc4 <tcp_listen_input+0x1f0>)
 800ba84:	695a      	ldr	r2, [r3, #20]
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ba8a:	4b4e      	ldr	r3, [pc, #312]	; (800bbc4 <tcp_listen_input+0x1f0>)
 800ba8c:	691a      	ldr	r2, [r3, #16]
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	8ada      	ldrh	r2, [r3, #22]
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ba9a:	4b47      	ldr	r3, [pc, #284]	; (800bbb8 <tcp_listen_input+0x1e4>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	881b      	ldrh	r3, [r3, #0]
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	2203      	movs	r2, #3
 800baaa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800baac:	4b41      	ldr	r3, [pc, #260]	; (800bbb4 <tcp_listen_input+0x1e0>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	1c5a      	adds	r2, r3, #1
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800babe:	6978      	ldr	r0, [r7, #20]
 800bac0:	f7ff fa58 	bl	800af74 <tcp_next_iss>
 800bac4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	693a      	ldr	r2, [r7, #16]
 800baca:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	693a      	ldr	r2, [r7, #16]
 800bad0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	693a      	ldr	r2, [r7, #16]
 800bad6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	693a      	ldr	r2, [r7, #16]
 800badc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bade:	4b35      	ldr	r3, [pc, #212]	; (800bbb4 <tcp_listen_input+0x1e0>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	1e5a      	subs	r2, r3, #1
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	691a      	ldr	r2, [r3, #16]
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	7a5b      	ldrb	r3, [r3, #9]
 800bafa:	f003 030c 	and.w	r3, r3, #12
 800bafe:	b2da      	uxtb	r2, r3
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	7a1a      	ldrb	r2, [r3, #8]
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800bb0c:	4b2e      	ldr	r3, [pc, #184]	; (800bbc8 <tcp_listen_input+0x1f4>)
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	60da      	str	r2, [r3, #12]
 800bb14:	4a2c      	ldr	r2, [pc, #176]	; (800bbc8 <tcp_listen_input+0x1f4>)
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	6013      	str	r3, [r2, #0]
 800bb1a:	f003 fd29 	bl	800f570 <tcp_timer_needed>
 800bb1e:	4b2b      	ldr	r3, [pc, #172]	; (800bbcc <tcp_listen_input+0x1f8>)
 800bb20:	2201      	movs	r2, #1
 800bb22:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800bb24:	6978      	ldr	r0, [r7, #20]
 800bb26:	f001 fd8f 	bl	800d648 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800bb2a:	4b23      	ldr	r3, [pc, #140]	; (800bbb8 <tcp_listen_input+0x1e4>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	89db      	ldrh	r3, [r3, #14]
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f005 f8ed 	bl	8010d2c <ip4_route>
 800bb52:	4601      	mov	r1, r0
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	3304      	adds	r3, #4
 800bb58:	461a      	mov	r2, r3
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	f7ff fa30 	bl	800afc0 <tcp_eff_send_mss_netif>
 800bb60:	4603      	mov	r3, r0
 800bb62:	461a      	mov	r2, r3
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bb68:	2112      	movs	r1, #18
 800bb6a:	6978      	ldr	r0, [r7, #20]
 800bb6c:	f002 fc9c 	bl	800e4a8 <tcp_enqueue_flags>
 800bb70:	4603      	mov	r3, r0
 800bb72:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800bb74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d004      	beq.n	800bb86 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	6978      	ldr	r0, [r7, #20]
 800bb80:	f7fd fede 	bl	8009940 <tcp_abandon>
      return;
 800bb84:	e006      	b.n	800bb94 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800bb86:	6978      	ldr	r0, [r7, #20]
 800bb88:	f002 fd7c 	bl	800e684 <tcp_output>
  return;
 800bb8c:	e001      	b.n	800bb92 <tcp_listen_input+0x1be>
    return;
 800bb8e:	bf00      	nop
 800bb90:	e000      	b.n	800bb94 <tcp_listen_input+0x1c0>
  return;
 800bb92:	bf00      	nop
}
 800bb94:	371c      	adds	r7, #28
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd90      	pop	{r4, r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	200008d8 	.word	0x200008d8
 800bba0:	080189dc 	.word	0x080189dc
 800bba4:	08018bd4 	.word	0x08018bd4
 800bba8:	08018a28 	.word	0x08018a28
 800bbac:	200008d0 	.word	0x200008d0
 800bbb0:	200008d6 	.word	0x200008d6
 800bbb4:	200008cc 	.word	0x200008cc
 800bbb8:	200008bc 	.word	0x200008bc
 800bbbc:	20005774 	.word	0x20005774
 800bbc0:	20005778 	.word	0x20005778
 800bbc4:	20005764 	.word	0x20005764
 800bbc8:	2000ae68 	.word	0x2000ae68
 800bbcc:	2000ae64 	.word	0x2000ae64

0800bbd0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b086      	sub	sp, #24
 800bbd4:	af04      	add	r7, sp, #16
 800bbd6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bbd8:	4b2f      	ldr	r3, [pc, #188]	; (800bc98 <tcp_timewait_input+0xc8>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	f003 0304 	and.w	r3, r3, #4
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d153      	bne.n	800bc8c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d106      	bne.n	800bbf8 <tcp_timewait_input+0x28>
 800bbea:	4b2c      	ldr	r3, [pc, #176]	; (800bc9c <tcp_timewait_input+0xcc>)
 800bbec:	f240 22ee 	movw	r2, #750	; 0x2ee
 800bbf0:	492b      	ldr	r1, [pc, #172]	; (800bca0 <tcp_timewait_input+0xd0>)
 800bbf2:	482c      	ldr	r0, [pc, #176]	; (800bca4 <tcp_timewait_input+0xd4>)
 800bbf4:	f009 f87e 	bl	8014cf4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800bbf8:	4b27      	ldr	r3, [pc, #156]	; (800bc98 <tcp_timewait_input+0xc8>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	f003 0302 	and.w	r3, r3, #2
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d02a      	beq.n	800bc5a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800bc04:	4b28      	ldr	r3, [pc, #160]	; (800bca8 <tcp_timewait_input+0xd8>)
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0c:	1ad3      	subs	r3, r2, r3
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	db2d      	blt.n	800bc6e <tcp_timewait_input+0x9e>
 800bc12:	4b25      	ldr	r3, [pc, #148]	; (800bca8 <tcp_timewait_input+0xd8>)
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1a:	6879      	ldr	r1, [r7, #4]
 800bc1c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bc1e:	440b      	add	r3, r1
 800bc20:	1ad3      	subs	r3, r2, r3
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	dc23      	bgt.n	800bc6e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc26:	4b21      	ldr	r3, [pc, #132]	; (800bcac <tcp_timewait_input+0xdc>)
 800bc28:	6819      	ldr	r1, [r3, #0]
 800bc2a:	4b21      	ldr	r3, [pc, #132]	; (800bcb0 <tcp_timewait_input+0xe0>)
 800bc2c:	881b      	ldrh	r3, [r3, #0]
 800bc2e:	461a      	mov	r2, r3
 800bc30:	4b1d      	ldr	r3, [pc, #116]	; (800bca8 <tcp_timewait_input+0xd8>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc36:	4b1f      	ldr	r3, [pc, #124]	; (800bcb4 <tcp_timewait_input+0xe4>)
 800bc38:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc3a:	885b      	ldrh	r3, [r3, #2]
 800bc3c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc3e:	4a1d      	ldr	r2, [pc, #116]	; (800bcb4 <tcp_timewait_input+0xe4>)
 800bc40:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc42:	8812      	ldrh	r2, [r2, #0]
 800bc44:	b292      	uxth	r2, r2
 800bc46:	9202      	str	r2, [sp, #8]
 800bc48:	9301      	str	r3, [sp, #4]
 800bc4a:	4b1b      	ldr	r3, [pc, #108]	; (800bcb8 <tcp_timewait_input+0xe8>)
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	4b1b      	ldr	r3, [pc, #108]	; (800bcbc <tcp_timewait_input+0xec>)
 800bc50:	4602      	mov	r2, r0
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f003 faca 	bl	800f1ec <tcp_rst>
      return;
 800bc58:	e01b      	b.n	800bc92 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800bc5a:	4b0f      	ldr	r3, [pc, #60]	; (800bc98 <tcp_timewait_input+0xc8>)
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	f003 0301 	and.w	r3, r3, #1
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d003      	beq.n	800bc6e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800bc66:	4b16      	ldr	r3, [pc, #88]	; (800bcc0 <tcp_timewait_input+0xf0>)
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800bc6e:	4b10      	ldr	r3, [pc, #64]	; (800bcb0 <tcp_timewait_input+0xe0>)
 800bc70:	881b      	ldrh	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00c      	beq.n	800bc90 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	8b5b      	ldrh	r3, [r3, #26]
 800bc7a:	f043 0302 	orr.w	r3, r3, #2
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f002 fcfd 	bl	800e684 <tcp_output>
  }
  return;
 800bc8a:	e001      	b.n	800bc90 <tcp_timewait_input+0xc0>
    return;
 800bc8c:	bf00      	nop
 800bc8e:	e000      	b.n	800bc92 <tcp_timewait_input+0xc2>
  return;
 800bc90:	bf00      	nop
}
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	200008d8 	.word	0x200008d8
 800bc9c:	080189dc 	.word	0x080189dc
 800bca0:	08018bf4 	.word	0x08018bf4
 800bca4:	08018a28 	.word	0x08018a28
 800bca8:	200008cc 	.word	0x200008cc
 800bcac:	200008d0 	.word	0x200008d0
 800bcb0:	200008d6 	.word	0x200008d6
 800bcb4:	200008bc 	.word	0x200008bc
 800bcb8:	20005774 	.word	0x20005774
 800bcbc:	20005778 	.word	0x20005778
 800bcc0:	2000ae6c 	.word	0x2000ae6c

0800bcc4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800bcc4:	b590      	push	{r4, r7, lr}
 800bcc6:	b08d      	sub	sp, #52	; 0x34
 800bcc8:	af04      	add	r7, sp, #16
 800bcca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d106      	bne.n	800bce8 <tcp_process+0x24>
 800bcda:	4b9d      	ldr	r3, [pc, #628]	; (800bf50 <tcp_process+0x28c>)
 800bcdc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bce0:	499c      	ldr	r1, [pc, #624]	; (800bf54 <tcp_process+0x290>)
 800bce2:	489d      	ldr	r0, [pc, #628]	; (800bf58 <tcp_process+0x294>)
 800bce4:	f009 f806 	bl	8014cf4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800bce8:	4b9c      	ldr	r3, [pc, #624]	; (800bf5c <tcp_process+0x298>)
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	f003 0304 	and.w	r3, r3, #4
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d04e      	beq.n	800bd92 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	7d1b      	ldrb	r3, [r3, #20]
 800bcf8:	2b02      	cmp	r3, #2
 800bcfa:	d108      	bne.n	800bd0e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd00:	4b97      	ldr	r3, [pc, #604]	; (800bf60 <tcp_process+0x29c>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d123      	bne.n	800bd50 <tcp_process+0x8c>
        acceptable = 1;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	76fb      	strb	r3, [r7, #27]
 800bd0c:	e020      	b.n	800bd50 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd12:	4b94      	ldr	r3, [pc, #592]	; (800bf64 <tcp_process+0x2a0>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d102      	bne.n	800bd20 <tcp_process+0x5c>
        acceptable = 1;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	76fb      	strb	r3, [r7, #27]
 800bd1e:	e017      	b.n	800bd50 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bd20:	4b90      	ldr	r3, [pc, #576]	; (800bf64 <tcp_process+0x2a0>)
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	db10      	blt.n	800bd50 <tcp_process+0x8c>
 800bd2e:	4b8d      	ldr	r3, [pc, #564]	; (800bf64 <tcp_process+0x2a0>)
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd36:	6879      	ldr	r1, [r7, #4]
 800bd38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bd3a:	440b      	add	r3, r1
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	dc06      	bgt.n	800bd50 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	8b5b      	ldrh	r3, [r3, #26]
 800bd46:	f043 0302 	orr.w	r3, r3, #2
 800bd4a:	b29a      	uxth	r2, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bd50:	7efb      	ldrb	r3, [r7, #27]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d01b      	beq.n	800bd8e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	7d1b      	ldrb	r3, [r3, #20]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d106      	bne.n	800bd6c <tcp_process+0xa8>
 800bd5e:	4b7c      	ldr	r3, [pc, #496]	; (800bf50 <tcp_process+0x28c>)
 800bd60:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bd64:	4980      	ldr	r1, [pc, #512]	; (800bf68 <tcp_process+0x2a4>)
 800bd66:	487c      	ldr	r0, [pc, #496]	; (800bf58 <tcp_process+0x294>)
 800bd68:	f008 ffc4 	bl	8014cf4 <iprintf>
      recv_flags |= TF_RESET;
 800bd6c:	4b7f      	ldr	r3, [pc, #508]	; (800bf6c <tcp_process+0x2a8>)
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	f043 0308 	orr.w	r3, r3, #8
 800bd74:	b2da      	uxtb	r2, r3
 800bd76:	4b7d      	ldr	r3, [pc, #500]	; (800bf6c <tcp_process+0x2a8>)
 800bd78:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	8b5b      	ldrh	r3, [r3, #26]
 800bd7e:	f023 0301 	bic.w	r3, r3, #1
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800bd88:	f06f 030d 	mvn.w	r3, #13
 800bd8c:	e37a      	b.n	800c484 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	e378      	b.n	800c484 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bd92:	4b72      	ldr	r3, [pc, #456]	; (800bf5c <tcp_process+0x298>)
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	f003 0302 	and.w	r3, r3, #2
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d010      	beq.n	800bdc0 <tcp_process+0xfc>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	7d1b      	ldrb	r3, [r3, #20]
 800bda2:	2b02      	cmp	r3, #2
 800bda4:	d00c      	beq.n	800bdc0 <tcp_process+0xfc>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	7d1b      	ldrb	r3, [r3, #20]
 800bdaa:	2b03      	cmp	r3, #3
 800bdac:	d008      	beq.n	800bdc0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	8b5b      	ldrh	r3, [r3, #26]
 800bdb2:	f043 0302 	orr.w	r3, r3, #2
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	e361      	b.n	800c484 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	8b5b      	ldrh	r3, [r3, #26]
 800bdc4:	f003 0310 	and.w	r3, r3, #16
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d103      	bne.n	800bdd4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bdcc:	4b68      	ldr	r3, [pc, #416]	; (800bf70 <tcp_process+0x2ac>)
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f001 fc2f 	bl	800d648 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	7d1b      	ldrb	r3, [r3, #20]
 800bdee:	3b02      	subs	r3, #2
 800bdf0:	2b07      	cmp	r3, #7
 800bdf2:	f200 8337 	bhi.w	800c464 <tcp_process+0x7a0>
 800bdf6:	a201      	add	r2, pc, #4	; (adr r2, 800bdfc <tcp_process+0x138>)
 800bdf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdfc:	0800be1d 	.word	0x0800be1d
 800be00:	0800c04d 	.word	0x0800c04d
 800be04:	0800c1c5 	.word	0x0800c1c5
 800be08:	0800c1ef 	.word	0x0800c1ef
 800be0c:	0800c313 	.word	0x0800c313
 800be10:	0800c1c5 	.word	0x0800c1c5
 800be14:	0800c39f 	.word	0x0800c39f
 800be18:	0800c42f 	.word	0x0800c42f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800be1c:	4b4f      	ldr	r3, [pc, #316]	; (800bf5c <tcp_process+0x298>)
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	f003 0310 	and.w	r3, r3, #16
 800be24:	2b00      	cmp	r3, #0
 800be26:	f000 80e4 	beq.w	800bff2 <tcp_process+0x32e>
 800be2a:	4b4c      	ldr	r3, [pc, #304]	; (800bf5c <tcp_process+0x298>)
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	f003 0302 	and.w	r3, r3, #2
 800be32:	2b00      	cmp	r3, #0
 800be34:	f000 80dd 	beq.w	800bff2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be3c:	1c5a      	adds	r2, r3, #1
 800be3e:	4b48      	ldr	r3, [pc, #288]	; (800bf60 <tcp_process+0x29c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	429a      	cmp	r2, r3
 800be44:	f040 80d5 	bne.w	800bff2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800be48:	4b46      	ldr	r3, [pc, #280]	; (800bf64 <tcp_process+0x2a0>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	1c5a      	adds	r2, r3, #1
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800be5a:	4b41      	ldr	r3, [pc, #260]	; (800bf60 <tcp_process+0x29c>)
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800be62:	4b44      	ldr	r3, [pc, #272]	; (800bf74 <tcp_process+0x2b0>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	89db      	ldrh	r3, [r3, #14]
 800be68:	b29a      	uxth	r2, r3
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800be7c:	4b39      	ldr	r3, [pc, #228]	; (800bf64 <tcp_process+0x2a0>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	1e5a      	subs	r2, r3, #1
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2204      	movs	r2, #4
 800be8a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	3304      	adds	r3, #4
 800be94:	4618      	mov	r0, r3
 800be96:	f004 ff49 	bl	8010d2c <ip4_route>
 800be9a:	4601      	mov	r1, r0
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	3304      	adds	r3, #4
 800bea0:	461a      	mov	r2, r3
 800bea2:	4620      	mov	r0, r4
 800bea4:	f7ff f88c 	bl	800afc0 <tcp_eff_send_mss_netif>
 800bea8:	4603      	mov	r3, r0
 800beaa:	461a      	mov	r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800beb4:	009a      	lsls	r2, r3, #2
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800beba:	005b      	lsls	r3, r3, #1
 800bebc:	f241 111c 	movw	r1, #4380	; 0x111c
 800bec0:	428b      	cmp	r3, r1
 800bec2:	bf38      	it	cc
 800bec4:	460b      	movcc	r3, r1
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d204      	bcs.n	800bed4 <tcp_process+0x210>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	e00d      	b.n	800bef0 <tcp_process+0x22c>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bed8:	005b      	lsls	r3, r3, #1
 800beda:	f241 121c 	movw	r2, #4380	; 0x111c
 800bede:	4293      	cmp	r3, r2
 800bee0:	d904      	bls.n	800beec <tcp_process+0x228>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bee6:	005b      	lsls	r3, r3, #1
 800bee8:	b29b      	uxth	r3, r3
 800beea:	e001      	b.n	800bef0 <tcp_process+0x22c>
 800beec:	f241 131c 	movw	r3, #4380	; 0x111c
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800befc:	2b00      	cmp	r3, #0
 800befe:	d106      	bne.n	800bf0e <tcp_process+0x24a>
 800bf00:	4b13      	ldr	r3, [pc, #76]	; (800bf50 <tcp_process+0x28c>)
 800bf02:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800bf06:	491c      	ldr	r1, [pc, #112]	; (800bf78 <tcp_process+0x2b4>)
 800bf08:	4813      	ldr	r0, [pc, #76]	; (800bf58 <tcp_process+0x294>)
 800bf0a:	f008 fef3 	bl	8014cf4 <iprintf>
        --pcb->snd_queuelen;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bf14:	3b01      	subs	r3, #1
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf22:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d12a      	bne.n	800bf80 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf2e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d106      	bne.n	800bf44 <tcp_process+0x280>
 800bf36:	4b06      	ldr	r3, [pc, #24]	; (800bf50 <tcp_process+0x28c>)
 800bf38:	f44f 725d 	mov.w	r2, #884	; 0x374
 800bf3c:	490f      	ldr	r1, [pc, #60]	; (800bf7c <tcp_process+0x2b8>)
 800bf3e:	4806      	ldr	r0, [pc, #24]	; (800bf58 <tcp_process+0x294>)
 800bf40:	f008 fed8 	bl	8014cf4 <iprintf>
          pcb->unsent = rseg->next;
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	66da      	str	r2, [r3, #108]	; 0x6c
 800bf4c:	e01c      	b.n	800bf88 <tcp_process+0x2c4>
 800bf4e:	bf00      	nop
 800bf50:	080189dc 	.word	0x080189dc
 800bf54:	08018c14 	.word	0x08018c14
 800bf58:	08018a28 	.word	0x08018a28
 800bf5c:	200008d8 	.word	0x200008d8
 800bf60:	200008d0 	.word	0x200008d0
 800bf64:	200008cc 	.word	0x200008cc
 800bf68:	08018c30 	.word	0x08018c30
 800bf6c:	200008d9 	.word	0x200008d9
 800bf70:	2000ae6c 	.word	0x2000ae6c
 800bf74:	200008bc 	.word	0x200008bc
 800bf78:	08018c50 	.word	0x08018c50
 800bf7c:	08018c68 	.word	0x08018c68
        } else {
          pcb->unacked = rseg->next;
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800bf88:	69f8      	ldr	r0, [r7, #28]
 800bf8a:	f7fe fc3c 	bl	800a806 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d104      	bne.n	800bfa0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf9c:	861a      	strh	r2, [r3, #48]	; 0x30
 800bf9e:	e006      	b.n	800bfae <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00a      	beq.n	800bfce <tcp_process+0x30a>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	6910      	ldr	r0, [r2, #16]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	6879      	ldr	r1, [r7, #4]
 800bfc6:	4798      	blx	r3
 800bfc8:	4603      	mov	r3, r0
 800bfca:	76bb      	strb	r3, [r7, #26]
 800bfcc:	e001      	b.n	800bfd2 <tcp_process+0x30e>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800bfd2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bfd6:	f113 0f0d 	cmn.w	r3, #13
 800bfda:	d102      	bne.n	800bfe2 <tcp_process+0x31e>
          return ERR_ABRT;
 800bfdc:	f06f 030c 	mvn.w	r3, #12
 800bfe0:	e250      	b.n	800c484 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	8b5b      	ldrh	r3, [r3, #26]
 800bfe6:	f043 0302 	orr.w	r3, r3, #2
 800bfea:	b29a      	uxth	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800bff0:	e23a      	b.n	800c468 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800bff2:	4b98      	ldr	r3, [pc, #608]	; (800c254 <tcp_process+0x590>)
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	f003 0310 	and.w	r3, r3, #16
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 8234 	beq.w	800c468 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c000:	4b95      	ldr	r3, [pc, #596]	; (800c258 <tcp_process+0x594>)
 800c002:	6819      	ldr	r1, [r3, #0]
 800c004:	4b95      	ldr	r3, [pc, #596]	; (800c25c <tcp_process+0x598>)
 800c006:	881b      	ldrh	r3, [r3, #0]
 800c008:	461a      	mov	r2, r3
 800c00a:	4b95      	ldr	r3, [pc, #596]	; (800c260 <tcp_process+0x59c>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c010:	4b94      	ldr	r3, [pc, #592]	; (800c264 <tcp_process+0x5a0>)
 800c012:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c014:	885b      	ldrh	r3, [r3, #2]
 800c016:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c018:	4a92      	ldr	r2, [pc, #584]	; (800c264 <tcp_process+0x5a0>)
 800c01a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c01c:	8812      	ldrh	r2, [r2, #0]
 800c01e:	b292      	uxth	r2, r2
 800c020:	9202      	str	r2, [sp, #8]
 800c022:	9301      	str	r3, [sp, #4]
 800c024:	4b90      	ldr	r3, [pc, #576]	; (800c268 <tcp_process+0x5a4>)
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	4b90      	ldr	r3, [pc, #576]	; (800c26c <tcp_process+0x5a8>)
 800c02a:	4602      	mov	r2, r0
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f003 f8dd 	bl	800f1ec <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c038:	2b05      	cmp	r3, #5
 800c03a:	f200 8215 	bhi.w	800c468 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f002 fea9 	bl	800ed9c <tcp_rexmit_rto>
      break;
 800c04a:	e20d      	b.n	800c468 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c04c:	4b81      	ldr	r3, [pc, #516]	; (800c254 <tcp_process+0x590>)
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	f003 0310 	and.w	r3, r3, #16
 800c054:	2b00      	cmp	r3, #0
 800c056:	f000 80a1 	beq.w	800c19c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c05a:	4b7f      	ldr	r3, [pc, #508]	; (800c258 <tcp_process+0x594>)
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c062:	1ad3      	subs	r3, r2, r3
 800c064:	3b01      	subs	r3, #1
 800c066:	2b00      	cmp	r3, #0
 800c068:	db7e      	blt.n	800c168 <tcp_process+0x4a4>
 800c06a:	4b7b      	ldr	r3, [pc, #492]	; (800c258 <tcp_process+0x594>)
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c072:	1ad3      	subs	r3, r2, r3
 800c074:	2b00      	cmp	r3, #0
 800c076:	dc77      	bgt.n	800c168 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2204      	movs	r2, #4
 800c07c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c082:	2b00      	cmp	r3, #0
 800c084:	d102      	bne.n	800c08c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c086:	23fa      	movs	r3, #250	; 0xfa
 800c088:	76bb      	strb	r3, [r7, #26]
 800c08a:	e01d      	b.n	800c0c8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c090:	699b      	ldr	r3, [r3, #24]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d106      	bne.n	800c0a4 <tcp_process+0x3e0>
 800c096:	4b76      	ldr	r3, [pc, #472]	; (800c270 <tcp_process+0x5ac>)
 800c098:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c09c:	4975      	ldr	r1, [pc, #468]	; (800c274 <tcp_process+0x5b0>)
 800c09e:	4876      	ldr	r0, [pc, #472]	; (800c278 <tcp_process+0x5b4>)
 800c0a0:	f008 fe28 	bl	8014cf4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0a8:	699b      	ldr	r3, [r3, #24]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00a      	beq.n	800c0c4 <tcp_process+0x400>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0b2:	699b      	ldr	r3, [r3, #24]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	6910      	ldr	r0, [r2, #16]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	6879      	ldr	r1, [r7, #4]
 800c0bc:	4798      	blx	r3
 800c0be:	4603      	mov	r3, r0
 800c0c0:	76bb      	strb	r3, [r7, #26]
 800c0c2:	e001      	b.n	800c0c8 <tcp_process+0x404>
 800c0c4:	23f0      	movs	r3, #240	; 0xf0
 800c0c6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c0c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00a      	beq.n	800c0e6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c0d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c0d4:	f113 0f0d 	cmn.w	r3, #13
 800c0d8:	d002      	beq.n	800c0e0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7fd fcee 	bl	8009abc <tcp_abort>
            }
            return ERR_ABRT;
 800c0e0:	f06f 030c 	mvn.w	r3, #12
 800c0e4:	e1ce      	b.n	800c484 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 fae0 	bl	800c6ac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c0ec:	4b63      	ldr	r3, [pc, #396]	; (800c27c <tcp_process+0x5b8>)
 800c0ee:	881b      	ldrh	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d005      	beq.n	800c100 <tcp_process+0x43c>
            recv_acked--;
 800c0f4:	4b61      	ldr	r3, [pc, #388]	; (800c27c <tcp_process+0x5b8>)
 800c0f6:	881b      	ldrh	r3, [r3, #0]
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	b29a      	uxth	r2, r3
 800c0fc:	4b5f      	ldr	r3, [pc, #380]	; (800c27c <tcp_process+0x5b8>)
 800c0fe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c104:	009a      	lsls	r2, r3, #2
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c10a:	005b      	lsls	r3, r3, #1
 800c10c:	f241 111c 	movw	r1, #4380	; 0x111c
 800c110:	428b      	cmp	r3, r1
 800c112:	bf38      	it	cc
 800c114:	460b      	movcc	r3, r1
 800c116:	429a      	cmp	r2, r3
 800c118:	d204      	bcs.n	800c124 <tcp_process+0x460>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	b29b      	uxth	r3, r3
 800c122:	e00d      	b.n	800c140 <tcp_process+0x47c>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c128:	005b      	lsls	r3, r3, #1
 800c12a:	f241 121c 	movw	r2, #4380	; 0x111c
 800c12e:	4293      	cmp	r3, r2
 800c130:	d904      	bls.n	800c13c <tcp_process+0x478>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c136:	005b      	lsls	r3, r3, #1
 800c138:	b29b      	uxth	r3, r3
 800c13a:	e001      	b.n	800c140 <tcp_process+0x47c>
 800c13c:	f241 131c 	movw	r3, #4380	; 0x111c
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c146:	4b4e      	ldr	r3, [pc, #312]	; (800c280 <tcp_process+0x5bc>)
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	f003 0320 	and.w	r3, r3, #32
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d037      	beq.n	800c1c2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	8b5b      	ldrh	r3, [r3, #26]
 800c156:	f043 0302 	orr.w	r3, r3, #2
 800c15a:	b29a      	uxth	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2207      	movs	r2, #7
 800c164:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c166:	e02c      	b.n	800c1c2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c168:	4b3b      	ldr	r3, [pc, #236]	; (800c258 <tcp_process+0x594>)
 800c16a:	6819      	ldr	r1, [r3, #0]
 800c16c:	4b3b      	ldr	r3, [pc, #236]	; (800c25c <tcp_process+0x598>)
 800c16e:	881b      	ldrh	r3, [r3, #0]
 800c170:	461a      	mov	r2, r3
 800c172:	4b3b      	ldr	r3, [pc, #236]	; (800c260 <tcp_process+0x59c>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c178:	4b3a      	ldr	r3, [pc, #232]	; (800c264 <tcp_process+0x5a0>)
 800c17a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c17c:	885b      	ldrh	r3, [r3, #2]
 800c17e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c180:	4a38      	ldr	r2, [pc, #224]	; (800c264 <tcp_process+0x5a0>)
 800c182:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c184:	8812      	ldrh	r2, [r2, #0]
 800c186:	b292      	uxth	r2, r2
 800c188:	9202      	str	r2, [sp, #8]
 800c18a:	9301      	str	r3, [sp, #4]
 800c18c:	4b36      	ldr	r3, [pc, #216]	; (800c268 <tcp_process+0x5a4>)
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	4b36      	ldr	r3, [pc, #216]	; (800c26c <tcp_process+0x5a8>)
 800c192:	4602      	mov	r2, r0
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f003 f829 	bl	800f1ec <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c19a:	e167      	b.n	800c46c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c19c:	4b2d      	ldr	r3, [pc, #180]	; (800c254 <tcp_process+0x590>)
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	f003 0302 	and.w	r3, r3, #2
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	f000 8161 	beq.w	800c46c <tcp_process+0x7a8>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ae:	1e5a      	subs	r2, r3, #1
 800c1b0:	4b2b      	ldr	r3, [pc, #172]	; (800c260 <tcp_process+0x59c>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	f040 8159 	bne.w	800c46c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f002 fe10 	bl	800ede0 <tcp_rexmit>
      break;
 800c1c0:	e154      	b.n	800c46c <tcp_process+0x7a8>
 800c1c2:	e153      	b.n	800c46c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 fa71 	bl	800c6ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c1ca:	4b2d      	ldr	r3, [pc, #180]	; (800c280 <tcp_process+0x5bc>)
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	f003 0320 	and.w	r3, r3, #32
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f000 814c 	beq.w	800c470 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	8b5b      	ldrh	r3, [r3, #26]
 800c1dc:	f043 0302 	orr.w	r3, r3, #2
 800c1e0:	b29a      	uxth	r2, r3
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2207      	movs	r2, #7
 800c1ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c1ec:	e140      	b.n	800c470 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 fa5c 	bl	800c6ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c1f4:	4b22      	ldr	r3, [pc, #136]	; (800c280 <tcp_process+0x5bc>)
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	f003 0320 	and.w	r3, r3, #32
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d071      	beq.n	800c2e4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c200:	4b14      	ldr	r3, [pc, #80]	; (800c254 <tcp_process+0x590>)
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	f003 0310 	and.w	r3, r3, #16
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d060      	beq.n	800c2ce <tcp_process+0x60a>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c210:	4b11      	ldr	r3, [pc, #68]	; (800c258 <tcp_process+0x594>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	429a      	cmp	r2, r3
 800c216:	d15a      	bne.n	800c2ce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d156      	bne.n	800c2ce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	8b5b      	ldrh	r3, [r3, #26]
 800c224:	f043 0302 	orr.w	r3, r3, #2
 800c228:	b29a      	uxth	r2, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f7fe fdbc 	bl	800adac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c234:	4b13      	ldr	r3, [pc, #76]	; (800c284 <tcp_process+0x5c0>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d105      	bne.n	800c24a <tcp_process+0x586>
 800c23e:	4b11      	ldr	r3, [pc, #68]	; (800c284 <tcp_process+0x5c0>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	4a0f      	ldr	r2, [pc, #60]	; (800c284 <tcp_process+0x5c0>)
 800c246:	6013      	str	r3, [r2, #0]
 800c248:	e02e      	b.n	800c2a8 <tcp_process+0x5e4>
 800c24a:	4b0e      	ldr	r3, [pc, #56]	; (800c284 <tcp_process+0x5c0>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	617b      	str	r3, [r7, #20]
 800c250:	e027      	b.n	800c2a2 <tcp_process+0x5de>
 800c252:	bf00      	nop
 800c254:	200008d8 	.word	0x200008d8
 800c258:	200008d0 	.word	0x200008d0
 800c25c:	200008d6 	.word	0x200008d6
 800c260:	200008cc 	.word	0x200008cc
 800c264:	200008bc 	.word	0x200008bc
 800c268:	20005774 	.word	0x20005774
 800c26c:	20005778 	.word	0x20005778
 800c270:	080189dc 	.word	0x080189dc
 800c274:	08018c7c 	.word	0x08018c7c
 800c278:	08018a28 	.word	0x08018a28
 800c27c:	200008d4 	.word	0x200008d4
 800c280:	200008d9 	.word	0x200008d9
 800c284:	2000ae68 	.word	0x2000ae68
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d104      	bne.n	800c29c <tcp_process+0x5d8>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	68da      	ldr	r2, [r3, #12]
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	60da      	str	r2, [r3, #12]
 800c29a:	e005      	b.n	800c2a8 <tcp_process+0x5e4>
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	617b      	str	r3, [r7, #20]
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1ef      	bne.n	800c288 <tcp_process+0x5c4>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	60da      	str	r2, [r3, #12]
 800c2ae:	4b77      	ldr	r3, [pc, #476]	; (800c48c <tcp_process+0x7c8>)
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	220a      	movs	r2, #10
 800c2b8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c2ba:	4b75      	ldr	r3, [pc, #468]	; (800c490 <tcp_process+0x7cc>)
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	60da      	str	r2, [r3, #12]
 800c2c2:	4a73      	ldr	r2, [pc, #460]	; (800c490 <tcp_process+0x7cc>)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6013      	str	r3, [r2, #0]
 800c2c8:	f003 f952 	bl	800f570 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c2cc:	e0d2      	b.n	800c474 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	8b5b      	ldrh	r3, [r3, #26]
 800c2d2:	f043 0302 	orr.w	r3, r3, #2
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2208      	movs	r2, #8
 800c2e0:	751a      	strb	r2, [r3, #20]
      break;
 800c2e2:	e0c7      	b.n	800c474 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c2e4:	4b6b      	ldr	r3, [pc, #428]	; (800c494 <tcp_process+0x7d0>)
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	f003 0310 	and.w	r3, r3, #16
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f000 80c1 	beq.w	800c474 <tcp_process+0x7b0>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2f6:	4b68      	ldr	r3, [pc, #416]	; (800c498 <tcp_process+0x7d4>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	f040 80ba 	bne.w	800c474 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c304:	2b00      	cmp	r3, #0
 800c306:	f040 80b5 	bne.w	800c474 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2206      	movs	r2, #6
 800c30e:	751a      	strb	r2, [r3, #20]
      break;
 800c310:	e0b0      	b.n	800c474 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 f9ca 	bl	800c6ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c318:	4b60      	ldr	r3, [pc, #384]	; (800c49c <tcp_process+0x7d8>)
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	f003 0320 	and.w	r3, r3, #32
 800c320:	2b00      	cmp	r3, #0
 800c322:	f000 80a9 	beq.w	800c478 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	8b5b      	ldrh	r3, [r3, #26]
 800c32a:	f043 0302 	orr.w	r3, r3, #2
 800c32e:	b29a      	uxth	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f7fe fd39 	bl	800adac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c33a:	4b59      	ldr	r3, [pc, #356]	; (800c4a0 <tcp_process+0x7dc>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	429a      	cmp	r2, r3
 800c342:	d105      	bne.n	800c350 <tcp_process+0x68c>
 800c344:	4b56      	ldr	r3, [pc, #344]	; (800c4a0 <tcp_process+0x7dc>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	4a55      	ldr	r2, [pc, #340]	; (800c4a0 <tcp_process+0x7dc>)
 800c34c:	6013      	str	r3, [r2, #0]
 800c34e:	e013      	b.n	800c378 <tcp_process+0x6b4>
 800c350:	4b53      	ldr	r3, [pc, #332]	; (800c4a0 <tcp_process+0x7dc>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	613b      	str	r3, [r7, #16]
 800c356:	e00c      	b.n	800c372 <tcp_process+0x6ae>
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d104      	bne.n	800c36c <tcp_process+0x6a8>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	68da      	ldr	r2, [r3, #12]
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	60da      	str	r2, [r3, #12]
 800c36a:	e005      	b.n	800c378 <tcp_process+0x6b4>
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	613b      	str	r3, [r7, #16]
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d1ef      	bne.n	800c358 <tcp_process+0x694>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	60da      	str	r2, [r3, #12]
 800c37e:	4b43      	ldr	r3, [pc, #268]	; (800c48c <tcp_process+0x7c8>)
 800c380:	2201      	movs	r2, #1
 800c382:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	220a      	movs	r2, #10
 800c388:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c38a:	4b41      	ldr	r3, [pc, #260]	; (800c490 <tcp_process+0x7cc>)
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	60da      	str	r2, [r3, #12]
 800c392:	4a3f      	ldr	r2, [pc, #252]	; (800c490 <tcp_process+0x7cc>)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6013      	str	r3, [r2, #0]
 800c398:	f003 f8ea 	bl	800f570 <tcp_timer_needed>
      }
      break;
 800c39c:	e06c      	b.n	800c478 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f984 	bl	800c6ac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c3a4:	4b3b      	ldr	r3, [pc, #236]	; (800c494 <tcp_process+0x7d0>)
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	f003 0310 	and.w	r3, r3, #16
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d065      	beq.n	800c47c <tcp_process+0x7b8>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c3b4:	4b38      	ldr	r3, [pc, #224]	; (800c498 <tcp_process+0x7d4>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d15f      	bne.n	800c47c <tcp_process+0x7b8>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d15b      	bne.n	800c47c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7fe fcf1 	bl	800adac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c3ca:	4b35      	ldr	r3, [pc, #212]	; (800c4a0 <tcp_process+0x7dc>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d105      	bne.n	800c3e0 <tcp_process+0x71c>
 800c3d4:	4b32      	ldr	r3, [pc, #200]	; (800c4a0 <tcp_process+0x7dc>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	4a31      	ldr	r2, [pc, #196]	; (800c4a0 <tcp_process+0x7dc>)
 800c3dc:	6013      	str	r3, [r2, #0]
 800c3de:	e013      	b.n	800c408 <tcp_process+0x744>
 800c3e0:	4b2f      	ldr	r3, [pc, #188]	; (800c4a0 <tcp_process+0x7dc>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	60fb      	str	r3, [r7, #12]
 800c3e6:	e00c      	b.n	800c402 <tcp_process+0x73e>
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d104      	bne.n	800c3fc <tcp_process+0x738>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68da      	ldr	r2, [r3, #12]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	60da      	str	r2, [r3, #12]
 800c3fa:	e005      	b.n	800c408 <tcp_process+0x744>
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	60fb      	str	r3, [r7, #12]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1ef      	bne.n	800c3e8 <tcp_process+0x724>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	60da      	str	r2, [r3, #12]
 800c40e:	4b1f      	ldr	r3, [pc, #124]	; (800c48c <tcp_process+0x7c8>)
 800c410:	2201      	movs	r2, #1
 800c412:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	220a      	movs	r2, #10
 800c418:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c41a:	4b1d      	ldr	r3, [pc, #116]	; (800c490 <tcp_process+0x7cc>)
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	60da      	str	r2, [r3, #12]
 800c422:	4a1b      	ldr	r2, [pc, #108]	; (800c490 <tcp_process+0x7cc>)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6013      	str	r3, [r2, #0]
 800c428:	f003 f8a2 	bl	800f570 <tcp_timer_needed>
      }
      break;
 800c42c:	e026      	b.n	800c47c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f93c 	bl	800c6ac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c434:	4b17      	ldr	r3, [pc, #92]	; (800c494 <tcp_process+0x7d0>)
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	f003 0310 	and.w	r3, r3, #16
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d01f      	beq.n	800c480 <tcp_process+0x7bc>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c444:	4b14      	ldr	r3, [pc, #80]	; (800c498 <tcp_process+0x7d4>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	429a      	cmp	r2, r3
 800c44a:	d119      	bne.n	800c480 <tcp_process+0x7bc>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c450:	2b00      	cmp	r3, #0
 800c452:	d115      	bne.n	800c480 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c454:	4b11      	ldr	r3, [pc, #68]	; (800c49c <tcp_process+0x7d8>)
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	f043 0310 	orr.w	r3, r3, #16
 800c45c:	b2da      	uxtb	r2, r3
 800c45e:	4b0f      	ldr	r3, [pc, #60]	; (800c49c <tcp_process+0x7d8>)
 800c460:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c462:	e00d      	b.n	800c480 <tcp_process+0x7bc>
    default:
      break;
 800c464:	bf00      	nop
 800c466:	e00c      	b.n	800c482 <tcp_process+0x7be>
      break;
 800c468:	bf00      	nop
 800c46a:	e00a      	b.n	800c482 <tcp_process+0x7be>
      break;
 800c46c:	bf00      	nop
 800c46e:	e008      	b.n	800c482 <tcp_process+0x7be>
      break;
 800c470:	bf00      	nop
 800c472:	e006      	b.n	800c482 <tcp_process+0x7be>
      break;
 800c474:	bf00      	nop
 800c476:	e004      	b.n	800c482 <tcp_process+0x7be>
      break;
 800c478:	bf00      	nop
 800c47a:	e002      	b.n	800c482 <tcp_process+0x7be>
      break;
 800c47c:	bf00      	nop
 800c47e:	e000      	b.n	800c482 <tcp_process+0x7be>
      break;
 800c480:	bf00      	nop
  }
  return ERR_OK;
 800c482:	2300      	movs	r3, #0
}
 800c484:	4618      	mov	r0, r3
 800c486:	3724      	adds	r7, #36	; 0x24
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd90      	pop	{r4, r7, pc}
 800c48c:	2000ae64 	.word	0x2000ae64
 800c490:	2000ae78 	.word	0x2000ae78
 800c494:	200008d8 	.word	0x200008d8
 800c498:	200008d0 	.word	0x200008d0
 800c49c:	200008d9 	.word	0x200008d9
 800c4a0:	2000ae68 	.word	0x2000ae68

0800c4a4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c4a4:	b590      	push	{r4, r7, lr}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d106      	bne.n	800c4c2 <tcp_oos_insert_segment+0x1e>
 800c4b4:	4b3b      	ldr	r3, [pc, #236]	; (800c5a4 <tcp_oos_insert_segment+0x100>)
 800c4b6:	f240 421f 	movw	r2, #1055	; 0x41f
 800c4ba:	493b      	ldr	r1, [pc, #236]	; (800c5a8 <tcp_oos_insert_segment+0x104>)
 800c4bc:	483b      	ldr	r0, [pc, #236]	; (800c5ac <tcp_oos_insert_segment+0x108>)
 800c4be:	f008 fc19 	bl	8014cf4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	899b      	ldrh	r3, [r3, #12]
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fb fa00 	bl	80078d0 <lwip_htons>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	f003 0301 	and.w	r3, r3, #1
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d028      	beq.n	800c52e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c4dc:	6838      	ldr	r0, [r7, #0]
 800c4de:	f7fe f97d 	bl	800a7dc <tcp_segs_free>
    next = NULL;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	603b      	str	r3, [r7, #0]
 800c4e6:	e056      	b.n	800c596 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	899b      	ldrh	r3, [r3, #12]
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7fb f9ed 	bl	80078d0 <lwip_htons>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	f003 0301 	and.w	r3, r3, #1
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d00d      	beq.n	800c51e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	899b      	ldrh	r3, [r3, #12]
 800c508:	b29c      	uxth	r4, r3
 800c50a:	2001      	movs	r0, #1
 800c50c:	f7fb f9e0 	bl	80078d0 <lwip_htons>
 800c510:	4603      	mov	r3, r0
 800c512:	461a      	mov	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	4322      	orrs	r2, r4
 800c51a:	b292      	uxth	r2, r2
 800c51c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f7fe f96c 	bl	800a806 <tcp_seg_free>
    while (next &&
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00e      	beq.n	800c552 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	891b      	ldrh	r3, [r3, #8]
 800c538:	461a      	mov	r2, r3
 800c53a:	4b1d      	ldr	r3, [pc, #116]	; (800c5b0 <tcp_oos_insert_segment+0x10c>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	441a      	add	r2, r3
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	6839      	ldr	r1, [r7, #0]
 800c548:	8909      	ldrh	r1, [r1, #8]
 800c54a:	440b      	add	r3, r1
 800c54c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c54e:	2b00      	cmp	r3, #0
 800c550:	daca      	bge.n	800c4e8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d01e      	beq.n	800c596 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	891b      	ldrh	r3, [r3, #8]
 800c55c:	461a      	mov	r2, r3
 800c55e:	4b14      	ldr	r3, [pc, #80]	; (800c5b0 <tcp_oos_insert_segment+0x10c>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	441a      	add	r2, r3
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	dd12      	ble.n	800c596 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	b29a      	uxth	r2, r3
 800c578:	4b0d      	ldr	r3, [pc, #52]	; (800c5b0 <tcp_oos_insert_segment+0x10c>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	b29a      	uxth	r2, r3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	685a      	ldr	r2, [r3, #4]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	891b      	ldrh	r3, [r3, #8]
 800c58e:	4619      	mov	r1, r3
 800c590:	4610      	mov	r0, r2
 800c592:	f7fc fb75 	bl	8008c80 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	683a      	ldr	r2, [r7, #0]
 800c59a:	601a      	str	r2, [r3, #0]
}
 800c59c:	bf00      	nop
 800c59e:	3714      	adds	r7, #20
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd90      	pop	{r4, r7, pc}
 800c5a4:	080189dc 	.word	0x080189dc
 800c5a8:	08018c9c 	.word	0x08018c9c
 800c5ac:	08018a28 	.word	0x08018a28
 800c5b0:	200008cc 	.word	0x200008cc

0800c5b4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c5b4:	b5b0      	push	{r4, r5, r7, lr}
 800c5b6:	b086      	sub	sp, #24
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
 800c5c0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c5c2:	e03e      	b.n	800c642 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fc fd62 	bl	800909c <pbuf_clen>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c5e2:	8a7a      	ldrh	r2, [r7, #18]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d906      	bls.n	800c5f6 <tcp_free_acked_segments+0x42>
 800c5e8:	4b2a      	ldr	r3, [pc, #168]	; (800c694 <tcp_free_acked_segments+0xe0>)
 800c5ea:	f240 4257 	movw	r2, #1111	; 0x457
 800c5ee:	492a      	ldr	r1, [pc, #168]	; (800c698 <tcp_free_acked_segments+0xe4>)
 800c5f0:	482a      	ldr	r0, [pc, #168]	; (800c69c <tcp_free_acked_segments+0xe8>)
 800c5f2:	f008 fb7f 	bl	8014cf4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c5fc:	8a7b      	ldrh	r3, [r7, #18]
 800c5fe:	1ad3      	subs	r3, r2, r3
 800c600:	b29a      	uxth	r2, r3
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	891a      	ldrh	r2, [r3, #8]
 800c60c:	4b24      	ldr	r3, [pc, #144]	; (800c6a0 <tcp_free_acked_segments+0xec>)
 800c60e:	881b      	ldrh	r3, [r3, #0]
 800c610:	4413      	add	r3, r2
 800c612:	b29a      	uxth	r2, r3
 800c614:	4b22      	ldr	r3, [pc, #136]	; (800c6a0 <tcp_free_acked_segments+0xec>)
 800c616:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c618:	6978      	ldr	r0, [r7, #20]
 800c61a:	f7fe f8f4 	bl	800a806 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c624:	2b00      	cmp	r3, #0
 800c626:	d00c      	beq.n	800c642 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d109      	bne.n	800c642 <tcp_free_acked_segments+0x8e>
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d106      	bne.n	800c642 <tcp_free_acked_segments+0x8e>
 800c634:	4b17      	ldr	r3, [pc, #92]	; (800c694 <tcp_free_acked_segments+0xe0>)
 800c636:	f240 4261 	movw	r2, #1121	; 0x461
 800c63a:	491a      	ldr	r1, [pc, #104]	; (800c6a4 <tcp_free_acked_segments+0xf0>)
 800c63c:	4817      	ldr	r0, [pc, #92]	; (800c69c <tcp_free_acked_segments+0xe8>)
 800c63e:	f008 fb59 	bl	8014cf4 <iprintf>
  while (seg_list != NULL &&
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d020      	beq.n	800c68a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fb f953 	bl	80078fa <lwip_htonl>
 800c654:	4604      	mov	r4, r0
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	891b      	ldrh	r3, [r3, #8]
 800c65a:	461d      	mov	r5, r3
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	899b      	ldrh	r3, [r3, #12]
 800c662:	b29b      	uxth	r3, r3
 800c664:	4618      	mov	r0, r3
 800c666:	f7fb f933 	bl	80078d0 <lwip_htons>
 800c66a:	4603      	mov	r3, r0
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	f003 0303 	and.w	r3, r3, #3
 800c672:	2b00      	cmp	r3, #0
 800c674:	d001      	beq.n	800c67a <tcp_free_acked_segments+0xc6>
 800c676:	2301      	movs	r3, #1
 800c678:	e000      	b.n	800c67c <tcp_free_acked_segments+0xc8>
 800c67a:	2300      	movs	r3, #0
 800c67c:	442b      	add	r3, r5
 800c67e:	18e2      	adds	r2, r4, r3
 800c680:	4b09      	ldr	r3, [pc, #36]	; (800c6a8 <tcp_free_acked_segments+0xf4>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c686:	2b00      	cmp	r3, #0
 800c688:	dd9c      	ble.n	800c5c4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c68a:	68bb      	ldr	r3, [r7, #8]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3718      	adds	r7, #24
 800c690:	46bd      	mov	sp, r7
 800c692:	bdb0      	pop	{r4, r5, r7, pc}
 800c694:	080189dc 	.word	0x080189dc
 800c698:	08018cc4 	.word	0x08018cc4
 800c69c:	08018a28 	.word	0x08018a28
 800c6a0:	200008d4 	.word	0x200008d4
 800c6a4:	08018cec 	.word	0x08018cec
 800c6a8:	200008d0 	.word	0x200008d0

0800c6ac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c6ac:	b5b0      	push	{r4, r5, r7, lr}
 800c6ae:	b094      	sub	sp, #80	; 0x50
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d106      	bne.n	800c6cc <tcp_receive+0x20>
 800c6be:	4b91      	ldr	r3, [pc, #580]	; (800c904 <tcp_receive+0x258>)
 800c6c0:	f240 427b 	movw	r2, #1147	; 0x47b
 800c6c4:	4990      	ldr	r1, [pc, #576]	; (800c908 <tcp_receive+0x25c>)
 800c6c6:	4891      	ldr	r0, [pc, #580]	; (800c90c <tcp_receive+0x260>)
 800c6c8:	f008 fb14 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	7d1b      	ldrb	r3, [r3, #20]
 800c6d0:	2b03      	cmp	r3, #3
 800c6d2:	d806      	bhi.n	800c6e2 <tcp_receive+0x36>
 800c6d4:	4b8b      	ldr	r3, [pc, #556]	; (800c904 <tcp_receive+0x258>)
 800c6d6:	f240 427c 	movw	r2, #1148	; 0x47c
 800c6da:	498d      	ldr	r1, [pc, #564]	; (800c910 <tcp_receive+0x264>)
 800c6dc:	488b      	ldr	r0, [pc, #556]	; (800c90c <tcp_receive+0x260>)
 800c6de:	f008 fb09 	bl	8014cf4 <iprintf>

  if (flags & TCP_ACK) {
 800c6e2:	4b8c      	ldr	r3, [pc, #560]	; (800c914 <tcp_receive+0x268>)
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	f003 0310 	and.w	r3, r3, #16
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f000 8264 	beq.w	800cbb8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6fc:	4413      	add	r3, r2
 800c6fe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c704:	4b84      	ldr	r3, [pc, #528]	; (800c918 <tcp_receive+0x26c>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	1ad3      	subs	r3, r2, r3
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	db1b      	blt.n	800c746 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c712:	4b81      	ldr	r3, [pc, #516]	; (800c918 <tcp_receive+0x26c>)
 800c714:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c716:	429a      	cmp	r2, r3
 800c718:	d106      	bne.n	800c728 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c71e:	4b7f      	ldr	r3, [pc, #508]	; (800c91c <tcp_receive+0x270>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	1ad3      	subs	r3, r2, r3
 800c724:	2b00      	cmp	r3, #0
 800c726:	db0e      	blt.n	800c746 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c72c:	4b7b      	ldr	r3, [pc, #492]	; (800c91c <tcp_receive+0x270>)
 800c72e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c730:	429a      	cmp	r2, r3
 800c732:	d125      	bne.n	800c780 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c734:	4b7a      	ldr	r3, [pc, #488]	; (800c920 <tcp_receive+0x274>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	89db      	ldrh	r3, [r3, #14]
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c742:	429a      	cmp	r2, r3
 800c744:	d91c      	bls.n	800c780 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c746:	4b76      	ldr	r3, [pc, #472]	; (800c920 <tcp_receive+0x274>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	89db      	ldrh	r3, [r3, #14]
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c760:	429a      	cmp	r2, r3
 800c762:	d205      	bcs.n	800c770 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c770:	4b69      	ldr	r3, [pc, #420]	; (800c918 <tcp_receive+0x26c>)
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c778:	4b68      	ldr	r3, [pc, #416]	; (800c91c <tcp_receive+0x270>)
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c780:	4b66      	ldr	r3, [pc, #408]	; (800c91c <tcp_receive+0x270>)
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c788:	1ad3      	subs	r3, r2, r3
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	dc58      	bgt.n	800c840 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c78e:	4b65      	ldr	r3, [pc, #404]	; (800c924 <tcp_receive+0x278>)
 800c790:	881b      	ldrh	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d14b      	bne.n	800c82e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c7a0:	4413      	add	r3, r2
 800c7a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d142      	bne.n	800c82e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	db3d      	blt.n	800c82e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7b6:	4b59      	ldr	r3, [pc, #356]	; (800c91c <tcp_receive+0x270>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d137      	bne.n	800c82e <tcp_receive+0x182>
              found_dupack = 1;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c7c8:	2bff      	cmp	r3, #255	; 0xff
 800c7ca:	d007      	beq.n	800c7dc <tcp_receive+0x130>
                ++pcb->dupacks;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	b2da      	uxtb	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c7e2:	2b03      	cmp	r3, #3
 800c7e4:	d91b      	bls.n	800c81e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7f0:	4413      	add	r3, r2
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d30a      	bcc.n	800c814 <tcp_receive+0x168>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c808:	4413      	add	r3, r2
 800c80a:	b29a      	uxth	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c812:	e004      	b.n	800c81e <tcp_receive+0x172>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c81a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c824:	2b02      	cmp	r3, #2
 800c826:	d902      	bls.n	800c82e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f002 fb45 	bl	800eeb8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c82e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c830:	2b00      	cmp	r3, #0
 800c832:	f040 8161 	bne.w	800caf8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c83e:	e15b      	b.n	800caf8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c840:	4b36      	ldr	r3, [pc, #216]	; (800c91c <tcp_receive+0x270>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	3b01      	subs	r3, #1
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f2c0 814e 	blt.w	800caee <tcp_receive+0x442>
 800c852:	4b32      	ldr	r3, [pc, #200]	; (800c91c <tcp_receive+0x270>)
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c85a:	1ad3      	subs	r3, r2, r3
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f300 8146 	bgt.w	800caee <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	8b5b      	ldrh	r3, [r3, #26]
 800c866:	f003 0304 	and.w	r3, r3, #4
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d010      	beq.n	800c890 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	8b5b      	ldrh	r3, [r3, #26]
 800c872:	f023 0304 	bic.w	r3, r3, #4
 800c876:	b29a      	uxth	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2200      	movs	r2, #0
 800c894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c89e:	10db      	asrs	r3, r3, #3
 800c8a0:	b21b      	sxth	r3, r3
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	4413      	add	r3, r2
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	b21a      	sxth	r2, r3
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c8b8:	4b18      	ldr	r3, [pc, #96]	; (800c91c <tcp_receive+0x270>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	1ad3      	subs	r3, r2, r3
 800c8c6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c8d0:	4b12      	ldr	r3, [pc, #72]	; (800c91c <tcp_receive+0x270>)
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	7d1b      	ldrb	r3, [r3, #20]
 800c8dc:	2b03      	cmp	r3, #3
 800c8de:	f240 8097 	bls.w	800ca10 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d245      	bcs.n	800c97e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	8b5b      	ldrh	r3, [r3, #26]
 800c8f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d014      	beq.n	800c928 <tcp_receive+0x27c>
 800c8fe:	2301      	movs	r3, #1
 800c900:	e013      	b.n	800c92a <tcp_receive+0x27e>
 800c902:	bf00      	nop
 800c904:	080189dc 	.word	0x080189dc
 800c908:	08018d0c 	.word	0x08018d0c
 800c90c:	08018a28 	.word	0x08018a28
 800c910:	08018d28 	.word	0x08018d28
 800c914:	200008d8 	.word	0x200008d8
 800c918:	200008cc 	.word	0x200008cc
 800c91c:	200008d0 	.word	0x200008d0
 800c920:	200008bc 	.word	0x200008bc
 800c924:	200008d6 	.word	0x200008d6
 800c928:	2302      	movs	r3, #2
 800c92a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c92e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c932:	b29a      	uxth	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c938:	fb12 f303 	smulbb	r3, r2, r3
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c940:	4293      	cmp	r3, r2
 800c942:	bf28      	it	cs
 800c944:	4613      	movcs	r3, r2
 800c946:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c94e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c950:	4413      	add	r3, r2
 800c952:	b29a      	uxth	r2, r3
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d309      	bcc.n	800c972 <tcp_receive+0x2c6>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c964:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c966:	4413      	add	r3, r2
 800c968:	b29a      	uxth	r2, r3
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c970:	e04e      	b.n	800ca10 <tcp_receive+0x364>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c978:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c97c:	e048      	b.n	800ca10 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c984:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c986:	4413      	add	r3, r2
 800c988:	b29a      	uxth	r2, r3
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c990:	429a      	cmp	r2, r3
 800c992:	d309      	bcc.n	800c9a8 <tcp_receive+0x2fc>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c99a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c99c:	4413      	add	r3, r2
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c9a6:	e004      	b.n	800c9b2 <tcp_receive+0x306>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d326      	bcc.n	800ca10 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c9ce:	1ad3      	subs	r3, r2, r3
 800c9d0:	b29a      	uxth	r2, r3
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c9e2:	4413      	add	r3, r2
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d30a      	bcc.n	800ca06 <tcp_receive+0x35a>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c9fa:	4413      	add	r3, r2
 800c9fc:	b29a      	uxth	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ca04:	e004      	b.n	800ca10 <tcp_receive+0x364>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca18:	4a98      	ldr	r2, [pc, #608]	; (800cc7c <tcp_receive+0x5d0>)
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7ff fdca 	bl	800c5b4 <tcp_free_acked_segments>
 800ca20:	4602      	mov	r2, r0
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca2e:	4a94      	ldr	r2, [pc, #592]	; (800cc80 <tcp_receive+0x5d4>)
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f7ff fdbf 	bl	800c5b4 <tcp_free_acked_segments>
 800ca36:	4602      	mov	r2, r0
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d104      	bne.n	800ca4e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca4a:	861a      	strh	r2, [r3, #48]	; 0x30
 800ca4c:	e002      	b.n	800ca54 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2200      	movs	r2, #0
 800ca52:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d103      	bne.n	800ca6a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ca70:	4b84      	ldr	r3, [pc, #528]	; (800cc84 <tcp_receive+0x5d8>)
 800ca72:	881b      	ldrh	r3, [r3, #0]
 800ca74:	4413      	add	r3, r2
 800ca76:	b29a      	uxth	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	8b5b      	ldrh	r3, [r3, #26]
 800ca82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d035      	beq.n	800caf6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d118      	bne.n	800cac4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00c      	beq.n	800cab4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7fa ff27 	bl	80078fa <lwip_htonl>
 800caac:	4603      	mov	r3, r0
 800caae:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	dc20      	bgt.n	800caf6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	8b5b      	ldrh	r3, [r3, #26]
 800cab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cabc:	b29a      	uxth	r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cac2:	e018      	b.n	800caf6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7fa ff12 	bl	80078fa <lwip_htonl>
 800cad6:	4603      	mov	r3, r0
 800cad8:	1ae3      	subs	r3, r4, r3
 800cada:	2b00      	cmp	r3, #0
 800cadc:	dc0b      	bgt.n	800caf6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	8b5b      	ldrh	r3, [r3, #26]
 800cae2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cae6:	b29a      	uxth	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800caec:	e003      	b.n	800caf6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f002 fbce 	bl	800f290 <tcp_send_empty_ack>
 800caf4:	e000      	b.n	800caf8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800caf6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d05b      	beq.n	800cbb8 <tcp_receive+0x50c>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb04:	4b60      	ldr	r3, [pc, #384]	; (800cc88 <tcp_receive+0x5dc>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	1ad3      	subs	r3, r2, r3
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	da54      	bge.n	800cbb8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800cb0e:	4b5f      	ldr	r3, [pc, #380]	; (800cc8c <tcp_receive+0x5e0>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	b29a      	uxth	r2, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	1ad3      	subs	r3, r2, r3
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800cb22:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cb2c:	10db      	asrs	r3, r3, #3
 800cb2e:	b21b      	sxth	r3, r3
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	1ad3      	subs	r3, r2, r3
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cb40:	b29a      	uxth	r2, r3
 800cb42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cb46:	4413      	add	r3, r2
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	b21a      	sxth	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800cb50:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	da05      	bge.n	800cb64 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800cb58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cb5c:	425b      	negs	r3, r3
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800cb64:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cb6e:	109b      	asrs	r3, r3, #2
 800cb70:	b21b      	sxth	r3, r3
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cb88:	4413      	add	r3, r2
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	b21a      	sxth	r2, r3
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cb98:	10db      	asrs	r3, r3, #3
 800cb9a:	b21b      	sxth	r3, r3
 800cb9c:	b29a      	uxth	r2, r3
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	4413      	add	r3, r2
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	b21a      	sxth	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800cbb8:	4b35      	ldr	r3, [pc, #212]	; (800cc90 <tcp_receive+0x5e4>)
 800cbba:	881b      	ldrh	r3, [r3, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	f000 84e2 	beq.w	800d586 <tcp_receive+0xeda>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	7d1b      	ldrb	r3, [r3, #20]
 800cbc6:	2b06      	cmp	r3, #6
 800cbc8:	f200 84dd 	bhi.w	800d586 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbd0:	4b30      	ldr	r3, [pc, #192]	; (800cc94 <tcp_receive+0x5e8>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	1ad3      	subs	r3, r2, r3
 800cbd6:	3b01      	subs	r3, #1
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f2c0 808f 	blt.w	800ccfc <tcp_receive+0x650>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbe2:	4b2b      	ldr	r3, [pc, #172]	; (800cc90 <tcp_receive+0x5e4>)
 800cbe4:	881b      	ldrh	r3, [r3, #0]
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	4b2a      	ldr	r3, [pc, #168]	; (800cc94 <tcp_receive+0x5e8>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	440b      	add	r3, r1
 800cbee:	1ad3      	subs	r3, r2, r3
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	f300 8082 	bgt.w	800ccfc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800cbf8:	4b27      	ldr	r3, [pc, #156]	; (800cc98 <tcp_receive+0x5ec>)
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc02:	4b24      	ldr	r3, [pc, #144]	; (800cc94 <tcp_receive+0x5e8>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	1ad3      	subs	r3, r2, r3
 800cc08:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800cc0a:	4b23      	ldr	r3, [pc, #140]	; (800cc98 <tcp_receive+0x5ec>)
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d106      	bne.n	800cc20 <tcp_receive+0x574>
 800cc12:	4b22      	ldr	r3, [pc, #136]	; (800cc9c <tcp_receive+0x5f0>)
 800cc14:	f240 5294 	movw	r2, #1428	; 0x594
 800cc18:	4921      	ldr	r1, [pc, #132]	; (800cca0 <tcp_receive+0x5f4>)
 800cc1a:	4822      	ldr	r0, [pc, #136]	; (800cca4 <tcp_receive+0x5f8>)
 800cc1c:	f008 f86a 	bl	8014cf4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800cc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d906      	bls.n	800cc38 <tcp_receive+0x58c>
 800cc2a:	4b1c      	ldr	r3, [pc, #112]	; (800cc9c <tcp_receive+0x5f0>)
 800cc2c:	f240 5295 	movw	r2, #1429	; 0x595
 800cc30:	491d      	ldr	r1, [pc, #116]	; (800cca8 <tcp_receive+0x5fc>)
 800cc32:	481c      	ldr	r0, [pc, #112]	; (800cca4 <tcp_receive+0x5f8>)
 800cc34:	f008 f85e 	bl	8014cf4 <iprintf>
      off = (u16_t)off32;
 800cc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800cc3e:	4b16      	ldr	r3, [pc, #88]	; (800cc98 <tcp_receive+0x5ec>)
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	891b      	ldrh	r3, [r3, #8]
 800cc44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d906      	bls.n	800cc5a <tcp_receive+0x5ae>
 800cc4c:	4b13      	ldr	r3, [pc, #76]	; (800cc9c <tcp_receive+0x5f0>)
 800cc4e:	f240 5297 	movw	r2, #1431	; 0x597
 800cc52:	4916      	ldr	r1, [pc, #88]	; (800ccac <tcp_receive+0x600>)
 800cc54:	4813      	ldr	r0, [pc, #76]	; (800cca4 <tcp_receive+0x5f8>)
 800cc56:	f008 f84d 	bl	8014cf4 <iprintf>
      inseg.len -= off;
 800cc5a:	4b0f      	ldr	r3, [pc, #60]	; (800cc98 <tcp_receive+0x5ec>)
 800cc5c:	891a      	ldrh	r2, [r3, #8]
 800cc5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cc62:	1ad3      	subs	r3, r2, r3
 800cc64:	b29a      	uxth	r2, r3
 800cc66:	4b0c      	ldr	r3, [pc, #48]	; (800cc98 <tcp_receive+0x5ec>)
 800cc68:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800cc6a:	4b0b      	ldr	r3, [pc, #44]	; (800cc98 <tcp_receive+0x5ec>)
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	891a      	ldrh	r2, [r3, #8]
 800cc70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cc74:	1ad3      	subs	r3, r2, r3
 800cc76:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800cc78:	e02a      	b.n	800ccd0 <tcp_receive+0x624>
 800cc7a:	bf00      	nop
 800cc7c:	08018d44 	.word	0x08018d44
 800cc80:	08018d4c 	.word	0x08018d4c
 800cc84:	200008d4 	.word	0x200008d4
 800cc88:	200008d0 	.word	0x200008d0
 800cc8c:	2000ae6c 	.word	0x2000ae6c
 800cc90:	200008d6 	.word	0x200008d6
 800cc94:	200008cc 	.word	0x200008cc
 800cc98:	200008ac 	.word	0x200008ac
 800cc9c:	080189dc 	.word	0x080189dc
 800cca0:	08018d54 	.word	0x08018d54
 800cca4:	08018a28 	.word	0x08018a28
 800cca8:	08018d64 	.word	0x08018d64
 800ccac:	08018d74 	.word	0x08018d74
        off -= p->len;
 800ccb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccb2:	895b      	ldrh	r3, [r3, #10]
 800ccb4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ccbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccc0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ccc2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ccc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ccca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ccd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccd2:	895b      	ldrh	r3, [r3, #10]
 800ccd4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d8e9      	bhi.n	800ccb0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ccdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cce0:	4619      	mov	r1, r3
 800cce2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cce4:	f7fc f8cc 	bl	8008e80 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccec:	4a91      	ldr	r2, [pc, #580]	; (800cf34 <tcp_receive+0x888>)
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	4b91      	ldr	r3, [pc, #580]	; (800cf38 <tcp_receive+0x88c>)
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	4a8f      	ldr	r2, [pc, #572]	; (800cf34 <tcp_receive+0x888>)
 800ccf6:	6812      	ldr	r2, [r2, #0]
 800ccf8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ccfa:	e00d      	b.n	800cd18 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ccfc:	4b8d      	ldr	r3, [pc, #564]	; (800cf34 <tcp_receive+0x888>)
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd04:	1ad3      	subs	r3, r2, r3
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	da06      	bge.n	800cd18 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	8b5b      	ldrh	r3, [r3, #26]
 800cd0e:	f043 0302 	orr.w	r3, r3, #2
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cd18:	4b86      	ldr	r3, [pc, #536]	; (800cf34 <tcp_receive+0x888>)
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd20:	1ad3      	subs	r3, r2, r3
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	f2c0 842a 	blt.w	800d57c <tcp_receive+0xed0>
 800cd28:	4b82      	ldr	r3, [pc, #520]	; (800cf34 <tcp_receive+0x888>)
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd30:	6879      	ldr	r1, [r7, #4]
 800cd32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cd34:	440b      	add	r3, r1
 800cd36:	1ad3      	subs	r3, r2, r3
 800cd38:	3301      	adds	r3, #1
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f300 841e 	bgt.w	800d57c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd44:	4b7b      	ldr	r3, [pc, #492]	; (800cf34 <tcp_receive+0x888>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	f040 829a 	bne.w	800d282 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800cd4e:	4b7a      	ldr	r3, [pc, #488]	; (800cf38 <tcp_receive+0x88c>)
 800cd50:	891c      	ldrh	r4, [r3, #8]
 800cd52:	4b79      	ldr	r3, [pc, #484]	; (800cf38 <tcp_receive+0x88c>)
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	899b      	ldrh	r3, [r3, #12]
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7fa fdb8 	bl	80078d0 <lwip_htons>
 800cd60:	4603      	mov	r3, r0
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	f003 0303 	and.w	r3, r3, #3
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d001      	beq.n	800cd70 <tcp_receive+0x6c4>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e000      	b.n	800cd72 <tcp_receive+0x6c6>
 800cd70:	2300      	movs	r3, #0
 800cd72:	4423      	add	r3, r4
 800cd74:	b29a      	uxth	r2, r3
 800cd76:	4b71      	ldr	r3, [pc, #452]	; (800cf3c <tcp_receive+0x890>)
 800cd78:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd7e:	4b6f      	ldr	r3, [pc, #444]	; (800cf3c <tcp_receive+0x890>)
 800cd80:	881b      	ldrh	r3, [r3, #0]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d275      	bcs.n	800ce72 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cd86:	4b6c      	ldr	r3, [pc, #432]	; (800cf38 <tcp_receive+0x88c>)
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	899b      	ldrh	r3, [r3, #12]
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7fa fd9e 	bl	80078d0 <lwip_htons>
 800cd94:	4603      	mov	r3, r0
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	f003 0301 	and.w	r3, r3, #1
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d01f      	beq.n	800cde0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cda0:	4b65      	ldr	r3, [pc, #404]	; (800cf38 <tcp_receive+0x88c>)
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	899b      	ldrh	r3, [r3, #12]
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	b21b      	sxth	r3, r3
 800cdaa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cdae:	b21c      	sxth	r4, r3
 800cdb0:	4b61      	ldr	r3, [pc, #388]	; (800cf38 <tcp_receive+0x88c>)
 800cdb2:	68db      	ldr	r3, [r3, #12]
 800cdb4:	899b      	ldrh	r3, [r3, #12]
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7fa fd89 	bl	80078d0 <lwip_htons>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7fa fd80 	bl	80078d0 <lwip_htons>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	b21b      	sxth	r3, r3
 800cdd4:	4323      	orrs	r3, r4
 800cdd6:	b21a      	sxth	r2, r3
 800cdd8:	4b57      	ldr	r3, [pc, #348]	; (800cf38 <tcp_receive+0x88c>)
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	b292      	uxth	r2, r2
 800cdde:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cde4:	4b54      	ldr	r3, [pc, #336]	; (800cf38 <tcp_receive+0x88c>)
 800cde6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cde8:	4b53      	ldr	r3, [pc, #332]	; (800cf38 <tcp_receive+0x88c>)
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	899b      	ldrh	r3, [r3, #12]
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7fa fd6d 	bl	80078d0 <lwip_htons>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	f003 0302 	and.w	r3, r3, #2
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d005      	beq.n	800ce0e <tcp_receive+0x762>
            inseg.len -= 1;
 800ce02:	4b4d      	ldr	r3, [pc, #308]	; (800cf38 <tcp_receive+0x88c>)
 800ce04:	891b      	ldrh	r3, [r3, #8]
 800ce06:	3b01      	subs	r3, #1
 800ce08:	b29a      	uxth	r2, r3
 800ce0a:	4b4b      	ldr	r3, [pc, #300]	; (800cf38 <tcp_receive+0x88c>)
 800ce0c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ce0e:	4b4a      	ldr	r3, [pc, #296]	; (800cf38 <tcp_receive+0x88c>)
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	4a49      	ldr	r2, [pc, #292]	; (800cf38 <tcp_receive+0x88c>)
 800ce14:	8912      	ldrh	r2, [r2, #8]
 800ce16:	4611      	mov	r1, r2
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fb ff31 	bl	8008c80 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ce1e:	4b46      	ldr	r3, [pc, #280]	; (800cf38 <tcp_receive+0x88c>)
 800ce20:	891c      	ldrh	r4, [r3, #8]
 800ce22:	4b45      	ldr	r3, [pc, #276]	; (800cf38 <tcp_receive+0x88c>)
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	899b      	ldrh	r3, [r3, #12]
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7fa fd50 	bl	80078d0 <lwip_htons>
 800ce30:	4603      	mov	r3, r0
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	f003 0303 	and.w	r3, r3, #3
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d001      	beq.n	800ce40 <tcp_receive+0x794>
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	e000      	b.n	800ce42 <tcp_receive+0x796>
 800ce40:	2300      	movs	r3, #0
 800ce42:	4423      	add	r3, r4
 800ce44:	b29a      	uxth	r2, r3
 800ce46:	4b3d      	ldr	r3, [pc, #244]	; (800cf3c <tcp_receive+0x890>)
 800ce48:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ce4a:	4b3c      	ldr	r3, [pc, #240]	; (800cf3c <tcp_receive+0x890>)
 800ce4c:	881b      	ldrh	r3, [r3, #0]
 800ce4e:	461a      	mov	r2, r3
 800ce50:	4b38      	ldr	r3, [pc, #224]	; (800cf34 <tcp_receive+0x888>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	441a      	add	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce5a:	6879      	ldr	r1, [r7, #4]
 800ce5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ce5e:	440b      	add	r3, r1
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d006      	beq.n	800ce72 <tcp_receive+0x7c6>
 800ce64:	4b36      	ldr	r3, [pc, #216]	; (800cf40 <tcp_receive+0x894>)
 800ce66:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ce6a:	4936      	ldr	r1, [pc, #216]	; (800cf44 <tcp_receive+0x898>)
 800ce6c:	4836      	ldr	r0, [pc, #216]	; (800cf48 <tcp_receive+0x89c>)
 800ce6e:	f007 ff41 	bl	8014cf4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	f000 80e7 	beq.w	800d04a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ce7c:	4b2e      	ldr	r3, [pc, #184]	; (800cf38 <tcp_receive+0x88c>)
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	899b      	ldrh	r3, [r3, #12]
 800ce82:	b29b      	uxth	r3, r3
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fa fd23 	bl	80078d0 <lwip_htons>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	f003 0301 	and.w	r3, r3, #1
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d010      	beq.n	800ceb8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ce96:	e00a      	b.n	800ceae <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce9c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f7fd fcac 	bl	800a806 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1f0      	bne.n	800ce98 <tcp_receive+0x7ec>
 800ceb6:	e0c8      	b.n	800d04a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cebc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800cebe:	e052      	b.n	800cf66 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	899b      	ldrh	r3, [r3, #12]
 800cec6:	b29b      	uxth	r3, r3
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7fa fd01 	bl	80078d0 <lwip_htons>
 800cece:	4603      	mov	r3, r0
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	f003 0301 	and.w	r3, r3, #1
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d03d      	beq.n	800cf56 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ceda:	4b17      	ldr	r3, [pc, #92]	; (800cf38 <tcp_receive+0x88c>)
 800cedc:	68db      	ldr	r3, [r3, #12]
 800cede:	899b      	ldrh	r3, [r3, #12]
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fa fcf4 	bl	80078d0 <lwip_htons>
 800cee8:	4603      	mov	r3, r0
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d130      	bne.n	800cf56 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cef4:	4b10      	ldr	r3, [pc, #64]	; (800cf38 <tcp_receive+0x88c>)
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	899b      	ldrh	r3, [r3, #12]
 800cefa:	b29c      	uxth	r4, r3
 800cefc:	2001      	movs	r0, #1
 800cefe:	f7fa fce7 	bl	80078d0 <lwip_htons>
 800cf02:	4603      	mov	r3, r0
 800cf04:	461a      	mov	r2, r3
 800cf06:	4b0c      	ldr	r3, [pc, #48]	; (800cf38 <tcp_receive+0x88c>)
 800cf08:	68db      	ldr	r3, [r3, #12]
 800cf0a:	4322      	orrs	r2, r4
 800cf0c:	b292      	uxth	r2, r2
 800cf0e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800cf10:	4b09      	ldr	r3, [pc, #36]	; (800cf38 <tcp_receive+0x88c>)
 800cf12:	891c      	ldrh	r4, [r3, #8]
 800cf14:	4b08      	ldr	r3, [pc, #32]	; (800cf38 <tcp_receive+0x88c>)
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	899b      	ldrh	r3, [r3, #12]
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fa fcd7 	bl	80078d0 <lwip_htons>
 800cf22:	4603      	mov	r3, r0
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	f003 0303 	and.w	r3, r3, #3
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00e      	beq.n	800cf4c <tcp_receive+0x8a0>
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e00d      	b.n	800cf4e <tcp_receive+0x8a2>
 800cf32:	bf00      	nop
 800cf34:	200008cc 	.word	0x200008cc
 800cf38:	200008ac 	.word	0x200008ac
 800cf3c:	200008d6 	.word	0x200008d6
 800cf40:	080189dc 	.word	0x080189dc
 800cf44:	08018d84 	.word	0x08018d84
 800cf48:	08018a28 	.word	0x08018a28
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	4423      	add	r3, r4
 800cf50:	b29a      	uxth	r2, r3
 800cf52:	4b98      	ldr	r3, [pc, #608]	; (800d1b4 <tcp_receive+0xb08>)
 800cf54:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800cf56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf58:	613b      	str	r3, [r7, #16]
              next = next->next;
 800cf5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800cf60:	6938      	ldr	r0, [r7, #16]
 800cf62:	f7fd fc50 	bl	800a806 <tcp_seg_free>
            while (next &&
 800cf66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d00e      	beq.n	800cf8a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800cf6c:	4b91      	ldr	r3, [pc, #580]	; (800d1b4 <tcp_receive+0xb08>)
 800cf6e:	881b      	ldrh	r3, [r3, #0]
 800cf70:	461a      	mov	r2, r3
 800cf72:	4b91      	ldr	r3, [pc, #580]	; (800d1b8 <tcp_receive+0xb0c>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	441a      	add	r2, r3
 800cf78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cf80:	8909      	ldrh	r1, [r1, #8]
 800cf82:	440b      	add	r3, r1
 800cf84:	1ad3      	subs	r3, r2, r3
            while (next &&
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	da9a      	bge.n	800cec0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800cf8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d059      	beq.n	800d044 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800cf90:	4b88      	ldr	r3, [pc, #544]	; (800d1b4 <tcp_receive+0xb08>)
 800cf92:	881b      	ldrh	r3, [r3, #0]
 800cf94:	461a      	mov	r2, r3
 800cf96:	4b88      	ldr	r3, [pc, #544]	; (800d1b8 <tcp_receive+0xb0c>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	441a      	add	r2, r3
 800cf9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	dd4d      	ble.n	800d044 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800cfa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	4b81      	ldr	r3, [pc, #516]	; (800d1b8 <tcp_receive+0xb0c>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	1ad3      	subs	r3, r2, r3
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	4b80      	ldr	r3, [pc, #512]	; (800d1bc <tcp_receive+0xb10>)
 800cfbc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cfbe:	4b7f      	ldr	r3, [pc, #508]	; (800d1bc <tcp_receive+0xb10>)
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	899b      	ldrh	r3, [r3, #12]
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fa fc82 	bl	80078d0 <lwip_htons>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	b2db      	uxtb	r3, r3
 800cfd0:	f003 0302 	and.w	r3, r3, #2
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d005      	beq.n	800cfe4 <tcp_receive+0x938>
                inseg.len -= 1;
 800cfd8:	4b78      	ldr	r3, [pc, #480]	; (800d1bc <tcp_receive+0xb10>)
 800cfda:	891b      	ldrh	r3, [r3, #8]
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	b29a      	uxth	r2, r3
 800cfe0:	4b76      	ldr	r3, [pc, #472]	; (800d1bc <tcp_receive+0xb10>)
 800cfe2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800cfe4:	4b75      	ldr	r3, [pc, #468]	; (800d1bc <tcp_receive+0xb10>)
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	4a74      	ldr	r2, [pc, #464]	; (800d1bc <tcp_receive+0xb10>)
 800cfea:	8912      	ldrh	r2, [r2, #8]
 800cfec:	4611      	mov	r1, r2
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fb fe46 	bl	8008c80 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800cff4:	4b71      	ldr	r3, [pc, #452]	; (800d1bc <tcp_receive+0xb10>)
 800cff6:	891c      	ldrh	r4, [r3, #8]
 800cff8:	4b70      	ldr	r3, [pc, #448]	; (800d1bc <tcp_receive+0xb10>)
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	899b      	ldrh	r3, [r3, #12]
 800cffe:	b29b      	uxth	r3, r3
 800d000:	4618      	mov	r0, r3
 800d002:	f7fa fc65 	bl	80078d0 <lwip_htons>
 800d006:	4603      	mov	r3, r0
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	f003 0303 	and.w	r3, r3, #3
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d001      	beq.n	800d016 <tcp_receive+0x96a>
 800d012:	2301      	movs	r3, #1
 800d014:	e000      	b.n	800d018 <tcp_receive+0x96c>
 800d016:	2300      	movs	r3, #0
 800d018:	4423      	add	r3, r4
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	4b65      	ldr	r3, [pc, #404]	; (800d1b4 <tcp_receive+0xb08>)
 800d01e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d020:	4b64      	ldr	r3, [pc, #400]	; (800d1b4 <tcp_receive+0xb08>)
 800d022:	881b      	ldrh	r3, [r3, #0]
 800d024:	461a      	mov	r2, r3
 800d026:	4b64      	ldr	r3, [pc, #400]	; (800d1b8 <tcp_receive+0xb0c>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	441a      	add	r2, r3
 800d02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	429a      	cmp	r2, r3
 800d034:	d006      	beq.n	800d044 <tcp_receive+0x998>
 800d036:	4b62      	ldr	r3, [pc, #392]	; (800d1c0 <tcp_receive+0xb14>)
 800d038:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d03c:	4961      	ldr	r1, [pc, #388]	; (800d1c4 <tcp_receive+0xb18>)
 800d03e:	4862      	ldr	r0, [pc, #392]	; (800d1c8 <tcp_receive+0xb1c>)
 800d040:	f007 fe58 	bl	8014cf4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d048:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d04a:	4b5a      	ldr	r3, [pc, #360]	; (800d1b4 <tcp_receive+0xb08>)
 800d04c:	881b      	ldrh	r3, [r3, #0]
 800d04e:	461a      	mov	r2, r3
 800d050:	4b59      	ldr	r3, [pc, #356]	; (800d1b8 <tcp_receive+0xb0c>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	441a      	add	r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d05e:	4b55      	ldr	r3, [pc, #340]	; (800d1b4 <tcp_receive+0xb08>)
 800d060:	881b      	ldrh	r3, [r3, #0]
 800d062:	429a      	cmp	r2, r3
 800d064:	d206      	bcs.n	800d074 <tcp_receive+0x9c8>
 800d066:	4b56      	ldr	r3, [pc, #344]	; (800d1c0 <tcp_receive+0xb14>)
 800d068:	f240 6207 	movw	r2, #1543	; 0x607
 800d06c:	4957      	ldr	r1, [pc, #348]	; (800d1cc <tcp_receive+0xb20>)
 800d06e:	4856      	ldr	r0, [pc, #344]	; (800d1c8 <tcp_receive+0xb1c>)
 800d070:	f007 fe40 	bl	8014cf4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d078:	4b4e      	ldr	r3, [pc, #312]	; (800d1b4 <tcp_receive+0xb08>)
 800d07a:	881b      	ldrh	r3, [r3, #0]
 800d07c:	1ad3      	subs	r3, r2, r3
 800d07e:	b29a      	uxth	r2, r3
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f7fc fe99 	bl	8009dbc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d08a:	4b4c      	ldr	r3, [pc, #304]	; (800d1bc <tcp_receive+0xb10>)
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	891b      	ldrh	r3, [r3, #8]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d006      	beq.n	800d0a2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800d094:	4b49      	ldr	r3, [pc, #292]	; (800d1bc <tcp_receive+0xb10>)
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	4a4d      	ldr	r2, [pc, #308]	; (800d1d0 <tcp_receive+0xb24>)
 800d09a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d09c:	4b47      	ldr	r3, [pc, #284]	; (800d1bc <tcp_receive+0xb10>)
 800d09e:	2200      	movs	r2, #0
 800d0a0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d0a2:	4b46      	ldr	r3, [pc, #280]	; (800d1bc <tcp_receive+0xb10>)
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	899b      	ldrh	r3, [r3, #12]
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7fa fc10 	bl	80078d0 <lwip_htons>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	f003 0301 	and.w	r3, r3, #1
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f000 80b8 	beq.w	800d22e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d0be:	4b45      	ldr	r3, [pc, #276]	; (800d1d4 <tcp_receive+0xb28>)
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	f043 0320 	orr.w	r3, r3, #32
 800d0c6:	b2da      	uxtb	r2, r3
 800d0c8:	4b42      	ldr	r3, [pc, #264]	; (800d1d4 <tcp_receive+0xb28>)
 800d0ca:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d0cc:	e0af      	b.n	800d22e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0d2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	4a36      	ldr	r2, [pc, #216]	; (800d1b8 <tcp_receive+0xb0c>)
 800d0de:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	891b      	ldrh	r3, [r3, #8]
 800d0e4:	461c      	mov	r4, r3
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	899b      	ldrh	r3, [r3, #12]
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fa fbee 	bl	80078d0 <lwip_htons>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	f003 0303 	and.w	r3, r3, #3
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d001      	beq.n	800d104 <tcp_receive+0xa58>
 800d100:	2301      	movs	r3, #1
 800d102:	e000      	b.n	800d106 <tcp_receive+0xa5a>
 800d104:	2300      	movs	r3, #0
 800d106:	191a      	adds	r2, r3, r4
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10c:	441a      	add	r2, r3
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d116:	461c      	mov	r4, r3
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	891b      	ldrh	r3, [r3, #8]
 800d11c:	461d      	mov	r5, r3
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	68db      	ldr	r3, [r3, #12]
 800d122:	899b      	ldrh	r3, [r3, #12]
 800d124:	b29b      	uxth	r3, r3
 800d126:	4618      	mov	r0, r3
 800d128:	f7fa fbd2 	bl	80078d0 <lwip_htons>
 800d12c:	4603      	mov	r3, r0
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	f003 0303 	and.w	r3, r3, #3
 800d134:	2b00      	cmp	r3, #0
 800d136:	d001      	beq.n	800d13c <tcp_receive+0xa90>
 800d138:	2301      	movs	r3, #1
 800d13a:	e000      	b.n	800d13e <tcp_receive+0xa92>
 800d13c:	2300      	movs	r3, #0
 800d13e:	442b      	add	r3, r5
 800d140:	429c      	cmp	r4, r3
 800d142:	d206      	bcs.n	800d152 <tcp_receive+0xaa6>
 800d144:	4b1e      	ldr	r3, [pc, #120]	; (800d1c0 <tcp_receive+0xb14>)
 800d146:	f240 622b 	movw	r2, #1579	; 0x62b
 800d14a:	4923      	ldr	r1, [pc, #140]	; (800d1d8 <tcp_receive+0xb2c>)
 800d14c:	481e      	ldr	r0, [pc, #120]	; (800d1c8 <tcp_receive+0xb1c>)
 800d14e:	f007 fdd1 	bl	8014cf4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	891b      	ldrh	r3, [r3, #8]
 800d156:	461c      	mov	r4, r3
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	899b      	ldrh	r3, [r3, #12]
 800d15e:	b29b      	uxth	r3, r3
 800d160:	4618      	mov	r0, r3
 800d162:	f7fa fbb5 	bl	80078d0 <lwip_htons>
 800d166:	4603      	mov	r3, r0
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	f003 0303 	and.w	r3, r3, #3
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d001      	beq.n	800d176 <tcp_receive+0xaca>
 800d172:	2301      	movs	r3, #1
 800d174:	e000      	b.n	800d178 <tcp_receive+0xacc>
 800d176:	2300      	movs	r3, #0
 800d178:	1919      	adds	r1, r3, r4
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d17e:	b28b      	uxth	r3, r1
 800d180:	1ad3      	subs	r3, r2, r3
 800d182:	b29a      	uxth	r2, r3
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f7fc fe17 	bl	8009dbc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	891b      	ldrh	r3, [r3, #8]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d028      	beq.n	800d1ea <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d198:	4b0d      	ldr	r3, [pc, #52]	; (800d1d0 <tcp_receive+0xb24>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d01d      	beq.n	800d1dc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d1a0:	4b0b      	ldr	r3, [pc, #44]	; (800d1d0 <tcp_receive+0xb24>)
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	4610      	mov	r0, r2
 800d1ac:	f7fb ffb0 	bl	8009110 <pbuf_cat>
 800d1b0:	e018      	b.n	800d1e4 <tcp_receive+0xb38>
 800d1b2:	bf00      	nop
 800d1b4:	200008d6 	.word	0x200008d6
 800d1b8:	200008cc 	.word	0x200008cc
 800d1bc:	200008ac 	.word	0x200008ac
 800d1c0:	080189dc 	.word	0x080189dc
 800d1c4:	08018dbc 	.word	0x08018dbc
 800d1c8:	08018a28 	.word	0x08018a28
 800d1cc:	08018df8 	.word	0x08018df8
 800d1d0:	200008dc 	.word	0x200008dc
 800d1d4:	200008d9 	.word	0x200008d9
 800d1d8:	08018e18 	.word	0x08018e18
            } else {
              recv_data = cseg->p;
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	4a70      	ldr	r2, [pc, #448]	; (800d3a4 <tcp_receive+0xcf8>)
 800d1e2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	899b      	ldrh	r3, [r3, #12]
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7fa fb6c 	bl	80078d0 <lwip_htons>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	f003 0301 	and.w	r3, r3, #1
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00d      	beq.n	800d220 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d204:	4b68      	ldr	r3, [pc, #416]	; (800d3a8 <tcp_receive+0xcfc>)
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	f043 0320 	orr.w	r3, r3, #32
 800d20c:	b2da      	uxtb	r2, r3
 800d20e:	4b66      	ldr	r3, [pc, #408]	; (800d3a8 <tcp_receive+0xcfc>)
 800d210:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	7d1b      	ldrb	r3, [r3, #20]
 800d216:	2b04      	cmp	r3, #4
 800d218:	d102      	bne.n	800d220 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2207      	movs	r2, #7
 800d21e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d228:	68b8      	ldr	r0, [r7, #8]
 800d22a:	f7fd faec 	bl	800a806 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d232:	2b00      	cmp	r3, #0
 800d234:	d008      	beq.n	800d248 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	685a      	ldr	r2, [r3, #4]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d242:	429a      	cmp	r2, r3
 800d244:	f43f af43 	beq.w	800d0ce <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	8b5b      	ldrh	r3, [r3, #26]
 800d24c:	f003 0301 	and.w	r3, r3, #1
 800d250:	2b00      	cmp	r3, #0
 800d252:	d00e      	beq.n	800d272 <tcp_receive+0xbc6>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	8b5b      	ldrh	r3, [r3, #26]
 800d258:	f023 0301 	bic.w	r3, r3, #1
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	835a      	strh	r2, [r3, #26]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	8b5b      	ldrh	r3, [r3, #26]
 800d266:	f043 0302 	orr.w	r3, r3, #2
 800d26a:	b29a      	uxth	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d270:	e188      	b.n	800d584 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	8b5b      	ldrh	r3, [r3, #26]
 800d276:	f043 0301 	orr.w	r3, r3, #1
 800d27a:	b29a      	uxth	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d280:	e180      	b.n	800d584 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d286:	2b00      	cmp	r3, #0
 800d288:	d106      	bne.n	800d298 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d28a:	4848      	ldr	r0, [pc, #288]	; (800d3ac <tcp_receive+0xd00>)
 800d28c:	f7fd faf2 	bl	800a874 <tcp_seg_copy>
 800d290:	4602      	mov	r2, r0
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	675a      	str	r2, [r3, #116]	; 0x74
 800d296:	e16d      	b.n	800d574 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d298:	2300      	movs	r3, #0
 800d29a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2a2:	e157      	b.n	800d554 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800d2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	685a      	ldr	r2, [r3, #4]
 800d2aa:	4b41      	ldr	r3, [pc, #260]	; (800d3b0 <tcp_receive+0xd04>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d11d      	bne.n	800d2ee <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d2b2:	4b3e      	ldr	r3, [pc, #248]	; (800d3ac <tcp_receive+0xd00>)
 800d2b4:	891a      	ldrh	r2, [r3, #8]
 800d2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b8:	891b      	ldrh	r3, [r3, #8]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	f240 814f 	bls.w	800d55e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d2c0:	483a      	ldr	r0, [pc, #232]	; (800d3ac <tcp_receive+0xd00>)
 800d2c2:	f7fd fad7 	bl	800a874 <tcp_seg_copy>
 800d2c6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f000 8149 	beq.w	800d562 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800d2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d003      	beq.n	800d2de <tcp_receive+0xc32>
                    prev->next = cseg;
 800d2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d8:	697a      	ldr	r2, [r7, #20]
 800d2da:	601a      	str	r2, [r3, #0]
 800d2dc:	e002      	b.n	800d2e4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	697a      	ldr	r2, [r7, #20]
 800d2e2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d2e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d2e6:	6978      	ldr	r0, [r7, #20]
 800d2e8:	f7ff f8dc 	bl	800c4a4 <tcp_oos_insert_segment>
                }
                break;
 800d2ec:	e139      	b.n	800d562 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d117      	bne.n	800d324 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d2f4:	4b2e      	ldr	r3, [pc, #184]	; (800d3b0 <tcp_receive+0xd04>)
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fa:	68db      	ldr	r3, [r3, #12]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	2b00      	cmp	r3, #0
 800d302:	da57      	bge.n	800d3b4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d304:	4829      	ldr	r0, [pc, #164]	; (800d3ac <tcp_receive+0xd00>)
 800d306:	f7fd fab5 	bl	800a874 <tcp_seg_copy>
 800d30a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d30c:	69bb      	ldr	r3, [r7, #24]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f000 8129 	beq.w	800d566 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	69ba      	ldr	r2, [r7, #24]
 800d318:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d31a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d31c:	69b8      	ldr	r0, [r7, #24]
 800d31e:	f7ff f8c1 	bl	800c4a4 <tcp_oos_insert_segment>
                  }
                  break;
 800d322:	e120      	b.n	800d566 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d324:	4b22      	ldr	r3, [pc, #136]	; (800d3b0 <tcp_receive+0xd04>)
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d32a:	68db      	ldr	r3, [r3, #12]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	1ad3      	subs	r3, r2, r3
 800d330:	3b01      	subs	r3, #1
 800d332:	2b00      	cmp	r3, #0
 800d334:	db3e      	blt.n	800d3b4 <tcp_receive+0xd08>
 800d336:	4b1e      	ldr	r3, [pc, #120]	; (800d3b0 <tcp_receive+0xd04>)
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	1ad3      	subs	r3, r2, r3
 800d342:	3301      	adds	r3, #1
 800d344:	2b00      	cmp	r3, #0
 800d346:	dc35      	bgt.n	800d3b4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d348:	4818      	ldr	r0, [pc, #96]	; (800d3ac <tcp_receive+0xd00>)
 800d34a:	f7fd fa93 	bl	800a874 <tcp_seg_copy>
 800d34e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d350:	69fb      	ldr	r3, [r7, #28]
 800d352:	2b00      	cmp	r3, #0
 800d354:	f000 8109 	beq.w	800d56a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d360:	8912      	ldrh	r2, [r2, #8]
 800d362:	441a      	add	r2, r3
 800d364:	4b12      	ldr	r3, [pc, #72]	; (800d3b0 <tcp_receive+0xd04>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	1ad3      	subs	r3, r2, r3
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	dd12      	ble.n	800d394 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d36e:	4b10      	ldr	r3, [pc, #64]	; (800d3b0 <tcp_receive+0xd04>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	b29a      	uxth	r2, r3
 800d374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	1ad3      	subs	r3, r2, r3
 800d37e:	b29a      	uxth	r2, r3
 800d380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d382:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d386:	685a      	ldr	r2, [r3, #4]
 800d388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d38a:	891b      	ldrh	r3, [r3, #8]
 800d38c:	4619      	mov	r1, r3
 800d38e:	4610      	mov	r0, r2
 800d390:	f7fb fc76 	bl	8008c80 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d396:	69fa      	ldr	r2, [r7, #28]
 800d398:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d39a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d39c:	69f8      	ldr	r0, [r7, #28]
 800d39e:	f7ff f881 	bl	800c4a4 <tcp_oos_insert_segment>
                  }
                  break;
 800d3a2:	e0e2      	b.n	800d56a <tcp_receive+0xebe>
 800d3a4:	200008dc 	.word	0x200008dc
 800d3a8:	200008d9 	.word	0x200008d9
 800d3ac:	200008ac 	.word	0x200008ac
 800d3b0:	200008cc 	.word	0x200008cc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f040 80c6 	bne.w	800d54e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d3c2:	4b80      	ldr	r3, [pc, #512]	; (800d5c4 <tcp_receive+0xf18>)
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f340 80bd 	ble.w	800d54e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	899b      	ldrh	r3, [r3, #12]
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7fa fa77 	bl	80078d0 <lwip_htons>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	f003 0301 	and.w	r3, r3, #1
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	f040 80bf 	bne.w	800d56e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d3f0:	4875      	ldr	r0, [pc, #468]	; (800d5c8 <tcp_receive+0xf1c>)
 800d3f2:	f7fd fa3f 	bl	800a874 <tcp_seg_copy>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	f000 80b6 	beq.w	800d572 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d408:	68db      	ldr	r3, [r3, #12]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d40e:	8912      	ldrh	r2, [r2, #8]
 800d410:	441a      	add	r2, r3
 800d412:	4b6c      	ldr	r3, [pc, #432]	; (800d5c4 <tcp_receive+0xf18>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	1ad3      	subs	r3, r2, r3
 800d418:	2b00      	cmp	r3, #0
 800d41a:	dd12      	ble.n	800d442 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d41c:	4b69      	ldr	r3, [pc, #420]	; (800d5c4 <tcp_receive+0xf18>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	b29a      	uxth	r2, r3
 800d422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	b29b      	uxth	r3, r3
 800d42a:	1ad3      	subs	r3, r2, r3
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d430:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d434:	685a      	ldr	r2, [r3, #4]
 800d436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d438:	891b      	ldrh	r3, [r3, #8]
 800d43a:	4619      	mov	r1, r3
 800d43c:	4610      	mov	r0, r2
 800d43e:	f7fb fc1f 	bl	8008c80 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d442:	4b62      	ldr	r3, [pc, #392]	; (800d5cc <tcp_receive+0xf20>)
 800d444:	881b      	ldrh	r3, [r3, #0]
 800d446:	461a      	mov	r2, r3
 800d448:	4b5e      	ldr	r3, [pc, #376]	; (800d5c4 <tcp_receive+0xf18>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	441a      	add	r2, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d452:	6879      	ldr	r1, [r7, #4]
 800d454:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d456:	440b      	add	r3, r1
 800d458:	1ad3      	subs	r3, r2, r3
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	f340 8089 	ble.w	800d572 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	68db      	ldr	r3, [r3, #12]
 800d466:	899b      	ldrh	r3, [r3, #12]
 800d468:	b29b      	uxth	r3, r3
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fa fa30 	bl	80078d0 <lwip_htons>
 800d470:	4603      	mov	r3, r0
 800d472:	b2db      	uxtb	r3, r3
 800d474:	f003 0301 	and.w	r3, r3, #1
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d022      	beq.n	800d4c2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	899b      	ldrh	r3, [r3, #12]
 800d484:	b29b      	uxth	r3, r3
 800d486:	b21b      	sxth	r3, r3
 800d488:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d48c:	b21c      	sxth	r4, r3
 800d48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	899b      	ldrh	r3, [r3, #12]
 800d496:	b29b      	uxth	r3, r3
 800d498:	4618      	mov	r0, r3
 800d49a:	f7fa fa19 	bl	80078d0 <lwip_htons>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fa fa10 	bl	80078d0 <lwip_htons>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	b21b      	sxth	r3, r3
 800d4b4:	4323      	orrs	r3, r4
 800d4b6:	b21a      	sxth	r2, r3
 800d4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	68db      	ldr	r3, [r3, #12]
 800d4be:	b292      	uxth	r2, r2
 800d4c0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c6:	b29a      	uxth	r2, r3
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4cc:	4413      	add	r3, r2
 800d4ce:	b299      	uxth	r1, r3
 800d4d0:	4b3c      	ldr	r3, [pc, #240]	; (800d5c4 <tcp_receive+0xf18>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	b29a      	uxth	r2, r3
 800d4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	1a8a      	subs	r2, r1, r2
 800d4dc:	b292      	uxth	r2, r2
 800d4de:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	685a      	ldr	r2, [r3, #4]
 800d4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	891b      	ldrh	r3, [r3, #8]
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	4610      	mov	r0, r2
 800d4f0:	f7fb fbc6 	bl	8008c80 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	891c      	ldrh	r4, [r3, #8]
 800d4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	899b      	ldrh	r3, [r3, #12]
 800d502:	b29b      	uxth	r3, r3
 800d504:	4618      	mov	r0, r3
 800d506:	f7fa f9e3 	bl	80078d0 <lwip_htons>
 800d50a:	4603      	mov	r3, r0
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	f003 0303 	and.w	r3, r3, #3
 800d512:	2b00      	cmp	r3, #0
 800d514:	d001      	beq.n	800d51a <tcp_receive+0xe6e>
 800d516:	2301      	movs	r3, #1
 800d518:	e000      	b.n	800d51c <tcp_receive+0xe70>
 800d51a:	2300      	movs	r3, #0
 800d51c:	4423      	add	r3, r4
 800d51e:	b29a      	uxth	r2, r3
 800d520:	4b2a      	ldr	r3, [pc, #168]	; (800d5cc <tcp_receive+0xf20>)
 800d522:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d524:	4b29      	ldr	r3, [pc, #164]	; (800d5cc <tcp_receive+0xf20>)
 800d526:	881b      	ldrh	r3, [r3, #0]
 800d528:	461a      	mov	r2, r3
 800d52a:	4b26      	ldr	r3, [pc, #152]	; (800d5c4 <tcp_receive+0xf18>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	441a      	add	r2, r3
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d534:	6879      	ldr	r1, [r7, #4]
 800d536:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d538:	440b      	add	r3, r1
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d019      	beq.n	800d572 <tcp_receive+0xec6>
 800d53e:	4b24      	ldr	r3, [pc, #144]	; (800d5d0 <tcp_receive+0xf24>)
 800d540:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d544:	4923      	ldr	r1, [pc, #140]	; (800d5d4 <tcp_receive+0xf28>)
 800d546:	4824      	ldr	r0, [pc, #144]	; (800d5d8 <tcp_receive+0xf2c>)
 800d548:	f007 fbd4 	bl	8014cf4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d54c:	e011      	b.n	800d572 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	63bb      	str	r3, [r7, #56]	; 0x38
 800d554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d556:	2b00      	cmp	r3, #0
 800d558:	f47f aea4 	bne.w	800d2a4 <tcp_receive+0xbf8>
 800d55c:	e00a      	b.n	800d574 <tcp_receive+0xec8>
                break;
 800d55e:	bf00      	nop
 800d560:	e008      	b.n	800d574 <tcp_receive+0xec8>
                break;
 800d562:	bf00      	nop
 800d564:	e006      	b.n	800d574 <tcp_receive+0xec8>
                  break;
 800d566:	bf00      	nop
 800d568:	e004      	b.n	800d574 <tcp_receive+0xec8>
                  break;
 800d56a:	bf00      	nop
 800d56c:	e002      	b.n	800d574 <tcp_receive+0xec8>
                  break;
 800d56e:	bf00      	nop
 800d570:	e000      	b.n	800d574 <tcp_receive+0xec8>
                break;
 800d572:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f001 fe8b 	bl	800f290 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d57a:	e003      	b.n	800d584 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f001 fe87 	bl	800f290 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d582:	e01a      	b.n	800d5ba <tcp_receive+0xf0e>
 800d584:	e019      	b.n	800d5ba <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d586:	4b0f      	ldr	r3, [pc, #60]	; (800d5c4 <tcp_receive+0xf18>)
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d58e:	1ad3      	subs	r3, r2, r3
 800d590:	2b00      	cmp	r3, #0
 800d592:	db0a      	blt.n	800d5aa <tcp_receive+0xefe>
 800d594:	4b0b      	ldr	r3, [pc, #44]	; (800d5c4 <tcp_receive+0xf18>)
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59c:	6879      	ldr	r1, [r7, #4]
 800d59e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d5a0:	440b      	add	r3, r1
 800d5a2:	1ad3      	subs	r3, r2, r3
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	dd07      	ble.n	800d5ba <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	8b5b      	ldrh	r3, [r3, #26]
 800d5ae:	f043 0302 	orr.w	r3, r3, #2
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d5b8:	e7ff      	b.n	800d5ba <tcp_receive+0xf0e>
 800d5ba:	bf00      	nop
 800d5bc:	3750      	adds	r7, #80	; 0x50
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bdb0      	pop	{r4, r5, r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	200008cc 	.word	0x200008cc
 800d5c8:	200008ac 	.word	0x200008ac
 800d5cc:	200008d6 	.word	0x200008d6
 800d5d0:	080189dc 	.word	0x080189dc
 800d5d4:	08018d84 	.word	0x08018d84
 800d5d8:	08018a28 	.word	0x08018a28

0800d5dc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d5e2:	4b15      	ldr	r3, [pc, #84]	; (800d638 <tcp_get_next_optbyte+0x5c>)
 800d5e4:	881b      	ldrh	r3, [r3, #0]
 800d5e6:	1c5a      	adds	r2, r3, #1
 800d5e8:	b291      	uxth	r1, r2
 800d5ea:	4a13      	ldr	r2, [pc, #76]	; (800d638 <tcp_get_next_optbyte+0x5c>)
 800d5ec:	8011      	strh	r1, [r2, #0]
 800d5ee:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d5f0:	4b12      	ldr	r3, [pc, #72]	; (800d63c <tcp_get_next_optbyte+0x60>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d004      	beq.n	800d602 <tcp_get_next_optbyte+0x26>
 800d5f8:	4b11      	ldr	r3, [pc, #68]	; (800d640 <tcp_get_next_optbyte+0x64>)
 800d5fa:	881b      	ldrh	r3, [r3, #0]
 800d5fc:	88fa      	ldrh	r2, [r7, #6]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d208      	bcs.n	800d614 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d602:	4b10      	ldr	r3, [pc, #64]	; (800d644 <tcp_get_next_optbyte+0x68>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	3314      	adds	r3, #20
 800d608:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d60a:	88fb      	ldrh	r3, [r7, #6]
 800d60c:	683a      	ldr	r2, [r7, #0]
 800d60e:	4413      	add	r3, r2
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	e00b      	b.n	800d62c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d614:	88fb      	ldrh	r3, [r7, #6]
 800d616:	b2da      	uxtb	r2, r3
 800d618:	4b09      	ldr	r3, [pc, #36]	; (800d640 <tcp_get_next_optbyte+0x64>)
 800d61a:	881b      	ldrh	r3, [r3, #0]
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	1ad3      	subs	r3, r2, r3
 800d620:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d622:	4b06      	ldr	r3, [pc, #24]	; (800d63c <tcp_get_next_optbyte+0x60>)
 800d624:	681a      	ldr	r2, [r3, #0]
 800d626:	797b      	ldrb	r3, [r7, #5]
 800d628:	4413      	add	r3, r2
 800d62a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr
 800d638:	200008c8 	.word	0x200008c8
 800d63c:	200008c4 	.word	0x200008c4
 800d640:	200008c2 	.word	0x200008c2
 800d644:	200008bc 	.word	0x200008bc

0800d648 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d106      	bne.n	800d664 <tcp_parseopt+0x1c>
 800d656:	4b32      	ldr	r3, [pc, #200]	; (800d720 <tcp_parseopt+0xd8>)
 800d658:	f240 727d 	movw	r2, #1917	; 0x77d
 800d65c:	4931      	ldr	r1, [pc, #196]	; (800d724 <tcp_parseopt+0xdc>)
 800d65e:	4832      	ldr	r0, [pc, #200]	; (800d728 <tcp_parseopt+0xe0>)
 800d660:	f007 fb48 	bl	8014cf4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d664:	4b31      	ldr	r3, [pc, #196]	; (800d72c <tcp_parseopt+0xe4>)
 800d666:	881b      	ldrh	r3, [r3, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d055      	beq.n	800d718 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d66c:	4b30      	ldr	r3, [pc, #192]	; (800d730 <tcp_parseopt+0xe8>)
 800d66e:	2200      	movs	r2, #0
 800d670:	801a      	strh	r2, [r3, #0]
 800d672:	e045      	b.n	800d700 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d674:	f7ff ffb2 	bl	800d5dc <tcp_get_next_optbyte>
 800d678:	4603      	mov	r3, r0
 800d67a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d67c:	7bfb      	ldrb	r3, [r7, #15]
 800d67e:	2b02      	cmp	r3, #2
 800d680:	d006      	beq.n	800d690 <tcp_parseopt+0x48>
 800d682:	2b02      	cmp	r3, #2
 800d684:	dc2b      	bgt.n	800d6de <tcp_parseopt+0x96>
 800d686:	2b00      	cmp	r3, #0
 800d688:	d041      	beq.n	800d70e <tcp_parseopt+0xc6>
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d127      	bne.n	800d6de <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d68e:	e037      	b.n	800d700 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d690:	f7ff ffa4 	bl	800d5dc <tcp_get_next_optbyte>
 800d694:	4603      	mov	r3, r0
 800d696:	2b04      	cmp	r3, #4
 800d698:	d13b      	bne.n	800d712 <tcp_parseopt+0xca>
 800d69a:	4b25      	ldr	r3, [pc, #148]	; (800d730 <tcp_parseopt+0xe8>)
 800d69c:	881b      	ldrh	r3, [r3, #0]
 800d69e:	3301      	adds	r3, #1
 800d6a0:	4a22      	ldr	r2, [pc, #136]	; (800d72c <tcp_parseopt+0xe4>)
 800d6a2:	8812      	ldrh	r2, [r2, #0]
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	da34      	bge.n	800d712 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d6a8:	f7ff ff98 	bl	800d5dc <tcp_get_next_optbyte>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	021b      	lsls	r3, r3, #8
 800d6b2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d6b4:	f7ff ff92 	bl	800d5dc <tcp_get_next_optbyte>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	89bb      	ldrh	r3, [r7, #12]
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d6c2:	89bb      	ldrh	r3, [r7, #12]
 800d6c4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d6c8:	d804      	bhi.n	800d6d4 <tcp_parseopt+0x8c>
 800d6ca:	89bb      	ldrh	r3, [r7, #12]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d001      	beq.n	800d6d4 <tcp_parseopt+0x8c>
 800d6d0:	89ba      	ldrh	r2, [r7, #12]
 800d6d2:	e001      	b.n	800d6d8 <tcp_parseopt+0x90>
 800d6d4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d6dc:	e010      	b.n	800d700 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d6de:	f7ff ff7d 	bl	800d5dc <tcp_get_next_optbyte>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d6e6:	7afb      	ldrb	r3, [r7, #11]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d914      	bls.n	800d716 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d6ec:	7afb      	ldrb	r3, [r7, #11]
 800d6ee:	b29a      	uxth	r2, r3
 800d6f0:	4b0f      	ldr	r3, [pc, #60]	; (800d730 <tcp_parseopt+0xe8>)
 800d6f2:	881b      	ldrh	r3, [r3, #0]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	3b02      	subs	r3, #2
 800d6fa:	b29a      	uxth	r2, r3
 800d6fc:	4b0c      	ldr	r3, [pc, #48]	; (800d730 <tcp_parseopt+0xe8>)
 800d6fe:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d700:	4b0b      	ldr	r3, [pc, #44]	; (800d730 <tcp_parseopt+0xe8>)
 800d702:	881a      	ldrh	r2, [r3, #0]
 800d704:	4b09      	ldr	r3, [pc, #36]	; (800d72c <tcp_parseopt+0xe4>)
 800d706:	881b      	ldrh	r3, [r3, #0]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d3b3      	bcc.n	800d674 <tcp_parseopt+0x2c>
 800d70c:	e004      	b.n	800d718 <tcp_parseopt+0xd0>
          return;
 800d70e:	bf00      	nop
 800d710:	e002      	b.n	800d718 <tcp_parseopt+0xd0>
            return;
 800d712:	bf00      	nop
 800d714:	e000      	b.n	800d718 <tcp_parseopt+0xd0>
            return;
 800d716:	bf00      	nop
      }
    }
  }
}
 800d718:	3710      	adds	r7, #16
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	080189dc 	.word	0x080189dc
 800d724:	08018e40 	.word	0x08018e40
 800d728:	08018a28 	.word	0x08018a28
 800d72c:	200008c0 	.word	0x200008c0
 800d730:	200008c8 	.word	0x200008c8

0800d734 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d734:	b480      	push	{r7}
 800d736:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d738:	4b05      	ldr	r3, [pc, #20]	; (800d750 <tcp_trigger_input_pcb_close+0x1c>)
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	f043 0310 	orr.w	r3, r3, #16
 800d740:	b2da      	uxtb	r2, r3
 800d742:	4b03      	ldr	r3, [pc, #12]	; (800d750 <tcp_trigger_input_pcb_close+0x1c>)
 800d744:	701a      	strb	r2, [r3, #0]
}
 800d746:	bf00      	nop
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr
 800d750:	200008d9 	.word	0x200008d9

0800d754 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00a      	beq.n	800d77c <tcp_route+0x28>
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	7a1b      	ldrb	r3, [r3, #8]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d006      	beq.n	800d77c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	7a1b      	ldrb	r3, [r3, #8]
 800d772:	4618      	mov	r0, r3
 800d774:	f7fb f8aa 	bl	80088cc <netif_get_by_index>
 800d778:	4603      	mov	r3, r0
 800d77a:	e003      	b.n	800d784 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f003 fad5 	bl	8010d2c <ip4_route>
 800d782:	4603      	mov	r3, r0
  }
}
 800d784:	4618      	mov	r0, r3
 800d786:	3710      	adds	r7, #16
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d78c:	b590      	push	{r4, r7, lr}
 800d78e:	b087      	sub	sp, #28
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	603b      	str	r3, [r7, #0]
 800d798:	4613      	mov	r3, r2
 800d79a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d105      	bne.n	800d7ae <tcp_create_segment+0x22>
 800d7a2:	4b44      	ldr	r3, [pc, #272]	; (800d8b4 <tcp_create_segment+0x128>)
 800d7a4:	22a3      	movs	r2, #163	; 0xa3
 800d7a6:	4944      	ldr	r1, [pc, #272]	; (800d8b8 <tcp_create_segment+0x12c>)
 800d7a8:	4844      	ldr	r0, [pc, #272]	; (800d8bc <tcp_create_segment+0x130>)
 800d7aa:	f007 faa3 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d105      	bne.n	800d7c0 <tcp_create_segment+0x34>
 800d7b4:	4b3f      	ldr	r3, [pc, #252]	; (800d8b4 <tcp_create_segment+0x128>)
 800d7b6:	22a4      	movs	r2, #164	; 0xa4
 800d7b8:	4941      	ldr	r1, [pc, #260]	; (800d8c0 <tcp_create_segment+0x134>)
 800d7ba:	4840      	ldr	r0, [pc, #256]	; (800d8bc <tcp_create_segment+0x130>)
 800d7bc:	f007 fa9a 	bl	8014cf4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d7c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d7c4:	009b      	lsls	r3, r3, #2
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	f003 0304 	and.w	r3, r3, #4
 800d7cc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d7ce:	2003      	movs	r0, #3
 800d7d0:	f7fa fcf6 	bl	80081c0 <memp_malloc>
 800d7d4:	6138      	str	r0, [r7, #16]
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d104      	bne.n	800d7e6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d7dc:	68b8      	ldr	r0, [r7, #8]
 800d7de:	f7fb fbd5 	bl	8008f8c <pbuf_free>
    return NULL;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	e061      	b.n	800d8aa <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d7ec:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	68ba      	ldr	r2, [r7, #8]
 800d7f8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	891a      	ldrh	r2, [r3, #8]
 800d7fe:	7dfb      	ldrb	r3, [r7, #23]
 800d800:	b29b      	uxth	r3, r3
 800d802:	429a      	cmp	r2, r3
 800d804:	d205      	bcs.n	800d812 <tcp_create_segment+0x86>
 800d806:	4b2b      	ldr	r3, [pc, #172]	; (800d8b4 <tcp_create_segment+0x128>)
 800d808:	22b0      	movs	r2, #176	; 0xb0
 800d80a:	492e      	ldr	r1, [pc, #184]	; (800d8c4 <tcp_create_segment+0x138>)
 800d80c:	482b      	ldr	r0, [pc, #172]	; (800d8bc <tcp_create_segment+0x130>)
 800d80e:	f007 fa71 	bl	8014cf4 <iprintf>
  seg->len = p->tot_len - optlen;
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	891a      	ldrh	r2, [r3, #8]
 800d816:	7dfb      	ldrb	r3, [r7, #23]
 800d818:	b29b      	uxth	r3, r3
 800d81a:	1ad3      	subs	r3, r2, r3
 800d81c:	b29a      	uxth	r2, r3
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d822:	2114      	movs	r1, #20
 800d824:	68b8      	ldr	r0, [r7, #8]
 800d826:	f7fb fb1b 	bl	8008e60 <pbuf_add_header>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d004      	beq.n	800d83a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d830:	6938      	ldr	r0, [r7, #16]
 800d832:	f7fc ffe8 	bl	800a806 <tcp_seg_free>
    return NULL;
 800d836:	2300      	movs	r3, #0
 800d838:	e037      	b.n	800d8aa <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	685a      	ldr	r2, [r3, #4]
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	8ada      	ldrh	r2, [r3, #22]
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	68dc      	ldr	r4, [r3, #12]
 800d84c:	4610      	mov	r0, r2
 800d84e:	f7fa f83f 	bl	80078d0 <lwip_htons>
 800d852:	4603      	mov	r3, r0
 800d854:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	8b1a      	ldrh	r2, [r3, #24]
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	68dc      	ldr	r4, [r3, #12]
 800d85e:	4610      	mov	r0, r2
 800d860:	f7fa f836 	bl	80078d0 <lwip_htons>
 800d864:	4603      	mov	r3, r0
 800d866:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	68dc      	ldr	r4, [r3, #12]
 800d86c:	6838      	ldr	r0, [r7, #0]
 800d86e:	f7fa f844 	bl	80078fa <lwip_htonl>
 800d872:	4603      	mov	r3, r0
 800d874:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d876:	7dfb      	ldrb	r3, [r7, #23]
 800d878:	089b      	lsrs	r3, r3, #2
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	b29b      	uxth	r3, r3
 800d87e:	3305      	adds	r3, #5
 800d880:	b29b      	uxth	r3, r3
 800d882:	031b      	lsls	r3, r3, #12
 800d884:	b29a      	uxth	r2, r3
 800d886:	79fb      	ldrb	r3, [r7, #7]
 800d888:	b29b      	uxth	r3, r3
 800d88a:	4313      	orrs	r3, r2
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	68dc      	ldr	r4, [r3, #12]
 800d892:	4610      	mov	r0, r2
 800d894:	f7fa f81c 	bl	80078d0 <lwip_htons>
 800d898:	4603      	mov	r3, r0
 800d89a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	749a      	strb	r2, [r3, #18]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	74da      	strb	r2, [r3, #19]
  return seg;
 800d8a8:	693b      	ldr	r3, [r7, #16]
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	371c      	adds	r7, #28
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd90      	pop	{r4, r7, pc}
 800d8b2:	bf00      	nop
 800d8b4:	08018e5c 	.word	0x08018e5c
 800d8b8:	08018e90 	.word	0x08018e90
 800d8bc:	08018eb0 	.word	0x08018eb0
 800d8c0:	08018ed8 	.word	0x08018ed8
 800d8c4:	08018efc 	.word	0x08018efc

0800d8c8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b086      	sub	sp, #24
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	607b      	str	r3, [r7, #4]
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	73fb      	strb	r3, [r7, #15]
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	81bb      	strh	r3, [r7, #12]
 800d8d8:	4613      	mov	r3, r2
 800d8da:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d8dc:	89bb      	ldrh	r3, [r7, #12]
 800d8de:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d105      	bne.n	800d8f2 <tcp_pbuf_prealloc+0x2a>
 800d8e6:	4b30      	ldr	r3, [pc, #192]	; (800d9a8 <tcp_pbuf_prealloc+0xe0>)
 800d8e8:	22e8      	movs	r2, #232	; 0xe8
 800d8ea:	4930      	ldr	r1, [pc, #192]	; (800d9ac <tcp_pbuf_prealloc+0xe4>)
 800d8ec:	4830      	ldr	r0, [pc, #192]	; (800d9b0 <tcp_pbuf_prealloc+0xe8>)
 800d8ee:	f007 fa01 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d8f2:	6a3b      	ldr	r3, [r7, #32]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d105      	bne.n	800d904 <tcp_pbuf_prealloc+0x3c>
 800d8f8:	4b2b      	ldr	r3, [pc, #172]	; (800d9a8 <tcp_pbuf_prealloc+0xe0>)
 800d8fa:	22e9      	movs	r2, #233	; 0xe9
 800d8fc:	492d      	ldr	r1, [pc, #180]	; (800d9b4 <tcp_pbuf_prealloc+0xec>)
 800d8fe:	482c      	ldr	r0, [pc, #176]	; (800d9b0 <tcp_pbuf_prealloc+0xe8>)
 800d900:	f007 f9f8 	bl	8014cf4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d904:	89ba      	ldrh	r2, [r7, #12]
 800d906:	897b      	ldrh	r3, [r7, #10]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d221      	bcs.n	800d950 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d90c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d910:	f003 0302 	and.w	r3, r3, #2
 800d914:	2b00      	cmp	r3, #0
 800d916:	d111      	bne.n	800d93c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800d918:	6a3b      	ldr	r3, [r7, #32]
 800d91a:	8b5b      	ldrh	r3, [r3, #26]
 800d91c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d920:	2b00      	cmp	r3, #0
 800d922:	d115      	bne.n	800d950 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800d924:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d007      	beq.n	800d93c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d92c:	6a3b      	ldr	r3, [r7, #32]
 800d92e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800d930:	2b00      	cmp	r3, #0
 800d932:	d103      	bne.n	800d93c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800d934:	6a3b      	ldr	r3, [r7, #32]
 800d936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d009      	beq.n	800d950 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d93c:	89bb      	ldrh	r3, [r7, #12]
 800d93e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800d942:	f023 0203 	bic.w	r2, r3, #3
 800d946:	897b      	ldrh	r3, [r7, #10]
 800d948:	4293      	cmp	r3, r2
 800d94a:	bf28      	it	cs
 800d94c:	4613      	movcs	r3, r2
 800d94e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d950:	8af9      	ldrh	r1, [r7, #22]
 800d952:	7bfb      	ldrb	r3, [r7, #15]
 800d954:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d958:	4618      	mov	r0, r3
 800d95a:	f7fb f833 	bl	80089c4 <pbuf_alloc>
 800d95e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d101      	bne.n	800d96a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800d966:	2300      	movs	r3, #0
 800d968:	e019      	b.n	800d99e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d006      	beq.n	800d980 <tcp_pbuf_prealloc+0xb8>
 800d972:	4b0d      	ldr	r3, [pc, #52]	; (800d9a8 <tcp_pbuf_prealloc+0xe0>)
 800d974:	f240 120b 	movw	r2, #267	; 0x10b
 800d978:	490f      	ldr	r1, [pc, #60]	; (800d9b8 <tcp_pbuf_prealloc+0xf0>)
 800d97a:	480d      	ldr	r0, [pc, #52]	; (800d9b0 <tcp_pbuf_prealloc+0xe8>)
 800d97c:	f007 f9ba 	bl	8014cf4 <iprintf>
  *oversize = p->len - length;
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	895a      	ldrh	r2, [r3, #10]
 800d984:	89bb      	ldrh	r3, [r7, #12]
 800d986:	1ad3      	subs	r3, r2, r3
 800d988:	b29a      	uxth	r2, r3
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	89ba      	ldrh	r2, [r7, #12]
 800d992:	811a      	strh	r2, [r3, #8]
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	891a      	ldrh	r2, [r3, #8]
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	815a      	strh	r2, [r3, #10]
  return p;
 800d99c:	693b      	ldr	r3, [r7, #16]
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3718      	adds	r7, #24
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	08018e5c 	.word	0x08018e5c
 800d9ac:	08018f14 	.word	0x08018f14
 800d9b0:	08018eb0 	.word	0x08018eb0
 800d9b4:	08018f38 	.word	0x08018f38
 800d9b8:	08018f58 	.word	0x08018f58

0800d9bc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d106      	bne.n	800d9dc <tcp_write_checks+0x20>
 800d9ce:	4b33      	ldr	r3, [pc, #204]	; (800da9c <tcp_write_checks+0xe0>)
 800d9d0:	f240 1233 	movw	r2, #307	; 0x133
 800d9d4:	4932      	ldr	r1, [pc, #200]	; (800daa0 <tcp_write_checks+0xe4>)
 800d9d6:	4833      	ldr	r0, [pc, #204]	; (800daa4 <tcp_write_checks+0xe8>)
 800d9d8:	f007 f98c 	bl	8014cf4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	7d1b      	ldrb	r3, [r3, #20]
 800d9e0:	2b04      	cmp	r3, #4
 800d9e2:	d00e      	beq.n	800da02 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800d9e8:	2b07      	cmp	r3, #7
 800d9ea:	d00a      	beq.n	800da02 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d9f0:	2b02      	cmp	r3, #2
 800d9f2:	d006      	beq.n	800da02 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800d9f8:	2b03      	cmp	r3, #3
 800d9fa:	d002      	beq.n	800da02 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d9fc:	f06f 030a 	mvn.w	r3, #10
 800da00:	e048      	b.n	800da94 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800da02:	887b      	ldrh	r3, [r7, #2]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d101      	bne.n	800da0c <tcp_write_checks+0x50>
    return ERR_OK;
 800da08:	2300      	movs	r3, #0
 800da0a:	e043      	b.n	800da94 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800da12:	887a      	ldrh	r2, [r7, #2]
 800da14:	429a      	cmp	r2, r3
 800da16:	d909      	bls.n	800da2c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	8b5b      	ldrh	r3, [r3, #26]
 800da1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da20:	b29a      	uxth	r2, r3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800da26:	f04f 33ff 	mov.w	r3, #4294967295
 800da2a:	e033      	b.n	800da94 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800da32:	2b08      	cmp	r3, #8
 800da34:	d909      	bls.n	800da4a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	8b5b      	ldrh	r3, [r3, #26]
 800da3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da3e:	b29a      	uxth	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800da44:	f04f 33ff 	mov.w	r3, #4294967295
 800da48:	e024      	b.n	800da94 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800da50:	2b00      	cmp	r3, #0
 800da52:	d00f      	beq.n	800da74 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d11a      	bne.n	800da92 <tcp_write_checks+0xd6>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da60:	2b00      	cmp	r3, #0
 800da62:	d116      	bne.n	800da92 <tcp_write_checks+0xd6>
 800da64:	4b0d      	ldr	r3, [pc, #52]	; (800da9c <tcp_write_checks+0xe0>)
 800da66:	f240 1255 	movw	r2, #341	; 0x155
 800da6a:	490f      	ldr	r1, [pc, #60]	; (800daa8 <tcp_write_checks+0xec>)
 800da6c:	480d      	ldr	r0, [pc, #52]	; (800daa4 <tcp_write_checks+0xe8>)
 800da6e:	f007 f941 	bl	8014cf4 <iprintf>
 800da72:	e00e      	b.n	800da92 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d103      	bne.n	800da84 <tcp_write_checks+0xc8>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da80:	2b00      	cmp	r3, #0
 800da82:	d006      	beq.n	800da92 <tcp_write_checks+0xd6>
 800da84:	4b05      	ldr	r3, [pc, #20]	; (800da9c <tcp_write_checks+0xe0>)
 800da86:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800da8a:	4908      	ldr	r1, [pc, #32]	; (800daac <tcp_write_checks+0xf0>)
 800da8c:	4805      	ldr	r0, [pc, #20]	; (800daa4 <tcp_write_checks+0xe8>)
 800da8e:	f007 f931 	bl	8014cf4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800da92:	2300      	movs	r3, #0
}
 800da94:	4618      	mov	r0, r3
 800da96:	3708      	adds	r7, #8
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	08018e5c 	.word	0x08018e5c
 800daa0:	08018f6c 	.word	0x08018f6c
 800daa4:	08018eb0 	.word	0x08018eb0
 800daa8:	08018f8c 	.word	0x08018f8c
 800daac:	08018fc8 	.word	0x08018fc8

0800dab0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800dab0:	b590      	push	{r4, r7, lr}
 800dab2:	b09b      	sub	sp, #108	; 0x6c
 800dab4:	af04      	add	r7, sp, #16
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	60b9      	str	r1, [r7, #8]
 800daba:	4611      	mov	r1, r2
 800dabc:	461a      	mov	r2, r3
 800dabe:	460b      	mov	r3, r1
 800dac0:	80fb      	strh	r3, [r7, #6]
 800dac2:	4613      	mov	r3, r2
 800dac4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800dac6:	2300      	movs	r3, #0
 800dac8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800daca:	2300      	movs	r3, #0
 800dacc:	653b      	str	r3, [r7, #80]	; 0x50
 800dace:	2300      	movs	r3, #0
 800dad0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dad2:	2300      	movs	r3, #0
 800dad4:	64bb      	str	r3, [r7, #72]	; 0x48
 800dad6:	2300      	movs	r3, #0
 800dad8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800dada:	2300      	movs	r3, #0
 800dadc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800dae0:	2300      	movs	r3, #0
 800dae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800dae6:	2300      	movs	r3, #0
 800dae8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800daea:	2300      	movs	r3, #0
 800daec:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800daee:	2300      	movs	r3, #0
 800daf0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d109      	bne.n	800db0c <tcp_write+0x5c>
 800daf8:	4ba4      	ldr	r3, [pc, #656]	; (800dd8c <tcp_write+0x2dc>)
 800dafa:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800dafe:	49a4      	ldr	r1, [pc, #656]	; (800dd90 <tcp_write+0x2e0>)
 800db00:	48a4      	ldr	r0, [pc, #656]	; (800dd94 <tcp_write+0x2e4>)
 800db02:	f007 f8f7 	bl	8014cf4 <iprintf>
 800db06:	f06f 030f 	mvn.w	r3, #15
 800db0a:	e32a      	b.n	800e162 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db12:	085b      	lsrs	r3, r3, #1
 800db14:	b29a      	uxth	r2, r3
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db1a:	4293      	cmp	r3, r2
 800db1c:	bf28      	it	cs
 800db1e:	4613      	movcs	r3, r2
 800db20:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800db22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db24:	2b00      	cmp	r3, #0
 800db26:	d102      	bne.n	800db2e <tcp_write+0x7e>
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db2c:	e000      	b.n	800db30 <tcp_write+0x80>
 800db2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db30:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d109      	bne.n	800db4c <tcp_write+0x9c>
 800db38:	4b94      	ldr	r3, [pc, #592]	; (800dd8c <tcp_write+0x2dc>)
 800db3a:	f240 12ad 	movw	r2, #429	; 0x1ad
 800db3e:	4996      	ldr	r1, [pc, #600]	; (800dd98 <tcp_write+0x2e8>)
 800db40:	4894      	ldr	r0, [pc, #592]	; (800dd94 <tcp_write+0x2e4>)
 800db42:	f007 f8d7 	bl	8014cf4 <iprintf>
 800db46:	f06f 030f 	mvn.w	r3, #15
 800db4a:	e30a      	b.n	800e162 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800db4c:	88fb      	ldrh	r3, [r7, #6]
 800db4e:	4619      	mov	r1, r3
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f7ff ff33 	bl	800d9bc <tcp_write_checks>
 800db56:	4603      	mov	r3, r0
 800db58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800db5c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800db60:	2b00      	cmp	r3, #0
 800db62:	d002      	beq.n	800db6a <tcp_write+0xba>
    return err;
 800db64:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800db68:	e2fb      	b.n	800e162 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db70:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800db74:	2300      	movs	r3, #0
 800db76:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f000 80f6 	beq.w	800dd70 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db88:	653b      	str	r3, [r7, #80]	; 0x50
 800db8a:	e002      	b.n	800db92 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800db8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800db92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1f8      	bne.n	800db8c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800db9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db9c:	7a9b      	ldrb	r3, [r3, #10]
 800db9e:	009b      	lsls	r3, r3, #2
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	f003 0304 	and.w	r3, r3, #4
 800dba6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800dba8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dbaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbac:	891b      	ldrh	r3, [r3, #8]
 800dbae:	4619      	mov	r1, r3
 800dbb0:	8c3b      	ldrh	r3, [r7, #32]
 800dbb2:	440b      	add	r3, r1
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	da06      	bge.n	800dbc6 <tcp_write+0x116>
 800dbb8:	4b74      	ldr	r3, [pc, #464]	; (800dd8c <tcp_write+0x2dc>)
 800dbba:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dbbe:	4977      	ldr	r1, [pc, #476]	; (800dd9c <tcp_write+0x2ec>)
 800dbc0:	4874      	ldr	r0, [pc, #464]	; (800dd94 <tcp_write+0x2e4>)
 800dbc2:	f007 f897 	bl	8014cf4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800dbc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbc8:	891a      	ldrh	r2, [r3, #8]
 800dbca:	8c3b      	ldrh	r3, [r7, #32]
 800dbcc:	4413      	add	r3, r2
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dbdc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800dbde:	8a7b      	ldrh	r3, [r7, #18]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d026      	beq.n	800dc32 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800dbe4:	8a7b      	ldrh	r3, [r7, #18]
 800dbe6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d206      	bcs.n	800dbfa <tcp_write+0x14a>
 800dbec:	4b67      	ldr	r3, [pc, #412]	; (800dd8c <tcp_write+0x2dc>)
 800dbee:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800dbf2:	496b      	ldr	r1, [pc, #428]	; (800dda0 <tcp_write+0x2f0>)
 800dbf4:	4867      	ldr	r0, [pc, #412]	; (800dd94 <tcp_write+0x2e4>)
 800dbf6:	f007 f87d 	bl	8014cf4 <iprintf>
      seg = last_unsent;
 800dbfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbfc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800dbfe:	8a7b      	ldrh	r3, [r7, #18]
 800dc00:	88fa      	ldrh	r2, [r7, #6]
 800dc02:	4293      	cmp	r3, r2
 800dc04:	bf28      	it	cs
 800dc06:	4613      	movcs	r3, r2
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	bf28      	it	cs
 800dc10:	4613      	movcs	r3, r2
 800dc12:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800dc14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dc18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dc1a:	4413      	add	r3, r2
 800dc1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800dc20:	8a7a      	ldrh	r2, [r7, #18]
 800dc22:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dc24:	1ad3      	subs	r3, r2, r3
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800dc2a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dc2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dc2e:	1ad3      	subs	r3, r2, r3
 800dc30:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800dc32:	8a7b      	ldrh	r3, [r7, #18]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d00b      	beq.n	800dc50 <tcp_write+0x1a0>
 800dc38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dc3c:	88fb      	ldrh	r3, [r7, #6]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d006      	beq.n	800dc50 <tcp_write+0x1a0>
 800dc42:	4b52      	ldr	r3, [pc, #328]	; (800dd8c <tcp_write+0x2dc>)
 800dc44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc48:	4956      	ldr	r1, [pc, #344]	; (800dda4 <tcp_write+0x2f4>)
 800dc4a:	4852      	ldr	r0, [pc, #328]	; (800dd94 <tcp_write+0x2e4>)
 800dc4c:	f007 f852 	bl	8014cf4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800dc50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dc54:	88fb      	ldrh	r3, [r7, #6]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	f080 8167 	bcs.w	800df2a <tcp_write+0x47a>
 800dc5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	f000 8163 	beq.w	800df2a <tcp_write+0x47a>
 800dc64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc66:	891b      	ldrh	r3, [r3, #8]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	f000 815e 	beq.w	800df2a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800dc6e:	88fa      	ldrh	r2, [r7, #6]
 800dc70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dc74:	1ad2      	subs	r2, r2, r3
 800dc76:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	bfa8      	it	ge
 800dc7c:	4613      	movge	r3, r2
 800dc7e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800dc80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc82:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dc84:	797b      	ldrb	r3, [r7, #5]
 800dc86:	f003 0301 	and.w	r3, r3, #1
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d027      	beq.n	800dcde <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800dc8e:	f107 0012 	add.w	r0, r7, #18
 800dc92:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dc94:	8bf9      	ldrh	r1, [r7, #30]
 800dc96:	2301      	movs	r3, #1
 800dc98:	9302      	str	r3, [sp, #8]
 800dc9a:	797b      	ldrb	r3, [r7, #5]
 800dc9c:	9301      	str	r3, [sp, #4]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	9300      	str	r3, [sp, #0]
 800dca2:	4603      	mov	r3, r0
 800dca4:	2000      	movs	r0, #0
 800dca6:	f7ff fe0f 	bl	800d8c8 <tcp_pbuf_prealloc>
 800dcaa:	6578      	str	r0, [r7, #84]	; 0x54
 800dcac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	f000 8225 	beq.w	800e0fe <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800dcb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcb6:	6858      	ldr	r0, [r3, #4]
 800dcb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dcbc:	68ba      	ldr	r2, [r7, #8]
 800dcbe:	4413      	add	r3, r2
 800dcc0:	8bfa      	ldrh	r2, [r7, #30]
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	f007 fa8f 	bl	80151e6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800dcc8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dcca:	f7fb f9e7 	bl	800909c <pbuf_clen>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dcd6:	4413      	add	r3, r2
 800dcd8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800dcdc:	e041      	b.n	800dd62 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800dcde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	637b      	str	r3, [r7, #52]	; 0x34
 800dce4:	e002      	b.n	800dcec <tcp_write+0x23c>
 800dce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	637b      	str	r3, [r7, #52]	; 0x34
 800dcec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d1f8      	bne.n	800dce6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800dcf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcf6:	7b1b      	ldrb	r3, [r3, #12]
 800dcf8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d115      	bne.n	800dd2c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800dd00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd06:	8952      	ldrh	r2, [r2, #10]
 800dd08:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800dd0a:	68ba      	ldr	r2, [r7, #8]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d10d      	bne.n	800dd2c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800dd10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d006      	beq.n	800dd26 <tcp_write+0x276>
 800dd18:	4b1c      	ldr	r3, [pc, #112]	; (800dd8c <tcp_write+0x2dc>)
 800dd1a:	f240 2231 	movw	r2, #561	; 0x231
 800dd1e:	4922      	ldr	r1, [pc, #136]	; (800dda8 <tcp_write+0x2f8>)
 800dd20:	481c      	ldr	r0, [pc, #112]	; (800dd94 <tcp_write+0x2e4>)
 800dd22:	f006 ffe7 	bl	8014cf4 <iprintf>
          extendlen = seglen;
 800dd26:	8bfb      	ldrh	r3, [r7, #30]
 800dd28:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800dd2a:	e01a      	b.n	800dd62 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800dd2c:	8bfb      	ldrh	r3, [r7, #30]
 800dd2e:	2201      	movs	r2, #1
 800dd30:	4619      	mov	r1, r3
 800dd32:	2000      	movs	r0, #0
 800dd34:	f7fa fe46 	bl	80089c4 <pbuf_alloc>
 800dd38:	6578      	str	r0, [r7, #84]	; 0x54
 800dd3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	f000 81e0 	beq.w	800e102 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800dd42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dd46:	68ba      	ldr	r2, [r7, #8]
 800dd48:	441a      	add	r2, r3
 800dd4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd4c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800dd4e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dd50:	f7fb f9a4 	bl	800909c <pbuf_clen>
 800dd54:	4603      	mov	r3, r0
 800dd56:	461a      	mov	r2, r3
 800dd58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dd5c:	4413      	add	r3, r2
 800dd5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800dd62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dd66:	8bfb      	ldrh	r3, [r7, #30]
 800dd68:	4413      	add	r3, r2
 800dd6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800dd6e:	e0dc      	b.n	800df2a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	f000 80d7 	beq.w	800df2a <tcp_write+0x47a>
 800dd7c:	4b03      	ldr	r3, [pc, #12]	; (800dd8c <tcp_write+0x2dc>)
 800dd7e:	f240 224a 	movw	r2, #586	; 0x24a
 800dd82:	490a      	ldr	r1, [pc, #40]	; (800ddac <tcp_write+0x2fc>)
 800dd84:	4803      	ldr	r0, [pc, #12]	; (800dd94 <tcp_write+0x2e4>)
 800dd86:	f006 ffb5 	bl	8014cf4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800dd8a:	e0ce      	b.n	800df2a <tcp_write+0x47a>
 800dd8c:	08018e5c 	.word	0x08018e5c
 800dd90:	08018ffc 	.word	0x08018ffc
 800dd94:	08018eb0 	.word	0x08018eb0
 800dd98:	08019014 	.word	0x08019014
 800dd9c:	08019048 	.word	0x08019048
 800dda0:	08019060 	.word	0x08019060
 800dda4:	08019080 	.word	0x08019080
 800dda8:	080190a0 	.word	0x080190a0
 800ddac:	080190cc 	.word	0x080190cc
    struct pbuf *p;
    u16_t left = len - pos;
 800ddb0:	88fa      	ldrh	r2, [r7, #6]
 800ddb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ddb6:	1ad3      	subs	r3, r2, r3
 800ddb8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800ddba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800ddc6:	8b7a      	ldrh	r2, [r7, #26]
 800ddc8:	8bbb      	ldrh	r3, [r7, #28]
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	bf28      	it	cs
 800ddce:	4613      	movcs	r3, r2
 800ddd0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ddd2:	797b      	ldrb	r3, [r7, #5]
 800ddd4:	f003 0301 	and.w	r3, r3, #1
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d036      	beq.n	800de4a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800dddc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dde0:	b29a      	uxth	r2, r3
 800dde2:	8b3b      	ldrh	r3, [r7, #24]
 800dde4:	4413      	add	r3, r2
 800dde6:	b299      	uxth	r1, r3
 800dde8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	bf0c      	ite	eq
 800ddee:	2301      	moveq	r3, #1
 800ddf0:	2300      	movne	r3, #0
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	f107 0012 	add.w	r0, r7, #18
 800ddf8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ddfa:	9302      	str	r3, [sp, #8]
 800ddfc:	797b      	ldrb	r3, [r7, #5]
 800ddfe:	9301      	str	r3, [sp, #4]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	4603      	mov	r3, r0
 800de06:	2036      	movs	r0, #54	; 0x36
 800de08:	f7ff fd5e 	bl	800d8c8 <tcp_pbuf_prealloc>
 800de0c:	6338      	str	r0, [r7, #48]	; 0x30
 800de0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de10:	2b00      	cmp	r3, #0
 800de12:	f000 8178 	beq.w	800e106 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800de16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de18:	895b      	ldrh	r3, [r3, #10]
 800de1a:	8b3a      	ldrh	r2, [r7, #24]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d906      	bls.n	800de2e <tcp_write+0x37e>
 800de20:	4b8c      	ldr	r3, [pc, #560]	; (800e054 <tcp_write+0x5a4>)
 800de22:	f240 2266 	movw	r2, #614	; 0x266
 800de26:	498c      	ldr	r1, [pc, #560]	; (800e058 <tcp_write+0x5a8>)
 800de28:	488c      	ldr	r0, [pc, #560]	; (800e05c <tcp_write+0x5ac>)
 800de2a:	f006 ff63 	bl	8014cf4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800de2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de30:	685a      	ldr	r2, [r3, #4]
 800de32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800de36:	18d0      	adds	r0, r2, r3
 800de38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de3c:	68ba      	ldr	r2, [r7, #8]
 800de3e:	4413      	add	r3, r2
 800de40:	8b3a      	ldrh	r2, [r7, #24]
 800de42:	4619      	mov	r1, r3
 800de44:	f007 f9cf 	bl	80151e6 <memcpy>
 800de48:	e02f      	b.n	800deaa <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800de4a:	8a7b      	ldrh	r3, [r7, #18]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d006      	beq.n	800de5e <tcp_write+0x3ae>
 800de50:	4b80      	ldr	r3, [pc, #512]	; (800e054 <tcp_write+0x5a4>)
 800de52:	f240 2271 	movw	r2, #625	; 0x271
 800de56:	4982      	ldr	r1, [pc, #520]	; (800e060 <tcp_write+0x5b0>)
 800de58:	4880      	ldr	r0, [pc, #512]	; (800e05c <tcp_write+0x5ac>)
 800de5a:	f006 ff4b 	bl	8014cf4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800de5e:	8b3b      	ldrh	r3, [r7, #24]
 800de60:	2201      	movs	r2, #1
 800de62:	4619      	mov	r1, r3
 800de64:	2036      	movs	r0, #54	; 0x36
 800de66:	f7fa fdad 	bl	80089c4 <pbuf_alloc>
 800de6a:	6178      	str	r0, [r7, #20]
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f000 814b 	beq.w	800e10a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800de74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de78:	68ba      	ldr	r2, [r7, #8]
 800de7a:	441a      	add	r2, r3
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800de80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800de84:	b29b      	uxth	r3, r3
 800de86:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de8a:	4619      	mov	r1, r3
 800de8c:	2036      	movs	r0, #54	; 0x36
 800de8e:	f7fa fd99 	bl	80089c4 <pbuf_alloc>
 800de92:	6338      	str	r0, [r7, #48]	; 0x30
 800de94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de96:	2b00      	cmp	r3, #0
 800de98:	d103      	bne.n	800dea2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800de9a:	6978      	ldr	r0, [r7, #20]
 800de9c:	f7fb f876 	bl	8008f8c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800dea0:	e136      	b.n	800e110 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800dea2:	6979      	ldr	r1, [r7, #20]
 800dea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dea6:	f7fb f933 	bl	8009110 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800deaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800deac:	f7fb f8f6 	bl	800909c <pbuf_clen>
 800deb0:	4603      	mov	r3, r0
 800deb2:	461a      	mov	r2, r3
 800deb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800deb8:	4413      	add	r3, r2
 800deba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800debe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dec2:	2b09      	cmp	r3, #9
 800dec4:	d903      	bls.n	800dece <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800dec6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dec8:	f7fb f860 	bl	8008f8c <pbuf_free>
      goto memerr;
 800decc:	e120      	b.n	800e110 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ded2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ded6:	441a      	add	r2, r3
 800ded8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dedc:	9300      	str	r3, [sp, #0]
 800dede:	4613      	mov	r3, r2
 800dee0:	2200      	movs	r2, #0
 800dee2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	f7ff fc51 	bl	800d78c <tcp_create_segment>
 800deea:	64f8      	str	r0, [r7, #76]	; 0x4c
 800deec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deee:	2b00      	cmp	r3, #0
 800def0:	f000 810d 	beq.w	800e10e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800def4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800def6:	2b00      	cmp	r3, #0
 800def8:	d102      	bne.n	800df00 <tcp_write+0x450>
      queue = seg;
 800defa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800defc:	647b      	str	r3, [r7, #68]	; 0x44
 800defe:	e00c      	b.n	800df1a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800df00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df02:	2b00      	cmp	r3, #0
 800df04:	d106      	bne.n	800df14 <tcp_write+0x464>
 800df06:	4b53      	ldr	r3, [pc, #332]	; (800e054 <tcp_write+0x5a4>)
 800df08:	f240 22ab 	movw	r2, #683	; 0x2ab
 800df0c:	4955      	ldr	r1, [pc, #340]	; (800e064 <tcp_write+0x5b4>)
 800df0e:	4853      	ldr	r0, [pc, #332]	; (800e05c <tcp_write+0x5ac>)
 800df10:	f006 fef0 	bl	8014cf4 <iprintf>
      prev_seg->next = seg;
 800df14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df18:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800df1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df1c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800df1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df22:	8b3b      	ldrh	r3, [r7, #24]
 800df24:	4413      	add	r3, r2
 800df26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800df2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df2e:	88fb      	ldrh	r3, [r7, #6]
 800df30:	429a      	cmp	r2, r3
 800df32:	f4ff af3d 	bcc.w	800ddb0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800df36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d02c      	beq.n	800df96 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800df3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df42:	e01e      	b.n	800df82 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800df44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df46:	891a      	ldrh	r2, [r3, #8]
 800df48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df4a:	4413      	add	r3, r2
 800df4c:	b29a      	uxth	r2, r3
 800df4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df50:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800df52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d110      	bne.n	800df7c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800df5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df60:	8952      	ldrh	r2, [r2, #10]
 800df62:	4413      	add	r3, r2
 800df64:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800df66:	68b9      	ldr	r1, [r7, #8]
 800df68:	4618      	mov	r0, r3
 800df6a:	f007 f93c 	bl	80151e6 <memcpy>
        p->len += oversize_used;
 800df6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df70:	895a      	ldrh	r2, [r3, #10]
 800df72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df74:	4413      	add	r3, r2
 800df76:	b29a      	uxth	r2, r3
 800df78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800df7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df84:	2b00      	cmp	r3, #0
 800df86:	d1dd      	bne.n	800df44 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800df88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df8a:	891a      	ldrh	r2, [r3, #8]
 800df8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df8e:	4413      	add	r3, r2
 800df90:	b29a      	uxth	r2, r3
 800df92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df94:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800df96:	8a7a      	ldrh	r2, [r7, #18]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800df9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d018      	beq.n	800dfd6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800dfa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d106      	bne.n	800dfb8 <tcp_write+0x508>
 800dfaa:	4b2a      	ldr	r3, [pc, #168]	; (800e054 <tcp_write+0x5a4>)
 800dfac:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800dfb0:	492d      	ldr	r1, [pc, #180]	; (800e068 <tcp_write+0x5b8>)
 800dfb2:	482a      	ldr	r0, [pc, #168]	; (800e05c <tcp_write+0x5ac>)
 800dfb4:	f006 fe9e 	bl	8014cf4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800dfb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fb f8a6 	bl	8009110 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800dfc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfc6:	891a      	ldrh	r2, [r3, #8]
 800dfc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfca:	891b      	ldrh	r3, [r3, #8]
 800dfcc:	4413      	add	r3, r2
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfd2:	811a      	strh	r2, [r3, #8]
 800dfd4:	e037      	b.n	800e046 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800dfd6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d034      	beq.n	800e046 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800dfdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d003      	beq.n	800dfea <tcp_write+0x53a>
 800dfe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d106      	bne.n	800dff8 <tcp_write+0x548>
 800dfea:	4b1a      	ldr	r3, [pc, #104]	; (800e054 <tcp_write+0x5a4>)
 800dfec:	f240 22e6 	movw	r2, #742	; 0x2e6
 800dff0:	491e      	ldr	r1, [pc, #120]	; (800e06c <tcp_write+0x5bc>)
 800dff2:	481a      	ldr	r0, [pc, #104]	; (800e05c <tcp_write+0x5ac>)
 800dff4:	f006 fe7e 	bl	8014cf4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	62bb      	str	r3, [r7, #40]	; 0x28
 800dffe:	e009      	b.n	800e014 <tcp_write+0x564>
      p->tot_len += extendlen;
 800e000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e002:	891a      	ldrh	r2, [r3, #8]
 800e004:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e006:	4413      	add	r3, r2
 800e008:	b29a      	uxth	r2, r3
 800e00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	62bb      	str	r3, [r7, #40]	; 0x28
 800e014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d1f1      	bne.n	800e000 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800e01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01e:	891a      	ldrh	r2, [r3, #8]
 800e020:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e022:	4413      	add	r3, r2
 800e024:	b29a      	uxth	r2, r3
 800e026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e028:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800e02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02c:	895a      	ldrh	r2, [r3, #10]
 800e02e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e030:	4413      	add	r3, r2
 800e032:	b29a      	uxth	r2, r3
 800e034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e036:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800e038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e03a:	891a      	ldrh	r2, [r3, #8]
 800e03c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e03e:	4413      	add	r3, r2
 800e040:	b29a      	uxth	r2, r3
 800e042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e044:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800e046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d111      	bne.n	800e070 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e050:	66da      	str	r2, [r3, #108]	; 0x6c
 800e052:	e010      	b.n	800e076 <tcp_write+0x5c6>
 800e054:	08018e5c 	.word	0x08018e5c
 800e058:	080190fc 	.word	0x080190fc
 800e05c:	08018eb0 	.word	0x08018eb0
 800e060:	0801913c 	.word	0x0801913c
 800e064:	0801914c 	.word	0x0801914c
 800e068:	08019160 	.word	0x08019160
 800e06c:	08019198 	.word	0x08019198
  } else {
    last_unsent->next = queue;
 800e070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e074:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e07a:	88fb      	ldrh	r3, [r7, #6]
 800e07c:	441a      	add	r2, r3
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e088:	88fb      	ldrh	r3, [r7, #6]
 800e08a:	1ad3      	subs	r3, r2, r3
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e09a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d00e      	beq.n	800e0c6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d10a      	bne.n	800e0c6 <tcp_write+0x616>
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d106      	bne.n	800e0c6 <tcp_write+0x616>
 800e0b8:	4b2c      	ldr	r3, [pc, #176]	; (800e16c <tcp_write+0x6bc>)
 800e0ba:	f240 3212 	movw	r2, #786	; 0x312
 800e0be:	492c      	ldr	r1, [pc, #176]	; (800e170 <tcp_write+0x6c0>)
 800e0c0:	482c      	ldr	r0, [pc, #176]	; (800e174 <tcp_write+0x6c4>)
 800e0c2:	f006 fe17 	bl	8014cf4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800e0c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d016      	beq.n	800e0fa <tcp_write+0x64a>
 800e0cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0ce:	68db      	ldr	r3, [r3, #12]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d012      	beq.n	800e0fa <tcp_write+0x64a>
 800e0d4:	797b      	ldrb	r3, [r7, #5]
 800e0d6:	f003 0302 	and.w	r3, r3, #2
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d10d      	bne.n	800e0fa <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e0de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	899b      	ldrh	r3, [r3, #12]
 800e0e4:	b29c      	uxth	r4, r3
 800e0e6:	2008      	movs	r0, #8
 800e0e8:	f7f9 fbf2 	bl	80078d0 <lwip_htons>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	4322      	orrs	r2, r4
 800e0f6:	b292      	uxth	r2, r2
 800e0f8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	e031      	b.n	800e162 <tcp_write+0x6b2>
          goto memerr;
 800e0fe:	bf00      	nop
 800e100:	e006      	b.n	800e110 <tcp_write+0x660>
            goto memerr;
 800e102:	bf00      	nop
 800e104:	e004      	b.n	800e110 <tcp_write+0x660>
        goto memerr;
 800e106:	bf00      	nop
 800e108:	e002      	b.n	800e110 <tcp_write+0x660>
        goto memerr;
 800e10a:	bf00      	nop
 800e10c:	e000      	b.n	800e110 <tcp_write+0x660>
      goto memerr;
 800e10e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	8b5b      	ldrh	r3, [r3, #26]
 800e114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e118:	b29a      	uxth	r2, r3
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800e11e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e120:	2b00      	cmp	r3, #0
 800e122:	d002      	beq.n	800e12a <tcp_write+0x67a>
    pbuf_free(concat_p);
 800e124:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e126:	f7fa ff31 	bl	8008f8c <pbuf_free>
  }
  if (queue != NULL) {
 800e12a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d002      	beq.n	800e136 <tcp_write+0x686>
    tcp_segs_free(queue);
 800e130:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e132:	f7fc fb53 	bl	800a7dc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d00e      	beq.n	800e15e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e144:	2b00      	cmp	r3, #0
 800e146:	d10a      	bne.n	800e15e <tcp_write+0x6ae>
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d106      	bne.n	800e15e <tcp_write+0x6ae>
 800e150:	4b06      	ldr	r3, [pc, #24]	; (800e16c <tcp_write+0x6bc>)
 800e152:	f240 3227 	movw	r2, #807	; 0x327
 800e156:	4906      	ldr	r1, [pc, #24]	; (800e170 <tcp_write+0x6c0>)
 800e158:	4806      	ldr	r0, [pc, #24]	; (800e174 <tcp_write+0x6c4>)
 800e15a:	f006 fdcb 	bl	8014cf4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800e15e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e162:	4618      	mov	r0, r3
 800e164:	375c      	adds	r7, #92	; 0x5c
 800e166:	46bd      	mov	sp, r7
 800e168:	bd90      	pop	{r4, r7, pc}
 800e16a:	bf00      	nop
 800e16c:	08018e5c 	.word	0x08018e5c
 800e170:	080191d0 	.word	0x080191d0
 800e174:	08018eb0 	.word	0x08018eb0

0800e178 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e178:	b590      	push	{r4, r7, lr}
 800e17a:	b08b      	sub	sp, #44	; 0x2c
 800e17c:	af02      	add	r7, sp, #8
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	460b      	mov	r3, r1
 800e182:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e184:	2300      	movs	r3, #0
 800e186:	61fb      	str	r3, [r7, #28]
 800e188:	2300      	movs	r3, #0
 800e18a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e18c:	2300      	movs	r3, #0
 800e18e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d106      	bne.n	800e1a4 <tcp_split_unsent_seg+0x2c>
 800e196:	4b95      	ldr	r3, [pc, #596]	; (800e3ec <tcp_split_unsent_seg+0x274>)
 800e198:	f240 324b 	movw	r2, #843	; 0x34b
 800e19c:	4994      	ldr	r1, [pc, #592]	; (800e3f0 <tcp_split_unsent_seg+0x278>)
 800e19e:	4895      	ldr	r0, [pc, #596]	; (800e3f4 <tcp_split_unsent_seg+0x27c>)
 800e1a0:	f006 fda8 	bl	8014cf4 <iprintf>

  useg = pcb->unsent;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1a8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d102      	bne.n	800e1b6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b4:	e116      	b.n	800e3e4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e1b6:	887b      	ldrh	r3, [r7, #2]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d109      	bne.n	800e1d0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e1bc:	4b8b      	ldr	r3, [pc, #556]	; (800e3ec <tcp_split_unsent_seg+0x274>)
 800e1be:	f240 3253 	movw	r2, #851	; 0x353
 800e1c2:	498d      	ldr	r1, [pc, #564]	; (800e3f8 <tcp_split_unsent_seg+0x280>)
 800e1c4:	488b      	ldr	r0, [pc, #556]	; (800e3f4 <tcp_split_unsent_seg+0x27c>)
 800e1c6:	f006 fd95 	bl	8014cf4 <iprintf>
    return ERR_VAL;
 800e1ca:	f06f 0305 	mvn.w	r3, #5
 800e1ce:	e109      	b.n	800e3e4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	891b      	ldrh	r3, [r3, #8]
 800e1d4:	887a      	ldrh	r2, [r7, #2]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d301      	bcc.n	800e1de <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	e102      	b.n	800e3e4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1e2:	887a      	ldrh	r2, [r7, #2]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d906      	bls.n	800e1f6 <tcp_split_unsent_seg+0x7e>
 800e1e8:	4b80      	ldr	r3, [pc, #512]	; (800e3ec <tcp_split_unsent_seg+0x274>)
 800e1ea:	f240 325b 	movw	r2, #859	; 0x35b
 800e1ee:	4983      	ldr	r1, [pc, #524]	; (800e3fc <tcp_split_unsent_seg+0x284>)
 800e1f0:	4880      	ldr	r0, [pc, #512]	; (800e3f4 <tcp_split_unsent_seg+0x27c>)
 800e1f2:	f006 fd7f 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	891b      	ldrh	r3, [r3, #8]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d106      	bne.n	800e20c <tcp_split_unsent_seg+0x94>
 800e1fe:	4b7b      	ldr	r3, [pc, #492]	; (800e3ec <tcp_split_unsent_seg+0x274>)
 800e200:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e204:	497e      	ldr	r1, [pc, #504]	; (800e400 <tcp_split_unsent_seg+0x288>)
 800e206:	487b      	ldr	r0, [pc, #492]	; (800e3f4 <tcp_split_unsent_seg+0x27c>)
 800e208:	f006 fd74 	bl	8014cf4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	7a9b      	ldrb	r3, [r3, #10]
 800e210:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e212:	7bfb      	ldrb	r3, [r7, #15]
 800e214:	009b      	lsls	r3, r3, #2
 800e216:	b2db      	uxtb	r3, r3
 800e218:	f003 0304 	and.w	r3, r3, #4
 800e21c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	891a      	ldrh	r2, [r3, #8]
 800e222:	887b      	ldrh	r3, [r7, #2]
 800e224:	1ad3      	subs	r3, r2, r3
 800e226:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e228:	7bbb      	ldrb	r3, [r7, #14]
 800e22a:	b29a      	uxth	r2, r3
 800e22c:	89bb      	ldrh	r3, [r7, #12]
 800e22e:	4413      	add	r3, r2
 800e230:	b29b      	uxth	r3, r3
 800e232:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e236:	4619      	mov	r1, r3
 800e238:	2036      	movs	r0, #54	; 0x36
 800e23a:	f7fa fbc3 	bl	80089c4 <pbuf_alloc>
 800e23e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	2b00      	cmp	r3, #0
 800e244:	f000 80b7 	beq.w	800e3b6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	685b      	ldr	r3, [r3, #4]
 800e24c:	891a      	ldrh	r2, [r3, #8]
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	891b      	ldrh	r3, [r3, #8]
 800e252:	1ad3      	subs	r3, r2, r3
 800e254:	b29a      	uxth	r2, r3
 800e256:	887b      	ldrh	r3, [r7, #2]
 800e258:	4413      	add	r3, r2
 800e25a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	6858      	ldr	r0, [r3, #4]
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	685a      	ldr	r2, [r3, #4]
 800e264:	7bbb      	ldrb	r3, [r7, #14]
 800e266:	18d1      	adds	r1, r2, r3
 800e268:	897b      	ldrh	r3, [r7, #10]
 800e26a:	89ba      	ldrh	r2, [r7, #12]
 800e26c:	f7fb f888 	bl	8009380 <pbuf_copy_partial>
 800e270:	4603      	mov	r3, r0
 800e272:	461a      	mov	r2, r3
 800e274:	89bb      	ldrh	r3, [r7, #12]
 800e276:	4293      	cmp	r3, r2
 800e278:	f040 809f 	bne.w	800e3ba <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	899b      	ldrh	r3, [r3, #12]
 800e282:	b29b      	uxth	r3, r3
 800e284:	4618      	mov	r0, r3
 800e286:	f7f9 fb23 	bl	80078d0 <lwip_htons>
 800e28a:	4603      	mov	r3, r0
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e292:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e294:	2300      	movs	r3, #0
 800e296:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e298:	7efb      	ldrb	r3, [r7, #27]
 800e29a:	f003 0308 	and.w	r3, r3, #8
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d007      	beq.n	800e2b2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e2a2:	7efb      	ldrb	r3, [r7, #27]
 800e2a4:	f023 0308 	bic.w	r3, r3, #8
 800e2a8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e2aa:	7ebb      	ldrb	r3, [r7, #26]
 800e2ac:	f043 0308 	orr.w	r3, r3, #8
 800e2b0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e2b2:	7efb      	ldrb	r3, [r7, #27]
 800e2b4:	f003 0301 	and.w	r3, r3, #1
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d007      	beq.n	800e2cc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e2bc:	7efb      	ldrb	r3, [r7, #27]
 800e2be:	f023 0301 	bic.w	r3, r3, #1
 800e2c2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e2c4:	7ebb      	ldrb	r3, [r7, #26]
 800e2c6:	f043 0301 	orr.w	r3, r3, #1
 800e2ca:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7f9 fb11 	bl	80078fa <lwip_htonl>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	887b      	ldrh	r3, [r7, #2]
 800e2dc:	18d1      	adds	r1, r2, r3
 800e2de:	7eba      	ldrb	r2, [r7, #26]
 800e2e0:	7bfb      	ldrb	r3, [r7, #15]
 800e2e2:	9300      	str	r3, [sp, #0]
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	6939      	ldr	r1, [r7, #16]
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f7ff fa4f 	bl	800d78c <tcp_create_segment>
 800e2ee:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d063      	beq.n	800e3be <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7fa fece 	bl	800909c <pbuf_clen>
 800e300:	4603      	mov	r3, r0
 800e302:	461a      	mov	r2, r3
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e30a:	1a9b      	subs	r3, r3, r2
 800e30c:	b29a      	uxth	r2, r3
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	6858      	ldr	r0, [r3, #4]
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	891a      	ldrh	r2, [r3, #8]
 800e31e:	89bb      	ldrh	r3, [r7, #12]
 800e320:	1ad3      	subs	r3, r2, r3
 800e322:	b29b      	uxth	r3, r3
 800e324:	4619      	mov	r1, r3
 800e326:	f7fa fcab 	bl	8008c80 <pbuf_realloc>
  useg->len -= remainder;
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	891a      	ldrh	r2, [r3, #8]
 800e32e:	89bb      	ldrh	r3, [r7, #12]
 800e330:	1ad3      	subs	r3, r2, r3
 800e332:	b29a      	uxth	r2, r3
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	899b      	ldrh	r3, [r3, #12]
 800e33e:	b29c      	uxth	r4, r3
 800e340:	7efb      	ldrb	r3, [r7, #27]
 800e342:	b29b      	uxth	r3, r3
 800e344:	4618      	mov	r0, r3
 800e346:	f7f9 fac3 	bl	80078d0 <lwip_htons>
 800e34a:	4603      	mov	r3, r0
 800e34c:	461a      	mov	r2, r3
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	4322      	orrs	r2, r4
 800e354:	b292      	uxth	r2, r2
 800e356:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7fa fe9d 	bl	800909c <pbuf_clen>
 800e362:	4603      	mov	r3, r0
 800e364:	461a      	mov	r2, r3
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e36c:	4413      	add	r3, r2
 800e36e:	b29a      	uxth	r2, r3
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e376:	69fb      	ldr	r3, [r7, #28]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7fa fe8e 	bl	800909c <pbuf_clen>
 800e380:	4603      	mov	r3, r0
 800e382:	461a      	mov	r2, r3
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e38a:	4413      	add	r3, r2
 800e38c:	b29a      	uxth	r2, r3
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	69fa      	ldr	r2, [r7, #28]
 800e3a0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e3a2:	69fb      	ldr	r3, [r7, #28]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d103      	bne.n	800e3b2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	e016      	b.n	800e3e4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e3b6:	bf00      	nop
 800e3b8:	e002      	b.n	800e3c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e3ba:	bf00      	nop
 800e3bc:	e000      	b.n	800e3c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e3be:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e3c0:	69fb      	ldr	r3, [r7, #28]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d006      	beq.n	800e3d4 <tcp_split_unsent_seg+0x25c>
 800e3c6:	4b09      	ldr	r3, [pc, #36]	; (800e3ec <tcp_split_unsent_seg+0x274>)
 800e3c8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e3cc:	490d      	ldr	r1, [pc, #52]	; (800e404 <tcp_split_unsent_seg+0x28c>)
 800e3ce:	4809      	ldr	r0, [pc, #36]	; (800e3f4 <tcp_split_unsent_seg+0x27c>)
 800e3d0:	f006 fc90 	bl	8014cf4 <iprintf>
  if (p != NULL) {
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d002      	beq.n	800e3e0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e3da:	6938      	ldr	r0, [r7, #16]
 800e3dc:	f7fa fdd6 	bl	8008f8c <pbuf_free>
  }

  return ERR_MEM;
 800e3e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3724      	adds	r7, #36	; 0x24
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd90      	pop	{r4, r7, pc}
 800e3ec:	08018e5c 	.word	0x08018e5c
 800e3f0:	080191f0 	.word	0x080191f0
 800e3f4:	08018eb0 	.word	0x08018eb0
 800e3f8:	08019214 	.word	0x08019214
 800e3fc:	08019238 	.word	0x08019238
 800e400:	08019248 	.word	0x08019248
 800e404:	08019258 	.word	0x08019258

0800e408 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e408:	b590      	push	{r4, r7, lr}
 800e40a:	b085      	sub	sp, #20
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d106      	bne.n	800e424 <tcp_send_fin+0x1c>
 800e416:	4b21      	ldr	r3, [pc, #132]	; (800e49c <tcp_send_fin+0x94>)
 800e418:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e41c:	4920      	ldr	r1, [pc, #128]	; (800e4a0 <tcp_send_fin+0x98>)
 800e41e:	4821      	ldr	r0, [pc, #132]	; (800e4a4 <tcp_send_fin+0x9c>)
 800e420:	f006 fc68 	bl	8014cf4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d02e      	beq.n	800e48a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e430:	60fb      	str	r3, [r7, #12]
 800e432:	e002      	b.n	800e43a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d1f8      	bne.n	800e434 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	68db      	ldr	r3, [r3, #12]
 800e446:	899b      	ldrh	r3, [r3, #12]
 800e448:	b29b      	uxth	r3, r3
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7f9 fa40 	bl	80078d0 <lwip_htons>
 800e450:	4603      	mov	r3, r0
 800e452:	b2db      	uxtb	r3, r3
 800e454:	f003 0307 	and.w	r3, r3, #7
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d116      	bne.n	800e48a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	68db      	ldr	r3, [r3, #12]
 800e460:	899b      	ldrh	r3, [r3, #12]
 800e462:	b29c      	uxth	r4, r3
 800e464:	2001      	movs	r0, #1
 800e466:	f7f9 fa33 	bl	80078d0 <lwip_htons>
 800e46a:	4603      	mov	r3, r0
 800e46c:	461a      	mov	r2, r3
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	68db      	ldr	r3, [r3, #12]
 800e472:	4322      	orrs	r2, r4
 800e474:	b292      	uxth	r2, r2
 800e476:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	8b5b      	ldrh	r3, [r3, #26]
 800e47c:	f043 0320 	orr.w	r3, r3, #32
 800e480:	b29a      	uxth	r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e486:	2300      	movs	r3, #0
 800e488:	e004      	b.n	800e494 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e48a:	2101      	movs	r1, #1
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 f80b 	bl	800e4a8 <tcp_enqueue_flags>
 800e492:	4603      	mov	r3, r0
}
 800e494:	4618      	mov	r0, r3
 800e496:	3714      	adds	r7, #20
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd90      	pop	{r4, r7, pc}
 800e49c:	08018e5c 	.word	0x08018e5c
 800e4a0:	08019264 	.word	0x08019264
 800e4a4:	08018eb0 	.word	0x08018eb0

0800e4a8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b08a      	sub	sp, #40	; 0x28
 800e4ac:	af02      	add	r7, sp, #8
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e4bc:	78fb      	ldrb	r3, [r7, #3]
 800e4be:	f003 0303 	and.w	r3, r3, #3
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d106      	bne.n	800e4d4 <tcp_enqueue_flags+0x2c>
 800e4c6:	4b67      	ldr	r3, [pc, #412]	; (800e664 <tcp_enqueue_flags+0x1bc>)
 800e4c8:	f240 4211 	movw	r2, #1041	; 0x411
 800e4cc:	4966      	ldr	r1, [pc, #408]	; (800e668 <tcp_enqueue_flags+0x1c0>)
 800e4ce:	4867      	ldr	r0, [pc, #412]	; (800e66c <tcp_enqueue_flags+0x1c4>)
 800e4d0:	f006 fc10 	bl	8014cf4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d106      	bne.n	800e4e8 <tcp_enqueue_flags+0x40>
 800e4da:	4b62      	ldr	r3, [pc, #392]	; (800e664 <tcp_enqueue_flags+0x1bc>)
 800e4dc:	f240 4213 	movw	r2, #1043	; 0x413
 800e4e0:	4963      	ldr	r1, [pc, #396]	; (800e670 <tcp_enqueue_flags+0x1c8>)
 800e4e2:	4862      	ldr	r0, [pc, #392]	; (800e66c <tcp_enqueue_flags+0x1c4>)
 800e4e4:	f006 fc06 	bl	8014cf4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e4e8:	78fb      	ldrb	r3, [r7, #3]
 800e4ea:	f003 0302 	and.w	r3, r3, #2
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d001      	beq.n	800e4f6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e4f6:	7ffb      	ldrb	r3, [r7, #31]
 800e4f8:	009b      	lsls	r3, r3, #2
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	f003 0304 	and.w	r3, r3, #4
 800e500:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e502:	7dfb      	ldrb	r3, [r7, #23]
 800e504:	b29b      	uxth	r3, r3
 800e506:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e50a:	4619      	mov	r1, r3
 800e50c:	2036      	movs	r0, #54	; 0x36
 800e50e:	f7fa fa59 	bl	80089c4 <pbuf_alloc>
 800e512:	6138      	str	r0, [r7, #16]
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d109      	bne.n	800e52e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	8b5b      	ldrh	r3, [r3, #26]
 800e51e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e522:	b29a      	uxth	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e528:	f04f 33ff 	mov.w	r3, #4294967295
 800e52c:	e095      	b.n	800e65a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	895a      	ldrh	r2, [r3, #10]
 800e532:	7dfb      	ldrb	r3, [r7, #23]
 800e534:	b29b      	uxth	r3, r3
 800e536:	429a      	cmp	r2, r3
 800e538:	d206      	bcs.n	800e548 <tcp_enqueue_flags+0xa0>
 800e53a:	4b4a      	ldr	r3, [pc, #296]	; (800e664 <tcp_enqueue_flags+0x1bc>)
 800e53c:	f240 4239 	movw	r2, #1081	; 0x439
 800e540:	494c      	ldr	r1, [pc, #304]	; (800e674 <tcp_enqueue_flags+0x1cc>)
 800e542:	484a      	ldr	r0, [pc, #296]	; (800e66c <tcp_enqueue_flags+0x1c4>)
 800e544:	f006 fbd6 	bl	8014cf4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e54c:	78fa      	ldrb	r2, [r7, #3]
 800e54e:	7ffb      	ldrb	r3, [r7, #31]
 800e550:	9300      	str	r3, [sp, #0]
 800e552:	460b      	mov	r3, r1
 800e554:	6939      	ldr	r1, [r7, #16]
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f7ff f918 	bl	800d78c <tcp_create_segment>
 800e55c:	60f8      	str	r0, [r7, #12]
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d109      	bne.n	800e578 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	8b5b      	ldrh	r3, [r3, #26]
 800e568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e56c:	b29a      	uxth	r2, r3
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e572:	f04f 33ff 	mov.w	r3, #4294967295
 800e576:	e070      	b.n	800e65a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	f003 0303 	and.w	r3, r3, #3
 800e580:	2b00      	cmp	r3, #0
 800e582:	d006      	beq.n	800e592 <tcp_enqueue_flags+0xea>
 800e584:	4b37      	ldr	r3, [pc, #220]	; (800e664 <tcp_enqueue_flags+0x1bc>)
 800e586:	f240 4242 	movw	r2, #1090	; 0x442
 800e58a:	493b      	ldr	r1, [pc, #236]	; (800e678 <tcp_enqueue_flags+0x1d0>)
 800e58c:	4837      	ldr	r0, [pc, #220]	; (800e66c <tcp_enqueue_flags+0x1c4>)
 800e58e:	f006 fbb1 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	891b      	ldrh	r3, [r3, #8]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d006      	beq.n	800e5a8 <tcp_enqueue_flags+0x100>
 800e59a:	4b32      	ldr	r3, [pc, #200]	; (800e664 <tcp_enqueue_flags+0x1bc>)
 800e59c:	f240 4243 	movw	r2, #1091	; 0x443
 800e5a0:	4936      	ldr	r1, [pc, #216]	; (800e67c <tcp_enqueue_flags+0x1d4>)
 800e5a2:	4832      	ldr	r0, [pc, #200]	; (800e66c <tcp_enqueue_flags+0x1c4>)
 800e5a4:	f006 fba6 	bl	8014cf4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d103      	bne.n	800e5b8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	68fa      	ldr	r2, [r7, #12]
 800e5b4:	66da      	str	r2, [r3, #108]	; 0x6c
 800e5b6:	e00d      	b.n	800e5d4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5bc:	61bb      	str	r3, [r7, #24]
 800e5be:	e002      	b.n	800e5c6 <tcp_enqueue_flags+0x11e>
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	61bb      	str	r3, [r7, #24]
 800e5c6:	69bb      	ldr	r3, [r7, #24]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d1f8      	bne.n	800e5c0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e5ce:	69bb      	ldr	r3, [r7, #24]
 800e5d0:	68fa      	ldr	r2, [r7, #12]
 800e5d2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e5dc:	78fb      	ldrb	r3, [r7, #3]
 800e5de:	f003 0302 	and.w	r3, r3, #2
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d104      	bne.n	800e5f0 <tcp_enqueue_flags+0x148>
 800e5e6:	78fb      	ldrb	r3, [r7, #3]
 800e5e8:	f003 0301 	and.w	r3, r3, #1
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d004      	beq.n	800e5fa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5f4:	1c5a      	adds	r2, r3, #1
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e5fa:	78fb      	ldrb	r3, [r7, #3]
 800e5fc:	f003 0301 	and.w	r3, r3, #1
 800e600:	2b00      	cmp	r3, #0
 800e602:	d006      	beq.n	800e612 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	8b5b      	ldrh	r3, [r3, #26]
 800e608:	f043 0320 	orr.w	r3, r3, #32
 800e60c:	b29a      	uxth	r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	4618      	mov	r0, r3
 800e618:	f7fa fd40 	bl	800909c <pbuf_clen>
 800e61c:	4603      	mov	r3, r0
 800e61e:	461a      	mov	r2, r3
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e626:	4413      	add	r3, r2
 800e628:	b29a      	uxth	r2, r3
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e636:	2b00      	cmp	r3, #0
 800e638:	d00e      	beq.n	800e658 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d10a      	bne.n	800e658 <tcp_enqueue_flags+0x1b0>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e646:	2b00      	cmp	r3, #0
 800e648:	d106      	bne.n	800e658 <tcp_enqueue_flags+0x1b0>
 800e64a:	4b06      	ldr	r3, [pc, #24]	; (800e664 <tcp_enqueue_flags+0x1bc>)
 800e64c:	f240 4265 	movw	r2, #1125	; 0x465
 800e650:	490b      	ldr	r1, [pc, #44]	; (800e680 <tcp_enqueue_flags+0x1d8>)
 800e652:	4806      	ldr	r0, [pc, #24]	; (800e66c <tcp_enqueue_flags+0x1c4>)
 800e654:	f006 fb4e 	bl	8014cf4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e658:	2300      	movs	r3, #0
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3720      	adds	r7, #32
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
 800e662:	bf00      	nop
 800e664:	08018e5c 	.word	0x08018e5c
 800e668:	08019280 	.word	0x08019280
 800e66c:	08018eb0 	.word	0x08018eb0
 800e670:	080192d8 	.word	0x080192d8
 800e674:	080192f8 	.word	0x080192f8
 800e678:	08019334 	.word	0x08019334
 800e67c:	0801934c 	.word	0x0801934c
 800e680:	08019378 	.word	0x08019378

0800e684 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e684:	b5b0      	push	{r4, r5, r7, lr}
 800e686:	b08a      	sub	sp, #40	; 0x28
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d106      	bne.n	800e6a0 <tcp_output+0x1c>
 800e692:	4b8a      	ldr	r3, [pc, #552]	; (800e8bc <tcp_output+0x238>)
 800e694:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e698:	4989      	ldr	r1, [pc, #548]	; (800e8c0 <tcp_output+0x23c>)
 800e69a:	488a      	ldr	r0, [pc, #552]	; (800e8c4 <tcp_output+0x240>)
 800e69c:	f006 fb2a 	bl	8014cf4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	7d1b      	ldrb	r3, [r3, #20]
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	d106      	bne.n	800e6b6 <tcp_output+0x32>
 800e6a8:	4b84      	ldr	r3, [pc, #528]	; (800e8bc <tcp_output+0x238>)
 800e6aa:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e6ae:	4986      	ldr	r1, [pc, #536]	; (800e8c8 <tcp_output+0x244>)
 800e6b0:	4884      	ldr	r0, [pc, #528]	; (800e8c4 <tcp_output+0x240>)
 800e6b2:	f006 fb1f 	bl	8014cf4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e6b6:	4b85      	ldr	r3, [pc, #532]	; (800e8cc <tcp_output+0x248>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d101      	bne.n	800e6c4 <tcp_output+0x40>
    return ERR_OK;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	e1ce      	b.n	800ea62 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	bf28      	it	cs
 800e6d4:	4613      	movcs	r3, r2
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6de:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d10b      	bne.n	800e6fe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	8b5b      	ldrh	r3, [r3, #26]
 800e6ea:	f003 0302 	and.w	r3, r3, #2
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	f000 81aa 	beq.w	800ea48 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f000 fdcb 	bl	800f290 <tcp_send_empty_ack>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	e1b1      	b.n	800ea62 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e6fe:	6879      	ldr	r1, [r7, #4]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	3304      	adds	r3, #4
 800e704:	461a      	mov	r2, r3
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f7ff f824 	bl	800d754 <tcp_route>
 800e70c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d102      	bne.n	800e71a <tcp_output+0x96>
    return ERR_RTE;
 800e714:	f06f 0303 	mvn.w	r3, #3
 800e718:	e1a3      	b.n	800ea62 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d003      	beq.n	800e728 <tcp_output+0xa4>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d111      	bne.n	800e74c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d002      	beq.n	800e734 <tcp_output+0xb0>
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	3304      	adds	r3, #4
 800e732:	e000      	b.n	800e736 <tcp_output+0xb2>
 800e734:	2300      	movs	r3, #0
 800e736:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d102      	bne.n	800e744 <tcp_output+0xc0>
      return ERR_RTE;
 800e73e:	f06f 0303 	mvn.w	r3, #3
 800e742:	e18e      	b.n	800ea62 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	681a      	ldr	r2, [r3, #0]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	685b      	ldr	r3, [r3, #4]
 800e752:	4618      	mov	r0, r3
 800e754:	f7f9 f8d1 	bl	80078fa <lwip_htonl>
 800e758:	4602      	mov	r2, r0
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e75e:	1ad3      	subs	r3, r2, r3
 800e760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e762:	8912      	ldrh	r2, [r2, #8]
 800e764:	4413      	add	r3, r2
 800e766:	69ba      	ldr	r2, [r7, #24]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d227      	bcs.n	800e7bc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e772:	461a      	mov	r2, r3
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	4293      	cmp	r3, r2
 800e778:	d114      	bne.n	800e7a4 <tcp_output+0x120>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d110      	bne.n	800e7a4 <tcp_output+0x120>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d10b      	bne.n	800e7a4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2200      	movs	r2, #0
 800e790:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2201      	movs	r2, #1
 800e798:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	8b5b      	ldrh	r3, [r3, #26]
 800e7a8:	f003 0302 	and.w	r3, r3, #2
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	f000 814d 	beq.w	800ea4c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 fd6c 	bl	800f290 <tcp_send_empty_ack>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	e152      	b.n	800ea62 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7c8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e7ca:	6a3b      	ldr	r3, [r7, #32]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	f000 811c 	beq.w	800ea0a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e7d2:	e002      	b.n	800e7da <tcp_output+0x156>
 800e7d4:	6a3b      	ldr	r3, [r7, #32]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	623b      	str	r3, [r7, #32]
 800e7da:	6a3b      	ldr	r3, [r7, #32]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d1f8      	bne.n	800e7d4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e7e2:	e112      	b.n	800ea0a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e6:	68db      	ldr	r3, [r3, #12]
 800e7e8:	899b      	ldrh	r3, [r3, #12]
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7f9 f86f 	bl	80078d0 <lwip_htons>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	f003 0304 	and.w	r3, r3, #4
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d006      	beq.n	800e80c <tcp_output+0x188>
 800e7fe:	4b2f      	ldr	r3, [pc, #188]	; (800e8bc <tcp_output+0x238>)
 800e800:	f240 5236 	movw	r2, #1334	; 0x536
 800e804:	4932      	ldr	r1, [pc, #200]	; (800e8d0 <tcp_output+0x24c>)
 800e806:	482f      	ldr	r0, [pc, #188]	; (800e8c4 <tcp_output+0x240>)
 800e808:	f006 fa74 	bl	8014cf4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e810:	2b00      	cmp	r3, #0
 800e812:	d01f      	beq.n	800e854 <tcp_output+0x1d0>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	8b5b      	ldrh	r3, [r3, #26]
 800e818:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d119      	bne.n	800e854 <tcp_output+0x1d0>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e824:	2b00      	cmp	r3, #0
 800e826:	d00b      	beq.n	800e840 <tcp_output+0x1bc>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d110      	bne.n	800e854 <tcp_output+0x1d0>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e836:	891a      	ldrh	r2, [r3, #8]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d209      	bcs.n	800e854 <tcp_output+0x1d0>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e846:	2b00      	cmp	r3, #0
 800e848:	d004      	beq.n	800e854 <tcp_output+0x1d0>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e850:	2b08      	cmp	r3, #8
 800e852:	d901      	bls.n	800e858 <tcp_output+0x1d4>
 800e854:	2301      	movs	r3, #1
 800e856:	e000      	b.n	800e85a <tcp_output+0x1d6>
 800e858:	2300      	movs	r3, #0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d106      	bne.n	800e86c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	8b5b      	ldrh	r3, [r3, #26]
 800e862:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e866:	2b00      	cmp	r3, #0
 800e868:	f000 80e4 	beq.w	800ea34 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	7d1b      	ldrb	r3, [r3, #20]
 800e870:	2b02      	cmp	r3, #2
 800e872:	d00d      	beq.n	800e890 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	899b      	ldrh	r3, [r3, #12]
 800e87a:	b29c      	uxth	r4, r3
 800e87c:	2010      	movs	r0, #16
 800e87e:	f7f9 f827 	bl	80078d0 <lwip_htons>
 800e882:	4603      	mov	r3, r0
 800e884:	461a      	mov	r2, r3
 800e886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e888:	68db      	ldr	r3, [r3, #12]
 800e88a:	4322      	orrs	r2, r4
 800e88c:	b292      	uxth	r2, r2
 800e88e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e890:	697a      	ldr	r2, [r7, #20]
 800e892:	6879      	ldr	r1, [r7, #4]
 800e894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e896:	f000 f909 	bl	800eaac <tcp_output_segment>
 800e89a:	4603      	mov	r3, r0
 800e89c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e89e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d016      	beq.n	800e8d4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	8b5b      	ldrh	r3, [r3, #26]
 800e8aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8ae:	b29a      	uxth	r2, r3
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	835a      	strh	r2, [r3, #26]
      return err;
 800e8b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8b8:	e0d3      	b.n	800ea62 <tcp_output+0x3de>
 800e8ba:	bf00      	nop
 800e8bc:	08018e5c 	.word	0x08018e5c
 800e8c0:	080193a0 	.word	0x080193a0
 800e8c4:	08018eb0 	.word	0x08018eb0
 800e8c8:	080193b8 	.word	0x080193b8
 800e8cc:	2000ae7c 	.word	0x2000ae7c
 800e8d0:	080193e0 	.word	0x080193e0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d6:	681a      	ldr	r2, [r3, #0]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	7d1b      	ldrb	r3, [r3, #20]
 800e8e0:	2b02      	cmp	r3, #2
 800e8e2:	d006      	beq.n	800e8f2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	8b5b      	ldrh	r3, [r3, #26]
 800e8e8:	f023 0303 	bic.w	r3, r3, #3
 800e8ec:	b29a      	uxth	r2, r3
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f4:	68db      	ldr	r3, [r3, #12]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7f8 fffe 	bl	80078fa <lwip_htonl>
 800e8fe:	4604      	mov	r4, r0
 800e900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e902:	891b      	ldrh	r3, [r3, #8]
 800e904:	461d      	mov	r5, r3
 800e906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	899b      	ldrh	r3, [r3, #12]
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	4618      	mov	r0, r3
 800e910:	f7f8 ffde 	bl	80078d0 <lwip_htons>
 800e914:	4603      	mov	r3, r0
 800e916:	b2db      	uxtb	r3, r3
 800e918:	f003 0303 	and.w	r3, r3, #3
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d001      	beq.n	800e924 <tcp_output+0x2a0>
 800e920:	2301      	movs	r3, #1
 800e922:	e000      	b.n	800e926 <tcp_output+0x2a2>
 800e924:	2300      	movs	r3, #0
 800e926:	442b      	add	r3, r5
 800e928:	4423      	add	r3, r4
 800e92a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	1ad3      	subs	r3, r2, r3
 800e934:	2b00      	cmp	r3, #0
 800e936:	da02      	bge.n	800e93e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	68ba      	ldr	r2, [r7, #8]
 800e93c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e940:	891b      	ldrh	r3, [r3, #8]
 800e942:	461c      	mov	r4, r3
 800e944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	899b      	ldrh	r3, [r3, #12]
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7f8 ffbf 	bl	80078d0 <lwip_htons>
 800e952:	4603      	mov	r3, r0
 800e954:	b2db      	uxtb	r3, r3
 800e956:	f003 0303 	and.w	r3, r3, #3
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d001      	beq.n	800e962 <tcp_output+0x2de>
 800e95e:	2301      	movs	r3, #1
 800e960:	e000      	b.n	800e964 <tcp_output+0x2e0>
 800e962:	2300      	movs	r3, #0
 800e964:	4423      	add	r3, r4
 800e966:	2b00      	cmp	r3, #0
 800e968:	d049      	beq.n	800e9fe <tcp_output+0x37a>
      seg->next = NULL;
 800e96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96c:	2200      	movs	r2, #0
 800e96e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e974:	2b00      	cmp	r3, #0
 800e976:	d105      	bne.n	800e984 <tcp_output+0x300>
        pcb->unacked = seg;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e97c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e980:	623b      	str	r3, [r7, #32]
 800e982:	e03f      	b.n	800ea04 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7f8 ffb5 	bl	80078fa <lwip_htonl>
 800e990:	4604      	mov	r4, r0
 800e992:	6a3b      	ldr	r3, [r7, #32]
 800e994:	68db      	ldr	r3, [r3, #12]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	4618      	mov	r0, r3
 800e99a:	f7f8 ffae 	bl	80078fa <lwip_htonl>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	1ae3      	subs	r3, r4, r3
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	da24      	bge.n	800e9f0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	3370      	adds	r3, #112	; 0x70
 800e9aa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e9ac:	e002      	b.n	800e9b4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d011      	beq.n	800e9e0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	68db      	ldr	r3, [r3, #12]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7f8 ff98 	bl	80078fa <lwip_htonl>
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ce:	68db      	ldr	r3, [r3, #12]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7f8 ff91 	bl	80078fa <lwip_htonl>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	dbe6      	blt.n	800e9ae <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9ec:	601a      	str	r2, [r3, #0]
 800e9ee:	e009      	b.n	800ea04 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e9f0:	6a3b      	ldr	r3, [r7, #32]
 800e9f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9f4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e9f6:	6a3b      	ldr	r3, [r7, #32]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	623b      	str	r3, [r7, #32]
 800e9fc:	e002      	b.n	800ea04 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e9fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea00:	f7fb ff01 	bl	800a806 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea08:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ea0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d012      	beq.n	800ea36 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ea10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea12:	68db      	ldr	r3, [r3, #12]
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7f8 ff6f 	bl	80078fa <lwip_htonl>
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea22:	1ad3      	subs	r3, r2, r3
 800ea24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea26:	8912      	ldrh	r2, [r2, #8]
 800ea28:	4413      	add	r3, r2
  while (seg != NULL &&
 800ea2a:	69ba      	ldr	r2, [r7, #24]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	f4bf aed9 	bcs.w	800e7e4 <tcp_output+0x160>
 800ea32:	e000      	b.n	800ea36 <tcp_output+0x3b2>
      break;
 800ea34:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d108      	bne.n	800ea50 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2200      	movs	r2, #0
 800ea42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ea46:	e004      	b.n	800ea52 <tcp_output+0x3ce>
    goto output_done;
 800ea48:	bf00      	nop
 800ea4a:	e002      	b.n	800ea52 <tcp_output+0x3ce>
    goto output_done;
 800ea4c:	bf00      	nop
 800ea4e:	e000      	b.n	800ea52 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ea50:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	8b5b      	ldrh	r3, [r3, #26]
 800ea56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea5a:	b29a      	uxth	r2, r3
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ea60:	2300      	movs	r3, #0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3728      	adds	r7, #40	; 0x28
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bdb0      	pop	{r4, r5, r7, pc}
 800ea6a:	bf00      	nop

0800ea6c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d106      	bne.n	800ea88 <tcp_output_segment_busy+0x1c>
 800ea7a:	4b09      	ldr	r3, [pc, #36]	; (800eaa0 <tcp_output_segment_busy+0x34>)
 800ea7c:	f240 529a 	movw	r2, #1434	; 0x59a
 800ea80:	4908      	ldr	r1, [pc, #32]	; (800eaa4 <tcp_output_segment_busy+0x38>)
 800ea82:	4809      	ldr	r0, [pc, #36]	; (800eaa8 <tcp_output_segment_busy+0x3c>)
 800ea84:	f006 f936 	bl	8014cf4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	7b9b      	ldrb	r3, [r3, #14]
 800ea8e:	2b01      	cmp	r3, #1
 800ea90:	d001      	beq.n	800ea96 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ea92:	2301      	movs	r3, #1
 800ea94:	e000      	b.n	800ea98 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ea96:	2300      	movs	r3, #0
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	08018e5c 	.word	0x08018e5c
 800eaa4:	080193f8 	.word	0x080193f8
 800eaa8:	08018eb0 	.word	0x08018eb0

0800eaac <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800eaac:	b5b0      	push	{r4, r5, r7, lr}
 800eaae:	b08c      	sub	sp, #48	; 0x30
 800eab0:	af04      	add	r7, sp, #16
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d106      	bne.n	800eacc <tcp_output_segment+0x20>
 800eabe:	4b64      	ldr	r3, [pc, #400]	; (800ec50 <tcp_output_segment+0x1a4>)
 800eac0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800eac4:	4963      	ldr	r1, [pc, #396]	; (800ec54 <tcp_output_segment+0x1a8>)
 800eac6:	4864      	ldr	r0, [pc, #400]	; (800ec58 <tcp_output_segment+0x1ac>)
 800eac8:	f006 f914 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d106      	bne.n	800eae0 <tcp_output_segment+0x34>
 800ead2:	4b5f      	ldr	r3, [pc, #380]	; (800ec50 <tcp_output_segment+0x1a4>)
 800ead4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ead8:	4960      	ldr	r1, [pc, #384]	; (800ec5c <tcp_output_segment+0x1b0>)
 800eada:	485f      	ldr	r0, [pc, #380]	; (800ec58 <tcp_output_segment+0x1ac>)
 800eadc:	f006 f90a 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d106      	bne.n	800eaf4 <tcp_output_segment+0x48>
 800eae6:	4b5a      	ldr	r3, [pc, #360]	; (800ec50 <tcp_output_segment+0x1a4>)
 800eae8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800eaec:	495c      	ldr	r1, [pc, #368]	; (800ec60 <tcp_output_segment+0x1b4>)
 800eaee:	485a      	ldr	r0, [pc, #360]	; (800ec58 <tcp_output_segment+0x1ac>)
 800eaf0:	f006 f900 	bl	8014cf4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800eaf4:	68f8      	ldr	r0, [r7, #12]
 800eaf6:	f7ff ffb9 	bl	800ea6c <tcp_output_segment_busy>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d001      	beq.n	800eb04 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800eb00:	2300      	movs	r3, #0
 800eb02:	e0a1      	b.n	800ec48 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	68dc      	ldr	r4, [r3, #12]
 800eb0c:	4610      	mov	r0, r2
 800eb0e:	f7f8 fef4 	bl	80078fa <lwip_htonl>
 800eb12:	4603      	mov	r3, r0
 800eb14:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	68dc      	ldr	r4, [r3, #12]
 800eb1e:	4610      	mov	r0, r2
 800eb20:	f7f8 fed6 	bl	80078d0 <lwip_htons>
 800eb24:	4603      	mov	r3, r0
 800eb26:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2c:	68ba      	ldr	r2, [r7, #8]
 800eb2e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800eb30:	441a      	add	r2, r3
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	3314      	adds	r3, #20
 800eb3c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	7a9b      	ldrb	r3, [r3, #10]
 800eb42:	f003 0301 	and.w	r3, r3, #1
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d015      	beq.n	800eb76 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	3304      	adds	r3, #4
 800eb4e:	461a      	mov	r2, r3
 800eb50:	6879      	ldr	r1, [r7, #4]
 800eb52:	f44f 7006 	mov.w	r0, #536	; 0x218
 800eb56:	f7fc fa33 	bl	800afc0 <tcp_eff_send_mss_netif>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800eb5e:	8b7b      	ldrh	r3, [r7, #26]
 800eb60:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7f8 fec8 	bl	80078fa <lwip_htonl>
 800eb6a:	4602      	mov	r2, r0
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800eb70:	69fb      	ldr	r3, [r7, #28]
 800eb72:	3304      	adds	r3, #4
 800eb74:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	da02      	bge.n	800eb86 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	2200      	movs	r2, #0
 800eb84:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d10c      	bne.n	800eba8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800eb8e:	4b35      	ldr	r3, [pc, #212]	; (800ec64 <tcp_output_segment+0x1b8>)
 800eb90:	681a      	ldr	r2, [r3, #0]
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7f8 feac 	bl	80078fa <lwip_htonl>
 800eba2:	4602      	mov	r2, r0
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	68da      	ldr	r2, [r3, #12]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	1ad3      	subs	r3, r2, r3
 800ebb4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	685b      	ldr	r3, [r3, #4]
 800ebba:	8959      	ldrh	r1, [r3, #10]
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	685b      	ldr	r3, [r3, #4]
 800ebc0:	8b3a      	ldrh	r2, [r7, #24]
 800ebc2:	1a8a      	subs	r2, r1, r2
 800ebc4:	b292      	uxth	r2, r2
 800ebc6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	8919      	ldrh	r1, [r3, #8]
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	8b3a      	ldrh	r2, [r7, #24]
 800ebd4:	1a8a      	subs	r2, r1, r2
 800ebd6:	b292      	uxth	r2, r2
 800ebd8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	68fa      	ldr	r2, [r7, #12]
 800ebe0:	68d2      	ldr	r2, [r2, #12]
 800ebe2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	68db      	ldr	r3, [r3, #12]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	741a      	strb	r2, [r3, #16]
 800ebec:	2200      	movs	r2, #0
 800ebee:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	68da      	ldr	r2, [r3, #12]
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	7a9b      	ldrb	r3, [r3, #10]
 800ebf8:	f003 0301 	and.w	r3, r3, #1
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d001      	beq.n	800ec04 <tcp_output_segment+0x158>
 800ec00:	2318      	movs	r3, #24
 800ec02:	e000      	b.n	800ec06 <tcp_output_segment+0x15a>
 800ec04:	2314      	movs	r3, #20
 800ec06:	4413      	add	r3, r2
 800ec08:	69fa      	ldr	r2, [r7, #28]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d006      	beq.n	800ec1c <tcp_output_segment+0x170>
 800ec0e:	4b10      	ldr	r3, [pc, #64]	; (800ec50 <tcp_output_segment+0x1a4>)
 800ec10:	f240 621c 	movw	r2, #1564	; 0x61c
 800ec14:	4914      	ldr	r1, [pc, #80]	; (800ec68 <tcp_output_segment+0x1bc>)
 800ec16:	4810      	ldr	r0, [pc, #64]	; (800ec58 <tcp_output_segment+0x1ac>)
 800ec18:	f006 f86c 	bl	8014cf4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	6858      	ldr	r0, [r3, #4]
 800ec20:	68b9      	ldr	r1, [r7, #8]
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	1d1c      	adds	r4, r3, #4
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	7add      	ldrb	r5, [r3, #11]
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	7a9b      	ldrb	r3, [r3, #10]
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	9202      	str	r2, [sp, #8]
 800ec32:	2206      	movs	r2, #6
 800ec34:	9201      	str	r2, [sp, #4]
 800ec36:	9300      	str	r3, [sp, #0]
 800ec38:	462b      	mov	r3, r5
 800ec3a:	4622      	mov	r2, r4
 800ec3c:	f002 fa34 	bl	80110a8 <ip4_output_if>
 800ec40:	4603      	mov	r3, r0
 800ec42:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ec44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3720      	adds	r7, #32
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bdb0      	pop	{r4, r5, r7, pc}
 800ec50:	08018e5c 	.word	0x08018e5c
 800ec54:	08019420 	.word	0x08019420
 800ec58:	08018eb0 	.word	0x08018eb0
 800ec5c:	08019440 	.word	0x08019440
 800ec60:	08019460 	.word	0x08019460
 800ec64:	2000ae6c 	.word	0x2000ae6c
 800ec68:	08019484 	.word	0x08019484

0800ec6c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ec6c:	b5b0      	push	{r4, r5, r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d106      	bne.n	800ec88 <tcp_rexmit_rto_prepare+0x1c>
 800ec7a:	4b31      	ldr	r3, [pc, #196]	; (800ed40 <tcp_rexmit_rto_prepare+0xd4>)
 800ec7c:	f240 6263 	movw	r2, #1635	; 0x663
 800ec80:	4930      	ldr	r1, [pc, #192]	; (800ed44 <tcp_rexmit_rto_prepare+0xd8>)
 800ec82:	4831      	ldr	r0, [pc, #196]	; (800ed48 <tcp_rexmit_rto_prepare+0xdc>)
 800ec84:	f006 f836 	bl	8014cf4 <iprintf>

  if (pcb->unacked == NULL) {
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d102      	bne.n	800ec96 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ec90:	f06f 0305 	mvn.w	r3, #5
 800ec94:	e050      	b.n	800ed38 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec9a:	60fb      	str	r3, [r7, #12]
 800ec9c:	e00b      	b.n	800ecb6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ec9e:	68f8      	ldr	r0, [r7, #12]
 800eca0:	f7ff fee4 	bl	800ea6c <tcp_output_segment_busy>
 800eca4:	4603      	mov	r3, r0
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d002      	beq.n	800ecb0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ecaa:	f06f 0305 	mvn.w	r3, #5
 800ecae:	e043      	b.n	800ed38 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	60fb      	str	r3, [r7, #12]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d1ef      	bne.n	800ec9e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f7ff fed4 	bl	800ea6c <tcp_output_segment_busy>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d002      	beq.n	800ecd0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ecca:	f06f 0305 	mvn.w	r3, #5
 800ecce:	e033      	b.n	800ed38 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	8b5b      	ldrh	r3, [r3, #26]
 800ecea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ecee:	b29a      	uxth	r2, r3
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	68db      	ldr	r3, [r3, #12]
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7f8 fdfd 	bl	80078fa <lwip_htonl>
 800ed00:	4604      	mov	r4, r0
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	891b      	ldrh	r3, [r3, #8]
 800ed06:	461d      	mov	r5, r3
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	68db      	ldr	r3, [r3, #12]
 800ed0c:	899b      	ldrh	r3, [r3, #12]
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7f8 fddd 	bl	80078d0 <lwip_htons>
 800ed16:	4603      	mov	r3, r0
 800ed18:	b2db      	uxtb	r3, r3
 800ed1a:	f003 0303 	and.w	r3, r3, #3
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d001      	beq.n	800ed26 <tcp_rexmit_rto_prepare+0xba>
 800ed22:	2301      	movs	r3, #1
 800ed24:	e000      	b.n	800ed28 <tcp_rexmit_rto_prepare+0xbc>
 800ed26:	2300      	movs	r3, #0
 800ed28:	442b      	add	r3, r5
 800ed2a:	18e2      	adds	r2, r4, r3
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2200      	movs	r2, #0
 800ed34:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ed36:	2300      	movs	r3, #0
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3710      	adds	r7, #16
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bdb0      	pop	{r4, r5, r7, pc}
 800ed40:	08018e5c 	.word	0x08018e5c
 800ed44:	08019498 	.word	0x08019498
 800ed48:	08018eb0 	.word	0x08018eb0

0800ed4c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d106      	bne.n	800ed68 <tcp_rexmit_rto_commit+0x1c>
 800ed5a:	4b0d      	ldr	r3, [pc, #52]	; (800ed90 <tcp_rexmit_rto_commit+0x44>)
 800ed5c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ed60:	490c      	ldr	r1, [pc, #48]	; (800ed94 <tcp_rexmit_rto_commit+0x48>)
 800ed62:	480d      	ldr	r0, [pc, #52]	; (800ed98 <tcp_rexmit_rto_commit+0x4c>)
 800ed64:	f005 ffc6 	bl	8014cf4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed6e:	2bff      	cmp	r3, #255	; 0xff
 800ed70:	d007      	beq.n	800ed82 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed78:	3301      	adds	r3, #1
 800ed7a:	b2da      	uxtb	r2, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f7ff fc7e 	bl	800e684 <tcp_output>
}
 800ed88:	bf00      	nop
 800ed8a:	3708      	adds	r7, #8
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	08018e5c 	.word	0x08018e5c
 800ed94:	080194bc 	.word	0x080194bc
 800ed98:	08018eb0 	.word	0x08018eb0

0800ed9c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d106      	bne.n	800edb8 <tcp_rexmit_rto+0x1c>
 800edaa:	4b0a      	ldr	r3, [pc, #40]	; (800edd4 <tcp_rexmit_rto+0x38>)
 800edac:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800edb0:	4909      	ldr	r1, [pc, #36]	; (800edd8 <tcp_rexmit_rto+0x3c>)
 800edb2:	480a      	ldr	r0, [pc, #40]	; (800eddc <tcp_rexmit_rto+0x40>)
 800edb4:	f005 ff9e 	bl	8014cf4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f7ff ff57 	bl	800ec6c <tcp_rexmit_rto_prepare>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d102      	bne.n	800edca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f7ff ffc1 	bl	800ed4c <tcp_rexmit_rto_commit>
  }
}
 800edca:	bf00      	nop
 800edcc:	3708      	adds	r7, #8
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	bf00      	nop
 800edd4:	08018e5c 	.word	0x08018e5c
 800edd8:	080194e0 	.word	0x080194e0
 800eddc:	08018eb0 	.word	0x08018eb0

0800ede0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ede0:	b590      	push	{r4, r7, lr}
 800ede2:	b085      	sub	sp, #20
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d106      	bne.n	800edfc <tcp_rexmit+0x1c>
 800edee:	4b2f      	ldr	r3, [pc, #188]	; (800eeac <tcp_rexmit+0xcc>)
 800edf0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800edf4:	492e      	ldr	r1, [pc, #184]	; (800eeb0 <tcp_rexmit+0xd0>)
 800edf6:	482f      	ldr	r0, [pc, #188]	; (800eeb4 <tcp_rexmit+0xd4>)
 800edf8:	f005 ff7c 	bl	8014cf4 <iprintf>

  if (pcb->unacked == NULL) {
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d102      	bne.n	800ee0a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ee04:	f06f 0305 	mvn.w	r3, #5
 800ee08:	e04c      	b.n	800eea4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee0e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ee10:	68b8      	ldr	r0, [r7, #8]
 800ee12:	f7ff fe2b 	bl	800ea6c <tcp_output_segment_busy>
 800ee16:	4603      	mov	r3, r0
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d002      	beq.n	800ee22 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ee1c:	f06f 0305 	mvn.w	r3, #5
 800ee20:	e040      	b.n	800eea4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	336c      	adds	r3, #108	; 0x6c
 800ee2e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ee30:	e002      	b.n	800ee38 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d011      	beq.n	800ee64 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	685b      	ldr	r3, [r3, #4]
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7f8 fd56 	bl	80078fa <lwip_htonl>
 800ee4e:	4604      	mov	r4, r0
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	68db      	ldr	r3, [r3, #12]
 800ee54:	685b      	ldr	r3, [r3, #4]
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7f8 fd4f 	bl	80078fa <lwip_htonl>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	dbe6      	blt.n	800ee32 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	681a      	ldr	r2, [r3, #0]
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	68ba      	ldr	r2, [r7, #8]
 800ee70:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d103      	bne.n	800ee82 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee88:	2bff      	cmp	r3, #255	; 0xff
 800ee8a:	d007      	beq.n	800ee9c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee92:	3301      	adds	r3, #1
 800ee94:	b2da      	uxtb	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800eea2:	2300      	movs	r3, #0
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3714      	adds	r7, #20
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd90      	pop	{r4, r7, pc}
 800eeac:	08018e5c 	.word	0x08018e5c
 800eeb0:	080194fc 	.word	0x080194fc
 800eeb4:	08018eb0 	.word	0x08018eb0

0800eeb8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d106      	bne.n	800eed4 <tcp_rexmit_fast+0x1c>
 800eec6:	4b2a      	ldr	r3, [pc, #168]	; (800ef70 <tcp_rexmit_fast+0xb8>)
 800eec8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800eecc:	4929      	ldr	r1, [pc, #164]	; (800ef74 <tcp_rexmit_fast+0xbc>)
 800eece:	482a      	ldr	r0, [pc, #168]	; (800ef78 <tcp_rexmit_fast+0xc0>)
 800eed0:	f005 ff10 	bl	8014cf4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d044      	beq.n	800ef66 <tcp_rexmit_fast+0xae>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	8b5b      	ldrh	r3, [r3, #26]
 800eee0:	f003 0304 	and.w	r3, r3, #4
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d13e      	bne.n	800ef66 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f7ff ff79 	bl	800ede0 <tcp_rexmit>
 800eeee:	4603      	mov	r3, r0
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d138      	bne.n	800ef66 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef00:	4293      	cmp	r3, r2
 800ef02:	bf28      	it	cs
 800ef04:	4613      	movcs	r3, r2
 800ef06:	b29b      	uxth	r3, r3
 800ef08:	0fda      	lsrs	r2, r3, #31
 800ef0a:	4413      	add	r3, r2
 800ef0c:	105b      	asrs	r3, r3, #1
 800ef0e:	b29a      	uxth	r2, r3
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef22:	005b      	lsls	r3, r3, #1
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d206      	bcs.n	800ef36 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef2c:	005b      	lsls	r3, r3, #1
 800ef2e:	b29a      	uxth	r2, r3
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef40:	4619      	mov	r1, r3
 800ef42:	0049      	lsls	r1, r1, #1
 800ef44:	440b      	add	r3, r1
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	4413      	add	r3, r2
 800ef4a:	b29a      	uxth	r2, r3
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	8b5b      	ldrh	r3, [r3, #26]
 800ef56:	f043 0304 	orr.w	r3, r3, #4
 800ef5a:	b29a      	uxth	r2, r3
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2200      	movs	r2, #0
 800ef64:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800ef66:	bf00      	nop
 800ef68:	3708      	adds	r7, #8
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	08018e5c 	.word	0x08018e5c
 800ef74:	08019514 	.word	0x08019514
 800ef78:	08018eb0 	.word	0x08018eb0

0800ef7c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b086      	sub	sp, #24
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	607b      	str	r3, [r7, #4]
 800ef86:	460b      	mov	r3, r1
 800ef88:	817b      	strh	r3, [r7, #10]
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ef8e:	897a      	ldrh	r2, [r7, #10]
 800ef90:	893b      	ldrh	r3, [r7, #8]
 800ef92:	4413      	add	r3, r2
 800ef94:	b29b      	uxth	r3, r3
 800ef96:	3314      	adds	r3, #20
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef9e:	4619      	mov	r1, r3
 800efa0:	2022      	movs	r0, #34	; 0x22
 800efa2:	f7f9 fd0f 	bl	80089c4 <pbuf_alloc>
 800efa6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d04d      	beq.n	800f04a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800efae:	897b      	ldrh	r3, [r7, #10]
 800efb0:	3313      	adds	r3, #19
 800efb2:	697a      	ldr	r2, [r7, #20]
 800efb4:	8952      	ldrh	r2, [r2, #10]
 800efb6:	4293      	cmp	r3, r2
 800efb8:	db06      	blt.n	800efc8 <tcp_output_alloc_header_common+0x4c>
 800efba:	4b26      	ldr	r3, [pc, #152]	; (800f054 <tcp_output_alloc_header_common+0xd8>)
 800efbc:	f240 7223 	movw	r2, #1827	; 0x723
 800efc0:	4925      	ldr	r1, [pc, #148]	; (800f058 <tcp_output_alloc_header_common+0xdc>)
 800efc2:	4826      	ldr	r0, [pc, #152]	; (800f05c <tcp_output_alloc_header_common+0xe0>)
 800efc4:	f005 fe96 	bl	8014cf4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	685b      	ldr	r3, [r3, #4]
 800efcc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800efce:	8c3b      	ldrh	r3, [r7, #32]
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7f8 fc7d 	bl	80078d0 <lwip_htons>
 800efd6:	4603      	mov	r3, r0
 800efd8:	461a      	mov	r2, r3
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800efde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7f8 fc75 	bl	80078d0 <lwip_htons>
 800efe6:	4603      	mov	r3, r0
 800efe8:	461a      	mov	r2, r3
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f7f8 fc80 	bl	80078fa <lwip_htonl>
 800effa:	4602      	mov	r2, r0
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f000:	897b      	ldrh	r3, [r7, #10]
 800f002:	089b      	lsrs	r3, r3, #2
 800f004:	b29b      	uxth	r3, r3
 800f006:	3305      	adds	r3, #5
 800f008:	b29b      	uxth	r3, r3
 800f00a:	031b      	lsls	r3, r3, #12
 800f00c:	b29a      	uxth	r2, r3
 800f00e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f012:	b29b      	uxth	r3, r3
 800f014:	4313      	orrs	r3, r2
 800f016:	b29b      	uxth	r3, r3
 800f018:	4618      	mov	r0, r3
 800f01a:	f7f8 fc59 	bl	80078d0 <lwip_htons>
 800f01e:	4603      	mov	r3, r0
 800f020:	461a      	mov	r2, r3
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f026:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f028:	4618      	mov	r0, r3
 800f02a:	f7f8 fc51 	bl	80078d0 <lwip_htons>
 800f02e:	4603      	mov	r3, r0
 800f030:	461a      	mov	r2, r3
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	2200      	movs	r2, #0
 800f03a:	741a      	strb	r2, [r3, #16]
 800f03c:	2200      	movs	r2, #0
 800f03e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	2200      	movs	r2, #0
 800f044:	749a      	strb	r2, [r3, #18]
 800f046:	2200      	movs	r2, #0
 800f048:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f04a:	697b      	ldr	r3, [r7, #20]
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3718      	adds	r7, #24
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}
 800f054:	08018e5c 	.word	0x08018e5c
 800f058:	08019534 	.word	0x08019534
 800f05c:	08018eb0 	.word	0x08018eb0

0800f060 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f060:	b5b0      	push	{r4, r5, r7, lr}
 800f062:	b08a      	sub	sp, #40	; 0x28
 800f064:	af04      	add	r7, sp, #16
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	607b      	str	r3, [r7, #4]
 800f06a:	460b      	mov	r3, r1
 800f06c:	817b      	strh	r3, [r7, #10]
 800f06e:	4613      	mov	r3, r2
 800f070:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d106      	bne.n	800f086 <tcp_output_alloc_header+0x26>
 800f078:	4b15      	ldr	r3, [pc, #84]	; (800f0d0 <tcp_output_alloc_header+0x70>)
 800f07a:	f240 7242 	movw	r2, #1858	; 0x742
 800f07e:	4915      	ldr	r1, [pc, #84]	; (800f0d4 <tcp_output_alloc_header+0x74>)
 800f080:	4815      	ldr	r0, [pc, #84]	; (800f0d8 <tcp_output_alloc_header+0x78>)
 800f082:	f005 fe37 	bl	8014cf4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	8adb      	ldrh	r3, [r3, #22]
 800f08e:	68fa      	ldr	r2, [r7, #12]
 800f090:	8b12      	ldrh	r2, [r2, #24]
 800f092:	68f9      	ldr	r1, [r7, #12]
 800f094:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f096:	893d      	ldrh	r5, [r7, #8]
 800f098:	897c      	ldrh	r4, [r7, #10]
 800f09a:	9103      	str	r1, [sp, #12]
 800f09c:	2110      	movs	r1, #16
 800f09e:	9102      	str	r1, [sp, #8]
 800f0a0:	9201      	str	r2, [sp, #4]
 800f0a2:	9300      	str	r3, [sp, #0]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	462a      	mov	r2, r5
 800f0a8:	4621      	mov	r1, r4
 800f0aa:	f7ff ff67 	bl	800ef7c <tcp_output_alloc_header_common>
 800f0ae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d006      	beq.n	800f0c4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ba:	68fa      	ldr	r2, [r7, #12]
 800f0bc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f0be:	441a      	add	r2, r3
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f0c4:	697b      	ldr	r3, [r7, #20]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3718      	adds	r7, #24
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bdb0      	pop	{r4, r5, r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	08018e5c 	.word	0x08018e5c
 800f0d4:	08019564 	.word	0x08019564
 800f0d8:	08018eb0 	.word	0x08018eb0

0800f0dc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b088      	sub	sp, #32
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	4611      	mov	r1, r2
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	71fb      	strb	r3, [r7, #7]
 800f0ee:	4613      	mov	r3, r2
 800f0f0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d106      	bne.n	800f10a <tcp_output_fill_options+0x2e>
 800f0fc:	4b12      	ldr	r3, [pc, #72]	; (800f148 <tcp_output_fill_options+0x6c>)
 800f0fe:	f240 7256 	movw	r2, #1878	; 0x756
 800f102:	4912      	ldr	r1, [pc, #72]	; (800f14c <tcp_output_fill_options+0x70>)
 800f104:	4812      	ldr	r0, [pc, #72]	; (800f150 <tcp_output_fill_options+0x74>)
 800f106:	f005 fdf5 	bl	8014cf4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f110:	69bb      	ldr	r3, [r7, #24]
 800f112:	3314      	adds	r3, #20
 800f114:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f116:	8bfb      	ldrh	r3, [r7, #30]
 800f118:	009b      	lsls	r3, r3, #2
 800f11a:	461a      	mov	r2, r3
 800f11c:	79fb      	ldrb	r3, [r7, #7]
 800f11e:	009b      	lsls	r3, r3, #2
 800f120:	f003 0304 	and.w	r3, r3, #4
 800f124:	4413      	add	r3, r2
 800f126:	3314      	adds	r3, #20
 800f128:	69ba      	ldr	r2, [r7, #24]
 800f12a:	4413      	add	r3, r2
 800f12c:	697a      	ldr	r2, [r7, #20]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d006      	beq.n	800f140 <tcp_output_fill_options+0x64>
 800f132:	4b05      	ldr	r3, [pc, #20]	; (800f148 <tcp_output_fill_options+0x6c>)
 800f134:	f240 7275 	movw	r2, #1909	; 0x775
 800f138:	4906      	ldr	r1, [pc, #24]	; (800f154 <tcp_output_fill_options+0x78>)
 800f13a:	4805      	ldr	r0, [pc, #20]	; (800f150 <tcp_output_fill_options+0x74>)
 800f13c:	f005 fdda 	bl	8014cf4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f140:	bf00      	nop
 800f142:	3720      	adds	r7, #32
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}
 800f148:	08018e5c 	.word	0x08018e5c
 800f14c:	0801958c 	.word	0x0801958c
 800f150:	08018eb0 	.word	0x08018eb0
 800f154:	08019484 	.word	0x08019484

0800f158 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b08a      	sub	sp, #40	; 0x28
 800f15c:	af04      	add	r7, sp, #16
 800f15e:	60f8      	str	r0, [r7, #12]
 800f160:	60b9      	str	r1, [r7, #8]
 800f162:	607a      	str	r2, [r7, #4]
 800f164:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d106      	bne.n	800f17a <tcp_output_control_segment+0x22>
 800f16c:	4b1c      	ldr	r3, [pc, #112]	; (800f1e0 <tcp_output_control_segment+0x88>)
 800f16e:	f240 7287 	movw	r2, #1927	; 0x787
 800f172:	491c      	ldr	r1, [pc, #112]	; (800f1e4 <tcp_output_control_segment+0x8c>)
 800f174:	481c      	ldr	r0, [pc, #112]	; (800f1e8 <tcp_output_control_segment+0x90>)
 800f176:	f005 fdbd 	bl	8014cf4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f17a:	683a      	ldr	r2, [r7, #0]
 800f17c:	6879      	ldr	r1, [r7, #4]
 800f17e:	68f8      	ldr	r0, [r7, #12]
 800f180:	f7fe fae8 	bl	800d754 <tcp_route>
 800f184:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d102      	bne.n	800f192 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f18c:	23fc      	movs	r3, #252	; 0xfc
 800f18e:	75fb      	strb	r3, [r7, #23]
 800f190:	e01c      	b.n	800f1cc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d006      	beq.n	800f1a6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	7adb      	ldrb	r3, [r3, #11]
 800f19c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	7a9b      	ldrb	r3, [r3, #10]
 800f1a2:	757b      	strb	r3, [r7, #21]
 800f1a4:	e003      	b.n	800f1ae <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f1a6:	23ff      	movs	r3, #255	; 0xff
 800f1a8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f1ae:	7dba      	ldrb	r2, [r7, #22]
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	9302      	str	r3, [sp, #8]
 800f1b4:	2306      	movs	r3, #6
 800f1b6:	9301      	str	r3, [sp, #4]
 800f1b8:	7d7b      	ldrb	r3, [r7, #21]
 800f1ba:	9300      	str	r3, [sp, #0]
 800f1bc:	4613      	mov	r3, r2
 800f1be:	683a      	ldr	r2, [r7, #0]
 800f1c0:	6879      	ldr	r1, [r7, #4]
 800f1c2:	68b8      	ldr	r0, [r7, #8]
 800f1c4:	f001 ff70 	bl	80110a8 <ip4_output_if>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f1cc:	68b8      	ldr	r0, [r7, #8]
 800f1ce:	f7f9 fedd 	bl	8008f8c <pbuf_free>
  return err;
 800f1d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3718      	adds	r7, #24
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	08018e5c 	.word	0x08018e5c
 800f1e4:	080195b4 	.word	0x080195b4
 800f1e8:	08018eb0 	.word	0x08018eb0

0800f1ec <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f1ec:	b590      	push	{r4, r7, lr}
 800f1ee:	b08b      	sub	sp, #44	; 0x2c
 800f1f0:	af04      	add	r7, sp, #16
 800f1f2:	60f8      	str	r0, [r7, #12]
 800f1f4:	60b9      	str	r1, [r7, #8]
 800f1f6:	607a      	str	r2, [r7, #4]
 800f1f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d106      	bne.n	800f20e <tcp_rst+0x22>
 800f200:	4b1f      	ldr	r3, [pc, #124]	; (800f280 <tcp_rst+0x94>)
 800f202:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f206:	491f      	ldr	r1, [pc, #124]	; (800f284 <tcp_rst+0x98>)
 800f208:	481f      	ldr	r0, [pc, #124]	; (800f288 <tcp_rst+0x9c>)
 800f20a:	f005 fd73 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f210:	2b00      	cmp	r3, #0
 800f212:	d106      	bne.n	800f222 <tcp_rst+0x36>
 800f214:	4b1a      	ldr	r3, [pc, #104]	; (800f280 <tcp_rst+0x94>)
 800f216:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f21a:	491c      	ldr	r1, [pc, #112]	; (800f28c <tcp_rst+0xa0>)
 800f21c:	481a      	ldr	r0, [pc, #104]	; (800f288 <tcp_rst+0x9c>)
 800f21e:	f005 fd69 	bl	8014cf4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f222:	2300      	movs	r3, #0
 800f224:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f226:	f246 0308 	movw	r3, #24584	; 0x6008
 800f22a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f22c:	7dfb      	ldrb	r3, [r7, #23]
 800f22e:	b29c      	uxth	r4, r3
 800f230:	68b8      	ldr	r0, [r7, #8]
 800f232:	f7f8 fb62 	bl	80078fa <lwip_htonl>
 800f236:	4602      	mov	r2, r0
 800f238:	8abb      	ldrh	r3, [r7, #20]
 800f23a:	9303      	str	r3, [sp, #12]
 800f23c:	2314      	movs	r3, #20
 800f23e:	9302      	str	r3, [sp, #8]
 800f240:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f242:	9301      	str	r3, [sp, #4]
 800f244:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f246:	9300      	str	r3, [sp, #0]
 800f248:	4613      	mov	r3, r2
 800f24a:	2200      	movs	r2, #0
 800f24c:	4621      	mov	r1, r4
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f7ff fe94 	bl	800ef7c <tcp_output_alloc_header_common>
 800f254:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f256:	693b      	ldr	r3, [r7, #16]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00c      	beq.n	800f276 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f25c:	7dfb      	ldrb	r3, [r7, #23]
 800f25e:	2200      	movs	r2, #0
 800f260:	6939      	ldr	r1, [r7, #16]
 800f262:	68f8      	ldr	r0, [r7, #12]
 800f264:	f7ff ff3a 	bl	800f0dc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26a:	683a      	ldr	r2, [r7, #0]
 800f26c:	6939      	ldr	r1, [r7, #16]
 800f26e:	68f8      	ldr	r0, [r7, #12]
 800f270:	f7ff ff72 	bl	800f158 <tcp_output_control_segment>
 800f274:	e000      	b.n	800f278 <tcp_rst+0x8c>
    return;
 800f276:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f278:	371c      	adds	r7, #28
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd90      	pop	{r4, r7, pc}
 800f27e:	bf00      	nop
 800f280:	08018e5c 	.word	0x08018e5c
 800f284:	080195e0 	.word	0x080195e0
 800f288:	08018eb0 	.word	0x08018eb0
 800f28c:	080195fc 	.word	0x080195fc

0800f290 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f290:	b590      	push	{r4, r7, lr}
 800f292:	b087      	sub	sp, #28
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f298:	2300      	movs	r3, #0
 800f29a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f29c:	2300      	movs	r3, #0
 800f29e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d106      	bne.n	800f2b4 <tcp_send_empty_ack+0x24>
 800f2a6:	4b28      	ldr	r3, [pc, #160]	; (800f348 <tcp_send_empty_ack+0xb8>)
 800f2a8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f2ac:	4927      	ldr	r1, [pc, #156]	; (800f34c <tcp_send_empty_ack+0xbc>)
 800f2ae:	4828      	ldr	r0, [pc, #160]	; (800f350 <tcp_send_empty_ack+0xc0>)
 800f2b0:	f005 fd20 	bl	8014cf4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f2b4:	7dfb      	ldrb	r3, [r7, #23]
 800f2b6:	009b      	lsls	r3, r3, #2
 800f2b8:	b2db      	uxtb	r3, r3
 800f2ba:	f003 0304 	and.w	r3, r3, #4
 800f2be:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f2c0:	7d7b      	ldrb	r3, [r7, #21]
 800f2c2:	b29c      	uxth	r4, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7f8 fb16 	bl	80078fa <lwip_htonl>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	4621      	mov	r1, r4
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f7ff fec3 	bl	800f060 <tcp_output_alloc_header>
 800f2da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d109      	bne.n	800f2f6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	8b5b      	ldrh	r3, [r3, #26]
 800f2e6:	f043 0303 	orr.w	r3, r3, #3
 800f2ea:	b29a      	uxth	r2, r3
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f2f0:	f06f 0301 	mvn.w	r3, #1
 800f2f4:	e023      	b.n	800f33e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f2f6:	7dbb      	ldrb	r3, [r7, #22]
 800f2f8:	7dfa      	ldrb	r2, [r7, #23]
 800f2fa:	6939      	ldr	r1, [r7, #16]
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f7ff feed 	bl	800f0dc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f302:	687a      	ldr	r2, [r7, #4]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	3304      	adds	r3, #4
 800f308:	6939      	ldr	r1, [r7, #16]
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7ff ff24 	bl	800f158 <tcp_output_control_segment>
 800f310:	4603      	mov	r3, r0
 800f312:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d007      	beq.n	800f32c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	8b5b      	ldrh	r3, [r3, #26]
 800f320:	f043 0303 	orr.w	r3, r3, #3
 800f324:	b29a      	uxth	r2, r3
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	835a      	strh	r2, [r3, #26]
 800f32a:	e006      	b.n	800f33a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	8b5b      	ldrh	r3, [r3, #26]
 800f330:	f023 0303 	bic.w	r3, r3, #3
 800f334:	b29a      	uxth	r2, r3
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f33a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f33e:	4618      	mov	r0, r3
 800f340:	371c      	adds	r7, #28
 800f342:	46bd      	mov	sp, r7
 800f344:	bd90      	pop	{r4, r7, pc}
 800f346:	bf00      	nop
 800f348:	08018e5c 	.word	0x08018e5c
 800f34c:	08019618 	.word	0x08019618
 800f350:	08018eb0 	.word	0x08018eb0

0800f354 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f354:	b590      	push	{r4, r7, lr}
 800f356:	b087      	sub	sp, #28
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f35c:	2300      	movs	r3, #0
 800f35e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d106      	bne.n	800f374 <tcp_keepalive+0x20>
 800f366:	4b18      	ldr	r3, [pc, #96]	; (800f3c8 <tcp_keepalive+0x74>)
 800f368:	f640 0224 	movw	r2, #2084	; 0x824
 800f36c:	4917      	ldr	r1, [pc, #92]	; (800f3cc <tcp_keepalive+0x78>)
 800f36e:	4818      	ldr	r0, [pc, #96]	; (800f3d0 <tcp_keepalive+0x7c>)
 800f370:	f005 fcc0 	bl	8014cf4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f374:	7dfb      	ldrb	r3, [r7, #23]
 800f376:	b29c      	uxth	r4, r3
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f37c:	3b01      	subs	r3, #1
 800f37e:	4618      	mov	r0, r3
 800f380:	f7f8 fabb 	bl	80078fa <lwip_htonl>
 800f384:	4603      	mov	r3, r0
 800f386:	2200      	movs	r2, #0
 800f388:	4621      	mov	r1, r4
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f7ff fe68 	bl	800f060 <tcp_output_alloc_header>
 800f390:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d102      	bne.n	800f39e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f398:	f04f 33ff 	mov.w	r3, #4294967295
 800f39c:	e010      	b.n	800f3c0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f39e:	7dfb      	ldrb	r3, [r7, #23]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	6939      	ldr	r1, [r7, #16]
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7ff fe99 	bl	800f0dc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	3304      	adds	r3, #4
 800f3b0:	6939      	ldr	r1, [r7, #16]
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f7ff fed0 	bl	800f158 <tcp_output_control_segment>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f3bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	371c      	adds	r7, #28
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd90      	pop	{r4, r7, pc}
 800f3c8:	08018e5c 	.word	0x08018e5c
 800f3cc:	08019638 	.word	0x08019638
 800f3d0:	08018eb0 	.word	0x08018eb0

0800f3d4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f3d4:	b590      	push	{r4, r7, lr}
 800f3d6:	b08b      	sub	sp, #44	; 0x2c
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f3dc:	2300      	movs	r3, #0
 800f3de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d106      	bne.n	800f3f6 <tcp_zero_window_probe+0x22>
 800f3e8:	4b4c      	ldr	r3, [pc, #304]	; (800f51c <tcp_zero_window_probe+0x148>)
 800f3ea:	f640 024f 	movw	r2, #2127	; 0x84f
 800f3ee:	494c      	ldr	r1, [pc, #304]	; (800f520 <tcp_zero_window_probe+0x14c>)
 800f3f0:	484c      	ldr	r0, [pc, #304]	; (800f524 <tcp_zero_window_probe+0x150>)
 800f3f2:	f005 fc7f 	bl	8014cf4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3fa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f3fc:	6a3b      	ldr	r3, [r7, #32]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d101      	bne.n	800f406 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f402:	2300      	movs	r3, #0
 800f404:	e086      	b.n	800f514 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f40c:	2bff      	cmp	r3, #255	; 0xff
 800f40e:	d007      	beq.n	800f420 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f416:	3301      	adds	r3, #1
 800f418:	b2da      	uxtb	r2, r3
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f420:	6a3b      	ldr	r3, [r7, #32]
 800f422:	68db      	ldr	r3, [r3, #12]
 800f424:	899b      	ldrh	r3, [r3, #12]
 800f426:	b29b      	uxth	r3, r3
 800f428:	4618      	mov	r0, r3
 800f42a:	f7f8 fa51 	bl	80078d0 <lwip_htons>
 800f42e:	4603      	mov	r3, r0
 800f430:	b2db      	uxtb	r3, r3
 800f432:	f003 0301 	and.w	r3, r3, #1
 800f436:	2b00      	cmp	r3, #0
 800f438:	d005      	beq.n	800f446 <tcp_zero_window_probe+0x72>
 800f43a:	6a3b      	ldr	r3, [r7, #32]
 800f43c:	891b      	ldrh	r3, [r3, #8]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d101      	bne.n	800f446 <tcp_zero_window_probe+0x72>
 800f442:	2301      	movs	r3, #1
 800f444:	e000      	b.n	800f448 <tcp_zero_window_probe+0x74>
 800f446:	2300      	movs	r3, #0
 800f448:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f44a:	7ffb      	ldrb	r3, [r7, #31]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	bf0c      	ite	eq
 800f450:	2301      	moveq	r3, #1
 800f452:	2300      	movne	r3, #0
 800f454:	b2db      	uxtb	r3, r3
 800f456:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f45c:	b299      	uxth	r1, r3
 800f45e:	6a3b      	ldr	r3, [r7, #32]
 800f460:	68db      	ldr	r3, [r3, #12]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	8bba      	ldrh	r2, [r7, #28]
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f7ff fdfa 	bl	800f060 <tcp_output_alloc_header>
 800f46c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f46e:	69bb      	ldr	r3, [r7, #24]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d102      	bne.n	800f47a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f474:	f04f 33ff 	mov.w	r3, #4294967295
 800f478:	e04c      	b.n	800f514 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f47a:	69bb      	ldr	r3, [r7, #24]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f480:	7ffb      	ldrb	r3, [r7, #31]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d011      	beq.n	800f4aa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	899b      	ldrh	r3, [r3, #12]
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	b21b      	sxth	r3, r3
 800f48e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f492:	b21c      	sxth	r4, r3
 800f494:	2011      	movs	r0, #17
 800f496:	f7f8 fa1b 	bl	80078d0 <lwip_htons>
 800f49a:	4603      	mov	r3, r0
 800f49c:	b21b      	sxth	r3, r3
 800f49e:	4323      	orrs	r3, r4
 800f4a0:	b21b      	sxth	r3, r3
 800f4a2:	b29a      	uxth	r2, r3
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	819a      	strh	r2, [r3, #12]
 800f4a8:	e010      	b.n	800f4cc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	3314      	adds	r3, #20
 800f4b0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f4b2:	6a3b      	ldr	r3, [r7, #32]
 800f4b4:	6858      	ldr	r0, [r3, #4]
 800f4b6:	6a3b      	ldr	r3, [r7, #32]
 800f4b8:	685b      	ldr	r3, [r3, #4]
 800f4ba:	891a      	ldrh	r2, [r3, #8]
 800f4bc:	6a3b      	ldr	r3, [r7, #32]
 800f4be:	891b      	ldrh	r3, [r3, #8]
 800f4c0:	1ad3      	subs	r3, r2, r3
 800f4c2:	b29b      	uxth	r3, r3
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	6939      	ldr	r1, [r7, #16]
 800f4c8:	f7f9 ff5a 	bl	8009380 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f4cc:	6a3b      	ldr	r3, [r7, #32]
 800f4ce:	68db      	ldr	r3, [r3, #12]
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7f8 fa11 	bl	80078fa <lwip_htonl>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	3301      	adds	r3, #1
 800f4dc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	1ad3      	subs	r3, r2, r3
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	da02      	bge.n	800f4f0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	68fa      	ldr	r2, [r7, #12]
 800f4ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	69b9      	ldr	r1, [r7, #24]
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f7ff fdef 	bl	800f0dc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f4fe:	687a      	ldr	r2, [r7, #4]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	3304      	adds	r3, #4
 800f504:	69b9      	ldr	r1, [r7, #24]
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f7ff fe26 	bl	800f158 <tcp_output_control_segment>
 800f50c:	4603      	mov	r3, r0
 800f50e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f510:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f514:	4618      	mov	r0, r3
 800f516:	372c      	adds	r7, #44	; 0x2c
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd90      	pop	{r4, r7, pc}
 800f51c:	08018e5c 	.word	0x08018e5c
 800f520:	08019654 	.word	0x08019654
 800f524:	08018eb0 	.word	0x08018eb0

0800f528 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f530:	f7fa f814 	bl	800955c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f534:	4b0a      	ldr	r3, [pc, #40]	; (800f560 <tcpip_tcp_timer+0x38>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d103      	bne.n	800f544 <tcpip_tcp_timer+0x1c>
 800f53c:	4b09      	ldr	r3, [pc, #36]	; (800f564 <tcpip_tcp_timer+0x3c>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d005      	beq.n	800f550 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f544:	2200      	movs	r2, #0
 800f546:	4908      	ldr	r1, [pc, #32]	; (800f568 <tcpip_tcp_timer+0x40>)
 800f548:	20fa      	movs	r0, #250	; 0xfa
 800f54a:	f000 f8f3 	bl	800f734 <sys_timeout>
 800f54e:	e003      	b.n	800f558 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f550:	4b06      	ldr	r3, [pc, #24]	; (800f56c <tcpip_tcp_timer+0x44>)
 800f552:	2200      	movs	r2, #0
 800f554:	601a      	str	r2, [r3, #0]
  }
}
 800f556:	bf00      	nop
 800f558:	bf00      	nop
 800f55a:	3708      	adds	r7, #8
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	2000ae68 	.word	0x2000ae68
 800f564:	2000ae78 	.word	0x2000ae78
 800f568:	0800f529 	.word	0x0800f529
 800f56c:	200008e8 	.word	0x200008e8

0800f570 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f574:	4b0a      	ldr	r3, [pc, #40]	; (800f5a0 <tcp_timer_needed+0x30>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d10f      	bne.n	800f59c <tcp_timer_needed+0x2c>
 800f57c:	4b09      	ldr	r3, [pc, #36]	; (800f5a4 <tcp_timer_needed+0x34>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d103      	bne.n	800f58c <tcp_timer_needed+0x1c>
 800f584:	4b08      	ldr	r3, [pc, #32]	; (800f5a8 <tcp_timer_needed+0x38>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d007      	beq.n	800f59c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f58c:	4b04      	ldr	r3, [pc, #16]	; (800f5a0 <tcp_timer_needed+0x30>)
 800f58e:	2201      	movs	r2, #1
 800f590:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f592:	2200      	movs	r2, #0
 800f594:	4905      	ldr	r1, [pc, #20]	; (800f5ac <tcp_timer_needed+0x3c>)
 800f596:	20fa      	movs	r0, #250	; 0xfa
 800f598:	f000 f8cc 	bl	800f734 <sys_timeout>
  }
}
 800f59c:	bf00      	nop
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	200008e8 	.word	0x200008e8
 800f5a4:	2000ae68 	.word	0x2000ae68
 800f5a8:	2000ae78 	.word	0x2000ae78
 800f5ac:	0800f529 	.word	0x0800f529

0800f5b0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b086      	sub	sp, #24
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	60f8      	str	r0, [r7, #12]
 800f5b8:	60b9      	str	r1, [r7, #8]
 800f5ba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f5bc:	2006      	movs	r0, #6
 800f5be:	f7f8 fdff 	bl	80081c0 <memp_malloc>
 800f5c2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d109      	bne.n	800f5de <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d151      	bne.n	800f674 <sys_timeout_abs+0xc4>
 800f5d0:	4b2a      	ldr	r3, [pc, #168]	; (800f67c <sys_timeout_abs+0xcc>)
 800f5d2:	22be      	movs	r2, #190	; 0xbe
 800f5d4:	492a      	ldr	r1, [pc, #168]	; (800f680 <sys_timeout_abs+0xd0>)
 800f5d6:	482b      	ldr	r0, [pc, #172]	; (800f684 <sys_timeout_abs+0xd4>)
 800f5d8:	f005 fb8c 	bl	8014cf4 <iprintf>
    return;
 800f5dc:	e04a      	b.n	800f674 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	68ba      	ldr	r2, [r7, #8]
 800f5e8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	687a      	ldr	r2, [r7, #4]
 800f5ee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	68fa      	ldr	r2, [r7, #12]
 800f5f4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f5f6:	4b24      	ldr	r3, [pc, #144]	; (800f688 <sys_timeout_abs+0xd8>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d103      	bne.n	800f606 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f5fe:	4a22      	ldr	r2, [pc, #136]	; (800f688 <sys_timeout_abs+0xd8>)
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	6013      	str	r3, [r2, #0]
    return;
 800f604:	e037      	b.n	800f676 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	685a      	ldr	r2, [r3, #4]
 800f60a:	4b1f      	ldr	r3, [pc, #124]	; (800f688 <sys_timeout_abs+0xd8>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	1ad3      	subs	r3, r2, r3
 800f612:	0fdb      	lsrs	r3, r3, #31
 800f614:	f003 0301 	and.w	r3, r3, #1
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d007      	beq.n	800f62e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f61e:	4b1a      	ldr	r3, [pc, #104]	; (800f688 <sys_timeout_abs+0xd8>)
 800f620:	681a      	ldr	r2, [r3, #0]
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f626:	4a18      	ldr	r2, [pc, #96]	; (800f688 <sys_timeout_abs+0xd8>)
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	6013      	str	r3, [r2, #0]
 800f62c:	e023      	b.n	800f676 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f62e:	4b16      	ldr	r3, [pc, #88]	; (800f688 <sys_timeout_abs+0xd8>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	617b      	str	r3, [r7, #20]
 800f634:	e01a      	b.n	800f66c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d00b      	beq.n	800f656 <sys_timeout_abs+0xa6>
 800f63e:	693b      	ldr	r3, [r7, #16]
 800f640:	685a      	ldr	r2, [r3, #4]
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	1ad3      	subs	r3, r2, r3
 800f64a:	0fdb      	lsrs	r3, r3, #31
 800f64c:	f003 0301 	and.w	r3, r3, #1
 800f650:	b2db      	uxtb	r3, r3
 800f652:	2b00      	cmp	r3, #0
 800f654:	d007      	beq.n	800f666 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	681a      	ldr	r2, [r3, #0]
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	693a      	ldr	r2, [r7, #16]
 800f662:	601a      	str	r2, [r3, #0]
        break;
 800f664:	e007      	b.n	800f676 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	617b      	str	r3, [r7, #20]
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d1e1      	bne.n	800f636 <sys_timeout_abs+0x86>
 800f672:	e000      	b.n	800f676 <sys_timeout_abs+0xc6>
    return;
 800f674:	bf00      	nop
      }
    }
  }
}
 800f676:	3718      	adds	r7, #24
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	08019678 	.word	0x08019678
 800f680:	080196ac 	.word	0x080196ac
 800f684:	080196ec 	.word	0x080196ec
 800f688:	200008e0 	.word	0x200008e0

0800f68c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b086      	sub	sp, #24
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	4798      	blx	r3

  now = sys_now();
 800f69e:	f7f7 fef7 	bl	8007490 <sys_now>
 800f6a2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	681a      	ldr	r2, [r3, #0]
 800f6a8:	4b0f      	ldr	r3, [pc, #60]	; (800f6e8 <lwip_cyclic_timer+0x5c>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4413      	add	r3, r2
 800f6ae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f6b0:	68fa      	ldr	r2, [r7, #12]
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	1ad3      	subs	r3, r2, r3
 800f6b6:	0fdb      	lsrs	r3, r3, #31
 800f6b8:	f003 0301 	and.w	r3, r3, #1
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d009      	beq.n	800f6d6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	681a      	ldr	r2, [r3, #0]
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	4413      	add	r3, r2
 800f6ca:	687a      	ldr	r2, [r7, #4]
 800f6cc:	4907      	ldr	r1, [pc, #28]	; (800f6ec <lwip_cyclic_timer+0x60>)
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7ff ff6e 	bl	800f5b0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f6d4:	e004      	b.n	800f6e0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	4904      	ldr	r1, [pc, #16]	; (800f6ec <lwip_cyclic_timer+0x60>)
 800f6da:	68f8      	ldr	r0, [r7, #12]
 800f6dc:	f7ff ff68 	bl	800f5b0 <sys_timeout_abs>
}
 800f6e0:	bf00      	nop
 800f6e2:	3718      	adds	r7, #24
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	200008e4 	.word	0x200008e4
 800f6ec:	0800f68d 	.word	0x0800f68d

0800f6f0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	607b      	str	r3, [r7, #4]
 800f6fa:	e00e      	b.n	800f71a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f6fc:	4a0b      	ldr	r2, [pc, #44]	; (800f72c <sys_timeouts_init+0x3c>)
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	00db      	lsls	r3, r3, #3
 800f708:	4a08      	ldr	r2, [pc, #32]	; (800f72c <sys_timeouts_init+0x3c>)
 800f70a:	4413      	add	r3, r2
 800f70c:	461a      	mov	r2, r3
 800f70e:	4908      	ldr	r1, [pc, #32]	; (800f730 <sys_timeouts_init+0x40>)
 800f710:	f000 f810 	bl	800f734 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	3301      	adds	r3, #1
 800f718:	607b      	str	r3, [r7, #4]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2b02      	cmp	r3, #2
 800f71e:	d9ed      	bls.n	800f6fc <sys_timeouts_init+0xc>
  }
}
 800f720:	bf00      	nop
 800f722:	bf00      	nop
 800f724:	3708      	adds	r7, #8
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
 800f72a:	bf00      	nop
 800f72c:	0801aa64 	.word	0x0801aa64
 800f730:	0800f68d 	.word	0x0800f68d

0800f734 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b086      	sub	sp, #24
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f746:	d306      	bcc.n	800f756 <sys_timeout+0x22>
 800f748:	4b0a      	ldr	r3, [pc, #40]	; (800f774 <sys_timeout+0x40>)
 800f74a:	f240 1229 	movw	r2, #297	; 0x129
 800f74e:	490a      	ldr	r1, [pc, #40]	; (800f778 <sys_timeout+0x44>)
 800f750:	480a      	ldr	r0, [pc, #40]	; (800f77c <sys_timeout+0x48>)
 800f752:	f005 facf 	bl	8014cf4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f756:	f7f7 fe9b 	bl	8007490 <sys_now>
 800f75a:	4602      	mov	r2, r0
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	4413      	add	r3, r2
 800f760:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	68b9      	ldr	r1, [r7, #8]
 800f766:	6978      	ldr	r0, [r7, #20]
 800f768:	f7ff ff22 	bl	800f5b0 <sys_timeout_abs>
#endif
}
 800f76c:	bf00      	nop
 800f76e:	3718      	adds	r7, #24
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	08019678 	.word	0x08019678
 800f778:	08019714 	.word	0x08019714
 800f77c:	080196ec 	.word	0x080196ec

0800f780 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b084      	sub	sp, #16
 800f784:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f786:	f7f7 fe83 	bl	8007490 <sys_now>
 800f78a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800f78c:	4b1a      	ldr	r3, [pc, #104]	; (800f7f8 <sys_check_timeouts+0x78>)
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	b2db      	uxtb	r3, r3
 800f792:	2b00      	cmp	r3, #0
 800f794:	d001      	beq.n	800f79a <sys_check_timeouts+0x1a>
 800f796:	f7f9 f8bf 	bl	8008918 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800f79a:	4b18      	ldr	r3, [pc, #96]	; (800f7fc <sys_check_timeouts+0x7c>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d022      	beq.n	800f7ec <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	68fa      	ldr	r2, [r7, #12]
 800f7ac:	1ad3      	subs	r3, r2, r3
 800f7ae:	0fdb      	lsrs	r3, r3, #31
 800f7b0:	f003 0301 	and.w	r3, r3, #1
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d11a      	bne.n	800f7f0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	4a0f      	ldr	r2, [pc, #60]	; (800f7fc <sys_check_timeouts+0x7c>)
 800f7c0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	689b      	ldr	r3, [r3, #8]
 800f7c6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	4a0b      	ldr	r2, [pc, #44]	; (800f800 <sys_check_timeouts+0x80>)
 800f7d4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f7d6:	68b9      	ldr	r1, [r7, #8]
 800f7d8:	2006      	movs	r0, #6
 800f7da:	f7f8 fd61 	bl	80082a0 <memp_free>
    if (handler != NULL) {
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d0d3      	beq.n	800f78c <sys_check_timeouts+0xc>
      handler(arg);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6838      	ldr	r0, [r7, #0]
 800f7e8:	4798      	blx	r3
  do {
 800f7ea:	e7cf      	b.n	800f78c <sys_check_timeouts+0xc>
      return;
 800f7ec:	bf00      	nop
 800f7ee:	e000      	b.n	800f7f2 <sys_check_timeouts+0x72>
      return;
 800f7f0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f7f2:	3710      	adds	r7, #16
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	2000ae60 	.word	0x2000ae60
 800f7fc:	200008e0 	.word	0x200008e0
 800f800:	200008e4 	.word	0x200008e4

0800f804 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f808:	f003 fe0e 	bl	8013428 <rand>
 800f80c:	4603      	mov	r3, r0
 800f80e:	b29b      	uxth	r3, r3
 800f810:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f814:	b29b      	uxth	r3, r3
 800f816:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	4b01      	ldr	r3, [pc, #4]	; (800f824 <udp_init+0x20>)
 800f81e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f820:	bf00      	nop
 800f822:	bd80      	pop	{r7, pc}
 800f824:	20000028 	.word	0x20000028

0800f828 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b084      	sub	sp, #16
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	60f8      	str	r0, [r7, #12]
 800f830:	60b9      	str	r1, [r7, #8]
 800f832:	4613      	mov	r3, r2
 800f834:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d105      	bne.n	800f848 <udp_input_local_match+0x20>
 800f83c:	4b27      	ldr	r3, [pc, #156]	; (800f8dc <udp_input_local_match+0xb4>)
 800f83e:	2287      	movs	r2, #135	; 0x87
 800f840:	4927      	ldr	r1, [pc, #156]	; (800f8e0 <udp_input_local_match+0xb8>)
 800f842:	4828      	ldr	r0, [pc, #160]	; (800f8e4 <udp_input_local_match+0xbc>)
 800f844:	f005 fa56 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d105      	bne.n	800f85a <udp_input_local_match+0x32>
 800f84e:	4b23      	ldr	r3, [pc, #140]	; (800f8dc <udp_input_local_match+0xb4>)
 800f850:	2288      	movs	r2, #136	; 0x88
 800f852:	4925      	ldr	r1, [pc, #148]	; (800f8e8 <udp_input_local_match+0xc0>)
 800f854:	4823      	ldr	r0, [pc, #140]	; (800f8e4 <udp_input_local_match+0xbc>)
 800f856:	f005 fa4d 	bl	8014cf4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	7a1b      	ldrb	r3, [r3, #8]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d00b      	beq.n	800f87a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	7a1a      	ldrb	r2, [r3, #8]
 800f866:	4b21      	ldr	r3, [pc, #132]	; (800f8ec <udp_input_local_match+0xc4>)
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f86e:	3301      	adds	r3, #1
 800f870:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f872:	429a      	cmp	r2, r3
 800f874:	d001      	beq.n	800f87a <udp_input_local_match+0x52>
    return 0;
 800f876:	2300      	movs	r3, #0
 800f878:	e02b      	b.n	800f8d2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f87a:	79fb      	ldrb	r3, [r7, #7]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d018      	beq.n	800f8b2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d013      	beq.n	800f8ae <udp_input_local_match+0x86>
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d00f      	beq.n	800f8ae <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f88e:	4b17      	ldr	r3, [pc, #92]	; (800f8ec <udp_input_local_match+0xc4>)
 800f890:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f892:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f896:	d00a      	beq.n	800f8ae <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	681a      	ldr	r2, [r3, #0]
 800f89c:	4b13      	ldr	r3, [pc, #76]	; (800f8ec <udp_input_local_match+0xc4>)
 800f89e:	695b      	ldr	r3, [r3, #20]
 800f8a0:	405a      	eors	r2, r3
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	3308      	adds	r3, #8
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d110      	bne.n	800f8d0 <udp_input_local_match+0xa8>
          return 1;
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	e00f      	b.n	800f8d2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d009      	beq.n	800f8cc <udp_input_local_match+0xa4>
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d005      	beq.n	800f8cc <udp_input_local_match+0xa4>
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	4b09      	ldr	r3, [pc, #36]	; (800f8ec <udp_input_local_match+0xc4>)
 800f8c6:	695b      	ldr	r3, [r3, #20]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d101      	bne.n	800f8d0 <udp_input_local_match+0xa8>
        return 1;
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	e000      	b.n	800f8d2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f8d0:	2300      	movs	r3, #0
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3710      	adds	r7, #16
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	08019760 	.word	0x08019760
 800f8e0:	08019790 	.word	0x08019790
 800f8e4:	080197b4 	.word	0x080197b4
 800f8e8:	080197dc 	.word	0x080197dc
 800f8ec:	20005764 	.word	0x20005764

0800f8f0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f8f0:	b590      	push	{r4, r7, lr}
 800f8f2:	b08d      	sub	sp, #52	; 0x34
 800f8f4:	af02      	add	r7, sp, #8
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d105      	bne.n	800f910 <udp_input+0x20>
 800f904:	4b7c      	ldr	r3, [pc, #496]	; (800faf8 <udp_input+0x208>)
 800f906:	22cf      	movs	r2, #207	; 0xcf
 800f908:	497c      	ldr	r1, [pc, #496]	; (800fafc <udp_input+0x20c>)
 800f90a:	487d      	ldr	r0, [pc, #500]	; (800fb00 <udp_input+0x210>)
 800f90c:	f005 f9f2 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d105      	bne.n	800f922 <udp_input+0x32>
 800f916:	4b78      	ldr	r3, [pc, #480]	; (800faf8 <udp_input+0x208>)
 800f918:	22d0      	movs	r2, #208	; 0xd0
 800f91a:	497a      	ldr	r1, [pc, #488]	; (800fb04 <udp_input+0x214>)
 800f91c:	4878      	ldr	r0, [pc, #480]	; (800fb00 <udp_input+0x210>)
 800f91e:	f005 f9e9 	bl	8014cf4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	895b      	ldrh	r3, [r3, #10]
 800f926:	2b07      	cmp	r3, #7
 800f928:	d803      	bhi.n	800f932 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f7f9 fb2e 	bl	8008f8c <pbuf_free>
    goto end;
 800f930:	e0de      	b.n	800faf0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	685b      	ldr	r3, [r3, #4]
 800f936:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f938:	4b73      	ldr	r3, [pc, #460]	; (800fb08 <udp_input+0x218>)
 800f93a:	695b      	ldr	r3, [r3, #20]
 800f93c:	4a72      	ldr	r2, [pc, #456]	; (800fb08 <udp_input+0x218>)
 800f93e:	6812      	ldr	r2, [r2, #0]
 800f940:	4611      	mov	r1, r2
 800f942:	4618      	mov	r0, r3
 800f944:	f001 fc88 	bl	8011258 <ip4_addr_isbroadcast_u32>
 800f948:	4603      	mov	r3, r0
 800f94a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	881b      	ldrh	r3, [r3, #0]
 800f950:	b29b      	uxth	r3, r3
 800f952:	4618      	mov	r0, r3
 800f954:	f7f7 ffbc 	bl	80078d0 <lwip_htons>
 800f958:	4603      	mov	r3, r0
 800f95a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	885b      	ldrh	r3, [r3, #2]
 800f960:	b29b      	uxth	r3, r3
 800f962:	4618      	mov	r0, r3
 800f964:	f7f7 ffb4 	bl	80078d0 <lwip_htons>
 800f968:	4603      	mov	r3, r0
 800f96a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f96c:	2300      	movs	r3, #0
 800f96e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f970:	2300      	movs	r3, #0
 800f972:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f974:	2300      	movs	r3, #0
 800f976:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f978:	4b64      	ldr	r3, [pc, #400]	; (800fb0c <udp_input+0x21c>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	627b      	str	r3, [r7, #36]	; 0x24
 800f97e:	e054      	b.n	800fa2a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f982:	8a5b      	ldrh	r3, [r3, #18]
 800f984:	89fa      	ldrh	r2, [r7, #14]
 800f986:	429a      	cmp	r2, r3
 800f988:	d14a      	bne.n	800fa20 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f98a:	7cfb      	ldrb	r3, [r7, #19]
 800f98c:	461a      	mov	r2, r3
 800f98e:	6839      	ldr	r1, [r7, #0]
 800f990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f992:	f7ff ff49 	bl	800f828 <udp_input_local_match>
 800f996:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d041      	beq.n	800fa20 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99e:	7c1b      	ldrb	r3, [r3, #16]
 800f9a0:	f003 0304 	and.w	r3, r3, #4
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d11d      	bne.n	800f9e4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f9a8:	69fb      	ldr	r3, [r7, #28]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d102      	bne.n	800f9b4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b0:	61fb      	str	r3, [r7, #28]
 800f9b2:	e017      	b.n	800f9e4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f9b4:	7cfb      	ldrb	r3, [r7, #19]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d014      	beq.n	800f9e4 <udp_input+0xf4>
 800f9ba:	4b53      	ldr	r3, [pc, #332]	; (800fb08 <udp_input+0x218>)
 800f9bc:	695b      	ldr	r3, [r3, #20]
 800f9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9c2:	d10f      	bne.n	800f9e4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f9c4:	69fb      	ldr	r3, [r7, #28]
 800f9c6:	681a      	ldr	r2, [r3, #0]
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	3304      	adds	r3, #4
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d008      	beq.n	800f9e4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d4:	681a      	ldr	r2, [r3, #0]
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	3304      	adds	r3, #4
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d101      	bne.n	800f9e4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e6:	8a9b      	ldrh	r3, [r3, #20]
 800f9e8:	8a3a      	ldrh	r2, [r7, #16]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d118      	bne.n	800fa20 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d005      	beq.n	800fa02 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f8:	685a      	ldr	r2, [r3, #4]
 800f9fa:	4b43      	ldr	r3, [pc, #268]	; (800fb08 <udp_input+0x218>)
 800f9fc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d10e      	bne.n	800fa20 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800fa02:	6a3b      	ldr	r3, [r7, #32]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d014      	beq.n	800fa32 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800fa08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0a:	68da      	ldr	r2, [r3, #12]
 800fa0c:	6a3b      	ldr	r3, [r7, #32]
 800fa0e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800fa10:	4b3e      	ldr	r3, [pc, #248]	; (800fb0c <udp_input+0x21c>)
 800fa12:	681a      	ldr	r2, [r3, #0]
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800fa18:	4a3c      	ldr	r2, [pc, #240]	; (800fb0c <udp_input+0x21c>)
 800fa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800fa1e:	e008      	b.n	800fa32 <udp_input+0x142>
      }
    }

    prev = pcb;
 800fa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa22:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa26:	68db      	ldr	r3, [r3, #12]
 800fa28:	627b      	str	r3, [r7, #36]	; 0x24
 800fa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d1a7      	bne.n	800f980 <udp_input+0x90>
 800fa30:	e000      	b.n	800fa34 <udp_input+0x144>
        break;
 800fa32:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800fa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d101      	bne.n	800fa3e <udp_input+0x14e>
    pcb = uncon_pcb;
 800fa3a:	69fb      	ldr	r3, [r7, #28]
 800fa3c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800fa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d002      	beq.n	800fa4a <udp_input+0x15a>
    for_us = 1;
 800fa44:	2301      	movs	r3, #1
 800fa46:	76fb      	strb	r3, [r7, #27]
 800fa48:	e00a      	b.n	800fa60 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	3304      	adds	r3, #4
 800fa4e:	681a      	ldr	r2, [r3, #0]
 800fa50:	4b2d      	ldr	r3, [pc, #180]	; (800fb08 <udp_input+0x218>)
 800fa52:	695b      	ldr	r3, [r3, #20]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	bf0c      	ite	eq
 800fa58:	2301      	moveq	r3, #1
 800fa5a:	2300      	movne	r3, #0
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800fa60:	7efb      	ldrb	r3, [r7, #27]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d041      	beq.n	800faea <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800fa66:	2108      	movs	r1, #8
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f7f9 fa09 	bl	8008e80 <pbuf_remove_header>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d00a      	beq.n	800fa8a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800fa74:	4b20      	ldr	r3, [pc, #128]	; (800faf8 <udp_input+0x208>)
 800fa76:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800fa7a:	4925      	ldr	r1, [pc, #148]	; (800fb10 <udp_input+0x220>)
 800fa7c:	4820      	ldr	r0, [pc, #128]	; (800fb00 <udp_input+0x210>)
 800fa7e:	f005 f939 	bl	8014cf4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f7f9 fa82 	bl	8008f8c <pbuf_free>
      goto end;
 800fa88:	e032      	b.n	800faf0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800fa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d012      	beq.n	800fab6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800fa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa92:	699b      	ldr	r3, [r3, #24]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d00a      	beq.n	800faae <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800fa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa9a:	699c      	ldr	r4, [r3, #24]
 800fa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa9e:	69d8      	ldr	r0, [r3, #28]
 800faa0:	8a3b      	ldrh	r3, [r7, #16]
 800faa2:	9300      	str	r3, [sp, #0]
 800faa4:	4b1b      	ldr	r3, [pc, #108]	; (800fb14 <udp_input+0x224>)
 800faa6:	687a      	ldr	r2, [r7, #4]
 800faa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800faaa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800faac:	e021      	b.n	800faf2 <udp_input+0x202>
        pbuf_free(p);
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f7f9 fa6c 	bl	8008f8c <pbuf_free>
        goto end;
 800fab4:	e01c      	b.n	800faf0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800fab6:	7cfb      	ldrb	r3, [r7, #19]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d112      	bne.n	800fae2 <udp_input+0x1f2>
 800fabc:	4b12      	ldr	r3, [pc, #72]	; (800fb08 <udp_input+0x218>)
 800fabe:	695b      	ldr	r3, [r3, #20]
 800fac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fac4:	2be0      	cmp	r3, #224	; 0xe0
 800fac6:	d00c      	beq.n	800fae2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fac8:	4b0f      	ldr	r3, [pc, #60]	; (800fb08 <udp_input+0x218>)
 800faca:	899b      	ldrh	r3, [r3, #12]
 800facc:	3308      	adds	r3, #8
 800face:	b29b      	uxth	r3, r3
 800fad0:	b21b      	sxth	r3, r3
 800fad2:	4619      	mov	r1, r3
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7f9 fa46 	bl	8008f66 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fada:	2103      	movs	r1, #3
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f001 f89b 	bl	8010c18 <icmp_dest_unreach>
      pbuf_free(p);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f7f9 fa52 	bl	8008f8c <pbuf_free>
  return;
 800fae8:	e003      	b.n	800faf2 <udp_input+0x202>
    pbuf_free(p);
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f7f9 fa4e 	bl	8008f8c <pbuf_free>
  return;
 800faf0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800faf2:	372c      	adds	r7, #44	; 0x2c
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd90      	pop	{r4, r7, pc}
 800faf8:	08019760 	.word	0x08019760
 800fafc:	08019804 	.word	0x08019804
 800fb00:	080197b4 	.word	0x080197b4
 800fb04:	0801981c 	.word	0x0801981c
 800fb08:	20005764 	.word	0x20005764
 800fb0c:	2000ae80 	.word	0x2000ae80
 800fb10:	08019838 	.word	0x08019838
 800fb14:	20005774 	.word	0x20005774

0800fb18 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b085      	sub	sp, #20
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d01e      	beq.n	800fb66 <udp_netif_ip_addr_changed+0x4e>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d01a      	beq.n	800fb66 <udp_netif_ip_addr_changed+0x4e>
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d017      	beq.n	800fb66 <udp_netif_ip_addr_changed+0x4e>
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d013      	beq.n	800fb66 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fb3e:	4b0d      	ldr	r3, [pc, #52]	; (800fb74 <udp_netif_ip_addr_changed+0x5c>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	60fb      	str	r3, [r7, #12]
 800fb44:	e00c      	b.n	800fb60 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	681a      	ldr	r2, [r3, #0]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d103      	bne.n	800fb5a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	681a      	ldr	r2, [r3, #0]
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	68db      	ldr	r3, [r3, #12]
 800fb5e:	60fb      	str	r3, [r7, #12]
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d1ef      	bne.n	800fb46 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800fb66:	bf00      	nop
 800fb68:	3714      	adds	r7, #20
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr
 800fb72:	bf00      	nop
 800fb74:	2000ae80 	.word	0x2000ae80

0800fb78 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800fb80:	4915      	ldr	r1, [pc, #84]	; (800fbd8 <etharp_free_entry+0x60>)
 800fb82:	687a      	ldr	r2, [r7, #4]
 800fb84:	4613      	mov	r3, r2
 800fb86:	005b      	lsls	r3, r3, #1
 800fb88:	4413      	add	r3, r2
 800fb8a:	00db      	lsls	r3, r3, #3
 800fb8c:	440b      	add	r3, r1
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d013      	beq.n	800fbbc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800fb94:	4910      	ldr	r1, [pc, #64]	; (800fbd8 <etharp_free_entry+0x60>)
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	4613      	mov	r3, r2
 800fb9a:	005b      	lsls	r3, r3, #1
 800fb9c:	4413      	add	r3, r2
 800fb9e:	00db      	lsls	r3, r3, #3
 800fba0:	440b      	add	r3, r1
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7f9 f9f1 	bl	8008f8c <pbuf_free>
    arp_table[i].q = NULL;
 800fbaa:	490b      	ldr	r1, [pc, #44]	; (800fbd8 <etharp_free_entry+0x60>)
 800fbac:	687a      	ldr	r2, [r7, #4]
 800fbae:	4613      	mov	r3, r2
 800fbb0:	005b      	lsls	r3, r3, #1
 800fbb2:	4413      	add	r3, r2
 800fbb4:	00db      	lsls	r3, r3, #3
 800fbb6:	440b      	add	r3, r1
 800fbb8:	2200      	movs	r2, #0
 800fbba:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800fbbc:	4906      	ldr	r1, [pc, #24]	; (800fbd8 <etharp_free_entry+0x60>)
 800fbbe:	687a      	ldr	r2, [r7, #4]
 800fbc0:	4613      	mov	r3, r2
 800fbc2:	005b      	lsls	r3, r3, #1
 800fbc4:	4413      	add	r3, r2
 800fbc6:	00db      	lsls	r3, r3, #3
 800fbc8:	440b      	add	r3, r1
 800fbca:	3314      	adds	r3, #20
 800fbcc:	2200      	movs	r2, #0
 800fbce:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800fbd0:	bf00      	nop
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	200008ec 	.word	0x200008ec

0800fbdc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	607b      	str	r3, [r7, #4]
 800fbe6:	e096      	b.n	800fd16 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800fbe8:	494f      	ldr	r1, [pc, #316]	; (800fd28 <etharp_tmr+0x14c>)
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	4613      	mov	r3, r2
 800fbee:	005b      	lsls	r3, r3, #1
 800fbf0:	4413      	add	r3, r2
 800fbf2:	00db      	lsls	r3, r3, #3
 800fbf4:	440b      	add	r3, r1
 800fbf6:	3314      	adds	r3, #20
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800fbfc:	78fb      	ldrb	r3, [r7, #3]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	f000 8086 	beq.w	800fd10 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800fc04:	4948      	ldr	r1, [pc, #288]	; (800fd28 <etharp_tmr+0x14c>)
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	4613      	mov	r3, r2
 800fc0a:	005b      	lsls	r3, r3, #1
 800fc0c:	4413      	add	r3, r2
 800fc0e:	00db      	lsls	r3, r3, #3
 800fc10:	440b      	add	r3, r1
 800fc12:	3312      	adds	r3, #18
 800fc14:	881b      	ldrh	r3, [r3, #0]
 800fc16:	3301      	adds	r3, #1
 800fc18:	b298      	uxth	r0, r3
 800fc1a:	4943      	ldr	r1, [pc, #268]	; (800fd28 <etharp_tmr+0x14c>)
 800fc1c:	687a      	ldr	r2, [r7, #4]
 800fc1e:	4613      	mov	r3, r2
 800fc20:	005b      	lsls	r3, r3, #1
 800fc22:	4413      	add	r3, r2
 800fc24:	00db      	lsls	r3, r3, #3
 800fc26:	440b      	add	r3, r1
 800fc28:	3312      	adds	r3, #18
 800fc2a:	4602      	mov	r2, r0
 800fc2c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fc2e:	493e      	ldr	r1, [pc, #248]	; (800fd28 <etharp_tmr+0x14c>)
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	4613      	mov	r3, r2
 800fc34:	005b      	lsls	r3, r3, #1
 800fc36:	4413      	add	r3, r2
 800fc38:	00db      	lsls	r3, r3, #3
 800fc3a:	440b      	add	r3, r1
 800fc3c:	3312      	adds	r3, #18
 800fc3e:	881b      	ldrh	r3, [r3, #0]
 800fc40:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800fc44:	d215      	bcs.n	800fc72 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fc46:	4938      	ldr	r1, [pc, #224]	; (800fd28 <etharp_tmr+0x14c>)
 800fc48:	687a      	ldr	r2, [r7, #4]
 800fc4a:	4613      	mov	r3, r2
 800fc4c:	005b      	lsls	r3, r3, #1
 800fc4e:	4413      	add	r3, r2
 800fc50:	00db      	lsls	r3, r3, #3
 800fc52:	440b      	add	r3, r1
 800fc54:	3314      	adds	r3, #20
 800fc56:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	d10e      	bne.n	800fc7a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800fc5c:	4932      	ldr	r1, [pc, #200]	; (800fd28 <etharp_tmr+0x14c>)
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	4613      	mov	r3, r2
 800fc62:	005b      	lsls	r3, r3, #1
 800fc64:	4413      	add	r3, r2
 800fc66:	00db      	lsls	r3, r3, #3
 800fc68:	440b      	add	r3, r1
 800fc6a:	3312      	adds	r3, #18
 800fc6c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fc6e:	2b04      	cmp	r3, #4
 800fc70:	d903      	bls.n	800fc7a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f7ff ff80 	bl	800fb78 <etharp_free_entry>
 800fc78:	e04a      	b.n	800fd10 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800fc7a:	492b      	ldr	r1, [pc, #172]	; (800fd28 <etharp_tmr+0x14c>)
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	4613      	mov	r3, r2
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	4413      	add	r3, r2
 800fc84:	00db      	lsls	r3, r3, #3
 800fc86:	440b      	add	r3, r1
 800fc88:	3314      	adds	r3, #20
 800fc8a:	781b      	ldrb	r3, [r3, #0]
 800fc8c:	2b03      	cmp	r3, #3
 800fc8e:	d10a      	bne.n	800fca6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800fc90:	4925      	ldr	r1, [pc, #148]	; (800fd28 <etharp_tmr+0x14c>)
 800fc92:	687a      	ldr	r2, [r7, #4]
 800fc94:	4613      	mov	r3, r2
 800fc96:	005b      	lsls	r3, r3, #1
 800fc98:	4413      	add	r3, r2
 800fc9a:	00db      	lsls	r3, r3, #3
 800fc9c:	440b      	add	r3, r1
 800fc9e:	3314      	adds	r3, #20
 800fca0:	2204      	movs	r2, #4
 800fca2:	701a      	strb	r2, [r3, #0]
 800fca4:	e034      	b.n	800fd10 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800fca6:	4920      	ldr	r1, [pc, #128]	; (800fd28 <etharp_tmr+0x14c>)
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	4613      	mov	r3, r2
 800fcac:	005b      	lsls	r3, r3, #1
 800fcae:	4413      	add	r3, r2
 800fcb0:	00db      	lsls	r3, r3, #3
 800fcb2:	440b      	add	r3, r1
 800fcb4:	3314      	adds	r3, #20
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	2b04      	cmp	r3, #4
 800fcba:	d10a      	bne.n	800fcd2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800fcbc:	491a      	ldr	r1, [pc, #104]	; (800fd28 <etharp_tmr+0x14c>)
 800fcbe:	687a      	ldr	r2, [r7, #4]
 800fcc0:	4613      	mov	r3, r2
 800fcc2:	005b      	lsls	r3, r3, #1
 800fcc4:	4413      	add	r3, r2
 800fcc6:	00db      	lsls	r3, r3, #3
 800fcc8:	440b      	add	r3, r1
 800fcca:	3314      	adds	r3, #20
 800fccc:	2202      	movs	r2, #2
 800fcce:	701a      	strb	r2, [r3, #0]
 800fcd0:	e01e      	b.n	800fd10 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fcd2:	4915      	ldr	r1, [pc, #84]	; (800fd28 <etharp_tmr+0x14c>)
 800fcd4:	687a      	ldr	r2, [r7, #4]
 800fcd6:	4613      	mov	r3, r2
 800fcd8:	005b      	lsls	r3, r3, #1
 800fcda:	4413      	add	r3, r2
 800fcdc:	00db      	lsls	r3, r3, #3
 800fcde:	440b      	add	r3, r1
 800fce0:	3314      	adds	r3, #20
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d113      	bne.n	800fd10 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800fce8:	490f      	ldr	r1, [pc, #60]	; (800fd28 <etharp_tmr+0x14c>)
 800fcea:	687a      	ldr	r2, [r7, #4]
 800fcec:	4613      	mov	r3, r2
 800fcee:	005b      	lsls	r3, r3, #1
 800fcf0:	4413      	add	r3, r2
 800fcf2:	00db      	lsls	r3, r3, #3
 800fcf4:	440b      	add	r3, r1
 800fcf6:	3308      	adds	r3, #8
 800fcf8:	6818      	ldr	r0, [r3, #0]
 800fcfa:	687a      	ldr	r2, [r7, #4]
 800fcfc:	4613      	mov	r3, r2
 800fcfe:	005b      	lsls	r3, r3, #1
 800fd00:	4413      	add	r3, r2
 800fd02:	00db      	lsls	r3, r3, #3
 800fd04:	4a08      	ldr	r2, [pc, #32]	; (800fd28 <etharp_tmr+0x14c>)
 800fd06:	4413      	add	r3, r2
 800fd08:	3304      	adds	r3, #4
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	f000 fe6e 	bl	80109ec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	3301      	adds	r3, #1
 800fd14:	607b      	str	r3, [r7, #4]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	2b09      	cmp	r3, #9
 800fd1a:	f77f af65 	ble.w	800fbe8 <etharp_tmr+0xc>
      }
    }
  }
}
 800fd1e:	bf00      	nop
 800fd20:	bf00      	nop
 800fd22:	3708      	adds	r7, #8
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	200008ec 	.word	0x200008ec

0800fd2c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b08a      	sub	sp, #40	; 0x28
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	60f8      	str	r0, [r7, #12]
 800fd34:	460b      	mov	r3, r1
 800fd36:	607a      	str	r2, [r7, #4]
 800fd38:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800fd3a:	230a      	movs	r3, #10
 800fd3c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fd3e:	230a      	movs	r3, #10
 800fd40:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800fd42:	230a      	movs	r3, #10
 800fd44:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800fd46:	2300      	movs	r3, #0
 800fd48:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800fd4a:	230a      	movs	r3, #10
 800fd4c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	83bb      	strh	r3, [r7, #28]
 800fd52:	2300      	movs	r3, #0
 800fd54:	837b      	strh	r3, [r7, #26]
 800fd56:	2300      	movs	r3, #0
 800fd58:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	843b      	strh	r3, [r7, #32]
 800fd5e:	e0ae      	b.n	800febe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800fd60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd64:	49a6      	ldr	r1, [pc, #664]	; (8010000 <etharp_find_entry+0x2d4>)
 800fd66:	4613      	mov	r3, r2
 800fd68:	005b      	lsls	r3, r3, #1
 800fd6a:	4413      	add	r3, r2
 800fd6c:	00db      	lsls	r3, r3, #3
 800fd6e:	440b      	add	r3, r1
 800fd70:	3314      	adds	r3, #20
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800fd76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fd7a:	2b0a      	cmp	r3, #10
 800fd7c:	d105      	bne.n	800fd8a <etharp_find_entry+0x5e>
 800fd7e:	7dfb      	ldrb	r3, [r7, #23]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d102      	bne.n	800fd8a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800fd84:	8c3b      	ldrh	r3, [r7, #32]
 800fd86:	847b      	strh	r3, [r7, #34]	; 0x22
 800fd88:	e095      	b.n	800feb6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800fd8a:	7dfb      	ldrb	r3, [r7, #23]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	f000 8092 	beq.w	800feb6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800fd92:	7dfb      	ldrb	r3, [r7, #23]
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d009      	beq.n	800fdac <etharp_find_entry+0x80>
 800fd98:	7dfb      	ldrb	r3, [r7, #23]
 800fd9a:	2b01      	cmp	r3, #1
 800fd9c:	d806      	bhi.n	800fdac <etharp_find_entry+0x80>
 800fd9e:	4b99      	ldr	r3, [pc, #612]	; (8010004 <etharp_find_entry+0x2d8>)
 800fda0:	f240 1223 	movw	r2, #291	; 0x123
 800fda4:	4998      	ldr	r1, [pc, #608]	; (8010008 <etharp_find_entry+0x2dc>)
 800fda6:	4899      	ldr	r0, [pc, #612]	; (801000c <etharp_find_entry+0x2e0>)
 800fda8:	f004 ffa4 	bl	8014cf4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d020      	beq.n	800fdf4 <etharp_find_entry+0xc8>
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	6819      	ldr	r1, [r3, #0]
 800fdb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fdba:	4891      	ldr	r0, [pc, #580]	; (8010000 <etharp_find_entry+0x2d4>)
 800fdbc:	4613      	mov	r3, r2
 800fdbe:	005b      	lsls	r3, r3, #1
 800fdc0:	4413      	add	r3, r2
 800fdc2:	00db      	lsls	r3, r3, #3
 800fdc4:	4403      	add	r3, r0
 800fdc6:	3304      	adds	r3, #4
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	4299      	cmp	r1, r3
 800fdcc:	d112      	bne.n	800fdf4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d00c      	beq.n	800fdee <etharp_find_entry+0xc2>
 800fdd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fdd8:	4989      	ldr	r1, [pc, #548]	; (8010000 <etharp_find_entry+0x2d4>)
 800fdda:	4613      	mov	r3, r2
 800fddc:	005b      	lsls	r3, r3, #1
 800fdde:	4413      	add	r3, r2
 800fde0:	00db      	lsls	r3, r3, #3
 800fde2:	440b      	add	r3, r1
 800fde4:	3308      	adds	r3, #8
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d102      	bne.n	800fdf4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800fdee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fdf2:	e100      	b.n	800fff6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800fdf4:	7dfb      	ldrb	r3, [r7, #23]
 800fdf6:	2b01      	cmp	r3, #1
 800fdf8:	d140      	bne.n	800fe7c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800fdfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fdfe:	4980      	ldr	r1, [pc, #512]	; (8010000 <etharp_find_entry+0x2d4>)
 800fe00:	4613      	mov	r3, r2
 800fe02:	005b      	lsls	r3, r3, #1
 800fe04:	4413      	add	r3, r2
 800fe06:	00db      	lsls	r3, r3, #3
 800fe08:	440b      	add	r3, r1
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d01a      	beq.n	800fe46 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800fe10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fe14:	497a      	ldr	r1, [pc, #488]	; (8010000 <etharp_find_entry+0x2d4>)
 800fe16:	4613      	mov	r3, r2
 800fe18:	005b      	lsls	r3, r3, #1
 800fe1a:	4413      	add	r3, r2
 800fe1c:	00db      	lsls	r3, r3, #3
 800fe1e:	440b      	add	r3, r1
 800fe20:	3312      	adds	r3, #18
 800fe22:	881b      	ldrh	r3, [r3, #0]
 800fe24:	8bba      	ldrh	r2, [r7, #28]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	d845      	bhi.n	800feb6 <etharp_find_entry+0x18a>
            old_queue = i;
 800fe2a:	8c3b      	ldrh	r3, [r7, #32]
 800fe2c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800fe2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fe32:	4973      	ldr	r1, [pc, #460]	; (8010000 <etharp_find_entry+0x2d4>)
 800fe34:	4613      	mov	r3, r2
 800fe36:	005b      	lsls	r3, r3, #1
 800fe38:	4413      	add	r3, r2
 800fe3a:	00db      	lsls	r3, r3, #3
 800fe3c:	440b      	add	r3, r1
 800fe3e:	3312      	adds	r3, #18
 800fe40:	881b      	ldrh	r3, [r3, #0]
 800fe42:	83bb      	strh	r3, [r7, #28]
 800fe44:	e037      	b.n	800feb6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800fe46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fe4a:	496d      	ldr	r1, [pc, #436]	; (8010000 <etharp_find_entry+0x2d4>)
 800fe4c:	4613      	mov	r3, r2
 800fe4e:	005b      	lsls	r3, r3, #1
 800fe50:	4413      	add	r3, r2
 800fe52:	00db      	lsls	r3, r3, #3
 800fe54:	440b      	add	r3, r1
 800fe56:	3312      	adds	r3, #18
 800fe58:	881b      	ldrh	r3, [r3, #0]
 800fe5a:	8b7a      	ldrh	r2, [r7, #26]
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d82a      	bhi.n	800feb6 <etharp_find_entry+0x18a>
            old_pending = i;
 800fe60:	8c3b      	ldrh	r3, [r7, #32]
 800fe62:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800fe64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fe68:	4965      	ldr	r1, [pc, #404]	; (8010000 <etharp_find_entry+0x2d4>)
 800fe6a:	4613      	mov	r3, r2
 800fe6c:	005b      	lsls	r3, r3, #1
 800fe6e:	4413      	add	r3, r2
 800fe70:	00db      	lsls	r3, r3, #3
 800fe72:	440b      	add	r3, r1
 800fe74:	3312      	adds	r3, #18
 800fe76:	881b      	ldrh	r3, [r3, #0]
 800fe78:	837b      	strh	r3, [r7, #26]
 800fe7a:	e01c      	b.n	800feb6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800fe7c:	7dfb      	ldrb	r3, [r7, #23]
 800fe7e:	2b01      	cmp	r3, #1
 800fe80:	d919      	bls.n	800feb6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800fe82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fe86:	495e      	ldr	r1, [pc, #376]	; (8010000 <etharp_find_entry+0x2d4>)
 800fe88:	4613      	mov	r3, r2
 800fe8a:	005b      	lsls	r3, r3, #1
 800fe8c:	4413      	add	r3, r2
 800fe8e:	00db      	lsls	r3, r3, #3
 800fe90:	440b      	add	r3, r1
 800fe92:	3312      	adds	r3, #18
 800fe94:	881b      	ldrh	r3, [r3, #0]
 800fe96:	8b3a      	ldrh	r2, [r7, #24]
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d80c      	bhi.n	800feb6 <etharp_find_entry+0x18a>
            old_stable = i;
 800fe9c:	8c3b      	ldrh	r3, [r7, #32]
 800fe9e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800fea0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fea4:	4956      	ldr	r1, [pc, #344]	; (8010000 <etharp_find_entry+0x2d4>)
 800fea6:	4613      	mov	r3, r2
 800fea8:	005b      	lsls	r3, r3, #1
 800feaa:	4413      	add	r3, r2
 800feac:	00db      	lsls	r3, r3, #3
 800feae:	440b      	add	r3, r1
 800feb0:	3312      	adds	r3, #18
 800feb2:	881b      	ldrh	r3, [r3, #0]
 800feb4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800feb6:	8c3b      	ldrh	r3, [r7, #32]
 800feb8:	3301      	adds	r3, #1
 800feba:	b29b      	uxth	r3, r3
 800febc:	843b      	strh	r3, [r7, #32]
 800febe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fec2:	2b09      	cmp	r3, #9
 800fec4:	f77f af4c 	ble.w	800fd60 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800fec8:	7afb      	ldrb	r3, [r7, #11]
 800feca:	f003 0302 	and.w	r3, r3, #2
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d108      	bne.n	800fee4 <etharp_find_entry+0x1b8>
 800fed2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fed6:	2b0a      	cmp	r3, #10
 800fed8:	d107      	bne.n	800feea <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800feda:	7afb      	ldrb	r3, [r7, #11]
 800fedc:	f003 0301 	and.w	r3, r3, #1
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d102      	bne.n	800feea <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800fee4:	f04f 33ff 	mov.w	r3, #4294967295
 800fee8:	e085      	b.n	800fff6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800feea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800feee:	2b09      	cmp	r3, #9
 800fef0:	dc02      	bgt.n	800fef8 <etharp_find_entry+0x1cc>
    i = empty;
 800fef2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fef4:	843b      	strh	r3, [r7, #32]
 800fef6:	e039      	b.n	800ff6c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800fef8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fefc:	2b09      	cmp	r3, #9
 800fefe:	dc14      	bgt.n	800ff2a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ff00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff02:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ff04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff08:	493d      	ldr	r1, [pc, #244]	; (8010000 <etharp_find_entry+0x2d4>)
 800ff0a:	4613      	mov	r3, r2
 800ff0c:	005b      	lsls	r3, r3, #1
 800ff0e:	4413      	add	r3, r2
 800ff10:	00db      	lsls	r3, r3, #3
 800ff12:	440b      	add	r3, r1
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d018      	beq.n	800ff4c <etharp_find_entry+0x220>
 800ff1a:	4b3a      	ldr	r3, [pc, #232]	; (8010004 <etharp_find_entry+0x2d8>)
 800ff1c:	f240 126d 	movw	r2, #365	; 0x16d
 800ff20:	493b      	ldr	r1, [pc, #236]	; (8010010 <etharp_find_entry+0x2e4>)
 800ff22:	483a      	ldr	r0, [pc, #232]	; (801000c <etharp_find_entry+0x2e0>)
 800ff24:	f004 fee6 	bl	8014cf4 <iprintf>
 800ff28:	e010      	b.n	800ff4c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ff2a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ff2e:	2b09      	cmp	r3, #9
 800ff30:	dc02      	bgt.n	800ff38 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ff32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ff34:	843b      	strh	r3, [r7, #32]
 800ff36:	e009      	b.n	800ff4c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ff38:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ff3c:	2b09      	cmp	r3, #9
 800ff3e:	dc02      	bgt.n	800ff46 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ff40:	8bfb      	ldrh	r3, [r7, #30]
 800ff42:	843b      	strh	r3, [r7, #32]
 800ff44:	e002      	b.n	800ff4c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ff46:	f04f 33ff 	mov.w	r3, #4294967295
 800ff4a:	e054      	b.n	800fff6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ff4c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ff50:	2b09      	cmp	r3, #9
 800ff52:	dd06      	ble.n	800ff62 <etharp_find_entry+0x236>
 800ff54:	4b2b      	ldr	r3, [pc, #172]	; (8010004 <etharp_find_entry+0x2d8>)
 800ff56:	f240 127f 	movw	r2, #383	; 0x17f
 800ff5a:	492e      	ldr	r1, [pc, #184]	; (8010014 <etharp_find_entry+0x2e8>)
 800ff5c:	482b      	ldr	r0, [pc, #172]	; (801000c <etharp_find_entry+0x2e0>)
 800ff5e:	f004 fec9 	bl	8014cf4 <iprintf>
    etharp_free_entry(i);
 800ff62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7ff fe06 	bl	800fb78 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ff6c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ff70:	2b09      	cmp	r3, #9
 800ff72:	dd06      	ble.n	800ff82 <etharp_find_entry+0x256>
 800ff74:	4b23      	ldr	r3, [pc, #140]	; (8010004 <etharp_find_entry+0x2d8>)
 800ff76:	f240 1283 	movw	r2, #387	; 0x183
 800ff7a:	4926      	ldr	r1, [pc, #152]	; (8010014 <etharp_find_entry+0x2e8>)
 800ff7c:	4823      	ldr	r0, [pc, #140]	; (801000c <etharp_find_entry+0x2e0>)
 800ff7e:	f004 feb9 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ff82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff86:	491e      	ldr	r1, [pc, #120]	; (8010000 <etharp_find_entry+0x2d4>)
 800ff88:	4613      	mov	r3, r2
 800ff8a:	005b      	lsls	r3, r3, #1
 800ff8c:	4413      	add	r3, r2
 800ff8e:	00db      	lsls	r3, r3, #3
 800ff90:	440b      	add	r3, r1
 800ff92:	3314      	adds	r3, #20
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d006      	beq.n	800ffa8 <etharp_find_entry+0x27c>
 800ff9a:	4b1a      	ldr	r3, [pc, #104]	; (8010004 <etharp_find_entry+0x2d8>)
 800ff9c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ffa0:	491d      	ldr	r1, [pc, #116]	; (8010018 <etharp_find_entry+0x2ec>)
 800ffa2:	481a      	ldr	r0, [pc, #104]	; (801000c <etharp_find_entry+0x2e0>)
 800ffa4:	f004 fea6 	bl	8014cf4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d00b      	beq.n	800ffc6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ffae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	6819      	ldr	r1, [r3, #0]
 800ffb6:	4812      	ldr	r0, [pc, #72]	; (8010000 <etharp_find_entry+0x2d4>)
 800ffb8:	4613      	mov	r3, r2
 800ffba:	005b      	lsls	r3, r3, #1
 800ffbc:	4413      	add	r3, r2
 800ffbe:	00db      	lsls	r3, r3, #3
 800ffc0:	4403      	add	r3, r0
 800ffc2:	3304      	adds	r3, #4
 800ffc4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ffc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ffca:	490d      	ldr	r1, [pc, #52]	; (8010000 <etharp_find_entry+0x2d4>)
 800ffcc:	4613      	mov	r3, r2
 800ffce:	005b      	lsls	r3, r3, #1
 800ffd0:	4413      	add	r3, r2
 800ffd2:	00db      	lsls	r3, r3, #3
 800ffd4:	440b      	add	r3, r1
 800ffd6:	3312      	adds	r3, #18
 800ffd8:	2200      	movs	r2, #0
 800ffda:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ffdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ffe0:	4907      	ldr	r1, [pc, #28]	; (8010000 <etharp_find_entry+0x2d4>)
 800ffe2:	4613      	mov	r3, r2
 800ffe4:	005b      	lsls	r3, r3, #1
 800ffe6:	4413      	add	r3, r2
 800ffe8:	00db      	lsls	r3, r3, #3
 800ffea:	440b      	add	r3, r1
 800ffec:	3308      	adds	r3, #8
 800ffee:	687a      	ldr	r2, [r7, #4]
 800fff0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800fff2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3728      	adds	r7, #40	; 0x28
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
 800fffe:	bf00      	nop
 8010000:	200008ec 	.word	0x200008ec
 8010004:	08019ac4 	.word	0x08019ac4
 8010008:	08019afc 	.word	0x08019afc
 801000c:	08019b3c 	.word	0x08019b3c
 8010010:	08019b64 	.word	0x08019b64
 8010014:	08019b7c 	.word	0x08019b7c
 8010018:	08019b90 	.word	0x08019b90

0801001c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b088      	sub	sp, #32
 8010020:	af02      	add	r7, sp, #8
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	60b9      	str	r1, [r7, #8]
 8010026:	607a      	str	r2, [r7, #4]
 8010028:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010030:	2b06      	cmp	r3, #6
 8010032:	d006      	beq.n	8010042 <etharp_update_arp_entry+0x26>
 8010034:	4b48      	ldr	r3, [pc, #288]	; (8010158 <etharp_update_arp_entry+0x13c>)
 8010036:	f240 12a9 	movw	r2, #425	; 0x1a9
 801003a:	4948      	ldr	r1, [pc, #288]	; (801015c <etharp_update_arp_entry+0x140>)
 801003c:	4848      	ldr	r0, [pc, #288]	; (8010160 <etharp_update_arp_entry+0x144>)
 801003e:	f004 fe59 	bl	8014cf4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d012      	beq.n	801006e <etharp_update_arp_entry+0x52>
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d00e      	beq.n	801006e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	68f9      	ldr	r1, [r7, #12]
 8010056:	4618      	mov	r0, r3
 8010058:	f001 f8fe 	bl	8011258 <ip4_addr_isbroadcast_u32>
 801005c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801005e:	2b00      	cmp	r3, #0
 8010060:	d105      	bne.n	801006e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801006a:	2be0      	cmp	r3, #224	; 0xe0
 801006c:	d102      	bne.n	8010074 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801006e:	f06f 030f 	mvn.w	r3, #15
 8010072:	e06c      	b.n	801014e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010074:	78fb      	ldrb	r3, [r7, #3]
 8010076:	68fa      	ldr	r2, [r7, #12]
 8010078:	4619      	mov	r1, r3
 801007a:	68b8      	ldr	r0, [r7, #8]
 801007c:	f7ff fe56 	bl	800fd2c <etharp_find_entry>
 8010080:	4603      	mov	r3, r0
 8010082:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010084:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010088:	2b00      	cmp	r3, #0
 801008a:	da02      	bge.n	8010092 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801008c:	8afb      	ldrh	r3, [r7, #22]
 801008e:	b25b      	sxtb	r3, r3
 8010090:	e05d      	b.n	801014e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010092:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010096:	4933      	ldr	r1, [pc, #204]	; (8010164 <etharp_update_arp_entry+0x148>)
 8010098:	4613      	mov	r3, r2
 801009a:	005b      	lsls	r3, r3, #1
 801009c:	4413      	add	r3, r2
 801009e:	00db      	lsls	r3, r3, #3
 80100a0:	440b      	add	r3, r1
 80100a2:	3314      	adds	r3, #20
 80100a4:	2202      	movs	r2, #2
 80100a6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80100a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80100ac:	492d      	ldr	r1, [pc, #180]	; (8010164 <etharp_update_arp_entry+0x148>)
 80100ae:	4613      	mov	r3, r2
 80100b0:	005b      	lsls	r3, r3, #1
 80100b2:	4413      	add	r3, r2
 80100b4:	00db      	lsls	r3, r3, #3
 80100b6:	440b      	add	r3, r1
 80100b8:	3308      	adds	r3, #8
 80100ba:	68fa      	ldr	r2, [r7, #12]
 80100bc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80100be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80100c2:	4613      	mov	r3, r2
 80100c4:	005b      	lsls	r3, r3, #1
 80100c6:	4413      	add	r3, r2
 80100c8:	00db      	lsls	r3, r3, #3
 80100ca:	3308      	adds	r3, #8
 80100cc:	4a25      	ldr	r2, [pc, #148]	; (8010164 <etharp_update_arp_entry+0x148>)
 80100ce:	4413      	add	r3, r2
 80100d0:	3304      	adds	r3, #4
 80100d2:	2206      	movs	r2, #6
 80100d4:	6879      	ldr	r1, [r7, #4]
 80100d6:	4618      	mov	r0, r3
 80100d8:	f005 f885 	bl	80151e6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80100dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80100e0:	4920      	ldr	r1, [pc, #128]	; (8010164 <etharp_update_arp_entry+0x148>)
 80100e2:	4613      	mov	r3, r2
 80100e4:	005b      	lsls	r3, r3, #1
 80100e6:	4413      	add	r3, r2
 80100e8:	00db      	lsls	r3, r3, #3
 80100ea:	440b      	add	r3, r1
 80100ec:	3312      	adds	r3, #18
 80100ee:	2200      	movs	r2, #0
 80100f0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80100f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80100f6:	491b      	ldr	r1, [pc, #108]	; (8010164 <etharp_update_arp_entry+0x148>)
 80100f8:	4613      	mov	r3, r2
 80100fa:	005b      	lsls	r3, r3, #1
 80100fc:	4413      	add	r3, r2
 80100fe:	00db      	lsls	r3, r3, #3
 8010100:	440b      	add	r3, r1
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d021      	beq.n	801014c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010108:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801010c:	4915      	ldr	r1, [pc, #84]	; (8010164 <etharp_update_arp_entry+0x148>)
 801010e:	4613      	mov	r3, r2
 8010110:	005b      	lsls	r3, r3, #1
 8010112:	4413      	add	r3, r2
 8010114:	00db      	lsls	r3, r3, #3
 8010116:	440b      	add	r3, r1
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801011c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010120:	4910      	ldr	r1, [pc, #64]	; (8010164 <etharp_update_arp_entry+0x148>)
 8010122:	4613      	mov	r3, r2
 8010124:	005b      	lsls	r3, r3, #1
 8010126:	4413      	add	r3, r2
 8010128:	00db      	lsls	r3, r3, #3
 801012a:	440b      	add	r3, r1
 801012c:	2200      	movs	r2, #0
 801012e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010136:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801013a:	9300      	str	r3, [sp, #0]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6939      	ldr	r1, [r7, #16]
 8010140:	68f8      	ldr	r0, [r7, #12]
 8010142:	f002 f827 	bl	8012194 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010146:	6938      	ldr	r0, [r7, #16]
 8010148:	f7f8 ff20 	bl	8008f8c <pbuf_free>
  }
  return ERR_OK;
 801014c:	2300      	movs	r3, #0
}
 801014e:	4618      	mov	r0, r3
 8010150:	3718      	adds	r7, #24
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	08019ac4 	.word	0x08019ac4
 801015c:	08019bbc 	.word	0x08019bbc
 8010160:	08019b3c 	.word	0x08019b3c
 8010164:	200008ec 	.word	0x200008ec

08010168 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b084      	sub	sp, #16
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010170:	2300      	movs	r3, #0
 8010172:	60fb      	str	r3, [r7, #12]
 8010174:	e01e      	b.n	80101b4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010176:	4913      	ldr	r1, [pc, #76]	; (80101c4 <etharp_cleanup_netif+0x5c>)
 8010178:	68fa      	ldr	r2, [r7, #12]
 801017a:	4613      	mov	r3, r2
 801017c:	005b      	lsls	r3, r3, #1
 801017e:	4413      	add	r3, r2
 8010180:	00db      	lsls	r3, r3, #3
 8010182:	440b      	add	r3, r1
 8010184:	3314      	adds	r3, #20
 8010186:	781b      	ldrb	r3, [r3, #0]
 8010188:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801018a:	7afb      	ldrb	r3, [r7, #11]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d00e      	beq.n	80101ae <etharp_cleanup_netif+0x46>
 8010190:	490c      	ldr	r1, [pc, #48]	; (80101c4 <etharp_cleanup_netif+0x5c>)
 8010192:	68fa      	ldr	r2, [r7, #12]
 8010194:	4613      	mov	r3, r2
 8010196:	005b      	lsls	r3, r3, #1
 8010198:	4413      	add	r3, r2
 801019a:	00db      	lsls	r3, r3, #3
 801019c:	440b      	add	r3, r1
 801019e:	3308      	adds	r3, #8
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d102      	bne.n	80101ae <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f7ff fce5 	bl	800fb78 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	3301      	adds	r3, #1
 80101b2:	60fb      	str	r3, [r7, #12]
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2b09      	cmp	r3, #9
 80101b8:	dddd      	ble.n	8010176 <etharp_cleanup_netif+0xe>
    }
  }
}
 80101ba:	bf00      	nop
 80101bc:	bf00      	nop
 80101be:	3710      	adds	r7, #16
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	200008ec 	.word	0x200008ec

080101c8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80101c8:	b5b0      	push	{r4, r5, r7, lr}
 80101ca:	b08a      	sub	sp, #40	; 0x28
 80101cc:	af04      	add	r7, sp, #16
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d107      	bne.n	80101e8 <etharp_input+0x20>
 80101d8:	4b3d      	ldr	r3, [pc, #244]	; (80102d0 <etharp_input+0x108>)
 80101da:	f240 228a 	movw	r2, #650	; 0x28a
 80101de:	493d      	ldr	r1, [pc, #244]	; (80102d4 <etharp_input+0x10c>)
 80101e0:	483d      	ldr	r0, [pc, #244]	; (80102d8 <etharp_input+0x110>)
 80101e2:	f004 fd87 	bl	8014cf4 <iprintf>
 80101e6:	e06f      	b.n	80102c8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	881b      	ldrh	r3, [r3, #0]
 80101f2:	b29b      	uxth	r3, r3
 80101f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80101f8:	d10c      	bne.n	8010214 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80101fe:	2b06      	cmp	r3, #6
 8010200:	d108      	bne.n	8010214 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010202:	693b      	ldr	r3, [r7, #16]
 8010204:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010206:	2b04      	cmp	r3, #4
 8010208:	d104      	bne.n	8010214 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	885b      	ldrh	r3, [r3, #2]
 801020e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010210:	2b08      	cmp	r3, #8
 8010212:	d003      	beq.n	801021c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f7f8 feb9 	bl	8008f8c <pbuf_free>
    return;
 801021a:	e055      	b.n	80102c8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	330e      	adds	r3, #14
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	3318      	adds	r3, #24
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	3304      	adds	r3, #4
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d102      	bne.n	801023c <etharp_input+0x74>
    for_us = 0;
 8010236:	2300      	movs	r3, #0
 8010238:	75fb      	strb	r3, [r7, #23]
 801023a:	e009      	b.n	8010250 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801023c:	68ba      	ldr	r2, [r7, #8]
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	3304      	adds	r3, #4
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	429a      	cmp	r2, r3
 8010246:	bf0c      	ite	eq
 8010248:	2301      	moveq	r3, #1
 801024a:	2300      	movne	r3, #0
 801024c:	b2db      	uxtb	r3, r3
 801024e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010250:	693b      	ldr	r3, [r7, #16]
 8010252:	f103 0208 	add.w	r2, r3, #8
 8010256:	7dfb      	ldrb	r3, [r7, #23]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d001      	beq.n	8010260 <etharp_input+0x98>
 801025c:	2301      	movs	r3, #1
 801025e:	e000      	b.n	8010262 <etharp_input+0x9a>
 8010260:	2302      	movs	r3, #2
 8010262:	f107 010c 	add.w	r1, r7, #12
 8010266:	6838      	ldr	r0, [r7, #0]
 8010268:	f7ff fed8 	bl	801001c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801026c:	693b      	ldr	r3, [r7, #16]
 801026e:	88db      	ldrh	r3, [r3, #6]
 8010270:	b29b      	uxth	r3, r3
 8010272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010276:	d003      	beq.n	8010280 <etharp_input+0xb8>
 8010278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801027c:	d01e      	beq.n	80102bc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801027e:	e020      	b.n	80102c2 <etharp_input+0xfa>
      if (for_us) {
 8010280:	7dfb      	ldrb	r3, [r7, #23]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d01c      	beq.n	80102c0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801028c:	693b      	ldr	r3, [r7, #16]
 801028e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801029c:	693a      	ldr	r2, [r7, #16]
 801029e:	3208      	adds	r2, #8
        etharp_raw(netif,
 80102a0:	2102      	movs	r1, #2
 80102a2:	9103      	str	r1, [sp, #12]
 80102a4:	f107 010c 	add.w	r1, r7, #12
 80102a8:	9102      	str	r1, [sp, #8]
 80102aa:	9201      	str	r2, [sp, #4]
 80102ac:	9300      	str	r3, [sp, #0]
 80102ae:	462b      	mov	r3, r5
 80102b0:	4622      	mov	r2, r4
 80102b2:	4601      	mov	r1, r0
 80102b4:	6838      	ldr	r0, [r7, #0]
 80102b6:	f000 faeb 	bl	8010890 <etharp_raw>
      break;
 80102ba:	e001      	b.n	80102c0 <etharp_input+0xf8>
      break;
 80102bc:	bf00      	nop
 80102be:	e000      	b.n	80102c2 <etharp_input+0xfa>
      break;
 80102c0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f7f8 fe62 	bl	8008f8c <pbuf_free>
}
 80102c8:	3718      	adds	r7, #24
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bdb0      	pop	{r4, r5, r7, pc}
 80102ce:	bf00      	nop
 80102d0:	08019ac4 	.word	0x08019ac4
 80102d4:	08019c14 	.word	0x08019c14
 80102d8:	08019b3c 	.word	0x08019b3c

080102dc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b086      	sub	sp, #24
 80102e0:	af02      	add	r7, sp, #8
 80102e2:	60f8      	str	r0, [r7, #12]
 80102e4:	60b9      	str	r1, [r7, #8]
 80102e6:	4613      	mov	r3, r2
 80102e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80102ea:	79fa      	ldrb	r2, [r7, #7]
 80102ec:	4944      	ldr	r1, [pc, #272]	; (8010400 <etharp_output_to_arp_index+0x124>)
 80102ee:	4613      	mov	r3, r2
 80102f0:	005b      	lsls	r3, r3, #1
 80102f2:	4413      	add	r3, r2
 80102f4:	00db      	lsls	r3, r3, #3
 80102f6:	440b      	add	r3, r1
 80102f8:	3314      	adds	r3, #20
 80102fa:	781b      	ldrb	r3, [r3, #0]
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	d806      	bhi.n	801030e <etharp_output_to_arp_index+0x32>
 8010300:	4b40      	ldr	r3, [pc, #256]	; (8010404 <etharp_output_to_arp_index+0x128>)
 8010302:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010306:	4940      	ldr	r1, [pc, #256]	; (8010408 <etharp_output_to_arp_index+0x12c>)
 8010308:	4840      	ldr	r0, [pc, #256]	; (801040c <etharp_output_to_arp_index+0x130>)
 801030a:	f004 fcf3 	bl	8014cf4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801030e:	79fa      	ldrb	r2, [r7, #7]
 8010310:	493b      	ldr	r1, [pc, #236]	; (8010400 <etharp_output_to_arp_index+0x124>)
 8010312:	4613      	mov	r3, r2
 8010314:	005b      	lsls	r3, r3, #1
 8010316:	4413      	add	r3, r2
 8010318:	00db      	lsls	r3, r3, #3
 801031a:	440b      	add	r3, r1
 801031c:	3314      	adds	r3, #20
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	2b02      	cmp	r3, #2
 8010322:	d153      	bne.n	80103cc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010324:	79fa      	ldrb	r2, [r7, #7]
 8010326:	4936      	ldr	r1, [pc, #216]	; (8010400 <etharp_output_to_arp_index+0x124>)
 8010328:	4613      	mov	r3, r2
 801032a:	005b      	lsls	r3, r3, #1
 801032c:	4413      	add	r3, r2
 801032e:	00db      	lsls	r3, r3, #3
 8010330:	440b      	add	r3, r1
 8010332:	3312      	adds	r3, #18
 8010334:	881b      	ldrh	r3, [r3, #0]
 8010336:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801033a:	d919      	bls.n	8010370 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801033c:	79fa      	ldrb	r2, [r7, #7]
 801033e:	4613      	mov	r3, r2
 8010340:	005b      	lsls	r3, r3, #1
 8010342:	4413      	add	r3, r2
 8010344:	00db      	lsls	r3, r3, #3
 8010346:	4a2e      	ldr	r2, [pc, #184]	; (8010400 <etharp_output_to_arp_index+0x124>)
 8010348:	4413      	add	r3, r2
 801034a:	3304      	adds	r3, #4
 801034c:	4619      	mov	r1, r3
 801034e:	68f8      	ldr	r0, [r7, #12]
 8010350:	f000 fb4c 	bl	80109ec <etharp_request>
 8010354:	4603      	mov	r3, r0
 8010356:	2b00      	cmp	r3, #0
 8010358:	d138      	bne.n	80103cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801035a:	79fa      	ldrb	r2, [r7, #7]
 801035c:	4928      	ldr	r1, [pc, #160]	; (8010400 <etharp_output_to_arp_index+0x124>)
 801035e:	4613      	mov	r3, r2
 8010360:	005b      	lsls	r3, r3, #1
 8010362:	4413      	add	r3, r2
 8010364:	00db      	lsls	r3, r3, #3
 8010366:	440b      	add	r3, r1
 8010368:	3314      	adds	r3, #20
 801036a:	2203      	movs	r2, #3
 801036c:	701a      	strb	r2, [r3, #0]
 801036e:	e02d      	b.n	80103cc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010370:	79fa      	ldrb	r2, [r7, #7]
 8010372:	4923      	ldr	r1, [pc, #140]	; (8010400 <etharp_output_to_arp_index+0x124>)
 8010374:	4613      	mov	r3, r2
 8010376:	005b      	lsls	r3, r3, #1
 8010378:	4413      	add	r3, r2
 801037a:	00db      	lsls	r3, r3, #3
 801037c:	440b      	add	r3, r1
 801037e:	3312      	adds	r3, #18
 8010380:	881b      	ldrh	r3, [r3, #0]
 8010382:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010386:	d321      	bcc.n	80103cc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010388:	79fa      	ldrb	r2, [r7, #7]
 801038a:	4613      	mov	r3, r2
 801038c:	005b      	lsls	r3, r3, #1
 801038e:	4413      	add	r3, r2
 8010390:	00db      	lsls	r3, r3, #3
 8010392:	4a1b      	ldr	r2, [pc, #108]	; (8010400 <etharp_output_to_arp_index+0x124>)
 8010394:	4413      	add	r3, r2
 8010396:	1d19      	adds	r1, r3, #4
 8010398:	79fa      	ldrb	r2, [r7, #7]
 801039a:	4613      	mov	r3, r2
 801039c:	005b      	lsls	r3, r3, #1
 801039e:	4413      	add	r3, r2
 80103a0:	00db      	lsls	r3, r3, #3
 80103a2:	3308      	adds	r3, #8
 80103a4:	4a16      	ldr	r2, [pc, #88]	; (8010400 <etharp_output_to_arp_index+0x124>)
 80103a6:	4413      	add	r3, r2
 80103a8:	3304      	adds	r3, #4
 80103aa:	461a      	mov	r2, r3
 80103ac:	68f8      	ldr	r0, [r7, #12]
 80103ae:	f000 fafb 	bl	80109a8 <etharp_request_dst>
 80103b2:	4603      	mov	r3, r0
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d109      	bne.n	80103cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80103b8:	79fa      	ldrb	r2, [r7, #7]
 80103ba:	4911      	ldr	r1, [pc, #68]	; (8010400 <etharp_output_to_arp_index+0x124>)
 80103bc:	4613      	mov	r3, r2
 80103be:	005b      	lsls	r3, r3, #1
 80103c0:	4413      	add	r3, r2
 80103c2:	00db      	lsls	r3, r3, #3
 80103c4:	440b      	add	r3, r1
 80103c6:	3314      	adds	r3, #20
 80103c8:	2203      	movs	r2, #3
 80103ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80103d2:	79fa      	ldrb	r2, [r7, #7]
 80103d4:	4613      	mov	r3, r2
 80103d6:	005b      	lsls	r3, r3, #1
 80103d8:	4413      	add	r3, r2
 80103da:	00db      	lsls	r3, r3, #3
 80103dc:	3308      	adds	r3, #8
 80103de:	4a08      	ldr	r2, [pc, #32]	; (8010400 <etharp_output_to_arp_index+0x124>)
 80103e0:	4413      	add	r3, r2
 80103e2:	3304      	adds	r3, #4
 80103e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80103e8:	9200      	str	r2, [sp, #0]
 80103ea:	460a      	mov	r2, r1
 80103ec:	68b9      	ldr	r1, [r7, #8]
 80103ee:	68f8      	ldr	r0, [r7, #12]
 80103f0:	f001 fed0 	bl	8012194 <ethernet_output>
 80103f4:	4603      	mov	r3, r0
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3710      	adds	r7, #16
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	200008ec 	.word	0x200008ec
 8010404:	08019ac4 	.word	0x08019ac4
 8010408:	08019c34 	.word	0x08019c34
 801040c:	08019b3c 	.word	0x08019b3c

08010410 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b08a      	sub	sp, #40	; 0x28
 8010414:	af02      	add	r7, sp, #8
 8010416:	60f8      	str	r0, [r7, #12]
 8010418:	60b9      	str	r1, [r7, #8]
 801041a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d106      	bne.n	8010434 <etharp_output+0x24>
 8010426:	4b73      	ldr	r3, [pc, #460]	; (80105f4 <etharp_output+0x1e4>)
 8010428:	f240 321e 	movw	r2, #798	; 0x31e
 801042c:	4972      	ldr	r1, [pc, #456]	; (80105f8 <etharp_output+0x1e8>)
 801042e:	4873      	ldr	r0, [pc, #460]	; (80105fc <etharp_output+0x1ec>)
 8010430:	f004 fc60 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d106      	bne.n	8010448 <etharp_output+0x38>
 801043a:	4b6e      	ldr	r3, [pc, #440]	; (80105f4 <etharp_output+0x1e4>)
 801043c:	f240 321f 	movw	r2, #799	; 0x31f
 8010440:	496f      	ldr	r1, [pc, #444]	; (8010600 <etharp_output+0x1f0>)
 8010442:	486e      	ldr	r0, [pc, #440]	; (80105fc <etharp_output+0x1ec>)
 8010444:	f004 fc56 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d106      	bne.n	801045c <etharp_output+0x4c>
 801044e:	4b69      	ldr	r3, [pc, #420]	; (80105f4 <etharp_output+0x1e4>)
 8010450:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010454:	496b      	ldr	r1, [pc, #428]	; (8010604 <etharp_output+0x1f4>)
 8010456:	4869      	ldr	r0, [pc, #420]	; (80105fc <etharp_output+0x1ec>)
 8010458:	f004 fc4c 	bl	8014cf4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	68f9      	ldr	r1, [r7, #12]
 8010462:	4618      	mov	r0, r3
 8010464:	f000 fef8 	bl	8011258 <ip4_addr_isbroadcast_u32>
 8010468:	4603      	mov	r3, r0
 801046a:	2b00      	cmp	r3, #0
 801046c:	d002      	beq.n	8010474 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801046e:	4b66      	ldr	r3, [pc, #408]	; (8010608 <etharp_output+0x1f8>)
 8010470:	61fb      	str	r3, [r7, #28]
 8010472:	e0af      	b.n	80105d4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801047c:	2be0      	cmp	r3, #224	; 0xe0
 801047e:	d118      	bne.n	80104b2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010480:	2301      	movs	r3, #1
 8010482:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010484:	2300      	movs	r3, #0
 8010486:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010488:	235e      	movs	r3, #94	; 0x5e
 801048a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	3301      	adds	r3, #1
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010496:	b2db      	uxtb	r3, r3
 8010498:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	3302      	adds	r3, #2
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	3303      	adds	r3, #3
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80104aa:	f107 0310 	add.w	r3, r7, #16
 80104ae:	61fb      	str	r3, [r7, #28]
 80104b0:	e090      	b.n	80105d4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681a      	ldr	r2, [r3, #0]
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	3304      	adds	r3, #4
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	405a      	eors	r2, r3
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	3308      	adds	r3, #8
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	4013      	ands	r3, r2
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d012      	beq.n	80104f0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80104d0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d00b      	beq.n	80104f0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	330c      	adds	r3, #12
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d003      	beq.n	80104ea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	330c      	adds	r3, #12
 80104e6:	61bb      	str	r3, [r7, #24]
 80104e8:	e002      	b.n	80104f0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80104ea:	f06f 0303 	mvn.w	r3, #3
 80104ee:	e07d      	b.n	80105ec <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80104f0:	4b46      	ldr	r3, [pc, #280]	; (801060c <etharp_output+0x1fc>)
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	4619      	mov	r1, r3
 80104f6:	4a46      	ldr	r2, [pc, #280]	; (8010610 <etharp_output+0x200>)
 80104f8:	460b      	mov	r3, r1
 80104fa:	005b      	lsls	r3, r3, #1
 80104fc:	440b      	add	r3, r1
 80104fe:	00db      	lsls	r3, r3, #3
 8010500:	4413      	add	r3, r2
 8010502:	3314      	adds	r3, #20
 8010504:	781b      	ldrb	r3, [r3, #0]
 8010506:	2b01      	cmp	r3, #1
 8010508:	d925      	bls.n	8010556 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801050a:	4b40      	ldr	r3, [pc, #256]	; (801060c <etharp_output+0x1fc>)
 801050c:	781b      	ldrb	r3, [r3, #0]
 801050e:	4619      	mov	r1, r3
 8010510:	4a3f      	ldr	r2, [pc, #252]	; (8010610 <etharp_output+0x200>)
 8010512:	460b      	mov	r3, r1
 8010514:	005b      	lsls	r3, r3, #1
 8010516:	440b      	add	r3, r1
 8010518:	00db      	lsls	r3, r3, #3
 801051a:	4413      	add	r3, r2
 801051c:	3308      	adds	r3, #8
 801051e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010520:	68fa      	ldr	r2, [r7, #12]
 8010522:	429a      	cmp	r2, r3
 8010524:	d117      	bne.n	8010556 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010526:	69bb      	ldr	r3, [r7, #24]
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	4b38      	ldr	r3, [pc, #224]	; (801060c <etharp_output+0x1fc>)
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	4618      	mov	r0, r3
 8010530:	4937      	ldr	r1, [pc, #220]	; (8010610 <etharp_output+0x200>)
 8010532:	4603      	mov	r3, r0
 8010534:	005b      	lsls	r3, r3, #1
 8010536:	4403      	add	r3, r0
 8010538:	00db      	lsls	r3, r3, #3
 801053a:	440b      	add	r3, r1
 801053c:	3304      	adds	r3, #4
 801053e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010540:	429a      	cmp	r2, r3
 8010542:	d108      	bne.n	8010556 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010544:	4b31      	ldr	r3, [pc, #196]	; (801060c <etharp_output+0x1fc>)
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	461a      	mov	r2, r3
 801054a:	68b9      	ldr	r1, [r7, #8]
 801054c:	68f8      	ldr	r0, [r7, #12]
 801054e:	f7ff fec5 	bl	80102dc <etharp_output_to_arp_index>
 8010552:	4603      	mov	r3, r0
 8010554:	e04a      	b.n	80105ec <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010556:	2300      	movs	r3, #0
 8010558:	75fb      	strb	r3, [r7, #23]
 801055a:	e031      	b.n	80105c0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801055c:	7dfa      	ldrb	r2, [r7, #23]
 801055e:	492c      	ldr	r1, [pc, #176]	; (8010610 <etharp_output+0x200>)
 8010560:	4613      	mov	r3, r2
 8010562:	005b      	lsls	r3, r3, #1
 8010564:	4413      	add	r3, r2
 8010566:	00db      	lsls	r3, r3, #3
 8010568:	440b      	add	r3, r1
 801056a:	3314      	adds	r3, #20
 801056c:	781b      	ldrb	r3, [r3, #0]
 801056e:	2b01      	cmp	r3, #1
 8010570:	d923      	bls.n	80105ba <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010572:	7dfa      	ldrb	r2, [r7, #23]
 8010574:	4926      	ldr	r1, [pc, #152]	; (8010610 <etharp_output+0x200>)
 8010576:	4613      	mov	r3, r2
 8010578:	005b      	lsls	r3, r3, #1
 801057a:	4413      	add	r3, r2
 801057c:	00db      	lsls	r3, r3, #3
 801057e:	440b      	add	r3, r1
 8010580:	3308      	adds	r3, #8
 8010582:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010584:	68fa      	ldr	r2, [r7, #12]
 8010586:	429a      	cmp	r2, r3
 8010588:	d117      	bne.n	80105ba <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	6819      	ldr	r1, [r3, #0]
 801058e:	7dfa      	ldrb	r2, [r7, #23]
 8010590:	481f      	ldr	r0, [pc, #124]	; (8010610 <etharp_output+0x200>)
 8010592:	4613      	mov	r3, r2
 8010594:	005b      	lsls	r3, r3, #1
 8010596:	4413      	add	r3, r2
 8010598:	00db      	lsls	r3, r3, #3
 801059a:	4403      	add	r3, r0
 801059c:	3304      	adds	r3, #4
 801059e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80105a0:	4299      	cmp	r1, r3
 80105a2:	d10a      	bne.n	80105ba <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80105a4:	4a19      	ldr	r2, [pc, #100]	; (801060c <etharp_output+0x1fc>)
 80105a6:	7dfb      	ldrb	r3, [r7, #23]
 80105a8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80105aa:	7dfb      	ldrb	r3, [r7, #23]
 80105ac:	461a      	mov	r2, r3
 80105ae:	68b9      	ldr	r1, [r7, #8]
 80105b0:	68f8      	ldr	r0, [r7, #12]
 80105b2:	f7ff fe93 	bl	80102dc <etharp_output_to_arp_index>
 80105b6:	4603      	mov	r3, r0
 80105b8:	e018      	b.n	80105ec <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80105ba:	7dfb      	ldrb	r3, [r7, #23]
 80105bc:	3301      	adds	r3, #1
 80105be:	75fb      	strb	r3, [r7, #23]
 80105c0:	7dfb      	ldrb	r3, [r7, #23]
 80105c2:	2b09      	cmp	r3, #9
 80105c4:	d9ca      	bls.n	801055c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80105c6:	68ba      	ldr	r2, [r7, #8]
 80105c8:	69b9      	ldr	r1, [r7, #24]
 80105ca:	68f8      	ldr	r0, [r7, #12]
 80105cc:	f000 f822 	bl	8010614 <etharp_query>
 80105d0:	4603      	mov	r3, r0
 80105d2:	e00b      	b.n	80105ec <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80105da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80105de:	9300      	str	r3, [sp, #0]
 80105e0:	69fb      	ldr	r3, [r7, #28]
 80105e2:	68b9      	ldr	r1, [r7, #8]
 80105e4:	68f8      	ldr	r0, [r7, #12]
 80105e6:	f001 fdd5 	bl	8012194 <ethernet_output>
 80105ea:	4603      	mov	r3, r0
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3720      	adds	r7, #32
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}
 80105f4:	08019ac4 	.word	0x08019ac4
 80105f8:	08019c14 	.word	0x08019c14
 80105fc:	08019b3c 	.word	0x08019b3c
 8010600:	08019c64 	.word	0x08019c64
 8010604:	08019c04 	.word	0x08019c04
 8010608:	0801aa80 	.word	0x0801aa80
 801060c:	200009dc 	.word	0x200009dc
 8010610:	200008ec 	.word	0x200008ec

08010614 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b08c      	sub	sp, #48	; 0x30
 8010618:	af02      	add	r7, sp, #8
 801061a:	60f8      	str	r0, [r7, #12]
 801061c:	60b9      	str	r1, [r7, #8]
 801061e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	3326      	adds	r3, #38	; 0x26
 8010624:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010626:	23ff      	movs	r3, #255	; 0xff
 8010628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801062c:	2300      	movs	r3, #0
 801062e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	68f9      	ldr	r1, [r7, #12]
 8010636:	4618      	mov	r0, r3
 8010638:	f000 fe0e 	bl	8011258 <ip4_addr_isbroadcast_u32>
 801063c:	4603      	mov	r3, r0
 801063e:	2b00      	cmp	r3, #0
 8010640:	d10c      	bne.n	801065c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801064a:	2be0      	cmp	r3, #224	; 0xe0
 801064c:	d006      	beq.n	801065c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d003      	beq.n	801065c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d102      	bne.n	8010662 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801065c:	f06f 030f 	mvn.w	r3, #15
 8010660:	e101      	b.n	8010866 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010662:	68fa      	ldr	r2, [r7, #12]
 8010664:	2101      	movs	r1, #1
 8010666:	68b8      	ldr	r0, [r7, #8]
 8010668:	f7ff fb60 	bl	800fd2c <etharp_find_entry>
 801066c:	4603      	mov	r3, r0
 801066e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010670:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010674:	2b00      	cmp	r3, #0
 8010676:	da02      	bge.n	801067e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010678:	8a7b      	ldrh	r3, [r7, #18]
 801067a:	b25b      	sxtb	r3, r3
 801067c:	e0f3      	b.n	8010866 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801067e:	8a7b      	ldrh	r3, [r7, #18]
 8010680:	2b7e      	cmp	r3, #126	; 0x7e
 8010682:	d906      	bls.n	8010692 <etharp_query+0x7e>
 8010684:	4b7a      	ldr	r3, [pc, #488]	; (8010870 <etharp_query+0x25c>)
 8010686:	f240 32c1 	movw	r2, #961	; 0x3c1
 801068a:	497a      	ldr	r1, [pc, #488]	; (8010874 <etharp_query+0x260>)
 801068c:	487a      	ldr	r0, [pc, #488]	; (8010878 <etharp_query+0x264>)
 801068e:	f004 fb31 	bl	8014cf4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010692:	8a7b      	ldrh	r3, [r7, #18]
 8010694:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010696:	7c7a      	ldrb	r2, [r7, #17]
 8010698:	4978      	ldr	r1, [pc, #480]	; (801087c <etharp_query+0x268>)
 801069a:	4613      	mov	r3, r2
 801069c:	005b      	lsls	r3, r3, #1
 801069e:	4413      	add	r3, r2
 80106a0:	00db      	lsls	r3, r3, #3
 80106a2:	440b      	add	r3, r1
 80106a4:	3314      	adds	r3, #20
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d115      	bne.n	80106d8 <etharp_query+0xc4>
    is_new_entry = 1;
 80106ac:	2301      	movs	r3, #1
 80106ae:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80106b0:	7c7a      	ldrb	r2, [r7, #17]
 80106b2:	4972      	ldr	r1, [pc, #456]	; (801087c <etharp_query+0x268>)
 80106b4:	4613      	mov	r3, r2
 80106b6:	005b      	lsls	r3, r3, #1
 80106b8:	4413      	add	r3, r2
 80106ba:	00db      	lsls	r3, r3, #3
 80106bc:	440b      	add	r3, r1
 80106be:	3314      	adds	r3, #20
 80106c0:	2201      	movs	r2, #1
 80106c2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80106c4:	7c7a      	ldrb	r2, [r7, #17]
 80106c6:	496d      	ldr	r1, [pc, #436]	; (801087c <etharp_query+0x268>)
 80106c8:	4613      	mov	r3, r2
 80106ca:	005b      	lsls	r3, r3, #1
 80106cc:	4413      	add	r3, r2
 80106ce:	00db      	lsls	r3, r3, #3
 80106d0:	440b      	add	r3, r1
 80106d2:	3308      	adds	r3, #8
 80106d4:	68fa      	ldr	r2, [r7, #12]
 80106d6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80106d8:	7c7a      	ldrb	r2, [r7, #17]
 80106da:	4968      	ldr	r1, [pc, #416]	; (801087c <etharp_query+0x268>)
 80106dc:	4613      	mov	r3, r2
 80106de:	005b      	lsls	r3, r3, #1
 80106e0:	4413      	add	r3, r2
 80106e2:	00db      	lsls	r3, r3, #3
 80106e4:	440b      	add	r3, r1
 80106e6:	3314      	adds	r3, #20
 80106e8:	781b      	ldrb	r3, [r3, #0]
 80106ea:	2b01      	cmp	r3, #1
 80106ec:	d011      	beq.n	8010712 <etharp_query+0xfe>
 80106ee:	7c7a      	ldrb	r2, [r7, #17]
 80106f0:	4962      	ldr	r1, [pc, #392]	; (801087c <etharp_query+0x268>)
 80106f2:	4613      	mov	r3, r2
 80106f4:	005b      	lsls	r3, r3, #1
 80106f6:	4413      	add	r3, r2
 80106f8:	00db      	lsls	r3, r3, #3
 80106fa:	440b      	add	r3, r1
 80106fc:	3314      	adds	r3, #20
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	2b01      	cmp	r3, #1
 8010702:	d806      	bhi.n	8010712 <etharp_query+0xfe>
 8010704:	4b5a      	ldr	r3, [pc, #360]	; (8010870 <etharp_query+0x25c>)
 8010706:	f240 32cd 	movw	r2, #973	; 0x3cd
 801070a:	495d      	ldr	r1, [pc, #372]	; (8010880 <etharp_query+0x26c>)
 801070c:	485a      	ldr	r0, [pc, #360]	; (8010878 <etharp_query+0x264>)
 801070e:	f004 faf1 	bl	8014cf4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010712:	6a3b      	ldr	r3, [r7, #32]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d102      	bne.n	801071e <etharp_query+0x10a>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d10c      	bne.n	8010738 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801071e:	68b9      	ldr	r1, [r7, #8]
 8010720:	68f8      	ldr	r0, [r7, #12]
 8010722:	f000 f963 	bl	80109ec <etharp_request>
 8010726:	4603      	mov	r3, r0
 8010728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d102      	bne.n	8010738 <etharp_query+0x124>
      return result;
 8010732:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010736:	e096      	b.n	8010866 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d106      	bne.n	801074c <etharp_query+0x138>
 801073e:	4b4c      	ldr	r3, [pc, #304]	; (8010870 <etharp_query+0x25c>)
 8010740:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010744:	494f      	ldr	r1, [pc, #316]	; (8010884 <etharp_query+0x270>)
 8010746:	484c      	ldr	r0, [pc, #304]	; (8010878 <etharp_query+0x264>)
 8010748:	f004 fad4 	bl	8014cf4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801074c:	7c7a      	ldrb	r2, [r7, #17]
 801074e:	494b      	ldr	r1, [pc, #300]	; (801087c <etharp_query+0x268>)
 8010750:	4613      	mov	r3, r2
 8010752:	005b      	lsls	r3, r3, #1
 8010754:	4413      	add	r3, r2
 8010756:	00db      	lsls	r3, r3, #3
 8010758:	440b      	add	r3, r1
 801075a:	3314      	adds	r3, #20
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	2b01      	cmp	r3, #1
 8010760:	d917      	bls.n	8010792 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010762:	4a49      	ldr	r2, [pc, #292]	; (8010888 <etharp_query+0x274>)
 8010764:	7c7b      	ldrb	r3, [r7, #17]
 8010766:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010768:	7c7a      	ldrb	r2, [r7, #17]
 801076a:	4613      	mov	r3, r2
 801076c:	005b      	lsls	r3, r3, #1
 801076e:	4413      	add	r3, r2
 8010770:	00db      	lsls	r3, r3, #3
 8010772:	3308      	adds	r3, #8
 8010774:	4a41      	ldr	r2, [pc, #260]	; (801087c <etharp_query+0x268>)
 8010776:	4413      	add	r3, r2
 8010778:	3304      	adds	r3, #4
 801077a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801077e:	9200      	str	r2, [sp, #0]
 8010780:	697a      	ldr	r2, [r7, #20]
 8010782:	6879      	ldr	r1, [r7, #4]
 8010784:	68f8      	ldr	r0, [r7, #12]
 8010786:	f001 fd05 	bl	8012194 <ethernet_output>
 801078a:	4603      	mov	r3, r0
 801078c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010790:	e067      	b.n	8010862 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010792:	7c7a      	ldrb	r2, [r7, #17]
 8010794:	4939      	ldr	r1, [pc, #228]	; (801087c <etharp_query+0x268>)
 8010796:	4613      	mov	r3, r2
 8010798:	005b      	lsls	r3, r3, #1
 801079a:	4413      	add	r3, r2
 801079c:	00db      	lsls	r3, r3, #3
 801079e:	440b      	add	r3, r1
 80107a0:	3314      	adds	r3, #20
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	d15c      	bne.n	8010862 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80107a8:	2300      	movs	r3, #0
 80107aa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	61fb      	str	r3, [r7, #28]
    while (p) {
 80107b0:	e01c      	b.n	80107ec <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80107b2:	69fb      	ldr	r3, [r7, #28]
 80107b4:	895a      	ldrh	r2, [r3, #10]
 80107b6:	69fb      	ldr	r3, [r7, #28]
 80107b8:	891b      	ldrh	r3, [r3, #8]
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d10a      	bne.n	80107d4 <etharp_query+0x1c0>
 80107be:	69fb      	ldr	r3, [r7, #28]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d006      	beq.n	80107d4 <etharp_query+0x1c0>
 80107c6:	4b2a      	ldr	r3, [pc, #168]	; (8010870 <etharp_query+0x25c>)
 80107c8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80107cc:	492f      	ldr	r1, [pc, #188]	; (801088c <etharp_query+0x278>)
 80107ce:	482a      	ldr	r0, [pc, #168]	; (8010878 <etharp_query+0x264>)
 80107d0:	f004 fa90 	bl	8014cf4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80107d4:	69fb      	ldr	r3, [r7, #28]
 80107d6:	7b1b      	ldrb	r3, [r3, #12]
 80107d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d002      	beq.n	80107e6 <etharp_query+0x1d2>
        copy_needed = 1;
 80107e0:	2301      	movs	r3, #1
 80107e2:	61bb      	str	r3, [r7, #24]
        break;
 80107e4:	e005      	b.n	80107f2 <etharp_query+0x1de>
      }
      p = p->next;
 80107e6:	69fb      	ldr	r3, [r7, #28]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	61fb      	str	r3, [r7, #28]
    while (p) {
 80107ec:	69fb      	ldr	r3, [r7, #28]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d1df      	bne.n	80107b2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80107f2:	69bb      	ldr	r3, [r7, #24]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d007      	beq.n	8010808 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80107f8:	687a      	ldr	r2, [r7, #4]
 80107fa:	f44f 7120 	mov.w	r1, #640	; 0x280
 80107fe:	200e      	movs	r0, #14
 8010800:	f7f8 fe30 	bl	8009464 <pbuf_clone>
 8010804:	61f8      	str	r0, [r7, #28]
 8010806:	e004      	b.n	8010812 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801080c:	69f8      	ldr	r0, [r7, #28]
 801080e:	f7f8 fc5d 	bl	80090cc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010812:	69fb      	ldr	r3, [r7, #28]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d021      	beq.n	801085c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010818:	7c7a      	ldrb	r2, [r7, #17]
 801081a:	4918      	ldr	r1, [pc, #96]	; (801087c <etharp_query+0x268>)
 801081c:	4613      	mov	r3, r2
 801081e:	005b      	lsls	r3, r3, #1
 8010820:	4413      	add	r3, r2
 8010822:	00db      	lsls	r3, r3, #3
 8010824:	440b      	add	r3, r1
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d00a      	beq.n	8010842 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801082c:	7c7a      	ldrb	r2, [r7, #17]
 801082e:	4913      	ldr	r1, [pc, #76]	; (801087c <etharp_query+0x268>)
 8010830:	4613      	mov	r3, r2
 8010832:	005b      	lsls	r3, r3, #1
 8010834:	4413      	add	r3, r2
 8010836:	00db      	lsls	r3, r3, #3
 8010838:	440b      	add	r3, r1
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	4618      	mov	r0, r3
 801083e:	f7f8 fba5 	bl	8008f8c <pbuf_free>
      }
      arp_table[i].q = p;
 8010842:	7c7a      	ldrb	r2, [r7, #17]
 8010844:	490d      	ldr	r1, [pc, #52]	; (801087c <etharp_query+0x268>)
 8010846:	4613      	mov	r3, r2
 8010848:	005b      	lsls	r3, r3, #1
 801084a:	4413      	add	r3, r2
 801084c:	00db      	lsls	r3, r3, #3
 801084e:	440b      	add	r3, r1
 8010850:	69fa      	ldr	r2, [r7, #28]
 8010852:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010854:	2300      	movs	r3, #0
 8010856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801085a:	e002      	b.n	8010862 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801085c:	23ff      	movs	r3, #255	; 0xff
 801085e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010862:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010866:	4618      	mov	r0, r3
 8010868:	3728      	adds	r7, #40	; 0x28
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	08019ac4 	.word	0x08019ac4
 8010874:	08019c70 	.word	0x08019c70
 8010878:	08019b3c 	.word	0x08019b3c
 801087c:	200008ec 	.word	0x200008ec
 8010880:	08019c80 	.word	0x08019c80
 8010884:	08019c64 	.word	0x08019c64
 8010888:	200009dc 	.word	0x200009dc
 801088c:	08019ca8 	.word	0x08019ca8

08010890 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b08a      	sub	sp, #40	; 0x28
 8010894:	af02      	add	r7, sp, #8
 8010896:	60f8      	str	r0, [r7, #12]
 8010898:	60b9      	str	r1, [r7, #8]
 801089a:	607a      	str	r2, [r7, #4]
 801089c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801089e:	2300      	movs	r3, #0
 80108a0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d106      	bne.n	80108b6 <etharp_raw+0x26>
 80108a8:	4b3a      	ldr	r3, [pc, #232]	; (8010994 <etharp_raw+0x104>)
 80108aa:	f240 4257 	movw	r2, #1111	; 0x457
 80108ae:	493a      	ldr	r1, [pc, #232]	; (8010998 <etharp_raw+0x108>)
 80108b0:	483a      	ldr	r0, [pc, #232]	; (801099c <etharp_raw+0x10c>)
 80108b2:	f004 fa1f 	bl	8014cf4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80108b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80108ba:	211c      	movs	r1, #28
 80108bc:	200e      	movs	r0, #14
 80108be:	f7f8 f881 	bl	80089c4 <pbuf_alloc>
 80108c2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80108c4:	69bb      	ldr	r3, [r7, #24]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d102      	bne.n	80108d0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80108ca:	f04f 33ff 	mov.w	r3, #4294967295
 80108ce:	e05d      	b.n	801098c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80108d0:	69bb      	ldr	r3, [r7, #24]
 80108d2:	895b      	ldrh	r3, [r3, #10]
 80108d4:	2b1b      	cmp	r3, #27
 80108d6:	d806      	bhi.n	80108e6 <etharp_raw+0x56>
 80108d8:	4b2e      	ldr	r3, [pc, #184]	; (8010994 <etharp_raw+0x104>)
 80108da:	f240 4262 	movw	r2, #1122	; 0x462
 80108de:	4930      	ldr	r1, [pc, #192]	; (80109a0 <etharp_raw+0x110>)
 80108e0:	482e      	ldr	r0, [pc, #184]	; (801099c <etharp_raw+0x10c>)
 80108e2:	f004 fa07 	bl	8014cf4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80108e6:	69bb      	ldr	r3, [r7, #24]
 80108e8:	685b      	ldr	r3, [r3, #4]
 80108ea:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80108ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7f6 ffee 	bl	80078d0 <lwip_htons>
 80108f4:	4603      	mov	r3, r0
 80108f6:	461a      	mov	r2, r3
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010902:	2b06      	cmp	r3, #6
 8010904:	d006      	beq.n	8010914 <etharp_raw+0x84>
 8010906:	4b23      	ldr	r3, [pc, #140]	; (8010994 <etharp_raw+0x104>)
 8010908:	f240 4269 	movw	r2, #1129	; 0x469
 801090c:	4925      	ldr	r1, [pc, #148]	; (80109a4 <etharp_raw+0x114>)
 801090e:	4823      	ldr	r0, [pc, #140]	; (801099c <etharp_raw+0x10c>)
 8010910:	f004 f9f0 	bl	8014cf4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	3308      	adds	r3, #8
 8010918:	2206      	movs	r2, #6
 801091a:	6839      	ldr	r1, [r7, #0]
 801091c:	4618      	mov	r0, r3
 801091e:	f004 fc62 	bl	80151e6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	3312      	adds	r3, #18
 8010926:	2206      	movs	r2, #6
 8010928:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801092a:	4618      	mov	r0, r3
 801092c:	f004 fc5b 	bl	80151e6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	330e      	adds	r3, #14
 8010934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010936:	6812      	ldr	r2, [r2, #0]
 8010938:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	3318      	adds	r3, #24
 801093e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010940:	6812      	ldr	r2, [r2, #0]
 8010942:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	2200      	movs	r2, #0
 8010948:	701a      	strb	r2, [r3, #0]
 801094a:	2200      	movs	r2, #0
 801094c:	f042 0201 	orr.w	r2, r2, #1
 8010950:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	2200      	movs	r2, #0
 8010956:	f042 0208 	orr.w	r2, r2, #8
 801095a:	709a      	strb	r2, [r3, #2]
 801095c:	2200      	movs	r2, #0
 801095e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	2206      	movs	r2, #6
 8010964:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	2204      	movs	r2, #4
 801096a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801096c:	f640 0306 	movw	r3, #2054	; 0x806
 8010970:	9300      	str	r3, [sp, #0]
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	68ba      	ldr	r2, [r7, #8]
 8010976:	69b9      	ldr	r1, [r7, #24]
 8010978:	68f8      	ldr	r0, [r7, #12]
 801097a:	f001 fc0b 	bl	8012194 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801097e:	69b8      	ldr	r0, [r7, #24]
 8010980:	f7f8 fb04 	bl	8008f8c <pbuf_free>
  p = NULL;
 8010984:	2300      	movs	r3, #0
 8010986:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010988:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801098c:	4618      	mov	r0, r3
 801098e:	3720      	adds	r7, #32
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	08019ac4 	.word	0x08019ac4
 8010998:	08019c14 	.word	0x08019c14
 801099c:	08019b3c 	.word	0x08019b3c
 80109a0:	08019cc4 	.word	0x08019cc4
 80109a4:	08019cf8 	.word	0x08019cf8

080109a8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b088      	sub	sp, #32
 80109ac:	af04      	add	r7, sp, #16
 80109ae:	60f8      	str	r0, [r7, #12]
 80109b0:	60b9      	str	r1, [r7, #8]
 80109b2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80109c4:	2201      	movs	r2, #1
 80109c6:	9203      	str	r2, [sp, #12]
 80109c8:	68ba      	ldr	r2, [r7, #8]
 80109ca:	9202      	str	r2, [sp, #8]
 80109cc:	4a06      	ldr	r2, [pc, #24]	; (80109e8 <etharp_request_dst+0x40>)
 80109ce:	9201      	str	r2, [sp, #4]
 80109d0:	9300      	str	r3, [sp, #0]
 80109d2:	4603      	mov	r3, r0
 80109d4:	687a      	ldr	r2, [r7, #4]
 80109d6:	68f8      	ldr	r0, [r7, #12]
 80109d8:	f7ff ff5a 	bl	8010890 <etharp_raw>
 80109dc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3710      	adds	r7, #16
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	0801aa88 	.word	0x0801aa88

080109ec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
 80109f4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80109f6:	4a05      	ldr	r2, [pc, #20]	; (8010a0c <etharp_request+0x20>)
 80109f8:	6839      	ldr	r1, [r7, #0]
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f7ff ffd4 	bl	80109a8 <etharp_request_dst>
 8010a00:	4603      	mov	r3, r0
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3708      	adds	r7, #8
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	0801aa80 	.word	0x0801aa80

08010a10 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b08e      	sub	sp, #56	; 0x38
 8010a14:	af04      	add	r7, sp, #16
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010a1a:	4b79      	ldr	r3, [pc, #484]	; (8010c00 <icmp_input+0x1f0>)
 8010a1c:	689b      	ldr	r3, [r3, #8]
 8010a1e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a22:	781b      	ldrb	r3, [r3, #0]
 8010a24:	f003 030f 	and.w	r3, r3, #15
 8010a28:	b2db      	uxtb	r3, r3
 8010a2a:	009b      	lsls	r3, r3, #2
 8010a2c:	b2db      	uxtb	r3, r3
 8010a2e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010a30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a32:	2b13      	cmp	r3, #19
 8010a34:	f240 80cd 	bls.w	8010bd2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	895b      	ldrh	r3, [r3, #10]
 8010a3c:	2b03      	cmp	r3, #3
 8010a3e:	f240 80ca 	bls.w	8010bd6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	685b      	ldr	r3, [r3, #4]
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010a4c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	f000 80b7 	beq.w	8010bc4 <icmp_input+0x1b4>
 8010a56:	2b08      	cmp	r3, #8
 8010a58:	f040 80b7 	bne.w	8010bca <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010a5c:	4b69      	ldr	r3, [pc, #420]	; (8010c04 <icmp_input+0x1f4>)
 8010a5e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010a60:	4b67      	ldr	r3, [pc, #412]	; (8010c00 <icmp_input+0x1f0>)
 8010a62:	695b      	ldr	r3, [r3, #20]
 8010a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a68:	2be0      	cmp	r3, #224	; 0xe0
 8010a6a:	f000 80bb 	beq.w	8010be4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010a6e:	4b64      	ldr	r3, [pc, #400]	; (8010c00 <icmp_input+0x1f0>)
 8010a70:	695b      	ldr	r3, [r3, #20]
 8010a72:	4a63      	ldr	r2, [pc, #396]	; (8010c00 <icmp_input+0x1f0>)
 8010a74:	6812      	ldr	r2, [r2, #0]
 8010a76:	4611      	mov	r1, r2
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f000 fbed 	bl	8011258 <ip4_addr_isbroadcast_u32>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	f040 80b1 	bne.w	8010be8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	891b      	ldrh	r3, [r3, #8]
 8010a8a:	2b07      	cmp	r3, #7
 8010a8c:	f240 80a5 	bls.w	8010bda <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010a90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a92:	330e      	adds	r3, #14
 8010a94:	4619      	mov	r1, r3
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	f7f8 f9e2 	bl	8008e60 <pbuf_add_header>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d04b      	beq.n	8010b3a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	891a      	ldrh	r2, [r3, #8]
 8010aa6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010aa8:	4413      	add	r3, r2
 8010aaa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	891b      	ldrh	r3, [r3, #8]
 8010ab0:	8b7a      	ldrh	r2, [r7, #26]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	f0c0 809a 	bcc.w	8010bec <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010ab8:	8b7b      	ldrh	r3, [r7, #26]
 8010aba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010abe:	4619      	mov	r1, r3
 8010ac0:	200e      	movs	r0, #14
 8010ac2:	f7f7 ff7f 	bl	80089c4 <pbuf_alloc>
 8010ac6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	f000 8090 	beq.w	8010bf0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	895b      	ldrh	r3, [r3, #10]
 8010ad4:	461a      	mov	r2, r3
 8010ad6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ad8:	3308      	adds	r3, #8
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d203      	bcs.n	8010ae6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010ade:	6978      	ldr	r0, [r7, #20]
 8010ae0:	f7f8 fa54 	bl	8008f8c <pbuf_free>
          goto icmperr;
 8010ae4:	e085      	b.n	8010bf2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010ae6:	697b      	ldr	r3, [r7, #20]
 8010ae8:	685b      	ldr	r3, [r3, #4]
 8010aea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010aee:	4618      	mov	r0, r3
 8010af0:	f004 fb79 	bl	80151e6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010af4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010af6:	4619      	mov	r1, r3
 8010af8:	6978      	ldr	r0, [r7, #20]
 8010afa:	f7f8 f9c1 	bl	8008e80 <pbuf_remove_header>
 8010afe:	4603      	mov	r3, r0
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d009      	beq.n	8010b18 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010b04:	4b40      	ldr	r3, [pc, #256]	; (8010c08 <icmp_input+0x1f8>)
 8010b06:	22b6      	movs	r2, #182	; 0xb6
 8010b08:	4940      	ldr	r1, [pc, #256]	; (8010c0c <icmp_input+0x1fc>)
 8010b0a:	4841      	ldr	r0, [pc, #260]	; (8010c10 <icmp_input+0x200>)
 8010b0c:	f004 f8f2 	bl	8014cf4 <iprintf>
          pbuf_free(r);
 8010b10:	6978      	ldr	r0, [r7, #20]
 8010b12:	f7f8 fa3b 	bl	8008f8c <pbuf_free>
          goto icmperr;
 8010b16:	e06c      	b.n	8010bf2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010b18:	6879      	ldr	r1, [r7, #4]
 8010b1a:	6978      	ldr	r0, [r7, #20]
 8010b1c:	f7f8 fb5e 	bl	80091dc <pbuf_copy>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d003      	beq.n	8010b2e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010b26:	6978      	ldr	r0, [r7, #20]
 8010b28:	f7f8 fa30 	bl	8008f8c <pbuf_free>
          goto icmperr;
 8010b2c:	e061      	b.n	8010bf2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f7f8 fa2c 	bl	8008f8c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	607b      	str	r3, [r7, #4]
 8010b38:	e00f      	b.n	8010b5a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010b3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b3c:	330e      	adds	r3, #14
 8010b3e:	4619      	mov	r1, r3
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f7f8 f99d 	bl	8008e80 <pbuf_remove_header>
 8010b46:	4603      	mov	r3, r0
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d006      	beq.n	8010b5a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010b4c:	4b2e      	ldr	r3, [pc, #184]	; (8010c08 <icmp_input+0x1f8>)
 8010b4e:	22c7      	movs	r2, #199	; 0xc7
 8010b50:	4930      	ldr	r1, [pc, #192]	; (8010c14 <icmp_input+0x204>)
 8010b52:	482f      	ldr	r0, [pc, #188]	; (8010c10 <icmp_input+0x200>)
 8010b54:	f004 f8ce 	bl	8014cf4 <iprintf>
          goto icmperr;
 8010b58:	e04b      	b.n	8010bf2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010b60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b62:	4619      	mov	r1, r3
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f7f8 f97b 	bl	8008e60 <pbuf_add_header>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d12b      	bne.n	8010bc8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	685b      	ldr	r3, [r3, #4]
 8010b74:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010b76:	69fb      	ldr	r3, [r7, #28]
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010b7e:	4b20      	ldr	r3, [pc, #128]	; (8010c00 <icmp_input+0x1f0>)
 8010b80:	691a      	ldr	r2, [r3, #16]
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	709a      	strb	r2, [r3, #2]
 8010b92:	2200      	movs	r2, #0
 8010b94:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	22ff      	movs	r2, #255	; 0xff
 8010b9a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	729a      	strb	r2, [r3, #10]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	9302      	str	r3, [sp, #8]
 8010baa:	2301      	movs	r3, #1
 8010bac:	9301      	str	r3, [sp, #4]
 8010bae:	2300      	movs	r3, #0
 8010bb0:	9300      	str	r3, [sp, #0]
 8010bb2:	23ff      	movs	r3, #255	; 0xff
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	69f9      	ldr	r1, [r7, #28]
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f000 fa75 	bl	80110a8 <ip4_output_if>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010bc2:	e001      	b.n	8010bc8 <icmp_input+0x1b8>
      break;
 8010bc4:	bf00      	nop
 8010bc6:	e000      	b.n	8010bca <icmp_input+0x1ba>
      break;
 8010bc8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f7f8 f9de 	bl	8008f8c <pbuf_free>
  return;
 8010bd0:	e013      	b.n	8010bfa <icmp_input+0x1ea>
    goto lenerr;
 8010bd2:	bf00      	nop
 8010bd4:	e002      	b.n	8010bdc <icmp_input+0x1cc>
    goto lenerr;
 8010bd6:	bf00      	nop
 8010bd8:	e000      	b.n	8010bdc <icmp_input+0x1cc>
        goto lenerr;
 8010bda:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f7f8 f9d5 	bl	8008f8c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010be2:	e00a      	b.n	8010bfa <icmp_input+0x1ea>
        goto icmperr;
 8010be4:	bf00      	nop
 8010be6:	e004      	b.n	8010bf2 <icmp_input+0x1e2>
        goto icmperr;
 8010be8:	bf00      	nop
 8010bea:	e002      	b.n	8010bf2 <icmp_input+0x1e2>
          goto icmperr;
 8010bec:	bf00      	nop
 8010bee:	e000      	b.n	8010bf2 <icmp_input+0x1e2>
          goto icmperr;
 8010bf0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f7f8 f9ca 	bl	8008f8c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010bf8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010bfa:	3728      	adds	r7, #40	; 0x28
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}
 8010c00:	20005764 	.word	0x20005764
 8010c04:	20005778 	.word	0x20005778
 8010c08:	08019d3c 	.word	0x08019d3c
 8010c0c:	08019d74 	.word	0x08019d74
 8010c10:	08019dac 	.word	0x08019dac
 8010c14:	08019dd4 	.word	0x08019dd4

08010c18 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b082      	sub	sp, #8
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	460b      	mov	r3, r1
 8010c22:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010c24:	78fb      	ldrb	r3, [r7, #3]
 8010c26:	461a      	mov	r2, r3
 8010c28:	2103      	movs	r1, #3
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f000 f814 	bl	8010c58 <icmp_send_response>
}
 8010c30:	bf00      	nop
 8010c32:	3708      	adds	r7, #8
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	460b      	mov	r3, r1
 8010c42:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010c44:	78fb      	ldrb	r3, [r7, #3]
 8010c46:	461a      	mov	r2, r3
 8010c48:	210b      	movs	r1, #11
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f000 f804 	bl	8010c58 <icmp_send_response>
}
 8010c50:	bf00      	nop
 8010c52:	3708      	adds	r7, #8
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b08c      	sub	sp, #48	; 0x30
 8010c5c:	af04      	add	r7, sp, #16
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	460b      	mov	r3, r1
 8010c62:	70fb      	strb	r3, [r7, #3]
 8010c64:	4613      	mov	r3, r2
 8010c66:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010c68:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c6c:	2124      	movs	r1, #36	; 0x24
 8010c6e:	2022      	movs	r0, #34	; 0x22
 8010c70:	f7f7 fea8 	bl	80089c4 <pbuf_alloc>
 8010c74:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010c76:	69fb      	ldr	r3, [r7, #28]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d04c      	beq.n	8010d16 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010c7c:	69fb      	ldr	r3, [r7, #28]
 8010c7e:	895b      	ldrh	r3, [r3, #10]
 8010c80:	2b23      	cmp	r3, #35	; 0x23
 8010c82:	d806      	bhi.n	8010c92 <icmp_send_response+0x3a>
 8010c84:	4b26      	ldr	r3, [pc, #152]	; (8010d20 <icmp_send_response+0xc8>)
 8010c86:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010c8a:	4926      	ldr	r1, [pc, #152]	; (8010d24 <icmp_send_response+0xcc>)
 8010c8c:	4826      	ldr	r0, [pc, #152]	; (8010d28 <icmp_send_response+0xd0>)
 8010c8e:	f004 f831 	bl	8014cf4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010c98:	69fb      	ldr	r3, [r7, #28]
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	78fa      	ldrb	r2, [r7, #3]
 8010ca2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	78ba      	ldrb	r2, [r7, #2]
 8010ca8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	2200      	movs	r2, #0
 8010cae:	711a      	strb	r2, [r3, #4]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	719a      	strb	r2, [r3, #6]
 8010cba:	2200      	movs	r2, #0
 8010cbc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010cbe:	69fb      	ldr	r3, [r7, #28]
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	f103 0008 	add.w	r0, r3, #8
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	221c      	movs	r2, #28
 8010ccc:	4619      	mov	r1, r3
 8010cce:	f004 fa8a 	bl	80151e6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010cd2:	69bb      	ldr	r3, [r7, #24]
 8010cd4:	68db      	ldr	r3, [r3, #12]
 8010cd6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010cd8:	f107 030c 	add.w	r3, r7, #12
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f000 f825 	bl	8010d2c <ip4_route>
 8010ce2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d011      	beq.n	8010d0e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	2200      	movs	r2, #0
 8010cee:	709a      	strb	r2, [r3, #2]
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010cf4:	f107 020c 	add.w	r2, r7, #12
 8010cf8:	693b      	ldr	r3, [r7, #16]
 8010cfa:	9302      	str	r3, [sp, #8]
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	9301      	str	r3, [sp, #4]
 8010d00:	2300      	movs	r3, #0
 8010d02:	9300      	str	r3, [sp, #0]
 8010d04:	23ff      	movs	r3, #255	; 0xff
 8010d06:	2100      	movs	r1, #0
 8010d08:	69f8      	ldr	r0, [r7, #28]
 8010d0a:	f000 f9cd 	bl	80110a8 <ip4_output_if>
  }
  pbuf_free(q);
 8010d0e:	69f8      	ldr	r0, [r7, #28]
 8010d10:	f7f8 f93c 	bl	8008f8c <pbuf_free>
 8010d14:	e000      	b.n	8010d18 <icmp_send_response+0xc0>
    return;
 8010d16:	bf00      	nop
}
 8010d18:	3720      	adds	r7, #32
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	08019d3c 	.word	0x08019d3c
 8010d24:	08019e08 	.word	0x08019e08
 8010d28:	08019dac 	.word	0x08019dac

08010d2c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	b085      	sub	sp, #20
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010d34:	4b33      	ldr	r3, [pc, #204]	; (8010e04 <ip4_route+0xd8>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	60fb      	str	r3, [r7, #12]
 8010d3a:	e036      	b.n	8010daa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d42:	f003 0301 	and.w	r3, r3, #1
 8010d46:	b2db      	uxtb	r3, r3
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d02b      	beq.n	8010da4 <ip4_route+0x78>
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d52:	089b      	lsrs	r3, r3, #2
 8010d54:	f003 0301 	and.w	r3, r3, #1
 8010d58:	b2db      	uxtb	r3, r3
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d022      	beq.n	8010da4 <ip4_route+0x78>
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	3304      	adds	r3, #4
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d01d      	beq.n	8010da4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681a      	ldr	r2, [r3, #0]
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	3304      	adds	r3, #4
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	405a      	eors	r2, r3
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	3308      	adds	r3, #8
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	4013      	ands	r3, r2
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d101      	bne.n	8010d84 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	e038      	b.n	8010df6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d8a:	f003 0302 	and.w	r3, r3, #2
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d108      	bne.n	8010da4 <ip4_route+0x78>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	330c      	adds	r3, #12
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d101      	bne.n	8010da4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	e028      	b.n	8010df6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	60fb      	str	r3, [r7, #12]
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d1c5      	bne.n	8010d3c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010db0:	4b15      	ldr	r3, [pc, #84]	; (8010e08 <ip4_route+0xdc>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d01a      	beq.n	8010dee <ip4_route+0xc2>
 8010db8:	4b13      	ldr	r3, [pc, #76]	; (8010e08 <ip4_route+0xdc>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010dc0:	f003 0301 	and.w	r3, r3, #1
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d012      	beq.n	8010dee <ip4_route+0xc2>
 8010dc8:	4b0f      	ldr	r3, [pc, #60]	; (8010e08 <ip4_route+0xdc>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010dd0:	f003 0304 	and.w	r3, r3, #4
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d00a      	beq.n	8010dee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010dd8:	4b0b      	ldr	r3, [pc, #44]	; (8010e08 <ip4_route+0xdc>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	3304      	adds	r3, #4
 8010dde:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d004      	beq.n	8010dee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	b2db      	uxtb	r3, r3
 8010dea:	2b7f      	cmp	r3, #127	; 0x7f
 8010dec:	d101      	bne.n	8010df2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010dee:	2300      	movs	r3, #0
 8010df0:	e001      	b.n	8010df6 <ip4_route+0xca>
  }

  return netif_default;
 8010df2:	4b05      	ldr	r3, [pc, #20]	; (8010e08 <ip4_route+0xdc>)
 8010df4:	681b      	ldr	r3, [r3, #0]
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3714      	adds	r7, #20
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e00:	4770      	bx	lr
 8010e02:	bf00      	nop
 8010e04:	2000ae58 	.word	0x2000ae58
 8010e08:	2000ae5c 	.word	0x2000ae5c

08010e0c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e1a:	f003 0301 	and.w	r3, r3, #1
 8010e1e:	b2db      	uxtb	r3, r3
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d016      	beq.n	8010e52 <ip4_input_accept+0x46>
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	3304      	adds	r3, #4
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d011      	beq.n	8010e52 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010e2e:	4b0b      	ldr	r3, [pc, #44]	; (8010e5c <ip4_input_accept+0x50>)
 8010e30:	695a      	ldr	r2, [r3, #20]
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	3304      	adds	r3, #4
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d008      	beq.n	8010e4e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010e3c:	4b07      	ldr	r3, [pc, #28]	; (8010e5c <ip4_input_accept+0x50>)
 8010e3e:	695b      	ldr	r3, [r3, #20]
 8010e40:	6879      	ldr	r1, [r7, #4]
 8010e42:	4618      	mov	r0, r3
 8010e44:	f000 fa08 	bl	8011258 <ip4_addr_isbroadcast_u32>
 8010e48:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d001      	beq.n	8010e52 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010e4e:	2301      	movs	r3, #1
 8010e50:	e000      	b.n	8010e54 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010e52:	2300      	movs	r3, #0
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3708      	adds	r7, #8
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}
 8010e5c:	20005764 	.word	0x20005764

08010e60 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b086      	sub	sp, #24
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010e70:	697b      	ldr	r3, [r7, #20]
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	091b      	lsrs	r3, r3, #4
 8010e76:	b2db      	uxtb	r3, r3
 8010e78:	2b04      	cmp	r3, #4
 8010e7a:	d004      	beq.n	8010e86 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f7f8 f885 	bl	8008f8c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010e82:	2300      	movs	r3, #0
 8010e84:	e107      	b.n	8011096 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	f003 030f 	and.w	r3, r3, #15
 8010e8e:	b2db      	uxtb	r3, r3
 8010e90:	009b      	lsls	r3, r3, #2
 8010e92:	b2db      	uxtb	r3, r3
 8010e94:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	885b      	ldrh	r3, [r3, #2]
 8010e9a:	b29b      	uxth	r3, r3
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7f6 fd17 	bl	80078d0 <lwip_htons>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	891b      	ldrh	r3, [r3, #8]
 8010eaa:	89ba      	ldrh	r2, [r7, #12]
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d204      	bcs.n	8010eba <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010eb0:	89bb      	ldrh	r3, [r7, #12]
 8010eb2:	4619      	mov	r1, r3
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f7f7 fee3 	bl	8008c80 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	895b      	ldrh	r3, [r3, #10]
 8010ebe:	89fa      	ldrh	r2, [r7, #14]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d807      	bhi.n	8010ed4 <ip4_input+0x74>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	891b      	ldrh	r3, [r3, #8]
 8010ec8:	89ba      	ldrh	r2, [r7, #12]
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d802      	bhi.n	8010ed4 <ip4_input+0x74>
 8010ece:	89fb      	ldrh	r3, [r7, #14]
 8010ed0:	2b13      	cmp	r3, #19
 8010ed2:	d804      	bhi.n	8010ede <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f7f8 f859 	bl	8008f8c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010eda:	2300      	movs	r3, #0
 8010edc:	e0db      	b.n	8011096 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	691b      	ldr	r3, [r3, #16]
 8010ee2:	4a6f      	ldr	r2, [pc, #444]	; (80110a0 <ip4_input+0x240>)
 8010ee4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	68db      	ldr	r3, [r3, #12]
 8010eea:	4a6d      	ldr	r2, [pc, #436]	; (80110a0 <ip4_input+0x240>)
 8010eec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010eee:	4b6c      	ldr	r3, [pc, #432]	; (80110a0 <ip4_input+0x240>)
 8010ef0:	695b      	ldr	r3, [r3, #20]
 8010ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ef6:	2be0      	cmp	r3, #224	; 0xe0
 8010ef8:	d112      	bne.n	8010f20 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f00:	f003 0301 	and.w	r3, r3, #1
 8010f04:	b2db      	uxtb	r3, r3
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d007      	beq.n	8010f1a <ip4_input+0xba>
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	3304      	adds	r3, #4
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d002      	beq.n	8010f1a <ip4_input+0xba>
      netif = inp;
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	613b      	str	r3, [r7, #16]
 8010f18:	e02a      	b.n	8010f70 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	613b      	str	r3, [r7, #16]
 8010f1e:	e027      	b.n	8010f70 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010f20:	6838      	ldr	r0, [r7, #0]
 8010f22:	f7ff ff73 	bl	8010e0c <ip4_input_accept>
 8010f26:	4603      	mov	r3, r0
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d002      	beq.n	8010f32 <ip4_input+0xd2>
      netif = inp;
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	613b      	str	r3, [r7, #16]
 8010f30:	e01e      	b.n	8010f70 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010f32:	2300      	movs	r3, #0
 8010f34:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010f36:	4b5a      	ldr	r3, [pc, #360]	; (80110a0 <ip4_input+0x240>)
 8010f38:	695b      	ldr	r3, [r3, #20]
 8010f3a:	b2db      	uxtb	r3, r3
 8010f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8010f3e:	d017      	beq.n	8010f70 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010f40:	4b58      	ldr	r3, [pc, #352]	; (80110a4 <ip4_input+0x244>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	613b      	str	r3, [r7, #16]
 8010f46:	e00e      	b.n	8010f66 <ip4_input+0x106>
          if (netif == inp) {
 8010f48:	693a      	ldr	r2, [r7, #16]
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	d006      	beq.n	8010f5e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010f50:	6938      	ldr	r0, [r7, #16]
 8010f52:	f7ff ff5b 	bl	8010e0c <ip4_input_accept>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d108      	bne.n	8010f6e <ip4_input+0x10e>
 8010f5c:	e000      	b.n	8010f60 <ip4_input+0x100>
            continue;
 8010f5e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010f60:	693b      	ldr	r3, [r7, #16]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	613b      	str	r3, [r7, #16]
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d1ed      	bne.n	8010f48 <ip4_input+0xe8>
 8010f6c:	e000      	b.n	8010f70 <ip4_input+0x110>
            break;
 8010f6e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010f70:	4b4b      	ldr	r3, [pc, #300]	; (80110a0 <ip4_input+0x240>)
 8010f72:	691b      	ldr	r3, [r3, #16]
 8010f74:	6839      	ldr	r1, [r7, #0]
 8010f76:	4618      	mov	r0, r3
 8010f78:	f000 f96e 	bl	8011258 <ip4_addr_isbroadcast_u32>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d105      	bne.n	8010f8e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010f82:	4b47      	ldr	r3, [pc, #284]	; (80110a0 <ip4_input+0x240>)
 8010f84:	691b      	ldr	r3, [r3, #16]
 8010f86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010f8a:	2be0      	cmp	r3, #224	; 0xe0
 8010f8c:	d104      	bne.n	8010f98 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f7f7 fffc 	bl	8008f8c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010f94:	2300      	movs	r3, #0
 8010f96:	e07e      	b.n	8011096 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d104      	bne.n	8010fa8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	f7f7 fff4 	bl	8008f8c <pbuf_free>
    return ERR_OK;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	e076      	b.n	8011096 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	88db      	ldrh	r3, [r3, #6]
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	461a      	mov	r2, r3
 8010fb0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010fb4:	4013      	ands	r3, r2
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d00b      	beq.n	8010fd2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f000 fd22 	bl	8011a04 <ip4_reass>
 8010fc0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d101      	bne.n	8010fcc <ip4_input+0x16c>
      return ERR_OK;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	e064      	b.n	8011096 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	685b      	ldr	r3, [r3, #4]
 8010fd0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010fd2:	4a33      	ldr	r2, [pc, #204]	; (80110a0 <ip4_input+0x240>)
 8010fd4:	693b      	ldr	r3, [r7, #16]
 8010fd6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010fd8:	4a31      	ldr	r2, [pc, #196]	; (80110a0 <ip4_input+0x240>)
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010fde:	4a30      	ldr	r2, [pc, #192]	; (80110a0 <ip4_input+0x240>)
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	781b      	ldrb	r3, [r3, #0]
 8010fe8:	f003 030f 	and.w	r3, r3, #15
 8010fec:	b2db      	uxtb	r3, r3
 8010fee:	009b      	lsls	r3, r3, #2
 8010ff0:	b2db      	uxtb	r3, r3
 8010ff2:	b29a      	uxth	r2, r3
 8010ff4:	4b2a      	ldr	r3, [pc, #168]	; (80110a0 <ip4_input+0x240>)
 8010ff6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010ff8:	89fb      	ldrh	r3, [r7, #14]
 8010ffa:	4619      	mov	r1, r3
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f7f7 ff3f 	bl	8008e80 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	7a5b      	ldrb	r3, [r3, #9]
 8011006:	2b11      	cmp	r3, #17
 8011008:	d006      	beq.n	8011018 <ip4_input+0x1b8>
 801100a:	2b11      	cmp	r3, #17
 801100c:	dc13      	bgt.n	8011036 <ip4_input+0x1d6>
 801100e:	2b01      	cmp	r3, #1
 8011010:	d00c      	beq.n	801102c <ip4_input+0x1cc>
 8011012:	2b06      	cmp	r3, #6
 8011014:	d005      	beq.n	8011022 <ip4_input+0x1c2>
 8011016:	e00e      	b.n	8011036 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011018:	6839      	ldr	r1, [r7, #0]
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f7fe fc68 	bl	800f8f0 <udp_input>
        break;
 8011020:	e026      	b.n	8011070 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011022:	6839      	ldr	r1, [r7, #0]
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f7fa f889 	bl	800b13c <tcp_input>
        break;
 801102a:	e021      	b.n	8011070 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801102c:	6839      	ldr	r1, [r7, #0]
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f7ff fcee 	bl	8010a10 <icmp_input>
        break;
 8011034:	e01c      	b.n	8011070 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011036:	4b1a      	ldr	r3, [pc, #104]	; (80110a0 <ip4_input+0x240>)
 8011038:	695b      	ldr	r3, [r3, #20]
 801103a:	6939      	ldr	r1, [r7, #16]
 801103c:	4618      	mov	r0, r3
 801103e:	f000 f90b 	bl	8011258 <ip4_addr_isbroadcast_u32>
 8011042:	4603      	mov	r3, r0
 8011044:	2b00      	cmp	r3, #0
 8011046:	d10f      	bne.n	8011068 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011048:	4b15      	ldr	r3, [pc, #84]	; (80110a0 <ip4_input+0x240>)
 801104a:	695b      	ldr	r3, [r3, #20]
 801104c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011050:	2be0      	cmp	r3, #224	; 0xe0
 8011052:	d009      	beq.n	8011068 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011054:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011058:	4619      	mov	r1, r3
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f7f7 ff83 	bl	8008f66 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011060:	2102      	movs	r1, #2
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f7ff fdd8 	bl	8010c18 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f7f7 ff8f 	bl	8008f8c <pbuf_free>
        break;
 801106e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011070:	4b0b      	ldr	r3, [pc, #44]	; (80110a0 <ip4_input+0x240>)
 8011072:	2200      	movs	r2, #0
 8011074:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011076:	4b0a      	ldr	r3, [pc, #40]	; (80110a0 <ip4_input+0x240>)
 8011078:	2200      	movs	r2, #0
 801107a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801107c:	4b08      	ldr	r3, [pc, #32]	; (80110a0 <ip4_input+0x240>)
 801107e:	2200      	movs	r2, #0
 8011080:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011082:	4b07      	ldr	r3, [pc, #28]	; (80110a0 <ip4_input+0x240>)
 8011084:	2200      	movs	r2, #0
 8011086:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011088:	4b05      	ldr	r3, [pc, #20]	; (80110a0 <ip4_input+0x240>)
 801108a:	2200      	movs	r2, #0
 801108c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801108e:	4b04      	ldr	r3, [pc, #16]	; (80110a0 <ip4_input+0x240>)
 8011090:	2200      	movs	r2, #0
 8011092:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011094:	2300      	movs	r3, #0
}
 8011096:	4618      	mov	r0, r3
 8011098:	3718      	adds	r7, #24
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}
 801109e:	bf00      	nop
 80110a0:	20005764 	.word	0x20005764
 80110a4:	2000ae58 	.word	0x2000ae58

080110a8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b08a      	sub	sp, #40	; 0x28
 80110ac:	af04      	add	r7, sp, #16
 80110ae:	60f8      	str	r0, [r7, #12]
 80110b0:	60b9      	str	r1, [r7, #8]
 80110b2:	607a      	str	r2, [r7, #4]
 80110b4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d009      	beq.n	80110d4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d003      	beq.n	80110ce <ip4_output_if+0x26>
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d102      	bne.n	80110d4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80110ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110d0:	3304      	adds	r3, #4
 80110d2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80110d4:	78fa      	ldrb	r2, [r7, #3]
 80110d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110d8:	9302      	str	r3, [sp, #8]
 80110da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80110de:	9301      	str	r3, [sp, #4]
 80110e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80110e4:	9300      	str	r3, [sp, #0]
 80110e6:	4613      	mov	r3, r2
 80110e8:	687a      	ldr	r2, [r7, #4]
 80110ea:	6979      	ldr	r1, [r7, #20]
 80110ec:	68f8      	ldr	r0, [r7, #12]
 80110ee:	f000 f805 	bl	80110fc <ip4_output_if_src>
 80110f2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3718      	adds	r7, #24
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}

080110fc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b088      	sub	sp, #32
 8011100:	af00      	add	r7, sp, #0
 8011102:	60f8      	str	r0, [r7, #12]
 8011104:	60b9      	str	r1, [r7, #8]
 8011106:	607a      	str	r2, [r7, #4]
 8011108:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	7b9b      	ldrb	r3, [r3, #14]
 801110e:	2b01      	cmp	r3, #1
 8011110:	d006      	beq.n	8011120 <ip4_output_if_src+0x24>
 8011112:	4b4b      	ldr	r3, [pc, #300]	; (8011240 <ip4_output_if_src+0x144>)
 8011114:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011118:	494a      	ldr	r1, [pc, #296]	; (8011244 <ip4_output_if_src+0x148>)
 801111a:	484b      	ldr	r0, [pc, #300]	; (8011248 <ip4_output_if_src+0x14c>)
 801111c:	f003 fdea 	bl	8014cf4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d060      	beq.n	80111e8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011126:	2314      	movs	r3, #20
 8011128:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801112a:	2114      	movs	r1, #20
 801112c:	68f8      	ldr	r0, [r7, #12]
 801112e:	f7f7 fe97 	bl	8008e60 <pbuf_add_header>
 8011132:	4603      	mov	r3, r0
 8011134:	2b00      	cmp	r3, #0
 8011136:	d002      	beq.n	801113e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011138:	f06f 0301 	mvn.w	r3, #1
 801113c:	e07c      	b.n	8011238 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	895b      	ldrh	r3, [r3, #10]
 8011148:	2b13      	cmp	r3, #19
 801114a:	d806      	bhi.n	801115a <ip4_output_if_src+0x5e>
 801114c:	4b3c      	ldr	r3, [pc, #240]	; (8011240 <ip4_output_if_src+0x144>)
 801114e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011152:	493e      	ldr	r1, [pc, #248]	; (801124c <ip4_output_if_src+0x150>)
 8011154:	483c      	ldr	r0, [pc, #240]	; (8011248 <ip4_output_if_src+0x14c>)
 8011156:	f003 fdcd 	bl	8014cf4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801115a:	69fb      	ldr	r3, [r7, #28]
 801115c:	78fa      	ldrb	r2, [r7, #3]
 801115e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011160:	69fb      	ldr	r3, [r7, #28]
 8011162:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011166:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681a      	ldr	r2, [r3, #0]
 801116c:	69fb      	ldr	r3, [r7, #28]
 801116e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011170:	8b7b      	ldrh	r3, [r7, #26]
 8011172:	089b      	lsrs	r3, r3, #2
 8011174:	b29b      	uxth	r3, r3
 8011176:	b2db      	uxtb	r3, r3
 8011178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801117c:	b2da      	uxtb	r2, r3
 801117e:	69fb      	ldr	r3, [r7, #28]
 8011180:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011182:	69fb      	ldr	r3, [r7, #28]
 8011184:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011188:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	891b      	ldrh	r3, [r3, #8]
 801118e:	4618      	mov	r0, r3
 8011190:	f7f6 fb9e 	bl	80078d0 <lwip_htons>
 8011194:	4603      	mov	r3, r0
 8011196:	461a      	mov	r2, r3
 8011198:	69fb      	ldr	r3, [r7, #28]
 801119a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801119c:	69fb      	ldr	r3, [r7, #28]
 801119e:	2200      	movs	r2, #0
 80111a0:	719a      	strb	r2, [r3, #6]
 80111a2:	2200      	movs	r2, #0
 80111a4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80111a6:	4b2a      	ldr	r3, [pc, #168]	; (8011250 <ip4_output_if_src+0x154>)
 80111a8:	881b      	ldrh	r3, [r3, #0]
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7f6 fb90 	bl	80078d0 <lwip_htons>
 80111b0:	4603      	mov	r3, r0
 80111b2:	461a      	mov	r2, r3
 80111b4:	69fb      	ldr	r3, [r7, #28]
 80111b6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80111b8:	4b25      	ldr	r3, [pc, #148]	; (8011250 <ip4_output_if_src+0x154>)
 80111ba:	881b      	ldrh	r3, [r3, #0]
 80111bc:	3301      	adds	r3, #1
 80111be:	b29a      	uxth	r2, r3
 80111c0:	4b23      	ldr	r3, [pc, #140]	; (8011250 <ip4_output_if_src+0x154>)
 80111c2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d104      	bne.n	80111d4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80111ca:	4b22      	ldr	r3, [pc, #136]	; (8011254 <ip4_output_if_src+0x158>)
 80111cc:	681a      	ldr	r2, [r3, #0]
 80111ce:	69fb      	ldr	r3, [r7, #28]
 80111d0:	60da      	str	r2, [r3, #12]
 80111d2:	e003      	b.n	80111dc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	681a      	ldr	r2, [r3, #0]
 80111d8:	69fb      	ldr	r3, [r7, #28]
 80111da:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80111dc:	69fb      	ldr	r3, [r7, #28]
 80111de:	2200      	movs	r2, #0
 80111e0:	729a      	strb	r2, [r3, #10]
 80111e2:	2200      	movs	r2, #0
 80111e4:	72da      	strb	r2, [r3, #11]
 80111e6:	e00f      	b.n	8011208 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	895b      	ldrh	r3, [r3, #10]
 80111ec:	2b13      	cmp	r3, #19
 80111ee:	d802      	bhi.n	80111f6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80111f0:	f06f 0301 	mvn.w	r3, #1
 80111f4:	e020      	b.n	8011238 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	691b      	ldr	r3, [r3, #16]
 8011200:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011202:	f107 0314 	add.w	r3, r7, #20
 8011206:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801120a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801120c:	2b00      	cmp	r3, #0
 801120e:	d00c      	beq.n	801122a <ip4_output_if_src+0x12e>
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	891a      	ldrh	r2, [r3, #8]
 8011214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011216:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011218:	429a      	cmp	r2, r3
 801121a:	d906      	bls.n	801122a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011220:	68f8      	ldr	r0, [r7, #12]
 8011222:	f000 fde3 	bl	8011dec <ip4_frag>
 8011226:	4603      	mov	r3, r0
 8011228:	e006      	b.n	8011238 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801122c:	695b      	ldr	r3, [r3, #20]
 801122e:	687a      	ldr	r2, [r7, #4]
 8011230:	68f9      	ldr	r1, [r7, #12]
 8011232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011234:	4798      	blx	r3
 8011236:	4603      	mov	r3, r0
}
 8011238:	4618      	mov	r0, r3
 801123a:	3720      	adds	r7, #32
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}
 8011240:	08019e34 	.word	0x08019e34
 8011244:	08019e68 	.word	0x08019e68
 8011248:	08019e74 	.word	0x08019e74
 801124c:	08019e9c 	.word	0x08019e9c
 8011250:	200009de 	.word	0x200009de
 8011254:	0801aa7c 	.word	0x0801aa7c

08011258 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011258:	b480      	push	{r7}
 801125a:	b085      	sub	sp, #20
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f1b3 3fff 	cmp.w	r3, #4294967295
 801126c:	d002      	beq.n	8011274 <ip4_addr_isbroadcast_u32+0x1c>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d101      	bne.n	8011278 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011274:	2301      	movs	r3, #1
 8011276:	e02a      	b.n	80112ce <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801127e:	f003 0302 	and.w	r3, r3, #2
 8011282:	2b00      	cmp	r3, #0
 8011284:	d101      	bne.n	801128a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011286:	2300      	movs	r3, #0
 8011288:	e021      	b.n	80112ce <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	3304      	adds	r3, #4
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	429a      	cmp	r2, r3
 8011294:	d101      	bne.n	801129a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011296:	2300      	movs	r3, #0
 8011298:	e019      	b.n	80112ce <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801129a:	68fa      	ldr	r2, [r7, #12]
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	3304      	adds	r3, #4
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	405a      	eors	r2, r3
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	3308      	adds	r3, #8
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	4013      	ands	r3, r2
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d10d      	bne.n	80112cc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	3308      	adds	r3, #8
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	43da      	mvns	r2, r3
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	3308      	adds	r3, #8
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80112c4:	429a      	cmp	r2, r3
 80112c6:	d101      	bne.n	80112cc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80112c8:	2301      	movs	r3, #1
 80112ca:	e000      	b.n	80112ce <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80112cc:	2300      	movs	r3, #0
  }
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3714      	adds	r7, #20
 80112d2:	46bd      	mov	sp, r7
 80112d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d8:	4770      	bx	lr
	...

080112dc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b082      	sub	sp, #8
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80112e4:	2210      	movs	r2, #16
 80112e6:	4904      	ldr	r1, [pc, #16]	; (80112f8 <ip4addr_ntoa+0x1c>)
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f000 f807 	bl	80112fc <ip4addr_ntoa_r>
 80112ee:	4603      	mov	r3, r0
}
 80112f0:	4618      	mov	r0, r3
 80112f2:	3708      	adds	r7, #8
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	200009e0 	.word	0x200009e0

080112fc <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80112fc:	b480      	push	{r7}
 80112fe:	b08d      	sub	sp, #52	; 0x34
 8011300:	af00      	add	r7, sp, #0
 8011302:	60f8      	str	r0, [r7, #12]
 8011304:	60b9      	str	r1, [r7, #8]
 8011306:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8011308:	2300      	movs	r3, #0
 801130a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8011316:	f107 0318 	add.w	r3, r7, #24
 801131a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801131c:	2300      	movs	r3, #0
 801131e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011322:	e058      	b.n	80113d6 <ip4addr_ntoa_r+0xda>
    i = 0;
 8011324:	2300      	movs	r3, #0
 8011326:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801132a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801132c:	781a      	ldrb	r2, [r3, #0]
 801132e:	4b32      	ldr	r3, [pc, #200]	; (80113f8 <ip4addr_ntoa_r+0xfc>)
 8011330:	fba3 1302 	umull	r1, r3, r3, r2
 8011334:	08d9      	lsrs	r1, r3, #3
 8011336:	460b      	mov	r3, r1
 8011338:	009b      	lsls	r3, r3, #2
 801133a:	440b      	add	r3, r1
 801133c:	005b      	lsls	r3, r3, #1
 801133e:	1ad3      	subs	r3, r2, r3
 8011340:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8011342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	4a2c      	ldr	r2, [pc, #176]	; (80113f8 <ip4addr_ntoa_r+0xfc>)
 8011348:	fba2 2303 	umull	r2, r3, r2, r3
 801134c:	08db      	lsrs	r3, r3, #3
 801134e:	b2da      	uxtb	r2, r3
 8011350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011352:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8011354:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011358:	1c5a      	adds	r2, r3, #1
 801135a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801135e:	4619      	mov	r1, r3
 8011360:	7ffb      	ldrb	r3, [r7, #31]
 8011362:	3330      	adds	r3, #48	; 0x30
 8011364:	b2da      	uxtb	r2, r3
 8011366:	f101 0330 	add.w	r3, r1, #48	; 0x30
 801136a:	443b      	add	r3, r7
 801136c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8011370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d1d8      	bne.n	801132a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8011378:	e011      	b.n	801139e <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801137a:	6a3b      	ldr	r3, [r7, #32]
 801137c:	1c5a      	adds	r2, r3, #1
 801137e:	623a      	str	r2, [r7, #32]
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	429a      	cmp	r2, r3
 8011384:	dc01      	bgt.n	801138a <ip4addr_ntoa_r+0x8e>
        return NULL;
 8011386:	2300      	movs	r3, #0
 8011388:	e030      	b.n	80113ec <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801138a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011390:	1c59      	adds	r1, r3, #1
 8011392:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011394:	3230      	adds	r2, #48	; 0x30
 8011396:	443a      	add	r2, r7
 8011398:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801139c:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801139e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80113a2:	1e5a      	subs	r2, r3, #1
 80113a4:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d1e6      	bne.n	801137a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80113ac:	6a3b      	ldr	r3, [r7, #32]
 80113ae:	1c5a      	adds	r2, r3, #1
 80113b0:	623a      	str	r2, [r7, #32]
 80113b2:	687a      	ldr	r2, [r7, #4]
 80113b4:	429a      	cmp	r2, r3
 80113b6:	dc01      	bgt.n	80113bc <ip4addr_ntoa_r+0xc0>
      return NULL;
 80113b8:	2300      	movs	r3, #0
 80113ba:	e017      	b.n	80113ec <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80113bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113be:	1c5a      	adds	r2, r3, #1
 80113c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80113c2:	222e      	movs	r2, #46	; 0x2e
 80113c4:	701a      	strb	r2, [r3, #0]
    ap++;
 80113c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c8:	3301      	adds	r3, #1
 80113ca:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80113cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113d0:	3301      	adds	r3, #1
 80113d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80113d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113da:	2b03      	cmp	r3, #3
 80113dc:	d9a2      	bls.n	8011324 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80113de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e0:	3b01      	subs	r3, #1
 80113e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e6:	2200      	movs	r2, #0
 80113e8:	701a      	strb	r2, [r3, #0]
  return buf;
 80113ea:	68bb      	ldr	r3, [r7, #8]
}
 80113ec:	4618      	mov	r0, r3
 80113ee:	3734      	adds	r7, #52	; 0x34
 80113f0:	46bd      	mov	sp, r7
 80113f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f6:	4770      	bx	lr
 80113f8:	cccccccd 	.word	0xcccccccd

080113fc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b084      	sub	sp, #16
 8011400:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011402:	2300      	movs	r3, #0
 8011404:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011406:	4b12      	ldr	r3, [pc, #72]	; (8011450 <ip_reass_tmr+0x54>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801140c:	e018      	b.n	8011440 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	7fdb      	ldrb	r3, [r3, #31]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d00b      	beq.n	801142e <ip_reass_tmr+0x32>
      r->timer--;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	7fdb      	ldrb	r3, [r3, #31]
 801141a:	3b01      	subs	r3, #1
 801141c:	b2da      	uxtb	r2, r3
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	60fb      	str	r3, [r7, #12]
 801142c:	e008      	b.n	8011440 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011438:	68b9      	ldr	r1, [r7, #8]
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f000 f80a 	bl	8011454 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d1e3      	bne.n	801140e <ip_reass_tmr+0x12>
    }
  }
}
 8011446:	bf00      	nop
 8011448:	bf00      	nop
 801144a:	3710      	adds	r7, #16
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	200009f0 	.word	0x200009f0

08011454 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b088      	sub	sp, #32
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
 801145c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801145e:	2300      	movs	r3, #0
 8011460:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011462:	683a      	ldr	r2, [r7, #0]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	429a      	cmp	r2, r3
 8011468:	d105      	bne.n	8011476 <ip_reass_free_complete_datagram+0x22>
 801146a:	4b45      	ldr	r3, [pc, #276]	; (8011580 <ip_reass_free_complete_datagram+0x12c>)
 801146c:	22ab      	movs	r2, #171	; 0xab
 801146e:	4945      	ldr	r1, [pc, #276]	; (8011584 <ip_reass_free_complete_datagram+0x130>)
 8011470:	4845      	ldr	r0, [pc, #276]	; (8011588 <ip_reass_free_complete_datagram+0x134>)
 8011472:	f003 fc3f 	bl	8014cf4 <iprintf>
  if (prev != NULL) {
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d00a      	beq.n	8011492 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	687a      	ldr	r2, [r7, #4]
 8011482:	429a      	cmp	r2, r3
 8011484:	d005      	beq.n	8011492 <ip_reass_free_complete_datagram+0x3e>
 8011486:	4b3e      	ldr	r3, [pc, #248]	; (8011580 <ip_reass_free_complete_datagram+0x12c>)
 8011488:	22ad      	movs	r2, #173	; 0xad
 801148a:	4940      	ldr	r1, [pc, #256]	; (801158c <ip_reass_free_complete_datagram+0x138>)
 801148c:	483e      	ldr	r0, [pc, #248]	; (8011588 <ip_reass_free_complete_datagram+0x134>)
 801148e:	f003 fc31 	bl	8014cf4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	889b      	ldrh	r3, [r3, #4]
 801149e:	b29b      	uxth	r3, r3
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d12a      	bne.n	80114fa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	681a      	ldr	r2, [r3, #0]
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80114b2:	69bb      	ldr	r3, [r7, #24]
 80114b4:	6858      	ldr	r0, [r3, #4]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	3308      	adds	r3, #8
 80114ba:	2214      	movs	r2, #20
 80114bc:	4619      	mov	r1, r3
 80114be:	f003 fe92 	bl	80151e6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80114c2:	2101      	movs	r1, #1
 80114c4:	69b8      	ldr	r0, [r7, #24]
 80114c6:	f7ff fbb7 	bl	8010c38 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80114ca:	69b8      	ldr	r0, [r7, #24]
 80114cc:	f7f7 fde6 	bl	800909c <pbuf_clen>
 80114d0:	4603      	mov	r3, r0
 80114d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80114d4:	8bfa      	ldrh	r2, [r7, #30]
 80114d6:	8a7b      	ldrh	r3, [r7, #18]
 80114d8:	4413      	add	r3, r2
 80114da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80114de:	db05      	blt.n	80114ec <ip_reass_free_complete_datagram+0x98>
 80114e0:	4b27      	ldr	r3, [pc, #156]	; (8011580 <ip_reass_free_complete_datagram+0x12c>)
 80114e2:	22bc      	movs	r2, #188	; 0xbc
 80114e4:	492a      	ldr	r1, [pc, #168]	; (8011590 <ip_reass_free_complete_datagram+0x13c>)
 80114e6:	4828      	ldr	r0, [pc, #160]	; (8011588 <ip_reass_free_complete_datagram+0x134>)
 80114e8:	f003 fc04 	bl	8014cf4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80114ec:	8bfa      	ldrh	r2, [r7, #30]
 80114ee:	8a7b      	ldrh	r3, [r7, #18]
 80114f0:	4413      	add	r3, r2
 80114f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80114f4:	69b8      	ldr	r0, [r7, #24]
 80114f6:	f7f7 fd49 	bl	8008f8c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011500:	e01f      	b.n	8011542 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	685b      	ldr	r3, [r3, #4]
 8011506:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011508:	69bb      	ldr	r3, [r7, #24]
 801150a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011512:	68f8      	ldr	r0, [r7, #12]
 8011514:	f7f7 fdc2 	bl	800909c <pbuf_clen>
 8011518:	4603      	mov	r3, r0
 801151a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801151c:	8bfa      	ldrh	r2, [r7, #30]
 801151e:	8a7b      	ldrh	r3, [r7, #18]
 8011520:	4413      	add	r3, r2
 8011522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011526:	db05      	blt.n	8011534 <ip_reass_free_complete_datagram+0xe0>
 8011528:	4b15      	ldr	r3, [pc, #84]	; (8011580 <ip_reass_free_complete_datagram+0x12c>)
 801152a:	22cc      	movs	r2, #204	; 0xcc
 801152c:	4918      	ldr	r1, [pc, #96]	; (8011590 <ip_reass_free_complete_datagram+0x13c>)
 801152e:	4816      	ldr	r0, [pc, #88]	; (8011588 <ip_reass_free_complete_datagram+0x134>)
 8011530:	f003 fbe0 	bl	8014cf4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011534:	8bfa      	ldrh	r2, [r7, #30]
 8011536:	8a7b      	ldrh	r3, [r7, #18]
 8011538:	4413      	add	r3, r2
 801153a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801153c:	68f8      	ldr	r0, [r7, #12]
 801153e:	f7f7 fd25 	bl	8008f8c <pbuf_free>
  while (p != NULL) {
 8011542:	69bb      	ldr	r3, [r7, #24]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d1dc      	bne.n	8011502 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011548:	6839      	ldr	r1, [r7, #0]
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f000 f8c2 	bl	80116d4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011550:	4b10      	ldr	r3, [pc, #64]	; (8011594 <ip_reass_free_complete_datagram+0x140>)
 8011552:	881b      	ldrh	r3, [r3, #0]
 8011554:	8bfa      	ldrh	r2, [r7, #30]
 8011556:	429a      	cmp	r2, r3
 8011558:	d905      	bls.n	8011566 <ip_reass_free_complete_datagram+0x112>
 801155a:	4b09      	ldr	r3, [pc, #36]	; (8011580 <ip_reass_free_complete_datagram+0x12c>)
 801155c:	22d2      	movs	r2, #210	; 0xd2
 801155e:	490e      	ldr	r1, [pc, #56]	; (8011598 <ip_reass_free_complete_datagram+0x144>)
 8011560:	4809      	ldr	r0, [pc, #36]	; (8011588 <ip_reass_free_complete_datagram+0x134>)
 8011562:	f003 fbc7 	bl	8014cf4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011566:	4b0b      	ldr	r3, [pc, #44]	; (8011594 <ip_reass_free_complete_datagram+0x140>)
 8011568:	881a      	ldrh	r2, [r3, #0]
 801156a:	8bfb      	ldrh	r3, [r7, #30]
 801156c:	1ad3      	subs	r3, r2, r3
 801156e:	b29a      	uxth	r2, r3
 8011570:	4b08      	ldr	r3, [pc, #32]	; (8011594 <ip_reass_free_complete_datagram+0x140>)
 8011572:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011574:	8bfb      	ldrh	r3, [r7, #30]
}
 8011576:	4618      	mov	r0, r3
 8011578:	3720      	adds	r7, #32
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	08019ecc 	.word	0x08019ecc
 8011584:	08019f08 	.word	0x08019f08
 8011588:	08019f14 	.word	0x08019f14
 801158c:	08019f3c 	.word	0x08019f3c
 8011590:	08019f50 	.word	0x08019f50
 8011594:	200009f4 	.word	0x200009f4
 8011598:	08019f70 	.word	0x08019f70

0801159c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b08a      	sub	sp, #40	; 0x28
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
 80115a4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80115a6:	2300      	movs	r3, #0
 80115a8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80115aa:	2300      	movs	r3, #0
 80115ac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80115ae:	2300      	movs	r3, #0
 80115b0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80115b2:	2300      	movs	r3, #0
 80115b4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80115b6:	2300      	movs	r3, #0
 80115b8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80115ba:	4b28      	ldr	r3, [pc, #160]	; (801165c <ip_reass_remove_oldest_datagram+0xc0>)
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80115c0:	e030      	b.n	8011624 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80115c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c4:	695a      	ldr	r2, [r3, #20]
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	68db      	ldr	r3, [r3, #12]
 80115ca:	429a      	cmp	r2, r3
 80115cc:	d10c      	bne.n	80115e8 <ip_reass_remove_oldest_datagram+0x4c>
 80115ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d0:	699a      	ldr	r2, [r3, #24]
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	691b      	ldr	r3, [r3, #16]
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d106      	bne.n	80115e8 <ip_reass_remove_oldest_datagram+0x4c>
 80115da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115dc:	899a      	ldrh	r2, [r3, #12]
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	889b      	ldrh	r3, [r3, #4]
 80115e2:	b29b      	uxth	r3, r3
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d014      	beq.n	8011612 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	3301      	adds	r3, #1
 80115ec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80115ee:	6a3b      	ldr	r3, [r7, #32]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d104      	bne.n	80115fe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80115f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80115f8:	69fb      	ldr	r3, [r7, #28]
 80115fa:	61bb      	str	r3, [r7, #24]
 80115fc:	e009      	b.n	8011612 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80115fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011600:	7fda      	ldrb	r2, [r3, #31]
 8011602:	6a3b      	ldr	r3, [r7, #32]
 8011604:	7fdb      	ldrb	r3, [r3, #31]
 8011606:	429a      	cmp	r2, r3
 8011608:	d803      	bhi.n	8011612 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801160c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801160e:	69fb      	ldr	r3, [r7, #28]
 8011610:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d001      	beq.n	801161e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801161c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011626:	2b00      	cmp	r3, #0
 8011628:	d1cb      	bne.n	80115c2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801162a:	6a3b      	ldr	r3, [r7, #32]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d008      	beq.n	8011642 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011630:	69b9      	ldr	r1, [r7, #24]
 8011632:	6a38      	ldr	r0, [r7, #32]
 8011634:	f7ff ff0e 	bl	8011454 <ip_reass_free_complete_datagram>
 8011638:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801163a:	697a      	ldr	r2, [r7, #20]
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	4413      	add	r3, r2
 8011640:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011642:	697a      	ldr	r2, [r7, #20]
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	429a      	cmp	r2, r3
 8011648:	da02      	bge.n	8011650 <ip_reass_remove_oldest_datagram+0xb4>
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	2b01      	cmp	r3, #1
 801164e:	dcac      	bgt.n	80115aa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011650:	697b      	ldr	r3, [r7, #20]
}
 8011652:	4618      	mov	r0, r3
 8011654:	3728      	adds	r7, #40	; 0x28
 8011656:	46bd      	mov	sp, r7
 8011658:	bd80      	pop	{r7, pc}
 801165a:	bf00      	nop
 801165c:	200009f0 	.word	0x200009f0

08011660 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b084      	sub	sp, #16
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
 8011668:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801166a:	2004      	movs	r0, #4
 801166c:	f7f6 fda8 	bl	80081c0 <memp_malloc>
 8011670:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d110      	bne.n	801169a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011678:	6839      	ldr	r1, [r7, #0]
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f7ff ff8e 	bl	801159c <ip_reass_remove_oldest_datagram>
 8011680:	4602      	mov	r2, r0
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	4293      	cmp	r3, r2
 8011686:	dc03      	bgt.n	8011690 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011688:	2004      	movs	r0, #4
 801168a:	f7f6 fd99 	bl	80081c0 <memp_malloc>
 801168e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d101      	bne.n	801169a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011696:	2300      	movs	r3, #0
 8011698:	e016      	b.n	80116c8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801169a:	2220      	movs	r2, #32
 801169c:	2100      	movs	r1, #0
 801169e:	68f8      	ldr	r0, [r7, #12]
 80116a0:	f003 fc7e 	bl	8014fa0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	220f      	movs	r2, #15
 80116a8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80116aa:	4b09      	ldr	r3, [pc, #36]	; (80116d0 <ip_reass_enqueue_new_datagram+0x70>)
 80116ac:	681a      	ldr	r2, [r3, #0]
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80116b2:	4a07      	ldr	r2, [pc, #28]	; (80116d0 <ip_reass_enqueue_new_datagram+0x70>)
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	3308      	adds	r3, #8
 80116bc:	2214      	movs	r2, #20
 80116be:	6879      	ldr	r1, [r7, #4]
 80116c0:	4618      	mov	r0, r3
 80116c2:	f003 fd90 	bl	80151e6 <memcpy>
  return ipr;
 80116c6:	68fb      	ldr	r3, [r7, #12]
}
 80116c8:	4618      	mov	r0, r3
 80116ca:	3710      	adds	r7, #16
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}
 80116d0:	200009f0 	.word	0x200009f0

080116d4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b082      	sub	sp, #8
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80116de:	4b10      	ldr	r3, [pc, #64]	; (8011720 <ip_reass_dequeue_datagram+0x4c>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d104      	bne.n	80116f2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	4a0c      	ldr	r2, [pc, #48]	; (8011720 <ip_reass_dequeue_datagram+0x4c>)
 80116ee:	6013      	str	r3, [r2, #0]
 80116f0:	e00d      	b.n	801170e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d106      	bne.n	8011706 <ip_reass_dequeue_datagram+0x32>
 80116f8:	4b0a      	ldr	r3, [pc, #40]	; (8011724 <ip_reass_dequeue_datagram+0x50>)
 80116fa:	f240 1245 	movw	r2, #325	; 0x145
 80116fe:	490a      	ldr	r1, [pc, #40]	; (8011728 <ip_reass_dequeue_datagram+0x54>)
 8011700:	480a      	ldr	r0, [pc, #40]	; (801172c <ip_reass_dequeue_datagram+0x58>)
 8011702:	f003 faf7 	bl	8014cf4 <iprintf>
    prev->next = ipr->next;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681a      	ldr	r2, [r3, #0]
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801170e:	6879      	ldr	r1, [r7, #4]
 8011710:	2004      	movs	r0, #4
 8011712:	f7f6 fdc5 	bl	80082a0 <memp_free>
}
 8011716:	bf00      	nop
 8011718:	3708      	adds	r7, #8
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}
 801171e:	bf00      	nop
 8011720:	200009f0 	.word	0x200009f0
 8011724:	08019ecc 	.word	0x08019ecc
 8011728:	08019f94 	.word	0x08019f94
 801172c:	08019f14 	.word	0x08019f14

08011730 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b08c      	sub	sp, #48	; 0x30
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801173c:	2300      	movs	r3, #0
 801173e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011740:	2301      	movs	r3, #1
 8011742:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	685b      	ldr	r3, [r3, #4]
 8011748:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801174a:	69fb      	ldr	r3, [r7, #28]
 801174c:	885b      	ldrh	r3, [r3, #2]
 801174e:	b29b      	uxth	r3, r3
 8011750:	4618      	mov	r0, r3
 8011752:	f7f6 f8bd 	bl	80078d0 <lwip_htons>
 8011756:	4603      	mov	r3, r0
 8011758:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801175a:	69fb      	ldr	r3, [r7, #28]
 801175c:	781b      	ldrb	r3, [r3, #0]
 801175e:	f003 030f 	and.w	r3, r3, #15
 8011762:	b2db      	uxtb	r3, r3
 8011764:	009b      	lsls	r3, r3, #2
 8011766:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011768:	7e7b      	ldrb	r3, [r7, #25]
 801176a:	b29b      	uxth	r3, r3
 801176c:	8b7a      	ldrh	r2, [r7, #26]
 801176e:	429a      	cmp	r2, r3
 8011770:	d202      	bcs.n	8011778 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011772:	f04f 33ff 	mov.w	r3, #4294967295
 8011776:	e135      	b.n	80119e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011778:	7e7b      	ldrb	r3, [r7, #25]
 801177a:	b29b      	uxth	r3, r3
 801177c:	8b7a      	ldrh	r2, [r7, #26]
 801177e:	1ad3      	subs	r3, r2, r3
 8011780:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011782:	69fb      	ldr	r3, [r7, #28]
 8011784:	88db      	ldrh	r3, [r3, #6]
 8011786:	b29b      	uxth	r3, r3
 8011788:	4618      	mov	r0, r3
 801178a:	f7f6 f8a1 	bl	80078d0 <lwip_htons>
 801178e:	4603      	mov	r3, r0
 8011790:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011794:	b29b      	uxth	r3, r3
 8011796:	00db      	lsls	r3, r3, #3
 8011798:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80117a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a2:	2200      	movs	r2, #0
 80117a4:	701a      	strb	r2, [r3, #0]
 80117a6:	2200      	movs	r2, #0
 80117a8:	705a      	strb	r2, [r3, #1]
 80117aa:	2200      	movs	r2, #0
 80117ac:	709a      	strb	r2, [r3, #2]
 80117ae:	2200      	movs	r2, #0
 80117b0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80117b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b4:	8afa      	ldrh	r2, [r7, #22]
 80117b6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80117b8:	8afa      	ldrh	r2, [r7, #22]
 80117ba:	8b7b      	ldrh	r3, [r7, #26]
 80117bc:	4413      	add	r3, r2
 80117be:	b29a      	uxth	r2, r3
 80117c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80117c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c6:	88db      	ldrh	r3, [r3, #6]
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	8afa      	ldrh	r2, [r7, #22]
 80117cc:	429a      	cmp	r2, r3
 80117ce:	d902      	bls.n	80117d6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80117d0:	f04f 33ff 	mov.w	r3, #4294967295
 80117d4:	e106      	b.n	80119e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	685b      	ldr	r3, [r3, #4]
 80117da:	627b      	str	r3, [r7, #36]	; 0x24
 80117dc:	e068      	b.n	80118b0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80117de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e0:	685b      	ldr	r3, [r3, #4]
 80117e2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80117e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117e6:	889b      	ldrh	r3, [r3, #4]
 80117e8:	b29a      	uxth	r2, r3
 80117ea:	693b      	ldr	r3, [r7, #16]
 80117ec:	889b      	ldrh	r3, [r3, #4]
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d235      	bcs.n	8011860 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80117f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80117fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d020      	beq.n	8011842 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011802:	889b      	ldrh	r3, [r3, #4]
 8011804:	b29a      	uxth	r2, r3
 8011806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011808:	88db      	ldrh	r3, [r3, #6]
 801180a:	b29b      	uxth	r3, r3
 801180c:	429a      	cmp	r2, r3
 801180e:	d307      	bcc.n	8011820 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011812:	88db      	ldrh	r3, [r3, #6]
 8011814:	b29a      	uxth	r2, r3
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	889b      	ldrh	r3, [r3, #4]
 801181a:	b29b      	uxth	r3, r3
 801181c:	429a      	cmp	r2, r3
 801181e:	d902      	bls.n	8011826 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011820:	f04f 33ff 	mov.w	r3, #4294967295
 8011824:	e0de      	b.n	80119e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011828:	68ba      	ldr	r2, [r7, #8]
 801182a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801182c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801182e:	88db      	ldrh	r3, [r3, #6]
 8011830:	b29a      	uxth	r2, r3
 8011832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011834:	889b      	ldrh	r3, [r3, #4]
 8011836:	b29b      	uxth	r3, r3
 8011838:	429a      	cmp	r2, r3
 801183a:	d03d      	beq.n	80118b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801183c:	2300      	movs	r3, #0
 801183e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011840:	e03a      	b.n	80118b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011844:	88db      	ldrh	r3, [r3, #6]
 8011846:	b29a      	uxth	r2, r3
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	889b      	ldrh	r3, [r3, #4]
 801184c:	b29b      	uxth	r3, r3
 801184e:	429a      	cmp	r2, r3
 8011850:	d902      	bls.n	8011858 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011852:	f04f 33ff 	mov.w	r3, #4294967295
 8011856:	e0c5      	b.n	80119e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	68ba      	ldr	r2, [r7, #8]
 801185c:	605a      	str	r2, [r3, #4]
      break;
 801185e:	e02b      	b.n	80118b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011862:	889b      	ldrh	r3, [r3, #4]
 8011864:	b29a      	uxth	r2, r3
 8011866:	693b      	ldr	r3, [r7, #16]
 8011868:	889b      	ldrh	r3, [r3, #4]
 801186a:	b29b      	uxth	r3, r3
 801186c:	429a      	cmp	r2, r3
 801186e:	d102      	bne.n	8011876 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011870:	f04f 33ff 	mov.w	r3, #4294967295
 8011874:	e0b6      	b.n	80119e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011878:	889b      	ldrh	r3, [r3, #4]
 801187a:	b29a      	uxth	r2, r3
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	88db      	ldrh	r3, [r3, #6]
 8011880:	b29b      	uxth	r3, r3
 8011882:	429a      	cmp	r2, r3
 8011884:	d202      	bcs.n	801188c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011886:	f04f 33ff 	mov.w	r3, #4294967295
 801188a:	e0ab      	b.n	80119e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801188c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801188e:	2b00      	cmp	r3, #0
 8011890:	d009      	beq.n	80118a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011894:	88db      	ldrh	r3, [r3, #6]
 8011896:	b29a      	uxth	r2, r3
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	889b      	ldrh	r3, [r3, #4]
 801189c:	b29b      	uxth	r3, r3
 801189e:	429a      	cmp	r2, r3
 80118a0:	d001      	beq.n	80118a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80118a2:	2300      	movs	r3, #0
 80118a4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80118a6:	693b      	ldr	r3, [r7, #16]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80118b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d193      	bne.n	80117de <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80118b6:	e000      	b.n	80118ba <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80118b8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80118ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d12d      	bne.n	801191c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80118c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d01c      	beq.n	8011900 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80118c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118c8:	88db      	ldrh	r3, [r3, #6]
 80118ca:	b29a      	uxth	r2, r3
 80118cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ce:	889b      	ldrh	r3, [r3, #4]
 80118d0:	b29b      	uxth	r3, r3
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d906      	bls.n	80118e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80118d6:	4b45      	ldr	r3, [pc, #276]	; (80119ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80118d8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80118dc:	4944      	ldr	r1, [pc, #272]	; (80119f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80118de:	4845      	ldr	r0, [pc, #276]	; (80119f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80118e0:	f003 fa08 	bl	8014cf4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80118e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e6:	68ba      	ldr	r2, [r7, #8]
 80118e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80118ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ec:	88db      	ldrh	r3, [r3, #6]
 80118ee:	b29a      	uxth	r2, r3
 80118f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f2:	889b      	ldrh	r3, [r3, #4]
 80118f4:	b29b      	uxth	r3, r3
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d010      	beq.n	801191c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80118fa:	2300      	movs	r3, #0
 80118fc:	623b      	str	r3, [r7, #32]
 80118fe:	e00d      	b.n	801191c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	685b      	ldr	r3, [r3, #4]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d006      	beq.n	8011916 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011908:	4b38      	ldr	r3, [pc, #224]	; (80119ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801190a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801190e:	493a      	ldr	r1, [pc, #232]	; (80119f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011910:	4838      	ldr	r0, [pc, #224]	; (80119f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011912:	f003 f9ef 	bl	8014cf4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	68ba      	ldr	r2, [r7, #8]
 801191a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d105      	bne.n	801192e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	7f9b      	ldrb	r3, [r3, #30]
 8011926:	f003 0301 	and.w	r3, r3, #1
 801192a:	2b00      	cmp	r3, #0
 801192c:	d059      	beq.n	80119e2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801192e:	6a3b      	ldr	r3, [r7, #32]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d04f      	beq.n	80119d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d006      	beq.n	801194a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	685b      	ldr	r3, [r3, #4]
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	889b      	ldrh	r3, [r3, #4]
 8011944:	b29b      	uxth	r3, r3
 8011946:	2b00      	cmp	r3, #0
 8011948:	d002      	beq.n	8011950 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801194a:	2300      	movs	r3, #0
 801194c:	623b      	str	r3, [r7, #32]
 801194e:	e041      	b.n	80119d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011952:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801195a:	e012      	b.n	8011982 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801195e:	685b      	ldr	r3, [r3, #4]
 8011960:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011964:	88db      	ldrh	r3, [r3, #6]
 8011966:	b29a      	uxth	r2, r3
 8011968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196a:	889b      	ldrh	r3, [r3, #4]
 801196c:	b29b      	uxth	r3, r3
 801196e:	429a      	cmp	r2, r3
 8011970:	d002      	beq.n	8011978 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011972:	2300      	movs	r3, #0
 8011974:	623b      	str	r3, [r7, #32]
            break;
 8011976:	e007      	b.n	8011988 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801197a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011984:	2b00      	cmp	r3, #0
 8011986:	d1e9      	bne.n	801195c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011988:	6a3b      	ldr	r3, [r7, #32]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d022      	beq.n	80119d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	685b      	ldr	r3, [r3, #4]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d106      	bne.n	80119a4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011996:	4b15      	ldr	r3, [pc, #84]	; (80119ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011998:	f240 12df 	movw	r2, #479	; 0x1df
 801199c:	4917      	ldr	r1, [pc, #92]	; (80119fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801199e:	4815      	ldr	r0, [pc, #84]	; (80119f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80119a0:	f003 f9a8 	bl	8014cf4 <iprintf>
          LWIP_ASSERT("sanity check",
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	685b      	ldr	r3, [r3, #4]
 80119a8:	685b      	ldr	r3, [r3, #4]
 80119aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d106      	bne.n	80119be <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80119b0:	4b0e      	ldr	r3, [pc, #56]	; (80119ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80119b2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80119b6:	4911      	ldr	r1, [pc, #68]	; (80119fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80119b8:	480e      	ldr	r0, [pc, #56]	; (80119f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80119ba:	f003 f99b 	bl	8014cf4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80119be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d006      	beq.n	80119d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80119c6:	4b09      	ldr	r3, [pc, #36]	; (80119ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80119c8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80119cc:	490c      	ldr	r1, [pc, #48]	; (8011a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80119ce:	4809      	ldr	r0, [pc, #36]	; (80119f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80119d0:	f003 f990 	bl	8014cf4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80119d4:	6a3b      	ldr	r3, [r7, #32]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	bf14      	ite	ne
 80119da:	2301      	movne	r3, #1
 80119dc:	2300      	moveq	r3, #0
 80119de:	b2db      	uxtb	r3, r3
 80119e0:	e000      	b.n	80119e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80119e2:	2300      	movs	r3, #0
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	3730      	adds	r7, #48	; 0x30
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bd80      	pop	{r7, pc}
 80119ec:	08019ecc 	.word	0x08019ecc
 80119f0:	08019fb0 	.word	0x08019fb0
 80119f4:	08019f14 	.word	0x08019f14
 80119f8:	08019fd0 	.word	0x08019fd0
 80119fc:	0801a008 	.word	0x0801a008
 8011a00:	0801a018 	.word	0x0801a018

08011a04 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b08e      	sub	sp, #56	; 0x38
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	685b      	ldr	r3, [r3, #4]
 8011a10:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	f003 030f 	and.w	r3, r3, #15
 8011a1a:	b2db      	uxtb	r3, r3
 8011a1c:	009b      	lsls	r3, r3, #2
 8011a1e:	b2db      	uxtb	r3, r3
 8011a20:	2b14      	cmp	r3, #20
 8011a22:	f040 8171 	bne.w	8011d08 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a28:	88db      	ldrh	r3, [r3, #6]
 8011a2a:	b29b      	uxth	r3, r3
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7f5 ff4f 	bl	80078d0 <lwip_htons>
 8011a32:	4603      	mov	r3, r0
 8011a34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	00db      	lsls	r3, r3, #3
 8011a3c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a40:	885b      	ldrh	r3, [r3, #2]
 8011a42:	b29b      	uxth	r3, r3
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7f5 ff43 	bl	80078d0 <lwip_htons>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a50:	781b      	ldrb	r3, [r3, #0]
 8011a52:	f003 030f 	and.w	r3, r3, #15
 8011a56:	b2db      	uxtb	r3, r3
 8011a58:	009b      	lsls	r3, r3, #2
 8011a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8011a5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011a62:	b29b      	uxth	r3, r3
 8011a64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011a66:	429a      	cmp	r2, r3
 8011a68:	f0c0 8150 	bcc.w	8011d0c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011a74:	1ad3      	subs	r3, r2, r3
 8011a76:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011a78:	6878      	ldr	r0, [r7, #4]
 8011a7a:	f7f7 fb0f 	bl	800909c <pbuf_clen>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011a82:	4b8c      	ldr	r3, [pc, #560]	; (8011cb4 <ip4_reass+0x2b0>)
 8011a84:	881b      	ldrh	r3, [r3, #0]
 8011a86:	461a      	mov	r2, r3
 8011a88:	8c3b      	ldrh	r3, [r7, #32]
 8011a8a:	4413      	add	r3, r2
 8011a8c:	2b0a      	cmp	r3, #10
 8011a8e:	dd10      	ble.n	8011ab2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011a90:	8c3b      	ldrh	r3, [r7, #32]
 8011a92:	4619      	mov	r1, r3
 8011a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a96:	f7ff fd81 	bl	801159c <ip_reass_remove_oldest_datagram>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	f000 8137 	beq.w	8011d10 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011aa2:	4b84      	ldr	r3, [pc, #528]	; (8011cb4 <ip4_reass+0x2b0>)
 8011aa4:	881b      	ldrh	r3, [r3, #0]
 8011aa6:	461a      	mov	r2, r3
 8011aa8:	8c3b      	ldrh	r3, [r7, #32]
 8011aaa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011aac:	2b0a      	cmp	r3, #10
 8011aae:	f300 812f 	bgt.w	8011d10 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011ab2:	4b81      	ldr	r3, [pc, #516]	; (8011cb8 <ip4_reass+0x2b4>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8011ab8:	e015      	b.n	8011ae6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011abc:	695a      	ldr	r2, [r3, #20]
 8011abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac0:	68db      	ldr	r3, [r3, #12]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d10c      	bne.n	8011ae0 <ip4_reass+0xdc>
 8011ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac8:	699a      	ldr	r2, [r3, #24]
 8011aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011acc:	691b      	ldr	r3, [r3, #16]
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d106      	bne.n	8011ae0 <ip4_reass+0xdc>
 8011ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad4:	899a      	ldrh	r2, [r3, #12]
 8011ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ad8:	889b      	ldrh	r3, [r3, #4]
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d006      	beq.n	8011aee <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8011ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d1e6      	bne.n	8011aba <ip4_reass+0xb6>
 8011aec:	e000      	b.n	8011af0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011aee:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d109      	bne.n	8011b0a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011af6:	8c3b      	ldrh	r3, [r7, #32]
 8011af8:	4619      	mov	r1, r3
 8011afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011afc:	f7ff fdb0 	bl	8011660 <ip_reass_enqueue_new_datagram>
 8011b00:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d11c      	bne.n	8011b42 <ip4_reass+0x13e>
      goto nullreturn;
 8011b08:	e105      	b.n	8011d16 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b0c:	88db      	ldrh	r3, [r3, #6]
 8011b0e:	b29b      	uxth	r3, r3
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7f5 fedd 	bl	80078d0 <lwip_htons>
 8011b16:	4603      	mov	r3, r0
 8011b18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d110      	bne.n	8011b42 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b22:	89db      	ldrh	r3, [r3, #14]
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7f5 fed3 	bl	80078d0 <lwip_htons>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d006      	beq.n	8011b42 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b36:	3308      	adds	r3, #8
 8011b38:	2214      	movs	r2, #20
 8011b3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f003 fb52 	bl	80151e6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b44:	88db      	ldrh	r3, [r3, #6]
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	f003 0320 	and.w	r3, r3, #32
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	bf0c      	ite	eq
 8011b50:	2301      	moveq	r3, #1
 8011b52:	2300      	movne	r3, #0
 8011b54:	b2db      	uxtb	r3, r3
 8011b56:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011b58:	69fb      	ldr	r3, [r7, #28]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d00e      	beq.n	8011b7c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011b5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b62:	4413      	add	r3, r2
 8011b64:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011b66:	8b7a      	ldrh	r2, [r7, #26]
 8011b68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	f0c0 80a0 	bcc.w	8011cb0 <ip4_reass+0x2ac>
 8011b70:	8b7b      	ldrh	r3, [r7, #26]
 8011b72:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011b76:	4293      	cmp	r3, r2
 8011b78:	f200 809a 	bhi.w	8011cb0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011b7c:	69fa      	ldr	r2, [r7, #28]
 8011b7e:	6879      	ldr	r1, [r7, #4]
 8011b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b82:	f7ff fdd5 	bl	8011730 <ip_reass_chain_frag_into_datagram_and_validate>
 8011b86:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b8e:	f000 809b 	beq.w	8011cc8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011b92:	4b48      	ldr	r3, [pc, #288]	; (8011cb4 <ip4_reass+0x2b0>)
 8011b94:	881a      	ldrh	r2, [r3, #0]
 8011b96:	8c3b      	ldrh	r3, [r7, #32]
 8011b98:	4413      	add	r3, r2
 8011b9a:	b29a      	uxth	r2, r3
 8011b9c:	4b45      	ldr	r3, [pc, #276]	; (8011cb4 <ip4_reass+0x2b0>)
 8011b9e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011ba0:	69fb      	ldr	r3, [r7, #28]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d00d      	beq.n	8011bc2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011ba6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011ba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011baa:	4413      	add	r3, r2
 8011bac:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb0:	8a7a      	ldrh	r2, [r7, #18]
 8011bb2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb6:	7f9b      	ldrb	r3, [r3, #30]
 8011bb8:	f043 0301 	orr.w	r3, r3, #1
 8011bbc:	b2da      	uxtb	r2, r3
 8011bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011bc2:	697b      	ldr	r3, [r7, #20]
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	d171      	bne.n	8011cac <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bca:	8b9b      	ldrh	r3, [r3, #28]
 8011bcc:	3314      	adds	r3, #20
 8011bce:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd2:	685b      	ldr	r3, [r3, #4]
 8011bd4:	685b      	ldr	r3, [r3, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	685b      	ldr	r3, [r3, #4]
 8011be0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be4:	3308      	adds	r3, #8
 8011be6:	2214      	movs	r2, #20
 8011be8:	4619      	mov	r1, r3
 8011bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011bec:	f003 fafb 	bl	80151e6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011bf0:	8a3b      	ldrh	r3, [r7, #16]
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7f5 fe6c 	bl	80078d0 <lwip_htons>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	461a      	mov	r2, r3
 8011bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bfe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c02:	2200      	movs	r2, #0
 8011c04:	719a      	strb	r2, [r3, #6]
 8011c06:	2200      	movs	r2, #0
 8011c08:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	729a      	strb	r2, [r3, #10]
 8011c10:	2200      	movs	r2, #0
 8011c12:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c16:	685b      	ldr	r3, [r3, #4]
 8011c18:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011c1a:	e00d      	b.n	8011c38 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c1e:	685b      	ldr	r3, [r3, #4]
 8011c20:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011c22:	2114      	movs	r1, #20
 8011c24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011c26:	f7f7 f92b 	bl	8008e80 <pbuf_remove_header>
      pbuf_cat(p, r);
 8011c2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f7f7 fa6f 	bl	8009110 <pbuf_cat>
      r = iprh->next_pbuf;
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d1ee      	bne.n	8011c1c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011c3e:	4b1e      	ldr	r3, [pc, #120]	; (8011cb8 <ip4_reass+0x2b4>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d102      	bne.n	8011c4e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c4c:	e010      	b.n	8011c70 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011c4e:	4b1a      	ldr	r3, [pc, #104]	; (8011cb8 <ip4_reass+0x2b4>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c54:	e007      	b.n	8011c66 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	d006      	beq.n	8011c6e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d1f4      	bne.n	8011c56 <ip4_reass+0x252>
 8011c6c:	e000      	b.n	8011c70 <ip4_reass+0x26c>
          break;
 8011c6e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011c70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c74:	f7ff fd2e 	bl	80116d4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f7f7 fa0f 	bl	800909c <pbuf_clen>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011c82:	4b0c      	ldr	r3, [pc, #48]	; (8011cb4 <ip4_reass+0x2b0>)
 8011c84:	881b      	ldrh	r3, [r3, #0]
 8011c86:	8c3a      	ldrh	r2, [r7, #32]
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	d906      	bls.n	8011c9a <ip4_reass+0x296>
 8011c8c:	4b0b      	ldr	r3, [pc, #44]	; (8011cbc <ip4_reass+0x2b8>)
 8011c8e:	f240 229b 	movw	r2, #667	; 0x29b
 8011c92:	490b      	ldr	r1, [pc, #44]	; (8011cc0 <ip4_reass+0x2bc>)
 8011c94:	480b      	ldr	r0, [pc, #44]	; (8011cc4 <ip4_reass+0x2c0>)
 8011c96:	f003 f82d 	bl	8014cf4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011c9a:	4b06      	ldr	r3, [pc, #24]	; (8011cb4 <ip4_reass+0x2b0>)
 8011c9c:	881a      	ldrh	r2, [r3, #0]
 8011c9e:	8c3b      	ldrh	r3, [r7, #32]
 8011ca0:	1ad3      	subs	r3, r2, r3
 8011ca2:	b29a      	uxth	r2, r3
 8011ca4:	4b03      	ldr	r3, [pc, #12]	; (8011cb4 <ip4_reass+0x2b0>)
 8011ca6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	e038      	b.n	8011d1e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011cac:	2300      	movs	r3, #0
 8011cae:	e036      	b.n	8011d1e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8011cb0:	bf00      	nop
 8011cb2:	e00a      	b.n	8011cca <ip4_reass+0x2c6>
 8011cb4:	200009f4 	.word	0x200009f4
 8011cb8:	200009f0 	.word	0x200009f0
 8011cbc:	08019ecc 	.word	0x08019ecc
 8011cc0:	0801a03c 	.word	0x0801a03c
 8011cc4:	08019f14 	.word	0x08019f14
    goto nullreturn_ipr;
 8011cc8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d106      	bne.n	8011cde <ip4_reass+0x2da>
 8011cd0:	4b15      	ldr	r3, [pc, #84]	; (8011d28 <ip4_reass+0x324>)
 8011cd2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011cd6:	4915      	ldr	r1, [pc, #84]	; (8011d2c <ip4_reass+0x328>)
 8011cd8:	4815      	ldr	r0, [pc, #84]	; (8011d30 <ip4_reass+0x32c>)
 8011cda:	f003 f80b 	bl	8014cf4 <iprintf>
  if (ipr->p == NULL) {
 8011cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d116      	bne.n	8011d14 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011ce6:	4b13      	ldr	r3, [pc, #76]	; (8011d34 <ip4_reass+0x330>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011cec:	429a      	cmp	r2, r3
 8011cee:	d006      	beq.n	8011cfe <ip4_reass+0x2fa>
 8011cf0:	4b0d      	ldr	r3, [pc, #52]	; (8011d28 <ip4_reass+0x324>)
 8011cf2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011cf6:	4910      	ldr	r1, [pc, #64]	; (8011d38 <ip4_reass+0x334>)
 8011cf8:	480d      	ldr	r0, [pc, #52]	; (8011d30 <ip4_reass+0x32c>)
 8011cfa:	f002 fffb 	bl	8014cf4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011cfe:	2100      	movs	r1, #0
 8011d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d02:	f7ff fce7 	bl	80116d4 <ip_reass_dequeue_datagram>
 8011d06:	e006      	b.n	8011d16 <ip4_reass+0x312>
    goto nullreturn;
 8011d08:	bf00      	nop
 8011d0a:	e004      	b.n	8011d16 <ip4_reass+0x312>
    goto nullreturn;
 8011d0c:	bf00      	nop
 8011d0e:	e002      	b.n	8011d16 <ip4_reass+0x312>
      goto nullreturn;
 8011d10:	bf00      	nop
 8011d12:	e000      	b.n	8011d16 <ip4_reass+0x312>
  }

nullreturn:
 8011d14:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f7f7 f938 	bl	8008f8c <pbuf_free>
  return NULL;
 8011d1c:	2300      	movs	r3, #0
}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	3738      	adds	r7, #56	; 0x38
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}
 8011d26:	bf00      	nop
 8011d28:	08019ecc 	.word	0x08019ecc
 8011d2c:	0801a058 	.word	0x0801a058
 8011d30:	08019f14 	.word	0x08019f14
 8011d34:	200009f0 	.word	0x200009f0
 8011d38:	0801a064 	.word	0x0801a064

08011d3c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011d40:	2005      	movs	r0, #5
 8011d42:	f7f6 fa3d 	bl	80081c0 <memp_malloc>
 8011d46:	4603      	mov	r3, r0
}
 8011d48:	4618      	mov	r0, r3
 8011d4a:	bd80      	pop	{r7, pc}

08011d4c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b082      	sub	sp, #8
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d106      	bne.n	8011d68 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011d5a:	4b07      	ldr	r3, [pc, #28]	; (8011d78 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011d5c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8011d60:	4906      	ldr	r1, [pc, #24]	; (8011d7c <ip_frag_free_pbuf_custom_ref+0x30>)
 8011d62:	4807      	ldr	r0, [pc, #28]	; (8011d80 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011d64:	f002 ffc6 	bl	8014cf4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011d68:	6879      	ldr	r1, [r7, #4]
 8011d6a:	2005      	movs	r0, #5
 8011d6c:	f7f6 fa98 	bl	80082a0 <memp_free>
}
 8011d70:	bf00      	nop
 8011d72:	3708      	adds	r7, #8
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}
 8011d78:	08019ecc 	.word	0x08019ecc
 8011d7c:	0801a084 	.word	0x0801a084
 8011d80:	08019f14 	.word	0x08019f14

08011d84 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b084      	sub	sp, #16
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d106      	bne.n	8011da4 <ipfrag_free_pbuf_custom+0x20>
 8011d96:	4b11      	ldr	r3, [pc, #68]	; (8011ddc <ipfrag_free_pbuf_custom+0x58>)
 8011d98:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011d9c:	4910      	ldr	r1, [pc, #64]	; (8011de0 <ipfrag_free_pbuf_custom+0x5c>)
 8011d9e:	4811      	ldr	r0, [pc, #68]	; (8011de4 <ipfrag_free_pbuf_custom+0x60>)
 8011da0:	f002 ffa8 	bl	8014cf4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011da4:	68fa      	ldr	r2, [r7, #12]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d006      	beq.n	8011dba <ipfrag_free_pbuf_custom+0x36>
 8011dac:	4b0b      	ldr	r3, [pc, #44]	; (8011ddc <ipfrag_free_pbuf_custom+0x58>)
 8011dae:	f240 22cf 	movw	r2, #719	; 0x2cf
 8011db2:	490d      	ldr	r1, [pc, #52]	; (8011de8 <ipfrag_free_pbuf_custom+0x64>)
 8011db4:	480b      	ldr	r0, [pc, #44]	; (8011de4 <ipfrag_free_pbuf_custom+0x60>)
 8011db6:	f002 ff9d 	bl	8014cf4 <iprintf>
  if (pcr->original != NULL) {
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	695b      	ldr	r3, [r3, #20]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d004      	beq.n	8011dcc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	695b      	ldr	r3, [r3, #20]
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7f7 f8e0 	bl	8008f8c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011dcc:	68f8      	ldr	r0, [r7, #12]
 8011dce:	f7ff ffbd 	bl	8011d4c <ip_frag_free_pbuf_custom_ref>
}
 8011dd2:	bf00      	nop
 8011dd4:	3710      	adds	r7, #16
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	08019ecc 	.word	0x08019ecc
 8011de0:	0801a090 	.word	0x0801a090
 8011de4:	08019f14 	.word	0x08019f14
 8011de8:	0801a09c 	.word	0x0801a09c

08011dec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b094      	sub	sp, #80	; 0x50
 8011df0:	af02      	add	r7, sp, #8
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011dfe:	68bb      	ldr	r3, [r7, #8]
 8011e00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011e02:	3b14      	subs	r3, #20
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	da00      	bge.n	8011e0a <ip4_frag+0x1e>
 8011e08:	3307      	adds	r3, #7
 8011e0a:	10db      	asrs	r3, r3, #3
 8011e0c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011e0e:	2314      	movs	r3, #20
 8011e10:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	685b      	ldr	r3, [r3, #4]
 8011e16:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e1a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	f003 030f 	and.w	r3, r3, #15
 8011e24:	b2db      	uxtb	r3, r3
 8011e26:	009b      	lsls	r3, r3, #2
 8011e28:	b2db      	uxtb	r3, r3
 8011e2a:	2b14      	cmp	r3, #20
 8011e2c:	d002      	beq.n	8011e34 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011e2e:	f06f 0305 	mvn.w	r3, #5
 8011e32:	e110      	b.n	8012056 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	895b      	ldrh	r3, [r3, #10]
 8011e38:	2b13      	cmp	r3, #19
 8011e3a:	d809      	bhi.n	8011e50 <ip4_frag+0x64>
 8011e3c:	4b88      	ldr	r3, [pc, #544]	; (8012060 <ip4_frag+0x274>)
 8011e3e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011e42:	4988      	ldr	r1, [pc, #544]	; (8012064 <ip4_frag+0x278>)
 8011e44:	4888      	ldr	r0, [pc, #544]	; (8012068 <ip4_frag+0x27c>)
 8011e46:	f002 ff55 	bl	8014cf4 <iprintf>
 8011e4a:	f06f 0305 	mvn.w	r3, #5
 8011e4e:	e102      	b.n	8012056 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e52:	88db      	ldrh	r3, [r3, #6]
 8011e54:	b29b      	uxth	r3, r3
 8011e56:	4618      	mov	r0, r3
 8011e58:	f7f5 fd3a 	bl	80078d0 <lwip_htons>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011e60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011e62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011e66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011e6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011e70:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	891b      	ldrh	r3, [r3, #8]
 8011e76:	3b14      	subs	r3, #20
 8011e78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011e7c:	e0e1      	b.n	8012042 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011e7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e80:	00db      	lsls	r3, r3, #3
 8011e82:	b29b      	uxth	r3, r3
 8011e84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e88:	4293      	cmp	r3, r2
 8011e8a:	bf28      	it	cs
 8011e8c:	4613      	movcs	r3, r2
 8011e8e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011e90:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011e94:	2114      	movs	r1, #20
 8011e96:	200e      	movs	r0, #14
 8011e98:	f7f6 fd94 	bl	80089c4 <pbuf_alloc>
 8011e9c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8011e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	f000 80d5 	beq.w	8012050 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea8:	895b      	ldrh	r3, [r3, #10]
 8011eaa:	2b13      	cmp	r3, #19
 8011eac:	d806      	bhi.n	8011ebc <ip4_frag+0xd0>
 8011eae:	4b6c      	ldr	r3, [pc, #432]	; (8012060 <ip4_frag+0x274>)
 8011eb0:	f44f 7249 	mov.w	r2, #804	; 0x324
 8011eb4:	496d      	ldr	r1, [pc, #436]	; (801206c <ip4_frag+0x280>)
 8011eb6:	486c      	ldr	r0, [pc, #432]	; (8012068 <ip4_frag+0x27c>)
 8011eb8:	f002 ff1c 	bl	8014cf4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ebe:	685b      	ldr	r3, [r3, #4]
 8011ec0:	2214      	movs	r2, #20
 8011ec2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f003 f98e 	bl	80151e6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ecc:	685b      	ldr	r3, [r3, #4]
 8011ece:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011ed0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011ed2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011ed6:	e064      	b.n	8011fa2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	895a      	ldrh	r2, [r3, #10]
 8011edc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011ede:	1ad3      	subs	r3, r2, r3
 8011ee0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	895b      	ldrh	r3, [r3, #10]
 8011ee6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d906      	bls.n	8011efa <ip4_frag+0x10e>
 8011eec:	4b5c      	ldr	r3, [pc, #368]	; (8012060 <ip4_frag+0x274>)
 8011eee:	f240 322d 	movw	r2, #813	; 0x32d
 8011ef2:	495f      	ldr	r1, [pc, #380]	; (8012070 <ip4_frag+0x284>)
 8011ef4:	485c      	ldr	r0, [pc, #368]	; (8012068 <ip4_frag+0x27c>)
 8011ef6:	f002 fefd 	bl	8014cf4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011efa:	8bfa      	ldrh	r2, [r7, #30]
 8011efc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011f00:	4293      	cmp	r3, r2
 8011f02:	bf28      	it	cs
 8011f04:	4613      	movcs	r3, r2
 8011f06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011f0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d105      	bne.n	8011f1e <ip4_frag+0x132>
        poff = 0;
 8011f12:	2300      	movs	r3, #0
 8011f14:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	60fb      	str	r3, [r7, #12]
        continue;
 8011f1c:	e041      	b.n	8011fa2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011f1e:	f7ff ff0d 	bl	8011d3c <ip_frag_alloc_pbuf_custom_ref>
 8011f22:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011f24:	69bb      	ldr	r3, [r7, #24]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d103      	bne.n	8011f32 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011f2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f2c:	f7f7 f82e 	bl	8008f8c <pbuf_free>
        goto memerr;
 8011f30:	e08f      	b.n	8012052 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011f32:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011f38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011f3a:	4413      	add	r3, r2
 8011f3c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011f40:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011f44:	9201      	str	r2, [sp, #4]
 8011f46:	9300      	str	r3, [sp, #0]
 8011f48:	4603      	mov	r3, r0
 8011f4a:	2241      	movs	r2, #65	; 0x41
 8011f4c:	2000      	movs	r0, #0
 8011f4e:	f7f6 fe63 	bl	8008c18 <pbuf_alloced_custom>
 8011f52:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011f54:	697b      	ldr	r3, [r7, #20]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d106      	bne.n	8011f68 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011f5a:	69b8      	ldr	r0, [r7, #24]
 8011f5c:	f7ff fef6 	bl	8011d4c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f62:	f7f7 f813 	bl	8008f8c <pbuf_free>
        goto memerr;
 8011f66:	e074      	b.n	8012052 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011f68:	68f8      	ldr	r0, [r7, #12]
 8011f6a:	f7f7 f8af 	bl	80090cc <pbuf_ref>
      pcr->original = p;
 8011f6e:	69bb      	ldr	r3, [r7, #24]
 8011f70:	68fa      	ldr	r2, [r7, #12]
 8011f72:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011f74:	69bb      	ldr	r3, [r7, #24]
 8011f76:	4a3f      	ldr	r2, [pc, #252]	; (8012074 <ip4_frag+0x288>)
 8011f78:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011f7a:	6979      	ldr	r1, [r7, #20]
 8011f7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f7e:	f7f7 f8c7 	bl	8009110 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011f82:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011f86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011f8a:	1ad3      	subs	r3, r2, r3
 8011f8c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011f90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d004      	beq.n	8011fa2 <ip4_frag+0x1b6>
        poff = 0;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011fa2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d196      	bne.n	8011ed8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011faa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011fac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011fb0:	4413      	add	r3, r2
 8011fb2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011fb8:	f1a3 0213 	sub.w	r2, r3, #19
 8011fbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	bfcc      	ite	gt
 8011fc4:	2301      	movgt	r3, #1
 8011fc6:	2300      	movle	r3, #0
 8011fc8:	b2db      	uxtb	r3, r3
 8011fca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011fcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011fd4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011fd6:	6a3b      	ldr	r3, [r7, #32]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d002      	beq.n	8011fe2 <ip4_frag+0x1f6>
 8011fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d003      	beq.n	8011fea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011fe2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011fe4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011fe8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011fea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011fec:	4618      	mov	r0, r3
 8011fee:	f7f5 fc6f 	bl	80078d0 <lwip_htons>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	461a      	mov	r2, r3
 8011ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011ffa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011ffc:	3314      	adds	r3, #20
 8011ffe:	b29b      	uxth	r3, r3
 8012000:	4618      	mov	r0, r3
 8012002:	f7f5 fc65 	bl	80078d0 <lwip_htons>
 8012006:	4603      	mov	r3, r0
 8012008:	461a      	mov	r2, r3
 801200a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801200c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012010:	2200      	movs	r2, #0
 8012012:	729a      	strb	r2, [r3, #10]
 8012014:	2200      	movs	r2, #0
 8012016:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	695b      	ldr	r3, [r3, #20]
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012020:	68b8      	ldr	r0, [r7, #8]
 8012022:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012026:	f7f6 ffb1 	bl	8008f8c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801202a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801202e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012030:	1ad3      	subs	r3, r2, r3
 8012032:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012036:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801203a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801203c:	4413      	add	r3, r2
 801203e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8012042:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012046:	2b00      	cmp	r3, #0
 8012048:	f47f af19 	bne.w	8011e7e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801204c:	2300      	movs	r3, #0
 801204e:	e002      	b.n	8012056 <ip4_frag+0x26a>
      goto memerr;
 8012050:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012056:	4618      	mov	r0, r3
 8012058:	3748      	adds	r7, #72	; 0x48
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}
 801205e:	bf00      	nop
 8012060:	08019ecc 	.word	0x08019ecc
 8012064:	0801a0a8 	.word	0x0801a0a8
 8012068:	08019f14 	.word	0x08019f14
 801206c:	0801a0c4 	.word	0x0801a0c4
 8012070:	0801a0e4 	.word	0x0801a0e4
 8012074:	08011d85 	.word	0x08011d85

08012078 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b086      	sub	sp, #24
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012082:	230e      	movs	r3, #14
 8012084:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	895b      	ldrh	r3, [r3, #10]
 801208a:	2b0e      	cmp	r3, #14
 801208c:	d96e      	bls.n	801216c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	7bdb      	ldrb	r3, [r3, #15]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d106      	bne.n	80120a4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801209c:	3301      	adds	r3, #1
 801209e:	b2da      	uxtb	r2, r3
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	685b      	ldr	r3, [r3, #4]
 80120a8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	7b1a      	ldrb	r2, [r3, #12]
 80120ae:	7b5b      	ldrb	r3, [r3, #13]
 80120b0:	021b      	lsls	r3, r3, #8
 80120b2:	4313      	orrs	r3, r2
 80120b4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80120b6:	693b      	ldr	r3, [r7, #16]
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	f003 0301 	and.w	r3, r3, #1
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d023      	beq.n	801210a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	2b01      	cmp	r3, #1
 80120c8:	d10f      	bne.n	80120ea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	785b      	ldrb	r3, [r3, #1]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d11b      	bne.n	801210a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80120d6:	2b5e      	cmp	r3, #94	; 0x5e
 80120d8:	d117      	bne.n	801210a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	7b5b      	ldrb	r3, [r3, #13]
 80120de:	f043 0310 	orr.w	r3, r3, #16
 80120e2:	b2da      	uxtb	r2, r3
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	735a      	strb	r2, [r3, #13]
 80120e8:	e00f      	b.n	801210a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	2206      	movs	r2, #6
 80120ee:	4928      	ldr	r1, [pc, #160]	; (8012190 <ethernet_input+0x118>)
 80120f0:	4618      	mov	r0, r3
 80120f2:	f002 ff45 	bl	8014f80 <memcmp>
 80120f6:	4603      	mov	r3, r0
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d106      	bne.n	801210a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	7b5b      	ldrb	r3, [r3, #13]
 8012100:	f043 0308 	orr.w	r3, r3, #8
 8012104:	b2da      	uxtb	r2, r3
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801210a:	89fb      	ldrh	r3, [r7, #14]
 801210c:	2b08      	cmp	r3, #8
 801210e:	d003      	beq.n	8012118 <ethernet_input+0xa0>
 8012110:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012114:	d014      	beq.n	8012140 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012116:	e032      	b.n	801217e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801211e:	f003 0308 	and.w	r3, r3, #8
 8012122:	2b00      	cmp	r3, #0
 8012124:	d024      	beq.n	8012170 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012126:	8afb      	ldrh	r3, [r7, #22]
 8012128:	4619      	mov	r1, r3
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f7f6 fea8 	bl	8008e80 <pbuf_remove_header>
 8012130:	4603      	mov	r3, r0
 8012132:	2b00      	cmp	r3, #0
 8012134:	d11e      	bne.n	8012174 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012136:	6839      	ldr	r1, [r7, #0]
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f7fe fe91 	bl	8010e60 <ip4_input>
      break;
 801213e:	e013      	b.n	8012168 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012146:	f003 0308 	and.w	r3, r3, #8
 801214a:	2b00      	cmp	r3, #0
 801214c:	d014      	beq.n	8012178 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801214e:	8afb      	ldrh	r3, [r7, #22]
 8012150:	4619      	mov	r1, r3
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f7f6 fe94 	bl	8008e80 <pbuf_remove_header>
 8012158:	4603      	mov	r3, r0
 801215a:	2b00      	cmp	r3, #0
 801215c:	d10e      	bne.n	801217c <ethernet_input+0x104>
        etharp_input(p, netif);
 801215e:	6839      	ldr	r1, [r7, #0]
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f7fe f831 	bl	80101c8 <etharp_input>
      break;
 8012166:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012168:	2300      	movs	r3, #0
 801216a:	e00c      	b.n	8012186 <ethernet_input+0x10e>
    goto free_and_return;
 801216c:	bf00      	nop
 801216e:	e006      	b.n	801217e <ethernet_input+0x106>
        goto free_and_return;
 8012170:	bf00      	nop
 8012172:	e004      	b.n	801217e <ethernet_input+0x106>
        goto free_and_return;
 8012174:	bf00      	nop
 8012176:	e002      	b.n	801217e <ethernet_input+0x106>
        goto free_and_return;
 8012178:	bf00      	nop
 801217a:	e000      	b.n	801217e <ethernet_input+0x106>
        goto free_and_return;
 801217c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f7f6 ff04 	bl	8008f8c <pbuf_free>
  return ERR_OK;
 8012184:	2300      	movs	r3, #0
}
 8012186:	4618      	mov	r0, r3
 8012188:	3718      	adds	r7, #24
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}
 801218e:	bf00      	nop
 8012190:	0801aa80 	.word	0x0801aa80

08012194 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012194:	b580      	push	{r7, lr}
 8012196:	b086      	sub	sp, #24
 8012198:	af00      	add	r7, sp, #0
 801219a:	60f8      	str	r0, [r7, #12]
 801219c:	60b9      	str	r1, [r7, #8]
 801219e:	607a      	str	r2, [r7, #4]
 80121a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80121a2:	8c3b      	ldrh	r3, [r7, #32]
 80121a4:	4618      	mov	r0, r3
 80121a6:	f7f5 fb93 	bl	80078d0 <lwip_htons>
 80121aa:	4603      	mov	r3, r0
 80121ac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80121ae:	210e      	movs	r1, #14
 80121b0:	68b8      	ldr	r0, [r7, #8]
 80121b2:	f7f6 fe55 	bl	8008e60 <pbuf_add_header>
 80121b6:	4603      	mov	r3, r0
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d125      	bne.n	8012208 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80121bc:	68bb      	ldr	r3, [r7, #8]
 80121be:	685b      	ldr	r3, [r3, #4]
 80121c0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80121c2:	693b      	ldr	r3, [r7, #16]
 80121c4:	8afa      	ldrh	r2, [r7, #22]
 80121c6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80121c8:	693b      	ldr	r3, [r7, #16]
 80121ca:	2206      	movs	r2, #6
 80121cc:	6839      	ldr	r1, [r7, #0]
 80121ce:	4618      	mov	r0, r3
 80121d0:	f003 f809 	bl	80151e6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80121d4:	693b      	ldr	r3, [r7, #16]
 80121d6:	3306      	adds	r3, #6
 80121d8:	2206      	movs	r2, #6
 80121da:	6879      	ldr	r1, [r7, #4]
 80121dc:	4618      	mov	r0, r3
 80121de:	f003 f802 	bl	80151e6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80121e8:	2b06      	cmp	r3, #6
 80121ea:	d006      	beq.n	80121fa <ethernet_output+0x66>
 80121ec:	4b0a      	ldr	r3, [pc, #40]	; (8012218 <ethernet_output+0x84>)
 80121ee:	f44f 7299 	mov.w	r2, #306	; 0x132
 80121f2:	490a      	ldr	r1, [pc, #40]	; (801221c <ethernet_output+0x88>)
 80121f4:	480a      	ldr	r0, [pc, #40]	; (8012220 <ethernet_output+0x8c>)
 80121f6:	f002 fd7d 	bl	8014cf4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	699b      	ldr	r3, [r3, #24]
 80121fe:	68b9      	ldr	r1, [r7, #8]
 8012200:	68f8      	ldr	r0, [r7, #12]
 8012202:	4798      	blx	r3
 8012204:	4603      	mov	r3, r0
 8012206:	e002      	b.n	801220e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012208:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801220a:	f06f 0301 	mvn.w	r3, #1
}
 801220e:	4618      	mov	r0, r3
 8012210:	3718      	adds	r7, #24
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}
 8012216:	bf00      	nop
 8012218:	0801a0f4 	.word	0x0801a0f4
 801221c:	0801a12c 	.word	0x0801a12c
 8012220:	0801a160 	.word	0x0801a160
 8012224:	00000000 	.word	0x00000000

08012228 <sin>:
 8012228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801222a:	ec53 2b10 	vmov	r2, r3, d0
 801222e:	4828      	ldr	r0, [pc, #160]	; (80122d0 <sin+0xa8>)
 8012230:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012234:	4281      	cmp	r1, r0
 8012236:	dc07      	bgt.n	8012248 <sin+0x20>
 8012238:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80122c8 <sin+0xa0>
 801223c:	2000      	movs	r0, #0
 801223e:	b005      	add	sp, #20
 8012240:	f85d eb04 	ldr.w	lr, [sp], #4
 8012244:	f000 b910 	b.w	8012468 <__kernel_sin>
 8012248:	4822      	ldr	r0, [pc, #136]	; (80122d4 <sin+0xac>)
 801224a:	4281      	cmp	r1, r0
 801224c:	dd09      	ble.n	8012262 <sin+0x3a>
 801224e:	ee10 0a10 	vmov	r0, s0
 8012252:	4619      	mov	r1, r3
 8012254:	f7ee f838 	bl	80002c8 <__aeabi_dsub>
 8012258:	ec41 0b10 	vmov	d0, r0, r1
 801225c:	b005      	add	sp, #20
 801225e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012262:	4668      	mov	r0, sp
 8012264:	f000 f9c0 	bl	80125e8 <__ieee754_rem_pio2>
 8012268:	f000 0003 	and.w	r0, r0, #3
 801226c:	2801      	cmp	r0, #1
 801226e:	d00c      	beq.n	801228a <sin+0x62>
 8012270:	2802      	cmp	r0, #2
 8012272:	d011      	beq.n	8012298 <sin+0x70>
 8012274:	b9f0      	cbnz	r0, 80122b4 <sin+0x8c>
 8012276:	ed9d 1b02 	vldr	d1, [sp, #8]
 801227a:	ed9d 0b00 	vldr	d0, [sp]
 801227e:	2001      	movs	r0, #1
 8012280:	f000 f8f2 	bl	8012468 <__kernel_sin>
 8012284:	ec51 0b10 	vmov	r0, r1, d0
 8012288:	e7e6      	b.n	8012258 <sin+0x30>
 801228a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801228e:	ed9d 0b00 	vldr	d0, [sp]
 8012292:	f000 f821 	bl	80122d8 <__kernel_cos>
 8012296:	e7f5      	b.n	8012284 <sin+0x5c>
 8012298:	ed9d 1b02 	vldr	d1, [sp, #8]
 801229c:	ed9d 0b00 	vldr	d0, [sp]
 80122a0:	2001      	movs	r0, #1
 80122a2:	f000 f8e1 	bl	8012468 <__kernel_sin>
 80122a6:	ec53 2b10 	vmov	r2, r3, d0
 80122aa:	ee10 0a10 	vmov	r0, s0
 80122ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80122b2:	e7d1      	b.n	8012258 <sin+0x30>
 80122b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80122b8:	ed9d 0b00 	vldr	d0, [sp]
 80122bc:	f000 f80c 	bl	80122d8 <__kernel_cos>
 80122c0:	e7f1      	b.n	80122a6 <sin+0x7e>
 80122c2:	bf00      	nop
 80122c4:	f3af 8000 	nop.w
	...
 80122d0:	3fe921fb 	.word	0x3fe921fb
 80122d4:	7fefffff 	.word	0x7fefffff

080122d8 <__kernel_cos>:
 80122d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122dc:	ec57 6b10 	vmov	r6, r7, d0
 80122e0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80122e4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80122e8:	ed8d 1b00 	vstr	d1, [sp]
 80122ec:	da07      	bge.n	80122fe <__kernel_cos+0x26>
 80122ee:	ee10 0a10 	vmov	r0, s0
 80122f2:	4639      	mov	r1, r7
 80122f4:	f7ee fc50 	bl	8000b98 <__aeabi_d2iz>
 80122f8:	2800      	cmp	r0, #0
 80122fa:	f000 8088 	beq.w	801240e <__kernel_cos+0x136>
 80122fe:	4632      	mov	r2, r6
 8012300:	463b      	mov	r3, r7
 8012302:	4630      	mov	r0, r6
 8012304:	4639      	mov	r1, r7
 8012306:	f7ee f997 	bl	8000638 <__aeabi_dmul>
 801230a:	4b51      	ldr	r3, [pc, #324]	; (8012450 <__kernel_cos+0x178>)
 801230c:	2200      	movs	r2, #0
 801230e:	4604      	mov	r4, r0
 8012310:	460d      	mov	r5, r1
 8012312:	f7ee f991 	bl	8000638 <__aeabi_dmul>
 8012316:	a340      	add	r3, pc, #256	; (adr r3, 8012418 <__kernel_cos+0x140>)
 8012318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231c:	4682      	mov	sl, r0
 801231e:	468b      	mov	fp, r1
 8012320:	4620      	mov	r0, r4
 8012322:	4629      	mov	r1, r5
 8012324:	f7ee f988 	bl	8000638 <__aeabi_dmul>
 8012328:	a33d      	add	r3, pc, #244	; (adr r3, 8012420 <__kernel_cos+0x148>)
 801232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801232e:	f7ed ffcd 	bl	80002cc <__adddf3>
 8012332:	4622      	mov	r2, r4
 8012334:	462b      	mov	r3, r5
 8012336:	f7ee f97f 	bl	8000638 <__aeabi_dmul>
 801233a:	a33b      	add	r3, pc, #236	; (adr r3, 8012428 <__kernel_cos+0x150>)
 801233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012340:	f7ed ffc2 	bl	80002c8 <__aeabi_dsub>
 8012344:	4622      	mov	r2, r4
 8012346:	462b      	mov	r3, r5
 8012348:	f7ee f976 	bl	8000638 <__aeabi_dmul>
 801234c:	a338      	add	r3, pc, #224	; (adr r3, 8012430 <__kernel_cos+0x158>)
 801234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012352:	f7ed ffbb 	bl	80002cc <__adddf3>
 8012356:	4622      	mov	r2, r4
 8012358:	462b      	mov	r3, r5
 801235a:	f7ee f96d 	bl	8000638 <__aeabi_dmul>
 801235e:	a336      	add	r3, pc, #216	; (adr r3, 8012438 <__kernel_cos+0x160>)
 8012360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012364:	f7ed ffb0 	bl	80002c8 <__aeabi_dsub>
 8012368:	4622      	mov	r2, r4
 801236a:	462b      	mov	r3, r5
 801236c:	f7ee f964 	bl	8000638 <__aeabi_dmul>
 8012370:	a333      	add	r3, pc, #204	; (adr r3, 8012440 <__kernel_cos+0x168>)
 8012372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012376:	f7ed ffa9 	bl	80002cc <__adddf3>
 801237a:	4622      	mov	r2, r4
 801237c:	462b      	mov	r3, r5
 801237e:	f7ee f95b 	bl	8000638 <__aeabi_dmul>
 8012382:	4622      	mov	r2, r4
 8012384:	462b      	mov	r3, r5
 8012386:	f7ee f957 	bl	8000638 <__aeabi_dmul>
 801238a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801238e:	4604      	mov	r4, r0
 8012390:	460d      	mov	r5, r1
 8012392:	4630      	mov	r0, r6
 8012394:	4639      	mov	r1, r7
 8012396:	f7ee f94f 	bl	8000638 <__aeabi_dmul>
 801239a:	460b      	mov	r3, r1
 801239c:	4602      	mov	r2, r0
 801239e:	4629      	mov	r1, r5
 80123a0:	4620      	mov	r0, r4
 80123a2:	f7ed ff91 	bl	80002c8 <__aeabi_dsub>
 80123a6:	4b2b      	ldr	r3, [pc, #172]	; (8012454 <__kernel_cos+0x17c>)
 80123a8:	4598      	cmp	r8, r3
 80123aa:	4606      	mov	r6, r0
 80123ac:	460f      	mov	r7, r1
 80123ae:	dc10      	bgt.n	80123d2 <__kernel_cos+0xfa>
 80123b0:	4602      	mov	r2, r0
 80123b2:	460b      	mov	r3, r1
 80123b4:	4650      	mov	r0, sl
 80123b6:	4659      	mov	r1, fp
 80123b8:	f7ed ff86 	bl	80002c8 <__aeabi_dsub>
 80123bc:	460b      	mov	r3, r1
 80123be:	4926      	ldr	r1, [pc, #152]	; (8012458 <__kernel_cos+0x180>)
 80123c0:	4602      	mov	r2, r0
 80123c2:	2000      	movs	r0, #0
 80123c4:	f7ed ff80 	bl	80002c8 <__aeabi_dsub>
 80123c8:	ec41 0b10 	vmov	d0, r0, r1
 80123cc:	b003      	add	sp, #12
 80123ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123d2:	4b22      	ldr	r3, [pc, #136]	; (801245c <__kernel_cos+0x184>)
 80123d4:	4920      	ldr	r1, [pc, #128]	; (8012458 <__kernel_cos+0x180>)
 80123d6:	4598      	cmp	r8, r3
 80123d8:	bfcc      	ite	gt
 80123da:	4d21      	ldrgt	r5, [pc, #132]	; (8012460 <__kernel_cos+0x188>)
 80123dc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80123e0:	2400      	movs	r4, #0
 80123e2:	4622      	mov	r2, r4
 80123e4:	462b      	mov	r3, r5
 80123e6:	2000      	movs	r0, #0
 80123e8:	f7ed ff6e 	bl	80002c8 <__aeabi_dsub>
 80123ec:	4622      	mov	r2, r4
 80123ee:	4680      	mov	r8, r0
 80123f0:	4689      	mov	r9, r1
 80123f2:	462b      	mov	r3, r5
 80123f4:	4650      	mov	r0, sl
 80123f6:	4659      	mov	r1, fp
 80123f8:	f7ed ff66 	bl	80002c8 <__aeabi_dsub>
 80123fc:	4632      	mov	r2, r6
 80123fe:	463b      	mov	r3, r7
 8012400:	f7ed ff62 	bl	80002c8 <__aeabi_dsub>
 8012404:	4602      	mov	r2, r0
 8012406:	460b      	mov	r3, r1
 8012408:	4640      	mov	r0, r8
 801240a:	4649      	mov	r1, r9
 801240c:	e7da      	b.n	80123c4 <__kernel_cos+0xec>
 801240e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012448 <__kernel_cos+0x170>
 8012412:	e7db      	b.n	80123cc <__kernel_cos+0xf4>
 8012414:	f3af 8000 	nop.w
 8012418:	be8838d4 	.word	0xbe8838d4
 801241c:	bda8fae9 	.word	0xbda8fae9
 8012420:	bdb4b1c4 	.word	0xbdb4b1c4
 8012424:	3e21ee9e 	.word	0x3e21ee9e
 8012428:	809c52ad 	.word	0x809c52ad
 801242c:	3e927e4f 	.word	0x3e927e4f
 8012430:	19cb1590 	.word	0x19cb1590
 8012434:	3efa01a0 	.word	0x3efa01a0
 8012438:	16c15177 	.word	0x16c15177
 801243c:	3f56c16c 	.word	0x3f56c16c
 8012440:	5555554c 	.word	0x5555554c
 8012444:	3fa55555 	.word	0x3fa55555
 8012448:	00000000 	.word	0x00000000
 801244c:	3ff00000 	.word	0x3ff00000
 8012450:	3fe00000 	.word	0x3fe00000
 8012454:	3fd33332 	.word	0x3fd33332
 8012458:	3ff00000 	.word	0x3ff00000
 801245c:	3fe90000 	.word	0x3fe90000
 8012460:	3fd20000 	.word	0x3fd20000
 8012464:	00000000 	.word	0x00000000

08012468 <__kernel_sin>:
 8012468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801246c:	ed2d 8b04 	vpush	{d8-d9}
 8012470:	eeb0 8a41 	vmov.f32	s16, s2
 8012474:	eef0 8a61 	vmov.f32	s17, s3
 8012478:	ec55 4b10 	vmov	r4, r5, d0
 801247c:	b083      	sub	sp, #12
 801247e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012482:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012486:	9001      	str	r0, [sp, #4]
 8012488:	da06      	bge.n	8012498 <__kernel_sin+0x30>
 801248a:	ee10 0a10 	vmov	r0, s0
 801248e:	4629      	mov	r1, r5
 8012490:	f7ee fb82 	bl	8000b98 <__aeabi_d2iz>
 8012494:	2800      	cmp	r0, #0
 8012496:	d051      	beq.n	801253c <__kernel_sin+0xd4>
 8012498:	4622      	mov	r2, r4
 801249a:	462b      	mov	r3, r5
 801249c:	4620      	mov	r0, r4
 801249e:	4629      	mov	r1, r5
 80124a0:	f7ee f8ca 	bl	8000638 <__aeabi_dmul>
 80124a4:	4682      	mov	sl, r0
 80124a6:	468b      	mov	fp, r1
 80124a8:	4602      	mov	r2, r0
 80124aa:	460b      	mov	r3, r1
 80124ac:	4620      	mov	r0, r4
 80124ae:	4629      	mov	r1, r5
 80124b0:	f7ee f8c2 	bl	8000638 <__aeabi_dmul>
 80124b4:	a341      	add	r3, pc, #260	; (adr r3, 80125bc <__kernel_sin+0x154>)
 80124b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ba:	4680      	mov	r8, r0
 80124bc:	4689      	mov	r9, r1
 80124be:	4650      	mov	r0, sl
 80124c0:	4659      	mov	r1, fp
 80124c2:	f7ee f8b9 	bl	8000638 <__aeabi_dmul>
 80124c6:	a33f      	add	r3, pc, #252	; (adr r3, 80125c4 <__kernel_sin+0x15c>)
 80124c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124cc:	f7ed fefc 	bl	80002c8 <__aeabi_dsub>
 80124d0:	4652      	mov	r2, sl
 80124d2:	465b      	mov	r3, fp
 80124d4:	f7ee f8b0 	bl	8000638 <__aeabi_dmul>
 80124d8:	a33c      	add	r3, pc, #240	; (adr r3, 80125cc <__kernel_sin+0x164>)
 80124da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124de:	f7ed fef5 	bl	80002cc <__adddf3>
 80124e2:	4652      	mov	r2, sl
 80124e4:	465b      	mov	r3, fp
 80124e6:	f7ee f8a7 	bl	8000638 <__aeabi_dmul>
 80124ea:	a33a      	add	r3, pc, #232	; (adr r3, 80125d4 <__kernel_sin+0x16c>)
 80124ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f0:	f7ed feea 	bl	80002c8 <__aeabi_dsub>
 80124f4:	4652      	mov	r2, sl
 80124f6:	465b      	mov	r3, fp
 80124f8:	f7ee f89e 	bl	8000638 <__aeabi_dmul>
 80124fc:	a337      	add	r3, pc, #220	; (adr r3, 80125dc <__kernel_sin+0x174>)
 80124fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012502:	f7ed fee3 	bl	80002cc <__adddf3>
 8012506:	9b01      	ldr	r3, [sp, #4]
 8012508:	4606      	mov	r6, r0
 801250a:	460f      	mov	r7, r1
 801250c:	b9eb      	cbnz	r3, 801254a <__kernel_sin+0xe2>
 801250e:	4602      	mov	r2, r0
 8012510:	460b      	mov	r3, r1
 8012512:	4650      	mov	r0, sl
 8012514:	4659      	mov	r1, fp
 8012516:	f7ee f88f 	bl	8000638 <__aeabi_dmul>
 801251a:	a325      	add	r3, pc, #148	; (adr r3, 80125b0 <__kernel_sin+0x148>)
 801251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012520:	f7ed fed2 	bl	80002c8 <__aeabi_dsub>
 8012524:	4642      	mov	r2, r8
 8012526:	464b      	mov	r3, r9
 8012528:	f7ee f886 	bl	8000638 <__aeabi_dmul>
 801252c:	4602      	mov	r2, r0
 801252e:	460b      	mov	r3, r1
 8012530:	4620      	mov	r0, r4
 8012532:	4629      	mov	r1, r5
 8012534:	f7ed feca 	bl	80002cc <__adddf3>
 8012538:	4604      	mov	r4, r0
 801253a:	460d      	mov	r5, r1
 801253c:	ec45 4b10 	vmov	d0, r4, r5
 8012540:	b003      	add	sp, #12
 8012542:	ecbd 8b04 	vpop	{d8-d9}
 8012546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801254a:	4b1b      	ldr	r3, [pc, #108]	; (80125b8 <__kernel_sin+0x150>)
 801254c:	ec51 0b18 	vmov	r0, r1, d8
 8012550:	2200      	movs	r2, #0
 8012552:	f7ee f871 	bl	8000638 <__aeabi_dmul>
 8012556:	4632      	mov	r2, r6
 8012558:	ec41 0b19 	vmov	d9, r0, r1
 801255c:	463b      	mov	r3, r7
 801255e:	4640      	mov	r0, r8
 8012560:	4649      	mov	r1, r9
 8012562:	f7ee f869 	bl	8000638 <__aeabi_dmul>
 8012566:	4602      	mov	r2, r0
 8012568:	460b      	mov	r3, r1
 801256a:	ec51 0b19 	vmov	r0, r1, d9
 801256e:	f7ed feab 	bl	80002c8 <__aeabi_dsub>
 8012572:	4652      	mov	r2, sl
 8012574:	465b      	mov	r3, fp
 8012576:	f7ee f85f 	bl	8000638 <__aeabi_dmul>
 801257a:	ec53 2b18 	vmov	r2, r3, d8
 801257e:	f7ed fea3 	bl	80002c8 <__aeabi_dsub>
 8012582:	a30b      	add	r3, pc, #44	; (adr r3, 80125b0 <__kernel_sin+0x148>)
 8012584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012588:	4606      	mov	r6, r0
 801258a:	460f      	mov	r7, r1
 801258c:	4640      	mov	r0, r8
 801258e:	4649      	mov	r1, r9
 8012590:	f7ee f852 	bl	8000638 <__aeabi_dmul>
 8012594:	4602      	mov	r2, r0
 8012596:	460b      	mov	r3, r1
 8012598:	4630      	mov	r0, r6
 801259a:	4639      	mov	r1, r7
 801259c:	f7ed fe96 	bl	80002cc <__adddf3>
 80125a0:	4602      	mov	r2, r0
 80125a2:	460b      	mov	r3, r1
 80125a4:	4620      	mov	r0, r4
 80125a6:	4629      	mov	r1, r5
 80125a8:	f7ed fe8e 	bl	80002c8 <__aeabi_dsub>
 80125ac:	e7c4      	b.n	8012538 <__kernel_sin+0xd0>
 80125ae:	bf00      	nop
 80125b0:	55555549 	.word	0x55555549
 80125b4:	3fc55555 	.word	0x3fc55555
 80125b8:	3fe00000 	.word	0x3fe00000
 80125bc:	5acfd57c 	.word	0x5acfd57c
 80125c0:	3de5d93a 	.word	0x3de5d93a
 80125c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80125c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80125cc:	57b1fe7d 	.word	0x57b1fe7d
 80125d0:	3ec71de3 	.word	0x3ec71de3
 80125d4:	19c161d5 	.word	0x19c161d5
 80125d8:	3f2a01a0 	.word	0x3f2a01a0
 80125dc:	1110f8a6 	.word	0x1110f8a6
 80125e0:	3f811111 	.word	0x3f811111
 80125e4:	00000000 	.word	0x00000000

080125e8 <__ieee754_rem_pio2>:
 80125e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ec:	ed2d 8b02 	vpush	{d8}
 80125f0:	ec55 4b10 	vmov	r4, r5, d0
 80125f4:	4bca      	ldr	r3, [pc, #808]	; (8012920 <__ieee754_rem_pio2+0x338>)
 80125f6:	b08b      	sub	sp, #44	; 0x2c
 80125f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80125fc:	4598      	cmp	r8, r3
 80125fe:	4682      	mov	sl, r0
 8012600:	9502      	str	r5, [sp, #8]
 8012602:	dc08      	bgt.n	8012616 <__ieee754_rem_pio2+0x2e>
 8012604:	2200      	movs	r2, #0
 8012606:	2300      	movs	r3, #0
 8012608:	ed80 0b00 	vstr	d0, [r0]
 801260c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012610:	f04f 0b00 	mov.w	fp, #0
 8012614:	e028      	b.n	8012668 <__ieee754_rem_pio2+0x80>
 8012616:	4bc3      	ldr	r3, [pc, #780]	; (8012924 <__ieee754_rem_pio2+0x33c>)
 8012618:	4598      	cmp	r8, r3
 801261a:	dc78      	bgt.n	801270e <__ieee754_rem_pio2+0x126>
 801261c:	9b02      	ldr	r3, [sp, #8]
 801261e:	4ec2      	ldr	r6, [pc, #776]	; (8012928 <__ieee754_rem_pio2+0x340>)
 8012620:	2b00      	cmp	r3, #0
 8012622:	ee10 0a10 	vmov	r0, s0
 8012626:	a3b0      	add	r3, pc, #704	; (adr r3, 80128e8 <__ieee754_rem_pio2+0x300>)
 8012628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801262c:	4629      	mov	r1, r5
 801262e:	dd39      	ble.n	80126a4 <__ieee754_rem_pio2+0xbc>
 8012630:	f7ed fe4a 	bl	80002c8 <__aeabi_dsub>
 8012634:	45b0      	cmp	r8, r6
 8012636:	4604      	mov	r4, r0
 8012638:	460d      	mov	r5, r1
 801263a:	d01b      	beq.n	8012674 <__ieee754_rem_pio2+0x8c>
 801263c:	a3ac      	add	r3, pc, #688	; (adr r3, 80128f0 <__ieee754_rem_pio2+0x308>)
 801263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012642:	f7ed fe41 	bl	80002c8 <__aeabi_dsub>
 8012646:	4602      	mov	r2, r0
 8012648:	460b      	mov	r3, r1
 801264a:	e9ca 2300 	strd	r2, r3, [sl]
 801264e:	4620      	mov	r0, r4
 8012650:	4629      	mov	r1, r5
 8012652:	f7ed fe39 	bl	80002c8 <__aeabi_dsub>
 8012656:	a3a6      	add	r3, pc, #664	; (adr r3, 80128f0 <__ieee754_rem_pio2+0x308>)
 8012658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801265c:	f7ed fe34 	bl	80002c8 <__aeabi_dsub>
 8012660:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012664:	f04f 0b01 	mov.w	fp, #1
 8012668:	4658      	mov	r0, fp
 801266a:	b00b      	add	sp, #44	; 0x2c
 801266c:	ecbd 8b02 	vpop	{d8}
 8012670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012674:	a3a0      	add	r3, pc, #640	; (adr r3, 80128f8 <__ieee754_rem_pio2+0x310>)
 8012676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801267a:	f7ed fe25 	bl	80002c8 <__aeabi_dsub>
 801267e:	a3a0      	add	r3, pc, #640	; (adr r3, 8012900 <__ieee754_rem_pio2+0x318>)
 8012680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012684:	4604      	mov	r4, r0
 8012686:	460d      	mov	r5, r1
 8012688:	f7ed fe1e 	bl	80002c8 <__aeabi_dsub>
 801268c:	4602      	mov	r2, r0
 801268e:	460b      	mov	r3, r1
 8012690:	e9ca 2300 	strd	r2, r3, [sl]
 8012694:	4620      	mov	r0, r4
 8012696:	4629      	mov	r1, r5
 8012698:	f7ed fe16 	bl	80002c8 <__aeabi_dsub>
 801269c:	a398      	add	r3, pc, #608	; (adr r3, 8012900 <__ieee754_rem_pio2+0x318>)
 801269e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a2:	e7db      	b.n	801265c <__ieee754_rem_pio2+0x74>
 80126a4:	f7ed fe12 	bl	80002cc <__adddf3>
 80126a8:	45b0      	cmp	r8, r6
 80126aa:	4604      	mov	r4, r0
 80126ac:	460d      	mov	r5, r1
 80126ae:	d016      	beq.n	80126de <__ieee754_rem_pio2+0xf6>
 80126b0:	a38f      	add	r3, pc, #572	; (adr r3, 80128f0 <__ieee754_rem_pio2+0x308>)
 80126b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b6:	f7ed fe09 	bl	80002cc <__adddf3>
 80126ba:	4602      	mov	r2, r0
 80126bc:	460b      	mov	r3, r1
 80126be:	e9ca 2300 	strd	r2, r3, [sl]
 80126c2:	4620      	mov	r0, r4
 80126c4:	4629      	mov	r1, r5
 80126c6:	f7ed fdff 	bl	80002c8 <__aeabi_dsub>
 80126ca:	a389      	add	r3, pc, #548	; (adr r3, 80128f0 <__ieee754_rem_pio2+0x308>)
 80126cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d0:	f7ed fdfc 	bl	80002cc <__adddf3>
 80126d4:	f04f 3bff 	mov.w	fp, #4294967295
 80126d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80126dc:	e7c4      	b.n	8012668 <__ieee754_rem_pio2+0x80>
 80126de:	a386      	add	r3, pc, #536	; (adr r3, 80128f8 <__ieee754_rem_pio2+0x310>)
 80126e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e4:	f7ed fdf2 	bl	80002cc <__adddf3>
 80126e8:	a385      	add	r3, pc, #532	; (adr r3, 8012900 <__ieee754_rem_pio2+0x318>)
 80126ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ee:	4604      	mov	r4, r0
 80126f0:	460d      	mov	r5, r1
 80126f2:	f7ed fdeb 	bl	80002cc <__adddf3>
 80126f6:	4602      	mov	r2, r0
 80126f8:	460b      	mov	r3, r1
 80126fa:	e9ca 2300 	strd	r2, r3, [sl]
 80126fe:	4620      	mov	r0, r4
 8012700:	4629      	mov	r1, r5
 8012702:	f7ed fde1 	bl	80002c8 <__aeabi_dsub>
 8012706:	a37e      	add	r3, pc, #504	; (adr r3, 8012900 <__ieee754_rem_pio2+0x318>)
 8012708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801270c:	e7e0      	b.n	80126d0 <__ieee754_rem_pio2+0xe8>
 801270e:	4b87      	ldr	r3, [pc, #540]	; (801292c <__ieee754_rem_pio2+0x344>)
 8012710:	4598      	cmp	r8, r3
 8012712:	f300 80d8 	bgt.w	80128c6 <__ieee754_rem_pio2+0x2de>
 8012716:	f000 f96d 	bl	80129f4 <fabs>
 801271a:	ec55 4b10 	vmov	r4, r5, d0
 801271e:	ee10 0a10 	vmov	r0, s0
 8012722:	a379      	add	r3, pc, #484	; (adr r3, 8012908 <__ieee754_rem_pio2+0x320>)
 8012724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012728:	4629      	mov	r1, r5
 801272a:	f7ed ff85 	bl	8000638 <__aeabi_dmul>
 801272e:	4b80      	ldr	r3, [pc, #512]	; (8012930 <__ieee754_rem_pio2+0x348>)
 8012730:	2200      	movs	r2, #0
 8012732:	f7ed fdcb 	bl	80002cc <__adddf3>
 8012736:	f7ee fa2f 	bl	8000b98 <__aeabi_d2iz>
 801273a:	4683      	mov	fp, r0
 801273c:	f7ed ff12 	bl	8000564 <__aeabi_i2d>
 8012740:	4602      	mov	r2, r0
 8012742:	460b      	mov	r3, r1
 8012744:	ec43 2b18 	vmov	d8, r2, r3
 8012748:	a367      	add	r3, pc, #412	; (adr r3, 80128e8 <__ieee754_rem_pio2+0x300>)
 801274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801274e:	f7ed ff73 	bl	8000638 <__aeabi_dmul>
 8012752:	4602      	mov	r2, r0
 8012754:	460b      	mov	r3, r1
 8012756:	4620      	mov	r0, r4
 8012758:	4629      	mov	r1, r5
 801275a:	f7ed fdb5 	bl	80002c8 <__aeabi_dsub>
 801275e:	a364      	add	r3, pc, #400	; (adr r3, 80128f0 <__ieee754_rem_pio2+0x308>)
 8012760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012764:	4606      	mov	r6, r0
 8012766:	460f      	mov	r7, r1
 8012768:	ec51 0b18 	vmov	r0, r1, d8
 801276c:	f7ed ff64 	bl	8000638 <__aeabi_dmul>
 8012770:	f1bb 0f1f 	cmp.w	fp, #31
 8012774:	4604      	mov	r4, r0
 8012776:	460d      	mov	r5, r1
 8012778:	dc0d      	bgt.n	8012796 <__ieee754_rem_pio2+0x1ae>
 801277a:	4b6e      	ldr	r3, [pc, #440]	; (8012934 <__ieee754_rem_pio2+0x34c>)
 801277c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012784:	4543      	cmp	r3, r8
 8012786:	d006      	beq.n	8012796 <__ieee754_rem_pio2+0x1ae>
 8012788:	4622      	mov	r2, r4
 801278a:	462b      	mov	r3, r5
 801278c:	4630      	mov	r0, r6
 801278e:	4639      	mov	r1, r7
 8012790:	f7ed fd9a 	bl	80002c8 <__aeabi_dsub>
 8012794:	e00e      	b.n	80127b4 <__ieee754_rem_pio2+0x1cc>
 8012796:	462b      	mov	r3, r5
 8012798:	4622      	mov	r2, r4
 801279a:	4630      	mov	r0, r6
 801279c:	4639      	mov	r1, r7
 801279e:	f7ed fd93 	bl	80002c8 <__aeabi_dsub>
 80127a2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80127a6:	9303      	str	r3, [sp, #12]
 80127a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80127ac:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80127b0:	2b10      	cmp	r3, #16
 80127b2:	dc02      	bgt.n	80127ba <__ieee754_rem_pio2+0x1d2>
 80127b4:	e9ca 0100 	strd	r0, r1, [sl]
 80127b8:	e039      	b.n	801282e <__ieee754_rem_pio2+0x246>
 80127ba:	a34f      	add	r3, pc, #316	; (adr r3, 80128f8 <__ieee754_rem_pio2+0x310>)
 80127bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c0:	ec51 0b18 	vmov	r0, r1, d8
 80127c4:	f7ed ff38 	bl	8000638 <__aeabi_dmul>
 80127c8:	4604      	mov	r4, r0
 80127ca:	460d      	mov	r5, r1
 80127cc:	4602      	mov	r2, r0
 80127ce:	460b      	mov	r3, r1
 80127d0:	4630      	mov	r0, r6
 80127d2:	4639      	mov	r1, r7
 80127d4:	f7ed fd78 	bl	80002c8 <__aeabi_dsub>
 80127d8:	4602      	mov	r2, r0
 80127da:	460b      	mov	r3, r1
 80127dc:	4680      	mov	r8, r0
 80127de:	4689      	mov	r9, r1
 80127e0:	4630      	mov	r0, r6
 80127e2:	4639      	mov	r1, r7
 80127e4:	f7ed fd70 	bl	80002c8 <__aeabi_dsub>
 80127e8:	4622      	mov	r2, r4
 80127ea:	462b      	mov	r3, r5
 80127ec:	f7ed fd6c 	bl	80002c8 <__aeabi_dsub>
 80127f0:	a343      	add	r3, pc, #268	; (adr r3, 8012900 <__ieee754_rem_pio2+0x318>)
 80127f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f6:	4604      	mov	r4, r0
 80127f8:	460d      	mov	r5, r1
 80127fa:	ec51 0b18 	vmov	r0, r1, d8
 80127fe:	f7ed ff1b 	bl	8000638 <__aeabi_dmul>
 8012802:	4622      	mov	r2, r4
 8012804:	462b      	mov	r3, r5
 8012806:	f7ed fd5f 	bl	80002c8 <__aeabi_dsub>
 801280a:	4602      	mov	r2, r0
 801280c:	460b      	mov	r3, r1
 801280e:	4604      	mov	r4, r0
 8012810:	460d      	mov	r5, r1
 8012812:	4640      	mov	r0, r8
 8012814:	4649      	mov	r1, r9
 8012816:	f7ed fd57 	bl	80002c8 <__aeabi_dsub>
 801281a:	9a03      	ldr	r2, [sp, #12]
 801281c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012820:	1ad3      	subs	r3, r2, r3
 8012822:	2b31      	cmp	r3, #49	; 0x31
 8012824:	dc24      	bgt.n	8012870 <__ieee754_rem_pio2+0x288>
 8012826:	e9ca 0100 	strd	r0, r1, [sl]
 801282a:	4646      	mov	r6, r8
 801282c:	464f      	mov	r7, r9
 801282e:	e9da 8900 	ldrd	r8, r9, [sl]
 8012832:	4630      	mov	r0, r6
 8012834:	4642      	mov	r2, r8
 8012836:	464b      	mov	r3, r9
 8012838:	4639      	mov	r1, r7
 801283a:	f7ed fd45 	bl	80002c8 <__aeabi_dsub>
 801283e:	462b      	mov	r3, r5
 8012840:	4622      	mov	r2, r4
 8012842:	f7ed fd41 	bl	80002c8 <__aeabi_dsub>
 8012846:	9b02      	ldr	r3, [sp, #8]
 8012848:	2b00      	cmp	r3, #0
 801284a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801284e:	f6bf af0b 	bge.w	8012668 <__ieee754_rem_pio2+0x80>
 8012852:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012856:	f8ca 3004 	str.w	r3, [sl, #4]
 801285a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801285e:	f8ca 8000 	str.w	r8, [sl]
 8012862:	f8ca 0008 	str.w	r0, [sl, #8]
 8012866:	f8ca 300c 	str.w	r3, [sl, #12]
 801286a:	f1cb 0b00 	rsb	fp, fp, #0
 801286e:	e6fb      	b.n	8012668 <__ieee754_rem_pio2+0x80>
 8012870:	a327      	add	r3, pc, #156	; (adr r3, 8012910 <__ieee754_rem_pio2+0x328>)
 8012872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012876:	ec51 0b18 	vmov	r0, r1, d8
 801287a:	f7ed fedd 	bl	8000638 <__aeabi_dmul>
 801287e:	4604      	mov	r4, r0
 8012880:	460d      	mov	r5, r1
 8012882:	4602      	mov	r2, r0
 8012884:	460b      	mov	r3, r1
 8012886:	4640      	mov	r0, r8
 8012888:	4649      	mov	r1, r9
 801288a:	f7ed fd1d 	bl	80002c8 <__aeabi_dsub>
 801288e:	4602      	mov	r2, r0
 8012890:	460b      	mov	r3, r1
 8012892:	4606      	mov	r6, r0
 8012894:	460f      	mov	r7, r1
 8012896:	4640      	mov	r0, r8
 8012898:	4649      	mov	r1, r9
 801289a:	f7ed fd15 	bl	80002c8 <__aeabi_dsub>
 801289e:	4622      	mov	r2, r4
 80128a0:	462b      	mov	r3, r5
 80128a2:	f7ed fd11 	bl	80002c8 <__aeabi_dsub>
 80128a6:	a31c      	add	r3, pc, #112	; (adr r3, 8012918 <__ieee754_rem_pio2+0x330>)
 80128a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ac:	4604      	mov	r4, r0
 80128ae:	460d      	mov	r5, r1
 80128b0:	ec51 0b18 	vmov	r0, r1, d8
 80128b4:	f7ed fec0 	bl	8000638 <__aeabi_dmul>
 80128b8:	4622      	mov	r2, r4
 80128ba:	462b      	mov	r3, r5
 80128bc:	f7ed fd04 	bl	80002c8 <__aeabi_dsub>
 80128c0:	4604      	mov	r4, r0
 80128c2:	460d      	mov	r5, r1
 80128c4:	e760      	b.n	8012788 <__ieee754_rem_pio2+0x1a0>
 80128c6:	4b1c      	ldr	r3, [pc, #112]	; (8012938 <__ieee754_rem_pio2+0x350>)
 80128c8:	4598      	cmp	r8, r3
 80128ca:	dd37      	ble.n	801293c <__ieee754_rem_pio2+0x354>
 80128cc:	ee10 2a10 	vmov	r2, s0
 80128d0:	462b      	mov	r3, r5
 80128d2:	4620      	mov	r0, r4
 80128d4:	4629      	mov	r1, r5
 80128d6:	f7ed fcf7 	bl	80002c8 <__aeabi_dsub>
 80128da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80128de:	e9ca 0100 	strd	r0, r1, [sl]
 80128e2:	e695      	b.n	8012610 <__ieee754_rem_pio2+0x28>
 80128e4:	f3af 8000 	nop.w
 80128e8:	54400000 	.word	0x54400000
 80128ec:	3ff921fb 	.word	0x3ff921fb
 80128f0:	1a626331 	.word	0x1a626331
 80128f4:	3dd0b461 	.word	0x3dd0b461
 80128f8:	1a600000 	.word	0x1a600000
 80128fc:	3dd0b461 	.word	0x3dd0b461
 8012900:	2e037073 	.word	0x2e037073
 8012904:	3ba3198a 	.word	0x3ba3198a
 8012908:	6dc9c883 	.word	0x6dc9c883
 801290c:	3fe45f30 	.word	0x3fe45f30
 8012910:	2e000000 	.word	0x2e000000
 8012914:	3ba3198a 	.word	0x3ba3198a
 8012918:	252049c1 	.word	0x252049c1
 801291c:	397b839a 	.word	0x397b839a
 8012920:	3fe921fb 	.word	0x3fe921fb
 8012924:	4002d97b 	.word	0x4002d97b
 8012928:	3ff921fb 	.word	0x3ff921fb
 801292c:	413921fb 	.word	0x413921fb
 8012930:	3fe00000 	.word	0x3fe00000
 8012934:	0801aa90 	.word	0x0801aa90
 8012938:	7fefffff 	.word	0x7fefffff
 801293c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8012940:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8012944:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8012948:	4620      	mov	r0, r4
 801294a:	460d      	mov	r5, r1
 801294c:	f7ee f924 	bl	8000b98 <__aeabi_d2iz>
 8012950:	f7ed fe08 	bl	8000564 <__aeabi_i2d>
 8012954:	4602      	mov	r2, r0
 8012956:	460b      	mov	r3, r1
 8012958:	4620      	mov	r0, r4
 801295a:	4629      	mov	r1, r5
 801295c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012960:	f7ed fcb2 	bl	80002c8 <__aeabi_dsub>
 8012964:	4b21      	ldr	r3, [pc, #132]	; (80129ec <__ieee754_rem_pio2+0x404>)
 8012966:	2200      	movs	r2, #0
 8012968:	f7ed fe66 	bl	8000638 <__aeabi_dmul>
 801296c:	460d      	mov	r5, r1
 801296e:	4604      	mov	r4, r0
 8012970:	f7ee f912 	bl	8000b98 <__aeabi_d2iz>
 8012974:	f7ed fdf6 	bl	8000564 <__aeabi_i2d>
 8012978:	4602      	mov	r2, r0
 801297a:	460b      	mov	r3, r1
 801297c:	4620      	mov	r0, r4
 801297e:	4629      	mov	r1, r5
 8012980:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012984:	f7ed fca0 	bl	80002c8 <__aeabi_dsub>
 8012988:	4b18      	ldr	r3, [pc, #96]	; (80129ec <__ieee754_rem_pio2+0x404>)
 801298a:	2200      	movs	r2, #0
 801298c:	f7ed fe54 	bl	8000638 <__aeabi_dmul>
 8012990:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012994:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8012998:	2703      	movs	r7, #3
 801299a:	2400      	movs	r4, #0
 801299c:	2500      	movs	r5, #0
 801299e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80129a2:	4622      	mov	r2, r4
 80129a4:	462b      	mov	r3, r5
 80129a6:	46b9      	mov	r9, r7
 80129a8:	3f01      	subs	r7, #1
 80129aa:	f7ee f8ad 	bl	8000b08 <__aeabi_dcmpeq>
 80129ae:	2800      	cmp	r0, #0
 80129b0:	d1f5      	bne.n	801299e <__ieee754_rem_pio2+0x3b6>
 80129b2:	4b0f      	ldr	r3, [pc, #60]	; (80129f0 <__ieee754_rem_pio2+0x408>)
 80129b4:	9301      	str	r3, [sp, #4]
 80129b6:	2302      	movs	r3, #2
 80129b8:	9300      	str	r3, [sp, #0]
 80129ba:	4632      	mov	r2, r6
 80129bc:	464b      	mov	r3, r9
 80129be:	4651      	mov	r1, sl
 80129c0:	a804      	add	r0, sp, #16
 80129c2:	f000 f821 	bl	8012a08 <__kernel_rem_pio2>
 80129c6:	9b02      	ldr	r3, [sp, #8]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	4683      	mov	fp, r0
 80129cc:	f6bf ae4c 	bge.w	8012668 <__ieee754_rem_pio2+0x80>
 80129d0:	e9da 2100 	ldrd	r2, r1, [sl]
 80129d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80129d8:	e9ca 2300 	strd	r2, r3, [sl]
 80129dc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80129e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80129e4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80129e8:	e73f      	b.n	801286a <__ieee754_rem_pio2+0x282>
 80129ea:	bf00      	nop
 80129ec:	41700000 	.word	0x41700000
 80129f0:	0801ab10 	.word	0x0801ab10

080129f4 <fabs>:
 80129f4:	ec51 0b10 	vmov	r0, r1, d0
 80129f8:	ee10 2a10 	vmov	r2, s0
 80129fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012a00:	ec43 2b10 	vmov	d0, r2, r3
 8012a04:	4770      	bx	lr
	...

08012a08 <__kernel_rem_pio2>:
 8012a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a0c:	ed2d 8b02 	vpush	{d8}
 8012a10:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8012a14:	f112 0f14 	cmn.w	r2, #20
 8012a18:	9306      	str	r3, [sp, #24]
 8012a1a:	9104      	str	r1, [sp, #16]
 8012a1c:	4bc2      	ldr	r3, [pc, #776]	; (8012d28 <__kernel_rem_pio2+0x320>)
 8012a1e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8012a20:	9009      	str	r0, [sp, #36]	; 0x24
 8012a22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012a26:	9300      	str	r3, [sp, #0]
 8012a28:	9b06      	ldr	r3, [sp, #24]
 8012a2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8012a2e:	bfa8      	it	ge
 8012a30:	1ed4      	subge	r4, r2, #3
 8012a32:	9305      	str	r3, [sp, #20]
 8012a34:	bfb2      	itee	lt
 8012a36:	2400      	movlt	r4, #0
 8012a38:	2318      	movge	r3, #24
 8012a3a:	fb94 f4f3 	sdivge	r4, r4, r3
 8012a3e:	f06f 0317 	mvn.w	r3, #23
 8012a42:	fb04 3303 	mla	r3, r4, r3, r3
 8012a46:	eb03 0a02 	add.w	sl, r3, r2
 8012a4a:	9b00      	ldr	r3, [sp, #0]
 8012a4c:	9a05      	ldr	r2, [sp, #20]
 8012a4e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8012d18 <__kernel_rem_pio2+0x310>
 8012a52:	eb03 0802 	add.w	r8, r3, r2
 8012a56:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012a58:	1aa7      	subs	r7, r4, r2
 8012a5a:	ae20      	add	r6, sp, #128	; 0x80
 8012a5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012a60:	2500      	movs	r5, #0
 8012a62:	4545      	cmp	r5, r8
 8012a64:	dd13      	ble.n	8012a8e <__kernel_rem_pio2+0x86>
 8012a66:	9b06      	ldr	r3, [sp, #24]
 8012a68:	aa20      	add	r2, sp, #128	; 0x80
 8012a6a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012a6e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8012a72:	f04f 0800 	mov.w	r8, #0
 8012a76:	9b00      	ldr	r3, [sp, #0]
 8012a78:	4598      	cmp	r8, r3
 8012a7a:	dc31      	bgt.n	8012ae0 <__kernel_rem_pio2+0xd8>
 8012a7c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8012d18 <__kernel_rem_pio2+0x310>
 8012a80:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012a84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012a88:	462f      	mov	r7, r5
 8012a8a:	2600      	movs	r6, #0
 8012a8c:	e01b      	b.n	8012ac6 <__kernel_rem_pio2+0xbe>
 8012a8e:	42ef      	cmn	r7, r5
 8012a90:	d407      	bmi.n	8012aa2 <__kernel_rem_pio2+0x9a>
 8012a92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012a96:	f7ed fd65 	bl	8000564 <__aeabi_i2d>
 8012a9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012a9e:	3501      	adds	r5, #1
 8012aa0:	e7df      	b.n	8012a62 <__kernel_rem_pio2+0x5a>
 8012aa2:	ec51 0b18 	vmov	r0, r1, d8
 8012aa6:	e7f8      	b.n	8012a9a <__kernel_rem_pio2+0x92>
 8012aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012aac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012ab0:	f7ed fdc2 	bl	8000638 <__aeabi_dmul>
 8012ab4:	4602      	mov	r2, r0
 8012ab6:	460b      	mov	r3, r1
 8012ab8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012abc:	f7ed fc06 	bl	80002cc <__adddf3>
 8012ac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ac4:	3601      	adds	r6, #1
 8012ac6:	9b05      	ldr	r3, [sp, #20]
 8012ac8:	429e      	cmp	r6, r3
 8012aca:	f1a7 0708 	sub.w	r7, r7, #8
 8012ace:	ddeb      	ble.n	8012aa8 <__kernel_rem_pio2+0xa0>
 8012ad0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ad4:	f108 0801 	add.w	r8, r8, #1
 8012ad8:	ecab 7b02 	vstmia	fp!, {d7}
 8012adc:	3508      	adds	r5, #8
 8012ade:	e7ca      	b.n	8012a76 <__kernel_rem_pio2+0x6e>
 8012ae0:	9b00      	ldr	r3, [sp, #0]
 8012ae2:	aa0c      	add	r2, sp, #48	; 0x30
 8012ae4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012ae8:	930b      	str	r3, [sp, #44]	; 0x2c
 8012aea:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012aec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012af0:	9c00      	ldr	r4, [sp, #0]
 8012af2:	930a      	str	r3, [sp, #40]	; 0x28
 8012af4:	00e3      	lsls	r3, r4, #3
 8012af6:	9308      	str	r3, [sp, #32]
 8012af8:	ab98      	add	r3, sp, #608	; 0x260
 8012afa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012afe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8012b02:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8012b06:	ab70      	add	r3, sp, #448	; 0x1c0
 8012b08:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8012b0c:	46c3      	mov	fp, r8
 8012b0e:	46a1      	mov	r9, r4
 8012b10:	f1b9 0f00 	cmp.w	r9, #0
 8012b14:	f1a5 0508 	sub.w	r5, r5, #8
 8012b18:	dc77      	bgt.n	8012c0a <__kernel_rem_pio2+0x202>
 8012b1a:	ec47 6b10 	vmov	d0, r6, r7
 8012b1e:	4650      	mov	r0, sl
 8012b20:	f000 fac2 	bl	80130a8 <scalbn>
 8012b24:	ec57 6b10 	vmov	r6, r7, d0
 8012b28:	2200      	movs	r2, #0
 8012b2a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012b2e:	ee10 0a10 	vmov	r0, s0
 8012b32:	4639      	mov	r1, r7
 8012b34:	f7ed fd80 	bl	8000638 <__aeabi_dmul>
 8012b38:	ec41 0b10 	vmov	d0, r0, r1
 8012b3c:	f000 fb34 	bl	80131a8 <floor>
 8012b40:	4b7a      	ldr	r3, [pc, #488]	; (8012d2c <__kernel_rem_pio2+0x324>)
 8012b42:	ec51 0b10 	vmov	r0, r1, d0
 8012b46:	2200      	movs	r2, #0
 8012b48:	f7ed fd76 	bl	8000638 <__aeabi_dmul>
 8012b4c:	4602      	mov	r2, r0
 8012b4e:	460b      	mov	r3, r1
 8012b50:	4630      	mov	r0, r6
 8012b52:	4639      	mov	r1, r7
 8012b54:	f7ed fbb8 	bl	80002c8 <__aeabi_dsub>
 8012b58:	460f      	mov	r7, r1
 8012b5a:	4606      	mov	r6, r0
 8012b5c:	f7ee f81c 	bl	8000b98 <__aeabi_d2iz>
 8012b60:	9002      	str	r0, [sp, #8]
 8012b62:	f7ed fcff 	bl	8000564 <__aeabi_i2d>
 8012b66:	4602      	mov	r2, r0
 8012b68:	460b      	mov	r3, r1
 8012b6a:	4630      	mov	r0, r6
 8012b6c:	4639      	mov	r1, r7
 8012b6e:	f7ed fbab 	bl	80002c8 <__aeabi_dsub>
 8012b72:	f1ba 0f00 	cmp.w	sl, #0
 8012b76:	4606      	mov	r6, r0
 8012b78:	460f      	mov	r7, r1
 8012b7a:	dd6d      	ble.n	8012c58 <__kernel_rem_pio2+0x250>
 8012b7c:	1e61      	subs	r1, r4, #1
 8012b7e:	ab0c      	add	r3, sp, #48	; 0x30
 8012b80:	9d02      	ldr	r5, [sp, #8]
 8012b82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012b86:	f1ca 0018 	rsb	r0, sl, #24
 8012b8a:	fa43 f200 	asr.w	r2, r3, r0
 8012b8e:	4415      	add	r5, r2
 8012b90:	4082      	lsls	r2, r0
 8012b92:	1a9b      	subs	r3, r3, r2
 8012b94:	aa0c      	add	r2, sp, #48	; 0x30
 8012b96:	9502      	str	r5, [sp, #8]
 8012b98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012b9c:	f1ca 0217 	rsb	r2, sl, #23
 8012ba0:	fa43 fb02 	asr.w	fp, r3, r2
 8012ba4:	f1bb 0f00 	cmp.w	fp, #0
 8012ba8:	dd65      	ble.n	8012c76 <__kernel_rem_pio2+0x26e>
 8012baa:	9b02      	ldr	r3, [sp, #8]
 8012bac:	2200      	movs	r2, #0
 8012bae:	3301      	adds	r3, #1
 8012bb0:	9302      	str	r3, [sp, #8]
 8012bb2:	4615      	mov	r5, r2
 8012bb4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012bb8:	4294      	cmp	r4, r2
 8012bba:	f300 809f 	bgt.w	8012cfc <__kernel_rem_pio2+0x2f4>
 8012bbe:	f1ba 0f00 	cmp.w	sl, #0
 8012bc2:	dd07      	ble.n	8012bd4 <__kernel_rem_pio2+0x1cc>
 8012bc4:	f1ba 0f01 	cmp.w	sl, #1
 8012bc8:	f000 80c1 	beq.w	8012d4e <__kernel_rem_pio2+0x346>
 8012bcc:	f1ba 0f02 	cmp.w	sl, #2
 8012bd0:	f000 80c7 	beq.w	8012d62 <__kernel_rem_pio2+0x35a>
 8012bd4:	f1bb 0f02 	cmp.w	fp, #2
 8012bd8:	d14d      	bne.n	8012c76 <__kernel_rem_pio2+0x26e>
 8012bda:	4632      	mov	r2, r6
 8012bdc:	463b      	mov	r3, r7
 8012bde:	4954      	ldr	r1, [pc, #336]	; (8012d30 <__kernel_rem_pio2+0x328>)
 8012be0:	2000      	movs	r0, #0
 8012be2:	f7ed fb71 	bl	80002c8 <__aeabi_dsub>
 8012be6:	4606      	mov	r6, r0
 8012be8:	460f      	mov	r7, r1
 8012bea:	2d00      	cmp	r5, #0
 8012bec:	d043      	beq.n	8012c76 <__kernel_rem_pio2+0x26e>
 8012bee:	4650      	mov	r0, sl
 8012bf0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8012d20 <__kernel_rem_pio2+0x318>
 8012bf4:	f000 fa58 	bl	80130a8 <scalbn>
 8012bf8:	4630      	mov	r0, r6
 8012bfa:	4639      	mov	r1, r7
 8012bfc:	ec53 2b10 	vmov	r2, r3, d0
 8012c00:	f7ed fb62 	bl	80002c8 <__aeabi_dsub>
 8012c04:	4606      	mov	r6, r0
 8012c06:	460f      	mov	r7, r1
 8012c08:	e035      	b.n	8012c76 <__kernel_rem_pio2+0x26e>
 8012c0a:	4b4a      	ldr	r3, [pc, #296]	; (8012d34 <__kernel_rem_pio2+0x32c>)
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	4630      	mov	r0, r6
 8012c10:	4639      	mov	r1, r7
 8012c12:	f7ed fd11 	bl	8000638 <__aeabi_dmul>
 8012c16:	f7ed ffbf 	bl	8000b98 <__aeabi_d2iz>
 8012c1a:	f7ed fca3 	bl	8000564 <__aeabi_i2d>
 8012c1e:	4602      	mov	r2, r0
 8012c20:	460b      	mov	r3, r1
 8012c22:	ec43 2b18 	vmov	d8, r2, r3
 8012c26:	4b44      	ldr	r3, [pc, #272]	; (8012d38 <__kernel_rem_pio2+0x330>)
 8012c28:	2200      	movs	r2, #0
 8012c2a:	f7ed fd05 	bl	8000638 <__aeabi_dmul>
 8012c2e:	4602      	mov	r2, r0
 8012c30:	460b      	mov	r3, r1
 8012c32:	4630      	mov	r0, r6
 8012c34:	4639      	mov	r1, r7
 8012c36:	f7ed fb47 	bl	80002c8 <__aeabi_dsub>
 8012c3a:	f7ed ffad 	bl	8000b98 <__aeabi_d2iz>
 8012c3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012c42:	f84b 0b04 	str.w	r0, [fp], #4
 8012c46:	ec51 0b18 	vmov	r0, r1, d8
 8012c4a:	f7ed fb3f 	bl	80002cc <__adddf3>
 8012c4e:	f109 39ff 	add.w	r9, r9, #4294967295
 8012c52:	4606      	mov	r6, r0
 8012c54:	460f      	mov	r7, r1
 8012c56:	e75b      	b.n	8012b10 <__kernel_rem_pio2+0x108>
 8012c58:	d106      	bne.n	8012c68 <__kernel_rem_pio2+0x260>
 8012c5a:	1e63      	subs	r3, r4, #1
 8012c5c:	aa0c      	add	r2, sp, #48	; 0x30
 8012c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c62:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8012c66:	e79d      	b.n	8012ba4 <__kernel_rem_pio2+0x19c>
 8012c68:	4b34      	ldr	r3, [pc, #208]	; (8012d3c <__kernel_rem_pio2+0x334>)
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	f7ed ff6a 	bl	8000b44 <__aeabi_dcmpge>
 8012c70:	2800      	cmp	r0, #0
 8012c72:	d140      	bne.n	8012cf6 <__kernel_rem_pio2+0x2ee>
 8012c74:	4683      	mov	fp, r0
 8012c76:	2200      	movs	r2, #0
 8012c78:	2300      	movs	r3, #0
 8012c7a:	4630      	mov	r0, r6
 8012c7c:	4639      	mov	r1, r7
 8012c7e:	f7ed ff43 	bl	8000b08 <__aeabi_dcmpeq>
 8012c82:	2800      	cmp	r0, #0
 8012c84:	f000 80c1 	beq.w	8012e0a <__kernel_rem_pio2+0x402>
 8012c88:	1e65      	subs	r5, r4, #1
 8012c8a:	462b      	mov	r3, r5
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	9900      	ldr	r1, [sp, #0]
 8012c90:	428b      	cmp	r3, r1
 8012c92:	da6d      	bge.n	8012d70 <__kernel_rem_pio2+0x368>
 8012c94:	2a00      	cmp	r2, #0
 8012c96:	f000 808a 	beq.w	8012dae <__kernel_rem_pio2+0x3a6>
 8012c9a:	ab0c      	add	r3, sp, #48	; 0x30
 8012c9c:	f1aa 0a18 	sub.w	sl, sl, #24
 8012ca0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	f000 80ae 	beq.w	8012e06 <__kernel_rem_pio2+0x3fe>
 8012caa:	4650      	mov	r0, sl
 8012cac:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8012d20 <__kernel_rem_pio2+0x318>
 8012cb0:	f000 f9fa 	bl	80130a8 <scalbn>
 8012cb4:	1c6b      	adds	r3, r5, #1
 8012cb6:	00da      	lsls	r2, r3, #3
 8012cb8:	9205      	str	r2, [sp, #20]
 8012cba:	ec57 6b10 	vmov	r6, r7, d0
 8012cbe:	aa70      	add	r2, sp, #448	; 0x1c0
 8012cc0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8012d34 <__kernel_rem_pio2+0x32c>
 8012cc4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8012cc8:	462c      	mov	r4, r5
 8012cca:	f04f 0800 	mov.w	r8, #0
 8012cce:	2c00      	cmp	r4, #0
 8012cd0:	f280 80d4 	bge.w	8012e7c <__kernel_rem_pio2+0x474>
 8012cd4:	462c      	mov	r4, r5
 8012cd6:	2c00      	cmp	r4, #0
 8012cd8:	f2c0 8102 	blt.w	8012ee0 <__kernel_rem_pio2+0x4d8>
 8012cdc:	4b18      	ldr	r3, [pc, #96]	; (8012d40 <__kernel_rem_pio2+0x338>)
 8012cde:	461e      	mov	r6, r3
 8012ce0:	ab70      	add	r3, sp, #448	; 0x1c0
 8012ce2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8012ce6:	1b2b      	subs	r3, r5, r4
 8012ce8:	f04f 0900 	mov.w	r9, #0
 8012cec:	f04f 0a00 	mov.w	sl, #0
 8012cf0:	2700      	movs	r7, #0
 8012cf2:	9306      	str	r3, [sp, #24]
 8012cf4:	e0e6      	b.n	8012ec4 <__kernel_rem_pio2+0x4bc>
 8012cf6:	f04f 0b02 	mov.w	fp, #2
 8012cfa:	e756      	b.n	8012baa <__kernel_rem_pio2+0x1a2>
 8012cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8012d00:	bb05      	cbnz	r5, 8012d44 <__kernel_rem_pio2+0x33c>
 8012d02:	b123      	cbz	r3, 8012d0e <__kernel_rem_pio2+0x306>
 8012d04:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012d08:	f8c8 3000 	str.w	r3, [r8]
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	3201      	adds	r2, #1
 8012d10:	f108 0804 	add.w	r8, r8, #4
 8012d14:	461d      	mov	r5, r3
 8012d16:	e74f      	b.n	8012bb8 <__kernel_rem_pio2+0x1b0>
	...
 8012d24:	3ff00000 	.word	0x3ff00000
 8012d28:	0801ac58 	.word	0x0801ac58
 8012d2c:	40200000 	.word	0x40200000
 8012d30:	3ff00000 	.word	0x3ff00000
 8012d34:	3e700000 	.word	0x3e700000
 8012d38:	41700000 	.word	0x41700000
 8012d3c:	3fe00000 	.word	0x3fe00000
 8012d40:	0801ac18 	.word	0x0801ac18
 8012d44:	1acb      	subs	r3, r1, r3
 8012d46:	f8c8 3000 	str.w	r3, [r8]
 8012d4a:	462b      	mov	r3, r5
 8012d4c:	e7df      	b.n	8012d0e <__kernel_rem_pio2+0x306>
 8012d4e:	1e62      	subs	r2, r4, #1
 8012d50:	ab0c      	add	r3, sp, #48	; 0x30
 8012d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d56:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012d5a:	a90c      	add	r1, sp, #48	; 0x30
 8012d5c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012d60:	e738      	b.n	8012bd4 <__kernel_rem_pio2+0x1cc>
 8012d62:	1e62      	subs	r2, r4, #1
 8012d64:	ab0c      	add	r3, sp, #48	; 0x30
 8012d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d6a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012d6e:	e7f4      	b.n	8012d5a <__kernel_rem_pio2+0x352>
 8012d70:	a90c      	add	r1, sp, #48	; 0x30
 8012d72:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012d76:	3b01      	subs	r3, #1
 8012d78:	430a      	orrs	r2, r1
 8012d7a:	e788      	b.n	8012c8e <__kernel_rem_pio2+0x286>
 8012d7c:	3301      	adds	r3, #1
 8012d7e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012d82:	2900      	cmp	r1, #0
 8012d84:	d0fa      	beq.n	8012d7c <__kernel_rem_pio2+0x374>
 8012d86:	9a08      	ldr	r2, [sp, #32]
 8012d88:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8012d8c:	446a      	add	r2, sp
 8012d8e:	3a98      	subs	r2, #152	; 0x98
 8012d90:	9208      	str	r2, [sp, #32]
 8012d92:	9a06      	ldr	r2, [sp, #24]
 8012d94:	a920      	add	r1, sp, #128	; 0x80
 8012d96:	18a2      	adds	r2, r4, r2
 8012d98:	18e3      	adds	r3, r4, r3
 8012d9a:	f104 0801 	add.w	r8, r4, #1
 8012d9e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8012da2:	9302      	str	r3, [sp, #8]
 8012da4:	9b02      	ldr	r3, [sp, #8]
 8012da6:	4543      	cmp	r3, r8
 8012da8:	da04      	bge.n	8012db4 <__kernel_rem_pio2+0x3ac>
 8012daa:	461c      	mov	r4, r3
 8012dac:	e6a2      	b.n	8012af4 <__kernel_rem_pio2+0xec>
 8012dae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012db0:	2301      	movs	r3, #1
 8012db2:	e7e4      	b.n	8012d7e <__kernel_rem_pio2+0x376>
 8012db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012db6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012dba:	f7ed fbd3 	bl	8000564 <__aeabi_i2d>
 8012dbe:	e8e5 0102 	strd	r0, r1, [r5], #8
 8012dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dc4:	46ab      	mov	fp, r5
 8012dc6:	461c      	mov	r4, r3
 8012dc8:	f04f 0900 	mov.w	r9, #0
 8012dcc:	2600      	movs	r6, #0
 8012dce:	2700      	movs	r7, #0
 8012dd0:	9b05      	ldr	r3, [sp, #20]
 8012dd2:	4599      	cmp	r9, r3
 8012dd4:	dd06      	ble.n	8012de4 <__kernel_rem_pio2+0x3dc>
 8012dd6:	9b08      	ldr	r3, [sp, #32]
 8012dd8:	e8e3 6702 	strd	r6, r7, [r3], #8
 8012ddc:	f108 0801 	add.w	r8, r8, #1
 8012de0:	9308      	str	r3, [sp, #32]
 8012de2:	e7df      	b.n	8012da4 <__kernel_rem_pio2+0x39c>
 8012de4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012de8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012dec:	f7ed fc24 	bl	8000638 <__aeabi_dmul>
 8012df0:	4602      	mov	r2, r0
 8012df2:	460b      	mov	r3, r1
 8012df4:	4630      	mov	r0, r6
 8012df6:	4639      	mov	r1, r7
 8012df8:	f7ed fa68 	bl	80002cc <__adddf3>
 8012dfc:	f109 0901 	add.w	r9, r9, #1
 8012e00:	4606      	mov	r6, r0
 8012e02:	460f      	mov	r7, r1
 8012e04:	e7e4      	b.n	8012dd0 <__kernel_rem_pio2+0x3c8>
 8012e06:	3d01      	subs	r5, #1
 8012e08:	e747      	b.n	8012c9a <__kernel_rem_pio2+0x292>
 8012e0a:	ec47 6b10 	vmov	d0, r6, r7
 8012e0e:	f1ca 0000 	rsb	r0, sl, #0
 8012e12:	f000 f949 	bl	80130a8 <scalbn>
 8012e16:	ec57 6b10 	vmov	r6, r7, d0
 8012e1a:	4ba0      	ldr	r3, [pc, #640]	; (801309c <__kernel_rem_pio2+0x694>)
 8012e1c:	ee10 0a10 	vmov	r0, s0
 8012e20:	2200      	movs	r2, #0
 8012e22:	4639      	mov	r1, r7
 8012e24:	f7ed fe8e 	bl	8000b44 <__aeabi_dcmpge>
 8012e28:	b1f8      	cbz	r0, 8012e6a <__kernel_rem_pio2+0x462>
 8012e2a:	4b9d      	ldr	r3, [pc, #628]	; (80130a0 <__kernel_rem_pio2+0x698>)
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	4630      	mov	r0, r6
 8012e30:	4639      	mov	r1, r7
 8012e32:	f7ed fc01 	bl	8000638 <__aeabi_dmul>
 8012e36:	f7ed feaf 	bl	8000b98 <__aeabi_d2iz>
 8012e3a:	4680      	mov	r8, r0
 8012e3c:	f7ed fb92 	bl	8000564 <__aeabi_i2d>
 8012e40:	4b96      	ldr	r3, [pc, #600]	; (801309c <__kernel_rem_pio2+0x694>)
 8012e42:	2200      	movs	r2, #0
 8012e44:	f7ed fbf8 	bl	8000638 <__aeabi_dmul>
 8012e48:	460b      	mov	r3, r1
 8012e4a:	4602      	mov	r2, r0
 8012e4c:	4639      	mov	r1, r7
 8012e4e:	4630      	mov	r0, r6
 8012e50:	f7ed fa3a 	bl	80002c8 <__aeabi_dsub>
 8012e54:	f7ed fea0 	bl	8000b98 <__aeabi_d2iz>
 8012e58:	1c65      	adds	r5, r4, #1
 8012e5a:	ab0c      	add	r3, sp, #48	; 0x30
 8012e5c:	f10a 0a18 	add.w	sl, sl, #24
 8012e60:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012e64:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012e68:	e71f      	b.n	8012caa <__kernel_rem_pio2+0x2a2>
 8012e6a:	4630      	mov	r0, r6
 8012e6c:	4639      	mov	r1, r7
 8012e6e:	f7ed fe93 	bl	8000b98 <__aeabi_d2iz>
 8012e72:	ab0c      	add	r3, sp, #48	; 0x30
 8012e74:	4625      	mov	r5, r4
 8012e76:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012e7a:	e716      	b.n	8012caa <__kernel_rem_pio2+0x2a2>
 8012e7c:	ab0c      	add	r3, sp, #48	; 0x30
 8012e7e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012e82:	f7ed fb6f 	bl	8000564 <__aeabi_i2d>
 8012e86:	4632      	mov	r2, r6
 8012e88:	463b      	mov	r3, r7
 8012e8a:	f7ed fbd5 	bl	8000638 <__aeabi_dmul>
 8012e8e:	4642      	mov	r2, r8
 8012e90:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012e94:	464b      	mov	r3, r9
 8012e96:	4630      	mov	r0, r6
 8012e98:	4639      	mov	r1, r7
 8012e9a:	f7ed fbcd 	bl	8000638 <__aeabi_dmul>
 8012e9e:	3c01      	subs	r4, #1
 8012ea0:	4606      	mov	r6, r0
 8012ea2:	460f      	mov	r7, r1
 8012ea4:	e713      	b.n	8012cce <__kernel_rem_pio2+0x2c6>
 8012ea6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8012eaa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8012eae:	f7ed fbc3 	bl	8000638 <__aeabi_dmul>
 8012eb2:	4602      	mov	r2, r0
 8012eb4:	460b      	mov	r3, r1
 8012eb6:	4648      	mov	r0, r9
 8012eb8:	4651      	mov	r1, sl
 8012eba:	f7ed fa07 	bl	80002cc <__adddf3>
 8012ebe:	3701      	adds	r7, #1
 8012ec0:	4681      	mov	r9, r0
 8012ec2:	468a      	mov	sl, r1
 8012ec4:	9b00      	ldr	r3, [sp, #0]
 8012ec6:	429f      	cmp	r7, r3
 8012ec8:	dc02      	bgt.n	8012ed0 <__kernel_rem_pio2+0x4c8>
 8012eca:	9b06      	ldr	r3, [sp, #24]
 8012ecc:	429f      	cmp	r7, r3
 8012ece:	ddea      	ble.n	8012ea6 <__kernel_rem_pio2+0x49e>
 8012ed0:	9a06      	ldr	r2, [sp, #24]
 8012ed2:	ab48      	add	r3, sp, #288	; 0x120
 8012ed4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8012ed8:	e9c6 9a00 	strd	r9, sl, [r6]
 8012edc:	3c01      	subs	r4, #1
 8012ede:	e6fa      	b.n	8012cd6 <__kernel_rem_pio2+0x2ce>
 8012ee0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012ee2:	2b02      	cmp	r3, #2
 8012ee4:	dc0b      	bgt.n	8012efe <__kernel_rem_pio2+0x4f6>
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	dc39      	bgt.n	8012f5e <__kernel_rem_pio2+0x556>
 8012eea:	d05d      	beq.n	8012fa8 <__kernel_rem_pio2+0x5a0>
 8012eec:	9b02      	ldr	r3, [sp, #8]
 8012eee:	f003 0007 	and.w	r0, r3, #7
 8012ef2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8012ef6:	ecbd 8b02 	vpop	{d8}
 8012efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012efe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012f00:	2b03      	cmp	r3, #3
 8012f02:	d1f3      	bne.n	8012eec <__kernel_rem_pio2+0x4e4>
 8012f04:	9b05      	ldr	r3, [sp, #20]
 8012f06:	9500      	str	r5, [sp, #0]
 8012f08:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8012f0c:	eb0d 0403 	add.w	r4, sp, r3
 8012f10:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8012f14:	46a2      	mov	sl, r4
 8012f16:	9b00      	ldr	r3, [sp, #0]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	f1aa 0a08 	sub.w	sl, sl, #8
 8012f1e:	dc69      	bgt.n	8012ff4 <__kernel_rem_pio2+0x5ec>
 8012f20:	46aa      	mov	sl, r5
 8012f22:	f1ba 0f01 	cmp.w	sl, #1
 8012f26:	f1a4 0408 	sub.w	r4, r4, #8
 8012f2a:	f300 8083 	bgt.w	8013034 <__kernel_rem_pio2+0x62c>
 8012f2e:	9c05      	ldr	r4, [sp, #20]
 8012f30:	ab48      	add	r3, sp, #288	; 0x120
 8012f32:	441c      	add	r4, r3
 8012f34:	2000      	movs	r0, #0
 8012f36:	2100      	movs	r1, #0
 8012f38:	2d01      	cmp	r5, #1
 8012f3a:	f300 809a 	bgt.w	8013072 <__kernel_rem_pio2+0x66a>
 8012f3e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8012f42:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012f46:	f1bb 0f00 	cmp.w	fp, #0
 8012f4a:	f040 8098 	bne.w	801307e <__kernel_rem_pio2+0x676>
 8012f4e:	9b04      	ldr	r3, [sp, #16]
 8012f50:	e9c3 7800 	strd	r7, r8, [r3]
 8012f54:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012f58:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012f5c:	e7c6      	b.n	8012eec <__kernel_rem_pio2+0x4e4>
 8012f5e:	9e05      	ldr	r6, [sp, #20]
 8012f60:	ab48      	add	r3, sp, #288	; 0x120
 8012f62:	441e      	add	r6, r3
 8012f64:	462c      	mov	r4, r5
 8012f66:	2000      	movs	r0, #0
 8012f68:	2100      	movs	r1, #0
 8012f6a:	2c00      	cmp	r4, #0
 8012f6c:	da33      	bge.n	8012fd6 <__kernel_rem_pio2+0x5ce>
 8012f6e:	f1bb 0f00 	cmp.w	fp, #0
 8012f72:	d036      	beq.n	8012fe2 <__kernel_rem_pio2+0x5da>
 8012f74:	4602      	mov	r2, r0
 8012f76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f7a:	9c04      	ldr	r4, [sp, #16]
 8012f7c:	e9c4 2300 	strd	r2, r3, [r4]
 8012f80:	4602      	mov	r2, r0
 8012f82:	460b      	mov	r3, r1
 8012f84:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8012f88:	f7ed f99e 	bl	80002c8 <__aeabi_dsub>
 8012f8c:	ae4a      	add	r6, sp, #296	; 0x128
 8012f8e:	2401      	movs	r4, #1
 8012f90:	42a5      	cmp	r5, r4
 8012f92:	da29      	bge.n	8012fe8 <__kernel_rem_pio2+0x5e0>
 8012f94:	f1bb 0f00 	cmp.w	fp, #0
 8012f98:	d002      	beq.n	8012fa0 <__kernel_rem_pio2+0x598>
 8012f9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f9e:	4619      	mov	r1, r3
 8012fa0:	9b04      	ldr	r3, [sp, #16]
 8012fa2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012fa6:	e7a1      	b.n	8012eec <__kernel_rem_pio2+0x4e4>
 8012fa8:	9c05      	ldr	r4, [sp, #20]
 8012faa:	ab48      	add	r3, sp, #288	; 0x120
 8012fac:	441c      	add	r4, r3
 8012fae:	2000      	movs	r0, #0
 8012fb0:	2100      	movs	r1, #0
 8012fb2:	2d00      	cmp	r5, #0
 8012fb4:	da09      	bge.n	8012fca <__kernel_rem_pio2+0x5c2>
 8012fb6:	f1bb 0f00 	cmp.w	fp, #0
 8012fba:	d002      	beq.n	8012fc2 <__kernel_rem_pio2+0x5ba>
 8012fbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012fc0:	4619      	mov	r1, r3
 8012fc2:	9b04      	ldr	r3, [sp, #16]
 8012fc4:	e9c3 0100 	strd	r0, r1, [r3]
 8012fc8:	e790      	b.n	8012eec <__kernel_rem_pio2+0x4e4>
 8012fca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012fce:	f7ed f97d 	bl	80002cc <__adddf3>
 8012fd2:	3d01      	subs	r5, #1
 8012fd4:	e7ed      	b.n	8012fb2 <__kernel_rem_pio2+0x5aa>
 8012fd6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012fda:	f7ed f977 	bl	80002cc <__adddf3>
 8012fde:	3c01      	subs	r4, #1
 8012fe0:	e7c3      	b.n	8012f6a <__kernel_rem_pio2+0x562>
 8012fe2:	4602      	mov	r2, r0
 8012fe4:	460b      	mov	r3, r1
 8012fe6:	e7c8      	b.n	8012f7a <__kernel_rem_pio2+0x572>
 8012fe8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012fec:	f7ed f96e 	bl	80002cc <__adddf3>
 8012ff0:	3401      	adds	r4, #1
 8012ff2:	e7cd      	b.n	8012f90 <__kernel_rem_pio2+0x588>
 8012ff4:	e9da 8900 	ldrd	r8, r9, [sl]
 8012ff8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012ffc:	9b00      	ldr	r3, [sp, #0]
 8012ffe:	3b01      	subs	r3, #1
 8013000:	9300      	str	r3, [sp, #0]
 8013002:	4632      	mov	r2, r6
 8013004:	463b      	mov	r3, r7
 8013006:	4640      	mov	r0, r8
 8013008:	4649      	mov	r1, r9
 801300a:	f7ed f95f 	bl	80002cc <__adddf3>
 801300e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013012:	4602      	mov	r2, r0
 8013014:	460b      	mov	r3, r1
 8013016:	4640      	mov	r0, r8
 8013018:	4649      	mov	r1, r9
 801301a:	f7ed f955 	bl	80002c8 <__aeabi_dsub>
 801301e:	4632      	mov	r2, r6
 8013020:	463b      	mov	r3, r7
 8013022:	f7ed f953 	bl	80002cc <__adddf3>
 8013026:	ed9d 7b06 	vldr	d7, [sp, #24]
 801302a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801302e:	ed8a 7b00 	vstr	d7, [sl]
 8013032:	e770      	b.n	8012f16 <__kernel_rem_pio2+0x50e>
 8013034:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013038:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801303c:	4640      	mov	r0, r8
 801303e:	4632      	mov	r2, r6
 8013040:	463b      	mov	r3, r7
 8013042:	4649      	mov	r1, r9
 8013044:	f7ed f942 	bl	80002cc <__adddf3>
 8013048:	e9cd 0100 	strd	r0, r1, [sp]
 801304c:	4602      	mov	r2, r0
 801304e:	460b      	mov	r3, r1
 8013050:	4640      	mov	r0, r8
 8013052:	4649      	mov	r1, r9
 8013054:	f7ed f938 	bl	80002c8 <__aeabi_dsub>
 8013058:	4632      	mov	r2, r6
 801305a:	463b      	mov	r3, r7
 801305c:	f7ed f936 	bl	80002cc <__adddf3>
 8013060:	ed9d 7b00 	vldr	d7, [sp]
 8013064:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013068:	ed84 7b00 	vstr	d7, [r4]
 801306c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013070:	e757      	b.n	8012f22 <__kernel_rem_pio2+0x51a>
 8013072:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013076:	f7ed f929 	bl	80002cc <__adddf3>
 801307a:	3d01      	subs	r5, #1
 801307c:	e75c      	b.n	8012f38 <__kernel_rem_pio2+0x530>
 801307e:	9b04      	ldr	r3, [sp, #16]
 8013080:	9a04      	ldr	r2, [sp, #16]
 8013082:	601f      	str	r7, [r3, #0]
 8013084:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8013088:	605c      	str	r4, [r3, #4]
 801308a:	609d      	str	r5, [r3, #8]
 801308c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013090:	60d3      	str	r3, [r2, #12]
 8013092:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013096:	6110      	str	r0, [r2, #16]
 8013098:	6153      	str	r3, [r2, #20]
 801309a:	e727      	b.n	8012eec <__kernel_rem_pio2+0x4e4>
 801309c:	41700000 	.word	0x41700000
 80130a0:	3e700000 	.word	0x3e700000
 80130a4:	00000000 	.word	0x00000000

080130a8 <scalbn>:
 80130a8:	b570      	push	{r4, r5, r6, lr}
 80130aa:	ec55 4b10 	vmov	r4, r5, d0
 80130ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80130b2:	4606      	mov	r6, r0
 80130b4:	462b      	mov	r3, r5
 80130b6:	b999      	cbnz	r1, 80130e0 <scalbn+0x38>
 80130b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80130bc:	4323      	orrs	r3, r4
 80130be:	d03f      	beq.n	8013140 <scalbn+0x98>
 80130c0:	4b35      	ldr	r3, [pc, #212]	; (8013198 <scalbn+0xf0>)
 80130c2:	4629      	mov	r1, r5
 80130c4:	ee10 0a10 	vmov	r0, s0
 80130c8:	2200      	movs	r2, #0
 80130ca:	f7ed fab5 	bl	8000638 <__aeabi_dmul>
 80130ce:	4b33      	ldr	r3, [pc, #204]	; (801319c <scalbn+0xf4>)
 80130d0:	429e      	cmp	r6, r3
 80130d2:	4604      	mov	r4, r0
 80130d4:	460d      	mov	r5, r1
 80130d6:	da10      	bge.n	80130fa <scalbn+0x52>
 80130d8:	a327      	add	r3, pc, #156	; (adr r3, 8013178 <scalbn+0xd0>)
 80130da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130de:	e01f      	b.n	8013120 <scalbn+0x78>
 80130e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80130e4:	4291      	cmp	r1, r2
 80130e6:	d10c      	bne.n	8013102 <scalbn+0x5a>
 80130e8:	ee10 2a10 	vmov	r2, s0
 80130ec:	4620      	mov	r0, r4
 80130ee:	4629      	mov	r1, r5
 80130f0:	f7ed f8ec 	bl	80002cc <__adddf3>
 80130f4:	4604      	mov	r4, r0
 80130f6:	460d      	mov	r5, r1
 80130f8:	e022      	b.n	8013140 <scalbn+0x98>
 80130fa:	460b      	mov	r3, r1
 80130fc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013100:	3936      	subs	r1, #54	; 0x36
 8013102:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013106:	4296      	cmp	r6, r2
 8013108:	dd0d      	ble.n	8013126 <scalbn+0x7e>
 801310a:	2d00      	cmp	r5, #0
 801310c:	a11c      	add	r1, pc, #112	; (adr r1, 8013180 <scalbn+0xd8>)
 801310e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013112:	da02      	bge.n	801311a <scalbn+0x72>
 8013114:	a11c      	add	r1, pc, #112	; (adr r1, 8013188 <scalbn+0xe0>)
 8013116:	e9d1 0100 	ldrd	r0, r1, [r1]
 801311a:	a319      	add	r3, pc, #100	; (adr r3, 8013180 <scalbn+0xd8>)
 801311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013120:	f7ed fa8a 	bl	8000638 <__aeabi_dmul>
 8013124:	e7e6      	b.n	80130f4 <scalbn+0x4c>
 8013126:	1872      	adds	r2, r6, r1
 8013128:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801312c:	428a      	cmp	r2, r1
 801312e:	dcec      	bgt.n	801310a <scalbn+0x62>
 8013130:	2a00      	cmp	r2, #0
 8013132:	dd08      	ble.n	8013146 <scalbn+0x9e>
 8013134:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013138:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801313c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013140:	ec45 4b10 	vmov	d0, r4, r5
 8013144:	bd70      	pop	{r4, r5, r6, pc}
 8013146:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801314a:	da08      	bge.n	801315e <scalbn+0xb6>
 801314c:	2d00      	cmp	r5, #0
 801314e:	a10a      	add	r1, pc, #40	; (adr r1, 8013178 <scalbn+0xd0>)
 8013150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013154:	dac0      	bge.n	80130d8 <scalbn+0x30>
 8013156:	a10e      	add	r1, pc, #56	; (adr r1, 8013190 <scalbn+0xe8>)
 8013158:	e9d1 0100 	ldrd	r0, r1, [r1]
 801315c:	e7bc      	b.n	80130d8 <scalbn+0x30>
 801315e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013162:	3236      	adds	r2, #54	; 0x36
 8013164:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013168:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801316c:	4620      	mov	r0, r4
 801316e:	4b0c      	ldr	r3, [pc, #48]	; (80131a0 <scalbn+0xf8>)
 8013170:	2200      	movs	r2, #0
 8013172:	e7d5      	b.n	8013120 <scalbn+0x78>
 8013174:	f3af 8000 	nop.w
 8013178:	c2f8f359 	.word	0xc2f8f359
 801317c:	01a56e1f 	.word	0x01a56e1f
 8013180:	8800759c 	.word	0x8800759c
 8013184:	7e37e43c 	.word	0x7e37e43c
 8013188:	8800759c 	.word	0x8800759c
 801318c:	fe37e43c 	.word	0xfe37e43c
 8013190:	c2f8f359 	.word	0xc2f8f359
 8013194:	81a56e1f 	.word	0x81a56e1f
 8013198:	43500000 	.word	0x43500000
 801319c:	ffff3cb0 	.word	0xffff3cb0
 80131a0:	3c900000 	.word	0x3c900000
 80131a4:	00000000 	.word	0x00000000

080131a8 <floor>:
 80131a8:	ec51 0b10 	vmov	r0, r1, d0
 80131ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80131b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131b4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80131b8:	2e13      	cmp	r6, #19
 80131ba:	ee10 5a10 	vmov	r5, s0
 80131be:	ee10 8a10 	vmov	r8, s0
 80131c2:	460c      	mov	r4, r1
 80131c4:	dc31      	bgt.n	801322a <floor+0x82>
 80131c6:	2e00      	cmp	r6, #0
 80131c8:	da14      	bge.n	80131f4 <floor+0x4c>
 80131ca:	a333      	add	r3, pc, #204	; (adr r3, 8013298 <floor+0xf0>)
 80131cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d0:	f7ed f87c 	bl	80002cc <__adddf3>
 80131d4:	2200      	movs	r2, #0
 80131d6:	2300      	movs	r3, #0
 80131d8:	f7ed fcbe 	bl	8000b58 <__aeabi_dcmpgt>
 80131dc:	b138      	cbz	r0, 80131ee <floor+0x46>
 80131de:	2c00      	cmp	r4, #0
 80131e0:	da53      	bge.n	801328a <floor+0xe2>
 80131e2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80131e6:	4325      	orrs	r5, r4
 80131e8:	d052      	beq.n	8013290 <floor+0xe8>
 80131ea:	4c2d      	ldr	r4, [pc, #180]	; (80132a0 <floor+0xf8>)
 80131ec:	2500      	movs	r5, #0
 80131ee:	4621      	mov	r1, r4
 80131f0:	4628      	mov	r0, r5
 80131f2:	e024      	b.n	801323e <floor+0x96>
 80131f4:	4f2b      	ldr	r7, [pc, #172]	; (80132a4 <floor+0xfc>)
 80131f6:	4137      	asrs	r7, r6
 80131f8:	ea01 0307 	and.w	r3, r1, r7
 80131fc:	4303      	orrs	r3, r0
 80131fe:	d01e      	beq.n	801323e <floor+0x96>
 8013200:	a325      	add	r3, pc, #148	; (adr r3, 8013298 <floor+0xf0>)
 8013202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013206:	f7ed f861 	bl	80002cc <__adddf3>
 801320a:	2200      	movs	r2, #0
 801320c:	2300      	movs	r3, #0
 801320e:	f7ed fca3 	bl	8000b58 <__aeabi_dcmpgt>
 8013212:	2800      	cmp	r0, #0
 8013214:	d0eb      	beq.n	80131ee <floor+0x46>
 8013216:	2c00      	cmp	r4, #0
 8013218:	bfbe      	ittt	lt
 801321a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801321e:	4133      	asrlt	r3, r6
 8013220:	18e4      	addlt	r4, r4, r3
 8013222:	ea24 0407 	bic.w	r4, r4, r7
 8013226:	2500      	movs	r5, #0
 8013228:	e7e1      	b.n	80131ee <floor+0x46>
 801322a:	2e33      	cmp	r6, #51	; 0x33
 801322c:	dd0b      	ble.n	8013246 <floor+0x9e>
 801322e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013232:	d104      	bne.n	801323e <floor+0x96>
 8013234:	ee10 2a10 	vmov	r2, s0
 8013238:	460b      	mov	r3, r1
 801323a:	f7ed f847 	bl	80002cc <__adddf3>
 801323e:	ec41 0b10 	vmov	d0, r0, r1
 8013242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013246:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801324a:	f04f 37ff 	mov.w	r7, #4294967295
 801324e:	40df      	lsrs	r7, r3
 8013250:	4238      	tst	r0, r7
 8013252:	d0f4      	beq.n	801323e <floor+0x96>
 8013254:	a310      	add	r3, pc, #64	; (adr r3, 8013298 <floor+0xf0>)
 8013256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801325a:	f7ed f837 	bl	80002cc <__adddf3>
 801325e:	2200      	movs	r2, #0
 8013260:	2300      	movs	r3, #0
 8013262:	f7ed fc79 	bl	8000b58 <__aeabi_dcmpgt>
 8013266:	2800      	cmp	r0, #0
 8013268:	d0c1      	beq.n	80131ee <floor+0x46>
 801326a:	2c00      	cmp	r4, #0
 801326c:	da0a      	bge.n	8013284 <floor+0xdc>
 801326e:	2e14      	cmp	r6, #20
 8013270:	d101      	bne.n	8013276 <floor+0xce>
 8013272:	3401      	adds	r4, #1
 8013274:	e006      	b.n	8013284 <floor+0xdc>
 8013276:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801327a:	2301      	movs	r3, #1
 801327c:	40b3      	lsls	r3, r6
 801327e:	441d      	add	r5, r3
 8013280:	45a8      	cmp	r8, r5
 8013282:	d8f6      	bhi.n	8013272 <floor+0xca>
 8013284:	ea25 0507 	bic.w	r5, r5, r7
 8013288:	e7b1      	b.n	80131ee <floor+0x46>
 801328a:	2500      	movs	r5, #0
 801328c:	462c      	mov	r4, r5
 801328e:	e7ae      	b.n	80131ee <floor+0x46>
 8013290:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8013294:	e7ab      	b.n	80131ee <floor+0x46>
 8013296:	bf00      	nop
 8013298:	8800759c 	.word	0x8800759c
 801329c:	7e37e43c 	.word	0x7e37e43c
 80132a0:	bff00000 	.word	0xbff00000
 80132a4:	000fffff 	.word	0x000fffff

080132a8 <atoi>:
 80132a8:	220a      	movs	r2, #10
 80132aa:	2100      	movs	r1, #0
 80132ac:	f000 bff0 	b.w	8014290 <strtol>

080132b0 <malloc>:
 80132b0:	4b02      	ldr	r3, [pc, #8]	; (80132bc <malloc+0xc>)
 80132b2:	4601      	mov	r1, r0
 80132b4:	6818      	ldr	r0, [r3, #0]
 80132b6:	f000 b82b 	b.w	8013310 <_malloc_r>
 80132ba:	bf00      	nop
 80132bc:	200001f0 	.word	0x200001f0

080132c0 <free>:
 80132c0:	4b02      	ldr	r3, [pc, #8]	; (80132cc <free+0xc>)
 80132c2:	4601      	mov	r1, r0
 80132c4:	6818      	ldr	r0, [r3, #0]
 80132c6:	f002 be45 	b.w	8015f54 <_free_r>
 80132ca:	bf00      	nop
 80132cc:	200001f0 	.word	0x200001f0

080132d0 <sbrk_aligned>:
 80132d0:	b570      	push	{r4, r5, r6, lr}
 80132d2:	4e0e      	ldr	r6, [pc, #56]	; (801330c <sbrk_aligned+0x3c>)
 80132d4:	460c      	mov	r4, r1
 80132d6:	6831      	ldr	r1, [r6, #0]
 80132d8:	4605      	mov	r5, r0
 80132da:	b911      	cbnz	r1, 80132e2 <sbrk_aligned+0x12>
 80132dc:	f001 ff34 	bl	8015148 <_sbrk_r>
 80132e0:	6030      	str	r0, [r6, #0]
 80132e2:	4621      	mov	r1, r4
 80132e4:	4628      	mov	r0, r5
 80132e6:	f001 ff2f 	bl	8015148 <_sbrk_r>
 80132ea:	1c43      	adds	r3, r0, #1
 80132ec:	d00a      	beq.n	8013304 <sbrk_aligned+0x34>
 80132ee:	1cc4      	adds	r4, r0, #3
 80132f0:	f024 0403 	bic.w	r4, r4, #3
 80132f4:	42a0      	cmp	r0, r4
 80132f6:	d007      	beq.n	8013308 <sbrk_aligned+0x38>
 80132f8:	1a21      	subs	r1, r4, r0
 80132fa:	4628      	mov	r0, r5
 80132fc:	f001 ff24 	bl	8015148 <_sbrk_r>
 8013300:	3001      	adds	r0, #1
 8013302:	d101      	bne.n	8013308 <sbrk_aligned+0x38>
 8013304:	f04f 34ff 	mov.w	r4, #4294967295
 8013308:	4620      	mov	r0, r4
 801330a:	bd70      	pop	{r4, r5, r6, pc}
 801330c:	200009fc 	.word	0x200009fc

08013310 <_malloc_r>:
 8013310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013314:	1ccd      	adds	r5, r1, #3
 8013316:	f025 0503 	bic.w	r5, r5, #3
 801331a:	3508      	adds	r5, #8
 801331c:	2d0c      	cmp	r5, #12
 801331e:	bf38      	it	cc
 8013320:	250c      	movcc	r5, #12
 8013322:	2d00      	cmp	r5, #0
 8013324:	4607      	mov	r7, r0
 8013326:	db01      	blt.n	801332c <_malloc_r+0x1c>
 8013328:	42a9      	cmp	r1, r5
 801332a:	d905      	bls.n	8013338 <_malloc_r+0x28>
 801332c:	230c      	movs	r3, #12
 801332e:	603b      	str	r3, [r7, #0]
 8013330:	2600      	movs	r6, #0
 8013332:	4630      	mov	r0, r6
 8013334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013338:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801340c <_malloc_r+0xfc>
 801333c:	f000 f868 	bl	8013410 <__malloc_lock>
 8013340:	f8d8 3000 	ldr.w	r3, [r8]
 8013344:	461c      	mov	r4, r3
 8013346:	bb5c      	cbnz	r4, 80133a0 <_malloc_r+0x90>
 8013348:	4629      	mov	r1, r5
 801334a:	4638      	mov	r0, r7
 801334c:	f7ff ffc0 	bl	80132d0 <sbrk_aligned>
 8013350:	1c43      	adds	r3, r0, #1
 8013352:	4604      	mov	r4, r0
 8013354:	d155      	bne.n	8013402 <_malloc_r+0xf2>
 8013356:	f8d8 4000 	ldr.w	r4, [r8]
 801335a:	4626      	mov	r6, r4
 801335c:	2e00      	cmp	r6, #0
 801335e:	d145      	bne.n	80133ec <_malloc_r+0xdc>
 8013360:	2c00      	cmp	r4, #0
 8013362:	d048      	beq.n	80133f6 <_malloc_r+0xe6>
 8013364:	6823      	ldr	r3, [r4, #0]
 8013366:	4631      	mov	r1, r6
 8013368:	4638      	mov	r0, r7
 801336a:	eb04 0903 	add.w	r9, r4, r3
 801336e:	f001 feeb 	bl	8015148 <_sbrk_r>
 8013372:	4581      	cmp	r9, r0
 8013374:	d13f      	bne.n	80133f6 <_malloc_r+0xe6>
 8013376:	6821      	ldr	r1, [r4, #0]
 8013378:	1a6d      	subs	r5, r5, r1
 801337a:	4629      	mov	r1, r5
 801337c:	4638      	mov	r0, r7
 801337e:	f7ff ffa7 	bl	80132d0 <sbrk_aligned>
 8013382:	3001      	adds	r0, #1
 8013384:	d037      	beq.n	80133f6 <_malloc_r+0xe6>
 8013386:	6823      	ldr	r3, [r4, #0]
 8013388:	442b      	add	r3, r5
 801338a:	6023      	str	r3, [r4, #0]
 801338c:	f8d8 3000 	ldr.w	r3, [r8]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d038      	beq.n	8013406 <_malloc_r+0xf6>
 8013394:	685a      	ldr	r2, [r3, #4]
 8013396:	42a2      	cmp	r2, r4
 8013398:	d12b      	bne.n	80133f2 <_malloc_r+0xe2>
 801339a:	2200      	movs	r2, #0
 801339c:	605a      	str	r2, [r3, #4]
 801339e:	e00f      	b.n	80133c0 <_malloc_r+0xb0>
 80133a0:	6822      	ldr	r2, [r4, #0]
 80133a2:	1b52      	subs	r2, r2, r5
 80133a4:	d41f      	bmi.n	80133e6 <_malloc_r+0xd6>
 80133a6:	2a0b      	cmp	r2, #11
 80133a8:	d917      	bls.n	80133da <_malloc_r+0xca>
 80133aa:	1961      	adds	r1, r4, r5
 80133ac:	42a3      	cmp	r3, r4
 80133ae:	6025      	str	r5, [r4, #0]
 80133b0:	bf18      	it	ne
 80133b2:	6059      	strne	r1, [r3, #4]
 80133b4:	6863      	ldr	r3, [r4, #4]
 80133b6:	bf08      	it	eq
 80133b8:	f8c8 1000 	streq.w	r1, [r8]
 80133bc:	5162      	str	r2, [r4, r5]
 80133be:	604b      	str	r3, [r1, #4]
 80133c0:	4638      	mov	r0, r7
 80133c2:	f104 060b 	add.w	r6, r4, #11
 80133c6:	f000 f829 	bl	801341c <__malloc_unlock>
 80133ca:	f026 0607 	bic.w	r6, r6, #7
 80133ce:	1d23      	adds	r3, r4, #4
 80133d0:	1af2      	subs	r2, r6, r3
 80133d2:	d0ae      	beq.n	8013332 <_malloc_r+0x22>
 80133d4:	1b9b      	subs	r3, r3, r6
 80133d6:	50a3      	str	r3, [r4, r2]
 80133d8:	e7ab      	b.n	8013332 <_malloc_r+0x22>
 80133da:	42a3      	cmp	r3, r4
 80133dc:	6862      	ldr	r2, [r4, #4]
 80133de:	d1dd      	bne.n	801339c <_malloc_r+0x8c>
 80133e0:	f8c8 2000 	str.w	r2, [r8]
 80133e4:	e7ec      	b.n	80133c0 <_malloc_r+0xb0>
 80133e6:	4623      	mov	r3, r4
 80133e8:	6864      	ldr	r4, [r4, #4]
 80133ea:	e7ac      	b.n	8013346 <_malloc_r+0x36>
 80133ec:	4634      	mov	r4, r6
 80133ee:	6876      	ldr	r6, [r6, #4]
 80133f0:	e7b4      	b.n	801335c <_malloc_r+0x4c>
 80133f2:	4613      	mov	r3, r2
 80133f4:	e7cc      	b.n	8013390 <_malloc_r+0x80>
 80133f6:	230c      	movs	r3, #12
 80133f8:	603b      	str	r3, [r7, #0]
 80133fa:	4638      	mov	r0, r7
 80133fc:	f000 f80e 	bl	801341c <__malloc_unlock>
 8013400:	e797      	b.n	8013332 <_malloc_r+0x22>
 8013402:	6025      	str	r5, [r4, #0]
 8013404:	e7dc      	b.n	80133c0 <_malloc_r+0xb0>
 8013406:	605b      	str	r3, [r3, #4]
 8013408:	deff      	udf	#255	; 0xff
 801340a:	bf00      	nop
 801340c:	200009f8 	.word	0x200009f8

08013410 <__malloc_lock>:
 8013410:	4801      	ldr	r0, [pc, #4]	; (8013418 <__malloc_lock+0x8>)
 8013412:	f001 bee6 	b.w	80151e2 <__retarget_lock_acquire_recursive>
 8013416:	bf00      	nop
 8013418:	20000b40 	.word	0x20000b40

0801341c <__malloc_unlock>:
 801341c:	4801      	ldr	r0, [pc, #4]	; (8013424 <__malloc_unlock+0x8>)
 801341e:	f001 bee1 	b.w	80151e4 <__retarget_lock_release_recursive>
 8013422:	bf00      	nop
 8013424:	20000b40 	.word	0x20000b40

08013428 <rand>:
 8013428:	4b16      	ldr	r3, [pc, #88]	; (8013484 <rand+0x5c>)
 801342a:	b510      	push	{r4, lr}
 801342c:	681c      	ldr	r4, [r3, #0]
 801342e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013430:	b9b3      	cbnz	r3, 8013460 <rand+0x38>
 8013432:	2018      	movs	r0, #24
 8013434:	f7ff ff3c 	bl	80132b0 <malloc>
 8013438:	4602      	mov	r2, r0
 801343a:	6320      	str	r0, [r4, #48]	; 0x30
 801343c:	b920      	cbnz	r0, 8013448 <rand+0x20>
 801343e:	4b12      	ldr	r3, [pc, #72]	; (8013488 <rand+0x60>)
 8013440:	4812      	ldr	r0, [pc, #72]	; (801348c <rand+0x64>)
 8013442:	2152      	movs	r1, #82	; 0x52
 8013444:	f001 feee 	bl	8015224 <__assert_func>
 8013448:	4911      	ldr	r1, [pc, #68]	; (8013490 <rand+0x68>)
 801344a:	4b12      	ldr	r3, [pc, #72]	; (8013494 <rand+0x6c>)
 801344c:	e9c0 1300 	strd	r1, r3, [r0]
 8013450:	4b11      	ldr	r3, [pc, #68]	; (8013498 <rand+0x70>)
 8013452:	6083      	str	r3, [r0, #8]
 8013454:	230b      	movs	r3, #11
 8013456:	8183      	strh	r3, [r0, #12]
 8013458:	2100      	movs	r1, #0
 801345a:	2001      	movs	r0, #1
 801345c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013460:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013462:	480e      	ldr	r0, [pc, #56]	; (801349c <rand+0x74>)
 8013464:	690b      	ldr	r3, [r1, #16]
 8013466:	694c      	ldr	r4, [r1, #20]
 8013468:	4a0d      	ldr	r2, [pc, #52]	; (80134a0 <rand+0x78>)
 801346a:	4358      	muls	r0, r3
 801346c:	fb02 0004 	mla	r0, r2, r4, r0
 8013470:	fba3 3202 	umull	r3, r2, r3, r2
 8013474:	3301      	adds	r3, #1
 8013476:	eb40 0002 	adc.w	r0, r0, r2
 801347a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801347e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013482:	bd10      	pop	{r4, pc}
 8013484:	200001f0 	.word	0x200001f0
 8013488:	0801ac68 	.word	0x0801ac68
 801348c:	0801ac7f 	.word	0x0801ac7f
 8013490:	abcd330e 	.word	0xabcd330e
 8013494:	e66d1234 	.word	0xe66d1234
 8013498:	0005deec 	.word	0x0005deec
 801349c:	5851f42d 	.word	0x5851f42d
 80134a0:	4c957f2d 	.word	0x4c957f2d

080134a4 <sulp>:
 80134a4:	b570      	push	{r4, r5, r6, lr}
 80134a6:	4604      	mov	r4, r0
 80134a8:	460d      	mov	r5, r1
 80134aa:	ec45 4b10 	vmov	d0, r4, r5
 80134ae:	4616      	mov	r6, r2
 80134b0:	f003 fc72 	bl	8016d98 <__ulp>
 80134b4:	ec51 0b10 	vmov	r0, r1, d0
 80134b8:	b17e      	cbz	r6, 80134da <sulp+0x36>
 80134ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80134be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	dd09      	ble.n	80134da <sulp+0x36>
 80134c6:	051b      	lsls	r3, r3, #20
 80134c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80134cc:	2400      	movs	r4, #0
 80134ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80134d2:	4622      	mov	r2, r4
 80134d4:	462b      	mov	r3, r5
 80134d6:	f7ed f8af 	bl	8000638 <__aeabi_dmul>
 80134da:	bd70      	pop	{r4, r5, r6, pc}
 80134dc:	0000      	movs	r0, r0
	...

080134e0 <_strtod_l>:
 80134e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134e4:	ed2d 8b02 	vpush	{d8}
 80134e8:	b09b      	sub	sp, #108	; 0x6c
 80134ea:	4604      	mov	r4, r0
 80134ec:	9213      	str	r2, [sp, #76]	; 0x4c
 80134ee:	2200      	movs	r2, #0
 80134f0:	9216      	str	r2, [sp, #88]	; 0x58
 80134f2:	460d      	mov	r5, r1
 80134f4:	f04f 0800 	mov.w	r8, #0
 80134f8:	f04f 0900 	mov.w	r9, #0
 80134fc:	460a      	mov	r2, r1
 80134fe:	9215      	str	r2, [sp, #84]	; 0x54
 8013500:	7811      	ldrb	r1, [r2, #0]
 8013502:	292b      	cmp	r1, #43	; 0x2b
 8013504:	d04c      	beq.n	80135a0 <_strtod_l+0xc0>
 8013506:	d83a      	bhi.n	801357e <_strtod_l+0x9e>
 8013508:	290d      	cmp	r1, #13
 801350a:	d834      	bhi.n	8013576 <_strtod_l+0x96>
 801350c:	2908      	cmp	r1, #8
 801350e:	d834      	bhi.n	801357a <_strtod_l+0x9a>
 8013510:	2900      	cmp	r1, #0
 8013512:	d03d      	beq.n	8013590 <_strtod_l+0xb0>
 8013514:	2200      	movs	r2, #0
 8013516:	920a      	str	r2, [sp, #40]	; 0x28
 8013518:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801351a:	7832      	ldrb	r2, [r6, #0]
 801351c:	2a30      	cmp	r2, #48	; 0x30
 801351e:	f040 80b4 	bne.w	801368a <_strtod_l+0x1aa>
 8013522:	7872      	ldrb	r2, [r6, #1]
 8013524:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013528:	2a58      	cmp	r2, #88	; 0x58
 801352a:	d170      	bne.n	801360e <_strtod_l+0x12e>
 801352c:	9302      	str	r3, [sp, #8]
 801352e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013530:	9301      	str	r3, [sp, #4]
 8013532:	ab16      	add	r3, sp, #88	; 0x58
 8013534:	9300      	str	r3, [sp, #0]
 8013536:	4a8e      	ldr	r2, [pc, #568]	; (8013770 <_strtod_l+0x290>)
 8013538:	ab17      	add	r3, sp, #92	; 0x5c
 801353a:	a915      	add	r1, sp, #84	; 0x54
 801353c:	4620      	mov	r0, r4
 801353e:	f002 fdbd 	bl	80160bc <__gethex>
 8013542:	f010 070f 	ands.w	r7, r0, #15
 8013546:	4605      	mov	r5, r0
 8013548:	d005      	beq.n	8013556 <_strtod_l+0x76>
 801354a:	2f06      	cmp	r7, #6
 801354c:	d12a      	bne.n	80135a4 <_strtod_l+0xc4>
 801354e:	3601      	adds	r6, #1
 8013550:	2300      	movs	r3, #0
 8013552:	9615      	str	r6, [sp, #84]	; 0x54
 8013554:	930a      	str	r3, [sp, #40]	; 0x28
 8013556:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013558:	2b00      	cmp	r3, #0
 801355a:	f040 857f 	bne.w	801405c <_strtod_l+0xb7c>
 801355e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013560:	b1db      	cbz	r3, 801359a <_strtod_l+0xba>
 8013562:	4642      	mov	r2, r8
 8013564:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013568:	ec43 2b10 	vmov	d0, r2, r3
 801356c:	b01b      	add	sp, #108	; 0x6c
 801356e:	ecbd 8b02 	vpop	{d8}
 8013572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013576:	2920      	cmp	r1, #32
 8013578:	d1cc      	bne.n	8013514 <_strtod_l+0x34>
 801357a:	3201      	adds	r2, #1
 801357c:	e7bf      	b.n	80134fe <_strtod_l+0x1e>
 801357e:	292d      	cmp	r1, #45	; 0x2d
 8013580:	d1c8      	bne.n	8013514 <_strtod_l+0x34>
 8013582:	2101      	movs	r1, #1
 8013584:	910a      	str	r1, [sp, #40]	; 0x28
 8013586:	1c51      	adds	r1, r2, #1
 8013588:	9115      	str	r1, [sp, #84]	; 0x54
 801358a:	7852      	ldrb	r2, [r2, #1]
 801358c:	2a00      	cmp	r2, #0
 801358e:	d1c3      	bne.n	8013518 <_strtod_l+0x38>
 8013590:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013592:	9515      	str	r5, [sp, #84]	; 0x54
 8013594:	2b00      	cmp	r3, #0
 8013596:	f040 855f 	bne.w	8014058 <_strtod_l+0xb78>
 801359a:	4642      	mov	r2, r8
 801359c:	464b      	mov	r3, r9
 801359e:	e7e3      	b.n	8013568 <_strtod_l+0x88>
 80135a0:	2100      	movs	r1, #0
 80135a2:	e7ef      	b.n	8013584 <_strtod_l+0xa4>
 80135a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80135a6:	b13a      	cbz	r2, 80135b8 <_strtod_l+0xd8>
 80135a8:	2135      	movs	r1, #53	; 0x35
 80135aa:	a818      	add	r0, sp, #96	; 0x60
 80135ac:	f003 fcf1 	bl	8016f92 <__copybits>
 80135b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80135b2:	4620      	mov	r0, r4
 80135b4:	f003 f8c4 	bl	8016740 <_Bfree>
 80135b8:	3f01      	subs	r7, #1
 80135ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80135bc:	2f04      	cmp	r7, #4
 80135be:	d806      	bhi.n	80135ce <_strtod_l+0xee>
 80135c0:	e8df f007 	tbb	[pc, r7]
 80135c4:	201d0314 	.word	0x201d0314
 80135c8:	14          	.byte	0x14
 80135c9:	00          	.byte	0x00
 80135ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80135ce:	05e9      	lsls	r1, r5, #23
 80135d0:	bf48      	it	mi
 80135d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80135d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80135da:	0d1b      	lsrs	r3, r3, #20
 80135dc:	051b      	lsls	r3, r3, #20
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d1b9      	bne.n	8013556 <_strtod_l+0x76>
 80135e2:	f001 fdd3 	bl	801518c <__errno>
 80135e6:	2322      	movs	r3, #34	; 0x22
 80135e8:	6003      	str	r3, [r0, #0]
 80135ea:	e7b4      	b.n	8013556 <_strtod_l+0x76>
 80135ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80135f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80135f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80135f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80135fc:	e7e7      	b.n	80135ce <_strtod_l+0xee>
 80135fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013778 <_strtod_l+0x298>
 8013602:	e7e4      	b.n	80135ce <_strtod_l+0xee>
 8013604:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013608:	f04f 38ff 	mov.w	r8, #4294967295
 801360c:	e7df      	b.n	80135ce <_strtod_l+0xee>
 801360e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013610:	1c5a      	adds	r2, r3, #1
 8013612:	9215      	str	r2, [sp, #84]	; 0x54
 8013614:	785b      	ldrb	r3, [r3, #1]
 8013616:	2b30      	cmp	r3, #48	; 0x30
 8013618:	d0f9      	beq.n	801360e <_strtod_l+0x12e>
 801361a:	2b00      	cmp	r3, #0
 801361c:	d09b      	beq.n	8013556 <_strtod_l+0x76>
 801361e:	2301      	movs	r3, #1
 8013620:	f04f 0a00 	mov.w	sl, #0
 8013624:	9304      	str	r3, [sp, #16]
 8013626:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013628:	930b      	str	r3, [sp, #44]	; 0x2c
 801362a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801362e:	46d3      	mov	fp, sl
 8013630:	220a      	movs	r2, #10
 8013632:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013634:	7806      	ldrb	r6, [r0, #0]
 8013636:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801363a:	b2d9      	uxtb	r1, r3
 801363c:	2909      	cmp	r1, #9
 801363e:	d926      	bls.n	801368e <_strtod_l+0x1ae>
 8013640:	494c      	ldr	r1, [pc, #304]	; (8013774 <_strtod_l+0x294>)
 8013642:	2201      	movs	r2, #1
 8013644:	f001 fcc7 	bl	8014fd6 <strncmp>
 8013648:	2800      	cmp	r0, #0
 801364a:	d030      	beq.n	80136ae <_strtod_l+0x1ce>
 801364c:	2000      	movs	r0, #0
 801364e:	4632      	mov	r2, r6
 8013650:	9005      	str	r0, [sp, #20]
 8013652:	465e      	mov	r6, fp
 8013654:	4603      	mov	r3, r0
 8013656:	2a65      	cmp	r2, #101	; 0x65
 8013658:	d001      	beq.n	801365e <_strtod_l+0x17e>
 801365a:	2a45      	cmp	r2, #69	; 0x45
 801365c:	d113      	bne.n	8013686 <_strtod_l+0x1a6>
 801365e:	b91e      	cbnz	r6, 8013668 <_strtod_l+0x188>
 8013660:	9a04      	ldr	r2, [sp, #16]
 8013662:	4302      	orrs	r2, r0
 8013664:	d094      	beq.n	8013590 <_strtod_l+0xb0>
 8013666:	2600      	movs	r6, #0
 8013668:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801366a:	1c6a      	adds	r2, r5, #1
 801366c:	9215      	str	r2, [sp, #84]	; 0x54
 801366e:	786a      	ldrb	r2, [r5, #1]
 8013670:	2a2b      	cmp	r2, #43	; 0x2b
 8013672:	d074      	beq.n	801375e <_strtod_l+0x27e>
 8013674:	2a2d      	cmp	r2, #45	; 0x2d
 8013676:	d078      	beq.n	801376a <_strtod_l+0x28a>
 8013678:	f04f 0c00 	mov.w	ip, #0
 801367c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013680:	2909      	cmp	r1, #9
 8013682:	d97f      	bls.n	8013784 <_strtod_l+0x2a4>
 8013684:	9515      	str	r5, [sp, #84]	; 0x54
 8013686:	2700      	movs	r7, #0
 8013688:	e09e      	b.n	80137c8 <_strtod_l+0x2e8>
 801368a:	2300      	movs	r3, #0
 801368c:	e7c8      	b.n	8013620 <_strtod_l+0x140>
 801368e:	f1bb 0f08 	cmp.w	fp, #8
 8013692:	bfd8      	it	le
 8013694:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8013696:	f100 0001 	add.w	r0, r0, #1
 801369a:	bfda      	itte	le
 801369c:	fb02 3301 	mlale	r3, r2, r1, r3
 80136a0:	9309      	strle	r3, [sp, #36]	; 0x24
 80136a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80136a6:	f10b 0b01 	add.w	fp, fp, #1
 80136aa:	9015      	str	r0, [sp, #84]	; 0x54
 80136ac:	e7c1      	b.n	8013632 <_strtod_l+0x152>
 80136ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136b0:	1c5a      	adds	r2, r3, #1
 80136b2:	9215      	str	r2, [sp, #84]	; 0x54
 80136b4:	785a      	ldrb	r2, [r3, #1]
 80136b6:	f1bb 0f00 	cmp.w	fp, #0
 80136ba:	d037      	beq.n	801372c <_strtod_l+0x24c>
 80136bc:	9005      	str	r0, [sp, #20]
 80136be:	465e      	mov	r6, fp
 80136c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80136c4:	2b09      	cmp	r3, #9
 80136c6:	d912      	bls.n	80136ee <_strtod_l+0x20e>
 80136c8:	2301      	movs	r3, #1
 80136ca:	e7c4      	b.n	8013656 <_strtod_l+0x176>
 80136cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136ce:	1c5a      	adds	r2, r3, #1
 80136d0:	9215      	str	r2, [sp, #84]	; 0x54
 80136d2:	785a      	ldrb	r2, [r3, #1]
 80136d4:	3001      	adds	r0, #1
 80136d6:	2a30      	cmp	r2, #48	; 0x30
 80136d8:	d0f8      	beq.n	80136cc <_strtod_l+0x1ec>
 80136da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80136de:	2b08      	cmp	r3, #8
 80136e0:	f200 84c1 	bhi.w	8014066 <_strtod_l+0xb86>
 80136e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136e6:	9005      	str	r0, [sp, #20]
 80136e8:	2000      	movs	r0, #0
 80136ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80136ec:	4606      	mov	r6, r0
 80136ee:	3a30      	subs	r2, #48	; 0x30
 80136f0:	f100 0301 	add.w	r3, r0, #1
 80136f4:	d014      	beq.n	8013720 <_strtod_l+0x240>
 80136f6:	9905      	ldr	r1, [sp, #20]
 80136f8:	4419      	add	r1, r3
 80136fa:	9105      	str	r1, [sp, #20]
 80136fc:	4633      	mov	r3, r6
 80136fe:	eb00 0c06 	add.w	ip, r0, r6
 8013702:	210a      	movs	r1, #10
 8013704:	4563      	cmp	r3, ip
 8013706:	d113      	bne.n	8013730 <_strtod_l+0x250>
 8013708:	1833      	adds	r3, r6, r0
 801370a:	2b08      	cmp	r3, #8
 801370c:	f106 0601 	add.w	r6, r6, #1
 8013710:	4406      	add	r6, r0
 8013712:	dc1a      	bgt.n	801374a <_strtod_l+0x26a>
 8013714:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013716:	230a      	movs	r3, #10
 8013718:	fb03 2301 	mla	r3, r3, r1, r2
 801371c:	9309      	str	r3, [sp, #36]	; 0x24
 801371e:	2300      	movs	r3, #0
 8013720:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013722:	1c51      	adds	r1, r2, #1
 8013724:	9115      	str	r1, [sp, #84]	; 0x54
 8013726:	7852      	ldrb	r2, [r2, #1]
 8013728:	4618      	mov	r0, r3
 801372a:	e7c9      	b.n	80136c0 <_strtod_l+0x1e0>
 801372c:	4658      	mov	r0, fp
 801372e:	e7d2      	b.n	80136d6 <_strtod_l+0x1f6>
 8013730:	2b08      	cmp	r3, #8
 8013732:	f103 0301 	add.w	r3, r3, #1
 8013736:	dc03      	bgt.n	8013740 <_strtod_l+0x260>
 8013738:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801373a:	434f      	muls	r7, r1
 801373c:	9709      	str	r7, [sp, #36]	; 0x24
 801373e:	e7e1      	b.n	8013704 <_strtod_l+0x224>
 8013740:	2b10      	cmp	r3, #16
 8013742:	bfd8      	it	le
 8013744:	fb01 fa0a 	mulle.w	sl, r1, sl
 8013748:	e7dc      	b.n	8013704 <_strtod_l+0x224>
 801374a:	2e10      	cmp	r6, #16
 801374c:	bfdc      	itt	le
 801374e:	230a      	movle	r3, #10
 8013750:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8013754:	e7e3      	b.n	801371e <_strtod_l+0x23e>
 8013756:	2300      	movs	r3, #0
 8013758:	9305      	str	r3, [sp, #20]
 801375a:	2301      	movs	r3, #1
 801375c:	e780      	b.n	8013660 <_strtod_l+0x180>
 801375e:	f04f 0c00 	mov.w	ip, #0
 8013762:	1caa      	adds	r2, r5, #2
 8013764:	9215      	str	r2, [sp, #84]	; 0x54
 8013766:	78aa      	ldrb	r2, [r5, #2]
 8013768:	e788      	b.n	801367c <_strtod_l+0x19c>
 801376a:	f04f 0c01 	mov.w	ip, #1
 801376e:	e7f8      	b.n	8013762 <_strtod_l+0x282>
 8013770:	0801acdc 	.word	0x0801acdc
 8013774:	0801acd7 	.word	0x0801acd7
 8013778:	7ff00000 	.word	0x7ff00000
 801377c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801377e:	1c51      	adds	r1, r2, #1
 8013780:	9115      	str	r1, [sp, #84]	; 0x54
 8013782:	7852      	ldrb	r2, [r2, #1]
 8013784:	2a30      	cmp	r2, #48	; 0x30
 8013786:	d0f9      	beq.n	801377c <_strtod_l+0x29c>
 8013788:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801378c:	2908      	cmp	r1, #8
 801378e:	f63f af7a 	bhi.w	8013686 <_strtod_l+0x1a6>
 8013792:	3a30      	subs	r2, #48	; 0x30
 8013794:	9208      	str	r2, [sp, #32]
 8013796:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013798:	920c      	str	r2, [sp, #48]	; 0x30
 801379a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801379c:	1c57      	adds	r7, r2, #1
 801379e:	9715      	str	r7, [sp, #84]	; 0x54
 80137a0:	7852      	ldrb	r2, [r2, #1]
 80137a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80137a6:	f1be 0f09 	cmp.w	lr, #9
 80137aa:	d938      	bls.n	801381e <_strtod_l+0x33e>
 80137ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80137ae:	1a7f      	subs	r7, r7, r1
 80137b0:	2f08      	cmp	r7, #8
 80137b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80137b6:	dc03      	bgt.n	80137c0 <_strtod_l+0x2e0>
 80137b8:	9908      	ldr	r1, [sp, #32]
 80137ba:	428f      	cmp	r7, r1
 80137bc:	bfa8      	it	ge
 80137be:	460f      	movge	r7, r1
 80137c0:	f1bc 0f00 	cmp.w	ip, #0
 80137c4:	d000      	beq.n	80137c8 <_strtod_l+0x2e8>
 80137c6:	427f      	negs	r7, r7
 80137c8:	2e00      	cmp	r6, #0
 80137ca:	d14f      	bne.n	801386c <_strtod_l+0x38c>
 80137cc:	9904      	ldr	r1, [sp, #16]
 80137ce:	4301      	orrs	r1, r0
 80137d0:	f47f aec1 	bne.w	8013556 <_strtod_l+0x76>
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	f47f aedb 	bne.w	8013590 <_strtod_l+0xb0>
 80137da:	2a69      	cmp	r2, #105	; 0x69
 80137dc:	d029      	beq.n	8013832 <_strtod_l+0x352>
 80137de:	dc26      	bgt.n	801382e <_strtod_l+0x34e>
 80137e0:	2a49      	cmp	r2, #73	; 0x49
 80137e2:	d026      	beq.n	8013832 <_strtod_l+0x352>
 80137e4:	2a4e      	cmp	r2, #78	; 0x4e
 80137e6:	f47f aed3 	bne.w	8013590 <_strtod_l+0xb0>
 80137ea:	499b      	ldr	r1, [pc, #620]	; (8013a58 <_strtod_l+0x578>)
 80137ec:	a815      	add	r0, sp, #84	; 0x54
 80137ee:	f002 fea5 	bl	801653c <__match>
 80137f2:	2800      	cmp	r0, #0
 80137f4:	f43f aecc 	beq.w	8013590 <_strtod_l+0xb0>
 80137f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137fa:	781b      	ldrb	r3, [r3, #0]
 80137fc:	2b28      	cmp	r3, #40	; 0x28
 80137fe:	d12f      	bne.n	8013860 <_strtod_l+0x380>
 8013800:	4996      	ldr	r1, [pc, #600]	; (8013a5c <_strtod_l+0x57c>)
 8013802:	aa18      	add	r2, sp, #96	; 0x60
 8013804:	a815      	add	r0, sp, #84	; 0x54
 8013806:	f002 fead 	bl	8016564 <__hexnan>
 801380a:	2805      	cmp	r0, #5
 801380c:	d128      	bne.n	8013860 <_strtod_l+0x380>
 801380e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013810:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013814:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013818:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801381c:	e69b      	b.n	8013556 <_strtod_l+0x76>
 801381e:	9f08      	ldr	r7, [sp, #32]
 8013820:	210a      	movs	r1, #10
 8013822:	fb01 2107 	mla	r1, r1, r7, r2
 8013826:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801382a:	9208      	str	r2, [sp, #32]
 801382c:	e7b5      	b.n	801379a <_strtod_l+0x2ba>
 801382e:	2a6e      	cmp	r2, #110	; 0x6e
 8013830:	e7d9      	b.n	80137e6 <_strtod_l+0x306>
 8013832:	498b      	ldr	r1, [pc, #556]	; (8013a60 <_strtod_l+0x580>)
 8013834:	a815      	add	r0, sp, #84	; 0x54
 8013836:	f002 fe81 	bl	801653c <__match>
 801383a:	2800      	cmp	r0, #0
 801383c:	f43f aea8 	beq.w	8013590 <_strtod_l+0xb0>
 8013840:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013842:	4988      	ldr	r1, [pc, #544]	; (8013a64 <_strtod_l+0x584>)
 8013844:	3b01      	subs	r3, #1
 8013846:	a815      	add	r0, sp, #84	; 0x54
 8013848:	9315      	str	r3, [sp, #84]	; 0x54
 801384a:	f002 fe77 	bl	801653c <__match>
 801384e:	b910      	cbnz	r0, 8013856 <_strtod_l+0x376>
 8013850:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013852:	3301      	adds	r3, #1
 8013854:	9315      	str	r3, [sp, #84]	; 0x54
 8013856:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8013a74 <_strtod_l+0x594>
 801385a:	f04f 0800 	mov.w	r8, #0
 801385e:	e67a      	b.n	8013556 <_strtod_l+0x76>
 8013860:	4881      	ldr	r0, [pc, #516]	; (8013a68 <_strtod_l+0x588>)
 8013862:	f001 fcd1 	bl	8015208 <nan>
 8013866:	ec59 8b10 	vmov	r8, r9, d0
 801386a:	e674      	b.n	8013556 <_strtod_l+0x76>
 801386c:	9b05      	ldr	r3, [sp, #20]
 801386e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013870:	1afb      	subs	r3, r7, r3
 8013872:	f1bb 0f00 	cmp.w	fp, #0
 8013876:	bf08      	it	eq
 8013878:	46b3      	moveq	fp, r6
 801387a:	2e10      	cmp	r6, #16
 801387c:	9308      	str	r3, [sp, #32]
 801387e:	4635      	mov	r5, r6
 8013880:	bfa8      	it	ge
 8013882:	2510      	movge	r5, #16
 8013884:	f7ec fe5e 	bl	8000544 <__aeabi_ui2d>
 8013888:	2e09      	cmp	r6, #9
 801388a:	4680      	mov	r8, r0
 801388c:	4689      	mov	r9, r1
 801388e:	dd13      	ble.n	80138b8 <_strtod_l+0x3d8>
 8013890:	4b76      	ldr	r3, [pc, #472]	; (8013a6c <_strtod_l+0x58c>)
 8013892:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013896:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801389a:	f7ec fecd 	bl	8000638 <__aeabi_dmul>
 801389e:	4680      	mov	r8, r0
 80138a0:	4650      	mov	r0, sl
 80138a2:	4689      	mov	r9, r1
 80138a4:	f7ec fe4e 	bl	8000544 <__aeabi_ui2d>
 80138a8:	4602      	mov	r2, r0
 80138aa:	460b      	mov	r3, r1
 80138ac:	4640      	mov	r0, r8
 80138ae:	4649      	mov	r1, r9
 80138b0:	f7ec fd0c 	bl	80002cc <__adddf3>
 80138b4:	4680      	mov	r8, r0
 80138b6:	4689      	mov	r9, r1
 80138b8:	2e0f      	cmp	r6, #15
 80138ba:	dc38      	bgt.n	801392e <_strtod_l+0x44e>
 80138bc:	9b08      	ldr	r3, [sp, #32]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	f43f ae49 	beq.w	8013556 <_strtod_l+0x76>
 80138c4:	dd24      	ble.n	8013910 <_strtod_l+0x430>
 80138c6:	2b16      	cmp	r3, #22
 80138c8:	dc0b      	bgt.n	80138e2 <_strtod_l+0x402>
 80138ca:	4968      	ldr	r1, [pc, #416]	; (8013a6c <_strtod_l+0x58c>)
 80138cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80138d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80138d4:	4642      	mov	r2, r8
 80138d6:	464b      	mov	r3, r9
 80138d8:	f7ec feae 	bl	8000638 <__aeabi_dmul>
 80138dc:	4680      	mov	r8, r0
 80138de:	4689      	mov	r9, r1
 80138e0:	e639      	b.n	8013556 <_strtod_l+0x76>
 80138e2:	9a08      	ldr	r2, [sp, #32]
 80138e4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80138e8:	4293      	cmp	r3, r2
 80138ea:	db20      	blt.n	801392e <_strtod_l+0x44e>
 80138ec:	4c5f      	ldr	r4, [pc, #380]	; (8013a6c <_strtod_l+0x58c>)
 80138ee:	f1c6 060f 	rsb	r6, r6, #15
 80138f2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80138f6:	4642      	mov	r2, r8
 80138f8:	464b      	mov	r3, r9
 80138fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80138fe:	f7ec fe9b 	bl	8000638 <__aeabi_dmul>
 8013902:	9b08      	ldr	r3, [sp, #32]
 8013904:	1b9e      	subs	r6, r3, r6
 8013906:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801390a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801390e:	e7e3      	b.n	80138d8 <_strtod_l+0x3f8>
 8013910:	9b08      	ldr	r3, [sp, #32]
 8013912:	3316      	adds	r3, #22
 8013914:	db0b      	blt.n	801392e <_strtod_l+0x44e>
 8013916:	9b05      	ldr	r3, [sp, #20]
 8013918:	1bdf      	subs	r7, r3, r7
 801391a:	4b54      	ldr	r3, [pc, #336]	; (8013a6c <_strtod_l+0x58c>)
 801391c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013924:	4640      	mov	r0, r8
 8013926:	4649      	mov	r1, r9
 8013928:	f7ec ffb0 	bl	800088c <__aeabi_ddiv>
 801392c:	e7d6      	b.n	80138dc <_strtod_l+0x3fc>
 801392e:	9b08      	ldr	r3, [sp, #32]
 8013930:	1b75      	subs	r5, r6, r5
 8013932:	441d      	add	r5, r3
 8013934:	2d00      	cmp	r5, #0
 8013936:	dd70      	ble.n	8013a1a <_strtod_l+0x53a>
 8013938:	f015 030f 	ands.w	r3, r5, #15
 801393c:	d00a      	beq.n	8013954 <_strtod_l+0x474>
 801393e:	494b      	ldr	r1, [pc, #300]	; (8013a6c <_strtod_l+0x58c>)
 8013940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013944:	4642      	mov	r2, r8
 8013946:	464b      	mov	r3, r9
 8013948:	e9d1 0100 	ldrd	r0, r1, [r1]
 801394c:	f7ec fe74 	bl	8000638 <__aeabi_dmul>
 8013950:	4680      	mov	r8, r0
 8013952:	4689      	mov	r9, r1
 8013954:	f035 050f 	bics.w	r5, r5, #15
 8013958:	d04d      	beq.n	80139f6 <_strtod_l+0x516>
 801395a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801395e:	dd22      	ble.n	80139a6 <_strtod_l+0x4c6>
 8013960:	2500      	movs	r5, #0
 8013962:	46ab      	mov	fp, r5
 8013964:	9509      	str	r5, [sp, #36]	; 0x24
 8013966:	9505      	str	r5, [sp, #20]
 8013968:	2322      	movs	r3, #34	; 0x22
 801396a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013a74 <_strtod_l+0x594>
 801396e:	6023      	str	r3, [r4, #0]
 8013970:	f04f 0800 	mov.w	r8, #0
 8013974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013976:	2b00      	cmp	r3, #0
 8013978:	f43f aded 	beq.w	8013556 <_strtod_l+0x76>
 801397c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801397e:	4620      	mov	r0, r4
 8013980:	f002 fede 	bl	8016740 <_Bfree>
 8013984:	9905      	ldr	r1, [sp, #20]
 8013986:	4620      	mov	r0, r4
 8013988:	f002 feda 	bl	8016740 <_Bfree>
 801398c:	4659      	mov	r1, fp
 801398e:	4620      	mov	r0, r4
 8013990:	f002 fed6 	bl	8016740 <_Bfree>
 8013994:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013996:	4620      	mov	r0, r4
 8013998:	f002 fed2 	bl	8016740 <_Bfree>
 801399c:	4629      	mov	r1, r5
 801399e:	4620      	mov	r0, r4
 80139a0:	f002 fece 	bl	8016740 <_Bfree>
 80139a4:	e5d7      	b.n	8013556 <_strtod_l+0x76>
 80139a6:	4b32      	ldr	r3, [pc, #200]	; (8013a70 <_strtod_l+0x590>)
 80139a8:	9304      	str	r3, [sp, #16]
 80139aa:	2300      	movs	r3, #0
 80139ac:	112d      	asrs	r5, r5, #4
 80139ae:	4640      	mov	r0, r8
 80139b0:	4649      	mov	r1, r9
 80139b2:	469a      	mov	sl, r3
 80139b4:	2d01      	cmp	r5, #1
 80139b6:	dc21      	bgt.n	80139fc <_strtod_l+0x51c>
 80139b8:	b10b      	cbz	r3, 80139be <_strtod_l+0x4de>
 80139ba:	4680      	mov	r8, r0
 80139bc:	4689      	mov	r9, r1
 80139be:	492c      	ldr	r1, [pc, #176]	; (8013a70 <_strtod_l+0x590>)
 80139c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80139c4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80139c8:	4642      	mov	r2, r8
 80139ca:	464b      	mov	r3, r9
 80139cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139d0:	f7ec fe32 	bl	8000638 <__aeabi_dmul>
 80139d4:	4b27      	ldr	r3, [pc, #156]	; (8013a74 <_strtod_l+0x594>)
 80139d6:	460a      	mov	r2, r1
 80139d8:	400b      	ands	r3, r1
 80139da:	4927      	ldr	r1, [pc, #156]	; (8013a78 <_strtod_l+0x598>)
 80139dc:	428b      	cmp	r3, r1
 80139de:	4680      	mov	r8, r0
 80139e0:	d8be      	bhi.n	8013960 <_strtod_l+0x480>
 80139e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80139e6:	428b      	cmp	r3, r1
 80139e8:	bf86      	itte	hi
 80139ea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8013a7c <_strtod_l+0x59c>
 80139ee:	f04f 38ff 	movhi.w	r8, #4294967295
 80139f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80139f6:	2300      	movs	r3, #0
 80139f8:	9304      	str	r3, [sp, #16]
 80139fa:	e07b      	b.n	8013af4 <_strtod_l+0x614>
 80139fc:	07ea      	lsls	r2, r5, #31
 80139fe:	d505      	bpl.n	8013a0c <_strtod_l+0x52c>
 8013a00:	9b04      	ldr	r3, [sp, #16]
 8013a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a06:	f7ec fe17 	bl	8000638 <__aeabi_dmul>
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	9a04      	ldr	r2, [sp, #16]
 8013a0e:	3208      	adds	r2, #8
 8013a10:	f10a 0a01 	add.w	sl, sl, #1
 8013a14:	106d      	asrs	r5, r5, #1
 8013a16:	9204      	str	r2, [sp, #16]
 8013a18:	e7cc      	b.n	80139b4 <_strtod_l+0x4d4>
 8013a1a:	d0ec      	beq.n	80139f6 <_strtod_l+0x516>
 8013a1c:	426d      	negs	r5, r5
 8013a1e:	f015 020f 	ands.w	r2, r5, #15
 8013a22:	d00a      	beq.n	8013a3a <_strtod_l+0x55a>
 8013a24:	4b11      	ldr	r3, [pc, #68]	; (8013a6c <_strtod_l+0x58c>)
 8013a26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013a2a:	4640      	mov	r0, r8
 8013a2c:	4649      	mov	r1, r9
 8013a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a32:	f7ec ff2b 	bl	800088c <__aeabi_ddiv>
 8013a36:	4680      	mov	r8, r0
 8013a38:	4689      	mov	r9, r1
 8013a3a:	112d      	asrs	r5, r5, #4
 8013a3c:	d0db      	beq.n	80139f6 <_strtod_l+0x516>
 8013a3e:	2d1f      	cmp	r5, #31
 8013a40:	dd1e      	ble.n	8013a80 <_strtod_l+0x5a0>
 8013a42:	2500      	movs	r5, #0
 8013a44:	46ab      	mov	fp, r5
 8013a46:	9509      	str	r5, [sp, #36]	; 0x24
 8013a48:	9505      	str	r5, [sp, #20]
 8013a4a:	2322      	movs	r3, #34	; 0x22
 8013a4c:	f04f 0800 	mov.w	r8, #0
 8013a50:	f04f 0900 	mov.w	r9, #0
 8013a54:	6023      	str	r3, [r4, #0]
 8013a56:	e78d      	b.n	8013974 <_strtod_l+0x494>
 8013a58:	0801ae3e 	.word	0x0801ae3e
 8013a5c:	0801acf0 	.word	0x0801acf0
 8013a60:	0801ae36 	.word	0x0801ae36
 8013a64:	0801af06 	.word	0x0801af06
 8013a68:	0801af02 	.word	0x0801af02
 8013a6c:	0801b060 	.word	0x0801b060
 8013a70:	0801b038 	.word	0x0801b038
 8013a74:	7ff00000 	.word	0x7ff00000
 8013a78:	7ca00000 	.word	0x7ca00000
 8013a7c:	7fefffff 	.word	0x7fefffff
 8013a80:	f015 0310 	ands.w	r3, r5, #16
 8013a84:	bf18      	it	ne
 8013a86:	236a      	movne	r3, #106	; 0x6a
 8013a88:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8013e2c <_strtod_l+0x94c>
 8013a8c:	9304      	str	r3, [sp, #16]
 8013a8e:	4640      	mov	r0, r8
 8013a90:	4649      	mov	r1, r9
 8013a92:	2300      	movs	r3, #0
 8013a94:	07ea      	lsls	r2, r5, #31
 8013a96:	d504      	bpl.n	8013aa2 <_strtod_l+0x5c2>
 8013a98:	e9da 2300 	ldrd	r2, r3, [sl]
 8013a9c:	f7ec fdcc 	bl	8000638 <__aeabi_dmul>
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	106d      	asrs	r5, r5, #1
 8013aa4:	f10a 0a08 	add.w	sl, sl, #8
 8013aa8:	d1f4      	bne.n	8013a94 <_strtod_l+0x5b4>
 8013aaa:	b10b      	cbz	r3, 8013ab0 <_strtod_l+0x5d0>
 8013aac:	4680      	mov	r8, r0
 8013aae:	4689      	mov	r9, r1
 8013ab0:	9b04      	ldr	r3, [sp, #16]
 8013ab2:	b1bb      	cbz	r3, 8013ae4 <_strtod_l+0x604>
 8013ab4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8013ab8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	4649      	mov	r1, r9
 8013ac0:	dd10      	ble.n	8013ae4 <_strtod_l+0x604>
 8013ac2:	2b1f      	cmp	r3, #31
 8013ac4:	f340 811e 	ble.w	8013d04 <_strtod_l+0x824>
 8013ac8:	2b34      	cmp	r3, #52	; 0x34
 8013aca:	bfde      	ittt	le
 8013acc:	f04f 33ff 	movle.w	r3, #4294967295
 8013ad0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013ad4:	4093      	lslle	r3, r2
 8013ad6:	f04f 0800 	mov.w	r8, #0
 8013ada:	bfcc      	ite	gt
 8013adc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013ae0:	ea03 0901 	andle.w	r9, r3, r1
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	4640      	mov	r0, r8
 8013aea:	4649      	mov	r1, r9
 8013aec:	f7ed f80c 	bl	8000b08 <__aeabi_dcmpeq>
 8013af0:	2800      	cmp	r0, #0
 8013af2:	d1a6      	bne.n	8013a42 <_strtod_l+0x562>
 8013af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013af6:	9300      	str	r3, [sp, #0]
 8013af8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013afa:	4633      	mov	r3, r6
 8013afc:	465a      	mov	r2, fp
 8013afe:	4620      	mov	r0, r4
 8013b00:	f002 fe86 	bl	8016810 <__s2b>
 8013b04:	9009      	str	r0, [sp, #36]	; 0x24
 8013b06:	2800      	cmp	r0, #0
 8013b08:	f43f af2a 	beq.w	8013960 <_strtod_l+0x480>
 8013b0c:	9a08      	ldr	r2, [sp, #32]
 8013b0e:	9b05      	ldr	r3, [sp, #20]
 8013b10:	2a00      	cmp	r2, #0
 8013b12:	eba3 0307 	sub.w	r3, r3, r7
 8013b16:	bfa8      	it	ge
 8013b18:	2300      	movge	r3, #0
 8013b1a:	930c      	str	r3, [sp, #48]	; 0x30
 8013b1c:	2500      	movs	r5, #0
 8013b1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013b22:	9312      	str	r3, [sp, #72]	; 0x48
 8013b24:	46ab      	mov	fp, r5
 8013b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b28:	4620      	mov	r0, r4
 8013b2a:	6859      	ldr	r1, [r3, #4]
 8013b2c:	f002 fdc8 	bl	80166c0 <_Balloc>
 8013b30:	9005      	str	r0, [sp, #20]
 8013b32:	2800      	cmp	r0, #0
 8013b34:	f43f af18 	beq.w	8013968 <_strtod_l+0x488>
 8013b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b3a:	691a      	ldr	r2, [r3, #16]
 8013b3c:	3202      	adds	r2, #2
 8013b3e:	f103 010c 	add.w	r1, r3, #12
 8013b42:	0092      	lsls	r2, r2, #2
 8013b44:	300c      	adds	r0, #12
 8013b46:	f001 fb4e 	bl	80151e6 <memcpy>
 8013b4a:	ec49 8b10 	vmov	d0, r8, r9
 8013b4e:	aa18      	add	r2, sp, #96	; 0x60
 8013b50:	a917      	add	r1, sp, #92	; 0x5c
 8013b52:	4620      	mov	r0, r4
 8013b54:	f003 f990 	bl	8016e78 <__d2b>
 8013b58:	ec49 8b18 	vmov	d8, r8, r9
 8013b5c:	9016      	str	r0, [sp, #88]	; 0x58
 8013b5e:	2800      	cmp	r0, #0
 8013b60:	f43f af02 	beq.w	8013968 <_strtod_l+0x488>
 8013b64:	2101      	movs	r1, #1
 8013b66:	4620      	mov	r0, r4
 8013b68:	f002 feea 	bl	8016940 <__i2b>
 8013b6c:	4683      	mov	fp, r0
 8013b6e:	2800      	cmp	r0, #0
 8013b70:	f43f aefa 	beq.w	8013968 <_strtod_l+0x488>
 8013b74:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013b76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013b78:	2e00      	cmp	r6, #0
 8013b7a:	bfab      	itete	ge
 8013b7c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8013b7e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8013b80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013b82:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8013b86:	bfac      	ite	ge
 8013b88:	eb06 0a03 	addge.w	sl, r6, r3
 8013b8c:	1b9f      	sublt	r7, r3, r6
 8013b8e:	9b04      	ldr	r3, [sp, #16]
 8013b90:	1af6      	subs	r6, r6, r3
 8013b92:	4416      	add	r6, r2
 8013b94:	4ba0      	ldr	r3, [pc, #640]	; (8013e18 <_strtod_l+0x938>)
 8013b96:	3e01      	subs	r6, #1
 8013b98:	429e      	cmp	r6, r3
 8013b9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013b9e:	f280 80c4 	bge.w	8013d2a <_strtod_l+0x84a>
 8013ba2:	1b9b      	subs	r3, r3, r6
 8013ba4:	2b1f      	cmp	r3, #31
 8013ba6:	eba2 0203 	sub.w	r2, r2, r3
 8013baa:	f04f 0101 	mov.w	r1, #1
 8013bae:	f300 80b0 	bgt.w	8013d12 <_strtod_l+0x832>
 8013bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8013bb6:	930e      	str	r3, [sp, #56]	; 0x38
 8013bb8:	2300      	movs	r3, #0
 8013bba:	930d      	str	r3, [sp, #52]	; 0x34
 8013bbc:	eb0a 0602 	add.w	r6, sl, r2
 8013bc0:	9b04      	ldr	r3, [sp, #16]
 8013bc2:	45b2      	cmp	sl, r6
 8013bc4:	4417      	add	r7, r2
 8013bc6:	441f      	add	r7, r3
 8013bc8:	4653      	mov	r3, sl
 8013bca:	bfa8      	it	ge
 8013bcc:	4633      	movge	r3, r6
 8013bce:	42bb      	cmp	r3, r7
 8013bd0:	bfa8      	it	ge
 8013bd2:	463b      	movge	r3, r7
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	bfc2      	ittt	gt
 8013bd8:	1af6      	subgt	r6, r6, r3
 8013bda:	1aff      	subgt	r7, r7, r3
 8013bdc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8013be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	dd17      	ble.n	8013c16 <_strtod_l+0x736>
 8013be6:	4659      	mov	r1, fp
 8013be8:	461a      	mov	r2, r3
 8013bea:	4620      	mov	r0, r4
 8013bec:	f002 ff68 	bl	8016ac0 <__pow5mult>
 8013bf0:	4683      	mov	fp, r0
 8013bf2:	2800      	cmp	r0, #0
 8013bf4:	f43f aeb8 	beq.w	8013968 <_strtod_l+0x488>
 8013bf8:	4601      	mov	r1, r0
 8013bfa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013bfc:	4620      	mov	r0, r4
 8013bfe:	f002 feb5 	bl	801696c <__multiply>
 8013c02:	900b      	str	r0, [sp, #44]	; 0x2c
 8013c04:	2800      	cmp	r0, #0
 8013c06:	f43f aeaf 	beq.w	8013968 <_strtod_l+0x488>
 8013c0a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013c0c:	4620      	mov	r0, r4
 8013c0e:	f002 fd97 	bl	8016740 <_Bfree>
 8013c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c14:	9316      	str	r3, [sp, #88]	; 0x58
 8013c16:	2e00      	cmp	r6, #0
 8013c18:	f300 808c 	bgt.w	8013d34 <_strtod_l+0x854>
 8013c1c:	9b08      	ldr	r3, [sp, #32]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	dd08      	ble.n	8013c34 <_strtod_l+0x754>
 8013c22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013c24:	9905      	ldr	r1, [sp, #20]
 8013c26:	4620      	mov	r0, r4
 8013c28:	f002 ff4a 	bl	8016ac0 <__pow5mult>
 8013c2c:	9005      	str	r0, [sp, #20]
 8013c2e:	2800      	cmp	r0, #0
 8013c30:	f43f ae9a 	beq.w	8013968 <_strtod_l+0x488>
 8013c34:	2f00      	cmp	r7, #0
 8013c36:	dd08      	ble.n	8013c4a <_strtod_l+0x76a>
 8013c38:	9905      	ldr	r1, [sp, #20]
 8013c3a:	463a      	mov	r2, r7
 8013c3c:	4620      	mov	r0, r4
 8013c3e:	f002 ff99 	bl	8016b74 <__lshift>
 8013c42:	9005      	str	r0, [sp, #20]
 8013c44:	2800      	cmp	r0, #0
 8013c46:	f43f ae8f 	beq.w	8013968 <_strtod_l+0x488>
 8013c4a:	f1ba 0f00 	cmp.w	sl, #0
 8013c4e:	dd08      	ble.n	8013c62 <_strtod_l+0x782>
 8013c50:	4659      	mov	r1, fp
 8013c52:	4652      	mov	r2, sl
 8013c54:	4620      	mov	r0, r4
 8013c56:	f002 ff8d 	bl	8016b74 <__lshift>
 8013c5a:	4683      	mov	fp, r0
 8013c5c:	2800      	cmp	r0, #0
 8013c5e:	f43f ae83 	beq.w	8013968 <_strtod_l+0x488>
 8013c62:	9a05      	ldr	r2, [sp, #20]
 8013c64:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013c66:	4620      	mov	r0, r4
 8013c68:	f003 f80c 	bl	8016c84 <__mdiff>
 8013c6c:	4605      	mov	r5, r0
 8013c6e:	2800      	cmp	r0, #0
 8013c70:	f43f ae7a 	beq.w	8013968 <_strtod_l+0x488>
 8013c74:	68c3      	ldr	r3, [r0, #12]
 8013c76:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c78:	2300      	movs	r3, #0
 8013c7a:	60c3      	str	r3, [r0, #12]
 8013c7c:	4659      	mov	r1, fp
 8013c7e:	f002 ffe5 	bl	8016c4c <__mcmp>
 8013c82:	2800      	cmp	r0, #0
 8013c84:	da60      	bge.n	8013d48 <_strtod_l+0x868>
 8013c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c88:	ea53 0308 	orrs.w	r3, r3, r8
 8013c8c:	f040 8084 	bne.w	8013d98 <_strtod_l+0x8b8>
 8013c90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d17f      	bne.n	8013d98 <_strtod_l+0x8b8>
 8013c98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013c9c:	0d1b      	lsrs	r3, r3, #20
 8013c9e:	051b      	lsls	r3, r3, #20
 8013ca0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013ca4:	d978      	bls.n	8013d98 <_strtod_l+0x8b8>
 8013ca6:	696b      	ldr	r3, [r5, #20]
 8013ca8:	b913      	cbnz	r3, 8013cb0 <_strtod_l+0x7d0>
 8013caa:	692b      	ldr	r3, [r5, #16]
 8013cac:	2b01      	cmp	r3, #1
 8013cae:	dd73      	ble.n	8013d98 <_strtod_l+0x8b8>
 8013cb0:	4629      	mov	r1, r5
 8013cb2:	2201      	movs	r2, #1
 8013cb4:	4620      	mov	r0, r4
 8013cb6:	f002 ff5d 	bl	8016b74 <__lshift>
 8013cba:	4659      	mov	r1, fp
 8013cbc:	4605      	mov	r5, r0
 8013cbe:	f002 ffc5 	bl	8016c4c <__mcmp>
 8013cc2:	2800      	cmp	r0, #0
 8013cc4:	dd68      	ble.n	8013d98 <_strtod_l+0x8b8>
 8013cc6:	9904      	ldr	r1, [sp, #16]
 8013cc8:	4a54      	ldr	r2, [pc, #336]	; (8013e1c <_strtod_l+0x93c>)
 8013cca:	464b      	mov	r3, r9
 8013ccc:	2900      	cmp	r1, #0
 8013cce:	f000 8084 	beq.w	8013dda <_strtod_l+0x8fa>
 8013cd2:	ea02 0109 	and.w	r1, r2, r9
 8013cd6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013cda:	dc7e      	bgt.n	8013dda <_strtod_l+0x8fa>
 8013cdc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013ce0:	f77f aeb3 	ble.w	8013a4a <_strtod_l+0x56a>
 8013ce4:	4b4e      	ldr	r3, [pc, #312]	; (8013e20 <_strtod_l+0x940>)
 8013ce6:	4640      	mov	r0, r8
 8013ce8:	4649      	mov	r1, r9
 8013cea:	2200      	movs	r2, #0
 8013cec:	f7ec fca4 	bl	8000638 <__aeabi_dmul>
 8013cf0:	4b4a      	ldr	r3, [pc, #296]	; (8013e1c <_strtod_l+0x93c>)
 8013cf2:	400b      	ands	r3, r1
 8013cf4:	4680      	mov	r8, r0
 8013cf6:	4689      	mov	r9, r1
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	f47f ae3f 	bne.w	801397c <_strtod_l+0x49c>
 8013cfe:	2322      	movs	r3, #34	; 0x22
 8013d00:	6023      	str	r3, [r4, #0]
 8013d02:	e63b      	b.n	801397c <_strtod_l+0x49c>
 8013d04:	f04f 32ff 	mov.w	r2, #4294967295
 8013d08:	fa02 f303 	lsl.w	r3, r2, r3
 8013d0c:	ea03 0808 	and.w	r8, r3, r8
 8013d10:	e6e8      	b.n	8013ae4 <_strtod_l+0x604>
 8013d12:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013d16:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013d1a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013d1e:	36e2      	adds	r6, #226	; 0xe2
 8013d20:	fa01 f306 	lsl.w	r3, r1, r6
 8013d24:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8013d28:	e748      	b.n	8013bbc <_strtod_l+0x6dc>
 8013d2a:	2100      	movs	r1, #0
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8013d32:	e743      	b.n	8013bbc <_strtod_l+0x6dc>
 8013d34:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013d36:	4632      	mov	r2, r6
 8013d38:	4620      	mov	r0, r4
 8013d3a:	f002 ff1b 	bl	8016b74 <__lshift>
 8013d3e:	9016      	str	r0, [sp, #88]	; 0x58
 8013d40:	2800      	cmp	r0, #0
 8013d42:	f47f af6b 	bne.w	8013c1c <_strtod_l+0x73c>
 8013d46:	e60f      	b.n	8013968 <_strtod_l+0x488>
 8013d48:	46ca      	mov	sl, r9
 8013d4a:	d171      	bne.n	8013e30 <_strtod_l+0x950>
 8013d4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013d4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013d52:	b352      	cbz	r2, 8013daa <_strtod_l+0x8ca>
 8013d54:	4a33      	ldr	r2, [pc, #204]	; (8013e24 <_strtod_l+0x944>)
 8013d56:	4293      	cmp	r3, r2
 8013d58:	d12a      	bne.n	8013db0 <_strtod_l+0x8d0>
 8013d5a:	9b04      	ldr	r3, [sp, #16]
 8013d5c:	4641      	mov	r1, r8
 8013d5e:	b1fb      	cbz	r3, 8013da0 <_strtod_l+0x8c0>
 8013d60:	4b2e      	ldr	r3, [pc, #184]	; (8013e1c <_strtod_l+0x93c>)
 8013d62:	ea09 0303 	and.w	r3, r9, r3
 8013d66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8013d6e:	d81a      	bhi.n	8013da6 <_strtod_l+0x8c6>
 8013d70:	0d1b      	lsrs	r3, r3, #20
 8013d72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013d76:	fa02 f303 	lsl.w	r3, r2, r3
 8013d7a:	4299      	cmp	r1, r3
 8013d7c:	d118      	bne.n	8013db0 <_strtod_l+0x8d0>
 8013d7e:	4b2a      	ldr	r3, [pc, #168]	; (8013e28 <_strtod_l+0x948>)
 8013d80:	459a      	cmp	sl, r3
 8013d82:	d102      	bne.n	8013d8a <_strtod_l+0x8aa>
 8013d84:	3101      	adds	r1, #1
 8013d86:	f43f adef 	beq.w	8013968 <_strtod_l+0x488>
 8013d8a:	4b24      	ldr	r3, [pc, #144]	; (8013e1c <_strtod_l+0x93c>)
 8013d8c:	ea0a 0303 	and.w	r3, sl, r3
 8013d90:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013d94:	f04f 0800 	mov.w	r8, #0
 8013d98:	9b04      	ldr	r3, [sp, #16]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d1a2      	bne.n	8013ce4 <_strtod_l+0x804>
 8013d9e:	e5ed      	b.n	801397c <_strtod_l+0x49c>
 8013da0:	f04f 33ff 	mov.w	r3, #4294967295
 8013da4:	e7e9      	b.n	8013d7a <_strtod_l+0x89a>
 8013da6:	4613      	mov	r3, r2
 8013da8:	e7e7      	b.n	8013d7a <_strtod_l+0x89a>
 8013daa:	ea53 0308 	orrs.w	r3, r3, r8
 8013dae:	d08a      	beq.n	8013cc6 <_strtod_l+0x7e6>
 8013db0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013db2:	b1e3      	cbz	r3, 8013dee <_strtod_l+0x90e>
 8013db4:	ea13 0f0a 	tst.w	r3, sl
 8013db8:	d0ee      	beq.n	8013d98 <_strtod_l+0x8b8>
 8013dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013dbc:	9a04      	ldr	r2, [sp, #16]
 8013dbe:	4640      	mov	r0, r8
 8013dc0:	4649      	mov	r1, r9
 8013dc2:	b1c3      	cbz	r3, 8013df6 <_strtod_l+0x916>
 8013dc4:	f7ff fb6e 	bl	80134a4 <sulp>
 8013dc8:	4602      	mov	r2, r0
 8013dca:	460b      	mov	r3, r1
 8013dcc:	ec51 0b18 	vmov	r0, r1, d8
 8013dd0:	f7ec fa7c 	bl	80002cc <__adddf3>
 8013dd4:	4680      	mov	r8, r0
 8013dd6:	4689      	mov	r9, r1
 8013dd8:	e7de      	b.n	8013d98 <_strtod_l+0x8b8>
 8013dda:	4013      	ands	r3, r2
 8013ddc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013de0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013de4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013de8:	f04f 38ff 	mov.w	r8, #4294967295
 8013dec:	e7d4      	b.n	8013d98 <_strtod_l+0x8b8>
 8013dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013df0:	ea13 0f08 	tst.w	r3, r8
 8013df4:	e7e0      	b.n	8013db8 <_strtod_l+0x8d8>
 8013df6:	f7ff fb55 	bl	80134a4 <sulp>
 8013dfa:	4602      	mov	r2, r0
 8013dfc:	460b      	mov	r3, r1
 8013dfe:	ec51 0b18 	vmov	r0, r1, d8
 8013e02:	f7ec fa61 	bl	80002c8 <__aeabi_dsub>
 8013e06:	2200      	movs	r2, #0
 8013e08:	2300      	movs	r3, #0
 8013e0a:	4680      	mov	r8, r0
 8013e0c:	4689      	mov	r9, r1
 8013e0e:	f7ec fe7b 	bl	8000b08 <__aeabi_dcmpeq>
 8013e12:	2800      	cmp	r0, #0
 8013e14:	d0c0      	beq.n	8013d98 <_strtod_l+0x8b8>
 8013e16:	e618      	b.n	8013a4a <_strtod_l+0x56a>
 8013e18:	fffffc02 	.word	0xfffffc02
 8013e1c:	7ff00000 	.word	0x7ff00000
 8013e20:	39500000 	.word	0x39500000
 8013e24:	000fffff 	.word	0x000fffff
 8013e28:	7fefffff 	.word	0x7fefffff
 8013e2c:	0801ad08 	.word	0x0801ad08
 8013e30:	4659      	mov	r1, fp
 8013e32:	4628      	mov	r0, r5
 8013e34:	f003 f87a 	bl	8016f2c <__ratio>
 8013e38:	ec57 6b10 	vmov	r6, r7, d0
 8013e3c:	ee10 0a10 	vmov	r0, s0
 8013e40:	2200      	movs	r2, #0
 8013e42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013e46:	4639      	mov	r1, r7
 8013e48:	f7ec fe72 	bl	8000b30 <__aeabi_dcmple>
 8013e4c:	2800      	cmp	r0, #0
 8013e4e:	d071      	beq.n	8013f34 <_strtod_l+0xa54>
 8013e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d17c      	bne.n	8013f50 <_strtod_l+0xa70>
 8013e56:	f1b8 0f00 	cmp.w	r8, #0
 8013e5a:	d15a      	bne.n	8013f12 <_strtod_l+0xa32>
 8013e5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d15d      	bne.n	8013f20 <_strtod_l+0xa40>
 8013e64:	4b90      	ldr	r3, [pc, #576]	; (80140a8 <_strtod_l+0xbc8>)
 8013e66:	2200      	movs	r2, #0
 8013e68:	4630      	mov	r0, r6
 8013e6a:	4639      	mov	r1, r7
 8013e6c:	f7ec fe56 	bl	8000b1c <__aeabi_dcmplt>
 8013e70:	2800      	cmp	r0, #0
 8013e72:	d15c      	bne.n	8013f2e <_strtod_l+0xa4e>
 8013e74:	4630      	mov	r0, r6
 8013e76:	4639      	mov	r1, r7
 8013e78:	4b8c      	ldr	r3, [pc, #560]	; (80140ac <_strtod_l+0xbcc>)
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	f7ec fbdc 	bl	8000638 <__aeabi_dmul>
 8013e80:	4606      	mov	r6, r0
 8013e82:	460f      	mov	r7, r1
 8013e84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013e88:	9606      	str	r6, [sp, #24]
 8013e8a:	9307      	str	r3, [sp, #28]
 8013e8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013e90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013e94:	4b86      	ldr	r3, [pc, #536]	; (80140b0 <_strtod_l+0xbd0>)
 8013e96:	ea0a 0303 	and.w	r3, sl, r3
 8013e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8013e9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e9e:	4b85      	ldr	r3, [pc, #532]	; (80140b4 <_strtod_l+0xbd4>)
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	f040 8090 	bne.w	8013fc6 <_strtod_l+0xae6>
 8013ea6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8013eaa:	ec49 8b10 	vmov	d0, r8, r9
 8013eae:	f002 ff73 	bl	8016d98 <__ulp>
 8013eb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013eb6:	ec51 0b10 	vmov	r0, r1, d0
 8013eba:	f7ec fbbd 	bl	8000638 <__aeabi_dmul>
 8013ebe:	4642      	mov	r2, r8
 8013ec0:	464b      	mov	r3, r9
 8013ec2:	f7ec fa03 	bl	80002cc <__adddf3>
 8013ec6:	460b      	mov	r3, r1
 8013ec8:	4979      	ldr	r1, [pc, #484]	; (80140b0 <_strtod_l+0xbd0>)
 8013eca:	4a7b      	ldr	r2, [pc, #492]	; (80140b8 <_strtod_l+0xbd8>)
 8013ecc:	4019      	ands	r1, r3
 8013ece:	4291      	cmp	r1, r2
 8013ed0:	4680      	mov	r8, r0
 8013ed2:	d944      	bls.n	8013f5e <_strtod_l+0xa7e>
 8013ed4:	ee18 2a90 	vmov	r2, s17
 8013ed8:	4b78      	ldr	r3, [pc, #480]	; (80140bc <_strtod_l+0xbdc>)
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d104      	bne.n	8013ee8 <_strtod_l+0xa08>
 8013ede:	ee18 3a10 	vmov	r3, s16
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	f43f ad40 	beq.w	8013968 <_strtod_l+0x488>
 8013ee8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80140bc <_strtod_l+0xbdc>
 8013eec:	f04f 38ff 	mov.w	r8, #4294967295
 8013ef0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	f002 fc24 	bl	8016740 <_Bfree>
 8013ef8:	9905      	ldr	r1, [sp, #20]
 8013efa:	4620      	mov	r0, r4
 8013efc:	f002 fc20 	bl	8016740 <_Bfree>
 8013f00:	4659      	mov	r1, fp
 8013f02:	4620      	mov	r0, r4
 8013f04:	f002 fc1c 	bl	8016740 <_Bfree>
 8013f08:	4629      	mov	r1, r5
 8013f0a:	4620      	mov	r0, r4
 8013f0c:	f002 fc18 	bl	8016740 <_Bfree>
 8013f10:	e609      	b.n	8013b26 <_strtod_l+0x646>
 8013f12:	f1b8 0f01 	cmp.w	r8, #1
 8013f16:	d103      	bne.n	8013f20 <_strtod_l+0xa40>
 8013f18:	f1b9 0f00 	cmp.w	r9, #0
 8013f1c:	f43f ad95 	beq.w	8013a4a <_strtod_l+0x56a>
 8013f20:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8014078 <_strtod_l+0xb98>
 8013f24:	4f60      	ldr	r7, [pc, #384]	; (80140a8 <_strtod_l+0xbc8>)
 8013f26:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013f2a:	2600      	movs	r6, #0
 8013f2c:	e7ae      	b.n	8013e8c <_strtod_l+0x9ac>
 8013f2e:	4f5f      	ldr	r7, [pc, #380]	; (80140ac <_strtod_l+0xbcc>)
 8013f30:	2600      	movs	r6, #0
 8013f32:	e7a7      	b.n	8013e84 <_strtod_l+0x9a4>
 8013f34:	4b5d      	ldr	r3, [pc, #372]	; (80140ac <_strtod_l+0xbcc>)
 8013f36:	4630      	mov	r0, r6
 8013f38:	4639      	mov	r1, r7
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	f7ec fb7c 	bl	8000638 <__aeabi_dmul>
 8013f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f42:	4606      	mov	r6, r0
 8013f44:	460f      	mov	r7, r1
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d09c      	beq.n	8013e84 <_strtod_l+0x9a4>
 8013f4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013f4e:	e79d      	b.n	8013e8c <_strtod_l+0x9ac>
 8013f50:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8014080 <_strtod_l+0xba0>
 8013f54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013f58:	ec57 6b17 	vmov	r6, r7, d7
 8013f5c:	e796      	b.n	8013e8c <_strtod_l+0x9ac>
 8013f5e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8013f62:	9b04      	ldr	r3, [sp, #16]
 8013f64:	46ca      	mov	sl, r9
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d1c2      	bne.n	8013ef0 <_strtod_l+0xa10>
 8013f6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013f6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013f70:	0d1b      	lsrs	r3, r3, #20
 8013f72:	051b      	lsls	r3, r3, #20
 8013f74:	429a      	cmp	r2, r3
 8013f76:	d1bb      	bne.n	8013ef0 <_strtod_l+0xa10>
 8013f78:	4630      	mov	r0, r6
 8013f7a:	4639      	mov	r1, r7
 8013f7c:	f7ec febc 	bl	8000cf8 <__aeabi_d2lz>
 8013f80:	f7ec fb2c 	bl	80005dc <__aeabi_l2d>
 8013f84:	4602      	mov	r2, r0
 8013f86:	460b      	mov	r3, r1
 8013f88:	4630      	mov	r0, r6
 8013f8a:	4639      	mov	r1, r7
 8013f8c:	f7ec f99c 	bl	80002c8 <__aeabi_dsub>
 8013f90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013f92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013f96:	ea43 0308 	orr.w	r3, r3, r8
 8013f9a:	4313      	orrs	r3, r2
 8013f9c:	4606      	mov	r6, r0
 8013f9e:	460f      	mov	r7, r1
 8013fa0:	d054      	beq.n	801404c <_strtod_l+0xb6c>
 8013fa2:	a339      	add	r3, pc, #228	; (adr r3, 8014088 <_strtod_l+0xba8>)
 8013fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa8:	f7ec fdb8 	bl	8000b1c <__aeabi_dcmplt>
 8013fac:	2800      	cmp	r0, #0
 8013fae:	f47f ace5 	bne.w	801397c <_strtod_l+0x49c>
 8013fb2:	a337      	add	r3, pc, #220	; (adr r3, 8014090 <_strtod_l+0xbb0>)
 8013fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fb8:	4630      	mov	r0, r6
 8013fba:	4639      	mov	r1, r7
 8013fbc:	f7ec fdcc 	bl	8000b58 <__aeabi_dcmpgt>
 8013fc0:	2800      	cmp	r0, #0
 8013fc2:	d095      	beq.n	8013ef0 <_strtod_l+0xa10>
 8013fc4:	e4da      	b.n	801397c <_strtod_l+0x49c>
 8013fc6:	9b04      	ldr	r3, [sp, #16]
 8013fc8:	b333      	cbz	r3, 8014018 <_strtod_l+0xb38>
 8013fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013fcc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013fd0:	d822      	bhi.n	8014018 <_strtod_l+0xb38>
 8013fd2:	a331      	add	r3, pc, #196	; (adr r3, 8014098 <_strtod_l+0xbb8>)
 8013fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd8:	4630      	mov	r0, r6
 8013fda:	4639      	mov	r1, r7
 8013fdc:	f7ec fda8 	bl	8000b30 <__aeabi_dcmple>
 8013fe0:	b1a0      	cbz	r0, 801400c <_strtod_l+0xb2c>
 8013fe2:	4639      	mov	r1, r7
 8013fe4:	4630      	mov	r0, r6
 8013fe6:	f7ec fdff 	bl	8000be8 <__aeabi_d2uiz>
 8013fea:	2801      	cmp	r0, #1
 8013fec:	bf38      	it	cc
 8013fee:	2001      	movcc	r0, #1
 8013ff0:	f7ec faa8 	bl	8000544 <__aeabi_ui2d>
 8013ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ff6:	4606      	mov	r6, r0
 8013ff8:	460f      	mov	r7, r1
 8013ffa:	bb23      	cbnz	r3, 8014046 <_strtod_l+0xb66>
 8013ffc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014000:	9010      	str	r0, [sp, #64]	; 0x40
 8014002:	9311      	str	r3, [sp, #68]	; 0x44
 8014004:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014008:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801400c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801400e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014010:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014014:	1a9b      	subs	r3, r3, r2
 8014016:	930f      	str	r3, [sp, #60]	; 0x3c
 8014018:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801401c:	eeb0 0a48 	vmov.f32	s0, s16
 8014020:	eef0 0a68 	vmov.f32	s1, s17
 8014024:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014028:	f002 feb6 	bl	8016d98 <__ulp>
 801402c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014030:	ec53 2b10 	vmov	r2, r3, d0
 8014034:	f7ec fb00 	bl	8000638 <__aeabi_dmul>
 8014038:	ec53 2b18 	vmov	r2, r3, d8
 801403c:	f7ec f946 	bl	80002cc <__adddf3>
 8014040:	4680      	mov	r8, r0
 8014042:	4689      	mov	r9, r1
 8014044:	e78d      	b.n	8013f62 <_strtod_l+0xa82>
 8014046:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801404a:	e7db      	b.n	8014004 <_strtod_l+0xb24>
 801404c:	a314      	add	r3, pc, #80	; (adr r3, 80140a0 <_strtod_l+0xbc0>)
 801404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014052:	f7ec fd63 	bl	8000b1c <__aeabi_dcmplt>
 8014056:	e7b3      	b.n	8013fc0 <_strtod_l+0xae0>
 8014058:	2300      	movs	r3, #0
 801405a:	930a      	str	r3, [sp, #40]	; 0x28
 801405c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801405e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014060:	6013      	str	r3, [r2, #0]
 8014062:	f7ff ba7c 	b.w	801355e <_strtod_l+0x7e>
 8014066:	2a65      	cmp	r2, #101	; 0x65
 8014068:	f43f ab75 	beq.w	8013756 <_strtod_l+0x276>
 801406c:	2a45      	cmp	r2, #69	; 0x45
 801406e:	f43f ab72 	beq.w	8013756 <_strtod_l+0x276>
 8014072:	2301      	movs	r3, #1
 8014074:	f7ff bbaa 	b.w	80137cc <_strtod_l+0x2ec>
 8014078:	00000000 	.word	0x00000000
 801407c:	bff00000 	.word	0xbff00000
 8014080:	00000000 	.word	0x00000000
 8014084:	3ff00000 	.word	0x3ff00000
 8014088:	94a03595 	.word	0x94a03595
 801408c:	3fdfffff 	.word	0x3fdfffff
 8014090:	35afe535 	.word	0x35afe535
 8014094:	3fe00000 	.word	0x3fe00000
 8014098:	ffc00000 	.word	0xffc00000
 801409c:	41dfffff 	.word	0x41dfffff
 80140a0:	94a03595 	.word	0x94a03595
 80140a4:	3fcfffff 	.word	0x3fcfffff
 80140a8:	3ff00000 	.word	0x3ff00000
 80140ac:	3fe00000 	.word	0x3fe00000
 80140b0:	7ff00000 	.word	0x7ff00000
 80140b4:	7fe00000 	.word	0x7fe00000
 80140b8:	7c9fffff 	.word	0x7c9fffff
 80140bc:	7fefffff 	.word	0x7fefffff

080140c0 <strtof>:
 80140c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140c4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8014188 <strtof+0xc8>
 80140c8:	4b2a      	ldr	r3, [pc, #168]	; (8014174 <strtof+0xb4>)
 80140ca:	460a      	mov	r2, r1
 80140cc:	ed2d 8b02 	vpush	{d8}
 80140d0:	4601      	mov	r1, r0
 80140d2:	f8d8 0000 	ldr.w	r0, [r8]
 80140d6:	f7ff fa03 	bl	80134e0 <_strtod_l>
 80140da:	ec55 4b10 	vmov	r4, r5, d0
 80140de:	ee10 2a10 	vmov	r2, s0
 80140e2:	ee10 0a10 	vmov	r0, s0
 80140e6:	462b      	mov	r3, r5
 80140e8:	4629      	mov	r1, r5
 80140ea:	f7ec fd3f 	bl	8000b6c <__aeabi_dcmpun>
 80140ee:	b190      	cbz	r0, 8014116 <strtof+0x56>
 80140f0:	2d00      	cmp	r5, #0
 80140f2:	4821      	ldr	r0, [pc, #132]	; (8014178 <strtof+0xb8>)
 80140f4:	da09      	bge.n	801410a <strtof+0x4a>
 80140f6:	f001 f88f 	bl	8015218 <nanf>
 80140fa:	eeb1 8a40 	vneg.f32	s16, s0
 80140fe:	eeb0 0a48 	vmov.f32	s0, s16
 8014102:	ecbd 8b02 	vpop	{d8}
 8014106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801410a:	ecbd 8b02 	vpop	{d8}
 801410e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014112:	f001 b881 	b.w	8015218 <nanf>
 8014116:	4620      	mov	r0, r4
 8014118:	4629      	mov	r1, r5
 801411a:	f7ec fd85 	bl	8000c28 <__aeabi_d2f>
 801411e:	ee08 0a10 	vmov	s16, r0
 8014122:	eddf 7a16 	vldr	s15, [pc, #88]	; 801417c <strtof+0xbc>
 8014126:	eeb0 7ac8 	vabs.f32	s14, s16
 801412a:	eeb4 7a67 	vcmp.f32	s14, s15
 801412e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014132:	dd11      	ble.n	8014158 <strtof+0x98>
 8014134:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8014138:	4b11      	ldr	r3, [pc, #68]	; (8014180 <strtof+0xc0>)
 801413a:	f04f 32ff 	mov.w	r2, #4294967295
 801413e:	4620      	mov	r0, r4
 8014140:	4639      	mov	r1, r7
 8014142:	f7ec fd13 	bl	8000b6c <__aeabi_dcmpun>
 8014146:	b980      	cbnz	r0, 801416a <strtof+0xaa>
 8014148:	4b0d      	ldr	r3, [pc, #52]	; (8014180 <strtof+0xc0>)
 801414a:	f04f 32ff 	mov.w	r2, #4294967295
 801414e:	4620      	mov	r0, r4
 8014150:	4639      	mov	r1, r7
 8014152:	f7ec fced 	bl	8000b30 <__aeabi_dcmple>
 8014156:	b940      	cbnz	r0, 801416a <strtof+0xaa>
 8014158:	ee18 3a10 	vmov	r3, s16
 801415c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8014160:	d1cd      	bne.n	80140fe <strtof+0x3e>
 8014162:	4b08      	ldr	r3, [pc, #32]	; (8014184 <strtof+0xc4>)
 8014164:	402b      	ands	r3, r5
 8014166:	2b00      	cmp	r3, #0
 8014168:	d0c9      	beq.n	80140fe <strtof+0x3e>
 801416a:	f8d8 3000 	ldr.w	r3, [r8]
 801416e:	2222      	movs	r2, #34	; 0x22
 8014170:	601a      	str	r2, [r3, #0]
 8014172:	e7c4      	b.n	80140fe <strtof+0x3e>
 8014174:	20000038 	.word	0x20000038
 8014178:	0801af02 	.word	0x0801af02
 801417c:	7f7fffff 	.word	0x7f7fffff
 8014180:	7fefffff 	.word	0x7fefffff
 8014184:	7ff00000 	.word	0x7ff00000
 8014188:	200001f0 	.word	0x200001f0

0801418c <_strtol_l.constprop.0>:
 801418c:	2b01      	cmp	r3, #1
 801418e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014192:	d001      	beq.n	8014198 <_strtol_l.constprop.0+0xc>
 8014194:	2b24      	cmp	r3, #36	; 0x24
 8014196:	d906      	bls.n	80141a6 <_strtol_l.constprop.0+0x1a>
 8014198:	f000 fff8 	bl	801518c <__errno>
 801419c:	2316      	movs	r3, #22
 801419e:	6003      	str	r3, [r0, #0]
 80141a0:	2000      	movs	r0, #0
 80141a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801428c <_strtol_l.constprop.0+0x100>
 80141aa:	460d      	mov	r5, r1
 80141ac:	462e      	mov	r6, r5
 80141ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141b2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80141b6:	f017 0708 	ands.w	r7, r7, #8
 80141ba:	d1f7      	bne.n	80141ac <_strtol_l.constprop.0+0x20>
 80141bc:	2c2d      	cmp	r4, #45	; 0x2d
 80141be:	d132      	bne.n	8014226 <_strtol_l.constprop.0+0x9a>
 80141c0:	782c      	ldrb	r4, [r5, #0]
 80141c2:	2701      	movs	r7, #1
 80141c4:	1cb5      	adds	r5, r6, #2
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d05b      	beq.n	8014282 <_strtol_l.constprop.0+0xf6>
 80141ca:	2b10      	cmp	r3, #16
 80141cc:	d109      	bne.n	80141e2 <_strtol_l.constprop.0+0x56>
 80141ce:	2c30      	cmp	r4, #48	; 0x30
 80141d0:	d107      	bne.n	80141e2 <_strtol_l.constprop.0+0x56>
 80141d2:	782c      	ldrb	r4, [r5, #0]
 80141d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80141d8:	2c58      	cmp	r4, #88	; 0x58
 80141da:	d14d      	bne.n	8014278 <_strtol_l.constprop.0+0xec>
 80141dc:	786c      	ldrb	r4, [r5, #1]
 80141de:	2310      	movs	r3, #16
 80141e0:	3502      	adds	r5, #2
 80141e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80141e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80141ea:	f04f 0e00 	mov.w	lr, #0
 80141ee:	fbb8 f9f3 	udiv	r9, r8, r3
 80141f2:	4676      	mov	r6, lr
 80141f4:	fb03 8a19 	mls	sl, r3, r9, r8
 80141f8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80141fc:	f1bc 0f09 	cmp.w	ip, #9
 8014200:	d816      	bhi.n	8014230 <_strtol_l.constprop.0+0xa4>
 8014202:	4664      	mov	r4, ip
 8014204:	42a3      	cmp	r3, r4
 8014206:	dd24      	ble.n	8014252 <_strtol_l.constprop.0+0xc6>
 8014208:	f1be 3fff 	cmp.w	lr, #4294967295
 801420c:	d008      	beq.n	8014220 <_strtol_l.constprop.0+0x94>
 801420e:	45b1      	cmp	r9, r6
 8014210:	d31c      	bcc.n	801424c <_strtol_l.constprop.0+0xc0>
 8014212:	d101      	bne.n	8014218 <_strtol_l.constprop.0+0x8c>
 8014214:	45a2      	cmp	sl, r4
 8014216:	db19      	blt.n	801424c <_strtol_l.constprop.0+0xc0>
 8014218:	fb06 4603 	mla	r6, r6, r3, r4
 801421c:	f04f 0e01 	mov.w	lr, #1
 8014220:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014224:	e7e8      	b.n	80141f8 <_strtol_l.constprop.0+0x6c>
 8014226:	2c2b      	cmp	r4, #43	; 0x2b
 8014228:	bf04      	itt	eq
 801422a:	782c      	ldrbeq	r4, [r5, #0]
 801422c:	1cb5      	addeq	r5, r6, #2
 801422e:	e7ca      	b.n	80141c6 <_strtol_l.constprop.0+0x3a>
 8014230:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014234:	f1bc 0f19 	cmp.w	ip, #25
 8014238:	d801      	bhi.n	801423e <_strtol_l.constprop.0+0xb2>
 801423a:	3c37      	subs	r4, #55	; 0x37
 801423c:	e7e2      	b.n	8014204 <_strtol_l.constprop.0+0x78>
 801423e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014242:	f1bc 0f19 	cmp.w	ip, #25
 8014246:	d804      	bhi.n	8014252 <_strtol_l.constprop.0+0xc6>
 8014248:	3c57      	subs	r4, #87	; 0x57
 801424a:	e7db      	b.n	8014204 <_strtol_l.constprop.0+0x78>
 801424c:	f04f 3eff 	mov.w	lr, #4294967295
 8014250:	e7e6      	b.n	8014220 <_strtol_l.constprop.0+0x94>
 8014252:	f1be 3fff 	cmp.w	lr, #4294967295
 8014256:	d105      	bne.n	8014264 <_strtol_l.constprop.0+0xd8>
 8014258:	2322      	movs	r3, #34	; 0x22
 801425a:	6003      	str	r3, [r0, #0]
 801425c:	4646      	mov	r6, r8
 801425e:	b942      	cbnz	r2, 8014272 <_strtol_l.constprop.0+0xe6>
 8014260:	4630      	mov	r0, r6
 8014262:	e79e      	b.n	80141a2 <_strtol_l.constprop.0+0x16>
 8014264:	b107      	cbz	r7, 8014268 <_strtol_l.constprop.0+0xdc>
 8014266:	4276      	negs	r6, r6
 8014268:	2a00      	cmp	r2, #0
 801426a:	d0f9      	beq.n	8014260 <_strtol_l.constprop.0+0xd4>
 801426c:	f1be 0f00 	cmp.w	lr, #0
 8014270:	d000      	beq.n	8014274 <_strtol_l.constprop.0+0xe8>
 8014272:	1e69      	subs	r1, r5, #1
 8014274:	6011      	str	r1, [r2, #0]
 8014276:	e7f3      	b.n	8014260 <_strtol_l.constprop.0+0xd4>
 8014278:	2430      	movs	r4, #48	; 0x30
 801427a:	2b00      	cmp	r3, #0
 801427c:	d1b1      	bne.n	80141e2 <_strtol_l.constprop.0+0x56>
 801427e:	2308      	movs	r3, #8
 8014280:	e7af      	b.n	80141e2 <_strtol_l.constprop.0+0x56>
 8014282:	2c30      	cmp	r4, #48	; 0x30
 8014284:	d0a5      	beq.n	80141d2 <_strtol_l.constprop.0+0x46>
 8014286:	230a      	movs	r3, #10
 8014288:	e7ab      	b.n	80141e2 <_strtol_l.constprop.0+0x56>
 801428a:	bf00      	nop
 801428c:	0801ad31 	.word	0x0801ad31

08014290 <strtol>:
 8014290:	4613      	mov	r3, r2
 8014292:	460a      	mov	r2, r1
 8014294:	4601      	mov	r1, r0
 8014296:	4802      	ldr	r0, [pc, #8]	; (80142a0 <strtol+0x10>)
 8014298:	6800      	ldr	r0, [r0, #0]
 801429a:	f7ff bf77 	b.w	801418c <_strtol_l.constprop.0>
 801429e:	bf00      	nop
 80142a0:	200001f0 	.word	0x200001f0

080142a4 <__cvt>:
 80142a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80142a8:	ec55 4b10 	vmov	r4, r5, d0
 80142ac:	2d00      	cmp	r5, #0
 80142ae:	460e      	mov	r6, r1
 80142b0:	4619      	mov	r1, r3
 80142b2:	462b      	mov	r3, r5
 80142b4:	bfbb      	ittet	lt
 80142b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80142ba:	461d      	movlt	r5, r3
 80142bc:	2300      	movge	r3, #0
 80142be:	232d      	movlt	r3, #45	; 0x2d
 80142c0:	700b      	strb	r3, [r1, #0]
 80142c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80142c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80142c8:	4691      	mov	r9, r2
 80142ca:	f023 0820 	bic.w	r8, r3, #32
 80142ce:	bfbc      	itt	lt
 80142d0:	4622      	movlt	r2, r4
 80142d2:	4614      	movlt	r4, r2
 80142d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80142d8:	d005      	beq.n	80142e6 <__cvt+0x42>
 80142da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80142de:	d100      	bne.n	80142e2 <__cvt+0x3e>
 80142e0:	3601      	adds	r6, #1
 80142e2:	2102      	movs	r1, #2
 80142e4:	e000      	b.n	80142e8 <__cvt+0x44>
 80142e6:	2103      	movs	r1, #3
 80142e8:	ab03      	add	r3, sp, #12
 80142ea:	9301      	str	r3, [sp, #4]
 80142ec:	ab02      	add	r3, sp, #8
 80142ee:	9300      	str	r3, [sp, #0]
 80142f0:	ec45 4b10 	vmov	d0, r4, r5
 80142f4:	4653      	mov	r3, sl
 80142f6:	4632      	mov	r2, r6
 80142f8:	f001 f83a 	bl	8015370 <_dtoa_r>
 80142fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014300:	4607      	mov	r7, r0
 8014302:	d102      	bne.n	801430a <__cvt+0x66>
 8014304:	f019 0f01 	tst.w	r9, #1
 8014308:	d022      	beq.n	8014350 <__cvt+0xac>
 801430a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801430e:	eb07 0906 	add.w	r9, r7, r6
 8014312:	d110      	bne.n	8014336 <__cvt+0x92>
 8014314:	783b      	ldrb	r3, [r7, #0]
 8014316:	2b30      	cmp	r3, #48	; 0x30
 8014318:	d10a      	bne.n	8014330 <__cvt+0x8c>
 801431a:	2200      	movs	r2, #0
 801431c:	2300      	movs	r3, #0
 801431e:	4620      	mov	r0, r4
 8014320:	4629      	mov	r1, r5
 8014322:	f7ec fbf1 	bl	8000b08 <__aeabi_dcmpeq>
 8014326:	b918      	cbnz	r0, 8014330 <__cvt+0x8c>
 8014328:	f1c6 0601 	rsb	r6, r6, #1
 801432c:	f8ca 6000 	str.w	r6, [sl]
 8014330:	f8da 3000 	ldr.w	r3, [sl]
 8014334:	4499      	add	r9, r3
 8014336:	2200      	movs	r2, #0
 8014338:	2300      	movs	r3, #0
 801433a:	4620      	mov	r0, r4
 801433c:	4629      	mov	r1, r5
 801433e:	f7ec fbe3 	bl	8000b08 <__aeabi_dcmpeq>
 8014342:	b108      	cbz	r0, 8014348 <__cvt+0xa4>
 8014344:	f8cd 900c 	str.w	r9, [sp, #12]
 8014348:	2230      	movs	r2, #48	; 0x30
 801434a:	9b03      	ldr	r3, [sp, #12]
 801434c:	454b      	cmp	r3, r9
 801434e:	d307      	bcc.n	8014360 <__cvt+0xbc>
 8014350:	9b03      	ldr	r3, [sp, #12]
 8014352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014354:	1bdb      	subs	r3, r3, r7
 8014356:	4638      	mov	r0, r7
 8014358:	6013      	str	r3, [r2, #0]
 801435a:	b004      	add	sp, #16
 801435c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014360:	1c59      	adds	r1, r3, #1
 8014362:	9103      	str	r1, [sp, #12]
 8014364:	701a      	strb	r2, [r3, #0]
 8014366:	e7f0      	b.n	801434a <__cvt+0xa6>

08014368 <__exponent>:
 8014368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801436a:	4603      	mov	r3, r0
 801436c:	2900      	cmp	r1, #0
 801436e:	bfb8      	it	lt
 8014370:	4249      	neglt	r1, r1
 8014372:	f803 2b02 	strb.w	r2, [r3], #2
 8014376:	bfb4      	ite	lt
 8014378:	222d      	movlt	r2, #45	; 0x2d
 801437a:	222b      	movge	r2, #43	; 0x2b
 801437c:	2909      	cmp	r1, #9
 801437e:	7042      	strb	r2, [r0, #1]
 8014380:	dd2a      	ble.n	80143d8 <__exponent+0x70>
 8014382:	f10d 0207 	add.w	r2, sp, #7
 8014386:	4617      	mov	r7, r2
 8014388:	260a      	movs	r6, #10
 801438a:	4694      	mov	ip, r2
 801438c:	fb91 f5f6 	sdiv	r5, r1, r6
 8014390:	fb06 1415 	mls	r4, r6, r5, r1
 8014394:	3430      	adds	r4, #48	; 0x30
 8014396:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801439a:	460c      	mov	r4, r1
 801439c:	2c63      	cmp	r4, #99	; 0x63
 801439e:	f102 32ff 	add.w	r2, r2, #4294967295
 80143a2:	4629      	mov	r1, r5
 80143a4:	dcf1      	bgt.n	801438a <__exponent+0x22>
 80143a6:	3130      	adds	r1, #48	; 0x30
 80143a8:	f1ac 0402 	sub.w	r4, ip, #2
 80143ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 80143b0:	1c41      	adds	r1, r0, #1
 80143b2:	4622      	mov	r2, r4
 80143b4:	42ba      	cmp	r2, r7
 80143b6:	d30a      	bcc.n	80143ce <__exponent+0x66>
 80143b8:	f10d 0209 	add.w	r2, sp, #9
 80143bc:	eba2 020c 	sub.w	r2, r2, ip
 80143c0:	42bc      	cmp	r4, r7
 80143c2:	bf88      	it	hi
 80143c4:	2200      	movhi	r2, #0
 80143c6:	4413      	add	r3, r2
 80143c8:	1a18      	subs	r0, r3, r0
 80143ca:	b003      	add	sp, #12
 80143cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143ce:	f812 5b01 	ldrb.w	r5, [r2], #1
 80143d2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80143d6:	e7ed      	b.n	80143b4 <__exponent+0x4c>
 80143d8:	2330      	movs	r3, #48	; 0x30
 80143da:	3130      	adds	r1, #48	; 0x30
 80143dc:	7083      	strb	r3, [r0, #2]
 80143de:	70c1      	strb	r1, [r0, #3]
 80143e0:	1d03      	adds	r3, r0, #4
 80143e2:	e7f1      	b.n	80143c8 <__exponent+0x60>

080143e4 <_printf_float>:
 80143e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143e8:	ed2d 8b02 	vpush	{d8}
 80143ec:	b08d      	sub	sp, #52	; 0x34
 80143ee:	460c      	mov	r4, r1
 80143f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80143f4:	4616      	mov	r6, r2
 80143f6:	461f      	mov	r7, r3
 80143f8:	4605      	mov	r5, r0
 80143fa:	f000 fe6d 	bl	80150d8 <_localeconv_r>
 80143fe:	f8d0 a000 	ldr.w	sl, [r0]
 8014402:	4650      	mov	r0, sl
 8014404:	f7eb ff54 	bl	80002b0 <strlen>
 8014408:	2300      	movs	r3, #0
 801440a:	930a      	str	r3, [sp, #40]	; 0x28
 801440c:	6823      	ldr	r3, [r4, #0]
 801440e:	9305      	str	r3, [sp, #20]
 8014410:	f8d8 3000 	ldr.w	r3, [r8]
 8014414:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014418:	3307      	adds	r3, #7
 801441a:	f023 0307 	bic.w	r3, r3, #7
 801441e:	f103 0208 	add.w	r2, r3, #8
 8014422:	f8c8 2000 	str.w	r2, [r8]
 8014426:	e9d3 8900 	ldrd	r8, r9, [r3]
 801442a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801442e:	9307      	str	r3, [sp, #28]
 8014430:	f8cd 8018 	str.w	r8, [sp, #24]
 8014434:	ee08 0a10 	vmov	s16, r0
 8014438:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801443c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014440:	4b9e      	ldr	r3, [pc, #632]	; (80146bc <_printf_float+0x2d8>)
 8014442:	f04f 32ff 	mov.w	r2, #4294967295
 8014446:	f7ec fb91 	bl	8000b6c <__aeabi_dcmpun>
 801444a:	bb88      	cbnz	r0, 80144b0 <_printf_float+0xcc>
 801444c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014450:	4b9a      	ldr	r3, [pc, #616]	; (80146bc <_printf_float+0x2d8>)
 8014452:	f04f 32ff 	mov.w	r2, #4294967295
 8014456:	f7ec fb6b 	bl	8000b30 <__aeabi_dcmple>
 801445a:	bb48      	cbnz	r0, 80144b0 <_printf_float+0xcc>
 801445c:	2200      	movs	r2, #0
 801445e:	2300      	movs	r3, #0
 8014460:	4640      	mov	r0, r8
 8014462:	4649      	mov	r1, r9
 8014464:	f7ec fb5a 	bl	8000b1c <__aeabi_dcmplt>
 8014468:	b110      	cbz	r0, 8014470 <_printf_float+0x8c>
 801446a:	232d      	movs	r3, #45	; 0x2d
 801446c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014470:	4a93      	ldr	r2, [pc, #588]	; (80146c0 <_printf_float+0x2dc>)
 8014472:	4b94      	ldr	r3, [pc, #592]	; (80146c4 <_printf_float+0x2e0>)
 8014474:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014478:	bf94      	ite	ls
 801447a:	4690      	movls	r8, r2
 801447c:	4698      	movhi	r8, r3
 801447e:	2303      	movs	r3, #3
 8014480:	6123      	str	r3, [r4, #16]
 8014482:	9b05      	ldr	r3, [sp, #20]
 8014484:	f023 0304 	bic.w	r3, r3, #4
 8014488:	6023      	str	r3, [r4, #0]
 801448a:	f04f 0900 	mov.w	r9, #0
 801448e:	9700      	str	r7, [sp, #0]
 8014490:	4633      	mov	r3, r6
 8014492:	aa0b      	add	r2, sp, #44	; 0x2c
 8014494:	4621      	mov	r1, r4
 8014496:	4628      	mov	r0, r5
 8014498:	f000 f9da 	bl	8014850 <_printf_common>
 801449c:	3001      	adds	r0, #1
 801449e:	f040 8090 	bne.w	80145c2 <_printf_float+0x1de>
 80144a2:	f04f 30ff 	mov.w	r0, #4294967295
 80144a6:	b00d      	add	sp, #52	; 0x34
 80144a8:	ecbd 8b02 	vpop	{d8}
 80144ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144b0:	4642      	mov	r2, r8
 80144b2:	464b      	mov	r3, r9
 80144b4:	4640      	mov	r0, r8
 80144b6:	4649      	mov	r1, r9
 80144b8:	f7ec fb58 	bl	8000b6c <__aeabi_dcmpun>
 80144bc:	b140      	cbz	r0, 80144d0 <_printf_float+0xec>
 80144be:	464b      	mov	r3, r9
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	bfbc      	itt	lt
 80144c4:	232d      	movlt	r3, #45	; 0x2d
 80144c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80144ca:	4a7f      	ldr	r2, [pc, #508]	; (80146c8 <_printf_float+0x2e4>)
 80144cc:	4b7f      	ldr	r3, [pc, #508]	; (80146cc <_printf_float+0x2e8>)
 80144ce:	e7d1      	b.n	8014474 <_printf_float+0x90>
 80144d0:	6863      	ldr	r3, [r4, #4]
 80144d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80144d6:	9206      	str	r2, [sp, #24]
 80144d8:	1c5a      	adds	r2, r3, #1
 80144da:	d13f      	bne.n	801455c <_printf_float+0x178>
 80144dc:	2306      	movs	r3, #6
 80144de:	6063      	str	r3, [r4, #4]
 80144e0:	9b05      	ldr	r3, [sp, #20]
 80144e2:	6861      	ldr	r1, [r4, #4]
 80144e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80144e8:	2300      	movs	r3, #0
 80144ea:	9303      	str	r3, [sp, #12]
 80144ec:	ab0a      	add	r3, sp, #40	; 0x28
 80144ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80144f2:	ab09      	add	r3, sp, #36	; 0x24
 80144f4:	ec49 8b10 	vmov	d0, r8, r9
 80144f8:	9300      	str	r3, [sp, #0]
 80144fa:	6022      	str	r2, [r4, #0]
 80144fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014500:	4628      	mov	r0, r5
 8014502:	f7ff fecf 	bl	80142a4 <__cvt>
 8014506:	9b06      	ldr	r3, [sp, #24]
 8014508:	9909      	ldr	r1, [sp, #36]	; 0x24
 801450a:	2b47      	cmp	r3, #71	; 0x47
 801450c:	4680      	mov	r8, r0
 801450e:	d108      	bne.n	8014522 <_printf_float+0x13e>
 8014510:	1cc8      	adds	r0, r1, #3
 8014512:	db02      	blt.n	801451a <_printf_float+0x136>
 8014514:	6863      	ldr	r3, [r4, #4]
 8014516:	4299      	cmp	r1, r3
 8014518:	dd41      	ble.n	801459e <_printf_float+0x1ba>
 801451a:	f1ab 0302 	sub.w	r3, fp, #2
 801451e:	fa5f fb83 	uxtb.w	fp, r3
 8014522:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014526:	d820      	bhi.n	801456a <_printf_float+0x186>
 8014528:	3901      	subs	r1, #1
 801452a:	465a      	mov	r2, fp
 801452c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014530:	9109      	str	r1, [sp, #36]	; 0x24
 8014532:	f7ff ff19 	bl	8014368 <__exponent>
 8014536:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014538:	1813      	adds	r3, r2, r0
 801453a:	2a01      	cmp	r2, #1
 801453c:	4681      	mov	r9, r0
 801453e:	6123      	str	r3, [r4, #16]
 8014540:	dc02      	bgt.n	8014548 <_printf_float+0x164>
 8014542:	6822      	ldr	r2, [r4, #0]
 8014544:	07d2      	lsls	r2, r2, #31
 8014546:	d501      	bpl.n	801454c <_printf_float+0x168>
 8014548:	3301      	adds	r3, #1
 801454a:	6123      	str	r3, [r4, #16]
 801454c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014550:	2b00      	cmp	r3, #0
 8014552:	d09c      	beq.n	801448e <_printf_float+0xaa>
 8014554:	232d      	movs	r3, #45	; 0x2d
 8014556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801455a:	e798      	b.n	801448e <_printf_float+0xaa>
 801455c:	9a06      	ldr	r2, [sp, #24]
 801455e:	2a47      	cmp	r2, #71	; 0x47
 8014560:	d1be      	bne.n	80144e0 <_printf_float+0xfc>
 8014562:	2b00      	cmp	r3, #0
 8014564:	d1bc      	bne.n	80144e0 <_printf_float+0xfc>
 8014566:	2301      	movs	r3, #1
 8014568:	e7b9      	b.n	80144de <_printf_float+0xfa>
 801456a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801456e:	d118      	bne.n	80145a2 <_printf_float+0x1be>
 8014570:	2900      	cmp	r1, #0
 8014572:	6863      	ldr	r3, [r4, #4]
 8014574:	dd0b      	ble.n	801458e <_printf_float+0x1aa>
 8014576:	6121      	str	r1, [r4, #16]
 8014578:	b913      	cbnz	r3, 8014580 <_printf_float+0x19c>
 801457a:	6822      	ldr	r2, [r4, #0]
 801457c:	07d0      	lsls	r0, r2, #31
 801457e:	d502      	bpl.n	8014586 <_printf_float+0x1a2>
 8014580:	3301      	adds	r3, #1
 8014582:	440b      	add	r3, r1
 8014584:	6123      	str	r3, [r4, #16]
 8014586:	65a1      	str	r1, [r4, #88]	; 0x58
 8014588:	f04f 0900 	mov.w	r9, #0
 801458c:	e7de      	b.n	801454c <_printf_float+0x168>
 801458e:	b913      	cbnz	r3, 8014596 <_printf_float+0x1b2>
 8014590:	6822      	ldr	r2, [r4, #0]
 8014592:	07d2      	lsls	r2, r2, #31
 8014594:	d501      	bpl.n	801459a <_printf_float+0x1b6>
 8014596:	3302      	adds	r3, #2
 8014598:	e7f4      	b.n	8014584 <_printf_float+0x1a0>
 801459a:	2301      	movs	r3, #1
 801459c:	e7f2      	b.n	8014584 <_printf_float+0x1a0>
 801459e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80145a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145a4:	4299      	cmp	r1, r3
 80145a6:	db05      	blt.n	80145b4 <_printf_float+0x1d0>
 80145a8:	6823      	ldr	r3, [r4, #0]
 80145aa:	6121      	str	r1, [r4, #16]
 80145ac:	07d8      	lsls	r0, r3, #31
 80145ae:	d5ea      	bpl.n	8014586 <_printf_float+0x1a2>
 80145b0:	1c4b      	adds	r3, r1, #1
 80145b2:	e7e7      	b.n	8014584 <_printf_float+0x1a0>
 80145b4:	2900      	cmp	r1, #0
 80145b6:	bfd4      	ite	le
 80145b8:	f1c1 0202 	rsble	r2, r1, #2
 80145bc:	2201      	movgt	r2, #1
 80145be:	4413      	add	r3, r2
 80145c0:	e7e0      	b.n	8014584 <_printf_float+0x1a0>
 80145c2:	6823      	ldr	r3, [r4, #0]
 80145c4:	055a      	lsls	r2, r3, #21
 80145c6:	d407      	bmi.n	80145d8 <_printf_float+0x1f4>
 80145c8:	6923      	ldr	r3, [r4, #16]
 80145ca:	4642      	mov	r2, r8
 80145cc:	4631      	mov	r1, r6
 80145ce:	4628      	mov	r0, r5
 80145d0:	47b8      	blx	r7
 80145d2:	3001      	adds	r0, #1
 80145d4:	d12c      	bne.n	8014630 <_printf_float+0x24c>
 80145d6:	e764      	b.n	80144a2 <_printf_float+0xbe>
 80145d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80145dc:	f240 80e0 	bls.w	80147a0 <_printf_float+0x3bc>
 80145e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80145e4:	2200      	movs	r2, #0
 80145e6:	2300      	movs	r3, #0
 80145e8:	f7ec fa8e 	bl	8000b08 <__aeabi_dcmpeq>
 80145ec:	2800      	cmp	r0, #0
 80145ee:	d034      	beq.n	801465a <_printf_float+0x276>
 80145f0:	4a37      	ldr	r2, [pc, #220]	; (80146d0 <_printf_float+0x2ec>)
 80145f2:	2301      	movs	r3, #1
 80145f4:	4631      	mov	r1, r6
 80145f6:	4628      	mov	r0, r5
 80145f8:	47b8      	blx	r7
 80145fa:	3001      	adds	r0, #1
 80145fc:	f43f af51 	beq.w	80144a2 <_printf_float+0xbe>
 8014600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014604:	429a      	cmp	r2, r3
 8014606:	db02      	blt.n	801460e <_printf_float+0x22a>
 8014608:	6823      	ldr	r3, [r4, #0]
 801460a:	07d8      	lsls	r0, r3, #31
 801460c:	d510      	bpl.n	8014630 <_printf_float+0x24c>
 801460e:	ee18 3a10 	vmov	r3, s16
 8014612:	4652      	mov	r2, sl
 8014614:	4631      	mov	r1, r6
 8014616:	4628      	mov	r0, r5
 8014618:	47b8      	blx	r7
 801461a:	3001      	adds	r0, #1
 801461c:	f43f af41 	beq.w	80144a2 <_printf_float+0xbe>
 8014620:	f04f 0800 	mov.w	r8, #0
 8014624:	f104 091a 	add.w	r9, r4, #26
 8014628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801462a:	3b01      	subs	r3, #1
 801462c:	4543      	cmp	r3, r8
 801462e:	dc09      	bgt.n	8014644 <_printf_float+0x260>
 8014630:	6823      	ldr	r3, [r4, #0]
 8014632:	079b      	lsls	r3, r3, #30
 8014634:	f100 8107 	bmi.w	8014846 <_printf_float+0x462>
 8014638:	68e0      	ldr	r0, [r4, #12]
 801463a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801463c:	4298      	cmp	r0, r3
 801463e:	bfb8      	it	lt
 8014640:	4618      	movlt	r0, r3
 8014642:	e730      	b.n	80144a6 <_printf_float+0xc2>
 8014644:	2301      	movs	r3, #1
 8014646:	464a      	mov	r2, r9
 8014648:	4631      	mov	r1, r6
 801464a:	4628      	mov	r0, r5
 801464c:	47b8      	blx	r7
 801464e:	3001      	adds	r0, #1
 8014650:	f43f af27 	beq.w	80144a2 <_printf_float+0xbe>
 8014654:	f108 0801 	add.w	r8, r8, #1
 8014658:	e7e6      	b.n	8014628 <_printf_float+0x244>
 801465a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801465c:	2b00      	cmp	r3, #0
 801465e:	dc39      	bgt.n	80146d4 <_printf_float+0x2f0>
 8014660:	4a1b      	ldr	r2, [pc, #108]	; (80146d0 <_printf_float+0x2ec>)
 8014662:	2301      	movs	r3, #1
 8014664:	4631      	mov	r1, r6
 8014666:	4628      	mov	r0, r5
 8014668:	47b8      	blx	r7
 801466a:	3001      	adds	r0, #1
 801466c:	f43f af19 	beq.w	80144a2 <_printf_float+0xbe>
 8014670:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014674:	4313      	orrs	r3, r2
 8014676:	d102      	bne.n	801467e <_printf_float+0x29a>
 8014678:	6823      	ldr	r3, [r4, #0]
 801467a:	07d9      	lsls	r1, r3, #31
 801467c:	d5d8      	bpl.n	8014630 <_printf_float+0x24c>
 801467e:	ee18 3a10 	vmov	r3, s16
 8014682:	4652      	mov	r2, sl
 8014684:	4631      	mov	r1, r6
 8014686:	4628      	mov	r0, r5
 8014688:	47b8      	blx	r7
 801468a:	3001      	adds	r0, #1
 801468c:	f43f af09 	beq.w	80144a2 <_printf_float+0xbe>
 8014690:	f04f 0900 	mov.w	r9, #0
 8014694:	f104 0a1a 	add.w	sl, r4, #26
 8014698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801469a:	425b      	negs	r3, r3
 801469c:	454b      	cmp	r3, r9
 801469e:	dc01      	bgt.n	80146a4 <_printf_float+0x2c0>
 80146a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146a2:	e792      	b.n	80145ca <_printf_float+0x1e6>
 80146a4:	2301      	movs	r3, #1
 80146a6:	4652      	mov	r2, sl
 80146a8:	4631      	mov	r1, r6
 80146aa:	4628      	mov	r0, r5
 80146ac:	47b8      	blx	r7
 80146ae:	3001      	adds	r0, #1
 80146b0:	f43f aef7 	beq.w	80144a2 <_printf_float+0xbe>
 80146b4:	f109 0901 	add.w	r9, r9, #1
 80146b8:	e7ee      	b.n	8014698 <_printf_float+0x2b4>
 80146ba:	bf00      	nop
 80146bc:	7fefffff 	.word	0x7fefffff
 80146c0:	0801ae31 	.word	0x0801ae31
 80146c4:	0801ae35 	.word	0x0801ae35
 80146c8:	0801ae39 	.word	0x0801ae39
 80146cc:	0801ae3d 	.word	0x0801ae3d
 80146d0:	0801ae41 	.word	0x0801ae41
 80146d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80146d8:	429a      	cmp	r2, r3
 80146da:	bfa8      	it	ge
 80146dc:	461a      	movge	r2, r3
 80146de:	2a00      	cmp	r2, #0
 80146e0:	4691      	mov	r9, r2
 80146e2:	dc37      	bgt.n	8014754 <_printf_float+0x370>
 80146e4:	f04f 0b00 	mov.w	fp, #0
 80146e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80146ec:	f104 021a 	add.w	r2, r4, #26
 80146f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80146f2:	9305      	str	r3, [sp, #20]
 80146f4:	eba3 0309 	sub.w	r3, r3, r9
 80146f8:	455b      	cmp	r3, fp
 80146fa:	dc33      	bgt.n	8014764 <_printf_float+0x380>
 80146fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014700:	429a      	cmp	r2, r3
 8014702:	db3b      	blt.n	801477c <_printf_float+0x398>
 8014704:	6823      	ldr	r3, [r4, #0]
 8014706:	07da      	lsls	r2, r3, #31
 8014708:	d438      	bmi.n	801477c <_printf_float+0x398>
 801470a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801470e:	eba2 0903 	sub.w	r9, r2, r3
 8014712:	9b05      	ldr	r3, [sp, #20]
 8014714:	1ad2      	subs	r2, r2, r3
 8014716:	4591      	cmp	r9, r2
 8014718:	bfa8      	it	ge
 801471a:	4691      	movge	r9, r2
 801471c:	f1b9 0f00 	cmp.w	r9, #0
 8014720:	dc35      	bgt.n	801478e <_printf_float+0x3aa>
 8014722:	f04f 0800 	mov.w	r8, #0
 8014726:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801472a:	f104 0a1a 	add.w	sl, r4, #26
 801472e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014732:	1a9b      	subs	r3, r3, r2
 8014734:	eba3 0309 	sub.w	r3, r3, r9
 8014738:	4543      	cmp	r3, r8
 801473a:	f77f af79 	ble.w	8014630 <_printf_float+0x24c>
 801473e:	2301      	movs	r3, #1
 8014740:	4652      	mov	r2, sl
 8014742:	4631      	mov	r1, r6
 8014744:	4628      	mov	r0, r5
 8014746:	47b8      	blx	r7
 8014748:	3001      	adds	r0, #1
 801474a:	f43f aeaa 	beq.w	80144a2 <_printf_float+0xbe>
 801474e:	f108 0801 	add.w	r8, r8, #1
 8014752:	e7ec      	b.n	801472e <_printf_float+0x34a>
 8014754:	4613      	mov	r3, r2
 8014756:	4631      	mov	r1, r6
 8014758:	4642      	mov	r2, r8
 801475a:	4628      	mov	r0, r5
 801475c:	47b8      	blx	r7
 801475e:	3001      	adds	r0, #1
 8014760:	d1c0      	bne.n	80146e4 <_printf_float+0x300>
 8014762:	e69e      	b.n	80144a2 <_printf_float+0xbe>
 8014764:	2301      	movs	r3, #1
 8014766:	4631      	mov	r1, r6
 8014768:	4628      	mov	r0, r5
 801476a:	9205      	str	r2, [sp, #20]
 801476c:	47b8      	blx	r7
 801476e:	3001      	adds	r0, #1
 8014770:	f43f ae97 	beq.w	80144a2 <_printf_float+0xbe>
 8014774:	9a05      	ldr	r2, [sp, #20]
 8014776:	f10b 0b01 	add.w	fp, fp, #1
 801477a:	e7b9      	b.n	80146f0 <_printf_float+0x30c>
 801477c:	ee18 3a10 	vmov	r3, s16
 8014780:	4652      	mov	r2, sl
 8014782:	4631      	mov	r1, r6
 8014784:	4628      	mov	r0, r5
 8014786:	47b8      	blx	r7
 8014788:	3001      	adds	r0, #1
 801478a:	d1be      	bne.n	801470a <_printf_float+0x326>
 801478c:	e689      	b.n	80144a2 <_printf_float+0xbe>
 801478e:	9a05      	ldr	r2, [sp, #20]
 8014790:	464b      	mov	r3, r9
 8014792:	4442      	add	r2, r8
 8014794:	4631      	mov	r1, r6
 8014796:	4628      	mov	r0, r5
 8014798:	47b8      	blx	r7
 801479a:	3001      	adds	r0, #1
 801479c:	d1c1      	bne.n	8014722 <_printf_float+0x33e>
 801479e:	e680      	b.n	80144a2 <_printf_float+0xbe>
 80147a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80147a2:	2a01      	cmp	r2, #1
 80147a4:	dc01      	bgt.n	80147aa <_printf_float+0x3c6>
 80147a6:	07db      	lsls	r3, r3, #31
 80147a8:	d53a      	bpl.n	8014820 <_printf_float+0x43c>
 80147aa:	2301      	movs	r3, #1
 80147ac:	4642      	mov	r2, r8
 80147ae:	4631      	mov	r1, r6
 80147b0:	4628      	mov	r0, r5
 80147b2:	47b8      	blx	r7
 80147b4:	3001      	adds	r0, #1
 80147b6:	f43f ae74 	beq.w	80144a2 <_printf_float+0xbe>
 80147ba:	ee18 3a10 	vmov	r3, s16
 80147be:	4652      	mov	r2, sl
 80147c0:	4631      	mov	r1, r6
 80147c2:	4628      	mov	r0, r5
 80147c4:	47b8      	blx	r7
 80147c6:	3001      	adds	r0, #1
 80147c8:	f43f ae6b 	beq.w	80144a2 <_printf_float+0xbe>
 80147cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80147d0:	2200      	movs	r2, #0
 80147d2:	2300      	movs	r3, #0
 80147d4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80147d8:	f7ec f996 	bl	8000b08 <__aeabi_dcmpeq>
 80147dc:	b9d8      	cbnz	r0, 8014816 <_printf_float+0x432>
 80147de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80147e2:	f108 0201 	add.w	r2, r8, #1
 80147e6:	4631      	mov	r1, r6
 80147e8:	4628      	mov	r0, r5
 80147ea:	47b8      	blx	r7
 80147ec:	3001      	adds	r0, #1
 80147ee:	d10e      	bne.n	801480e <_printf_float+0x42a>
 80147f0:	e657      	b.n	80144a2 <_printf_float+0xbe>
 80147f2:	2301      	movs	r3, #1
 80147f4:	4652      	mov	r2, sl
 80147f6:	4631      	mov	r1, r6
 80147f8:	4628      	mov	r0, r5
 80147fa:	47b8      	blx	r7
 80147fc:	3001      	adds	r0, #1
 80147fe:	f43f ae50 	beq.w	80144a2 <_printf_float+0xbe>
 8014802:	f108 0801 	add.w	r8, r8, #1
 8014806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014808:	3b01      	subs	r3, #1
 801480a:	4543      	cmp	r3, r8
 801480c:	dcf1      	bgt.n	80147f2 <_printf_float+0x40e>
 801480e:	464b      	mov	r3, r9
 8014810:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014814:	e6da      	b.n	80145cc <_printf_float+0x1e8>
 8014816:	f04f 0800 	mov.w	r8, #0
 801481a:	f104 0a1a 	add.w	sl, r4, #26
 801481e:	e7f2      	b.n	8014806 <_printf_float+0x422>
 8014820:	2301      	movs	r3, #1
 8014822:	4642      	mov	r2, r8
 8014824:	e7df      	b.n	80147e6 <_printf_float+0x402>
 8014826:	2301      	movs	r3, #1
 8014828:	464a      	mov	r2, r9
 801482a:	4631      	mov	r1, r6
 801482c:	4628      	mov	r0, r5
 801482e:	47b8      	blx	r7
 8014830:	3001      	adds	r0, #1
 8014832:	f43f ae36 	beq.w	80144a2 <_printf_float+0xbe>
 8014836:	f108 0801 	add.w	r8, r8, #1
 801483a:	68e3      	ldr	r3, [r4, #12]
 801483c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801483e:	1a5b      	subs	r3, r3, r1
 8014840:	4543      	cmp	r3, r8
 8014842:	dcf0      	bgt.n	8014826 <_printf_float+0x442>
 8014844:	e6f8      	b.n	8014638 <_printf_float+0x254>
 8014846:	f04f 0800 	mov.w	r8, #0
 801484a:	f104 0919 	add.w	r9, r4, #25
 801484e:	e7f4      	b.n	801483a <_printf_float+0x456>

08014850 <_printf_common>:
 8014850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014854:	4616      	mov	r6, r2
 8014856:	4699      	mov	r9, r3
 8014858:	688a      	ldr	r2, [r1, #8]
 801485a:	690b      	ldr	r3, [r1, #16]
 801485c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014860:	4293      	cmp	r3, r2
 8014862:	bfb8      	it	lt
 8014864:	4613      	movlt	r3, r2
 8014866:	6033      	str	r3, [r6, #0]
 8014868:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801486c:	4607      	mov	r7, r0
 801486e:	460c      	mov	r4, r1
 8014870:	b10a      	cbz	r2, 8014876 <_printf_common+0x26>
 8014872:	3301      	adds	r3, #1
 8014874:	6033      	str	r3, [r6, #0]
 8014876:	6823      	ldr	r3, [r4, #0]
 8014878:	0699      	lsls	r1, r3, #26
 801487a:	bf42      	ittt	mi
 801487c:	6833      	ldrmi	r3, [r6, #0]
 801487e:	3302      	addmi	r3, #2
 8014880:	6033      	strmi	r3, [r6, #0]
 8014882:	6825      	ldr	r5, [r4, #0]
 8014884:	f015 0506 	ands.w	r5, r5, #6
 8014888:	d106      	bne.n	8014898 <_printf_common+0x48>
 801488a:	f104 0a19 	add.w	sl, r4, #25
 801488e:	68e3      	ldr	r3, [r4, #12]
 8014890:	6832      	ldr	r2, [r6, #0]
 8014892:	1a9b      	subs	r3, r3, r2
 8014894:	42ab      	cmp	r3, r5
 8014896:	dc26      	bgt.n	80148e6 <_printf_common+0x96>
 8014898:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801489c:	1e13      	subs	r3, r2, #0
 801489e:	6822      	ldr	r2, [r4, #0]
 80148a0:	bf18      	it	ne
 80148a2:	2301      	movne	r3, #1
 80148a4:	0692      	lsls	r2, r2, #26
 80148a6:	d42b      	bmi.n	8014900 <_printf_common+0xb0>
 80148a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80148ac:	4649      	mov	r1, r9
 80148ae:	4638      	mov	r0, r7
 80148b0:	47c0      	blx	r8
 80148b2:	3001      	adds	r0, #1
 80148b4:	d01e      	beq.n	80148f4 <_printf_common+0xa4>
 80148b6:	6823      	ldr	r3, [r4, #0]
 80148b8:	6922      	ldr	r2, [r4, #16]
 80148ba:	f003 0306 	and.w	r3, r3, #6
 80148be:	2b04      	cmp	r3, #4
 80148c0:	bf02      	ittt	eq
 80148c2:	68e5      	ldreq	r5, [r4, #12]
 80148c4:	6833      	ldreq	r3, [r6, #0]
 80148c6:	1aed      	subeq	r5, r5, r3
 80148c8:	68a3      	ldr	r3, [r4, #8]
 80148ca:	bf0c      	ite	eq
 80148cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80148d0:	2500      	movne	r5, #0
 80148d2:	4293      	cmp	r3, r2
 80148d4:	bfc4      	itt	gt
 80148d6:	1a9b      	subgt	r3, r3, r2
 80148d8:	18ed      	addgt	r5, r5, r3
 80148da:	2600      	movs	r6, #0
 80148dc:	341a      	adds	r4, #26
 80148de:	42b5      	cmp	r5, r6
 80148e0:	d11a      	bne.n	8014918 <_printf_common+0xc8>
 80148e2:	2000      	movs	r0, #0
 80148e4:	e008      	b.n	80148f8 <_printf_common+0xa8>
 80148e6:	2301      	movs	r3, #1
 80148e8:	4652      	mov	r2, sl
 80148ea:	4649      	mov	r1, r9
 80148ec:	4638      	mov	r0, r7
 80148ee:	47c0      	blx	r8
 80148f0:	3001      	adds	r0, #1
 80148f2:	d103      	bne.n	80148fc <_printf_common+0xac>
 80148f4:	f04f 30ff 	mov.w	r0, #4294967295
 80148f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148fc:	3501      	adds	r5, #1
 80148fe:	e7c6      	b.n	801488e <_printf_common+0x3e>
 8014900:	18e1      	adds	r1, r4, r3
 8014902:	1c5a      	adds	r2, r3, #1
 8014904:	2030      	movs	r0, #48	; 0x30
 8014906:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801490a:	4422      	add	r2, r4
 801490c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014910:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014914:	3302      	adds	r3, #2
 8014916:	e7c7      	b.n	80148a8 <_printf_common+0x58>
 8014918:	2301      	movs	r3, #1
 801491a:	4622      	mov	r2, r4
 801491c:	4649      	mov	r1, r9
 801491e:	4638      	mov	r0, r7
 8014920:	47c0      	blx	r8
 8014922:	3001      	adds	r0, #1
 8014924:	d0e6      	beq.n	80148f4 <_printf_common+0xa4>
 8014926:	3601      	adds	r6, #1
 8014928:	e7d9      	b.n	80148de <_printf_common+0x8e>
	...

0801492c <_printf_i>:
 801492c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014930:	7e0f      	ldrb	r7, [r1, #24]
 8014932:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014934:	2f78      	cmp	r7, #120	; 0x78
 8014936:	4691      	mov	r9, r2
 8014938:	4680      	mov	r8, r0
 801493a:	460c      	mov	r4, r1
 801493c:	469a      	mov	sl, r3
 801493e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014942:	d807      	bhi.n	8014954 <_printf_i+0x28>
 8014944:	2f62      	cmp	r7, #98	; 0x62
 8014946:	d80a      	bhi.n	801495e <_printf_i+0x32>
 8014948:	2f00      	cmp	r7, #0
 801494a:	f000 80d4 	beq.w	8014af6 <_printf_i+0x1ca>
 801494e:	2f58      	cmp	r7, #88	; 0x58
 8014950:	f000 80c0 	beq.w	8014ad4 <_printf_i+0x1a8>
 8014954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014958:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801495c:	e03a      	b.n	80149d4 <_printf_i+0xa8>
 801495e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014962:	2b15      	cmp	r3, #21
 8014964:	d8f6      	bhi.n	8014954 <_printf_i+0x28>
 8014966:	a101      	add	r1, pc, #4	; (adr r1, 801496c <_printf_i+0x40>)
 8014968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801496c:	080149c5 	.word	0x080149c5
 8014970:	080149d9 	.word	0x080149d9
 8014974:	08014955 	.word	0x08014955
 8014978:	08014955 	.word	0x08014955
 801497c:	08014955 	.word	0x08014955
 8014980:	08014955 	.word	0x08014955
 8014984:	080149d9 	.word	0x080149d9
 8014988:	08014955 	.word	0x08014955
 801498c:	08014955 	.word	0x08014955
 8014990:	08014955 	.word	0x08014955
 8014994:	08014955 	.word	0x08014955
 8014998:	08014add 	.word	0x08014add
 801499c:	08014a05 	.word	0x08014a05
 80149a0:	08014a97 	.word	0x08014a97
 80149a4:	08014955 	.word	0x08014955
 80149a8:	08014955 	.word	0x08014955
 80149ac:	08014aff 	.word	0x08014aff
 80149b0:	08014955 	.word	0x08014955
 80149b4:	08014a05 	.word	0x08014a05
 80149b8:	08014955 	.word	0x08014955
 80149bc:	08014955 	.word	0x08014955
 80149c0:	08014a9f 	.word	0x08014a9f
 80149c4:	682b      	ldr	r3, [r5, #0]
 80149c6:	1d1a      	adds	r2, r3, #4
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	602a      	str	r2, [r5, #0]
 80149cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80149d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80149d4:	2301      	movs	r3, #1
 80149d6:	e09f      	b.n	8014b18 <_printf_i+0x1ec>
 80149d8:	6820      	ldr	r0, [r4, #0]
 80149da:	682b      	ldr	r3, [r5, #0]
 80149dc:	0607      	lsls	r7, r0, #24
 80149de:	f103 0104 	add.w	r1, r3, #4
 80149e2:	6029      	str	r1, [r5, #0]
 80149e4:	d501      	bpl.n	80149ea <_printf_i+0xbe>
 80149e6:	681e      	ldr	r6, [r3, #0]
 80149e8:	e003      	b.n	80149f2 <_printf_i+0xc6>
 80149ea:	0646      	lsls	r6, r0, #25
 80149ec:	d5fb      	bpl.n	80149e6 <_printf_i+0xba>
 80149ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80149f2:	2e00      	cmp	r6, #0
 80149f4:	da03      	bge.n	80149fe <_printf_i+0xd2>
 80149f6:	232d      	movs	r3, #45	; 0x2d
 80149f8:	4276      	negs	r6, r6
 80149fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80149fe:	485a      	ldr	r0, [pc, #360]	; (8014b68 <_printf_i+0x23c>)
 8014a00:	230a      	movs	r3, #10
 8014a02:	e012      	b.n	8014a2a <_printf_i+0xfe>
 8014a04:	682b      	ldr	r3, [r5, #0]
 8014a06:	6820      	ldr	r0, [r4, #0]
 8014a08:	1d19      	adds	r1, r3, #4
 8014a0a:	6029      	str	r1, [r5, #0]
 8014a0c:	0605      	lsls	r5, r0, #24
 8014a0e:	d501      	bpl.n	8014a14 <_printf_i+0xe8>
 8014a10:	681e      	ldr	r6, [r3, #0]
 8014a12:	e002      	b.n	8014a1a <_printf_i+0xee>
 8014a14:	0641      	lsls	r1, r0, #25
 8014a16:	d5fb      	bpl.n	8014a10 <_printf_i+0xe4>
 8014a18:	881e      	ldrh	r6, [r3, #0]
 8014a1a:	4853      	ldr	r0, [pc, #332]	; (8014b68 <_printf_i+0x23c>)
 8014a1c:	2f6f      	cmp	r7, #111	; 0x6f
 8014a1e:	bf0c      	ite	eq
 8014a20:	2308      	moveq	r3, #8
 8014a22:	230a      	movne	r3, #10
 8014a24:	2100      	movs	r1, #0
 8014a26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014a2a:	6865      	ldr	r5, [r4, #4]
 8014a2c:	60a5      	str	r5, [r4, #8]
 8014a2e:	2d00      	cmp	r5, #0
 8014a30:	bfa2      	ittt	ge
 8014a32:	6821      	ldrge	r1, [r4, #0]
 8014a34:	f021 0104 	bicge.w	r1, r1, #4
 8014a38:	6021      	strge	r1, [r4, #0]
 8014a3a:	b90e      	cbnz	r6, 8014a40 <_printf_i+0x114>
 8014a3c:	2d00      	cmp	r5, #0
 8014a3e:	d04b      	beq.n	8014ad8 <_printf_i+0x1ac>
 8014a40:	4615      	mov	r5, r2
 8014a42:	fbb6 f1f3 	udiv	r1, r6, r3
 8014a46:	fb03 6711 	mls	r7, r3, r1, r6
 8014a4a:	5dc7      	ldrb	r7, [r0, r7]
 8014a4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014a50:	4637      	mov	r7, r6
 8014a52:	42bb      	cmp	r3, r7
 8014a54:	460e      	mov	r6, r1
 8014a56:	d9f4      	bls.n	8014a42 <_printf_i+0x116>
 8014a58:	2b08      	cmp	r3, #8
 8014a5a:	d10b      	bne.n	8014a74 <_printf_i+0x148>
 8014a5c:	6823      	ldr	r3, [r4, #0]
 8014a5e:	07de      	lsls	r6, r3, #31
 8014a60:	d508      	bpl.n	8014a74 <_printf_i+0x148>
 8014a62:	6923      	ldr	r3, [r4, #16]
 8014a64:	6861      	ldr	r1, [r4, #4]
 8014a66:	4299      	cmp	r1, r3
 8014a68:	bfde      	ittt	le
 8014a6a:	2330      	movle	r3, #48	; 0x30
 8014a6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014a70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014a74:	1b52      	subs	r2, r2, r5
 8014a76:	6122      	str	r2, [r4, #16]
 8014a78:	f8cd a000 	str.w	sl, [sp]
 8014a7c:	464b      	mov	r3, r9
 8014a7e:	aa03      	add	r2, sp, #12
 8014a80:	4621      	mov	r1, r4
 8014a82:	4640      	mov	r0, r8
 8014a84:	f7ff fee4 	bl	8014850 <_printf_common>
 8014a88:	3001      	adds	r0, #1
 8014a8a:	d14a      	bne.n	8014b22 <_printf_i+0x1f6>
 8014a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a90:	b004      	add	sp, #16
 8014a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a96:	6823      	ldr	r3, [r4, #0]
 8014a98:	f043 0320 	orr.w	r3, r3, #32
 8014a9c:	6023      	str	r3, [r4, #0]
 8014a9e:	4833      	ldr	r0, [pc, #204]	; (8014b6c <_printf_i+0x240>)
 8014aa0:	2778      	movs	r7, #120	; 0x78
 8014aa2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014aa6:	6823      	ldr	r3, [r4, #0]
 8014aa8:	6829      	ldr	r1, [r5, #0]
 8014aaa:	061f      	lsls	r7, r3, #24
 8014aac:	f851 6b04 	ldr.w	r6, [r1], #4
 8014ab0:	d402      	bmi.n	8014ab8 <_printf_i+0x18c>
 8014ab2:	065f      	lsls	r7, r3, #25
 8014ab4:	bf48      	it	mi
 8014ab6:	b2b6      	uxthmi	r6, r6
 8014ab8:	07df      	lsls	r7, r3, #31
 8014aba:	bf48      	it	mi
 8014abc:	f043 0320 	orrmi.w	r3, r3, #32
 8014ac0:	6029      	str	r1, [r5, #0]
 8014ac2:	bf48      	it	mi
 8014ac4:	6023      	strmi	r3, [r4, #0]
 8014ac6:	b91e      	cbnz	r6, 8014ad0 <_printf_i+0x1a4>
 8014ac8:	6823      	ldr	r3, [r4, #0]
 8014aca:	f023 0320 	bic.w	r3, r3, #32
 8014ace:	6023      	str	r3, [r4, #0]
 8014ad0:	2310      	movs	r3, #16
 8014ad2:	e7a7      	b.n	8014a24 <_printf_i+0xf8>
 8014ad4:	4824      	ldr	r0, [pc, #144]	; (8014b68 <_printf_i+0x23c>)
 8014ad6:	e7e4      	b.n	8014aa2 <_printf_i+0x176>
 8014ad8:	4615      	mov	r5, r2
 8014ada:	e7bd      	b.n	8014a58 <_printf_i+0x12c>
 8014adc:	682b      	ldr	r3, [r5, #0]
 8014ade:	6826      	ldr	r6, [r4, #0]
 8014ae0:	6961      	ldr	r1, [r4, #20]
 8014ae2:	1d18      	adds	r0, r3, #4
 8014ae4:	6028      	str	r0, [r5, #0]
 8014ae6:	0635      	lsls	r5, r6, #24
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	d501      	bpl.n	8014af0 <_printf_i+0x1c4>
 8014aec:	6019      	str	r1, [r3, #0]
 8014aee:	e002      	b.n	8014af6 <_printf_i+0x1ca>
 8014af0:	0670      	lsls	r0, r6, #25
 8014af2:	d5fb      	bpl.n	8014aec <_printf_i+0x1c0>
 8014af4:	8019      	strh	r1, [r3, #0]
 8014af6:	2300      	movs	r3, #0
 8014af8:	6123      	str	r3, [r4, #16]
 8014afa:	4615      	mov	r5, r2
 8014afc:	e7bc      	b.n	8014a78 <_printf_i+0x14c>
 8014afe:	682b      	ldr	r3, [r5, #0]
 8014b00:	1d1a      	adds	r2, r3, #4
 8014b02:	602a      	str	r2, [r5, #0]
 8014b04:	681d      	ldr	r5, [r3, #0]
 8014b06:	6862      	ldr	r2, [r4, #4]
 8014b08:	2100      	movs	r1, #0
 8014b0a:	4628      	mov	r0, r5
 8014b0c:	f7eb fb80 	bl	8000210 <memchr>
 8014b10:	b108      	cbz	r0, 8014b16 <_printf_i+0x1ea>
 8014b12:	1b40      	subs	r0, r0, r5
 8014b14:	6060      	str	r0, [r4, #4]
 8014b16:	6863      	ldr	r3, [r4, #4]
 8014b18:	6123      	str	r3, [r4, #16]
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b20:	e7aa      	b.n	8014a78 <_printf_i+0x14c>
 8014b22:	6923      	ldr	r3, [r4, #16]
 8014b24:	462a      	mov	r2, r5
 8014b26:	4649      	mov	r1, r9
 8014b28:	4640      	mov	r0, r8
 8014b2a:	47d0      	blx	sl
 8014b2c:	3001      	adds	r0, #1
 8014b2e:	d0ad      	beq.n	8014a8c <_printf_i+0x160>
 8014b30:	6823      	ldr	r3, [r4, #0]
 8014b32:	079b      	lsls	r3, r3, #30
 8014b34:	d413      	bmi.n	8014b5e <_printf_i+0x232>
 8014b36:	68e0      	ldr	r0, [r4, #12]
 8014b38:	9b03      	ldr	r3, [sp, #12]
 8014b3a:	4298      	cmp	r0, r3
 8014b3c:	bfb8      	it	lt
 8014b3e:	4618      	movlt	r0, r3
 8014b40:	e7a6      	b.n	8014a90 <_printf_i+0x164>
 8014b42:	2301      	movs	r3, #1
 8014b44:	4632      	mov	r2, r6
 8014b46:	4649      	mov	r1, r9
 8014b48:	4640      	mov	r0, r8
 8014b4a:	47d0      	blx	sl
 8014b4c:	3001      	adds	r0, #1
 8014b4e:	d09d      	beq.n	8014a8c <_printf_i+0x160>
 8014b50:	3501      	adds	r5, #1
 8014b52:	68e3      	ldr	r3, [r4, #12]
 8014b54:	9903      	ldr	r1, [sp, #12]
 8014b56:	1a5b      	subs	r3, r3, r1
 8014b58:	42ab      	cmp	r3, r5
 8014b5a:	dcf2      	bgt.n	8014b42 <_printf_i+0x216>
 8014b5c:	e7eb      	b.n	8014b36 <_printf_i+0x20a>
 8014b5e:	2500      	movs	r5, #0
 8014b60:	f104 0619 	add.w	r6, r4, #25
 8014b64:	e7f5      	b.n	8014b52 <_printf_i+0x226>
 8014b66:	bf00      	nop
 8014b68:	0801ae43 	.word	0x0801ae43
 8014b6c:	0801ae54 	.word	0x0801ae54

08014b70 <std>:
 8014b70:	2300      	movs	r3, #0
 8014b72:	b510      	push	{r4, lr}
 8014b74:	4604      	mov	r4, r0
 8014b76:	e9c0 3300 	strd	r3, r3, [r0]
 8014b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014b7e:	6083      	str	r3, [r0, #8]
 8014b80:	8181      	strh	r1, [r0, #12]
 8014b82:	6643      	str	r3, [r0, #100]	; 0x64
 8014b84:	81c2      	strh	r2, [r0, #14]
 8014b86:	6183      	str	r3, [r0, #24]
 8014b88:	4619      	mov	r1, r3
 8014b8a:	2208      	movs	r2, #8
 8014b8c:	305c      	adds	r0, #92	; 0x5c
 8014b8e:	f000 fa07 	bl	8014fa0 <memset>
 8014b92:	4b0d      	ldr	r3, [pc, #52]	; (8014bc8 <std+0x58>)
 8014b94:	6263      	str	r3, [r4, #36]	; 0x24
 8014b96:	4b0d      	ldr	r3, [pc, #52]	; (8014bcc <std+0x5c>)
 8014b98:	62a3      	str	r3, [r4, #40]	; 0x28
 8014b9a:	4b0d      	ldr	r3, [pc, #52]	; (8014bd0 <std+0x60>)
 8014b9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b9e:	4b0d      	ldr	r3, [pc, #52]	; (8014bd4 <std+0x64>)
 8014ba0:	6323      	str	r3, [r4, #48]	; 0x30
 8014ba2:	4b0d      	ldr	r3, [pc, #52]	; (8014bd8 <std+0x68>)
 8014ba4:	6224      	str	r4, [r4, #32]
 8014ba6:	429c      	cmp	r4, r3
 8014ba8:	d006      	beq.n	8014bb8 <std+0x48>
 8014baa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014bae:	4294      	cmp	r4, r2
 8014bb0:	d002      	beq.n	8014bb8 <std+0x48>
 8014bb2:	33d0      	adds	r3, #208	; 0xd0
 8014bb4:	429c      	cmp	r4, r3
 8014bb6:	d105      	bne.n	8014bc4 <std+0x54>
 8014bb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bc0:	f000 bb0e 	b.w	80151e0 <__retarget_lock_init_recursive>
 8014bc4:	bd10      	pop	{r4, pc}
 8014bc6:	bf00      	nop
 8014bc8:	08014dd1 	.word	0x08014dd1
 8014bcc:	08014df3 	.word	0x08014df3
 8014bd0:	08014e2b 	.word	0x08014e2b
 8014bd4:	08014e4f 	.word	0x08014e4f
 8014bd8:	20000a00 	.word	0x20000a00

08014bdc <stdio_exit_handler>:
 8014bdc:	4a02      	ldr	r2, [pc, #8]	; (8014be8 <stdio_exit_handler+0xc>)
 8014bde:	4903      	ldr	r1, [pc, #12]	; (8014bec <stdio_exit_handler+0x10>)
 8014be0:	4803      	ldr	r0, [pc, #12]	; (8014bf0 <stdio_exit_handler+0x14>)
 8014be2:	f000 b869 	b.w	8014cb8 <_fwalk_sglue>
 8014be6:	bf00      	nop
 8014be8:	2000002c 	.word	0x2000002c
 8014bec:	080173c9 	.word	0x080173c9
 8014bf0:	200001a4 	.word	0x200001a4

08014bf4 <cleanup_stdio>:
 8014bf4:	6841      	ldr	r1, [r0, #4]
 8014bf6:	4b0c      	ldr	r3, [pc, #48]	; (8014c28 <cleanup_stdio+0x34>)
 8014bf8:	4299      	cmp	r1, r3
 8014bfa:	b510      	push	{r4, lr}
 8014bfc:	4604      	mov	r4, r0
 8014bfe:	d001      	beq.n	8014c04 <cleanup_stdio+0x10>
 8014c00:	f002 fbe2 	bl	80173c8 <_fflush_r>
 8014c04:	68a1      	ldr	r1, [r4, #8]
 8014c06:	4b09      	ldr	r3, [pc, #36]	; (8014c2c <cleanup_stdio+0x38>)
 8014c08:	4299      	cmp	r1, r3
 8014c0a:	d002      	beq.n	8014c12 <cleanup_stdio+0x1e>
 8014c0c:	4620      	mov	r0, r4
 8014c0e:	f002 fbdb 	bl	80173c8 <_fflush_r>
 8014c12:	68e1      	ldr	r1, [r4, #12]
 8014c14:	4b06      	ldr	r3, [pc, #24]	; (8014c30 <cleanup_stdio+0x3c>)
 8014c16:	4299      	cmp	r1, r3
 8014c18:	d004      	beq.n	8014c24 <cleanup_stdio+0x30>
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c20:	f002 bbd2 	b.w	80173c8 <_fflush_r>
 8014c24:	bd10      	pop	{r4, pc}
 8014c26:	bf00      	nop
 8014c28:	20000a00 	.word	0x20000a00
 8014c2c:	20000a68 	.word	0x20000a68
 8014c30:	20000ad0 	.word	0x20000ad0

08014c34 <global_stdio_init.part.0>:
 8014c34:	b510      	push	{r4, lr}
 8014c36:	4b0b      	ldr	r3, [pc, #44]	; (8014c64 <global_stdio_init.part.0+0x30>)
 8014c38:	4c0b      	ldr	r4, [pc, #44]	; (8014c68 <global_stdio_init.part.0+0x34>)
 8014c3a:	4a0c      	ldr	r2, [pc, #48]	; (8014c6c <global_stdio_init.part.0+0x38>)
 8014c3c:	601a      	str	r2, [r3, #0]
 8014c3e:	4620      	mov	r0, r4
 8014c40:	2200      	movs	r2, #0
 8014c42:	2104      	movs	r1, #4
 8014c44:	f7ff ff94 	bl	8014b70 <std>
 8014c48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014c4c:	2201      	movs	r2, #1
 8014c4e:	2109      	movs	r1, #9
 8014c50:	f7ff ff8e 	bl	8014b70 <std>
 8014c54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014c58:	2202      	movs	r2, #2
 8014c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c5e:	2112      	movs	r1, #18
 8014c60:	f7ff bf86 	b.w	8014b70 <std>
 8014c64:	20000b38 	.word	0x20000b38
 8014c68:	20000a00 	.word	0x20000a00
 8014c6c:	08014bdd 	.word	0x08014bdd

08014c70 <__sfp_lock_acquire>:
 8014c70:	4801      	ldr	r0, [pc, #4]	; (8014c78 <__sfp_lock_acquire+0x8>)
 8014c72:	f000 bab6 	b.w	80151e2 <__retarget_lock_acquire_recursive>
 8014c76:	bf00      	nop
 8014c78:	20000b41 	.word	0x20000b41

08014c7c <__sfp_lock_release>:
 8014c7c:	4801      	ldr	r0, [pc, #4]	; (8014c84 <__sfp_lock_release+0x8>)
 8014c7e:	f000 bab1 	b.w	80151e4 <__retarget_lock_release_recursive>
 8014c82:	bf00      	nop
 8014c84:	20000b41 	.word	0x20000b41

08014c88 <__sinit>:
 8014c88:	b510      	push	{r4, lr}
 8014c8a:	4604      	mov	r4, r0
 8014c8c:	f7ff fff0 	bl	8014c70 <__sfp_lock_acquire>
 8014c90:	6a23      	ldr	r3, [r4, #32]
 8014c92:	b11b      	cbz	r3, 8014c9c <__sinit+0x14>
 8014c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c98:	f7ff bff0 	b.w	8014c7c <__sfp_lock_release>
 8014c9c:	4b04      	ldr	r3, [pc, #16]	; (8014cb0 <__sinit+0x28>)
 8014c9e:	6223      	str	r3, [r4, #32]
 8014ca0:	4b04      	ldr	r3, [pc, #16]	; (8014cb4 <__sinit+0x2c>)
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d1f5      	bne.n	8014c94 <__sinit+0xc>
 8014ca8:	f7ff ffc4 	bl	8014c34 <global_stdio_init.part.0>
 8014cac:	e7f2      	b.n	8014c94 <__sinit+0xc>
 8014cae:	bf00      	nop
 8014cb0:	08014bf5 	.word	0x08014bf5
 8014cb4:	20000b38 	.word	0x20000b38

08014cb8 <_fwalk_sglue>:
 8014cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cbc:	4607      	mov	r7, r0
 8014cbe:	4688      	mov	r8, r1
 8014cc0:	4614      	mov	r4, r2
 8014cc2:	2600      	movs	r6, #0
 8014cc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014cc8:	f1b9 0901 	subs.w	r9, r9, #1
 8014ccc:	d505      	bpl.n	8014cda <_fwalk_sglue+0x22>
 8014cce:	6824      	ldr	r4, [r4, #0]
 8014cd0:	2c00      	cmp	r4, #0
 8014cd2:	d1f7      	bne.n	8014cc4 <_fwalk_sglue+0xc>
 8014cd4:	4630      	mov	r0, r6
 8014cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cda:	89ab      	ldrh	r3, [r5, #12]
 8014cdc:	2b01      	cmp	r3, #1
 8014cde:	d907      	bls.n	8014cf0 <_fwalk_sglue+0x38>
 8014ce0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ce4:	3301      	adds	r3, #1
 8014ce6:	d003      	beq.n	8014cf0 <_fwalk_sglue+0x38>
 8014ce8:	4629      	mov	r1, r5
 8014cea:	4638      	mov	r0, r7
 8014cec:	47c0      	blx	r8
 8014cee:	4306      	orrs	r6, r0
 8014cf0:	3568      	adds	r5, #104	; 0x68
 8014cf2:	e7e9      	b.n	8014cc8 <_fwalk_sglue+0x10>

08014cf4 <iprintf>:
 8014cf4:	b40f      	push	{r0, r1, r2, r3}
 8014cf6:	b507      	push	{r0, r1, r2, lr}
 8014cf8:	4906      	ldr	r1, [pc, #24]	; (8014d14 <iprintf+0x20>)
 8014cfa:	ab04      	add	r3, sp, #16
 8014cfc:	6808      	ldr	r0, [r1, #0]
 8014cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d02:	6881      	ldr	r1, [r0, #8]
 8014d04:	9301      	str	r3, [sp, #4]
 8014d06:	f002 f9bf 	bl	8017088 <_vfiprintf_r>
 8014d0a:	b003      	add	sp, #12
 8014d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d10:	b004      	add	sp, #16
 8014d12:	4770      	bx	lr
 8014d14:	200001f0 	.word	0x200001f0

08014d18 <_puts_r>:
 8014d18:	6a03      	ldr	r3, [r0, #32]
 8014d1a:	b570      	push	{r4, r5, r6, lr}
 8014d1c:	6884      	ldr	r4, [r0, #8]
 8014d1e:	4605      	mov	r5, r0
 8014d20:	460e      	mov	r6, r1
 8014d22:	b90b      	cbnz	r3, 8014d28 <_puts_r+0x10>
 8014d24:	f7ff ffb0 	bl	8014c88 <__sinit>
 8014d28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014d2a:	07db      	lsls	r3, r3, #31
 8014d2c:	d405      	bmi.n	8014d3a <_puts_r+0x22>
 8014d2e:	89a3      	ldrh	r3, [r4, #12]
 8014d30:	0598      	lsls	r0, r3, #22
 8014d32:	d402      	bmi.n	8014d3a <_puts_r+0x22>
 8014d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d36:	f000 fa54 	bl	80151e2 <__retarget_lock_acquire_recursive>
 8014d3a:	89a3      	ldrh	r3, [r4, #12]
 8014d3c:	0719      	lsls	r1, r3, #28
 8014d3e:	d513      	bpl.n	8014d68 <_puts_r+0x50>
 8014d40:	6923      	ldr	r3, [r4, #16]
 8014d42:	b18b      	cbz	r3, 8014d68 <_puts_r+0x50>
 8014d44:	3e01      	subs	r6, #1
 8014d46:	68a3      	ldr	r3, [r4, #8]
 8014d48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014d4c:	3b01      	subs	r3, #1
 8014d4e:	60a3      	str	r3, [r4, #8]
 8014d50:	b9e9      	cbnz	r1, 8014d8e <_puts_r+0x76>
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	da2e      	bge.n	8014db4 <_puts_r+0x9c>
 8014d56:	4622      	mov	r2, r4
 8014d58:	210a      	movs	r1, #10
 8014d5a:	4628      	mov	r0, r5
 8014d5c:	f000 f87b 	bl	8014e56 <__swbuf_r>
 8014d60:	3001      	adds	r0, #1
 8014d62:	d007      	beq.n	8014d74 <_puts_r+0x5c>
 8014d64:	250a      	movs	r5, #10
 8014d66:	e007      	b.n	8014d78 <_puts_r+0x60>
 8014d68:	4621      	mov	r1, r4
 8014d6a:	4628      	mov	r0, r5
 8014d6c:	f000 f8b0 	bl	8014ed0 <__swsetup_r>
 8014d70:	2800      	cmp	r0, #0
 8014d72:	d0e7      	beq.n	8014d44 <_puts_r+0x2c>
 8014d74:	f04f 35ff 	mov.w	r5, #4294967295
 8014d78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014d7a:	07da      	lsls	r2, r3, #31
 8014d7c:	d405      	bmi.n	8014d8a <_puts_r+0x72>
 8014d7e:	89a3      	ldrh	r3, [r4, #12]
 8014d80:	059b      	lsls	r3, r3, #22
 8014d82:	d402      	bmi.n	8014d8a <_puts_r+0x72>
 8014d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d86:	f000 fa2d 	bl	80151e4 <__retarget_lock_release_recursive>
 8014d8a:	4628      	mov	r0, r5
 8014d8c:	bd70      	pop	{r4, r5, r6, pc}
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	da04      	bge.n	8014d9c <_puts_r+0x84>
 8014d92:	69a2      	ldr	r2, [r4, #24]
 8014d94:	429a      	cmp	r2, r3
 8014d96:	dc06      	bgt.n	8014da6 <_puts_r+0x8e>
 8014d98:	290a      	cmp	r1, #10
 8014d9a:	d004      	beq.n	8014da6 <_puts_r+0x8e>
 8014d9c:	6823      	ldr	r3, [r4, #0]
 8014d9e:	1c5a      	adds	r2, r3, #1
 8014da0:	6022      	str	r2, [r4, #0]
 8014da2:	7019      	strb	r1, [r3, #0]
 8014da4:	e7cf      	b.n	8014d46 <_puts_r+0x2e>
 8014da6:	4622      	mov	r2, r4
 8014da8:	4628      	mov	r0, r5
 8014daa:	f000 f854 	bl	8014e56 <__swbuf_r>
 8014dae:	3001      	adds	r0, #1
 8014db0:	d1c9      	bne.n	8014d46 <_puts_r+0x2e>
 8014db2:	e7df      	b.n	8014d74 <_puts_r+0x5c>
 8014db4:	6823      	ldr	r3, [r4, #0]
 8014db6:	250a      	movs	r5, #10
 8014db8:	1c5a      	adds	r2, r3, #1
 8014dba:	6022      	str	r2, [r4, #0]
 8014dbc:	701d      	strb	r5, [r3, #0]
 8014dbe:	e7db      	b.n	8014d78 <_puts_r+0x60>

08014dc0 <puts>:
 8014dc0:	4b02      	ldr	r3, [pc, #8]	; (8014dcc <puts+0xc>)
 8014dc2:	4601      	mov	r1, r0
 8014dc4:	6818      	ldr	r0, [r3, #0]
 8014dc6:	f7ff bfa7 	b.w	8014d18 <_puts_r>
 8014dca:	bf00      	nop
 8014dcc:	200001f0 	.word	0x200001f0

08014dd0 <__sread>:
 8014dd0:	b510      	push	{r4, lr}
 8014dd2:	460c      	mov	r4, r1
 8014dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dd8:	f000 f9a4 	bl	8015124 <_read_r>
 8014ddc:	2800      	cmp	r0, #0
 8014dde:	bfab      	itete	ge
 8014de0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014de2:	89a3      	ldrhlt	r3, [r4, #12]
 8014de4:	181b      	addge	r3, r3, r0
 8014de6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014dea:	bfac      	ite	ge
 8014dec:	6563      	strge	r3, [r4, #84]	; 0x54
 8014dee:	81a3      	strhlt	r3, [r4, #12]
 8014df0:	bd10      	pop	{r4, pc}

08014df2 <__swrite>:
 8014df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014df6:	461f      	mov	r7, r3
 8014df8:	898b      	ldrh	r3, [r1, #12]
 8014dfa:	05db      	lsls	r3, r3, #23
 8014dfc:	4605      	mov	r5, r0
 8014dfe:	460c      	mov	r4, r1
 8014e00:	4616      	mov	r6, r2
 8014e02:	d505      	bpl.n	8014e10 <__swrite+0x1e>
 8014e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e08:	2302      	movs	r3, #2
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	f000 f978 	bl	8015100 <_lseek_r>
 8014e10:	89a3      	ldrh	r3, [r4, #12]
 8014e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014e1a:	81a3      	strh	r3, [r4, #12]
 8014e1c:	4632      	mov	r2, r6
 8014e1e:	463b      	mov	r3, r7
 8014e20:	4628      	mov	r0, r5
 8014e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e26:	f000 b99f 	b.w	8015168 <_write_r>

08014e2a <__sseek>:
 8014e2a:	b510      	push	{r4, lr}
 8014e2c:	460c      	mov	r4, r1
 8014e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e32:	f000 f965 	bl	8015100 <_lseek_r>
 8014e36:	1c43      	adds	r3, r0, #1
 8014e38:	89a3      	ldrh	r3, [r4, #12]
 8014e3a:	bf15      	itete	ne
 8014e3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8014e3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014e42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014e46:	81a3      	strheq	r3, [r4, #12]
 8014e48:	bf18      	it	ne
 8014e4a:	81a3      	strhne	r3, [r4, #12]
 8014e4c:	bd10      	pop	{r4, pc}

08014e4e <__sclose>:
 8014e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e52:	f000 b945 	b.w	80150e0 <_close_r>

08014e56 <__swbuf_r>:
 8014e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e58:	460e      	mov	r6, r1
 8014e5a:	4614      	mov	r4, r2
 8014e5c:	4605      	mov	r5, r0
 8014e5e:	b118      	cbz	r0, 8014e68 <__swbuf_r+0x12>
 8014e60:	6a03      	ldr	r3, [r0, #32]
 8014e62:	b90b      	cbnz	r3, 8014e68 <__swbuf_r+0x12>
 8014e64:	f7ff ff10 	bl	8014c88 <__sinit>
 8014e68:	69a3      	ldr	r3, [r4, #24]
 8014e6a:	60a3      	str	r3, [r4, #8]
 8014e6c:	89a3      	ldrh	r3, [r4, #12]
 8014e6e:	071a      	lsls	r2, r3, #28
 8014e70:	d525      	bpl.n	8014ebe <__swbuf_r+0x68>
 8014e72:	6923      	ldr	r3, [r4, #16]
 8014e74:	b31b      	cbz	r3, 8014ebe <__swbuf_r+0x68>
 8014e76:	6823      	ldr	r3, [r4, #0]
 8014e78:	6922      	ldr	r2, [r4, #16]
 8014e7a:	1a98      	subs	r0, r3, r2
 8014e7c:	6963      	ldr	r3, [r4, #20]
 8014e7e:	b2f6      	uxtb	r6, r6
 8014e80:	4283      	cmp	r3, r0
 8014e82:	4637      	mov	r7, r6
 8014e84:	dc04      	bgt.n	8014e90 <__swbuf_r+0x3a>
 8014e86:	4621      	mov	r1, r4
 8014e88:	4628      	mov	r0, r5
 8014e8a:	f002 fa9d 	bl	80173c8 <_fflush_r>
 8014e8e:	b9e0      	cbnz	r0, 8014eca <__swbuf_r+0x74>
 8014e90:	68a3      	ldr	r3, [r4, #8]
 8014e92:	3b01      	subs	r3, #1
 8014e94:	60a3      	str	r3, [r4, #8]
 8014e96:	6823      	ldr	r3, [r4, #0]
 8014e98:	1c5a      	adds	r2, r3, #1
 8014e9a:	6022      	str	r2, [r4, #0]
 8014e9c:	701e      	strb	r6, [r3, #0]
 8014e9e:	6962      	ldr	r2, [r4, #20]
 8014ea0:	1c43      	adds	r3, r0, #1
 8014ea2:	429a      	cmp	r2, r3
 8014ea4:	d004      	beq.n	8014eb0 <__swbuf_r+0x5a>
 8014ea6:	89a3      	ldrh	r3, [r4, #12]
 8014ea8:	07db      	lsls	r3, r3, #31
 8014eaa:	d506      	bpl.n	8014eba <__swbuf_r+0x64>
 8014eac:	2e0a      	cmp	r6, #10
 8014eae:	d104      	bne.n	8014eba <__swbuf_r+0x64>
 8014eb0:	4621      	mov	r1, r4
 8014eb2:	4628      	mov	r0, r5
 8014eb4:	f002 fa88 	bl	80173c8 <_fflush_r>
 8014eb8:	b938      	cbnz	r0, 8014eca <__swbuf_r+0x74>
 8014eba:	4638      	mov	r0, r7
 8014ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ebe:	4621      	mov	r1, r4
 8014ec0:	4628      	mov	r0, r5
 8014ec2:	f000 f805 	bl	8014ed0 <__swsetup_r>
 8014ec6:	2800      	cmp	r0, #0
 8014ec8:	d0d5      	beq.n	8014e76 <__swbuf_r+0x20>
 8014eca:	f04f 37ff 	mov.w	r7, #4294967295
 8014ece:	e7f4      	b.n	8014eba <__swbuf_r+0x64>

08014ed0 <__swsetup_r>:
 8014ed0:	b538      	push	{r3, r4, r5, lr}
 8014ed2:	4b2a      	ldr	r3, [pc, #168]	; (8014f7c <__swsetup_r+0xac>)
 8014ed4:	4605      	mov	r5, r0
 8014ed6:	6818      	ldr	r0, [r3, #0]
 8014ed8:	460c      	mov	r4, r1
 8014eda:	b118      	cbz	r0, 8014ee4 <__swsetup_r+0x14>
 8014edc:	6a03      	ldr	r3, [r0, #32]
 8014ede:	b90b      	cbnz	r3, 8014ee4 <__swsetup_r+0x14>
 8014ee0:	f7ff fed2 	bl	8014c88 <__sinit>
 8014ee4:	89a3      	ldrh	r3, [r4, #12]
 8014ee6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014eea:	0718      	lsls	r0, r3, #28
 8014eec:	d422      	bmi.n	8014f34 <__swsetup_r+0x64>
 8014eee:	06d9      	lsls	r1, r3, #27
 8014ef0:	d407      	bmi.n	8014f02 <__swsetup_r+0x32>
 8014ef2:	2309      	movs	r3, #9
 8014ef4:	602b      	str	r3, [r5, #0]
 8014ef6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014efa:	81a3      	strh	r3, [r4, #12]
 8014efc:	f04f 30ff 	mov.w	r0, #4294967295
 8014f00:	e034      	b.n	8014f6c <__swsetup_r+0x9c>
 8014f02:	0758      	lsls	r0, r3, #29
 8014f04:	d512      	bpl.n	8014f2c <__swsetup_r+0x5c>
 8014f06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f08:	b141      	cbz	r1, 8014f1c <__swsetup_r+0x4c>
 8014f0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f0e:	4299      	cmp	r1, r3
 8014f10:	d002      	beq.n	8014f18 <__swsetup_r+0x48>
 8014f12:	4628      	mov	r0, r5
 8014f14:	f001 f81e 	bl	8015f54 <_free_r>
 8014f18:	2300      	movs	r3, #0
 8014f1a:	6363      	str	r3, [r4, #52]	; 0x34
 8014f1c:	89a3      	ldrh	r3, [r4, #12]
 8014f1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014f22:	81a3      	strh	r3, [r4, #12]
 8014f24:	2300      	movs	r3, #0
 8014f26:	6063      	str	r3, [r4, #4]
 8014f28:	6923      	ldr	r3, [r4, #16]
 8014f2a:	6023      	str	r3, [r4, #0]
 8014f2c:	89a3      	ldrh	r3, [r4, #12]
 8014f2e:	f043 0308 	orr.w	r3, r3, #8
 8014f32:	81a3      	strh	r3, [r4, #12]
 8014f34:	6923      	ldr	r3, [r4, #16]
 8014f36:	b94b      	cbnz	r3, 8014f4c <__swsetup_r+0x7c>
 8014f38:	89a3      	ldrh	r3, [r4, #12]
 8014f3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f42:	d003      	beq.n	8014f4c <__swsetup_r+0x7c>
 8014f44:	4621      	mov	r1, r4
 8014f46:	4628      	mov	r0, r5
 8014f48:	f002 fa9e 	bl	8017488 <__smakebuf_r>
 8014f4c:	89a0      	ldrh	r0, [r4, #12]
 8014f4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014f52:	f010 0301 	ands.w	r3, r0, #1
 8014f56:	d00a      	beq.n	8014f6e <__swsetup_r+0x9e>
 8014f58:	2300      	movs	r3, #0
 8014f5a:	60a3      	str	r3, [r4, #8]
 8014f5c:	6963      	ldr	r3, [r4, #20]
 8014f5e:	425b      	negs	r3, r3
 8014f60:	61a3      	str	r3, [r4, #24]
 8014f62:	6923      	ldr	r3, [r4, #16]
 8014f64:	b943      	cbnz	r3, 8014f78 <__swsetup_r+0xa8>
 8014f66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014f6a:	d1c4      	bne.n	8014ef6 <__swsetup_r+0x26>
 8014f6c:	bd38      	pop	{r3, r4, r5, pc}
 8014f6e:	0781      	lsls	r1, r0, #30
 8014f70:	bf58      	it	pl
 8014f72:	6963      	ldrpl	r3, [r4, #20]
 8014f74:	60a3      	str	r3, [r4, #8]
 8014f76:	e7f4      	b.n	8014f62 <__swsetup_r+0x92>
 8014f78:	2000      	movs	r0, #0
 8014f7a:	e7f7      	b.n	8014f6c <__swsetup_r+0x9c>
 8014f7c:	200001f0 	.word	0x200001f0

08014f80 <memcmp>:
 8014f80:	b510      	push	{r4, lr}
 8014f82:	3901      	subs	r1, #1
 8014f84:	4402      	add	r2, r0
 8014f86:	4290      	cmp	r0, r2
 8014f88:	d101      	bne.n	8014f8e <memcmp+0xe>
 8014f8a:	2000      	movs	r0, #0
 8014f8c:	e005      	b.n	8014f9a <memcmp+0x1a>
 8014f8e:	7803      	ldrb	r3, [r0, #0]
 8014f90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014f94:	42a3      	cmp	r3, r4
 8014f96:	d001      	beq.n	8014f9c <memcmp+0x1c>
 8014f98:	1b18      	subs	r0, r3, r4
 8014f9a:	bd10      	pop	{r4, pc}
 8014f9c:	3001      	adds	r0, #1
 8014f9e:	e7f2      	b.n	8014f86 <memcmp+0x6>

08014fa0 <memset>:
 8014fa0:	4402      	add	r2, r0
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	4293      	cmp	r3, r2
 8014fa6:	d100      	bne.n	8014faa <memset+0xa>
 8014fa8:	4770      	bx	lr
 8014faa:	f803 1b01 	strb.w	r1, [r3], #1
 8014fae:	e7f9      	b.n	8014fa4 <memset+0x4>

08014fb0 <strncat>:
 8014fb0:	b530      	push	{r4, r5, lr}
 8014fb2:	4604      	mov	r4, r0
 8014fb4:	7825      	ldrb	r5, [r4, #0]
 8014fb6:	4623      	mov	r3, r4
 8014fb8:	3401      	adds	r4, #1
 8014fba:	2d00      	cmp	r5, #0
 8014fbc:	d1fa      	bne.n	8014fb4 <strncat+0x4>
 8014fbe:	3a01      	subs	r2, #1
 8014fc0:	d304      	bcc.n	8014fcc <strncat+0x1c>
 8014fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014fc6:	f803 4b01 	strb.w	r4, [r3], #1
 8014fca:	b904      	cbnz	r4, 8014fce <strncat+0x1e>
 8014fcc:	bd30      	pop	{r4, r5, pc}
 8014fce:	2a00      	cmp	r2, #0
 8014fd0:	d1f5      	bne.n	8014fbe <strncat+0xe>
 8014fd2:	701a      	strb	r2, [r3, #0]
 8014fd4:	e7f3      	b.n	8014fbe <strncat+0xe>

08014fd6 <strncmp>:
 8014fd6:	b510      	push	{r4, lr}
 8014fd8:	b16a      	cbz	r2, 8014ff6 <strncmp+0x20>
 8014fda:	3901      	subs	r1, #1
 8014fdc:	1884      	adds	r4, r0, r2
 8014fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014fe2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d103      	bne.n	8014ff2 <strncmp+0x1c>
 8014fea:	42a0      	cmp	r0, r4
 8014fec:	d001      	beq.n	8014ff2 <strncmp+0x1c>
 8014fee:	2a00      	cmp	r2, #0
 8014ff0:	d1f5      	bne.n	8014fde <strncmp+0x8>
 8014ff2:	1ad0      	subs	r0, r2, r3
 8014ff4:	bd10      	pop	{r4, pc}
 8014ff6:	4610      	mov	r0, r2
 8014ff8:	e7fc      	b.n	8014ff4 <strncmp+0x1e>

08014ffa <strncpy>:
 8014ffa:	b510      	push	{r4, lr}
 8014ffc:	3901      	subs	r1, #1
 8014ffe:	4603      	mov	r3, r0
 8015000:	b132      	cbz	r2, 8015010 <strncpy+0x16>
 8015002:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015006:	f803 4b01 	strb.w	r4, [r3], #1
 801500a:	3a01      	subs	r2, #1
 801500c:	2c00      	cmp	r4, #0
 801500e:	d1f7      	bne.n	8015000 <strncpy+0x6>
 8015010:	441a      	add	r2, r3
 8015012:	2100      	movs	r1, #0
 8015014:	4293      	cmp	r3, r2
 8015016:	d100      	bne.n	801501a <strncpy+0x20>
 8015018:	bd10      	pop	{r4, pc}
 801501a:	f803 1b01 	strb.w	r1, [r3], #1
 801501e:	e7f9      	b.n	8015014 <strncpy+0x1a>

08015020 <strtok>:
 8015020:	4b16      	ldr	r3, [pc, #88]	; (801507c <strtok+0x5c>)
 8015022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015024:	681e      	ldr	r6, [r3, #0]
 8015026:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8015028:	4605      	mov	r5, r0
 801502a:	b9fc      	cbnz	r4, 801506c <strtok+0x4c>
 801502c:	2050      	movs	r0, #80	; 0x50
 801502e:	9101      	str	r1, [sp, #4]
 8015030:	f7fe f93e 	bl	80132b0 <malloc>
 8015034:	9901      	ldr	r1, [sp, #4]
 8015036:	6470      	str	r0, [r6, #68]	; 0x44
 8015038:	4602      	mov	r2, r0
 801503a:	b920      	cbnz	r0, 8015046 <strtok+0x26>
 801503c:	4b10      	ldr	r3, [pc, #64]	; (8015080 <strtok+0x60>)
 801503e:	4811      	ldr	r0, [pc, #68]	; (8015084 <strtok+0x64>)
 8015040:	215b      	movs	r1, #91	; 0x5b
 8015042:	f000 f8ef 	bl	8015224 <__assert_func>
 8015046:	e9c0 4400 	strd	r4, r4, [r0]
 801504a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801504e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8015052:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8015056:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801505a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801505e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8015062:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8015066:	6184      	str	r4, [r0, #24]
 8015068:	7704      	strb	r4, [r0, #28]
 801506a:	6244      	str	r4, [r0, #36]	; 0x24
 801506c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801506e:	2301      	movs	r3, #1
 8015070:	4628      	mov	r0, r5
 8015072:	b002      	add	sp, #8
 8015074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015078:	f000 b806 	b.w	8015088 <__strtok_r>
 801507c:	200001f0 	.word	0x200001f0
 8015080:	0801ac68 	.word	0x0801ac68
 8015084:	0801ae65 	.word	0x0801ae65

08015088 <__strtok_r>:
 8015088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801508a:	b908      	cbnz	r0, 8015090 <__strtok_r+0x8>
 801508c:	6810      	ldr	r0, [r2, #0]
 801508e:	b188      	cbz	r0, 80150b4 <__strtok_r+0x2c>
 8015090:	4604      	mov	r4, r0
 8015092:	4620      	mov	r0, r4
 8015094:	f814 5b01 	ldrb.w	r5, [r4], #1
 8015098:	460f      	mov	r7, r1
 801509a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801509e:	b91e      	cbnz	r6, 80150a8 <__strtok_r+0x20>
 80150a0:	b965      	cbnz	r5, 80150bc <__strtok_r+0x34>
 80150a2:	6015      	str	r5, [r2, #0]
 80150a4:	4628      	mov	r0, r5
 80150a6:	e005      	b.n	80150b4 <__strtok_r+0x2c>
 80150a8:	42b5      	cmp	r5, r6
 80150aa:	d1f6      	bne.n	801509a <__strtok_r+0x12>
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d1f0      	bne.n	8015092 <__strtok_r+0xa>
 80150b0:	6014      	str	r4, [r2, #0]
 80150b2:	7003      	strb	r3, [r0, #0]
 80150b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150b6:	461c      	mov	r4, r3
 80150b8:	e00c      	b.n	80150d4 <__strtok_r+0x4c>
 80150ba:	b915      	cbnz	r5, 80150c2 <__strtok_r+0x3a>
 80150bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80150c0:	460e      	mov	r6, r1
 80150c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80150c6:	42ab      	cmp	r3, r5
 80150c8:	d1f7      	bne.n	80150ba <__strtok_r+0x32>
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d0f3      	beq.n	80150b6 <__strtok_r+0x2e>
 80150ce:	2300      	movs	r3, #0
 80150d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80150d4:	6014      	str	r4, [r2, #0]
 80150d6:	e7ed      	b.n	80150b4 <__strtok_r+0x2c>

080150d8 <_localeconv_r>:
 80150d8:	4800      	ldr	r0, [pc, #0]	; (80150dc <_localeconv_r+0x4>)
 80150da:	4770      	bx	lr
 80150dc:	20000128 	.word	0x20000128

080150e0 <_close_r>:
 80150e0:	b538      	push	{r3, r4, r5, lr}
 80150e2:	4d06      	ldr	r5, [pc, #24]	; (80150fc <_close_r+0x1c>)
 80150e4:	2300      	movs	r3, #0
 80150e6:	4604      	mov	r4, r0
 80150e8:	4608      	mov	r0, r1
 80150ea:	602b      	str	r3, [r5, #0]
 80150ec:	f7ed ff15 	bl	8002f1a <_close>
 80150f0:	1c43      	adds	r3, r0, #1
 80150f2:	d102      	bne.n	80150fa <_close_r+0x1a>
 80150f4:	682b      	ldr	r3, [r5, #0]
 80150f6:	b103      	cbz	r3, 80150fa <_close_r+0x1a>
 80150f8:	6023      	str	r3, [r4, #0]
 80150fa:	bd38      	pop	{r3, r4, r5, pc}
 80150fc:	20000b3c 	.word	0x20000b3c

08015100 <_lseek_r>:
 8015100:	b538      	push	{r3, r4, r5, lr}
 8015102:	4d07      	ldr	r5, [pc, #28]	; (8015120 <_lseek_r+0x20>)
 8015104:	4604      	mov	r4, r0
 8015106:	4608      	mov	r0, r1
 8015108:	4611      	mov	r1, r2
 801510a:	2200      	movs	r2, #0
 801510c:	602a      	str	r2, [r5, #0]
 801510e:	461a      	mov	r2, r3
 8015110:	f7ed ff2a 	bl	8002f68 <_lseek>
 8015114:	1c43      	adds	r3, r0, #1
 8015116:	d102      	bne.n	801511e <_lseek_r+0x1e>
 8015118:	682b      	ldr	r3, [r5, #0]
 801511a:	b103      	cbz	r3, 801511e <_lseek_r+0x1e>
 801511c:	6023      	str	r3, [r4, #0]
 801511e:	bd38      	pop	{r3, r4, r5, pc}
 8015120:	20000b3c 	.word	0x20000b3c

08015124 <_read_r>:
 8015124:	b538      	push	{r3, r4, r5, lr}
 8015126:	4d07      	ldr	r5, [pc, #28]	; (8015144 <_read_r+0x20>)
 8015128:	4604      	mov	r4, r0
 801512a:	4608      	mov	r0, r1
 801512c:	4611      	mov	r1, r2
 801512e:	2200      	movs	r2, #0
 8015130:	602a      	str	r2, [r5, #0]
 8015132:	461a      	mov	r2, r3
 8015134:	f7ed feb8 	bl	8002ea8 <_read>
 8015138:	1c43      	adds	r3, r0, #1
 801513a:	d102      	bne.n	8015142 <_read_r+0x1e>
 801513c:	682b      	ldr	r3, [r5, #0]
 801513e:	b103      	cbz	r3, 8015142 <_read_r+0x1e>
 8015140:	6023      	str	r3, [r4, #0]
 8015142:	bd38      	pop	{r3, r4, r5, pc}
 8015144:	20000b3c 	.word	0x20000b3c

08015148 <_sbrk_r>:
 8015148:	b538      	push	{r3, r4, r5, lr}
 801514a:	4d06      	ldr	r5, [pc, #24]	; (8015164 <_sbrk_r+0x1c>)
 801514c:	2300      	movs	r3, #0
 801514e:	4604      	mov	r4, r0
 8015150:	4608      	mov	r0, r1
 8015152:	602b      	str	r3, [r5, #0]
 8015154:	f7ed ff16 	bl	8002f84 <_sbrk>
 8015158:	1c43      	adds	r3, r0, #1
 801515a:	d102      	bne.n	8015162 <_sbrk_r+0x1a>
 801515c:	682b      	ldr	r3, [r5, #0]
 801515e:	b103      	cbz	r3, 8015162 <_sbrk_r+0x1a>
 8015160:	6023      	str	r3, [r4, #0]
 8015162:	bd38      	pop	{r3, r4, r5, pc}
 8015164:	20000b3c 	.word	0x20000b3c

08015168 <_write_r>:
 8015168:	b538      	push	{r3, r4, r5, lr}
 801516a:	4d07      	ldr	r5, [pc, #28]	; (8015188 <_write_r+0x20>)
 801516c:	4604      	mov	r4, r0
 801516e:	4608      	mov	r0, r1
 8015170:	4611      	mov	r1, r2
 8015172:	2200      	movs	r2, #0
 8015174:	602a      	str	r2, [r5, #0]
 8015176:	461a      	mov	r2, r3
 8015178:	f7ed feb3 	bl	8002ee2 <_write>
 801517c:	1c43      	adds	r3, r0, #1
 801517e:	d102      	bne.n	8015186 <_write_r+0x1e>
 8015180:	682b      	ldr	r3, [r5, #0]
 8015182:	b103      	cbz	r3, 8015186 <_write_r+0x1e>
 8015184:	6023      	str	r3, [r4, #0]
 8015186:	bd38      	pop	{r3, r4, r5, pc}
 8015188:	20000b3c 	.word	0x20000b3c

0801518c <__errno>:
 801518c:	4b01      	ldr	r3, [pc, #4]	; (8015194 <__errno+0x8>)
 801518e:	6818      	ldr	r0, [r3, #0]
 8015190:	4770      	bx	lr
 8015192:	bf00      	nop
 8015194:	200001f0 	.word	0x200001f0

08015198 <__libc_init_array>:
 8015198:	b570      	push	{r4, r5, r6, lr}
 801519a:	4d0d      	ldr	r5, [pc, #52]	; (80151d0 <__libc_init_array+0x38>)
 801519c:	4c0d      	ldr	r4, [pc, #52]	; (80151d4 <__libc_init_array+0x3c>)
 801519e:	1b64      	subs	r4, r4, r5
 80151a0:	10a4      	asrs	r4, r4, #2
 80151a2:	2600      	movs	r6, #0
 80151a4:	42a6      	cmp	r6, r4
 80151a6:	d109      	bne.n	80151bc <__libc_init_array+0x24>
 80151a8:	4d0b      	ldr	r5, [pc, #44]	; (80151d8 <__libc_init_array+0x40>)
 80151aa:	4c0c      	ldr	r4, [pc, #48]	; (80151dc <__libc_init_array+0x44>)
 80151ac:	f002 fa2c 	bl	8017608 <_init>
 80151b0:	1b64      	subs	r4, r4, r5
 80151b2:	10a4      	asrs	r4, r4, #2
 80151b4:	2600      	movs	r6, #0
 80151b6:	42a6      	cmp	r6, r4
 80151b8:	d105      	bne.n	80151c6 <__libc_init_array+0x2e>
 80151ba:	bd70      	pop	{r4, r5, r6, pc}
 80151bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80151c0:	4798      	blx	r3
 80151c2:	3601      	adds	r6, #1
 80151c4:	e7ee      	b.n	80151a4 <__libc_init_array+0xc>
 80151c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80151ca:	4798      	blx	r3
 80151cc:	3601      	adds	r6, #1
 80151ce:	e7f2      	b.n	80151b6 <__libc_init_array+0x1e>
 80151d0:	0801b150 	.word	0x0801b150
 80151d4:	0801b150 	.word	0x0801b150
 80151d8:	0801b150 	.word	0x0801b150
 80151dc:	0801b154 	.word	0x0801b154

080151e0 <__retarget_lock_init_recursive>:
 80151e0:	4770      	bx	lr

080151e2 <__retarget_lock_acquire_recursive>:
 80151e2:	4770      	bx	lr

080151e4 <__retarget_lock_release_recursive>:
 80151e4:	4770      	bx	lr

080151e6 <memcpy>:
 80151e6:	440a      	add	r2, r1
 80151e8:	4291      	cmp	r1, r2
 80151ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80151ee:	d100      	bne.n	80151f2 <memcpy+0xc>
 80151f0:	4770      	bx	lr
 80151f2:	b510      	push	{r4, lr}
 80151f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80151f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80151fc:	4291      	cmp	r1, r2
 80151fe:	d1f9      	bne.n	80151f4 <memcpy+0xe>
 8015200:	bd10      	pop	{r4, pc}
 8015202:	0000      	movs	r0, r0
 8015204:	0000      	movs	r0, r0
	...

08015208 <nan>:
 8015208:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015210 <nan+0x8>
 801520c:	4770      	bx	lr
 801520e:	bf00      	nop
 8015210:	00000000 	.word	0x00000000
 8015214:	7ff80000 	.word	0x7ff80000

08015218 <nanf>:
 8015218:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015220 <nanf+0x8>
 801521c:	4770      	bx	lr
 801521e:	bf00      	nop
 8015220:	7fc00000 	.word	0x7fc00000

08015224 <__assert_func>:
 8015224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015226:	4614      	mov	r4, r2
 8015228:	461a      	mov	r2, r3
 801522a:	4b09      	ldr	r3, [pc, #36]	; (8015250 <__assert_func+0x2c>)
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	4605      	mov	r5, r0
 8015230:	68d8      	ldr	r0, [r3, #12]
 8015232:	b14c      	cbz	r4, 8015248 <__assert_func+0x24>
 8015234:	4b07      	ldr	r3, [pc, #28]	; (8015254 <__assert_func+0x30>)
 8015236:	9100      	str	r1, [sp, #0]
 8015238:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801523c:	4906      	ldr	r1, [pc, #24]	; (8015258 <__assert_func+0x34>)
 801523e:	462b      	mov	r3, r5
 8015240:	f002 f8ea 	bl	8017418 <fiprintf>
 8015244:	f002 f97e 	bl	8017544 <abort>
 8015248:	4b04      	ldr	r3, [pc, #16]	; (801525c <__assert_func+0x38>)
 801524a:	461c      	mov	r4, r3
 801524c:	e7f3      	b.n	8015236 <__assert_func+0x12>
 801524e:	bf00      	nop
 8015250:	200001f0 	.word	0x200001f0
 8015254:	0801aec7 	.word	0x0801aec7
 8015258:	0801aed4 	.word	0x0801aed4
 801525c:	0801af02 	.word	0x0801af02

08015260 <quorem>:
 8015260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015264:	6903      	ldr	r3, [r0, #16]
 8015266:	690c      	ldr	r4, [r1, #16]
 8015268:	42a3      	cmp	r3, r4
 801526a:	4607      	mov	r7, r0
 801526c:	db7e      	blt.n	801536c <quorem+0x10c>
 801526e:	3c01      	subs	r4, #1
 8015270:	f101 0814 	add.w	r8, r1, #20
 8015274:	f100 0514 	add.w	r5, r0, #20
 8015278:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801527c:	9301      	str	r3, [sp, #4]
 801527e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015282:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015286:	3301      	adds	r3, #1
 8015288:	429a      	cmp	r2, r3
 801528a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801528e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015292:	fbb2 f6f3 	udiv	r6, r2, r3
 8015296:	d331      	bcc.n	80152fc <quorem+0x9c>
 8015298:	f04f 0e00 	mov.w	lr, #0
 801529c:	4640      	mov	r0, r8
 801529e:	46ac      	mov	ip, r5
 80152a0:	46f2      	mov	sl, lr
 80152a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80152a6:	b293      	uxth	r3, r2
 80152a8:	fb06 e303 	mla	r3, r6, r3, lr
 80152ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80152b0:	0c1a      	lsrs	r2, r3, #16
 80152b2:	b29b      	uxth	r3, r3
 80152b4:	ebaa 0303 	sub.w	r3, sl, r3
 80152b8:	f8dc a000 	ldr.w	sl, [ip]
 80152bc:	fa13 f38a 	uxtah	r3, r3, sl
 80152c0:	fb06 220e 	mla	r2, r6, lr, r2
 80152c4:	9300      	str	r3, [sp, #0]
 80152c6:	9b00      	ldr	r3, [sp, #0]
 80152c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80152cc:	b292      	uxth	r2, r2
 80152ce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80152d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80152d6:	f8bd 3000 	ldrh.w	r3, [sp]
 80152da:	4581      	cmp	r9, r0
 80152dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80152e0:	f84c 3b04 	str.w	r3, [ip], #4
 80152e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80152e8:	d2db      	bcs.n	80152a2 <quorem+0x42>
 80152ea:	f855 300b 	ldr.w	r3, [r5, fp]
 80152ee:	b92b      	cbnz	r3, 80152fc <quorem+0x9c>
 80152f0:	9b01      	ldr	r3, [sp, #4]
 80152f2:	3b04      	subs	r3, #4
 80152f4:	429d      	cmp	r5, r3
 80152f6:	461a      	mov	r2, r3
 80152f8:	d32c      	bcc.n	8015354 <quorem+0xf4>
 80152fa:	613c      	str	r4, [r7, #16]
 80152fc:	4638      	mov	r0, r7
 80152fe:	f001 fca5 	bl	8016c4c <__mcmp>
 8015302:	2800      	cmp	r0, #0
 8015304:	db22      	blt.n	801534c <quorem+0xec>
 8015306:	3601      	adds	r6, #1
 8015308:	4629      	mov	r1, r5
 801530a:	2000      	movs	r0, #0
 801530c:	f858 2b04 	ldr.w	r2, [r8], #4
 8015310:	f8d1 c000 	ldr.w	ip, [r1]
 8015314:	b293      	uxth	r3, r2
 8015316:	1ac3      	subs	r3, r0, r3
 8015318:	0c12      	lsrs	r2, r2, #16
 801531a:	fa13 f38c 	uxtah	r3, r3, ip
 801531e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8015322:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015326:	b29b      	uxth	r3, r3
 8015328:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801532c:	45c1      	cmp	r9, r8
 801532e:	f841 3b04 	str.w	r3, [r1], #4
 8015332:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015336:	d2e9      	bcs.n	801530c <quorem+0xac>
 8015338:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801533c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015340:	b922      	cbnz	r2, 801534c <quorem+0xec>
 8015342:	3b04      	subs	r3, #4
 8015344:	429d      	cmp	r5, r3
 8015346:	461a      	mov	r2, r3
 8015348:	d30a      	bcc.n	8015360 <quorem+0x100>
 801534a:	613c      	str	r4, [r7, #16]
 801534c:	4630      	mov	r0, r6
 801534e:	b003      	add	sp, #12
 8015350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015354:	6812      	ldr	r2, [r2, #0]
 8015356:	3b04      	subs	r3, #4
 8015358:	2a00      	cmp	r2, #0
 801535a:	d1ce      	bne.n	80152fa <quorem+0x9a>
 801535c:	3c01      	subs	r4, #1
 801535e:	e7c9      	b.n	80152f4 <quorem+0x94>
 8015360:	6812      	ldr	r2, [r2, #0]
 8015362:	3b04      	subs	r3, #4
 8015364:	2a00      	cmp	r2, #0
 8015366:	d1f0      	bne.n	801534a <quorem+0xea>
 8015368:	3c01      	subs	r4, #1
 801536a:	e7eb      	b.n	8015344 <quorem+0xe4>
 801536c:	2000      	movs	r0, #0
 801536e:	e7ee      	b.n	801534e <quorem+0xee>

08015370 <_dtoa_r>:
 8015370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015374:	ed2d 8b04 	vpush	{d8-d9}
 8015378:	69c5      	ldr	r5, [r0, #28]
 801537a:	b093      	sub	sp, #76	; 0x4c
 801537c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015380:	ec57 6b10 	vmov	r6, r7, d0
 8015384:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015388:	9107      	str	r1, [sp, #28]
 801538a:	4604      	mov	r4, r0
 801538c:	920a      	str	r2, [sp, #40]	; 0x28
 801538e:	930d      	str	r3, [sp, #52]	; 0x34
 8015390:	b975      	cbnz	r5, 80153b0 <_dtoa_r+0x40>
 8015392:	2010      	movs	r0, #16
 8015394:	f7fd ff8c 	bl	80132b0 <malloc>
 8015398:	4602      	mov	r2, r0
 801539a:	61e0      	str	r0, [r4, #28]
 801539c:	b920      	cbnz	r0, 80153a8 <_dtoa_r+0x38>
 801539e:	4bae      	ldr	r3, [pc, #696]	; (8015658 <_dtoa_r+0x2e8>)
 80153a0:	21ef      	movs	r1, #239	; 0xef
 80153a2:	48ae      	ldr	r0, [pc, #696]	; (801565c <_dtoa_r+0x2ec>)
 80153a4:	f7ff ff3e 	bl	8015224 <__assert_func>
 80153a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80153ac:	6005      	str	r5, [r0, #0]
 80153ae:	60c5      	str	r5, [r0, #12]
 80153b0:	69e3      	ldr	r3, [r4, #28]
 80153b2:	6819      	ldr	r1, [r3, #0]
 80153b4:	b151      	cbz	r1, 80153cc <_dtoa_r+0x5c>
 80153b6:	685a      	ldr	r2, [r3, #4]
 80153b8:	604a      	str	r2, [r1, #4]
 80153ba:	2301      	movs	r3, #1
 80153bc:	4093      	lsls	r3, r2
 80153be:	608b      	str	r3, [r1, #8]
 80153c0:	4620      	mov	r0, r4
 80153c2:	f001 f9bd 	bl	8016740 <_Bfree>
 80153c6:	69e3      	ldr	r3, [r4, #28]
 80153c8:	2200      	movs	r2, #0
 80153ca:	601a      	str	r2, [r3, #0]
 80153cc:	1e3b      	subs	r3, r7, #0
 80153ce:	bfbb      	ittet	lt
 80153d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80153d4:	9303      	strlt	r3, [sp, #12]
 80153d6:	2300      	movge	r3, #0
 80153d8:	2201      	movlt	r2, #1
 80153da:	bfac      	ite	ge
 80153dc:	f8c8 3000 	strge.w	r3, [r8]
 80153e0:	f8c8 2000 	strlt.w	r2, [r8]
 80153e4:	4b9e      	ldr	r3, [pc, #632]	; (8015660 <_dtoa_r+0x2f0>)
 80153e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80153ea:	ea33 0308 	bics.w	r3, r3, r8
 80153ee:	d11b      	bne.n	8015428 <_dtoa_r+0xb8>
 80153f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80153f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80153f6:	6013      	str	r3, [r2, #0]
 80153f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80153fc:	4333      	orrs	r3, r6
 80153fe:	f000 8593 	beq.w	8015f28 <_dtoa_r+0xbb8>
 8015402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015404:	b963      	cbnz	r3, 8015420 <_dtoa_r+0xb0>
 8015406:	4b97      	ldr	r3, [pc, #604]	; (8015664 <_dtoa_r+0x2f4>)
 8015408:	e027      	b.n	801545a <_dtoa_r+0xea>
 801540a:	4b97      	ldr	r3, [pc, #604]	; (8015668 <_dtoa_r+0x2f8>)
 801540c:	9300      	str	r3, [sp, #0]
 801540e:	3308      	adds	r3, #8
 8015410:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015412:	6013      	str	r3, [r2, #0]
 8015414:	9800      	ldr	r0, [sp, #0]
 8015416:	b013      	add	sp, #76	; 0x4c
 8015418:	ecbd 8b04 	vpop	{d8-d9}
 801541c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015420:	4b90      	ldr	r3, [pc, #576]	; (8015664 <_dtoa_r+0x2f4>)
 8015422:	9300      	str	r3, [sp, #0]
 8015424:	3303      	adds	r3, #3
 8015426:	e7f3      	b.n	8015410 <_dtoa_r+0xa0>
 8015428:	ed9d 7b02 	vldr	d7, [sp, #8]
 801542c:	2200      	movs	r2, #0
 801542e:	ec51 0b17 	vmov	r0, r1, d7
 8015432:	eeb0 8a47 	vmov.f32	s16, s14
 8015436:	eef0 8a67 	vmov.f32	s17, s15
 801543a:	2300      	movs	r3, #0
 801543c:	f7eb fb64 	bl	8000b08 <__aeabi_dcmpeq>
 8015440:	4681      	mov	r9, r0
 8015442:	b160      	cbz	r0, 801545e <_dtoa_r+0xee>
 8015444:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015446:	2301      	movs	r3, #1
 8015448:	6013      	str	r3, [r2, #0]
 801544a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801544c:	2b00      	cmp	r3, #0
 801544e:	f000 8568 	beq.w	8015f22 <_dtoa_r+0xbb2>
 8015452:	4b86      	ldr	r3, [pc, #536]	; (801566c <_dtoa_r+0x2fc>)
 8015454:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015456:	6013      	str	r3, [r2, #0]
 8015458:	3b01      	subs	r3, #1
 801545a:	9300      	str	r3, [sp, #0]
 801545c:	e7da      	b.n	8015414 <_dtoa_r+0xa4>
 801545e:	aa10      	add	r2, sp, #64	; 0x40
 8015460:	a911      	add	r1, sp, #68	; 0x44
 8015462:	4620      	mov	r0, r4
 8015464:	eeb0 0a48 	vmov.f32	s0, s16
 8015468:	eef0 0a68 	vmov.f32	s1, s17
 801546c:	f001 fd04 	bl	8016e78 <__d2b>
 8015470:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015474:	4682      	mov	sl, r0
 8015476:	2d00      	cmp	r5, #0
 8015478:	d07f      	beq.n	801557a <_dtoa_r+0x20a>
 801547a:	ee18 3a90 	vmov	r3, s17
 801547e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015482:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8015486:	ec51 0b18 	vmov	r0, r1, d8
 801548a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801548e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015492:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8015496:	4619      	mov	r1, r3
 8015498:	2200      	movs	r2, #0
 801549a:	4b75      	ldr	r3, [pc, #468]	; (8015670 <_dtoa_r+0x300>)
 801549c:	f7ea ff14 	bl	80002c8 <__aeabi_dsub>
 80154a0:	a367      	add	r3, pc, #412	; (adr r3, 8015640 <_dtoa_r+0x2d0>)
 80154a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154a6:	f7eb f8c7 	bl	8000638 <__aeabi_dmul>
 80154aa:	a367      	add	r3, pc, #412	; (adr r3, 8015648 <_dtoa_r+0x2d8>)
 80154ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b0:	f7ea ff0c 	bl	80002cc <__adddf3>
 80154b4:	4606      	mov	r6, r0
 80154b6:	4628      	mov	r0, r5
 80154b8:	460f      	mov	r7, r1
 80154ba:	f7eb f853 	bl	8000564 <__aeabi_i2d>
 80154be:	a364      	add	r3, pc, #400	; (adr r3, 8015650 <_dtoa_r+0x2e0>)
 80154c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154c4:	f7eb f8b8 	bl	8000638 <__aeabi_dmul>
 80154c8:	4602      	mov	r2, r0
 80154ca:	460b      	mov	r3, r1
 80154cc:	4630      	mov	r0, r6
 80154ce:	4639      	mov	r1, r7
 80154d0:	f7ea fefc 	bl	80002cc <__adddf3>
 80154d4:	4606      	mov	r6, r0
 80154d6:	460f      	mov	r7, r1
 80154d8:	f7eb fb5e 	bl	8000b98 <__aeabi_d2iz>
 80154dc:	2200      	movs	r2, #0
 80154de:	4683      	mov	fp, r0
 80154e0:	2300      	movs	r3, #0
 80154e2:	4630      	mov	r0, r6
 80154e4:	4639      	mov	r1, r7
 80154e6:	f7eb fb19 	bl	8000b1c <__aeabi_dcmplt>
 80154ea:	b148      	cbz	r0, 8015500 <_dtoa_r+0x190>
 80154ec:	4658      	mov	r0, fp
 80154ee:	f7eb f839 	bl	8000564 <__aeabi_i2d>
 80154f2:	4632      	mov	r2, r6
 80154f4:	463b      	mov	r3, r7
 80154f6:	f7eb fb07 	bl	8000b08 <__aeabi_dcmpeq>
 80154fa:	b908      	cbnz	r0, 8015500 <_dtoa_r+0x190>
 80154fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015500:	f1bb 0f16 	cmp.w	fp, #22
 8015504:	d857      	bhi.n	80155b6 <_dtoa_r+0x246>
 8015506:	4b5b      	ldr	r3, [pc, #364]	; (8015674 <_dtoa_r+0x304>)
 8015508:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015510:	ec51 0b18 	vmov	r0, r1, d8
 8015514:	f7eb fb02 	bl	8000b1c <__aeabi_dcmplt>
 8015518:	2800      	cmp	r0, #0
 801551a:	d04e      	beq.n	80155ba <_dtoa_r+0x24a>
 801551c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015520:	2300      	movs	r3, #0
 8015522:	930c      	str	r3, [sp, #48]	; 0x30
 8015524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015526:	1b5b      	subs	r3, r3, r5
 8015528:	1e5a      	subs	r2, r3, #1
 801552a:	bf45      	ittet	mi
 801552c:	f1c3 0301 	rsbmi	r3, r3, #1
 8015530:	9305      	strmi	r3, [sp, #20]
 8015532:	2300      	movpl	r3, #0
 8015534:	2300      	movmi	r3, #0
 8015536:	9206      	str	r2, [sp, #24]
 8015538:	bf54      	ite	pl
 801553a:	9305      	strpl	r3, [sp, #20]
 801553c:	9306      	strmi	r3, [sp, #24]
 801553e:	f1bb 0f00 	cmp.w	fp, #0
 8015542:	db3c      	blt.n	80155be <_dtoa_r+0x24e>
 8015544:	9b06      	ldr	r3, [sp, #24]
 8015546:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801554a:	445b      	add	r3, fp
 801554c:	9306      	str	r3, [sp, #24]
 801554e:	2300      	movs	r3, #0
 8015550:	9308      	str	r3, [sp, #32]
 8015552:	9b07      	ldr	r3, [sp, #28]
 8015554:	2b09      	cmp	r3, #9
 8015556:	d868      	bhi.n	801562a <_dtoa_r+0x2ba>
 8015558:	2b05      	cmp	r3, #5
 801555a:	bfc4      	itt	gt
 801555c:	3b04      	subgt	r3, #4
 801555e:	9307      	strgt	r3, [sp, #28]
 8015560:	9b07      	ldr	r3, [sp, #28]
 8015562:	f1a3 0302 	sub.w	r3, r3, #2
 8015566:	bfcc      	ite	gt
 8015568:	2500      	movgt	r5, #0
 801556a:	2501      	movle	r5, #1
 801556c:	2b03      	cmp	r3, #3
 801556e:	f200 8085 	bhi.w	801567c <_dtoa_r+0x30c>
 8015572:	e8df f003 	tbb	[pc, r3]
 8015576:	3b2e      	.short	0x3b2e
 8015578:	5839      	.short	0x5839
 801557a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801557e:	441d      	add	r5, r3
 8015580:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015584:	2b20      	cmp	r3, #32
 8015586:	bfc1      	itttt	gt
 8015588:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801558c:	fa08 f803 	lslgt.w	r8, r8, r3
 8015590:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8015594:	fa26 f303 	lsrgt.w	r3, r6, r3
 8015598:	bfd6      	itet	le
 801559a:	f1c3 0320 	rsble	r3, r3, #32
 801559e:	ea48 0003 	orrgt.w	r0, r8, r3
 80155a2:	fa06 f003 	lslle.w	r0, r6, r3
 80155a6:	f7ea ffcd 	bl	8000544 <__aeabi_ui2d>
 80155aa:	2201      	movs	r2, #1
 80155ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80155b0:	3d01      	subs	r5, #1
 80155b2:	920e      	str	r2, [sp, #56]	; 0x38
 80155b4:	e76f      	b.n	8015496 <_dtoa_r+0x126>
 80155b6:	2301      	movs	r3, #1
 80155b8:	e7b3      	b.n	8015522 <_dtoa_r+0x1b2>
 80155ba:	900c      	str	r0, [sp, #48]	; 0x30
 80155bc:	e7b2      	b.n	8015524 <_dtoa_r+0x1b4>
 80155be:	9b05      	ldr	r3, [sp, #20]
 80155c0:	eba3 030b 	sub.w	r3, r3, fp
 80155c4:	9305      	str	r3, [sp, #20]
 80155c6:	f1cb 0300 	rsb	r3, fp, #0
 80155ca:	9308      	str	r3, [sp, #32]
 80155cc:	2300      	movs	r3, #0
 80155ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80155d0:	e7bf      	b.n	8015552 <_dtoa_r+0x1e2>
 80155d2:	2300      	movs	r3, #0
 80155d4:	9309      	str	r3, [sp, #36]	; 0x24
 80155d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155d8:	2b00      	cmp	r3, #0
 80155da:	dc52      	bgt.n	8015682 <_dtoa_r+0x312>
 80155dc:	2301      	movs	r3, #1
 80155de:	9301      	str	r3, [sp, #4]
 80155e0:	9304      	str	r3, [sp, #16]
 80155e2:	461a      	mov	r2, r3
 80155e4:	920a      	str	r2, [sp, #40]	; 0x28
 80155e6:	e00b      	b.n	8015600 <_dtoa_r+0x290>
 80155e8:	2301      	movs	r3, #1
 80155ea:	e7f3      	b.n	80155d4 <_dtoa_r+0x264>
 80155ec:	2300      	movs	r3, #0
 80155ee:	9309      	str	r3, [sp, #36]	; 0x24
 80155f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155f2:	445b      	add	r3, fp
 80155f4:	9301      	str	r3, [sp, #4]
 80155f6:	3301      	adds	r3, #1
 80155f8:	2b01      	cmp	r3, #1
 80155fa:	9304      	str	r3, [sp, #16]
 80155fc:	bfb8      	it	lt
 80155fe:	2301      	movlt	r3, #1
 8015600:	69e0      	ldr	r0, [r4, #28]
 8015602:	2100      	movs	r1, #0
 8015604:	2204      	movs	r2, #4
 8015606:	f102 0614 	add.w	r6, r2, #20
 801560a:	429e      	cmp	r6, r3
 801560c:	d93d      	bls.n	801568a <_dtoa_r+0x31a>
 801560e:	6041      	str	r1, [r0, #4]
 8015610:	4620      	mov	r0, r4
 8015612:	f001 f855 	bl	80166c0 <_Balloc>
 8015616:	9000      	str	r0, [sp, #0]
 8015618:	2800      	cmp	r0, #0
 801561a:	d139      	bne.n	8015690 <_dtoa_r+0x320>
 801561c:	4b16      	ldr	r3, [pc, #88]	; (8015678 <_dtoa_r+0x308>)
 801561e:	4602      	mov	r2, r0
 8015620:	f240 11af 	movw	r1, #431	; 0x1af
 8015624:	e6bd      	b.n	80153a2 <_dtoa_r+0x32>
 8015626:	2301      	movs	r3, #1
 8015628:	e7e1      	b.n	80155ee <_dtoa_r+0x27e>
 801562a:	2501      	movs	r5, #1
 801562c:	2300      	movs	r3, #0
 801562e:	9307      	str	r3, [sp, #28]
 8015630:	9509      	str	r5, [sp, #36]	; 0x24
 8015632:	f04f 33ff 	mov.w	r3, #4294967295
 8015636:	9301      	str	r3, [sp, #4]
 8015638:	9304      	str	r3, [sp, #16]
 801563a:	2200      	movs	r2, #0
 801563c:	2312      	movs	r3, #18
 801563e:	e7d1      	b.n	80155e4 <_dtoa_r+0x274>
 8015640:	636f4361 	.word	0x636f4361
 8015644:	3fd287a7 	.word	0x3fd287a7
 8015648:	8b60c8b3 	.word	0x8b60c8b3
 801564c:	3fc68a28 	.word	0x3fc68a28
 8015650:	509f79fb 	.word	0x509f79fb
 8015654:	3fd34413 	.word	0x3fd34413
 8015658:	0801ac68 	.word	0x0801ac68
 801565c:	0801af10 	.word	0x0801af10
 8015660:	7ff00000 	.word	0x7ff00000
 8015664:	0801af0c 	.word	0x0801af0c
 8015668:	0801af03 	.word	0x0801af03
 801566c:	0801ae42 	.word	0x0801ae42
 8015670:	3ff80000 	.word	0x3ff80000
 8015674:	0801b060 	.word	0x0801b060
 8015678:	0801af68 	.word	0x0801af68
 801567c:	2301      	movs	r3, #1
 801567e:	9309      	str	r3, [sp, #36]	; 0x24
 8015680:	e7d7      	b.n	8015632 <_dtoa_r+0x2c2>
 8015682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015684:	9301      	str	r3, [sp, #4]
 8015686:	9304      	str	r3, [sp, #16]
 8015688:	e7ba      	b.n	8015600 <_dtoa_r+0x290>
 801568a:	3101      	adds	r1, #1
 801568c:	0052      	lsls	r2, r2, #1
 801568e:	e7ba      	b.n	8015606 <_dtoa_r+0x296>
 8015690:	69e3      	ldr	r3, [r4, #28]
 8015692:	9a00      	ldr	r2, [sp, #0]
 8015694:	601a      	str	r2, [r3, #0]
 8015696:	9b04      	ldr	r3, [sp, #16]
 8015698:	2b0e      	cmp	r3, #14
 801569a:	f200 80a8 	bhi.w	80157ee <_dtoa_r+0x47e>
 801569e:	2d00      	cmp	r5, #0
 80156a0:	f000 80a5 	beq.w	80157ee <_dtoa_r+0x47e>
 80156a4:	f1bb 0f00 	cmp.w	fp, #0
 80156a8:	dd38      	ble.n	801571c <_dtoa_r+0x3ac>
 80156aa:	4bc0      	ldr	r3, [pc, #768]	; (80159ac <_dtoa_r+0x63c>)
 80156ac:	f00b 020f 	and.w	r2, fp, #15
 80156b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80156b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80156b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80156bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80156c0:	d019      	beq.n	80156f6 <_dtoa_r+0x386>
 80156c2:	4bbb      	ldr	r3, [pc, #748]	; (80159b0 <_dtoa_r+0x640>)
 80156c4:	ec51 0b18 	vmov	r0, r1, d8
 80156c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80156cc:	f7eb f8de 	bl	800088c <__aeabi_ddiv>
 80156d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80156d4:	f008 080f 	and.w	r8, r8, #15
 80156d8:	2503      	movs	r5, #3
 80156da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80159b0 <_dtoa_r+0x640>
 80156de:	f1b8 0f00 	cmp.w	r8, #0
 80156e2:	d10a      	bne.n	80156fa <_dtoa_r+0x38a>
 80156e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80156e8:	4632      	mov	r2, r6
 80156ea:	463b      	mov	r3, r7
 80156ec:	f7eb f8ce 	bl	800088c <__aeabi_ddiv>
 80156f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80156f4:	e02b      	b.n	801574e <_dtoa_r+0x3de>
 80156f6:	2502      	movs	r5, #2
 80156f8:	e7ef      	b.n	80156da <_dtoa_r+0x36a>
 80156fa:	f018 0f01 	tst.w	r8, #1
 80156fe:	d008      	beq.n	8015712 <_dtoa_r+0x3a2>
 8015700:	4630      	mov	r0, r6
 8015702:	4639      	mov	r1, r7
 8015704:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015708:	f7ea ff96 	bl	8000638 <__aeabi_dmul>
 801570c:	3501      	adds	r5, #1
 801570e:	4606      	mov	r6, r0
 8015710:	460f      	mov	r7, r1
 8015712:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015716:	f109 0908 	add.w	r9, r9, #8
 801571a:	e7e0      	b.n	80156de <_dtoa_r+0x36e>
 801571c:	f000 809f 	beq.w	801585e <_dtoa_r+0x4ee>
 8015720:	f1cb 0600 	rsb	r6, fp, #0
 8015724:	4ba1      	ldr	r3, [pc, #644]	; (80159ac <_dtoa_r+0x63c>)
 8015726:	4fa2      	ldr	r7, [pc, #648]	; (80159b0 <_dtoa_r+0x640>)
 8015728:	f006 020f 	and.w	r2, r6, #15
 801572c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015734:	ec51 0b18 	vmov	r0, r1, d8
 8015738:	f7ea ff7e 	bl	8000638 <__aeabi_dmul>
 801573c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015740:	1136      	asrs	r6, r6, #4
 8015742:	2300      	movs	r3, #0
 8015744:	2502      	movs	r5, #2
 8015746:	2e00      	cmp	r6, #0
 8015748:	d17e      	bne.n	8015848 <_dtoa_r+0x4d8>
 801574a:	2b00      	cmp	r3, #0
 801574c:	d1d0      	bne.n	80156f0 <_dtoa_r+0x380>
 801574e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015750:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015754:	2b00      	cmp	r3, #0
 8015756:	f000 8084 	beq.w	8015862 <_dtoa_r+0x4f2>
 801575a:	4b96      	ldr	r3, [pc, #600]	; (80159b4 <_dtoa_r+0x644>)
 801575c:	2200      	movs	r2, #0
 801575e:	4640      	mov	r0, r8
 8015760:	4649      	mov	r1, r9
 8015762:	f7eb f9db 	bl	8000b1c <__aeabi_dcmplt>
 8015766:	2800      	cmp	r0, #0
 8015768:	d07b      	beq.n	8015862 <_dtoa_r+0x4f2>
 801576a:	9b04      	ldr	r3, [sp, #16]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d078      	beq.n	8015862 <_dtoa_r+0x4f2>
 8015770:	9b01      	ldr	r3, [sp, #4]
 8015772:	2b00      	cmp	r3, #0
 8015774:	dd39      	ble.n	80157ea <_dtoa_r+0x47a>
 8015776:	4b90      	ldr	r3, [pc, #576]	; (80159b8 <_dtoa_r+0x648>)
 8015778:	2200      	movs	r2, #0
 801577a:	4640      	mov	r0, r8
 801577c:	4649      	mov	r1, r9
 801577e:	f7ea ff5b 	bl	8000638 <__aeabi_dmul>
 8015782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015786:	9e01      	ldr	r6, [sp, #4]
 8015788:	f10b 37ff 	add.w	r7, fp, #4294967295
 801578c:	3501      	adds	r5, #1
 801578e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015792:	4628      	mov	r0, r5
 8015794:	f7ea fee6 	bl	8000564 <__aeabi_i2d>
 8015798:	4642      	mov	r2, r8
 801579a:	464b      	mov	r3, r9
 801579c:	f7ea ff4c 	bl	8000638 <__aeabi_dmul>
 80157a0:	4b86      	ldr	r3, [pc, #536]	; (80159bc <_dtoa_r+0x64c>)
 80157a2:	2200      	movs	r2, #0
 80157a4:	f7ea fd92 	bl	80002cc <__adddf3>
 80157a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80157ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80157b0:	9303      	str	r3, [sp, #12]
 80157b2:	2e00      	cmp	r6, #0
 80157b4:	d158      	bne.n	8015868 <_dtoa_r+0x4f8>
 80157b6:	4b82      	ldr	r3, [pc, #520]	; (80159c0 <_dtoa_r+0x650>)
 80157b8:	2200      	movs	r2, #0
 80157ba:	4640      	mov	r0, r8
 80157bc:	4649      	mov	r1, r9
 80157be:	f7ea fd83 	bl	80002c8 <__aeabi_dsub>
 80157c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157c6:	4680      	mov	r8, r0
 80157c8:	4689      	mov	r9, r1
 80157ca:	f7eb f9c5 	bl	8000b58 <__aeabi_dcmpgt>
 80157ce:	2800      	cmp	r0, #0
 80157d0:	f040 8296 	bne.w	8015d00 <_dtoa_r+0x990>
 80157d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80157d8:	4640      	mov	r0, r8
 80157da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80157de:	4649      	mov	r1, r9
 80157e0:	f7eb f99c 	bl	8000b1c <__aeabi_dcmplt>
 80157e4:	2800      	cmp	r0, #0
 80157e6:	f040 8289 	bne.w	8015cfc <_dtoa_r+0x98c>
 80157ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80157ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	f2c0 814e 	blt.w	8015a92 <_dtoa_r+0x722>
 80157f6:	f1bb 0f0e 	cmp.w	fp, #14
 80157fa:	f300 814a 	bgt.w	8015a92 <_dtoa_r+0x722>
 80157fe:	4b6b      	ldr	r3, [pc, #428]	; (80159ac <_dtoa_r+0x63c>)
 8015800:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015804:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801580a:	2b00      	cmp	r3, #0
 801580c:	f280 80dc 	bge.w	80159c8 <_dtoa_r+0x658>
 8015810:	9b04      	ldr	r3, [sp, #16]
 8015812:	2b00      	cmp	r3, #0
 8015814:	f300 80d8 	bgt.w	80159c8 <_dtoa_r+0x658>
 8015818:	f040 826f 	bne.w	8015cfa <_dtoa_r+0x98a>
 801581c:	4b68      	ldr	r3, [pc, #416]	; (80159c0 <_dtoa_r+0x650>)
 801581e:	2200      	movs	r2, #0
 8015820:	4640      	mov	r0, r8
 8015822:	4649      	mov	r1, r9
 8015824:	f7ea ff08 	bl	8000638 <__aeabi_dmul>
 8015828:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801582c:	f7eb f98a 	bl	8000b44 <__aeabi_dcmpge>
 8015830:	9e04      	ldr	r6, [sp, #16]
 8015832:	4637      	mov	r7, r6
 8015834:	2800      	cmp	r0, #0
 8015836:	f040 8245 	bne.w	8015cc4 <_dtoa_r+0x954>
 801583a:	9d00      	ldr	r5, [sp, #0]
 801583c:	2331      	movs	r3, #49	; 0x31
 801583e:	f805 3b01 	strb.w	r3, [r5], #1
 8015842:	f10b 0b01 	add.w	fp, fp, #1
 8015846:	e241      	b.n	8015ccc <_dtoa_r+0x95c>
 8015848:	07f2      	lsls	r2, r6, #31
 801584a:	d505      	bpl.n	8015858 <_dtoa_r+0x4e8>
 801584c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015850:	f7ea fef2 	bl	8000638 <__aeabi_dmul>
 8015854:	3501      	adds	r5, #1
 8015856:	2301      	movs	r3, #1
 8015858:	1076      	asrs	r6, r6, #1
 801585a:	3708      	adds	r7, #8
 801585c:	e773      	b.n	8015746 <_dtoa_r+0x3d6>
 801585e:	2502      	movs	r5, #2
 8015860:	e775      	b.n	801574e <_dtoa_r+0x3de>
 8015862:	9e04      	ldr	r6, [sp, #16]
 8015864:	465f      	mov	r7, fp
 8015866:	e792      	b.n	801578e <_dtoa_r+0x41e>
 8015868:	9900      	ldr	r1, [sp, #0]
 801586a:	4b50      	ldr	r3, [pc, #320]	; (80159ac <_dtoa_r+0x63c>)
 801586c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015870:	4431      	add	r1, r6
 8015872:	9102      	str	r1, [sp, #8]
 8015874:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015876:	eeb0 9a47 	vmov.f32	s18, s14
 801587a:	eef0 9a67 	vmov.f32	s19, s15
 801587e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015882:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015886:	2900      	cmp	r1, #0
 8015888:	d044      	beq.n	8015914 <_dtoa_r+0x5a4>
 801588a:	494e      	ldr	r1, [pc, #312]	; (80159c4 <_dtoa_r+0x654>)
 801588c:	2000      	movs	r0, #0
 801588e:	f7ea fffd 	bl	800088c <__aeabi_ddiv>
 8015892:	ec53 2b19 	vmov	r2, r3, d9
 8015896:	f7ea fd17 	bl	80002c8 <__aeabi_dsub>
 801589a:	9d00      	ldr	r5, [sp, #0]
 801589c:	ec41 0b19 	vmov	d9, r0, r1
 80158a0:	4649      	mov	r1, r9
 80158a2:	4640      	mov	r0, r8
 80158a4:	f7eb f978 	bl	8000b98 <__aeabi_d2iz>
 80158a8:	4606      	mov	r6, r0
 80158aa:	f7ea fe5b 	bl	8000564 <__aeabi_i2d>
 80158ae:	4602      	mov	r2, r0
 80158b0:	460b      	mov	r3, r1
 80158b2:	4640      	mov	r0, r8
 80158b4:	4649      	mov	r1, r9
 80158b6:	f7ea fd07 	bl	80002c8 <__aeabi_dsub>
 80158ba:	3630      	adds	r6, #48	; 0x30
 80158bc:	f805 6b01 	strb.w	r6, [r5], #1
 80158c0:	ec53 2b19 	vmov	r2, r3, d9
 80158c4:	4680      	mov	r8, r0
 80158c6:	4689      	mov	r9, r1
 80158c8:	f7eb f928 	bl	8000b1c <__aeabi_dcmplt>
 80158cc:	2800      	cmp	r0, #0
 80158ce:	d164      	bne.n	801599a <_dtoa_r+0x62a>
 80158d0:	4642      	mov	r2, r8
 80158d2:	464b      	mov	r3, r9
 80158d4:	4937      	ldr	r1, [pc, #220]	; (80159b4 <_dtoa_r+0x644>)
 80158d6:	2000      	movs	r0, #0
 80158d8:	f7ea fcf6 	bl	80002c8 <__aeabi_dsub>
 80158dc:	ec53 2b19 	vmov	r2, r3, d9
 80158e0:	f7eb f91c 	bl	8000b1c <__aeabi_dcmplt>
 80158e4:	2800      	cmp	r0, #0
 80158e6:	f040 80b6 	bne.w	8015a56 <_dtoa_r+0x6e6>
 80158ea:	9b02      	ldr	r3, [sp, #8]
 80158ec:	429d      	cmp	r5, r3
 80158ee:	f43f af7c 	beq.w	80157ea <_dtoa_r+0x47a>
 80158f2:	4b31      	ldr	r3, [pc, #196]	; (80159b8 <_dtoa_r+0x648>)
 80158f4:	ec51 0b19 	vmov	r0, r1, d9
 80158f8:	2200      	movs	r2, #0
 80158fa:	f7ea fe9d 	bl	8000638 <__aeabi_dmul>
 80158fe:	4b2e      	ldr	r3, [pc, #184]	; (80159b8 <_dtoa_r+0x648>)
 8015900:	ec41 0b19 	vmov	d9, r0, r1
 8015904:	2200      	movs	r2, #0
 8015906:	4640      	mov	r0, r8
 8015908:	4649      	mov	r1, r9
 801590a:	f7ea fe95 	bl	8000638 <__aeabi_dmul>
 801590e:	4680      	mov	r8, r0
 8015910:	4689      	mov	r9, r1
 8015912:	e7c5      	b.n	80158a0 <_dtoa_r+0x530>
 8015914:	ec51 0b17 	vmov	r0, r1, d7
 8015918:	f7ea fe8e 	bl	8000638 <__aeabi_dmul>
 801591c:	9b02      	ldr	r3, [sp, #8]
 801591e:	9d00      	ldr	r5, [sp, #0]
 8015920:	930f      	str	r3, [sp, #60]	; 0x3c
 8015922:	ec41 0b19 	vmov	d9, r0, r1
 8015926:	4649      	mov	r1, r9
 8015928:	4640      	mov	r0, r8
 801592a:	f7eb f935 	bl	8000b98 <__aeabi_d2iz>
 801592e:	4606      	mov	r6, r0
 8015930:	f7ea fe18 	bl	8000564 <__aeabi_i2d>
 8015934:	3630      	adds	r6, #48	; 0x30
 8015936:	4602      	mov	r2, r0
 8015938:	460b      	mov	r3, r1
 801593a:	4640      	mov	r0, r8
 801593c:	4649      	mov	r1, r9
 801593e:	f7ea fcc3 	bl	80002c8 <__aeabi_dsub>
 8015942:	f805 6b01 	strb.w	r6, [r5], #1
 8015946:	9b02      	ldr	r3, [sp, #8]
 8015948:	429d      	cmp	r5, r3
 801594a:	4680      	mov	r8, r0
 801594c:	4689      	mov	r9, r1
 801594e:	f04f 0200 	mov.w	r2, #0
 8015952:	d124      	bne.n	801599e <_dtoa_r+0x62e>
 8015954:	4b1b      	ldr	r3, [pc, #108]	; (80159c4 <_dtoa_r+0x654>)
 8015956:	ec51 0b19 	vmov	r0, r1, d9
 801595a:	f7ea fcb7 	bl	80002cc <__adddf3>
 801595e:	4602      	mov	r2, r0
 8015960:	460b      	mov	r3, r1
 8015962:	4640      	mov	r0, r8
 8015964:	4649      	mov	r1, r9
 8015966:	f7eb f8f7 	bl	8000b58 <__aeabi_dcmpgt>
 801596a:	2800      	cmp	r0, #0
 801596c:	d173      	bne.n	8015a56 <_dtoa_r+0x6e6>
 801596e:	ec53 2b19 	vmov	r2, r3, d9
 8015972:	4914      	ldr	r1, [pc, #80]	; (80159c4 <_dtoa_r+0x654>)
 8015974:	2000      	movs	r0, #0
 8015976:	f7ea fca7 	bl	80002c8 <__aeabi_dsub>
 801597a:	4602      	mov	r2, r0
 801597c:	460b      	mov	r3, r1
 801597e:	4640      	mov	r0, r8
 8015980:	4649      	mov	r1, r9
 8015982:	f7eb f8cb 	bl	8000b1c <__aeabi_dcmplt>
 8015986:	2800      	cmp	r0, #0
 8015988:	f43f af2f 	beq.w	80157ea <_dtoa_r+0x47a>
 801598c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801598e:	1e6b      	subs	r3, r5, #1
 8015990:	930f      	str	r3, [sp, #60]	; 0x3c
 8015992:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015996:	2b30      	cmp	r3, #48	; 0x30
 8015998:	d0f8      	beq.n	801598c <_dtoa_r+0x61c>
 801599a:	46bb      	mov	fp, r7
 801599c:	e04a      	b.n	8015a34 <_dtoa_r+0x6c4>
 801599e:	4b06      	ldr	r3, [pc, #24]	; (80159b8 <_dtoa_r+0x648>)
 80159a0:	f7ea fe4a 	bl	8000638 <__aeabi_dmul>
 80159a4:	4680      	mov	r8, r0
 80159a6:	4689      	mov	r9, r1
 80159a8:	e7bd      	b.n	8015926 <_dtoa_r+0x5b6>
 80159aa:	bf00      	nop
 80159ac:	0801b060 	.word	0x0801b060
 80159b0:	0801b038 	.word	0x0801b038
 80159b4:	3ff00000 	.word	0x3ff00000
 80159b8:	40240000 	.word	0x40240000
 80159bc:	401c0000 	.word	0x401c0000
 80159c0:	40140000 	.word	0x40140000
 80159c4:	3fe00000 	.word	0x3fe00000
 80159c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80159cc:	9d00      	ldr	r5, [sp, #0]
 80159ce:	4642      	mov	r2, r8
 80159d0:	464b      	mov	r3, r9
 80159d2:	4630      	mov	r0, r6
 80159d4:	4639      	mov	r1, r7
 80159d6:	f7ea ff59 	bl	800088c <__aeabi_ddiv>
 80159da:	f7eb f8dd 	bl	8000b98 <__aeabi_d2iz>
 80159de:	9001      	str	r0, [sp, #4]
 80159e0:	f7ea fdc0 	bl	8000564 <__aeabi_i2d>
 80159e4:	4642      	mov	r2, r8
 80159e6:	464b      	mov	r3, r9
 80159e8:	f7ea fe26 	bl	8000638 <__aeabi_dmul>
 80159ec:	4602      	mov	r2, r0
 80159ee:	460b      	mov	r3, r1
 80159f0:	4630      	mov	r0, r6
 80159f2:	4639      	mov	r1, r7
 80159f4:	f7ea fc68 	bl	80002c8 <__aeabi_dsub>
 80159f8:	9e01      	ldr	r6, [sp, #4]
 80159fa:	9f04      	ldr	r7, [sp, #16]
 80159fc:	3630      	adds	r6, #48	; 0x30
 80159fe:	f805 6b01 	strb.w	r6, [r5], #1
 8015a02:	9e00      	ldr	r6, [sp, #0]
 8015a04:	1bae      	subs	r6, r5, r6
 8015a06:	42b7      	cmp	r7, r6
 8015a08:	4602      	mov	r2, r0
 8015a0a:	460b      	mov	r3, r1
 8015a0c:	d134      	bne.n	8015a78 <_dtoa_r+0x708>
 8015a0e:	f7ea fc5d 	bl	80002cc <__adddf3>
 8015a12:	4642      	mov	r2, r8
 8015a14:	464b      	mov	r3, r9
 8015a16:	4606      	mov	r6, r0
 8015a18:	460f      	mov	r7, r1
 8015a1a:	f7eb f89d 	bl	8000b58 <__aeabi_dcmpgt>
 8015a1e:	b9c8      	cbnz	r0, 8015a54 <_dtoa_r+0x6e4>
 8015a20:	4642      	mov	r2, r8
 8015a22:	464b      	mov	r3, r9
 8015a24:	4630      	mov	r0, r6
 8015a26:	4639      	mov	r1, r7
 8015a28:	f7eb f86e 	bl	8000b08 <__aeabi_dcmpeq>
 8015a2c:	b110      	cbz	r0, 8015a34 <_dtoa_r+0x6c4>
 8015a2e:	9b01      	ldr	r3, [sp, #4]
 8015a30:	07db      	lsls	r3, r3, #31
 8015a32:	d40f      	bmi.n	8015a54 <_dtoa_r+0x6e4>
 8015a34:	4651      	mov	r1, sl
 8015a36:	4620      	mov	r0, r4
 8015a38:	f000 fe82 	bl	8016740 <_Bfree>
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015a40:	702b      	strb	r3, [r5, #0]
 8015a42:	f10b 0301 	add.w	r3, fp, #1
 8015a46:	6013      	str	r3, [r2, #0]
 8015a48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	f43f ace2 	beq.w	8015414 <_dtoa_r+0xa4>
 8015a50:	601d      	str	r5, [r3, #0]
 8015a52:	e4df      	b.n	8015414 <_dtoa_r+0xa4>
 8015a54:	465f      	mov	r7, fp
 8015a56:	462b      	mov	r3, r5
 8015a58:	461d      	mov	r5, r3
 8015a5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015a5e:	2a39      	cmp	r2, #57	; 0x39
 8015a60:	d106      	bne.n	8015a70 <_dtoa_r+0x700>
 8015a62:	9a00      	ldr	r2, [sp, #0]
 8015a64:	429a      	cmp	r2, r3
 8015a66:	d1f7      	bne.n	8015a58 <_dtoa_r+0x6e8>
 8015a68:	9900      	ldr	r1, [sp, #0]
 8015a6a:	2230      	movs	r2, #48	; 0x30
 8015a6c:	3701      	adds	r7, #1
 8015a6e:	700a      	strb	r2, [r1, #0]
 8015a70:	781a      	ldrb	r2, [r3, #0]
 8015a72:	3201      	adds	r2, #1
 8015a74:	701a      	strb	r2, [r3, #0]
 8015a76:	e790      	b.n	801599a <_dtoa_r+0x62a>
 8015a78:	4ba3      	ldr	r3, [pc, #652]	; (8015d08 <_dtoa_r+0x998>)
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	f7ea fddc 	bl	8000638 <__aeabi_dmul>
 8015a80:	2200      	movs	r2, #0
 8015a82:	2300      	movs	r3, #0
 8015a84:	4606      	mov	r6, r0
 8015a86:	460f      	mov	r7, r1
 8015a88:	f7eb f83e 	bl	8000b08 <__aeabi_dcmpeq>
 8015a8c:	2800      	cmp	r0, #0
 8015a8e:	d09e      	beq.n	80159ce <_dtoa_r+0x65e>
 8015a90:	e7d0      	b.n	8015a34 <_dtoa_r+0x6c4>
 8015a92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a94:	2a00      	cmp	r2, #0
 8015a96:	f000 80ca 	beq.w	8015c2e <_dtoa_r+0x8be>
 8015a9a:	9a07      	ldr	r2, [sp, #28]
 8015a9c:	2a01      	cmp	r2, #1
 8015a9e:	f300 80ad 	bgt.w	8015bfc <_dtoa_r+0x88c>
 8015aa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015aa4:	2a00      	cmp	r2, #0
 8015aa6:	f000 80a5 	beq.w	8015bf4 <_dtoa_r+0x884>
 8015aaa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015aae:	9e08      	ldr	r6, [sp, #32]
 8015ab0:	9d05      	ldr	r5, [sp, #20]
 8015ab2:	9a05      	ldr	r2, [sp, #20]
 8015ab4:	441a      	add	r2, r3
 8015ab6:	9205      	str	r2, [sp, #20]
 8015ab8:	9a06      	ldr	r2, [sp, #24]
 8015aba:	2101      	movs	r1, #1
 8015abc:	441a      	add	r2, r3
 8015abe:	4620      	mov	r0, r4
 8015ac0:	9206      	str	r2, [sp, #24]
 8015ac2:	f000 ff3d 	bl	8016940 <__i2b>
 8015ac6:	4607      	mov	r7, r0
 8015ac8:	b165      	cbz	r5, 8015ae4 <_dtoa_r+0x774>
 8015aca:	9b06      	ldr	r3, [sp, #24]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	dd09      	ble.n	8015ae4 <_dtoa_r+0x774>
 8015ad0:	42ab      	cmp	r3, r5
 8015ad2:	9a05      	ldr	r2, [sp, #20]
 8015ad4:	bfa8      	it	ge
 8015ad6:	462b      	movge	r3, r5
 8015ad8:	1ad2      	subs	r2, r2, r3
 8015ada:	9205      	str	r2, [sp, #20]
 8015adc:	9a06      	ldr	r2, [sp, #24]
 8015ade:	1aed      	subs	r5, r5, r3
 8015ae0:	1ad3      	subs	r3, r2, r3
 8015ae2:	9306      	str	r3, [sp, #24]
 8015ae4:	9b08      	ldr	r3, [sp, #32]
 8015ae6:	b1f3      	cbz	r3, 8015b26 <_dtoa_r+0x7b6>
 8015ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	f000 80a3 	beq.w	8015c36 <_dtoa_r+0x8c6>
 8015af0:	2e00      	cmp	r6, #0
 8015af2:	dd10      	ble.n	8015b16 <_dtoa_r+0x7a6>
 8015af4:	4639      	mov	r1, r7
 8015af6:	4632      	mov	r2, r6
 8015af8:	4620      	mov	r0, r4
 8015afa:	f000 ffe1 	bl	8016ac0 <__pow5mult>
 8015afe:	4652      	mov	r2, sl
 8015b00:	4601      	mov	r1, r0
 8015b02:	4607      	mov	r7, r0
 8015b04:	4620      	mov	r0, r4
 8015b06:	f000 ff31 	bl	801696c <__multiply>
 8015b0a:	4651      	mov	r1, sl
 8015b0c:	4680      	mov	r8, r0
 8015b0e:	4620      	mov	r0, r4
 8015b10:	f000 fe16 	bl	8016740 <_Bfree>
 8015b14:	46c2      	mov	sl, r8
 8015b16:	9b08      	ldr	r3, [sp, #32]
 8015b18:	1b9a      	subs	r2, r3, r6
 8015b1a:	d004      	beq.n	8015b26 <_dtoa_r+0x7b6>
 8015b1c:	4651      	mov	r1, sl
 8015b1e:	4620      	mov	r0, r4
 8015b20:	f000 ffce 	bl	8016ac0 <__pow5mult>
 8015b24:	4682      	mov	sl, r0
 8015b26:	2101      	movs	r1, #1
 8015b28:	4620      	mov	r0, r4
 8015b2a:	f000 ff09 	bl	8016940 <__i2b>
 8015b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	4606      	mov	r6, r0
 8015b34:	f340 8081 	ble.w	8015c3a <_dtoa_r+0x8ca>
 8015b38:	461a      	mov	r2, r3
 8015b3a:	4601      	mov	r1, r0
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	f000 ffbf 	bl	8016ac0 <__pow5mult>
 8015b42:	9b07      	ldr	r3, [sp, #28]
 8015b44:	2b01      	cmp	r3, #1
 8015b46:	4606      	mov	r6, r0
 8015b48:	dd7a      	ble.n	8015c40 <_dtoa_r+0x8d0>
 8015b4a:	f04f 0800 	mov.w	r8, #0
 8015b4e:	6933      	ldr	r3, [r6, #16]
 8015b50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015b54:	6918      	ldr	r0, [r3, #16]
 8015b56:	f000 fea5 	bl	80168a4 <__hi0bits>
 8015b5a:	f1c0 0020 	rsb	r0, r0, #32
 8015b5e:	9b06      	ldr	r3, [sp, #24]
 8015b60:	4418      	add	r0, r3
 8015b62:	f010 001f 	ands.w	r0, r0, #31
 8015b66:	f000 8094 	beq.w	8015c92 <_dtoa_r+0x922>
 8015b6a:	f1c0 0320 	rsb	r3, r0, #32
 8015b6e:	2b04      	cmp	r3, #4
 8015b70:	f340 8085 	ble.w	8015c7e <_dtoa_r+0x90e>
 8015b74:	9b05      	ldr	r3, [sp, #20]
 8015b76:	f1c0 001c 	rsb	r0, r0, #28
 8015b7a:	4403      	add	r3, r0
 8015b7c:	9305      	str	r3, [sp, #20]
 8015b7e:	9b06      	ldr	r3, [sp, #24]
 8015b80:	4403      	add	r3, r0
 8015b82:	4405      	add	r5, r0
 8015b84:	9306      	str	r3, [sp, #24]
 8015b86:	9b05      	ldr	r3, [sp, #20]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	dd05      	ble.n	8015b98 <_dtoa_r+0x828>
 8015b8c:	4651      	mov	r1, sl
 8015b8e:	461a      	mov	r2, r3
 8015b90:	4620      	mov	r0, r4
 8015b92:	f000 ffef 	bl	8016b74 <__lshift>
 8015b96:	4682      	mov	sl, r0
 8015b98:	9b06      	ldr	r3, [sp, #24]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	dd05      	ble.n	8015baa <_dtoa_r+0x83a>
 8015b9e:	4631      	mov	r1, r6
 8015ba0:	461a      	mov	r2, r3
 8015ba2:	4620      	mov	r0, r4
 8015ba4:	f000 ffe6 	bl	8016b74 <__lshift>
 8015ba8:	4606      	mov	r6, r0
 8015baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d072      	beq.n	8015c96 <_dtoa_r+0x926>
 8015bb0:	4631      	mov	r1, r6
 8015bb2:	4650      	mov	r0, sl
 8015bb4:	f001 f84a 	bl	8016c4c <__mcmp>
 8015bb8:	2800      	cmp	r0, #0
 8015bba:	da6c      	bge.n	8015c96 <_dtoa_r+0x926>
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	4651      	mov	r1, sl
 8015bc0:	220a      	movs	r2, #10
 8015bc2:	4620      	mov	r0, r4
 8015bc4:	f000 fdde 	bl	8016784 <__multadd>
 8015bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015bce:	4682      	mov	sl, r0
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	f000 81b0 	beq.w	8015f36 <_dtoa_r+0xbc6>
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	4639      	mov	r1, r7
 8015bda:	220a      	movs	r2, #10
 8015bdc:	4620      	mov	r0, r4
 8015bde:	f000 fdd1 	bl	8016784 <__multadd>
 8015be2:	9b01      	ldr	r3, [sp, #4]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	4607      	mov	r7, r0
 8015be8:	f300 8096 	bgt.w	8015d18 <_dtoa_r+0x9a8>
 8015bec:	9b07      	ldr	r3, [sp, #28]
 8015bee:	2b02      	cmp	r3, #2
 8015bf0:	dc59      	bgt.n	8015ca6 <_dtoa_r+0x936>
 8015bf2:	e091      	b.n	8015d18 <_dtoa_r+0x9a8>
 8015bf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015bf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015bfa:	e758      	b.n	8015aae <_dtoa_r+0x73e>
 8015bfc:	9b04      	ldr	r3, [sp, #16]
 8015bfe:	1e5e      	subs	r6, r3, #1
 8015c00:	9b08      	ldr	r3, [sp, #32]
 8015c02:	42b3      	cmp	r3, r6
 8015c04:	bfbf      	itttt	lt
 8015c06:	9b08      	ldrlt	r3, [sp, #32]
 8015c08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8015c0a:	9608      	strlt	r6, [sp, #32]
 8015c0c:	1af3      	sublt	r3, r6, r3
 8015c0e:	bfb4      	ite	lt
 8015c10:	18d2      	addlt	r2, r2, r3
 8015c12:	1b9e      	subge	r6, r3, r6
 8015c14:	9b04      	ldr	r3, [sp, #16]
 8015c16:	bfbc      	itt	lt
 8015c18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8015c1a:	2600      	movlt	r6, #0
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	bfb7      	itett	lt
 8015c20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8015c24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015c28:	1a9d      	sublt	r5, r3, r2
 8015c2a:	2300      	movlt	r3, #0
 8015c2c:	e741      	b.n	8015ab2 <_dtoa_r+0x742>
 8015c2e:	9e08      	ldr	r6, [sp, #32]
 8015c30:	9d05      	ldr	r5, [sp, #20]
 8015c32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015c34:	e748      	b.n	8015ac8 <_dtoa_r+0x758>
 8015c36:	9a08      	ldr	r2, [sp, #32]
 8015c38:	e770      	b.n	8015b1c <_dtoa_r+0x7ac>
 8015c3a:	9b07      	ldr	r3, [sp, #28]
 8015c3c:	2b01      	cmp	r3, #1
 8015c3e:	dc19      	bgt.n	8015c74 <_dtoa_r+0x904>
 8015c40:	9b02      	ldr	r3, [sp, #8]
 8015c42:	b9bb      	cbnz	r3, 8015c74 <_dtoa_r+0x904>
 8015c44:	9b03      	ldr	r3, [sp, #12]
 8015c46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015c4a:	b99b      	cbnz	r3, 8015c74 <_dtoa_r+0x904>
 8015c4c:	9b03      	ldr	r3, [sp, #12]
 8015c4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015c52:	0d1b      	lsrs	r3, r3, #20
 8015c54:	051b      	lsls	r3, r3, #20
 8015c56:	b183      	cbz	r3, 8015c7a <_dtoa_r+0x90a>
 8015c58:	9b05      	ldr	r3, [sp, #20]
 8015c5a:	3301      	adds	r3, #1
 8015c5c:	9305      	str	r3, [sp, #20]
 8015c5e:	9b06      	ldr	r3, [sp, #24]
 8015c60:	3301      	adds	r3, #1
 8015c62:	9306      	str	r3, [sp, #24]
 8015c64:	f04f 0801 	mov.w	r8, #1
 8015c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	f47f af6f 	bne.w	8015b4e <_dtoa_r+0x7de>
 8015c70:	2001      	movs	r0, #1
 8015c72:	e774      	b.n	8015b5e <_dtoa_r+0x7ee>
 8015c74:	f04f 0800 	mov.w	r8, #0
 8015c78:	e7f6      	b.n	8015c68 <_dtoa_r+0x8f8>
 8015c7a:	4698      	mov	r8, r3
 8015c7c:	e7f4      	b.n	8015c68 <_dtoa_r+0x8f8>
 8015c7e:	d082      	beq.n	8015b86 <_dtoa_r+0x816>
 8015c80:	9a05      	ldr	r2, [sp, #20]
 8015c82:	331c      	adds	r3, #28
 8015c84:	441a      	add	r2, r3
 8015c86:	9205      	str	r2, [sp, #20]
 8015c88:	9a06      	ldr	r2, [sp, #24]
 8015c8a:	441a      	add	r2, r3
 8015c8c:	441d      	add	r5, r3
 8015c8e:	9206      	str	r2, [sp, #24]
 8015c90:	e779      	b.n	8015b86 <_dtoa_r+0x816>
 8015c92:	4603      	mov	r3, r0
 8015c94:	e7f4      	b.n	8015c80 <_dtoa_r+0x910>
 8015c96:	9b04      	ldr	r3, [sp, #16]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	dc37      	bgt.n	8015d0c <_dtoa_r+0x99c>
 8015c9c:	9b07      	ldr	r3, [sp, #28]
 8015c9e:	2b02      	cmp	r3, #2
 8015ca0:	dd34      	ble.n	8015d0c <_dtoa_r+0x99c>
 8015ca2:	9b04      	ldr	r3, [sp, #16]
 8015ca4:	9301      	str	r3, [sp, #4]
 8015ca6:	9b01      	ldr	r3, [sp, #4]
 8015ca8:	b963      	cbnz	r3, 8015cc4 <_dtoa_r+0x954>
 8015caa:	4631      	mov	r1, r6
 8015cac:	2205      	movs	r2, #5
 8015cae:	4620      	mov	r0, r4
 8015cb0:	f000 fd68 	bl	8016784 <__multadd>
 8015cb4:	4601      	mov	r1, r0
 8015cb6:	4606      	mov	r6, r0
 8015cb8:	4650      	mov	r0, sl
 8015cba:	f000 ffc7 	bl	8016c4c <__mcmp>
 8015cbe:	2800      	cmp	r0, #0
 8015cc0:	f73f adbb 	bgt.w	801583a <_dtoa_r+0x4ca>
 8015cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cc6:	9d00      	ldr	r5, [sp, #0]
 8015cc8:	ea6f 0b03 	mvn.w	fp, r3
 8015ccc:	f04f 0800 	mov.w	r8, #0
 8015cd0:	4631      	mov	r1, r6
 8015cd2:	4620      	mov	r0, r4
 8015cd4:	f000 fd34 	bl	8016740 <_Bfree>
 8015cd8:	2f00      	cmp	r7, #0
 8015cda:	f43f aeab 	beq.w	8015a34 <_dtoa_r+0x6c4>
 8015cde:	f1b8 0f00 	cmp.w	r8, #0
 8015ce2:	d005      	beq.n	8015cf0 <_dtoa_r+0x980>
 8015ce4:	45b8      	cmp	r8, r7
 8015ce6:	d003      	beq.n	8015cf0 <_dtoa_r+0x980>
 8015ce8:	4641      	mov	r1, r8
 8015cea:	4620      	mov	r0, r4
 8015cec:	f000 fd28 	bl	8016740 <_Bfree>
 8015cf0:	4639      	mov	r1, r7
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	f000 fd24 	bl	8016740 <_Bfree>
 8015cf8:	e69c      	b.n	8015a34 <_dtoa_r+0x6c4>
 8015cfa:	2600      	movs	r6, #0
 8015cfc:	4637      	mov	r7, r6
 8015cfe:	e7e1      	b.n	8015cc4 <_dtoa_r+0x954>
 8015d00:	46bb      	mov	fp, r7
 8015d02:	4637      	mov	r7, r6
 8015d04:	e599      	b.n	801583a <_dtoa_r+0x4ca>
 8015d06:	bf00      	nop
 8015d08:	40240000 	.word	0x40240000
 8015d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	f000 80c8 	beq.w	8015ea4 <_dtoa_r+0xb34>
 8015d14:	9b04      	ldr	r3, [sp, #16]
 8015d16:	9301      	str	r3, [sp, #4]
 8015d18:	2d00      	cmp	r5, #0
 8015d1a:	dd05      	ble.n	8015d28 <_dtoa_r+0x9b8>
 8015d1c:	4639      	mov	r1, r7
 8015d1e:	462a      	mov	r2, r5
 8015d20:	4620      	mov	r0, r4
 8015d22:	f000 ff27 	bl	8016b74 <__lshift>
 8015d26:	4607      	mov	r7, r0
 8015d28:	f1b8 0f00 	cmp.w	r8, #0
 8015d2c:	d05b      	beq.n	8015de6 <_dtoa_r+0xa76>
 8015d2e:	6879      	ldr	r1, [r7, #4]
 8015d30:	4620      	mov	r0, r4
 8015d32:	f000 fcc5 	bl	80166c0 <_Balloc>
 8015d36:	4605      	mov	r5, r0
 8015d38:	b928      	cbnz	r0, 8015d46 <_dtoa_r+0x9d6>
 8015d3a:	4b83      	ldr	r3, [pc, #524]	; (8015f48 <_dtoa_r+0xbd8>)
 8015d3c:	4602      	mov	r2, r0
 8015d3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8015d42:	f7ff bb2e 	b.w	80153a2 <_dtoa_r+0x32>
 8015d46:	693a      	ldr	r2, [r7, #16]
 8015d48:	3202      	adds	r2, #2
 8015d4a:	0092      	lsls	r2, r2, #2
 8015d4c:	f107 010c 	add.w	r1, r7, #12
 8015d50:	300c      	adds	r0, #12
 8015d52:	f7ff fa48 	bl	80151e6 <memcpy>
 8015d56:	2201      	movs	r2, #1
 8015d58:	4629      	mov	r1, r5
 8015d5a:	4620      	mov	r0, r4
 8015d5c:	f000 ff0a 	bl	8016b74 <__lshift>
 8015d60:	9b00      	ldr	r3, [sp, #0]
 8015d62:	3301      	adds	r3, #1
 8015d64:	9304      	str	r3, [sp, #16]
 8015d66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015d6a:	4413      	add	r3, r2
 8015d6c:	9308      	str	r3, [sp, #32]
 8015d6e:	9b02      	ldr	r3, [sp, #8]
 8015d70:	f003 0301 	and.w	r3, r3, #1
 8015d74:	46b8      	mov	r8, r7
 8015d76:	9306      	str	r3, [sp, #24]
 8015d78:	4607      	mov	r7, r0
 8015d7a:	9b04      	ldr	r3, [sp, #16]
 8015d7c:	4631      	mov	r1, r6
 8015d7e:	3b01      	subs	r3, #1
 8015d80:	4650      	mov	r0, sl
 8015d82:	9301      	str	r3, [sp, #4]
 8015d84:	f7ff fa6c 	bl	8015260 <quorem>
 8015d88:	4641      	mov	r1, r8
 8015d8a:	9002      	str	r0, [sp, #8]
 8015d8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015d90:	4650      	mov	r0, sl
 8015d92:	f000 ff5b 	bl	8016c4c <__mcmp>
 8015d96:	463a      	mov	r2, r7
 8015d98:	9005      	str	r0, [sp, #20]
 8015d9a:	4631      	mov	r1, r6
 8015d9c:	4620      	mov	r0, r4
 8015d9e:	f000 ff71 	bl	8016c84 <__mdiff>
 8015da2:	68c2      	ldr	r2, [r0, #12]
 8015da4:	4605      	mov	r5, r0
 8015da6:	bb02      	cbnz	r2, 8015dea <_dtoa_r+0xa7a>
 8015da8:	4601      	mov	r1, r0
 8015daa:	4650      	mov	r0, sl
 8015dac:	f000 ff4e 	bl	8016c4c <__mcmp>
 8015db0:	4602      	mov	r2, r0
 8015db2:	4629      	mov	r1, r5
 8015db4:	4620      	mov	r0, r4
 8015db6:	9209      	str	r2, [sp, #36]	; 0x24
 8015db8:	f000 fcc2 	bl	8016740 <_Bfree>
 8015dbc:	9b07      	ldr	r3, [sp, #28]
 8015dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015dc0:	9d04      	ldr	r5, [sp, #16]
 8015dc2:	ea43 0102 	orr.w	r1, r3, r2
 8015dc6:	9b06      	ldr	r3, [sp, #24]
 8015dc8:	4319      	orrs	r1, r3
 8015dca:	d110      	bne.n	8015dee <_dtoa_r+0xa7e>
 8015dcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015dd0:	d029      	beq.n	8015e26 <_dtoa_r+0xab6>
 8015dd2:	9b05      	ldr	r3, [sp, #20]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	dd02      	ble.n	8015dde <_dtoa_r+0xa6e>
 8015dd8:	9b02      	ldr	r3, [sp, #8]
 8015dda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8015dde:	9b01      	ldr	r3, [sp, #4]
 8015de0:	f883 9000 	strb.w	r9, [r3]
 8015de4:	e774      	b.n	8015cd0 <_dtoa_r+0x960>
 8015de6:	4638      	mov	r0, r7
 8015de8:	e7ba      	b.n	8015d60 <_dtoa_r+0x9f0>
 8015dea:	2201      	movs	r2, #1
 8015dec:	e7e1      	b.n	8015db2 <_dtoa_r+0xa42>
 8015dee:	9b05      	ldr	r3, [sp, #20]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	db04      	blt.n	8015dfe <_dtoa_r+0xa8e>
 8015df4:	9907      	ldr	r1, [sp, #28]
 8015df6:	430b      	orrs	r3, r1
 8015df8:	9906      	ldr	r1, [sp, #24]
 8015dfa:	430b      	orrs	r3, r1
 8015dfc:	d120      	bne.n	8015e40 <_dtoa_r+0xad0>
 8015dfe:	2a00      	cmp	r2, #0
 8015e00:	dded      	ble.n	8015dde <_dtoa_r+0xa6e>
 8015e02:	4651      	mov	r1, sl
 8015e04:	2201      	movs	r2, #1
 8015e06:	4620      	mov	r0, r4
 8015e08:	f000 feb4 	bl	8016b74 <__lshift>
 8015e0c:	4631      	mov	r1, r6
 8015e0e:	4682      	mov	sl, r0
 8015e10:	f000 ff1c 	bl	8016c4c <__mcmp>
 8015e14:	2800      	cmp	r0, #0
 8015e16:	dc03      	bgt.n	8015e20 <_dtoa_r+0xab0>
 8015e18:	d1e1      	bne.n	8015dde <_dtoa_r+0xa6e>
 8015e1a:	f019 0f01 	tst.w	r9, #1
 8015e1e:	d0de      	beq.n	8015dde <_dtoa_r+0xa6e>
 8015e20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015e24:	d1d8      	bne.n	8015dd8 <_dtoa_r+0xa68>
 8015e26:	9a01      	ldr	r2, [sp, #4]
 8015e28:	2339      	movs	r3, #57	; 0x39
 8015e2a:	7013      	strb	r3, [r2, #0]
 8015e2c:	462b      	mov	r3, r5
 8015e2e:	461d      	mov	r5, r3
 8015e30:	3b01      	subs	r3, #1
 8015e32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015e36:	2a39      	cmp	r2, #57	; 0x39
 8015e38:	d06c      	beq.n	8015f14 <_dtoa_r+0xba4>
 8015e3a:	3201      	adds	r2, #1
 8015e3c:	701a      	strb	r2, [r3, #0]
 8015e3e:	e747      	b.n	8015cd0 <_dtoa_r+0x960>
 8015e40:	2a00      	cmp	r2, #0
 8015e42:	dd07      	ble.n	8015e54 <_dtoa_r+0xae4>
 8015e44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015e48:	d0ed      	beq.n	8015e26 <_dtoa_r+0xab6>
 8015e4a:	9a01      	ldr	r2, [sp, #4]
 8015e4c:	f109 0301 	add.w	r3, r9, #1
 8015e50:	7013      	strb	r3, [r2, #0]
 8015e52:	e73d      	b.n	8015cd0 <_dtoa_r+0x960>
 8015e54:	9b04      	ldr	r3, [sp, #16]
 8015e56:	9a08      	ldr	r2, [sp, #32]
 8015e58:	f803 9c01 	strb.w	r9, [r3, #-1]
 8015e5c:	4293      	cmp	r3, r2
 8015e5e:	d043      	beq.n	8015ee8 <_dtoa_r+0xb78>
 8015e60:	4651      	mov	r1, sl
 8015e62:	2300      	movs	r3, #0
 8015e64:	220a      	movs	r2, #10
 8015e66:	4620      	mov	r0, r4
 8015e68:	f000 fc8c 	bl	8016784 <__multadd>
 8015e6c:	45b8      	cmp	r8, r7
 8015e6e:	4682      	mov	sl, r0
 8015e70:	f04f 0300 	mov.w	r3, #0
 8015e74:	f04f 020a 	mov.w	r2, #10
 8015e78:	4641      	mov	r1, r8
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	d107      	bne.n	8015e8e <_dtoa_r+0xb1e>
 8015e7e:	f000 fc81 	bl	8016784 <__multadd>
 8015e82:	4680      	mov	r8, r0
 8015e84:	4607      	mov	r7, r0
 8015e86:	9b04      	ldr	r3, [sp, #16]
 8015e88:	3301      	adds	r3, #1
 8015e8a:	9304      	str	r3, [sp, #16]
 8015e8c:	e775      	b.n	8015d7a <_dtoa_r+0xa0a>
 8015e8e:	f000 fc79 	bl	8016784 <__multadd>
 8015e92:	4639      	mov	r1, r7
 8015e94:	4680      	mov	r8, r0
 8015e96:	2300      	movs	r3, #0
 8015e98:	220a      	movs	r2, #10
 8015e9a:	4620      	mov	r0, r4
 8015e9c:	f000 fc72 	bl	8016784 <__multadd>
 8015ea0:	4607      	mov	r7, r0
 8015ea2:	e7f0      	b.n	8015e86 <_dtoa_r+0xb16>
 8015ea4:	9b04      	ldr	r3, [sp, #16]
 8015ea6:	9301      	str	r3, [sp, #4]
 8015ea8:	9d00      	ldr	r5, [sp, #0]
 8015eaa:	4631      	mov	r1, r6
 8015eac:	4650      	mov	r0, sl
 8015eae:	f7ff f9d7 	bl	8015260 <quorem>
 8015eb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015eb6:	9b00      	ldr	r3, [sp, #0]
 8015eb8:	f805 9b01 	strb.w	r9, [r5], #1
 8015ebc:	1aea      	subs	r2, r5, r3
 8015ebe:	9b01      	ldr	r3, [sp, #4]
 8015ec0:	4293      	cmp	r3, r2
 8015ec2:	dd07      	ble.n	8015ed4 <_dtoa_r+0xb64>
 8015ec4:	4651      	mov	r1, sl
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	220a      	movs	r2, #10
 8015eca:	4620      	mov	r0, r4
 8015ecc:	f000 fc5a 	bl	8016784 <__multadd>
 8015ed0:	4682      	mov	sl, r0
 8015ed2:	e7ea      	b.n	8015eaa <_dtoa_r+0xb3a>
 8015ed4:	9b01      	ldr	r3, [sp, #4]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	bfc8      	it	gt
 8015eda:	461d      	movgt	r5, r3
 8015edc:	9b00      	ldr	r3, [sp, #0]
 8015ede:	bfd8      	it	le
 8015ee0:	2501      	movle	r5, #1
 8015ee2:	441d      	add	r5, r3
 8015ee4:	f04f 0800 	mov.w	r8, #0
 8015ee8:	4651      	mov	r1, sl
 8015eea:	2201      	movs	r2, #1
 8015eec:	4620      	mov	r0, r4
 8015eee:	f000 fe41 	bl	8016b74 <__lshift>
 8015ef2:	4631      	mov	r1, r6
 8015ef4:	4682      	mov	sl, r0
 8015ef6:	f000 fea9 	bl	8016c4c <__mcmp>
 8015efa:	2800      	cmp	r0, #0
 8015efc:	dc96      	bgt.n	8015e2c <_dtoa_r+0xabc>
 8015efe:	d102      	bne.n	8015f06 <_dtoa_r+0xb96>
 8015f00:	f019 0f01 	tst.w	r9, #1
 8015f04:	d192      	bne.n	8015e2c <_dtoa_r+0xabc>
 8015f06:	462b      	mov	r3, r5
 8015f08:	461d      	mov	r5, r3
 8015f0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015f0e:	2a30      	cmp	r2, #48	; 0x30
 8015f10:	d0fa      	beq.n	8015f08 <_dtoa_r+0xb98>
 8015f12:	e6dd      	b.n	8015cd0 <_dtoa_r+0x960>
 8015f14:	9a00      	ldr	r2, [sp, #0]
 8015f16:	429a      	cmp	r2, r3
 8015f18:	d189      	bne.n	8015e2e <_dtoa_r+0xabe>
 8015f1a:	f10b 0b01 	add.w	fp, fp, #1
 8015f1e:	2331      	movs	r3, #49	; 0x31
 8015f20:	e796      	b.n	8015e50 <_dtoa_r+0xae0>
 8015f22:	4b0a      	ldr	r3, [pc, #40]	; (8015f4c <_dtoa_r+0xbdc>)
 8015f24:	f7ff ba99 	b.w	801545a <_dtoa_r+0xea>
 8015f28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	f47f aa6d 	bne.w	801540a <_dtoa_r+0x9a>
 8015f30:	4b07      	ldr	r3, [pc, #28]	; (8015f50 <_dtoa_r+0xbe0>)
 8015f32:	f7ff ba92 	b.w	801545a <_dtoa_r+0xea>
 8015f36:	9b01      	ldr	r3, [sp, #4]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	dcb5      	bgt.n	8015ea8 <_dtoa_r+0xb38>
 8015f3c:	9b07      	ldr	r3, [sp, #28]
 8015f3e:	2b02      	cmp	r3, #2
 8015f40:	f73f aeb1 	bgt.w	8015ca6 <_dtoa_r+0x936>
 8015f44:	e7b0      	b.n	8015ea8 <_dtoa_r+0xb38>
 8015f46:	bf00      	nop
 8015f48:	0801af68 	.word	0x0801af68
 8015f4c:	0801ae41 	.word	0x0801ae41
 8015f50:	0801af03 	.word	0x0801af03

08015f54 <_free_r>:
 8015f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f56:	2900      	cmp	r1, #0
 8015f58:	d044      	beq.n	8015fe4 <_free_r+0x90>
 8015f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f5e:	9001      	str	r0, [sp, #4]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	f1a1 0404 	sub.w	r4, r1, #4
 8015f66:	bfb8      	it	lt
 8015f68:	18e4      	addlt	r4, r4, r3
 8015f6a:	f7fd fa51 	bl	8013410 <__malloc_lock>
 8015f6e:	4a1e      	ldr	r2, [pc, #120]	; (8015fe8 <_free_r+0x94>)
 8015f70:	9801      	ldr	r0, [sp, #4]
 8015f72:	6813      	ldr	r3, [r2, #0]
 8015f74:	b933      	cbnz	r3, 8015f84 <_free_r+0x30>
 8015f76:	6063      	str	r3, [r4, #4]
 8015f78:	6014      	str	r4, [r2, #0]
 8015f7a:	b003      	add	sp, #12
 8015f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f80:	f7fd ba4c 	b.w	801341c <__malloc_unlock>
 8015f84:	42a3      	cmp	r3, r4
 8015f86:	d908      	bls.n	8015f9a <_free_r+0x46>
 8015f88:	6825      	ldr	r5, [r4, #0]
 8015f8a:	1961      	adds	r1, r4, r5
 8015f8c:	428b      	cmp	r3, r1
 8015f8e:	bf01      	itttt	eq
 8015f90:	6819      	ldreq	r1, [r3, #0]
 8015f92:	685b      	ldreq	r3, [r3, #4]
 8015f94:	1949      	addeq	r1, r1, r5
 8015f96:	6021      	streq	r1, [r4, #0]
 8015f98:	e7ed      	b.n	8015f76 <_free_r+0x22>
 8015f9a:	461a      	mov	r2, r3
 8015f9c:	685b      	ldr	r3, [r3, #4]
 8015f9e:	b10b      	cbz	r3, 8015fa4 <_free_r+0x50>
 8015fa0:	42a3      	cmp	r3, r4
 8015fa2:	d9fa      	bls.n	8015f9a <_free_r+0x46>
 8015fa4:	6811      	ldr	r1, [r2, #0]
 8015fa6:	1855      	adds	r5, r2, r1
 8015fa8:	42a5      	cmp	r5, r4
 8015faa:	d10b      	bne.n	8015fc4 <_free_r+0x70>
 8015fac:	6824      	ldr	r4, [r4, #0]
 8015fae:	4421      	add	r1, r4
 8015fb0:	1854      	adds	r4, r2, r1
 8015fb2:	42a3      	cmp	r3, r4
 8015fb4:	6011      	str	r1, [r2, #0]
 8015fb6:	d1e0      	bne.n	8015f7a <_free_r+0x26>
 8015fb8:	681c      	ldr	r4, [r3, #0]
 8015fba:	685b      	ldr	r3, [r3, #4]
 8015fbc:	6053      	str	r3, [r2, #4]
 8015fbe:	440c      	add	r4, r1
 8015fc0:	6014      	str	r4, [r2, #0]
 8015fc2:	e7da      	b.n	8015f7a <_free_r+0x26>
 8015fc4:	d902      	bls.n	8015fcc <_free_r+0x78>
 8015fc6:	230c      	movs	r3, #12
 8015fc8:	6003      	str	r3, [r0, #0]
 8015fca:	e7d6      	b.n	8015f7a <_free_r+0x26>
 8015fcc:	6825      	ldr	r5, [r4, #0]
 8015fce:	1961      	adds	r1, r4, r5
 8015fd0:	428b      	cmp	r3, r1
 8015fd2:	bf04      	itt	eq
 8015fd4:	6819      	ldreq	r1, [r3, #0]
 8015fd6:	685b      	ldreq	r3, [r3, #4]
 8015fd8:	6063      	str	r3, [r4, #4]
 8015fda:	bf04      	itt	eq
 8015fdc:	1949      	addeq	r1, r1, r5
 8015fde:	6021      	streq	r1, [r4, #0]
 8015fe0:	6054      	str	r4, [r2, #4]
 8015fe2:	e7ca      	b.n	8015f7a <_free_r+0x26>
 8015fe4:	b003      	add	sp, #12
 8015fe6:	bd30      	pop	{r4, r5, pc}
 8015fe8:	200009f8 	.word	0x200009f8

08015fec <rshift>:
 8015fec:	6903      	ldr	r3, [r0, #16]
 8015fee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015ff2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ff6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015ffa:	f100 0414 	add.w	r4, r0, #20
 8015ffe:	dd45      	ble.n	801608c <rshift+0xa0>
 8016000:	f011 011f 	ands.w	r1, r1, #31
 8016004:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016008:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801600c:	d10c      	bne.n	8016028 <rshift+0x3c>
 801600e:	f100 0710 	add.w	r7, r0, #16
 8016012:	4629      	mov	r1, r5
 8016014:	42b1      	cmp	r1, r6
 8016016:	d334      	bcc.n	8016082 <rshift+0x96>
 8016018:	1a9b      	subs	r3, r3, r2
 801601a:	009b      	lsls	r3, r3, #2
 801601c:	1eea      	subs	r2, r5, #3
 801601e:	4296      	cmp	r6, r2
 8016020:	bf38      	it	cc
 8016022:	2300      	movcc	r3, #0
 8016024:	4423      	add	r3, r4
 8016026:	e015      	b.n	8016054 <rshift+0x68>
 8016028:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801602c:	f1c1 0820 	rsb	r8, r1, #32
 8016030:	40cf      	lsrs	r7, r1
 8016032:	f105 0e04 	add.w	lr, r5, #4
 8016036:	46a1      	mov	r9, r4
 8016038:	4576      	cmp	r6, lr
 801603a:	46f4      	mov	ip, lr
 801603c:	d815      	bhi.n	801606a <rshift+0x7e>
 801603e:	1a9a      	subs	r2, r3, r2
 8016040:	0092      	lsls	r2, r2, #2
 8016042:	3a04      	subs	r2, #4
 8016044:	3501      	adds	r5, #1
 8016046:	42ae      	cmp	r6, r5
 8016048:	bf38      	it	cc
 801604a:	2200      	movcc	r2, #0
 801604c:	18a3      	adds	r3, r4, r2
 801604e:	50a7      	str	r7, [r4, r2]
 8016050:	b107      	cbz	r7, 8016054 <rshift+0x68>
 8016052:	3304      	adds	r3, #4
 8016054:	1b1a      	subs	r2, r3, r4
 8016056:	42a3      	cmp	r3, r4
 8016058:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801605c:	bf08      	it	eq
 801605e:	2300      	moveq	r3, #0
 8016060:	6102      	str	r2, [r0, #16]
 8016062:	bf08      	it	eq
 8016064:	6143      	streq	r3, [r0, #20]
 8016066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801606a:	f8dc c000 	ldr.w	ip, [ip]
 801606e:	fa0c fc08 	lsl.w	ip, ip, r8
 8016072:	ea4c 0707 	orr.w	r7, ip, r7
 8016076:	f849 7b04 	str.w	r7, [r9], #4
 801607a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801607e:	40cf      	lsrs	r7, r1
 8016080:	e7da      	b.n	8016038 <rshift+0x4c>
 8016082:	f851 cb04 	ldr.w	ip, [r1], #4
 8016086:	f847 cf04 	str.w	ip, [r7, #4]!
 801608a:	e7c3      	b.n	8016014 <rshift+0x28>
 801608c:	4623      	mov	r3, r4
 801608e:	e7e1      	b.n	8016054 <rshift+0x68>

08016090 <__hexdig_fun>:
 8016090:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016094:	2b09      	cmp	r3, #9
 8016096:	d802      	bhi.n	801609e <__hexdig_fun+0xe>
 8016098:	3820      	subs	r0, #32
 801609a:	b2c0      	uxtb	r0, r0
 801609c:	4770      	bx	lr
 801609e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80160a2:	2b05      	cmp	r3, #5
 80160a4:	d801      	bhi.n	80160aa <__hexdig_fun+0x1a>
 80160a6:	3847      	subs	r0, #71	; 0x47
 80160a8:	e7f7      	b.n	801609a <__hexdig_fun+0xa>
 80160aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80160ae:	2b05      	cmp	r3, #5
 80160b0:	d801      	bhi.n	80160b6 <__hexdig_fun+0x26>
 80160b2:	3827      	subs	r0, #39	; 0x27
 80160b4:	e7f1      	b.n	801609a <__hexdig_fun+0xa>
 80160b6:	2000      	movs	r0, #0
 80160b8:	4770      	bx	lr
	...

080160bc <__gethex>:
 80160bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160c0:	4617      	mov	r7, r2
 80160c2:	680a      	ldr	r2, [r1, #0]
 80160c4:	b085      	sub	sp, #20
 80160c6:	f102 0b02 	add.w	fp, r2, #2
 80160ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80160ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80160d2:	4681      	mov	r9, r0
 80160d4:	468a      	mov	sl, r1
 80160d6:	9302      	str	r3, [sp, #8]
 80160d8:	32fe      	adds	r2, #254	; 0xfe
 80160da:	eb02 030b 	add.w	r3, r2, fp
 80160de:	46d8      	mov	r8, fp
 80160e0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80160e4:	9301      	str	r3, [sp, #4]
 80160e6:	2830      	cmp	r0, #48	; 0x30
 80160e8:	d0f7      	beq.n	80160da <__gethex+0x1e>
 80160ea:	f7ff ffd1 	bl	8016090 <__hexdig_fun>
 80160ee:	4604      	mov	r4, r0
 80160f0:	2800      	cmp	r0, #0
 80160f2:	d138      	bne.n	8016166 <__gethex+0xaa>
 80160f4:	49a7      	ldr	r1, [pc, #668]	; (8016394 <__gethex+0x2d8>)
 80160f6:	2201      	movs	r2, #1
 80160f8:	4640      	mov	r0, r8
 80160fa:	f7fe ff6c 	bl	8014fd6 <strncmp>
 80160fe:	4606      	mov	r6, r0
 8016100:	2800      	cmp	r0, #0
 8016102:	d169      	bne.n	80161d8 <__gethex+0x11c>
 8016104:	f898 0001 	ldrb.w	r0, [r8, #1]
 8016108:	465d      	mov	r5, fp
 801610a:	f7ff ffc1 	bl	8016090 <__hexdig_fun>
 801610e:	2800      	cmp	r0, #0
 8016110:	d064      	beq.n	80161dc <__gethex+0x120>
 8016112:	465a      	mov	r2, fp
 8016114:	7810      	ldrb	r0, [r2, #0]
 8016116:	2830      	cmp	r0, #48	; 0x30
 8016118:	4690      	mov	r8, r2
 801611a:	f102 0201 	add.w	r2, r2, #1
 801611e:	d0f9      	beq.n	8016114 <__gethex+0x58>
 8016120:	f7ff ffb6 	bl	8016090 <__hexdig_fun>
 8016124:	2301      	movs	r3, #1
 8016126:	fab0 f480 	clz	r4, r0
 801612a:	0964      	lsrs	r4, r4, #5
 801612c:	465e      	mov	r6, fp
 801612e:	9301      	str	r3, [sp, #4]
 8016130:	4642      	mov	r2, r8
 8016132:	4615      	mov	r5, r2
 8016134:	3201      	adds	r2, #1
 8016136:	7828      	ldrb	r0, [r5, #0]
 8016138:	f7ff ffaa 	bl	8016090 <__hexdig_fun>
 801613c:	2800      	cmp	r0, #0
 801613e:	d1f8      	bne.n	8016132 <__gethex+0x76>
 8016140:	4994      	ldr	r1, [pc, #592]	; (8016394 <__gethex+0x2d8>)
 8016142:	2201      	movs	r2, #1
 8016144:	4628      	mov	r0, r5
 8016146:	f7fe ff46 	bl	8014fd6 <strncmp>
 801614a:	b978      	cbnz	r0, 801616c <__gethex+0xb0>
 801614c:	b946      	cbnz	r6, 8016160 <__gethex+0xa4>
 801614e:	1c6e      	adds	r6, r5, #1
 8016150:	4632      	mov	r2, r6
 8016152:	4615      	mov	r5, r2
 8016154:	3201      	adds	r2, #1
 8016156:	7828      	ldrb	r0, [r5, #0]
 8016158:	f7ff ff9a 	bl	8016090 <__hexdig_fun>
 801615c:	2800      	cmp	r0, #0
 801615e:	d1f8      	bne.n	8016152 <__gethex+0x96>
 8016160:	1b73      	subs	r3, r6, r5
 8016162:	009e      	lsls	r6, r3, #2
 8016164:	e004      	b.n	8016170 <__gethex+0xb4>
 8016166:	2400      	movs	r4, #0
 8016168:	4626      	mov	r6, r4
 801616a:	e7e1      	b.n	8016130 <__gethex+0x74>
 801616c:	2e00      	cmp	r6, #0
 801616e:	d1f7      	bne.n	8016160 <__gethex+0xa4>
 8016170:	782b      	ldrb	r3, [r5, #0]
 8016172:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016176:	2b50      	cmp	r3, #80	; 0x50
 8016178:	d13d      	bne.n	80161f6 <__gethex+0x13a>
 801617a:	786b      	ldrb	r3, [r5, #1]
 801617c:	2b2b      	cmp	r3, #43	; 0x2b
 801617e:	d02f      	beq.n	80161e0 <__gethex+0x124>
 8016180:	2b2d      	cmp	r3, #45	; 0x2d
 8016182:	d031      	beq.n	80161e8 <__gethex+0x12c>
 8016184:	1c69      	adds	r1, r5, #1
 8016186:	f04f 0b00 	mov.w	fp, #0
 801618a:	7808      	ldrb	r0, [r1, #0]
 801618c:	f7ff ff80 	bl	8016090 <__hexdig_fun>
 8016190:	1e42      	subs	r2, r0, #1
 8016192:	b2d2      	uxtb	r2, r2
 8016194:	2a18      	cmp	r2, #24
 8016196:	d82e      	bhi.n	80161f6 <__gethex+0x13a>
 8016198:	f1a0 0210 	sub.w	r2, r0, #16
 801619c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80161a0:	f7ff ff76 	bl	8016090 <__hexdig_fun>
 80161a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80161a8:	fa5f fc8c 	uxtb.w	ip, ip
 80161ac:	f1bc 0f18 	cmp.w	ip, #24
 80161b0:	d91d      	bls.n	80161ee <__gethex+0x132>
 80161b2:	f1bb 0f00 	cmp.w	fp, #0
 80161b6:	d000      	beq.n	80161ba <__gethex+0xfe>
 80161b8:	4252      	negs	r2, r2
 80161ba:	4416      	add	r6, r2
 80161bc:	f8ca 1000 	str.w	r1, [sl]
 80161c0:	b1dc      	cbz	r4, 80161fa <__gethex+0x13e>
 80161c2:	9b01      	ldr	r3, [sp, #4]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	bf14      	ite	ne
 80161c8:	f04f 0800 	movne.w	r8, #0
 80161cc:	f04f 0806 	moveq.w	r8, #6
 80161d0:	4640      	mov	r0, r8
 80161d2:	b005      	add	sp, #20
 80161d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161d8:	4645      	mov	r5, r8
 80161da:	4626      	mov	r6, r4
 80161dc:	2401      	movs	r4, #1
 80161de:	e7c7      	b.n	8016170 <__gethex+0xb4>
 80161e0:	f04f 0b00 	mov.w	fp, #0
 80161e4:	1ca9      	adds	r1, r5, #2
 80161e6:	e7d0      	b.n	801618a <__gethex+0xce>
 80161e8:	f04f 0b01 	mov.w	fp, #1
 80161ec:	e7fa      	b.n	80161e4 <__gethex+0x128>
 80161ee:	230a      	movs	r3, #10
 80161f0:	fb03 0002 	mla	r0, r3, r2, r0
 80161f4:	e7d0      	b.n	8016198 <__gethex+0xdc>
 80161f6:	4629      	mov	r1, r5
 80161f8:	e7e0      	b.n	80161bc <__gethex+0x100>
 80161fa:	eba5 0308 	sub.w	r3, r5, r8
 80161fe:	3b01      	subs	r3, #1
 8016200:	4621      	mov	r1, r4
 8016202:	2b07      	cmp	r3, #7
 8016204:	dc0a      	bgt.n	801621c <__gethex+0x160>
 8016206:	4648      	mov	r0, r9
 8016208:	f000 fa5a 	bl	80166c0 <_Balloc>
 801620c:	4604      	mov	r4, r0
 801620e:	b940      	cbnz	r0, 8016222 <__gethex+0x166>
 8016210:	4b61      	ldr	r3, [pc, #388]	; (8016398 <__gethex+0x2dc>)
 8016212:	4602      	mov	r2, r0
 8016214:	21e4      	movs	r1, #228	; 0xe4
 8016216:	4861      	ldr	r0, [pc, #388]	; (801639c <__gethex+0x2e0>)
 8016218:	f7ff f804 	bl	8015224 <__assert_func>
 801621c:	3101      	adds	r1, #1
 801621e:	105b      	asrs	r3, r3, #1
 8016220:	e7ef      	b.n	8016202 <__gethex+0x146>
 8016222:	f100 0a14 	add.w	sl, r0, #20
 8016226:	2300      	movs	r3, #0
 8016228:	495a      	ldr	r1, [pc, #360]	; (8016394 <__gethex+0x2d8>)
 801622a:	f8cd a004 	str.w	sl, [sp, #4]
 801622e:	469b      	mov	fp, r3
 8016230:	45a8      	cmp	r8, r5
 8016232:	d342      	bcc.n	80162ba <__gethex+0x1fe>
 8016234:	9801      	ldr	r0, [sp, #4]
 8016236:	f840 bb04 	str.w	fp, [r0], #4
 801623a:	eba0 000a 	sub.w	r0, r0, sl
 801623e:	1080      	asrs	r0, r0, #2
 8016240:	6120      	str	r0, [r4, #16]
 8016242:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8016246:	4658      	mov	r0, fp
 8016248:	f000 fb2c 	bl	80168a4 <__hi0bits>
 801624c:	683d      	ldr	r5, [r7, #0]
 801624e:	eba8 0000 	sub.w	r0, r8, r0
 8016252:	42a8      	cmp	r0, r5
 8016254:	dd59      	ble.n	801630a <__gethex+0x24e>
 8016256:	eba0 0805 	sub.w	r8, r0, r5
 801625a:	4641      	mov	r1, r8
 801625c:	4620      	mov	r0, r4
 801625e:	f000 febb 	bl	8016fd8 <__any_on>
 8016262:	4683      	mov	fp, r0
 8016264:	b1b8      	cbz	r0, 8016296 <__gethex+0x1da>
 8016266:	f108 33ff 	add.w	r3, r8, #4294967295
 801626a:	1159      	asrs	r1, r3, #5
 801626c:	f003 021f 	and.w	r2, r3, #31
 8016270:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016274:	f04f 0b01 	mov.w	fp, #1
 8016278:	fa0b f202 	lsl.w	r2, fp, r2
 801627c:	420a      	tst	r2, r1
 801627e:	d00a      	beq.n	8016296 <__gethex+0x1da>
 8016280:	455b      	cmp	r3, fp
 8016282:	dd06      	ble.n	8016292 <__gethex+0x1d6>
 8016284:	f1a8 0102 	sub.w	r1, r8, #2
 8016288:	4620      	mov	r0, r4
 801628a:	f000 fea5 	bl	8016fd8 <__any_on>
 801628e:	2800      	cmp	r0, #0
 8016290:	d138      	bne.n	8016304 <__gethex+0x248>
 8016292:	f04f 0b02 	mov.w	fp, #2
 8016296:	4641      	mov	r1, r8
 8016298:	4620      	mov	r0, r4
 801629a:	f7ff fea7 	bl	8015fec <rshift>
 801629e:	4446      	add	r6, r8
 80162a0:	68bb      	ldr	r3, [r7, #8]
 80162a2:	42b3      	cmp	r3, r6
 80162a4:	da41      	bge.n	801632a <__gethex+0x26e>
 80162a6:	4621      	mov	r1, r4
 80162a8:	4648      	mov	r0, r9
 80162aa:	f000 fa49 	bl	8016740 <_Bfree>
 80162ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80162b0:	2300      	movs	r3, #0
 80162b2:	6013      	str	r3, [r2, #0]
 80162b4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80162b8:	e78a      	b.n	80161d0 <__gethex+0x114>
 80162ba:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80162be:	2a2e      	cmp	r2, #46	; 0x2e
 80162c0:	d014      	beq.n	80162ec <__gethex+0x230>
 80162c2:	2b20      	cmp	r3, #32
 80162c4:	d106      	bne.n	80162d4 <__gethex+0x218>
 80162c6:	9b01      	ldr	r3, [sp, #4]
 80162c8:	f843 bb04 	str.w	fp, [r3], #4
 80162cc:	f04f 0b00 	mov.w	fp, #0
 80162d0:	9301      	str	r3, [sp, #4]
 80162d2:	465b      	mov	r3, fp
 80162d4:	7828      	ldrb	r0, [r5, #0]
 80162d6:	9303      	str	r3, [sp, #12]
 80162d8:	f7ff feda 	bl	8016090 <__hexdig_fun>
 80162dc:	9b03      	ldr	r3, [sp, #12]
 80162de:	f000 000f 	and.w	r0, r0, #15
 80162e2:	4098      	lsls	r0, r3
 80162e4:	ea4b 0b00 	orr.w	fp, fp, r0
 80162e8:	3304      	adds	r3, #4
 80162ea:	e7a1      	b.n	8016230 <__gethex+0x174>
 80162ec:	45a8      	cmp	r8, r5
 80162ee:	d8e8      	bhi.n	80162c2 <__gethex+0x206>
 80162f0:	2201      	movs	r2, #1
 80162f2:	4628      	mov	r0, r5
 80162f4:	9303      	str	r3, [sp, #12]
 80162f6:	f7fe fe6e 	bl	8014fd6 <strncmp>
 80162fa:	4926      	ldr	r1, [pc, #152]	; (8016394 <__gethex+0x2d8>)
 80162fc:	9b03      	ldr	r3, [sp, #12]
 80162fe:	2800      	cmp	r0, #0
 8016300:	d1df      	bne.n	80162c2 <__gethex+0x206>
 8016302:	e795      	b.n	8016230 <__gethex+0x174>
 8016304:	f04f 0b03 	mov.w	fp, #3
 8016308:	e7c5      	b.n	8016296 <__gethex+0x1da>
 801630a:	da0b      	bge.n	8016324 <__gethex+0x268>
 801630c:	eba5 0800 	sub.w	r8, r5, r0
 8016310:	4621      	mov	r1, r4
 8016312:	4642      	mov	r2, r8
 8016314:	4648      	mov	r0, r9
 8016316:	f000 fc2d 	bl	8016b74 <__lshift>
 801631a:	eba6 0608 	sub.w	r6, r6, r8
 801631e:	4604      	mov	r4, r0
 8016320:	f100 0a14 	add.w	sl, r0, #20
 8016324:	f04f 0b00 	mov.w	fp, #0
 8016328:	e7ba      	b.n	80162a0 <__gethex+0x1e4>
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	42b3      	cmp	r3, r6
 801632e:	dd73      	ble.n	8016418 <__gethex+0x35c>
 8016330:	1b9e      	subs	r6, r3, r6
 8016332:	42b5      	cmp	r5, r6
 8016334:	dc34      	bgt.n	80163a0 <__gethex+0x2e4>
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	2b02      	cmp	r3, #2
 801633a:	d023      	beq.n	8016384 <__gethex+0x2c8>
 801633c:	2b03      	cmp	r3, #3
 801633e:	d025      	beq.n	801638c <__gethex+0x2d0>
 8016340:	2b01      	cmp	r3, #1
 8016342:	d115      	bne.n	8016370 <__gethex+0x2b4>
 8016344:	42b5      	cmp	r5, r6
 8016346:	d113      	bne.n	8016370 <__gethex+0x2b4>
 8016348:	2d01      	cmp	r5, #1
 801634a:	d10b      	bne.n	8016364 <__gethex+0x2a8>
 801634c:	9a02      	ldr	r2, [sp, #8]
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	6013      	str	r3, [r2, #0]
 8016352:	2301      	movs	r3, #1
 8016354:	6123      	str	r3, [r4, #16]
 8016356:	f8ca 3000 	str.w	r3, [sl]
 801635a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801635c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8016360:	601c      	str	r4, [r3, #0]
 8016362:	e735      	b.n	80161d0 <__gethex+0x114>
 8016364:	1e69      	subs	r1, r5, #1
 8016366:	4620      	mov	r0, r4
 8016368:	f000 fe36 	bl	8016fd8 <__any_on>
 801636c:	2800      	cmp	r0, #0
 801636e:	d1ed      	bne.n	801634c <__gethex+0x290>
 8016370:	4621      	mov	r1, r4
 8016372:	4648      	mov	r0, r9
 8016374:	f000 f9e4 	bl	8016740 <_Bfree>
 8016378:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801637a:	2300      	movs	r3, #0
 801637c:	6013      	str	r3, [r2, #0]
 801637e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8016382:	e725      	b.n	80161d0 <__gethex+0x114>
 8016384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016386:	2b00      	cmp	r3, #0
 8016388:	d1f2      	bne.n	8016370 <__gethex+0x2b4>
 801638a:	e7df      	b.n	801634c <__gethex+0x290>
 801638c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801638e:	2b00      	cmp	r3, #0
 8016390:	d1dc      	bne.n	801634c <__gethex+0x290>
 8016392:	e7ed      	b.n	8016370 <__gethex+0x2b4>
 8016394:	0801acd7 	.word	0x0801acd7
 8016398:	0801af68 	.word	0x0801af68
 801639c:	0801af79 	.word	0x0801af79
 80163a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80163a4:	f1bb 0f00 	cmp.w	fp, #0
 80163a8:	d133      	bne.n	8016412 <__gethex+0x356>
 80163aa:	f1b8 0f00 	cmp.w	r8, #0
 80163ae:	d004      	beq.n	80163ba <__gethex+0x2fe>
 80163b0:	4641      	mov	r1, r8
 80163b2:	4620      	mov	r0, r4
 80163b4:	f000 fe10 	bl	8016fd8 <__any_on>
 80163b8:	4683      	mov	fp, r0
 80163ba:	ea4f 1268 	mov.w	r2, r8, asr #5
 80163be:	2301      	movs	r3, #1
 80163c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80163c4:	f008 081f 	and.w	r8, r8, #31
 80163c8:	fa03 f308 	lsl.w	r3, r3, r8
 80163cc:	4213      	tst	r3, r2
 80163ce:	4631      	mov	r1, r6
 80163d0:	4620      	mov	r0, r4
 80163d2:	bf18      	it	ne
 80163d4:	f04b 0b02 	orrne.w	fp, fp, #2
 80163d8:	1bad      	subs	r5, r5, r6
 80163da:	f7ff fe07 	bl	8015fec <rshift>
 80163de:	687e      	ldr	r6, [r7, #4]
 80163e0:	f04f 0802 	mov.w	r8, #2
 80163e4:	f1bb 0f00 	cmp.w	fp, #0
 80163e8:	d04a      	beq.n	8016480 <__gethex+0x3c4>
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	2b02      	cmp	r3, #2
 80163ee:	d016      	beq.n	801641e <__gethex+0x362>
 80163f0:	2b03      	cmp	r3, #3
 80163f2:	d018      	beq.n	8016426 <__gethex+0x36a>
 80163f4:	2b01      	cmp	r3, #1
 80163f6:	d109      	bne.n	801640c <__gethex+0x350>
 80163f8:	f01b 0f02 	tst.w	fp, #2
 80163fc:	d006      	beq.n	801640c <__gethex+0x350>
 80163fe:	f8da 3000 	ldr.w	r3, [sl]
 8016402:	ea4b 0b03 	orr.w	fp, fp, r3
 8016406:	f01b 0f01 	tst.w	fp, #1
 801640a:	d10f      	bne.n	801642c <__gethex+0x370>
 801640c:	f048 0810 	orr.w	r8, r8, #16
 8016410:	e036      	b.n	8016480 <__gethex+0x3c4>
 8016412:	f04f 0b01 	mov.w	fp, #1
 8016416:	e7d0      	b.n	80163ba <__gethex+0x2fe>
 8016418:	f04f 0801 	mov.w	r8, #1
 801641c:	e7e2      	b.n	80163e4 <__gethex+0x328>
 801641e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016420:	f1c3 0301 	rsb	r3, r3, #1
 8016424:	930f      	str	r3, [sp, #60]	; 0x3c
 8016426:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016428:	2b00      	cmp	r3, #0
 801642a:	d0ef      	beq.n	801640c <__gethex+0x350>
 801642c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016430:	f104 0214 	add.w	r2, r4, #20
 8016434:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8016438:	9301      	str	r3, [sp, #4]
 801643a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801643e:	2300      	movs	r3, #0
 8016440:	4694      	mov	ip, r2
 8016442:	f852 1b04 	ldr.w	r1, [r2], #4
 8016446:	f1b1 3fff 	cmp.w	r1, #4294967295
 801644a:	d01e      	beq.n	801648a <__gethex+0x3ce>
 801644c:	3101      	adds	r1, #1
 801644e:	f8cc 1000 	str.w	r1, [ip]
 8016452:	f1b8 0f02 	cmp.w	r8, #2
 8016456:	f104 0214 	add.w	r2, r4, #20
 801645a:	d13d      	bne.n	80164d8 <__gethex+0x41c>
 801645c:	683b      	ldr	r3, [r7, #0]
 801645e:	3b01      	subs	r3, #1
 8016460:	42ab      	cmp	r3, r5
 8016462:	d10b      	bne.n	801647c <__gethex+0x3c0>
 8016464:	1169      	asrs	r1, r5, #5
 8016466:	2301      	movs	r3, #1
 8016468:	f005 051f 	and.w	r5, r5, #31
 801646c:	fa03 f505 	lsl.w	r5, r3, r5
 8016470:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016474:	421d      	tst	r5, r3
 8016476:	bf18      	it	ne
 8016478:	f04f 0801 	movne.w	r8, #1
 801647c:	f048 0820 	orr.w	r8, r8, #32
 8016480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016482:	601c      	str	r4, [r3, #0]
 8016484:	9b02      	ldr	r3, [sp, #8]
 8016486:	601e      	str	r6, [r3, #0]
 8016488:	e6a2      	b.n	80161d0 <__gethex+0x114>
 801648a:	4290      	cmp	r0, r2
 801648c:	f842 3c04 	str.w	r3, [r2, #-4]
 8016490:	d8d6      	bhi.n	8016440 <__gethex+0x384>
 8016492:	68a2      	ldr	r2, [r4, #8]
 8016494:	4593      	cmp	fp, r2
 8016496:	db17      	blt.n	80164c8 <__gethex+0x40c>
 8016498:	6861      	ldr	r1, [r4, #4]
 801649a:	4648      	mov	r0, r9
 801649c:	3101      	adds	r1, #1
 801649e:	f000 f90f 	bl	80166c0 <_Balloc>
 80164a2:	4682      	mov	sl, r0
 80164a4:	b918      	cbnz	r0, 80164ae <__gethex+0x3f2>
 80164a6:	4b1b      	ldr	r3, [pc, #108]	; (8016514 <__gethex+0x458>)
 80164a8:	4602      	mov	r2, r0
 80164aa:	2184      	movs	r1, #132	; 0x84
 80164ac:	e6b3      	b.n	8016216 <__gethex+0x15a>
 80164ae:	6922      	ldr	r2, [r4, #16]
 80164b0:	3202      	adds	r2, #2
 80164b2:	f104 010c 	add.w	r1, r4, #12
 80164b6:	0092      	lsls	r2, r2, #2
 80164b8:	300c      	adds	r0, #12
 80164ba:	f7fe fe94 	bl	80151e6 <memcpy>
 80164be:	4621      	mov	r1, r4
 80164c0:	4648      	mov	r0, r9
 80164c2:	f000 f93d 	bl	8016740 <_Bfree>
 80164c6:	4654      	mov	r4, sl
 80164c8:	6922      	ldr	r2, [r4, #16]
 80164ca:	1c51      	adds	r1, r2, #1
 80164cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80164d0:	6121      	str	r1, [r4, #16]
 80164d2:	2101      	movs	r1, #1
 80164d4:	6151      	str	r1, [r2, #20]
 80164d6:	e7bc      	b.n	8016452 <__gethex+0x396>
 80164d8:	6921      	ldr	r1, [r4, #16]
 80164da:	4559      	cmp	r1, fp
 80164dc:	dd0b      	ble.n	80164f6 <__gethex+0x43a>
 80164de:	2101      	movs	r1, #1
 80164e0:	4620      	mov	r0, r4
 80164e2:	f7ff fd83 	bl	8015fec <rshift>
 80164e6:	68bb      	ldr	r3, [r7, #8]
 80164e8:	3601      	adds	r6, #1
 80164ea:	42b3      	cmp	r3, r6
 80164ec:	f6ff aedb 	blt.w	80162a6 <__gethex+0x1ea>
 80164f0:	f04f 0801 	mov.w	r8, #1
 80164f4:	e7c2      	b.n	801647c <__gethex+0x3c0>
 80164f6:	f015 051f 	ands.w	r5, r5, #31
 80164fa:	d0f9      	beq.n	80164f0 <__gethex+0x434>
 80164fc:	9b01      	ldr	r3, [sp, #4]
 80164fe:	441a      	add	r2, r3
 8016500:	f1c5 0520 	rsb	r5, r5, #32
 8016504:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8016508:	f000 f9cc 	bl	80168a4 <__hi0bits>
 801650c:	42a8      	cmp	r0, r5
 801650e:	dbe6      	blt.n	80164de <__gethex+0x422>
 8016510:	e7ee      	b.n	80164f0 <__gethex+0x434>
 8016512:	bf00      	nop
 8016514:	0801af68 	.word	0x0801af68

08016518 <L_shift>:
 8016518:	f1c2 0208 	rsb	r2, r2, #8
 801651c:	0092      	lsls	r2, r2, #2
 801651e:	b570      	push	{r4, r5, r6, lr}
 8016520:	f1c2 0620 	rsb	r6, r2, #32
 8016524:	6843      	ldr	r3, [r0, #4]
 8016526:	6804      	ldr	r4, [r0, #0]
 8016528:	fa03 f506 	lsl.w	r5, r3, r6
 801652c:	432c      	orrs	r4, r5
 801652e:	40d3      	lsrs	r3, r2
 8016530:	6004      	str	r4, [r0, #0]
 8016532:	f840 3f04 	str.w	r3, [r0, #4]!
 8016536:	4288      	cmp	r0, r1
 8016538:	d3f4      	bcc.n	8016524 <L_shift+0xc>
 801653a:	bd70      	pop	{r4, r5, r6, pc}

0801653c <__match>:
 801653c:	b530      	push	{r4, r5, lr}
 801653e:	6803      	ldr	r3, [r0, #0]
 8016540:	3301      	adds	r3, #1
 8016542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016546:	b914      	cbnz	r4, 801654e <__match+0x12>
 8016548:	6003      	str	r3, [r0, #0]
 801654a:	2001      	movs	r0, #1
 801654c:	bd30      	pop	{r4, r5, pc}
 801654e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016552:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016556:	2d19      	cmp	r5, #25
 8016558:	bf98      	it	ls
 801655a:	3220      	addls	r2, #32
 801655c:	42a2      	cmp	r2, r4
 801655e:	d0f0      	beq.n	8016542 <__match+0x6>
 8016560:	2000      	movs	r0, #0
 8016562:	e7f3      	b.n	801654c <__match+0x10>

08016564 <__hexnan>:
 8016564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016568:	680b      	ldr	r3, [r1, #0]
 801656a:	6801      	ldr	r1, [r0, #0]
 801656c:	115e      	asrs	r6, r3, #5
 801656e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016572:	f013 031f 	ands.w	r3, r3, #31
 8016576:	b087      	sub	sp, #28
 8016578:	bf18      	it	ne
 801657a:	3604      	addne	r6, #4
 801657c:	2500      	movs	r5, #0
 801657e:	1f37      	subs	r7, r6, #4
 8016580:	4682      	mov	sl, r0
 8016582:	4690      	mov	r8, r2
 8016584:	9301      	str	r3, [sp, #4]
 8016586:	f846 5c04 	str.w	r5, [r6, #-4]
 801658a:	46b9      	mov	r9, r7
 801658c:	463c      	mov	r4, r7
 801658e:	9502      	str	r5, [sp, #8]
 8016590:	46ab      	mov	fp, r5
 8016592:	784a      	ldrb	r2, [r1, #1]
 8016594:	1c4b      	adds	r3, r1, #1
 8016596:	9303      	str	r3, [sp, #12]
 8016598:	b342      	cbz	r2, 80165ec <__hexnan+0x88>
 801659a:	4610      	mov	r0, r2
 801659c:	9105      	str	r1, [sp, #20]
 801659e:	9204      	str	r2, [sp, #16]
 80165a0:	f7ff fd76 	bl	8016090 <__hexdig_fun>
 80165a4:	2800      	cmp	r0, #0
 80165a6:	d14f      	bne.n	8016648 <__hexnan+0xe4>
 80165a8:	9a04      	ldr	r2, [sp, #16]
 80165aa:	9905      	ldr	r1, [sp, #20]
 80165ac:	2a20      	cmp	r2, #32
 80165ae:	d818      	bhi.n	80165e2 <__hexnan+0x7e>
 80165b0:	9b02      	ldr	r3, [sp, #8]
 80165b2:	459b      	cmp	fp, r3
 80165b4:	dd13      	ble.n	80165de <__hexnan+0x7a>
 80165b6:	454c      	cmp	r4, r9
 80165b8:	d206      	bcs.n	80165c8 <__hexnan+0x64>
 80165ba:	2d07      	cmp	r5, #7
 80165bc:	dc04      	bgt.n	80165c8 <__hexnan+0x64>
 80165be:	462a      	mov	r2, r5
 80165c0:	4649      	mov	r1, r9
 80165c2:	4620      	mov	r0, r4
 80165c4:	f7ff ffa8 	bl	8016518 <L_shift>
 80165c8:	4544      	cmp	r4, r8
 80165ca:	d950      	bls.n	801666e <__hexnan+0x10a>
 80165cc:	2300      	movs	r3, #0
 80165ce:	f1a4 0904 	sub.w	r9, r4, #4
 80165d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80165d6:	f8cd b008 	str.w	fp, [sp, #8]
 80165da:	464c      	mov	r4, r9
 80165dc:	461d      	mov	r5, r3
 80165de:	9903      	ldr	r1, [sp, #12]
 80165e0:	e7d7      	b.n	8016592 <__hexnan+0x2e>
 80165e2:	2a29      	cmp	r2, #41	; 0x29
 80165e4:	d155      	bne.n	8016692 <__hexnan+0x12e>
 80165e6:	3102      	adds	r1, #2
 80165e8:	f8ca 1000 	str.w	r1, [sl]
 80165ec:	f1bb 0f00 	cmp.w	fp, #0
 80165f0:	d04f      	beq.n	8016692 <__hexnan+0x12e>
 80165f2:	454c      	cmp	r4, r9
 80165f4:	d206      	bcs.n	8016604 <__hexnan+0xa0>
 80165f6:	2d07      	cmp	r5, #7
 80165f8:	dc04      	bgt.n	8016604 <__hexnan+0xa0>
 80165fa:	462a      	mov	r2, r5
 80165fc:	4649      	mov	r1, r9
 80165fe:	4620      	mov	r0, r4
 8016600:	f7ff ff8a 	bl	8016518 <L_shift>
 8016604:	4544      	cmp	r4, r8
 8016606:	d934      	bls.n	8016672 <__hexnan+0x10e>
 8016608:	f1a8 0204 	sub.w	r2, r8, #4
 801660c:	4623      	mov	r3, r4
 801660e:	f853 1b04 	ldr.w	r1, [r3], #4
 8016612:	f842 1f04 	str.w	r1, [r2, #4]!
 8016616:	429f      	cmp	r7, r3
 8016618:	d2f9      	bcs.n	801660e <__hexnan+0xaa>
 801661a:	1b3b      	subs	r3, r7, r4
 801661c:	f023 0303 	bic.w	r3, r3, #3
 8016620:	3304      	adds	r3, #4
 8016622:	3e03      	subs	r6, #3
 8016624:	3401      	adds	r4, #1
 8016626:	42a6      	cmp	r6, r4
 8016628:	bf38      	it	cc
 801662a:	2304      	movcc	r3, #4
 801662c:	4443      	add	r3, r8
 801662e:	2200      	movs	r2, #0
 8016630:	f843 2b04 	str.w	r2, [r3], #4
 8016634:	429f      	cmp	r7, r3
 8016636:	d2fb      	bcs.n	8016630 <__hexnan+0xcc>
 8016638:	683b      	ldr	r3, [r7, #0]
 801663a:	b91b      	cbnz	r3, 8016644 <__hexnan+0xe0>
 801663c:	4547      	cmp	r7, r8
 801663e:	d126      	bne.n	801668e <__hexnan+0x12a>
 8016640:	2301      	movs	r3, #1
 8016642:	603b      	str	r3, [r7, #0]
 8016644:	2005      	movs	r0, #5
 8016646:	e025      	b.n	8016694 <__hexnan+0x130>
 8016648:	3501      	adds	r5, #1
 801664a:	2d08      	cmp	r5, #8
 801664c:	f10b 0b01 	add.w	fp, fp, #1
 8016650:	dd06      	ble.n	8016660 <__hexnan+0xfc>
 8016652:	4544      	cmp	r4, r8
 8016654:	d9c3      	bls.n	80165de <__hexnan+0x7a>
 8016656:	2300      	movs	r3, #0
 8016658:	f844 3c04 	str.w	r3, [r4, #-4]
 801665c:	2501      	movs	r5, #1
 801665e:	3c04      	subs	r4, #4
 8016660:	6822      	ldr	r2, [r4, #0]
 8016662:	f000 000f 	and.w	r0, r0, #15
 8016666:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801666a:	6020      	str	r0, [r4, #0]
 801666c:	e7b7      	b.n	80165de <__hexnan+0x7a>
 801666e:	2508      	movs	r5, #8
 8016670:	e7b5      	b.n	80165de <__hexnan+0x7a>
 8016672:	9b01      	ldr	r3, [sp, #4]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d0df      	beq.n	8016638 <__hexnan+0xd4>
 8016678:	f1c3 0320 	rsb	r3, r3, #32
 801667c:	f04f 32ff 	mov.w	r2, #4294967295
 8016680:	40da      	lsrs	r2, r3
 8016682:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016686:	4013      	ands	r3, r2
 8016688:	f846 3c04 	str.w	r3, [r6, #-4]
 801668c:	e7d4      	b.n	8016638 <__hexnan+0xd4>
 801668e:	3f04      	subs	r7, #4
 8016690:	e7d2      	b.n	8016638 <__hexnan+0xd4>
 8016692:	2004      	movs	r0, #4
 8016694:	b007      	add	sp, #28
 8016696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801669a <__ascii_mbtowc>:
 801669a:	b082      	sub	sp, #8
 801669c:	b901      	cbnz	r1, 80166a0 <__ascii_mbtowc+0x6>
 801669e:	a901      	add	r1, sp, #4
 80166a0:	b142      	cbz	r2, 80166b4 <__ascii_mbtowc+0x1a>
 80166a2:	b14b      	cbz	r3, 80166b8 <__ascii_mbtowc+0x1e>
 80166a4:	7813      	ldrb	r3, [r2, #0]
 80166a6:	600b      	str	r3, [r1, #0]
 80166a8:	7812      	ldrb	r2, [r2, #0]
 80166aa:	1e10      	subs	r0, r2, #0
 80166ac:	bf18      	it	ne
 80166ae:	2001      	movne	r0, #1
 80166b0:	b002      	add	sp, #8
 80166b2:	4770      	bx	lr
 80166b4:	4610      	mov	r0, r2
 80166b6:	e7fb      	b.n	80166b0 <__ascii_mbtowc+0x16>
 80166b8:	f06f 0001 	mvn.w	r0, #1
 80166bc:	e7f8      	b.n	80166b0 <__ascii_mbtowc+0x16>
	...

080166c0 <_Balloc>:
 80166c0:	b570      	push	{r4, r5, r6, lr}
 80166c2:	69c6      	ldr	r6, [r0, #28]
 80166c4:	4604      	mov	r4, r0
 80166c6:	460d      	mov	r5, r1
 80166c8:	b976      	cbnz	r6, 80166e8 <_Balloc+0x28>
 80166ca:	2010      	movs	r0, #16
 80166cc:	f7fc fdf0 	bl	80132b0 <malloc>
 80166d0:	4602      	mov	r2, r0
 80166d2:	61e0      	str	r0, [r4, #28]
 80166d4:	b920      	cbnz	r0, 80166e0 <_Balloc+0x20>
 80166d6:	4b18      	ldr	r3, [pc, #96]	; (8016738 <_Balloc+0x78>)
 80166d8:	4818      	ldr	r0, [pc, #96]	; (801673c <_Balloc+0x7c>)
 80166da:	216b      	movs	r1, #107	; 0x6b
 80166dc:	f7fe fda2 	bl	8015224 <__assert_func>
 80166e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80166e4:	6006      	str	r6, [r0, #0]
 80166e6:	60c6      	str	r6, [r0, #12]
 80166e8:	69e6      	ldr	r6, [r4, #28]
 80166ea:	68f3      	ldr	r3, [r6, #12]
 80166ec:	b183      	cbz	r3, 8016710 <_Balloc+0x50>
 80166ee:	69e3      	ldr	r3, [r4, #28]
 80166f0:	68db      	ldr	r3, [r3, #12]
 80166f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80166f6:	b9b8      	cbnz	r0, 8016728 <_Balloc+0x68>
 80166f8:	2101      	movs	r1, #1
 80166fa:	fa01 f605 	lsl.w	r6, r1, r5
 80166fe:	1d72      	adds	r2, r6, #5
 8016700:	0092      	lsls	r2, r2, #2
 8016702:	4620      	mov	r0, r4
 8016704:	f000 ff25 	bl	8017552 <_calloc_r>
 8016708:	b160      	cbz	r0, 8016724 <_Balloc+0x64>
 801670a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801670e:	e00e      	b.n	801672e <_Balloc+0x6e>
 8016710:	2221      	movs	r2, #33	; 0x21
 8016712:	2104      	movs	r1, #4
 8016714:	4620      	mov	r0, r4
 8016716:	f000 ff1c 	bl	8017552 <_calloc_r>
 801671a:	69e3      	ldr	r3, [r4, #28]
 801671c:	60f0      	str	r0, [r6, #12]
 801671e:	68db      	ldr	r3, [r3, #12]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d1e4      	bne.n	80166ee <_Balloc+0x2e>
 8016724:	2000      	movs	r0, #0
 8016726:	bd70      	pop	{r4, r5, r6, pc}
 8016728:	6802      	ldr	r2, [r0, #0]
 801672a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801672e:	2300      	movs	r3, #0
 8016730:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016734:	e7f7      	b.n	8016726 <_Balloc+0x66>
 8016736:	bf00      	nop
 8016738:	0801ac68 	.word	0x0801ac68
 801673c:	0801afd9 	.word	0x0801afd9

08016740 <_Bfree>:
 8016740:	b570      	push	{r4, r5, r6, lr}
 8016742:	69c6      	ldr	r6, [r0, #28]
 8016744:	4605      	mov	r5, r0
 8016746:	460c      	mov	r4, r1
 8016748:	b976      	cbnz	r6, 8016768 <_Bfree+0x28>
 801674a:	2010      	movs	r0, #16
 801674c:	f7fc fdb0 	bl	80132b0 <malloc>
 8016750:	4602      	mov	r2, r0
 8016752:	61e8      	str	r0, [r5, #28]
 8016754:	b920      	cbnz	r0, 8016760 <_Bfree+0x20>
 8016756:	4b09      	ldr	r3, [pc, #36]	; (801677c <_Bfree+0x3c>)
 8016758:	4809      	ldr	r0, [pc, #36]	; (8016780 <_Bfree+0x40>)
 801675a:	218f      	movs	r1, #143	; 0x8f
 801675c:	f7fe fd62 	bl	8015224 <__assert_func>
 8016760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016764:	6006      	str	r6, [r0, #0]
 8016766:	60c6      	str	r6, [r0, #12]
 8016768:	b13c      	cbz	r4, 801677a <_Bfree+0x3a>
 801676a:	69eb      	ldr	r3, [r5, #28]
 801676c:	6862      	ldr	r2, [r4, #4]
 801676e:	68db      	ldr	r3, [r3, #12]
 8016770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016774:	6021      	str	r1, [r4, #0]
 8016776:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801677a:	bd70      	pop	{r4, r5, r6, pc}
 801677c:	0801ac68 	.word	0x0801ac68
 8016780:	0801afd9 	.word	0x0801afd9

08016784 <__multadd>:
 8016784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016788:	690d      	ldr	r5, [r1, #16]
 801678a:	4607      	mov	r7, r0
 801678c:	460c      	mov	r4, r1
 801678e:	461e      	mov	r6, r3
 8016790:	f101 0c14 	add.w	ip, r1, #20
 8016794:	2000      	movs	r0, #0
 8016796:	f8dc 3000 	ldr.w	r3, [ip]
 801679a:	b299      	uxth	r1, r3
 801679c:	fb02 6101 	mla	r1, r2, r1, r6
 80167a0:	0c1e      	lsrs	r6, r3, #16
 80167a2:	0c0b      	lsrs	r3, r1, #16
 80167a4:	fb02 3306 	mla	r3, r2, r6, r3
 80167a8:	b289      	uxth	r1, r1
 80167aa:	3001      	adds	r0, #1
 80167ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80167b0:	4285      	cmp	r5, r0
 80167b2:	f84c 1b04 	str.w	r1, [ip], #4
 80167b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80167ba:	dcec      	bgt.n	8016796 <__multadd+0x12>
 80167bc:	b30e      	cbz	r6, 8016802 <__multadd+0x7e>
 80167be:	68a3      	ldr	r3, [r4, #8]
 80167c0:	42ab      	cmp	r3, r5
 80167c2:	dc19      	bgt.n	80167f8 <__multadd+0x74>
 80167c4:	6861      	ldr	r1, [r4, #4]
 80167c6:	4638      	mov	r0, r7
 80167c8:	3101      	adds	r1, #1
 80167ca:	f7ff ff79 	bl	80166c0 <_Balloc>
 80167ce:	4680      	mov	r8, r0
 80167d0:	b928      	cbnz	r0, 80167de <__multadd+0x5a>
 80167d2:	4602      	mov	r2, r0
 80167d4:	4b0c      	ldr	r3, [pc, #48]	; (8016808 <__multadd+0x84>)
 80167d6:	480d      	ldr	r0, [pc, #52]	; (801680c <__multadd+0x88>)
 80167d8:	21ba      	movs	r1, #186	; 0xba
 80167da:	f7fe fd23 	bl	8015224 <__assert_func>
 80167de:	6922      	ldr	r2, [r4, #16]
 80167e0:	3202      	adds	r2, #2
 80167e2:	f104 010c 	add.w	r1, r4, #12
 80167e6:	0092      	lsls	r2, r2, #2
 80167e8:	300c      	adds	r0, #12
 80167ea:	f7fe fcfc 	bl	80151e6 <memcpy>
 80167ee:	4621      	mov	r1, r4
 80167f0:	4638      	mov	r0, r7
 80167f2:	f7ff ffa5 	bl	8016740 <_Bfree>
 80167f6:	4644      	mov	r4, r8
 80167f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80167fc:	3501      	adds	r5, #1
 80167fe:	615e      	str	r6, [r3, #20]
 8016800:	6125      	str	r5, [r4, #16]
 8016802:	4620      	mov	r0, r4
 8016804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016808:	0801af68 	.word	0x0801af68
 801680c:	0801afd9 	.word	0x0801afd9

08016810 <__s2b>:
 8016810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016814:	460c      	mov	r4, r1
 8016816:	4615      	mov	r5, r2
 8016818:	461f      	mov	r7, r3
 801681a:	2209      	movs	r2, #9
 801681c:	3308      	adds	r3, #8
 801681e:	4606      	mov	r6, r0
 8016820:	fb93 f3f2 	sdiv	r3, r3, r2
 8016824:	2100      	movs	r1, #0
 8016826:	2201      	movs	r2, #1
 8016828:	429a      	cmp	r2, r3
 801682a:	db09      	blt.n	8016840 <__s2b+0x30>
 801682c:	4630      	mov	r0, r6
 801682e:	f7ff ff47 	bl	80166c0 <_Balloc>
 8016832:	b940      	cbnz	r0, 8016846 <__s2b+0x36>
 8016834:	4602      	mov	r2, r0
 8016836:	4b19      	ldr	r3, [pc, #100]	; (801689c <__s2b+0x8c>)
 8016838:	4819      	ldr	r0, [pc, #100]	; (80168a0 <__s2b+0x90>)
 801683a:	21d3      	movs	r1, #211	; 0xd3
 801683c:	f7fe fcf2 	bl	8015224 <__assert_func>
 8016840:	0052      	lsls	r2, r2, #1
 8016842:	3101      	adds	r1, #1
 8016844:	e7f0      	b.n	8016828 <__s2b+0x18>
 8016846:	9b08      	ldr	r3, [sp, #32]
 8016848:	6143      	str	r3, [r0, #20]
 801684a:	2d09      	cmp	r5, #9
 801684c:	f04f 0301 	mov.w	r3, #1
 8016850:	6103      	str	r3, [r0, #16]
 8016852:	dd16      	ble.n	8016882 <__s2b+0x72>
 8016854:	f104 0909 	add.w	r9, r4, #9
 8016858:	46c8      	mov	r8, r9
 801685a:	442c      	add	r4, r5
 801685c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016860:	4601      	mov	r1, r0
 8016862:	3b30      	subs	r3, #48	; 0x30
 8016864:	220a      	movs	r2, #10
 8016866:	4630      	mov	r0, r6
 8016868:	f7ff ff8c 	bl	8016784 <__multadd>
 801686c:	45a0      	cmp	r8, r4
 801686e:	d1f5      	bne.n	801685c <__s2b+0x4c>
 8016870:	f1a5 0408 	sub.w	r4, r5, #8
 8016874:	444c      	add	r4, r9
 8016876:	1b2d      	subs	r5, r5, r4
 8016878:	1963      	adds	r3, r4, r5
 801687a:	42bb      	cmp	r3, r7
 801687c:	db04      	blt.n	8016888 <__s2b+0x78>
 801687e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016882:	340a      	adds	r4, #10
 8016884:	2509      	movs	r5, #9
 8016886:	e7f6      	b.n	8016876 <__s2b+0x66>
 8016888:	f814 3b01 	ldrb.w	r3, [r4], #1
 801688c:	4601      	mov	r1, r0
 801688e:	3b30      	subs	r3, #48	; 0x30
 8016890:	220a      	movs	r2, #10
 8016892:	4630      	mov	r0, r6
 8016894:	f7ff ff76 	bl	8016784 <__multadd>
 8016898:	e7ee      	b.n	8016878 <__s2b+0x68>
 801689a:	bf00      	nop
 801689c:	0801af68 	.word	0x0801af68
 80168a0:	0801afd9 	.word	0x0801afd9

080168a4 <__hi0bits>:
 80168a4:	0c03      	lsrs	r3, r0, #16
 80168a6:	041b      	lsls	r3, r3, #16
 80168a8:	b9d3      	cbnz	r3, 80168e0 <__hi0bits+0x3c>
 80168aa:	0400      	lsls	r0, r0, #16
 80168ac:	2310      	movs	r3, #16
 80168ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80168b2:	bf04      	itt	eq
 80168b4:	0200      	lsleq	r0, r0, #8
 80168b6:	3308      	addeq	r3, #8
 80168b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80168bc:	bf04      	itt	eq
 80168be:	0100      	lsleq	r0, r0, #4
 80168c0:	3304      	addeq	r3, #4
 80168c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80168c6:	bf04      	itt	eq
 80168c8:	0080      	lsleq	r0, r0, #2
 80168ca:	3302      	addeq	r3, #2
 80168cc:	2800      	cmp	r0, #0
 80168ce:	db05      	blt.n	80168dc <__hi0bits+0x38>
 80168d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80168d4:	f103 0301 	add.w	r3, r3, #1
 80168d8:	bf08      	it	eq
 80168da:	2320      	moveq	r3, #32
 80168dc:	4618      	mov	r0, r3
 80168de:	4770      	bx	lr
 80168e0:	2300      	movs	r3, #0
 80168e2:	e7e4      	b.n	80168ae <__hi0bits+0xa>

080168e4 <__lo0bits>:
 80168e4:	6803      	ldr	r3, [r0, #0]
 80168e6:	f013 0207 	ands.w	r2, r3, #7
 80168ea:	d00c      	beq.n	8016906 <__lo0bits+0x22>
 80168ec:	07d9      	lsls	r1, r3, #31
 80168ee:	d422      	bmi.n	8016936 <__lo0bits+0x52>
 80168f0:	079a      	lsls	r2, r3, #30
 80168f2:	bf49      	itett	mi
 80168f4:	085b      	lsrmi	r3, r3, #1
 80168f6:	089b      	lsrpl	r3, r3, #2
 80168f8:	6003      	strmi	r3, [r0, #0]
 80168fa:	2201      	movmi	r2, #1
 80168fc:	bf5c      	itt	pl
 80168fe:	6003      	strpl	r3, [r0, #0]
 8016900:	2202      	movpl	r2, #2
 8016902:	4610      	mov	r0, r2
 8016904:	4770      	bx	lr
 8016906:	b299      	uxth	r1, r3
 8016908:	b909      	cbnz	r1, 801690e <__lo0bits+0x2a>
 801690a:	0c1b      	lsrs	r3, r3, #16
 801690c:	2210      	movs	r2, #16
 801690e:	b2d9      	uxtb	r1, r3
 8016910:	b909      	cbnz	r1, 8016916 <__lo0bits+0x32>
 8016912:	3208      	adds	r2, #8
 8016914:	0a1b      	lsrs	r3, r3, #8
 8016916:	0719      	lsls	r1, r3, #28
 8016918:	bf04      	itt	eq
 801691a:	091b      	lsreq	r3, r3, #4
 801691c:	3204      	addeq	r2, #4
 801691e:	0799      	lsls	r1, r3, #30
 8016920:	bf04      	itt	eq
 8016922:	089b      	lsreq	r3, r3, #2
 8016924:	3202      	addeq	r2, #2
 8016926:	07d9      	lsls	r1, r3, #31
 8016928:	d403      	bmi.n	8016932 <__lo0bits+0x4e>
 801692a:	085b      	lsrs	r3, r3, #1
 801692c:	f102 0201 	add.w	r2, r2, #1
 8016930:	d003      	beq.n	801693a <__lo0bits+0x56>
 8016932:	6003      	str	r3, [r0, #0]
 8016934:	e7e5      	b.n	8016902 <__lo0bits+0x1e>
 8016936:	2200      	movs	r2, #0
 8016938:	e7e3      	b.n	8016902 <__lo0bits+0x1e>
 801693a:	2220      	movs	r2, #32
 801693c:	e7e1      	b.n	8016902 <__lo0bits+0x1e>
	...

08016940 <__i2b>:
 8016940:	b510      	push	{r4, lr}
 8016942:	460c      	mov	r4, r1
 8016944:	2101      	movs	r1, #1
 8016946:	f7ff febb 	bl	80166c0 <_Balloc>
 801694a:	4602      	mov	r2, r0
 801694c:	b928      	cbnz	r0, 801695a <__i2b+0x1a>
 801694e:	4b05      	ldr	r3, [pc, #20]	; (8016964 <__i2b+0x24>)
 8016950:	4805      	ldr	r0, [pc, #20]	; (8016968 <__i2b+0x28>)
 8016952:	f240 1145 	movw	r1, #325	; 0x145
 8016956:	f7fe fc65 	bl	8015224 <__assert_func>
 801695a:	2301      	movs	r3, #1
 801695c:	6144      	str	r4, [r0, #20]
 801695e:	6103      	str	r3, [r0, #16]
 8016960:	bd10      	pop	{r4, pc}
 8016962:	bf00      	nop
 8016964:	0801af68 	.word	0x0801af68
 8016968:	0801afd9 	.word	0x0801afd9

0801696c <__multiply>:
 801696c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016970:	4691      	mov	r9, r2
 8016972:	690a      	ldr	r2, [r1, #16]
 8016974:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016978:	429a      	cmp	r2, r3
 801697a:	bfb8      	it	lt
 801697c:	460b      	movlt	r3, r1
 801697e:	460c      	mov	r4, r1
 8016980:	bfbc      	itt	lt
 8016982:	464c      	movlt	r4, r9
 8016984:	4699      	movlt	r9, r3
 8016986:	6927      	ldr	r7, [r4, #16]
 8016988:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801698c:	68a3      	ldr	r3, [r4, #8]
 801698e:	6861      	ldr	r1, [r4, #4]
 8016990:	eb07 060a 	add.w	r6, r7, sl
 8016994:	42b3      	cmp	r3, r6
 8016996:	b085      	sub	sp, #20
 8016998:	bfb8      	it	lt
 801699a:	3101      	addlt	r1, #1
 801699c:	f7ff fe90 	bl	80166c0 <_Balloc>
 80169a0:	b930      	cbnz	r0, 80169b0 <__multiply+0x44>
 80169a2:	4602      	mov	r2, r0
 80169a4:	4b44      	ldr	r3, [pc, #272]	; (8016ab8 <__multiply+0x14c>)
 80169a6:	4845      	ldr	r0, [pc, #276]	; (8016abc <__multiply+0x150>)
 80169a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80169ac:	f7fe fc3a 	bl	8015224 <__assert_func>
 80169b0:	f100 0514 	add.w	r5, r0, #20
 80169b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80169b8:	462b      	mov	r3, r5
 80169ba:	2200      	movs	r2, #0
 80169bc:	4543      	cmp	r3, r8
 80169be:	d321      	bcc.n	8016a04 <__multiply+0x98>
 80169c0:	f104 0314 	add.w	r3, r4, #20
 80169c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80169c8:	f109 0314 	add.w	r3, r9, #20
 80169cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80169d0:	9202      	str	r2, [sp, #8]
 80169d2:	1b3a      	subs	r2, r7, r4
 80169d4:	3a15      	subs	r2, #21
 80169d6:	f022 0203 	bic.w	r2, r2, #3
 80169da:	3204      	adds	r2, #4
 80169dc:	f104 0115 	add.w	r1, r4, #21
 80169e0:	428f      	cmp	r7, r1
 80169e2:	bf38      	it	cc
 80169e4:	2204      	movcc	r2, #4
 80169e6:	9201      	str	r2, [sp, #4]
 80169e8:	9a02      	ldr	r2, [sp, #8]
 80169ea:	9303      	str	r3, [sp, #12]
 80169ec:	429a      	cmp	r2, r3
 80169ee:	d80c      	bhi.n	8016a0a <__multiply+0x9e>
 80169f0:	2e00      	cmp	r6, #0
 80169f2:	dd03      	ble.n	80169fc <__multiply+0x90>
 80169f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d05b      	beq.n	8016ab4 <__multiply+0x148>
 80169fc:	6106      	str	r6, [r0, #16]
 80169fe:	b005      	add	sp, #20
 8016a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a04:	f843 2b04 	str.w	r2, [r3], #4
 8016a08:	e7d8      	b.n	80169bc <__multiply+0x50>
 8016a0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8016a0e:	f1ba 0f00 	cmp.w	sl, #0
 8016a12:	d024      	beq.n	8016a5e <__multiply+0xf2>
 8016a14:	f104 0e14 	add.w	lr, r4, #20
 8016a18:	46a9      	mov	r9, r5
 8016a1a:	f04f 0c00 	mov.w	ip, #0
 8016a1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016a22:	f8d9 1000 	ldr.w	r1, [r9]
 8016a26:	fa1f fb82 	uxth.w	fp, r2
 8016a2a:	b289      	uxth	r1, r1
 8016a2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8016a30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016a34:	f8d9 2000 	ldr.w	r2, [r9]
 8016a38:	4461      	add	r1, ip
 8016a3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016a3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8016a42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016a46:	b289      	uxth	r1, r1
 8016a48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016a4c:	4577      	cmp	r7, lr
 8016a4e:	f849 1b04 	str.w	r1, [r9], #4
 8016a52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016a56:	d8e2      	bhi.n	8016a1e <__multiply+0xb2>
 8016a58:	9a01      	ldr	r2, [sp, #4]
 8016a5a:	f845 c002 	str.w	ip, [r5, r2]
 8016a5e:	9a03      	ldr	r2, [sp, #12]
 8016a60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016a64:	3304      	adds	r3, #4
 8016a66:	f1b9 0f00 	cmp.w	r9, #0
 8016a6a:	d021      	beq.n	8016ab0 <__multiply+0x144>
 8016a6c:	6829      	ldr	r1, [r5, #0]
 8016a6e:	f104 0c14 	add.w	ip, r4, #20
 8016a72:	46ae      	mov	lr, r5
 8016a74:	f04f 0a00 	mov.w	sl, #0
 8016a78:	f8bc b000 	ldrh.w	fp, [ip]
 8016a7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016a80:	fb09 220b 	mla	r2, r9, fp, r2
 8016a84:	4452      	add	r2, sl
 8016a86:	b289      	uxth	r1, r1
 8016a88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016a8c:	f84e 1b04 	str.w	r1, [lr], #4
 8016a90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016a94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016a98:	f8be 1000 	ldrh.w	r1, [lr]
 8016a9c:	fb09 110a 	mla	r1, r9, sl, r1
 8016aa0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8016aa4:	4567      	cmp	r7, ip
 8016aa6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016aaa:	d8e5      	bhi.n	8016a78 <__multiply+0x10c>
 8016aac:	9a01      	ldr	r2, [sp, #4]
 8016aae:	50a9      	str	r1, [r5, r2]
 8016ab0:	3504      	adds	r5, #4
 8016ab2:	e799      	b.n	80169e8 <__multiply+0x7c>
 8016ab4:	3e01      	subs	r6, #1
 8016ab6:	e79b      	b.n	80169f0 <__multiply+0x84>
 8016ab8:	0801af68 	.word	0x0801af68
 8016abc:	0801afd9 	.word	0x0801afd9

08016ac0 <__pow5mult>:
 8016ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ac4:	4615      	mov	r5, r2
 8016ac6:	f012 0203 	ands.w	r2, r2, #3
 8016aca:	4606      	mov	r6, r0
 8016acc:	460f      	mov	r7, r1
 8016ace:	d007      	beq.n	8016ae0 <__pow5mult+0x20>
 8016ad0:	4c25      	ldr	r4, [pc, #148]	; (8016b68 <__pow5mult+0xa8>)
 8016ad2:	3a01      	subs	r2, #1
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016ada:	f7ff fe53 	bl	8016784 <__multadd>
 8016ade:	4607      	mov	r7, r0
 8016ae0:	10ad      	asrs	r5, r5, #2
 8016ae2:	d03d      	beq.n	8016b60 <__pow5mult+0xa0>
 8016ae4:	69f4      	ldr	r4, [r6, #28]
 8016ae6:	b97c      	cbnz	r4, 8016b08 <__pow5mult+0x48>
 8016ae8:	2010      	movs	r0, #16
 8016aea:	f7fc fbe1 	bl	80132b0 <malloc>
 8016aee:	4602      	mov	r2, r0
 8016af0:	61f0      	str	r0, [r6, #28]
 8016af2:	b928      	cbnz	r0, 8016b00 <__pow5mult+0x40>
 8016af4:	4b1d      	ldr	r3, [pc, #116]	; (8016b6c <__pow5mult+0xac>)
 8016af6:	481e      	ldr	r0, [pc, #120]	; (8016b70 <__pow5mult+0xb0>)
 8016af8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8016afc:	f7fe fb92 	bl	8015224 <__assert_func>
 8016b00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016b04:	6004      	str	r4, [r0, #0]
 8016b06:	60c4      	str	r4, [r0, #12]
 8016b08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016b0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016b10:	b94c      	cbnz	r4, 8016b26 <__pow5mult+0x66>
 8016b12:	f240 2171 	movw	r1, #625	; 0x271
 8016b16:	4630      	mov	r0, r6
 8016b18:	f7ff ff12 	bl	8016940 <__i2b>
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016b22:	4604      	mov	r4, r0
 8016b24:	6003      	str	r3, [r0, #0]
 8016b26:	f04f 0900 	mov.w	r9, #0
 8016b2a:	07eb      	lsls	r3, r5, #31
 8016b2c:	d50a      	bpl.n	8016b44 <__pow5mult+0x84>
 8016b2e:	4639      	mov	r1, r7
 8016b30:	4622      	mov	r2, r4
 8016b32:	4630      	mov	r0, r6
 8016b34:	f7ff ff1a 	bl	801696c <__multiply>
 8016b38:	4639      	mov	r1, r7
 8016b3a:	4680      	mov	r8, r0
 8016b3c:	4630      	mov	r0, r6
 8016b3e:	f7ff fdff 	bl	8016740 <_Bfree>
 8016b42:	4647      	mov	r7, r8
 8016b44:	106d      	asrs	r5, r5, #1
 8016b46:	d00b      	beq.n	8016b60 <__pow5mult+0xa0>
 8016b48:	6820      	ldr	r0, [r4, #0]
 8016b4a:	b938      	cbnz	r0, 8016b5c <__pow5mult+0x9c>
 8016b4c:	4622      	mov	r2, r4
 8016b4e:	4621      	mov	r1, r4
 8016b50:	4630      	mov	r0, r6
 8016b52:	f7ff ff0b 	bl	801696c <__multiply>
 8016b56:	6020      	str	r0, [r4, #0]
 8016b58:	f8c0 9000 	str.w	r9, [r0]
 8016b5c:	4604      	mov	r4, r0
 8016b5e:	e7e4      	b.n	8016b2a <__pow5mult+0x6a>
 8016b60:	4638      	mov	r0, r7
 8016b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b66:	bf00      	nop
 8016b68:	0801b128 	.word	0x0801b128
 8016b6c:	0801ac68 	.word	0x0801ac68
 8016b70:	0801afd9 	.word	0x0801afd9

08016b74 <__lshift>:
 8016b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b78:	460c      	mov	r4, r1
 8016b7a:	6849      	ldr	r1, [r1, #4]
 8016b7c:	6923      	ldr	r3, [r4, #16]
 8016b7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016b82:	68a3      	ldr	r3, [r4, #8]
 8016b84:	4607      	mov	r7, r0
 8016b86:	4691      	mov	r9, r2
 8016b88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016b8c:	f108 0601 	add.w	r6, r8, #1
 8016b90:	42b3      	cmp	r3, r6
 8016b92:	db0b      	blt.n	8016bac <__lshift+0x38>
 8016b94:	4638      	mov	r0, r7
 8016b96:	f7ff fd93 	bl	80166c0 <_Balloc>
 8016b9a:	4605      	mov	r5, r0
 8016b9c:	b948      	cbnz	r0, 8016bb2 <__lshift+0x3e>
 8016b9e:	4602      	mov	r2, r0
 8016ba0:	4b28      	ldr	r3, [pc, #160]	; (8016c44 <__lshift+0xd0>)
 8016ba2:	4829      	ldr	r0, [pc, #164]	; (8016c48 <__lshift+0xd4>)
 8016ba4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8016ba8:	f7fe fb3c 	bl	8015224 <__assert_func>
 8016bac:	3101      	adds	r1, #1
 8016bae:	005b      	lsls	r3, r3, #1
 8016bb0:	e7ee      	b.n	8016b90 <__lshift+0x1c>
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	f100 0114 	add.w	r1, r0, #20
 8016bb8:	f100 0210 	add.w	r2, r0, #16
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	4553      	cmp	r3, sl
 8016bc0:	db33      	blt.n	8016c2a <__lshift+0xb6>
 8016bc2:	6920      	ldr	r0, [r4, #16]
 8016bc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016bc8:	f104 0314 	add.w	r3, r4, #20
 8016bcc:	f019 091f 	ands.w	r9, r9, #31
 8016bd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016bd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016bd8:	d02b      	beq.n	8016c32 <__lshift+0xbe>
 8016bda:	f1c9 0e20 	rsb	lr, r9, #32
 8016bde:	468a      	mov	sl, r1
 8016be0:	2200      	movs	r2, #0
 8016be2:	6818      	ldr	r0, [r3, #0]
 8016be4:	fa00 f009 	lsl.w	r0, r0, r9
 8016be8:	4310      	orrs	r0, r2
 8016bea:	f84a 0b04 	str.w	r0, [sl], #4
 8016bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bf2:	459c      	cmp	ip, r3
 8016bf4:	fa22 f20e 	lsr.w	r2, r2, lr
 8016bf8:	d8f3      	bhi.n	8016be2 <__lshift+0x6e>
 8016bfa:	ebac 0304 	sub.w	r3, ip, r4
 8016bfe:	3b15      	subs	r3, #21
 8016c00:	f023 0303 	bic.w	r3, r3, #3
 8016c04:	3304      	adds	r3, #4
 8016c06:	f104 0015 	add.w	r0, r4, #21
 8016c0a:	4584      	cmp	ip, r0
 8016c0c:	bf38      	it	cc
 8016c0e:	2304      	movcc	r3, #4
 8016c10:	50ca      	str	r2, [r1, r3]
 8016c12:	b10a      	cbz	r2, 8016c18 <__lshift+0xa4>
 8016c14:	f108 0602 	add.w	r6, r8, #2
 8016c18:	3e01      	subs	r6, #1
 8016c1a:	4638      	mov	r0, r7
 8016c1c:	612e      	str	r6, [r5, #16]
 8016c1e:	4621      	mov	r1, r4
 8016c20:	f7ff fd8e 	bl	8016740 <_Bfree>
 8016c24:	4628      	mov	r0, r5
 8016c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8016c2e:	3301      	adds	r3, #1
 8016c30:	e7c5      	b.n	8016bbe <__lshift+0x4a>
 8016c32:	3904      	subs	r1, #4
 8016c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c38:	f841 2f04 	str.w	r2, [r1, #4]!
 8016c3c:	459c      	cmp	ip, r3
 8016c3e:	d8f9      	bhi.n	8016c34 <__lshift+0xc0>
 8016c40:	e7ea      	b.n	8016c18 <__lshift+0xa4>
 8016c42:	bf00      	nop
 8016c44:	0801af68 	.word	0x0801af68
 8016c48:	0801afd9 	.word	0x0801afd9

08016c4c <__mcmp>:
 8016c4c:	b530      	push	{r4, r5, lr}
 8016c4e:	6902      	ldr	r2, [r0, #16]
 8016c50:	690c      	ldr	r4, [r1, #16]
 8016c52:	1b12      	subs	r2, r2, r4
 8016c54:	d10e      	bne.n	8016c74 <__mcmp+0x28>
 8016c56:	f100 0314 	add.w	r3, r0, #20
 8016c5a:	3114      	adds	r1, #20
 8016c5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016c60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016c64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016c68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016c6c:	42a5      	cmp	r5, r4
 8016c6e:	d003      	beq.n	8016c78 <__mcmp+0x2c>
 8016c70:	d305      	bcc.n	8016c7e <__mcmp+0x32>
 8016c72:	2201      	movs	r2, #1
 8016c74:	4610      	mov	r0, r2
 8016c76:	bd30      	pop	{r4, r5, pc}
 8016c78:	4283      	cmp	r3, r0
 8016c7a:	d3f3      	bcc.n	8016c64 <__mcmp+0x18>
 8016c7c:	e7fa      	b.n	8016c74 <__mcmp+0x28>
 8016c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8016c82:	e7f7      	b.n	8016c74 <__mcmp+0x28>

08016c84 <__mdiff>:
 8016c84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c88:	460c      	mov	r4, r1
 8016c8a:	4606      	mov	r6, r0
 8016c8c:	4611      	mov	r1, r2
 8016c8e:	4620      	mov	r0, r4
 8016c90:	4690      	mov	r8, r2
 8016c92:	f7ff ffdb 	bl	8016c4c <__mcmp>
 8016c96:	1e05      	subs	r5, r0, #0
 8016c98:	d110      	bne.n	8016cbc <__mdiff+0x38>
 8016c9a:	4629      	mov	r1, r5
 8016c9c:	4630      	mov	r0, r6
 8016c9e:	f7ff fd0f 	bl	80166c0 <_Balloc>
 8016ca2:	b930      	cbnz	r0, 8016cb2 <__mdiff+0x2e>
 8016ca4:	4b3a      	ldr	r3, [pc, #232]	; (8016d90 <__mdiff+0x10c>)
 8016ca6:	4602      	mov	r2, r0
 8016ca8:	f240 2137 	movw	r1, #567	; 0x237
 8016cac:	4839      	ldr	r0, [pc, #228]	; (8016d94 <__mdiff+0x110>)
 8016cae:	f7fe fab9 	bl	8015224 <__assert_func>
 8016cb2:	2301      	movs	r3, #1
 8016cb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016cb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cbc:	bfa4      	itt	ge
 8016cbe:	4643      	movge	r3, r8
 8016cc0:	46a0      	movge	r8, r4
 8016cc2:	4630      	mov	r0, r6
 8016cc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016cc8:	bfa6      	itte	ge
 8016cca:	461c      	movge	r4, r3
 8016ccc:	2500      	movge	r5, #0
 8016cce:	2501      	movlt	r5, #1
 8016cd0:	f7ff fcf6 	bl	80166c0 <_Balloc>
 8016cd4:	b920      	cbnz	r0, 8016ce0 <__mdiff+0x5c>
 8016cd6:	4b2e      	ldr	r3, [pc, #184]	; (8016d90 <__mdiff+0x10c>)
 8016cd8:	4602      	mov	r2, r0
 8016cda:	f240 2145 	movw	r1, #581	; 0x245
 8016cde:	e7e5      	b.n	8016cac <__mdiff+0x28>
 8016ce0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016ce4:	6926      	ldr	r6, [r4, #16]
 8016ce6:	60c5      	str	r5, [r0, #12]
 8016ce8:	f104 0914 	add.w	r9, r4, #20
 8016cec:	f108 0514 	add.w	r5, r8, #20
 8016cf0:	f100 0e14 	add.w	lr, r0, #20
 8016cf4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016cf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016cfc:	f108 0210 	add.w	r2, r8, #16
 8016d00:	46f2      	mov	sl, lr
 8016d02:	2100      	movs	r1, #0
 8016d04:	f859 3b04 	ldr.w	r3, [r9], #4
 8016d08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016d0c:	fa11 f88b 	uxtah	r8, r1, fp
 8016d10:	b299      	uxth	r1, r3
 8016d12:	0c1b      	lsrs	r3, r3, #16
 8016d14:	eba8 0801 	sub.w	r8, r8, r1
 8016d18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016d1c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016d20:	fa1f f888 	uxth.w	r8, r8
 8016d24:	1419      	asrs	r1, r3, #16
 8016d26:	454e      	cmp	r6, r9
 8016d28:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016d2c:	f84a 3b04 	str.w	r3, [sl], #4
 8016d30:	d8e8      	bhi.n	8016d04 <__mdiff+0x80>
 8016d32:	1b33      	subs	r3, r6, r4
 8016d34:	3b15      	subs	r3, #21
 8016d36:	f023 0303 	bic.w	r3, r3, #3
 8016d3a:	3304      	adds	r3, #4
 8016d3c:	3415      	adds	r4, #21
 8016d3e:	42a6      	cmp	r6, r4
 8016d40:	bf38      	it	cc
 8016d42:	2304      	movcc	r3, #4
 8016d44:	441d      	add	r5, r3
 8016d46:	4473      	add	r3, lr
 8016d48:	469e      	mov	lr, r3
 8016d4a:	462e      	mov	r6, r5
 8016d4c:	4566      	cmp	r6, ip
 8016d4e:	d30e      	bcc.n	8016d6e <__mdiff+0xea>
 8016d50:	f10c 0203 	add.w	r2, ip, #3
 8016d54:	1b52      	subs	r2, r2, r5
 8016d56:	f022 0203 	bic.w	r2, r2, #3
 8016d5a:	3d03      	subs	r5, #3
 8016d5c:	45ac      	cmp	ip, r5
 8016d5e:	bf38      	it	cc
 8016d60:	2200      	movcc	r2, #0
 8016d62:	4413      	add	r3, r2
 8016d64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016d68:	b17a      	cbz	r2, 8016d8a <__mdiff+0x106>
 8016d6a:	6107      	str	r7, [r0, #16]
 8016d6c:	e7a4      	b.n	8016cb8 <__mdiff+0x34>
 8016d6e:	f856 8b04 	ldr.w	r8, [r6], #4
 8016d72:	fa11 f288 	uxtah	r2, r1, r8
 8016d76:	1414      	asrs	r4, r2, #16
 8016d78:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016d7c:	b292      	uxth	r2, r2
 8016d7e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016d82:	f84e 2b04 	str.w	r2, [lr], #4
 8016d86:	1421      	asrs	r1, r4, #16
 8016d88:	e7e0      	b.n	8016d4c <__mdiff+0xc8>
 8016d8a:	3f01      	subs	r7, #1
 8016d8c:	e7ea      	b.n	8016d64 <__mdiff+0xe0>
 8016d8e:	bf00      	nop
 8016d90:	0801af68 	.word	0x0801af68
 8016d94:	0801afd9 	.word	0x0801afd9

08016d98 <__ulp>:
 8016d98:	b082      	sub	sp, #8
 8016d9a:	ed8d 0b00 	vstr	d0, [sp]
 8016d9e:	9a01      	ldr	r2, [sp, #4]
 8016da0:	4b0f      	ldr	r3, [pc, #60]	; (8016de0 <__ulp+0x48>)
 8016da2:	4013      	ands	r3, r2
 8016da4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	dc08      	bgt.n	8016dbe <__ulp+0x26>
 8016dac:	425b      	negs	r3, r3
 8016dae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8016db2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016db6:	da04      	bge.n	8016dc2 <__ulp+0x2a>
 8016db8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016dbc:	4113      	asrs	r3, r2
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	e008      	b.n	8016dd4 <__ulp+0x3c>
 8016dc2:	f1a2 0314 	sub.w	r3, r2, #20
 8016dc6:	2b1e      	cmp	r3, #30
 8016dc8:	bfda      	itte	le
 8016dca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8016dce:	40da      	lsrle	r2, r3
 8016dd0:	2201      	movgt	r2, #1
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	4619      	mov	r1, r3
 8016dd6:	4610      	mov	r0, r2
 8016dd8:	ec41 0b10 	vmov	d0, r0, r1
 8016ddc:	b002      	add	sp, #8
 8016dde:	4770      	bx	lr
 8016de0:	7ff00000 	.word	0x7ff00000

08016de4 <__b2d>:
 8016de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016de8:	6906      	ldr	r6, [r0, #16]
 8016dea:	f100 0814 	add.w	r8, r0, #20
 8016dee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016df2:	1f37      	subs	r7, r6, #4
 8016df4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016df8:	4610      	mov	r0, r2
 8016dfa:	f7ff fd53 	bl	80168a4 <__hi0bits>
 8016dfe:	f1c0 0320 	rsb	r3, r0, #32
 8016e02:	280a      	cmp	r0, #10
 8016e04:	600b      	str	r3, [r1, #0]
 8016e06:	491b      	ldr	r1, [pc, #108]	; (8016e74 <__b2d+0x90>)
 8016e08:	dc15      	bgt.n	8016e36 <__b2d+0x52>
 8016e0a:	f1c0 0c0b 	rsb	ip, r0, #11
 8016e0e:	fa22 f30c 	lsr.w	r3, r2, ip
 8016e12:	45b8      	cmp	r8, r7
 8016e14:	ea43 0501 	orr.w	r5, r3, r1
 8016e18:	bf34      	ite	cc
 8016e1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016e1e:	2300      	movcs	r3, #0
 8016e20:	3015      	adds	r0, #21
 8016e22:	fa02 f000 	lsl.w	r0, r2, r0
 8016e26:	fa23 f30c 	lsr.w	r3, r3, ip
 8016e2a:	4303      	orrs	r3, r0
 8016e2c:	461c      	mov	r4, r3
 8016e2e:	ec45 4b10 	vmov	d0, r4, r5
 8016e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e36:	45b8      	cmp	r8, r7
 8016e38:	bf3a      	itte	cc
 8016e3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016e3e:	f1a6 0708 	subcc.w	r7, r6, #8
 8016e42:	2300      	movcs	r3, #0
 8016e44:	380b      	subs	r0, #11
 8016e46:	d012      	beq.n	8016e6e <__b2d+0x8a>
 8016e48:	f1c0 0120 	rsb	r1, r0, #32
 8016e4c:	fa23 f401 	lsr.w	r4, r3, r1
 8016e50:	4082      	lsls	r2, r0
 8016e52:	4322      	orrs	r2, r4
 8016e54:	4547      	cmp	r7, r8
 8016e56:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8016e5a:	bf8c      	ite	hi
 8016e5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016e60:	2200      	movls	r2, #0
 8016e62:	4083      	lsls	r3, r0
 8016e64:	40ca      	lsrs	r2, r1
 8016e66:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016e6a:	4313      	orrs	r3, r2
 8016e6c:	e7de      	b.n	8016e2c <__b2d+0x48>
 8016e6e:	ea42 0501 	orr.w	r5, r2, r1
 8016e72:	e7db      	b.n	8016e2c <__b2d+0x48>
 8016e74:	3ff00000 	.word	0x3ff00000

08016e78 <__d2b>:
 8016e78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016e7c:	460f      	mov	r7, r1
 8016e7e:	2101      	movs	r1, #1
 8016e80:	ec59 8b10 	vmov	r8, r9, d0
 8016e84:	4616      	mov	r6, r2
 8016e86:	f7ff fc1b 	bl	80166c0 <_Balloc>
 8016e8a:	4604      	mov	r4, r0
 8016e8c:	b930      	cbnz	r0, 8016e9c <__d2b+0x24>
 8016e8e:	4602      	mov	r2, r0
 8016e90:	4b24      	ldr	r3, [pc, #144]	; (8016f24 <__d2b+0xac>)
 8016e92:	4825      	ldr	r0, [pc, #148]	; (8016f28 <__d2b+0xb0>)
 8016e94:	f240 310f 	movw	r1, #783	; 0x30f
 8016e98:	f7fe f9c4 	bl	8015224 <__assert_func>
 8016e9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016ea0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016ea4:	bb2d      	cbnz	r5, 8016ef2 <__d2b+0x7a>
 8016ea6:	9301      	str	r3, [sp, #4]
 8016ea8:	f1b8 0300 	subs.w	r3, r8, #0
 8016eac:	d026      	beq.n	8016efc <__d2b+0x84>
 8016eae:	4668      	mov	r0, sp
 8016eb0:	9300      	str	r3, [sp, #0]
 8016eb2:	f7ff fd17 	bl	80168e4 <__lo0bits>
 8016eb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016eba:	b1e8      	cbz	r0, 8016ef8 <__d2b+0x80>
 8016ebc:	f1c0 0320 	rsb	r3, r0, #32
 8016ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8016ec4:	430b      	orrs	r3, r1
 8016ec6:	40c2      	lsrs	r2, r0
 8016ec8:	6163      	str	r3, [r4, #20]
 8016eca:	9201      	str	r2, [sp, #4]
 8016ecc:	9b01      	ldr	r3, [sp, #4]
 8016ece:	61a3      	str	r3, [r4, #24]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	bf14      	ite	ne
 8016ed4:	2202      	movne	r2, #2
 8016ed6:	2201      	moveq	r2, #1
 8016ed8:	6122      	str	r2, [r4, #16]
 8016eda:	b1bd      	cbz	r5, 8016f0c <__d2b+0x94>
 8016edc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016ee0:	4405      	add	r5, r0
 8016ee2:	603d      	str	r5, [r7, #0]
 8016ee4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016ee8:	6030      	str	r0, [r6, #0]
 8016eea:	4620      	mov	r0, r4
 8016eec:	b003      	add	sp, #12
 8016eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016ef6:	e7d6      	b.n	8016ea6 <__d2b+0x2e>
 8016ef8:	6161      	str	r1, [r4, #20]
 8016efa:	e7e7      	b.n	8016ecc <__d2b+0x54>
 8016efc:	a801      	add	r0, sp, #4
 8016efe:	f7ff fcf1 	bl	80168e4 <__lo0bits>
 8016f02:	9b01      	ldr	r3, [sp, #4]
 8016f04:	6163      	str	r3, [r4, #20]
 8016f06:	3020      	adds	r0, #32
 8016f08:	2201      	movs	r2, #1
 8016f0a:	e7e5      	b.n	8016ed8 <__d2b+0x60>
 8016f0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016f10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016f14:	6038      	str	r0, [r7, #0]
 8016f16:	6918      	ldr	r0, [r3, #16]
 8016f18:	f7ff fcc4 	bl	80168a4 <__hi0bits>
 8016f1c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016f20:	e7e2      	b.n	8016ee8 <__d2b+0x70>
 8016f22:	bf00      	nop
 8016f24:	0801af68 	.word	0x0801af68
 8016f28:	0801afd9 	.word	0x0801afd9

08016f2c <__ratio>:
 8016f2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f30:	4688      	mov	r8, r1
 8016f32:	4669      	mov	r1, sp
 8016f34:	4681      	mov	r9, r0
 8016f36:	f7ff ff55 	bl	8016de4 <__b2d>
 8016f3a:	a901      	add	r1, sp, #4
 8016f3c:	4640      	mov	r0, r8
 8016f3e:	ec55 4b10 	vmov	r4, r5, d0
 8016f42:	f7ff ff4f 	bl	8016de4 <__b2d>
 8016f46:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016f4a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016f4e:	eba3 0c02 	sub.w	ip, r3, r2
 8016f52:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016f56:	1a9b      	subs	r3, r3, r2
 8016f58:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016f5c:	ec51 0b10 	vmov	r0, r1, d0
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	bfd6      	itet	le
 8016f64:	460a      	movle	r2, r1
 8016f66:	462a      	movgt	r2, r5
 8016f68:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016f6c:	468b      	mov	fp, r1
 8016f6e:	462f      	mov	r7, r5
 8016f70:	bfd4      	ite	le
 8016f72:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016f76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016f7a:	4620      	mov	r0, r4
 8016f7c:	ee10 2a10 	vmov	r2, s0
 8016f80:	465b      	mov	r3, fp
 8016f82:	4639      	mov	r1, r7
 8016f84:	f7e9 fc82 	bl	800088c <__aeabi_ddiv>
 8016f88:	ec41 0b10 	vmov	d0, r0, r1
 8016f8c:	b003      	add	sp, #12
 8016f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016f92 <__copybits>:
 8016f92:	3901      	subs	r1, #1
 8016f94:	b570      	push	{r4, r5, r6, lr}
 8016f96:	1149      	asrs	r1, r1, #5
 8016f98:	6914      	ldr	r4, [r2, #16]
 8016f9a:	3101      	adds	r1, #1
 8016f9c:	f102 0314 	add.w	r3, r2, #20
 8016fa0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016fa4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016fa8:	1f05      	subs	r5, r0, #4
 8016faa:	42a3      	cmp	r3, r4
 8016fac:	d30c      	bcc.n	8016fc8 <__copybits+0x36>
 8016fae:	1aa3      	subs	r3, r4, r2
 8016fb0:	3b11      	subs	r3, #17
 8016fb2:	f023 0303 	bic.w	r3, r3, #3
 8016fb6:	3211      	adds	r2, #17
 8016fb8:	42a2      	cmp	r2, r4
 8016fba:	bf88      	it	hi
 8016fbc:	2300      	movhi	r3, #0
 8016fbe:	4418      	add	r0, r3
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	4288      	cmp	r0, r1
 8016fc4:	d305      	bcc.n	8016fd2 <__copybits+0x40>
 8016fc6:	bd70      	pop	{r4, r5, r6, pc}
 8016fc8:	f853 6b04 	ldr.w	r6, [r3], #4
 8016fcc:	f845 6f04 	str.w	r6, [r5, #4]!
 8016fd0:	e7eb      	b.n	8016faa <__copybits+0x18>
 8016fd2:	f840 3b04 	str.w	r3, [r0], #4
 8016fd6:	e7f4      	b.n	8016fc2 <__copybits+0x30>

08016fd8 <__any_on>:
 8016fd8:	f100 0214 	add.w	r2, r0, #20
 8016fdc:	6900      	ldr	r0, [r0, #16]
 8016fde:	114b      	asrs	r3, r1, #5
 8016fe0:	4298      	cmp	r0, r3
 8016fe2:	b510      	push	{r4, lr}
 8016fe4:	db11      	blt.n	801700a <__any_on+0x32>
 8016fe6:	dd0a      	ble.n	8016ffe <__any_on+0x26>
 8016fe8:	f011 011f 	ands.w	r1, r1, #31
 8016fec:	d007      	beq.n	8016ffe <__any_on+0x26>
 8016fee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016ff2:	fa24 f001 	lsr.w	r0, r4, r1
 8016ff6:	fa00 f101 	lsl.w	r1, r0, r1
 8016ffa:	428c      	cmp	r4, r1
 8016ffc:	d10b      	bne.n	8017016 <__any_on+0x3e>
 8016ffe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017002:	4293      	cmp	r3, r2
 8017004:	d803      	bhi.n	801700e <__any_on+0x36>
 8017006:	2000      	movs	r0, #0
 8017008:	bd10      	pop	{r4, pc}
 801700a:	4603      	mov	r3, r0
 801700c:	e7f7      	b.n	8016ffe <__any_on+0x26>
 801700e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017012:	2900      	cmp	r1, #0
 8017014:	d0f5      	beq.n	8017002 <__any_on+0x2a>
 8017016:	2001      	movs	r0, #1
 8017018:	e7f6      	b.n	8017008 <__any_on+0x30>

0801701a <__ascii_wctomb>:
 801701a:	b149      	cbz	r1, 8017030 <__ascii_wctomb+0x16>
 801701c:	2aff      	cmp	r2, #255	; 0xff
 801701e:	bf85      	ittet	hi
 8017020:	238a      	movhi	r3, #138	; 0x8a
 8017022:	6003      	strhi	r3, [r0, #0]
 8017024:	700a      	strbls	r2, [r1, #0]
 8017026:	f04f 30ff 	movhi.w	r0, #4294967295
 801702a:	bf98      	it	ls
 801702c:	2001      	movls	r0, #1
 801702e:	4770      	bx	lr
 8017030:	4608      	mov	r0, r1
 8017032:	4770      	bx	lr

08017034 <__sfputc_r>:
 8017034:	6893      	ldr	r3, [r2, #8]
 8017036:	3b01      	subs	r3, #1
 8017038:	2b00      	cmp	r3, #0
 801703a:	b410      	push	{r4}
 801703c:	6093      	str	r3, [r2, #8]
 801703e:	da08      	bge.n	8017052 <__sfputc_r+0x1e>
 8017040:	6994      	ldr	r4, [r2, #24]
 8017042:	42a3      	cmp	r3, r4
 8017044:	db01      	blt.n	801704a <__sfputc_r+0x16>
 8017046:	290a      	cmp	r1, #10
 8017048:	d103      	bne.n	8017052 <__sfputc_r+0x1e>
 801704a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801704e:	f7fd bf02 	b.w	8014e56 <__swbuf_r>
 8017052:	6813      	ldr	r3, [r2, #0]
 8017054:	1c58      	adds	r0, r3, #1
 8017056:	6010      	str	r0, [r2, #0]
 8017058:	7019      	strb	r1, [r3, #0]
 801705a:	4608      	mov	r0, r1
 801705c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017060:	4770      	bx	lr

08017062 <__sfputs_r>:
 8017062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017064:	4606      	mov	r6, r0
 8017066:	460f      	mov	r7, r1
 8017068:	4614      	mov	r4, r2
 801706a:	18d5      	adds	r5, r2, r3
 801706c:	42ac      	cmp	r4, r5
 801706e:	d101      	bne.n	8017074 <__sfputs_r+0x12>
 8017070:	2000      	movs	r0, #0
 8017072:	e007      	b.n	8017084 <__sfputs_r+0x22>
 8017074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017078:	463a      	mov	r2, r7
 801707a:	4630      	mov	r0, r6
 801707c:	f7ff ffda 	bl	8017034 <__sfputc_r>
 8017080:	1c43      	adds	r3, r0, #1
 8017082:	d1f3      	bne.n	801706c <__sfputs_r+0xa>
 8017084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017088 <_vfiprintf_r>:
 8017088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801708c:	460d      	mov	r5, r1
 801708e:	b09d      	sub	sp, #116	; 0x74
 8017090:	4614      	mov	r4, r2
 8017092:	4698      	mov	r8, r3
 8017094:	4606      	mov	r6, r0
 8017096:	b118      	cbz	r0, 80170a0 <_vfiprintf_r+0x18>
 8017098:	6a03      	ldr	r3, [r0, #32]
 801709a:	b90b      	cbnz	r3, 80170a0 <_vfiprintf_r+0x18>
 801709c:	f7fd fdf4 	bl	8014c88 <__sinit>
 80170a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80170a2:	07d9      	lsls	r1, r3, #31
 80170a4:	d405      	bmi.n	80170b2 <_vfiprintf_r+0x2a>
 80170a6:	89ab      	ldrh	r3, [r5, #12]
 80170a8:	059a      	lsls	r2, r3, #22
 80170aa:	d402      	bmi.n	80170b2 <_vfiprintf_r+0x2a>
 80170ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80170ae:	f7fe f898 	bl	80151e2 <__retarget_lock_acquire_recursive>
 80170b2:	89ab      	ldrh	r3, [r5, #12]
 80170b4:	071b      	lsls	r3, r3, #28
 80170b6:	d501      	bpl.n	80170bc <_vfiprintf_r+0x34>
 80170b8:	692b      	ldr	r3, [r5, #16]
 80170ba:	b99b      	cbnz	r3, 80170e4 <_vfiprintf_r+0x5c>
 80170bc:	4629      	mov	r1, r5
 80170be:	4630      	mov	r0, r6
 80170c0:	f7fd ff06 	bl	8014ed0 <__swsetup_r>
 80170c4:	b170      	cbz	r0, 80170e4 <_vfiprintf_r+0x5c>
 80170c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80170c8:	07dc      	lsls	r4, r3, #31
 80170ca:	d504      	bpl.n	80170d6 <_vfiprintf_r+0x4e>
 80170cc:	f04f 30ff 	mov.w	r0, #4294967295
 80170d0:	b01d      	add	sp, #116	; 0x74
 80170d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170d6:	89ab      	ldrh	r3, [r5, #12]
 80170d8:	0598      	lsls	r0, r3, #22
 80170da:	d4f7      	bmi.n	80170cc <_vfiprintf_r+0x44>
 80170dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80170de:	f7fe f881 	bl	80151e4 <__retarget_lock_release_recursive>
 80170e2:	e7f3      	b.n	80170cc <_vfiprintf_r+0x44>
 80170e4:	2300      	movs	r3, #0
 80170e6:	9309      	str	r3, [sp, #36]	; 0x24
 80170e8:	2320      	movs	r3, #32
 80170ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80170ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80170f2:	2330      	movs	r3, #48	; 0x30
 80170f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80172a8 <_vfiprintf_r+0x220>
 80170f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80170fc:	f04f 0901 	mov.w	r9, #1
 8017100:	4623      	mov	r3, r4
 8017102:	469a      	mov	sl, r3
 8017104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017108:	b10a      	cbz	r2, 801710e <_vfiprintf_r+0x86>
 801710a:	2a25      	cmp	r2, #37	; 0x25
 801710c:	d1f9      	bne.n	8017102 <_vfiprintf_r+0x7a>
 801710e:	ebba 0b04 	subs.w	fp, sl, r4
 8017112:	d00b      	beq.n	801712c <_vfiprintf_r+0xa4>
 8017114:	465b      	mov	r3, fp
 8017116:	4622      	mov	r2, r4
 8017118:	4629      	mov	r1, r5
 801711a:	4630      	mov	r0, r6
 801711c:	f7ff ffa1 	bl	8017062 <__sfputs_r>
 8017120:	3001      	adds	r0, #1
 8017122:	f000 80a9 	beq.w	8017278 <_vfiprintf_r+0x1f0>
 8017126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017128:	445a      	add	r2, fp
 801712a:	9209      	str	r2, [sp, #36]	; 0x24
 801712c:	f89a 3000 	ldrb.w	r3, [sl]
 8017130:	2b00      	cmp	r3, #0
 8017132:	f000 80a1 	beq.w	8017278 <_vfiprintf_r+0x1f0>
 8017136:	2300      	movs	r3, #0
 8017138:	f04f 32ff 	mov.w	r2, #4294967295
 801713c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017140:	f10a 0a01 	add.w	sl, sl, #1
 8017144:	9304      	str	r3, [sp, #16]
 8017146:	9307      	str	r3, [sp, #28]
 8017148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801714c:	931a      	str	r3, [sp, #104]	; 0x68
 801714e:	4654      	mov	r4, sl
 8017150:	2205      	movs	r2, #5
 8017152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017156:	4854      	ldr	r0, [pc, #336]	; (80172a8 <_vfiprintf_r+0x220>)
 8017158:	f7e9 f85a 	bl	8000210 <memchr>
 801715c:	9a04      	ldr	r2, [sp, #16]
 801715e:	b9d8      	cbnz	r0, 8017198 <_vfiprintf_r+0x110>
 8017160:	06d1      	lsls	r1, r2, #27
 8017162:	bf44      	itt	mi
 8017164:	2320      	movmi	r3, #32
 8017166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801716a:	0713      	lsls	r3, r2, #28
 801716c:	bf44      	itt	mi
 801716e:	232b      	movmi	r3, #43	; 0x2b
 8017170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017174:	f89a 3000 	ldrb.w	r3, [sl]
 8017178:	2b2a      	cmp	r3, #42	; 0x2a
 801717a:	d015      	beq.n	80171a8 <_vfiprintf_r+0x120>
 801717c:	9a07      	ldr	r2, [sp, #28]
 801717e:	4654      	mov	r4, sl
 8017180:	2000      	movs	r0, #0
 8017182:	f04f 0c0a 	mov.w	ip, #10
 8017186:	4621      	mov	r1, r4
 8017188:	f811 3b01 	ldrb.w	r3, [r1], #1
 801718c:	3b30      	subs	r3, #48	; 0x30
 801718e:	2b09      	cmp	r3, #9
 8017190:	d94d      	bls.n	801722e <_vfiprintf_r+0x1a6>
 8017192:	b1b0      	cbz	r0, 80171c2 <_vfiprintf_r+0x13a>
 8017194:	9207      	str	r2, [sp, #28]
 8017196:	e014      	b.n	80171c2 <_vfiprintf_r+0x13a>
 8017198:	eba0 0308 	sub.w	r3, r0, r8
 801719c:	fa09 f303 	lsl.w	r3, r9, r3
 80171a0:	4313      	orrs	r3, r2
 80171a2:	9304      	str	r3, [sp, #16]
 80171a4:	46a2      	mov	sl, r4
 80171a6:	e7d2      	b.n	801714e <_vfiprintf_r+0xc6>
 80171a8:	9b03      	ldr	r3, [sp, #12]
 80171aa:	1d19      	adds	r1, r3, #4
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	9103      	str	r1, [sp, #12]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	bfbb      	ittet	lt
 80171b4:	425b      	neglt	r3, r3
 80171b6:	f042 0202 	orrlt.w	r2, r2, #2
 80171ba:	9307      	strge	r3, [sp, #28]
 80171bc:	9307      	strlt	r3, [sp, #28]
 80171be:	bfb8      	it	lt
 80171c0:	9204      	strlt	r2, [sp, #16]
 80171c2:	7823      	ldrb	r3, [r4, #0]
 80171c4:	2b2e      	cmp	r3, #46	; 0x2e
 80171c6:	d10c      	bne.n	80171e2 <_vfiprintf_r+0x15a>
 80171c8:	7863      	ldrb	r3, [r4, #1]
 80171ca:	2b2a      	cmp	r3, #42	; 0x2a
 80171cc:	d134      	bne.n	8017238 <_vfiprintf_r+0x1b0>
 80171ce:	9b03      	ldr	r3, [sp, #12]
 80171d0:	1d1a      	adds	r2, r3, #4
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	9203      	str	r2, [sp, #12]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	bfb8      	it	lt
 80171da:	f04f 33ff 	movlt.w	r3, #4294967295
 80171de:	3402      	adds	r4, #2
 80171e0:	9305      	str	r3, [sp, #20]
 80171e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80172b8 <_vfiprintf_r+0x230>
 80171e6:	7821      	ldrb	r1, [r4, #0]
 80171e8:	2203      	movs	r2, #3
 80171ea:	4650      	mov	r0, sl
 80171ec:	f7e9 f810 	bl	8000210 <memchr>
 80171f0:	b138      	cbz	r0, 8017202 <_vfiprintf_r+0x17a>
 80171f2:	9b04      	ldr	r3, [sp, #16]
 80171f4:	eba0 000a 	sub.w	r0, r0, sl
 80171f8:	2240      	movs	r2, #64	; 0x40
 80171fa:	4082      	lsls	r2, r0
 80171fc:	4313      	orrs	r3, r2
 80171fe:	3401      	adds	r4, #1
 8017200:	9304      	str	r3, [sp, #16]
 8017202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017206:	4829      	ldr	r0, [pc, #164]	; (80172ac <_vfiprintf_r+0x224>)
 8017208:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801720c:	2206      	movs	r2, #6
 801720e:	f7e8 ffff 	bl	8000210 <memchr>
 8017212:	2800      	cmp	r0, #0
 8017214:	d03f      	beq.n	8017296 <_vfiprintf_r+0x20e>
 8017216:	4b26      	ldr	r3, [pc, #152]	; (80172b0 <_vfiprintf_r+0x228>)
 8017218:	bb1b      	cbnz	r3, 8017262 <_vfiprintf_r+0x1da>
 801721a:	9b03      	ldr	r3, [sp, #12]
 801721c:	3307      	adds	r3, #7
 801721e:	f023 0307 	bic.w	r3, r3, #7
 8017222:	3308      	adds	r3, #8
 8017224:	9303      	str	r3, [sp, #12]
 8017226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017228:	443b      	add	r3, r7
 801722a:	9309      	str	r3, [sp, #36]	; 0x24
 801722c:	e768      	b.n	8017100 <_vfiprintf_r+0x78>
 801722e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017232:	460c      	mov	r4, r1
 8017234:	2001      	movs	r0, #1
 8017236:	e7a6      	b.n	8017186 <_vfiprintf_r+0xfe>
 8017238:	2300      	movs	r3, #0
 801723a:	3401      	adds	r4, #1
 801723c:	9305      	str	r3, [sp, #20]
 801723e:	4619      	mov	r1, r3
 8017240:	f04f 0c0a 	mov.w	ip, #10
 8017244:	4620      	mov	r0, r4
 8017246:	f810 2b01 	ldrb.w	r2, [r0], #1
 801724a:	3a30      	subs	r2, #48	; 0x30
 801724c:	2a09      	cmp	r2, #9
 801724e:	d903      	bls.n	8017258 <_vfiprintf_r+0x1d0>
 8017250:	2b00      	cmp	r3, #0
 8017252:	d0c6      	beq.n	80171e2 <_vfiprintf_r+0x15a>
 8017254:	9105      	str	r1, [sp, #20]
 8017256:	e7c4      	b.n	80171e2 <_vfiprintf_r+0x15a>
 8017258:	fb0c 2101 	mla	r1, ip, r1, r2
 801725c:	4604      	mov	r4, r0
 801725e:	2301      	movs	r3, #1
 8017260:	e7f0      	b.n	8017244 <_vfiprintf_r+0x1bc>
 8017262:	ab03      	add	r3, sp, #12
 8017264:	9300      	str	r3, [sp, #0]
 8017266:	462a      	mov	r2, r5
 8017268:	4b12      	ldr	r3, [pc, #72]	; (80172b4 <_vfiprintf_r+0x22c>)
 801726a:	a904      	add	r1, sp, #16
 801726c:	4630      	mov	r0, r6
 801726e:	f7fd f8b9 	bl	80143e4 <_printf_float>
 8017272:	4607      	mov	r7, r0
 8017274:	1c78      	adds	r0, r7, #1
 8017276:	d1d6      	bne.n	8017226 <_vfiprintf_r+0x19e>
 8017278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801727a:	07d9      	lsls	r1, r3, #31
 801727c:	d405      	bmi.n	801728a <_vfiprintf_r+0x202>
 801727e:	89ab      	ldrh	r3, [r5, #12]
 8017280:	059a      	lsls	r2, r3, #22
 8017282:	d402      	bmi.n	801728a <_vfiprintf_r+0x202>
 8017284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017286:	f7fd ffad 	bl	80151e4 <__retarget_lock_release_recursive>
 801728a:	89ab      	ldrh	r3, [r5, #12]
 801728c:	065b      	lsls	r3, r3, #25
 801728e:	f53f af1d 	bmi.w	80170cc <_vfiprintf_r+0x44>
 8017292:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017294:	e71c      	b.n	80170d0 <_vfiprintf_r+0x48>
 8017296:	ab03      	add	r3, sp, #12
 8017298:	9300      	str	r3, [sp, #0]
 801729a:	462a      	mov	r2, r5
 801729c:	4b05      	ldr	r3, [pc, #20]	; (80172b4 <_vfiprintf_r+0x22c>)
 801729e:	a904      	add	r1, sp, #16
 80172a0:	4630      	mov	r0, r6
 80172a2:	f7fd fb43 	bl	801492c <_printf_i>
 80172a6:	e7e4      	b.n	8017272 <_vfiprintf_r+0x1ea>
 80172a8:	0801b134 	.word	0x0801b134
 80172ac:	0801b13e 	.word	0x0801b13e
 80172b0:	080143e5 	.word	0x080143e5
 80172b4:	08017063 	.word	0x08017063
 80172b8:	0801b13a 	.word	0x0801b13a

080172bc <__sflush_r>:
 80172bc:	898a      	ldrh	r2, [r1, #12]
 80172be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172c2:	4605      	mov	r5, r0
 80172c4:	0710      	lsls	r0, r2, #28
 80172c6:	460c      	mov	r4, r1
 80172c8:	d458      	bmi.n	801737c <__sflush_r+0xc0>
 80172ca:	684b      	ldr	r3, [r1, #4]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	dc05      	bgt.n	80172dc <__sflush_r+0x20>
 80172d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	dc02      	bgt.n	80172dc <__sflush_r+0x20>
 80172d6:	2000      	movs	r0, #0
 80172d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80172de:	2e00      	cmp	r6, #0
 80172e0:	d0f9      	beq.n	80172d6 <__sflush_r+0x1a>
 80172e2:	2300      	movs	r3, #0
 80172e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80172e8:	682f      	ldr	r7, [r5, #0]
 80172ea:	6a21      	ldr	r1, [r4, #32]
 80172ec:	602b      	str	r3, [r5, #0]
 80172ee:	d032      	beq.n	8017356 <__sflush_r+0x9a>
 80172f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80172f2:	89a3      	ldrh	r3, [r4, #12]
 80172f4:	075a      	lsls	r2, r3, #29
 80172f6:	d505      	bpl.n	8017304 <__sflush_r+0x48>
 80172f8:	6863      	ldr	r3, [r4, #4]
 80172fa:	1ac0      	subs	r0, r0, r3
 80172fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80172fe:	b10b      	cbz	r3, 8017304 <__sflush_r+0x48>
 8017300:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017302:	1ac0      	subs	r0, r0, r3
 8017304:	2300      	movs	r3, #0
 8017306:	4602      	mov	r2, r0
 8017308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801730a:	6a21      	ldr	r1, [r4, #32]
 801730c:	4628      	mov	r0, r5
 801730e:	47b0      	blx	r6
 8017310:	1c43      	adds	r3, r0, #1
 8017312:	89a3      	ldrh	r3, [r4, #12]
 8017314:	d106      	bne.n	8017324 <__sflush_r+0x68>
 8017316:	6829      	ldr	r1, [r5, #0]
 8017318:	291d      	cmp	r1, #29
 801731a:	d82b      	bhi.n	8017374 <__sflush_r+0xb8>
 801731c:	4a29      	ldr	r2, [pc, #164]	; (80173c4 <__sflush_r+0x108>)
 801731e:	410a      	asrs	r2, r1
 8017320:	07d6      	lsls	r6, r2, #31
 8017322:	d427      	bmi.n	8017374 <__sflush_r+0xb8>
 8017324:	2200      	movs	r2, #0
 8017326:	6062      	str	r2, [r4, #4]
 8017328:	04d9      	lsls	r1, r3, #19
 801732a:	6922      	ldr	r2, [r4, #16]
 801732c:	6022      	str	r2, [r4, #0]
 801732e:	d504      	bpl.n	801733a <__sflush_r+0x7e>
 8017330:	1c42      	adds	r2, r0, #1
 8017332:	d101      	bne.n	8017338 <__sflush_r+0x7c>
 8017334:	682b      	ldr	r3, [r5, #0]
 8017336:	b903      	cbnz	r3, 801733a <__sflush_r+0x7e>
 8017338:	6560      	str	r0, [r4, #84]	; 0x54
 801733a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801733c:	602f      	str	r7, [r5, #0]
 801733e:	2900      	cmp	r1, #0
 8017340:	d0c9      	beq.n	80172d6 <__sflush_r+0x1a>
 8017342:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017346:	4299      	cmp	r1, r3
 8017348:	d002      	beq.n	8017350 <__sflush_r+0x94>
 801734a:	4628      	mov	r0, r5
 801734c:	f7fe fe02 	bl	8015f54 <_free_r>
 8017350:	2000      	movs	r0, #0
 8017352:	6360      	str	r0, [r4, #52]	; 0x34
 8017354:	e7c0      	b.n	80172d8 <__sflush_r+0x1c>
 8017356:	2301      	movs	r3, #1
 8017358:	4628      	mov	r0, r5
 801735a:	47b0      	blx	r6
 801735c:	1c41      	adds	r1, r0, #1
 801735e:	d1c8      	bne.n	80172f2 <__sflush_r+0x36>
 8017360:	682b      	ldr	r3, [r5, #0]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d0c5      	beq.n	80172f2 <__sflush_r+0x36>
 8017366:	2b1d      	cmp	r3, #29
 8017368:	d001      	beq.n	801736e <__sflush_r+0xb2>
 801736a:	2b16      	cmp	r3, #22
 801736c:	d101      	bne.n	8017372 <__sflush_r+0xb6>
 801736e:	602f      	str	r7, [r5, #0]
 8017370:	e7b1      	b.n	80172d6 <__sflush_r+0x1a>
 8017372:	89a3      	ldrh	r3, [r4, #12]
 8017374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017378:	81a3      	strh	r3, [r4, #12]
 801737a:	e7ad      	b.n	80172d8 <__sflush_r+0x1c>
 801737c:	690f      	ldr	r7, [r1, #16]
 801737e:	2f00      	cmp	r7, #0
 8017380:	d0a9      	beq.n	80172d6 <__sflush_r+0x1a>
 8017382:	0793      	lsls	r3, r2, #30
 8017384:	680e      	ldr	r6, [r1, #0]
 8017386:	bf08      	it	eq
 8017388:	694b      	ldreq	r3, [r1, #20]
 801738a:	600f      	str	r7, [r1, #0]
 801738c:	bf18      	it	ne
 801738e:	2300      	movne	r3, #0
 8017390:	eba6 0807 	sub.w	r8, r6, r7
 8017394:	608b      	str	r3, [r1, #8]
 8017396:	f1b8 0f00 	cmp.w	r8, #0
 801739a:	dd9c      	ble.n	80172d6 <__sflush_r+0x1a>
 801739c:	6a21      	ldr	r1, [r4, #32]
 801739e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80173a0:	4643      	mov	r3, r8
 80173a2:	463a      	mov	r2, r7
 80173a4:	4628      	mov	r0, r5
 80173a6:	47b0      	blx	r6
 80173a8:	2800      	cmp	r0, #0
 80173aa:	dc06      	bgt.n	80173ba <__sflush_r+0xfe>
 80173ac:	89a3      	ldrh	r3, [r4, #12]
 80173ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173b2:	81a3      	strh	r3, [r4, #12]
 80173b4:	f04f 30ff 	mov.w	r0, #4294967295
 80173b8:	e78e      	b.n	80172d8 <__sflush_r+0x1c>
 80173ba:	4407      	add	r7, r0
 80173bc:	eba8 0800 	sub.w	r8, r8, r0
 80173c0:	e7e9      	b.n	8017396 <__sflush_r+0xda>
 80173c2:	bf00      	nop
 80173c4:	dfbffffe 	.word	0xdfbffffe

080173c8 <_fflush_r>:
 80173c8:	b538      	push	{r3, r4, r5, lr}
 80173ca:	690b      	ldr	r3, [r1, #16]
 80173cc:	4605      	mov	r5, r0
 80173ce:	460c      	mov	r4, r1
 80173d0:	b913      	cbnz	r3, 80173d8 <_fflush_r+0x10>
 80173d2:	2500      	movs	r5, #0
 80173d4:	4628      	mov	r0, r5
 80173d6:	bd38      	pop	{r3, r4, r5, pc}
 80173d8:	b118      	cbz	r0, 80173e2 <_fflush_r+0x1a>
 80173da:	6a03      	ldr	r3, [r0, #32]
 80173dc:	b90b      	cbnz	r3, 80173e2 <_fflush_r+0x1a>
 80173de:	f7fd fc53 	bl	8014c88 <__sinit>
 80173e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d0f3      	beq.n	80173d2 <_fflush_r+0xa>
 80173ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80173ec:	07d0      	lsls	r0, r2, #31
 80173ee:	d404      	bmi.n	80173fa <_fflush_r+0x32>
 80173f0:	0599      	lsls	r1, r3, #22
 80173f2:	d402      	bmi.n	80173fa <_fflush_r+0x32>
 80173f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173f6:	f7fd fef4 	bl	80151e2 <__retarget_lock_acquire_recursive>
 80173fa:	4628      	mov	r0, r5
 80173fc:	4621      	mov	r1, r4
 80173fe:	f7ff ff5d 	bl	80172bc <__sflush_r>
 8017402:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017404:	07da      	lsls	r2, r3, #31
 8017406:	4605      	mov	r5, r0
 8017408:	d4e4      	bmi.n	80173d4 <_fflush_r+0xc>
 801740a:	89a3      	ldrh	r3, [r4, #12]
 801740c:	059b      	lsls	r3, r3, #22
 801740e:	d4e1      	bmi.n	80173d4 <_fflush_r+0xc>
 8017410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017412:	f7fd fee7 	bl	80151e4 <__retarget_lock_release_recursive>
 8017416:	e7dd      	b.n	80173d4 <_fflush_r+0xc>

08017418 <fiprintf>:
 8017418:	b40e      	push	{r1, r2, r3}
 801741a:	b503      	push	{r0, r1, lr}
 801741c:	4601      	mov	r1, r0
 801741e:	ab03      	add	r3, sp, #12
 8017420:	4805      	ldr	r0, [pc, #20]	; (8017438 <fiprintf+0x20>)
 8017422:	f853 2b04 	ldr.w	r2, [r3], #4
 8017426:	6800      	ldr	r0, [r0, #0]
 8017428:	9301      	str	r3, [sp, #4]
 801742a:	f7ff fe2d 	bl	8017088 <_vfiprintf_r>
 801742e:	b002      	add	sp, #8
 8017430:	f85d eb04 	ldr.w	lr, [sp], #4
 8017434:	b003      	add	sp, #12
 8017436:	4770      	bx	lr
 8017438:	200001f0 	.word	0x200001f0

0801743c <__swhatbuf_r>:
 801743c:	b570      	push	{r4, r5, r6, lr}
 801743e:	460c      	mov	r4, r1
 8017440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017444:	2900      	cmp	r1, #0
 8017446:	b096      	sub	sp, #88	; 0x58
 8017448:	4615      	mov	r5, r2
 801744a:	461e      	mov	r6, r3
 801744c:	da0d      	bge.n	801746a <__swhatbuf_r+0x2e>
 801744e:	89a3      	ldrh	r3, [r4, #12]
 8017450:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017454:	f04f 0100 	mov.w	r1, #0
 8017458:	bf0c      	ite	eq
 801745a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801745e:	2340      	movne	r3, #64	; 0x40
 8017460:	2000      	movs	r0, #0
 8017462:	6031      	str	r1, [r6, #0]
 8017464:	602b      	str	r3, [r5, #0]
 8017466:	b016      	add	sp, #88	; 0x58
 8017468:	bd70      	pop	{r4, r5, r6, pc}
 801746a:	466a      	mov	r2, sp
 801746c:	f000 f848 	bl	8017500 <_fstat_r>
 8017470:	2800      	cmp	r0, #0
 8017472:	dbec      	blt.n	801744e <__swhatbuf_r+0x12>
 8017474:	9901      	ldr	r1, [sp, #4]
 8017476:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801747a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801747e:	4259      	negs	r1, r3
 8017480:	4159      	adcs	r1, r3
 8017482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017486:	e7eb      	b.n	8017460 <__swhatbuf_r+0x24>

08017488 <__smakebuf_r>:
 8017488:	898b      	ldrh	r3, [r1, #12]
 801748a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801748c:	079d      	lsls	r5, r3, #30
 801748e:	4606      	mov	r6, r0
 8017490:	460c      	mov	r4, r1
 8017492:	d507      	bpl.n	80174a4 <__smakebuf_r+0x1c>
 8017494:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017498:	6023      	str	r3, [r4, #0]
 801749a:	6123      	str	r3, [r4, #16]
 801749c:	2301      	movs	r3, #1
 801749e:	6163      	str	r3, [r4, #20]
 80174a0:	b002      	add	sp, #8
 80174a2:	bd70      	pop	{r4, r5, r6, pc}
 80174a4:	ab01      	add	r3, sp, #4
 80174a6:	466a      	mov	r2, sp
 80174a8:	f7ff ffc8 	bl	801743c <__swhatbuf_r>
 80174ac:	9900      	ldr	r1, [sp, #0]
 80174ae:	4605      	mov	r5, r0
 80174b0:	4630      	mov	r0, r6
 80174b2:	f7fb ff2d 	bl	8013310 <_malloc_r>
 80174b6:	b948      	cbnz	r0, 80174cc <__smakebuf_r+0x44>
 80174b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174bc:	059a      	lsls	r2, r3, #22
 80174be:	d4ef      	bmi.n	80174a0 <__smakebuf_r+0x18>
 80174c0:	f023 0303 	bic.w	r3, r3, #3
 80174c4:	f043 0302 	orr.w	r3, r3, #2
 80174c8:	81a3      	strh	r3, [r4, #12]
 80174ca:	e7e3      	b.n	8017494 <__smakebuf_r+0xc>
 80174cc:	89a3      	ldrh	r3, [r4, #12]
 80174ce:	6020      	str	r0, [r4, #0]
 80174d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174d4:	81a3      	strh	r3, [r4, #12]
 80174d6:	9b00      	ldr	r3, [sp, #0]
 80174d8:	6163      	str	r3, [r4, #20]
 80174da:	9b01      	ldr	r3, [sp, #4]
 80174dc:	6120      	str	r0, [r4, #16]
 80174de:	b15b      	cbz	r3, 80174f8 <__smakebuf_r+0x70>
 80174e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174e4:	4630      	mov	r0, r6
 80174e6:	f000 f81d 	bl	8017524 <_isatty_r>
 80174ea:	b128      	cbz	r0, 80174f8 <__smakebuf_r+0x70>
 80174ec:	89a3      	ldrh	r3, [r4, #12]
 80174ee:	f023 0303 	bic.w	r3, r3, #3
 80174f2:	f043 0301 	orr.w	r3, r3, #1
 80174f6:	81a3      	strh	r3, [r4, #12]
 80174f8:	89a3      	ldrh	r3, [r4, #12]
 80174fa:	431d      	orrs	r5, r3
 80174fc:	81a5      	strh	r5, [r4, #12]
 80174fe:	e7cf      	b.n	80174a0 <__smakebuf_r+0x18>

08017500 <_fstat_r>:
 8017500:	b538      	push	{r3, r4, r5, lr}
 8017502:	4d07      	ldr	r5, [pc, #28]	; (8017520 <_fstat_r+0x20>)
 8017504:	2300      	movs	r3, #0
 8017506:	4604      	mov	r4, r0
 8017508:	4608      	mov	r0, r1
 801750a:	4611      	mov	r1, r2
 801750c:	602b      	str	r3, [r5, #0]
 801750e:	f7eb fd10 	bl	8002f32 <_fstat>
 8017512:	1c43      	adds	r3, r0, #1
 8017514:	d102      	bne.n	801751c <_fstat_r+0x1c>
 8017516:	682b      	ldr	r3, [r5, #0]
 8017518:	b103      	cbz	r3, 801751c <_fstat_r+0x1c>
 801751a:	6023      	str	r3, [r4, #0]
 801751c:	bd38      	pop	{r3, r4, r5, pc}
 801751e:	bf00      	nop
 8017520:	20000b3c 	.word	0x20000b3c

08017524 <_isatty_r>:
 8017524:	b538      	push	{r3, r4, r5, lr}
 8017526:	4d06      	ldr	r5, [pc, #24]	; (8017540 <_isatty_r+0x1c>)
 8017528:	2300      	movs	r3, #0
 801752a:	4604      	mov	r4, r0
 801752c:	4608      	mov	r0, r1
 801752e:	602b      	str	r3, [r5, #0]
 8017530:	f7eb fd0f 	bl	8002f52 <_isatty>
 8017534:	1c43      	adds	r3, r0, #1
 8017536:	d102      	bne.n	801753e <_isatty_r+0x1a>
 8017538:	682b      	ldr	r3, [r5, #0]
 801753a:	b103      	cbz	r3, 801753e <_isatty_r+0x1a>
 801753c:	6023      	str	r3, [r4, #0]
 801753e:	bd38      	pop	{r3, r4, r5, pc}
 8017540:	20000b3c 	.word	0x20000b3c

08017544 <abort>:
 8017544:	b508      	push	{r3, lr}
 8017546:	2006      	movs	r0, #6
 8017548:	f000 f842 	bl	80175d0 <raise>
 801754c:	2001      	movs	r0, #1
 801754e:	f7eb fca1 	bl	8002e94 <_exit>

08017552 <_calloc_r>:
 8017552:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017554:	fba1 2402 	umull	r2, r4, r1, r2
 8017558:	b94c      	cbnz	r4, 801756e <_calloc_r+0x1c>
 801755a:	4611      	mov	r1, r2
 801755c:	9201      	str	r2, [sp, #4]
 801755e:	f7fb fed7 	bl	8013310 <_malloc_r>
 8017562:	9a01      	ldr	r2, [sp, #4]
 8017564:	4605      	mov	r5, r0
 8017566:	b930      	cbnz	r0, 8017576 <_calloc_r+0x24>
 8017568:	4628      	mov	r0, r5
 801756a:	b003      	add	sp, #12
 801756c:	bd30      	pop	{r4, r5, pc}
 801756e:	220c      	movs	r2, #12
 8017570:	6002      	str	r2, [r0, #0]
 8017572:	2500      	movs	r5, #0
 8017574:	e7f8      	b.n	8017568 <_calloc_r+0x16>
 8017576:	4621      	mov	r1, r4
 8017578:	f7fd fd12 	bl	8014fa0 <memset>
 801757c:	e7f4      	b.n	8017568 <_calloc_r+0x16>

0801757e <_raise_r>:
 801757e:	291f      	cmp	r1, #31
 8017580:	b538      	push	{r3, r4, r5, lr}
 8017582:	4604      	mov	r4, r0
 8017584:	460d      	mov	r5, r1
 8017586:	d904      	bls.n	8017592 <_raise_r+0x14>
 8017588:	2316      	movs	r3, #22
 801758a:	6003      	str	r3, [r0, #0]
 801758c:	f04f 30ff 	mov.w	r0, #4294967295
 8017590:	bd38      	pop	{r3, r4, r5, pc}
 8017592:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017594:	b112      	cbz	r2, 801759c <_raise_r+0x1e>
 8017596:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801759a:	b94b      	cbnz	r3, 80175b0 <_raise_r+0x32>
 801759c:	4620      	mov	r0, r4
 801759e:	f000 f831 	bl	8017604 <_getpid_r>
 80175a2:	462a      	mov	r2, r5
 80175a4:	4601      	mov	r1, r0
 80175a6:	4620      	mov	r0, r4
 80175a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80175ac:	f000 b818 	b.w	80175e0 <_kill_r>
 80175b0:	2b01      	cmp	r3, #1
 80175b2:	d00a      	beq.n	80175ca <_raise_r+0x4c>
 80175b4:	1c59      	adds	r1, r3, #1
 80175b6:	d103      	bne.n	80175c0 <_raise_r+0x42>
 80175b8:	2316      	movs	r3, #22
 80175ba:	6003      	str	r3, [r0, #0]
 80175bc:	2001      	movs	r0, #1
 80175be:	e7e7      	b.n	8017590 <_raise_r+0x12>
 80175c0:	2400      	movs	r4, #0
 80175c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80175c6:	4628      	mov	r0, r5
 80175c8:	4798      	blx	r3
 80175ca:	2000      	movs	r0, #0
 80175cc:	e7e0      	b.n	8017590 <_raise_r+0x12>
	...

080175d0 <raise>:
 80175d0:	4b02      	ldr	r3, [pc, #8]	; (80175dc <raise+0xc>)
 80175d2:	4601      	mov	r1, r0
 80175d4:	6818      	ldr	r0, [r3, #0]
 80175d6:	f7ff bfd2 	b.w	801757e <_raise_r>
 80175da:	bf00      	nop
 80175dc:	200001f0 	.word	0x200001f0

080175e0 <_kill_r>:
 80175e0:	b538      	push	{r3, r4, r5, lr}
 80175e2:	4d07      	ldr	r5, [pc, #28]	; (8017600 <_kill_r+0x20>)
 80175e4:	2300      	movs	r3, #0
 80175e6:	4604      	mov	r4, r0
 80175e8:	4608      	mov	r0, r1
 80175ea:	4611      	mov	r1, r2
 80175ec:	602b      	str	r3, [r5, #0]
 80175ee:	f7eb fc3f 	bl	8002e70 <_kill>
 80175f2:	1c43      	adds	r3, r0, #1
 80175f4:	d102      	bne.n	80175fc <_kill_r+0x1c>
 80175f6:	682b      	ldr	r3, [r5, #0]
 80175f8:	b103      	cbz	r3, 80175fc <_kill_r+0x1c>
 80175fa:	6023      	str	r3, [r4, #0]
 80175fc:	bd38      	pop	{r3, r4, r5, pc}
 80175fe:	bf00      	nop
 8017600:	20000b3c 	.word	0x20000b3c

08017604 <_getpid_r>:
 8017604:	f7eb bc2c 	b.w	8002e60 <_getpid>

08017608 <_init>:
 8017608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801760a:	bf00      	nop
 801760c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801760e:	bc08      	pop	{r3}
 8017610:	469e      	mov	lr, r3
 8017612:	4770      	bx	lr

08017614 <_fini>:
 8017614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017616:	bf00      	nop
 8017618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801761a:	bc08      	pop	{r3}
 801761c:	469e      	mov	lr, r3
 801761e:	4770      	bx	lr
