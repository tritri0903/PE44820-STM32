
PE44820-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b48  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003780  08012cf8  08012cf8  00022cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016478  08016478  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08016478  08016478  00026478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016480  08016480  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016480  08016480  00026480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016484  08016484  00026484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08016488  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301fc  2**0
                  CONTENTS
 10 .bss          0000ac00  200001fc  200001fc  000301fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000adfc  2000adfc  000301fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002255a  00000000  00000000  0003026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005d48  00000000  00000000  000527c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001950  00000000  00000000  00058518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001422  00000000  00000000  00059e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000332cc  00000000  00000000  0005b28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002a167  00000000  00000000  0008e556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f1eb4  00000000  00000000  000b86bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000079b8  00000000  00000000  001aa574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  001b1f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012ce0 	.word	0x08012ce0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000200 	.word	0x20000200
 80001ec:	08012ce0 	.word	0x08012ce0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>:
#include "main.h"
#include "PE43xx.h"


PE43xx::PE43xx(GPIO_TypeDef* si_port, GPIO_InitTypeDef si_pin, GPIO_TypeDef* le_port, GPIO_InitTypeDef le_pin, GPIO_TypeDef* clk_port, GPIO_InitTypeDef clk_pin, uint8_t data, uint8_t type)
 8000f64:	b082      	sub	sp, #8
 8000f66:	b4b0      	push	{r4, r5, r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
 8000f70:	f107 0118 	add.w	r1, r7, #24
 8000f74:	e881 000c 	stmia.w	r1, {r2, r3}
{

	_si_pin = si_pin;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	1d1c      	adds	r4, r3, #4
 8000f7c:	f107 0518 	add.w	r5, r7, #24
 8000f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f84:	682b      	ldr	r3, [r5, #0]
 8000f86:	6023      	str	r3, [r4, #0]
	_le_pin = le_pin;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f103 0418 	add.w	r4, r3, #24
 8000f8e:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8000f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f96:	682b      	ldr	r3, [r5, #0]
 8000f98:	6023      	str	r3, [r4, #0]
	_clk_pin = clk_pin;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000fa0:	f107 0548 	add.w	r5, r7, #72	; 0x48
 8000fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa8:	682b      	ldr	r3, [r5, #0]
 8000faa:	6023      	str	r3, [r4, #0]

	_si_port = si_port;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	641a      	str	r2, [r3, #64]	; 0x40
	_le_port = le_port;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fb6:	645a      	str	r2, [r3, #68]	; 0x44
	_clk_port = clk_port;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000fbc:	649a      	str	r2, [r3, #72]	; 0x48
}
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bcb0      	pop	{r4, r5, r7}
 8000fc8:	b002      	add	sp, #8
 8000fca:	4770      	bx	lr

08000fcc <_ZN6PE43xx5beginEv>:


void PE43xx::begin() {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    // set pins
	HAL_GPIO_WritePin(_si_port, _si_pin.Pin, GPIO_PIN_RESET);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f003 f823 	bl	800402c <HAL_GPIO_WritePin>

    // set our internal max and step values
    switch (_type) {
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b0c      	cmp	r3, #12
 8000fec:	d006      	beq.n	8000ffc <_ZN6PE43xx5beginEv+0x30>
 8000fee:	2b0c      	cmp	r3, #12
 8000ff0:	dc14      	bgt.n	800101c <_ZN6PE43xx5beginEv+0x50>
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d002      	beq.n	8000ffc <_ZN6PE43xx5beginEv+0x30>
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d008      	beq.n	800100c <_ZN6PE43xx5beginEv+0x40>
 8000ffa:	e00f      	b.n	800101c <_ZN6PE43xx5beginEv+0x50>
        case PE4302:
        case PE4312:
            _max = 31.5;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a10      	ldr	r2, [pc, #64]	; (8001040 <_ZN6PE43xx5beginEv+0x74>)
 8001000:	655a      	str	r2, [r3, #84]	; 0x54
            _step = 0.5;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001008:	651a      	str	r2, [r3, #80]	; 0x50
            break;
 800100a:	e00f      	b.n	800102c <_ZN6PE43xx5beginEv+0x60>
        case PE4306:
            _max = 30;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <_ZN6PE43xx5beginEv+0x78>)
 8001010:	655a      	str	r2, [r3, #84]	; 0x54
            _step = 1;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001018:	651a      	str	r2, [r3, #80]	; 0x50
            break;
 800101a:	e007      	b.n	800102c <_ZN6PE43xx5beginEv+0x60>
        default:
            _step = 1;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001022:	651a      	str	r2, [r3, #80]	; 0x50
            _max = 30;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a07      	ldr	r2, [pc, #28]	; (8001044 <_ZN6PE43xx5beginEv+0x78>)
 8001028:	655a      	str	r2, [r3, #84]	; 0x54
            break;
 800102a:	bf00      	nop
    }

    // set level to 0
    setLevel(0);
 800102c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001048 <_ZN6PE43xx5beginEv+0x7c>
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f80b 	bl	800104c <_ZN6PE43xx8setLevelEf>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	41fc0000 	.word	0x41fc0000
 8001044:	41f00000 	.word	0x41f00000
 8001048:	00000000 	.word	0x00000000

0800104c <_ZN6PE43xx8setLevelEf>:

bool PE43xx::setLevel(float level) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	ed87 0a00 	vstr	s0, [r7]
    // bounds check
    if(level < 0 || level > getMax() ) {
 8001058:	edd7 7a00 	vldr	s15, [r7]
 800105c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	d40b      	bmi.n	800107e <_ZN6PE43xx8setLevelEf+0x32>
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f879 	bl	800115e <_ZN6PE43xx6getMaxEv>
 800106c:	eeb0 7a40 	vmov.f32	s14, s0
 8001070:	edd7 7a00 	vldr	s15, [r7]
 8001074:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	dd01      	ble.n	8001082 <_ZN6PE43xx8setLevelEf+0x36>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <_ZN6PE43xx8setLevelEf+0x38>
 8001082:	2300      	movs	r3, #0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <_ZN6PE43xx8setLevelEf+0x40>
        return false;
 8001088:	2300      	movs	r3, #0
 800108a:	e006      	b.n	800109a <_ZN6PE43xx8setLevelEf+0x4e>
    }

    _level = level;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	64da      	str	r2, [r3, #76]	; 0x4c
    _writeLevel();
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f805 	bl	80010a2 <_ZN6PE43xx11_writeLevelEv>

    return true;
 8001098:	2301      	movs	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_ZN6PE43xx11_writeLevelEv>:

void PE43xx::_writeLevel() {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
    //  1    1   1   1   1  => 31db

    // so the big different is that one can set the .5 bit or not

    // get the integer part, it will be the same for both chips
    int intlevel = int(_level);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80010b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b4:	ee17 3a90 	vmov	r3, s15
 80010b8:	613b      	str	r3, [r7, #16]
    // default to 6 bits
    int bits = 6;
 80010ba:	2306      	movs	r3, #6
 80010bc:	60fb      	str	r3, [r7, #12]
            bitWrite(intlevel, 0, 0);
        }
    }*/

    // LE and CLOCK down to get the chip listen
    HAL_GPIO_WritePin(_le_port, _le_pin.Pin, GPIO_PIN_RESET);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	f002 ffae 	bl	800402c <HAL_GPIO_WritePin>
    HAL_Delay(3);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f001 fad3 	bl	800267c <HAL_Delay>

    // Write the level out MSB first
    int b;
    for (int bit = bits; bit >= 0; bit--) {
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	e030      	b.n	800113e <_ZN6PE43xx11_writeLevelEv+0x9c>
        b = ((intlevel << 1) >> bit) & 0x01;
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	005a      	lsls	r2, r3, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa42 f303 	asr.w	r3, r2, r3
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]

        HAL_GPIO_WritePin(_clk_port, _clk_pin.Pin, GPIO_PIN_SET);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	2201      	movs	r2, #1
 80010f8:	4619      	mov	r1, r3
 80010fa:	f002 ff97 	bl	800402c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(_si_port, _si_pin.Pin, (b != 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	b299      	uxth	r1, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <_ZN6PE43xx11_writeLevelEv+0x70>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <_ZN6PE43xx11_writeLevelEv+0x72>
 8001112:	2300      	movs	r3, #0
 8001114:	461a      	mov	r2, r3
 8001116:	f002 ff89 	bl	800402c <HAL_GPIO_WritePin>

        HAL_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f001 faae 	bl	800267c <HAL_Delay>

        HAL_GPIO_WritePin(_clk_port, _clk_pin.Pin, GPIO_PIN_RESET);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001128:	b29b      	uxth	r3, r3
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	f002 ff7d 	bl	800402c <HAL_GPIO_WritePin>

        HAL_Delay(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f001 faa2 	bl	800267c <HAL_Delay>
    for (int bit = bits; bit >= 0; bit--) {
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3b01      	subs	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2b00      	cmp	r3, #0
 8001142:	dacb      	bge.n	80010dc <_ZN6PE43xx11_writeLevelEv+0x3a>
    }

    // toggle LE to latch
    HAL_GPIO_WritePin(_le_port, _le_pin.Pin, GPIO_PIN_SET);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	b29b      	uxth	r3, r3
 800114e:	2201      	movs	r2, #1
 8001150:	4619      	mov	r1, r3
 8001152:	f002 ff6b 	bl	800402c <HAL_GPIO_WritePin>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZN6PE43xx6getMaxEv>:
// getters
float PE43xx::getLevel() {
    return _level;
}

float PE43xx::getMax() {
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
    return _max;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800116a:	ee07 3a90 	vmov	s15, r3
}
 800116e:	eeb0 0a67 	vmov.f32	s0, s15
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_ZN12PhaseShifter15_PS_delay_100nsEm>:
  /**
   * @brief Delay ~109nS function with nop function at F_CPU=64MHz
   *
   * @param val The delay circle(s). Delay time = 109.375nS * val.
   */
  inline void _PS_delay_100ns(uint32_t val)
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
    while (val-- > 0)
    {
      __asm__("nop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\t");
    }
#else
    HAL_Delay(val);
 8001186:	6838      	ldr	r0, [r7, #0]
 8001188:	f001 fa78 	bl	800267c <HAL_Delay>
#endif
  }
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>:
#include "PhaseShifter.h"
#include "mapping.h"

#define abs(x) ((x) > 0 ? (x) : -(x))

PhaseShifter::PhaseShifter(GPIO_TypeDef* si_port, GPIO_InitTypeDef si_pin, GPIO_TypeDef* le_port, GPIO_InitTypeDef le_pin, GPIO_TypeDef* clk_port, GPIO_InitTypeDef clk_pin, uint8_t address, mode_e mode)
 8001194:	b082      	sub	sp, #8
 8001196:	b5b0      	push	{r4, r5, r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
 80011a0:	f107 0118 	add.w	r1, r7, #24
 80011a4:	e881 000c 	stmia.w	r1, {r2, r3}
{
  this->_data.raw = 0;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	801a      	strh	r2, [r3, #0]
  this->_address = address;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80011b4:	709a      	strb	r2, [r3, #2]
  this->_mode = mode;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80011bc:	70da      	strb	r2, [r3, #3]

  this->_si_pin = si_pin;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	1d1c      	adds	r4, r3, #4
 80011c2:	f107 0518 	add.w	r5, r7, #24
 80011c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ca:	682b      	ldr	r3, [r5, #0]
 80011cc:	6023      	str	r3, [r4, #0]
  this->_le_pin = le_pin;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f103 0418 	add.w	r4, r3, #24
 80011d4:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80011d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	6023      	str	r3, [r4, #0]
  this->_clk_pin = clk_pin;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80011e6:	f107 0548 	add.w	r5, r7, #72	; 0x48
 80011ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ee:	682b      	ldr	r3, [r5, #0]
 80011f0:	6023      	str	r3, [r4, #0]

  this->_si_port = si_port;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
  this->_le_port = le_port;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011fc:	645a      	str	r2, [r3, #68]	; 0x44
  this->_clk_port = clk_port;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001202:	649a      	str	r2, [r3, #72]	; 0x48

  begin();
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f808 	bl	800121a <_ZN12PhaseShifter5beginEv>
}
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001216:	b002      	add	sp, #8
 8001218:	4770      	bx	lr

0800121a <_ZN12PhaseShifter5beginEv>:

void PhaseShifter::begin(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  /* GPIOs Initialize */
	//HAL_GPIO_Init(&this->_si_port, &this->_si_pin);
	HAL_GPIO_WritePin(this->_si_port, this->_si_pin.Pin, GPIO_PIN_RESET);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	b29b      	uxth	r3, r3
 800122c:	2200      	movs	r2, #0
 800122e:	4619      	mov	r1, r3
 8001230:	f002 fefc 	bl	800402c <HAL_GPIO_WritePin>

	//HAL_GPIO_Init(this->_le_port, this->_le_pin);
	HAL_GPIO_WritePin(this->_le_port, this->_le_pin.Pin, GPIO_PIN_RESET);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	b29b      	uxth	r3, r3
 800123e:	2200      	movs	r2, #0
 8001240:	4619      	mov	r1, r3
 8001242:	f002 fef3 	bl	800402c <HAL_GPIO_WritePin>

	//HAL_GPIO_Init(this->_clk_port,this->_clk_pin);
	HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_SET);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124e:	b29b      	uxth	r3, r3
 8001250:	2201      	movs	r2, #1
 8001252:	4619      	mov	r1, r3
 8001254:	f002 feea 	bl	800402c <HAL_GPIO_WritePin>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <_ZN12PhaseShifter12dataShiftOutEh6data_u>:

void PhaseShifter::dataShiftOut(uint8_t addr, data_u data)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	803a      	strh	r2, [r7, #0]
 800126c:	70fb      	strb	r3, [r7, #3]
  int8_t bit_index;

  HAL_GPIO_WritePin(this->_le_port, this->_le_pin.Pin, GPIO_PIN_RESET);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	b29b      	uxth	r3, r3
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	f002 fed6 	bl	800402c <HAL_GPIO_WritePin>
  _PS_delay_100ns(1); // Tsettle > 10ns
 8001280:	2101      	movs	r1, #1
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff7a 	bl	800117c <_ZN12PhaseShifter15_PS_delay_100nsEm>

  // Data
  for (bit_index = 0; bit_index < 8; bit_index++)
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e031      	b.n	80012f2 <_ZN12PhaseShifter12dataShiftOutEh6data_u+0x92>
  {
	  HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_SET);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001296:	b29b      	uxth	r3, r3
 8001298:	2201      	movs	r2, #1
 800129a:	4619      	mov	r1, r3
 800129c:	f002 fec6 	bl	800402c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(this->_si_port, this->_si_pin.Pin,(((data.data.data >> bit_index) & 0x01) != 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	b299      	uxth	r1, r3
 80012aa:	783b      	ldrb	r3, [r7, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	fa42 f303 	asr.w	r3, r2, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	f002 feb4 	bl	800402c <HAL_GPIO_WritePin>

    _PS_delay_100ns(3); // Tclkh > 30ns
 80012c4:	2103      	movs	r1, #3
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ff58 	bl	800117c <_ZN12PhaseShifter15_PS_delay_100nsEm>

	HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_RESET);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	2200      	movs	r2, #0
 80012d8:	4619      	mov	r1, r3
 80012da:	f002 fea7 	bl	800402c <HAL_GPIO_WritePin>
    _PS_delay_100ns(3); // Tclkl > 30ns
 80012de:	2103      	movs	r1, #3
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff4b 	bl	800117c <_ZN12PhaseShifter15_PS_delay_100nsEm>
  for (bit_index = 0; bit_index < 8; bit_index++)
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	3301      	adds	r3, #1
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	2b07      	cmp	r3, #7
 80012f8:	ddc9      	ble.n	800128e <_ZN12PhaseShifter12dataShiftOutEh6data_u+0x2e>
  }

  // OPT
  HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_SET);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001302:	b29b      	uxth	r3, r3
 8001304:	2201      	movs	r2, #1
 8001306:	4619      	mov	r1, r3
 8001308:	f002 fe90 	bl	800402c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(this->_si_port, this->_si_pin.Pin, (data.data.opt != 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	b299      	uxth	r1, r3
 8001316:	787b      	ldrb	r3, [r7, #1]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	f002 fe84 	bl	800402c <HAL_GPIO_WritePin>
  _PS_delay_100ns(3); // Tclkh > 30ns
 8001324:	2103      	movs	r1, #3
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff28 	bl	800117c <_ZN12PhaseShifter15_PS_delay_100nsEm>

  HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_RESET);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001334:	b29b      	uxth	r3, r3
 8001336:	2200      	movs	r2, #0
 8001338:	4619      	mov	r1, r3
 800133a:	f002 fe77 	bl	800402c <HAL_GPIO_WritePin>
  _PS_delay_100ns(3); // Tclkl > 30ns
 800133e:	2103      	movs	r1, #3
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ff1b 	bl	800117c <_ZN12PhaseShifter15_PS_delay_100nsEm>

  // Address
  for (bit_index = 0; bit_index < 4; bit_index++)
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]
 800134a:	e030      	b.n	80013ae <_ZN12PhaseShifter12dataShiftOutEh6data_u+0x14e>
  {
	  HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_SET);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	b29b      	uxth	r3, r3
 8001356:	2201      	movs	r2, #1
 8001358:	4619      	mov	r1, r3
 800135a:	f002 fe67 	bl	800402c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(this->_si_port, this->_si_pin.Pin, (((addr >> bit_index) & 0x01) != 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	b299      	uxth	r1, r3
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	fa42 f303 	asr.w	r3, r2, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	f002 fe56 	bl	800402c <HAL_GPIO_WritePin>
    _PS_delay_100ns(3); // Tclkh > 30ns
 8001380:	2103      	movs	r1, #3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fefa 	bl	800117c <_ZN12PhaseShifter15_PS_delay_100nsEm>

    HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_RESET);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	b29b      	uxth	r3, r3
 8001392:	2200      	movs	r2, #0
 8001394:	4619      	mov	r1, r3
 8001396:	f002 fe49 	bl	800402c <HAL_GPIO_WritePin>
    _PS_delay_100ns(3); // Tclkl > 30ns
 800139a:	2103      	movs	r1, #3
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff feed 	bl	800117c <_ZN12PhaseShifter15_PS_delay_100nsEm>
  for (bit_index = 0; bit_index < 4; bit_index++)
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	3301      	adds	r3, #1
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	73fb      	strb	r3, [r7, #15]
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	ddca      	ble.n	800134c <_ZN12PhaseShifter12dataShiftOutEh6data_u+0xec>
  }

  // Reset SI & SLK Pin
  HAL_GPIO_WritePin(this->_si_port, this->_si_pin.Pin, GPIO_PIN_RESET);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	2200      	movs	r2, #0
 80013c2:	4619      	mov	r1, r3
 80013c4:	f002 fe32 	bl	800402c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(this->_clk_port, this->_clk_pin.Pin, GPIO_PIN_SET);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	2201      	movs	r2, #1
 80013d4:	4619      	mov	r1, r3
 80013d6:	f002 fe29 	bl	800402c <HAL_GPIO_WritePin>

  _PS_delay_100ns(1); // Tsettle > 10ns
 80013da:	2101      	movs	r1, #1
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fecd 	bl	800117c <_ZN12PhaseShifter15_PS_delay_100nsEm>
  HAL_GPIO_WritePin(this->_le_port, this->_le_pin.Pin, GPIO_PIN_SET);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	2201      	movs	r2, #1
 80013ee:	4619      	mov	r1, r3
 80013f0:	f002 fe1c 	bl	800402c <HAL_GPIO_WritePin>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_ZN12PhaseShifter9findAngleEf6mode_ePf>:

uint16_t PhaseShifter::findAngle(float angle, mode_e mode, float *foundAngle)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	ed87 0a02 	vstr	s0, [r7, #8]
 8001408:	460b      	mov	r3, r1
 800140a:	603a      	str	r2, [r7, #0]
 800140c:	71fb      	strb	r3, [r7, #7]
  uint16_t idx = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	83fb      	strh	r3, [r7, #30]
  int16_t targetAngle = angle * 10;
 8001412:	edd7 7a02 	vldr	s15, [r7, #8]
 8001416:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800141a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800141e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001422:	ee17 3a90 	vmov	r3, s15
 8001426:	837b      	strh	r3, [r7, #26]

  for (idx = 0; idx <= 255; idx++)
 8001428:	2300      	movs	r3, #0
 800142a:	83fb      	strh	r3, [r7, #30]
 800142c:	e00a      	b.n	8001444 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x48>
  {
    if (targetAngle <= PHASE_SHIFT_VALUE[idx])
 800142e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001432:	8bfa      	ldrh	r2, [r7, #30]
 8001434:	4937      	ldr	r1, [pc, #220]	; (8001514 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x118>)
 8001436:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800143a:	4293      	cmp	r3, r2
 800143c:	dd06      	ble.n	800144c <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x50>
  for (idx = 0; idx <= 255; idx++)
 800143e:	8bfb      	ldrh	r3, [r7, #30]
 8001440:	3301      	adds	r3, #1
 8001442:	83fb      	strh	r3, [r7, #30]
 8001444:	8bfb      	ldrh	r3, [r7, #30]
 8001446:	2bff      	cmp	r3, #255	; 0xff
 8001448:	d9f1      	bls.n	800142e <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x32>
 800144a:	e000      	b.n	800144e <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x52>
    {
      break;
 800144c:	bf00      	nop
    }
  }

  if ((idx != 0) && (idx != 255))
 800144e:	8bfb      	ldrh	r3, [r7, #30]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d020      	beq.n	8001496 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x9a>
 8001454:	8bfb      	ldrh	r3, [r7, #30]
 8001456:	2bff      	cmp	r3, #255	; 0xff
 8001458:	d01d      	beq.n	8001496 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x9a>
  {
    uint16_t value1 = abs(targetAngle - PHASE_SHIFT_VALUE[idx - 1]);
 800145a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800145e:	8bfa      	ldrh	r2, [r7, #30]
 8001460:	3a01      	subs	r2, #1
 8001462:	492c      	ldr	r1, [pc, #176]	; (8001514 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x118>)
 8001464:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	bfb8      	it	lt
 800146e:	425b      	neglt	r3, r3
 8001470:	833b      	strh	r3, [r7, #24]
    uint16_t value2 = abs(targetAngle - PHASE_SHIFT_VALUE[idx]);
 8001472:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001476:	8bfa      	ldrh	r2, [r7, #30]
 8001478:	4926      	ldr	r1, [pc, #152]	; (8001514 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x118>)
 800147a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800147e:	1a9b      	subs	r3, r3, r2
 8001480:	2b00      	cmp	r3, #0
 8001482:	bfb8      	it	lt
 8001484:	425b      	neglt	r3, r3
 8001486:	82fb      	strh	r3, [r7, #22]

    if (value1 < value2)
 8001488:	8b3a      	ldrh	r2, [r7, #24]
 800148a:	8afb      	ldrh	r3, [r7, #22]
 800148c:	429a      	cmp	r2, r3
 800148e:	d202      	bcs.n	8001496 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x9a>
    {
      idx -= 1;
 8001490:	8bfb      	ldrh	r3, [r7, #30]
 8001492:	3b01      	subs	r3, #1
 8001494:	83fb      	strh	r3, [r7, #30]
    }
  }
  if (foundAngle != NULL)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d014      	beq.n	80014c6 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0xca>
  {
    (*foundAngle) = PHASE_SHIFT_VALUE[idx] / 10.0;
 800149c:	8bfb      	ldrh	r3, [r7, #30]
 800149e:	4a1d      	ldr	r2, [pc, #116]	; (8001514 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x118>)
 80014a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f84d 	bl	8000544 <__aeabi_i2d>
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x11c>)
 80014b0:	f7ff f9dc 	bl	800086c <__aeabi_ddiv>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff fb84 	bl	8000bc8 <__aeabi_d2f>
 80014c0:	4602      	mov	r2, r0
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	601a      	str	r2, [r3, #0]
  }

  uint16_t retVal = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	83bb      	strh	r3, [r7, #28]
  switch (mode)
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d012      	beq.n	80014f6 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0xfa>
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	dc16      	bgt.n	8001502 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x106>
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <_ZN12PhaseShifter9findAngleEf6mode_ePf+0xe2>
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d006      	beq.n	80014ea <_ZN12PhaseShifter9findAngleEf6mode_ePf+0xee>
 80014dc:	e011      	b.n	8001502 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x106>
  {
  case MODE_BINARY_WEIGHTED:
    retVal = BINARY_WEIGHTED_DATA[idx];
 80014de:	8bfb      	ldrh	r3, [r7, #30]
 80014e0:	4a0e      	ldr	r2, [pc, #56]	; (800151c <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x120>)
 80014e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014e6:	83bb      	strh	r3, [r7, #28]
    break;
 80014e8:	e00e      	b.n	8001508 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x10c>
  case MODE_OPT_1700_2200:
    retVal = OPT_1700_2200_DATA[idx];
 80014ea:	8bfb      	ldrh	r3, [r7, #30]
 80014ec:	4a0c      	ldr	r2, [pc, #48]	; (8001520 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x124>)
 80014ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f2:	83bb      	strh	r3, [r7, #28]
    break;
 80014f4:	e008      	b.n	8001508 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x10c>
  case MODE_OPT_2600:
    retVal = OPT_2600_DATA[idx];
 80014f6:	8bfb      	ldrh	r3, [r7, #30]
 80014f8:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x128>)
 80014fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014fe:	83bb      	strh	r3, [r7, #28]
    break;
 8001500:	e002      	b.n	8001508 <_ZN12PhaseShifter9findAngleEf6mode_ePf+0x10c>
  default:
    retVal = 0x0000;
 8001502:	2300      	movs	r3, #0
 8001504:	83bb      	strh	r3, [r7, #28]
    break;
 8001506:	bf00      	nop
  }

  return retVal;
 8001508:	8bbb      	ldrh	r3, [r7, #28]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	080157a4 	.word	0x080157a4
 8001518:	40240000 	.word	0x40240000
 800151c:	08015da4 	.word	0x08015da4
 8001520:	080159a4 	.word	0x080159a4
 8001524:	08015ba4 	.word	0x08015ba4

08001528 <_ZN12PhaseShifter8setAngleEf>:

float PhaseShifter::setAngle(float angle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	ed87 0a00 	vstr	s0, [r7]
  float foundAngle = 0;
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]

  if (angle < 0)
 800153a:	edd7 7a00 	vldr	s15, [r7]
 800153e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	d502      	bpl.n	800154e <_ZN12PhaseShifter8setAngleEf+0x26>
    angle = 0;
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
  if (angle > 360)
 800154e:	edd7 7a00 	vldr	s15, [r7]
 8001552:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80015a0 <_ZN12PhaseShifter8setAngleEf+0x78>
 8001556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155e:	dd01      	ble.n	8001564 <_ZN12PhaseShifter8setAngleEf+0x3c>
    angle = 360;
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <_ZN12PhaseShifter8setAngleEf+0x7c>)
 8001562:	603b      	str	r3, [r7, #0]

  this->_data.raw = findAngle(angle, this->_mode, &foundAngle);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	78db      	ldrb	r3, [r3, #3]
 8001568:	f107 020c 	add.w	r2, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	ed97 0a00 	vldr	s0, [r7]
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ff42 	bl	80013fc <_ZN12PhaseShifter9findAngleEf6mode_ePf>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	801a      	strh	r2, [r3, #0]
  this->dataShiftOut(this->_address, this->_data);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7899      	ldrb	r1, [r3, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	881a      	ldrh	r2, [r3, #0]
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff fe69 	bl	8001260 <_ZN12PhaseShifter12dataShiftOutEh6data_u>

  return foundAngle;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	ee07 3a90 	vmov	s15, r3
}
 8001594:	eeb0 0a67 	vmov.f32	s0, s15
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	43b40000 	.word	0x43b40000
 80015a4:	43b40000 	.word	0x43b40000

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	b0e1      	sub	sp, #388	; 0x184
 80015ac:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ae:	f000 fff3 	bl	8002598 <HAL_Init>

  /* USER CODE BEGIN Init */

  GPIO_InitTypeDef GPIO_InitStruct_Si = {
 80015b2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]
 80015c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80015ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		  .Pin = SI_Pin,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le = {
 80015d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80015ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		  .Pin = LE_Pin,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Clk = {
 80015f2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]
 8001602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001606:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800160a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800160e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		  .Pin = CLK_Pin,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Si_Att = {
 8001612:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]
 8001622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001626:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800162a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800162e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		  .Pin = SDI_Att_Pin,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Le_Att = {
 8001632:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
 8001642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001646:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800164a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800164e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		  .Pin = LE_Att_Pin,
		  .Mode = GPIO_MODE_IT_FALLING,
		  .Pull = GPIO_NOPULL
  };
  GPIO_InitTypeDef GPIO_InitStruct_Clk_Att = {
 8001652:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
 8001662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001666:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800166a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800166e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  };

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001672:	f000 f8cb 	bl	800180c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001676:	f000 fa15 	bl	8001aa4 <_ZL12MX_GPIO_Initv>
  //MX_ETH_Init();
  MX_USART3_UART_Init();
 800167a:	f000 f9b3 	bl	80019e4 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 800167e:	f000 f9df 	bl	8001a40 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_SPI1_Init();
 8001682:	f000 f937 	bl	80018f4 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8001686:	f000 f971 	bl	800196c <_ZL12MX_SPI2_Initv>
  MX_LWIP_Init();
 800168a:	f004 fa23 	bl	8005ad4 <MX_LWIP_Init>
  //MX_LWIP_Init();
  /* USER CODE BEGIN 2 */

  char data[] = "Angle=60.000000\n\r";
 800168e:	4b58      	ldr	r3, [pc, #352]	; (80017f0 <main+0x248>)
 8001690:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8001694:	461d      	mov	r5, r3
 8001696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169a:	682b      	ldr	r3, [r5, #0]
 800169c:	8023      	strh	r3, [r4, #0]
  float angle = 0;
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  int anglevalue = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

  PhaseShifter pe44820 = PhaseShifter(SI_GPIO_Port, GPIO_InitStruct_Si, LE_GPIO_Port, GPIO_InitStruct_Le, CLK_GPIO_Port, GPIO_InitStruct_Clk, (uint8_t) 0x000, MODE_OPT_1700_2200);
 80016ac:	f107 0658 	add.w	r6, r7, #88	; 0x58
 80016b0:	2301      	movs	r3, #1
 80016b2:	9310      	str	r3, [sp, #64]	; 0x40
 80016b4:	2300      	movs	r3, #0
 80016b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80016b8:	ad0a      	add	r5, sp, #40	; 0x28
 80016ba:	f107 04f4 	add.w	r4, r7, #244	; 0xf4
 80016be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	602b      	str	r3, [r5, #0]
 80016c6:	4b4b      	ldr	r3, [pc, #300]	; (80017f4 <main+0x24c>)
 80016c8:	9309      	str	r3, [sp, #36]	; 0x24
 80016ca:	ad04      	add	r5, sp, #16
 80016cc:	f507 7484 	add.w	r4, r7, #264	; 0x108
 80016d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	602b      	str	r3, [r5, #0]
 80016d8:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <main+0x250>)
 80016da:	9303      	str	r3, [sp, #12]
 80016dc:	466c      	mov	r4, sp
 80016de:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80016e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016ea:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80016ee:	cb0c      	ldmia	r3, {r2, r3}
 80016f0:	4940      	ldr	r1, [pc, #256]	; (80017f4 <main+0x24c>)
 80016f2:	4630      	mov	r0, r6
 80016f4:	f7ff fd4e 	bl	8001194 <_ZN12PhaseShifterC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_h6mode_e>
  HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016fe:	483d      	ldr	r0, [pc, #244]	; (80017f4 <main+0x24c>)
 8001700:	f002 fc94 	bl	800402c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001708:	f000 ffb8 	bl	800267c <HAL_Delay>
  HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_SET);
 800170c:	2201      	movs	r2, #1
 800170e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001712:	4838      	ldr	r0, [pc, #224]	; (80017f4 <main+0x24c>)
 8001714:	f002 fc8a 	bl	800402c <HAL_GPIO_WritePin>

  PE43xx pe4312 = PE43xx(SDI_Att_GPIO_Port, GPIO_InitStruct_Si_Att, GPIOC, GPIO_InitStruct_Le_Att, CLK_Att_GPIO_Port, GPIO_InitStruct_Clk_Att, (uint8_t) 0x000, 0);
 8001718:	463e      	mov	r6, r7
 800171a:	2300      	movs	r3, #0
 800171c:	9310      	str	r3, [sp, #64]	; 0x40
 800171e:	2300      	movs	r3, #0
 8001720:	930f      	str	r3, [sp, #60]	; 0x3c
 8001722:	ad0a      	add	r5, sp, #40	; 0x28
 8001724:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8001728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800172a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	602b      	str	r3, [r5, #0]
 8001730:	4b32      	ldr	r3, [pc, #200]	; (80017fc <main+0x254>)
 8001732:	9309      	str	r3, [sp, #36]	; 0x24
 8001734:	ad04      	add	r5, sp, #16
 8001736:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 800173a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800173c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	602b      	str	r3, [r5, #0]
 8001742:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <main+0x258>)
 8001744:	9303      	str	r3, [sp, #12]
 8001746:	466c      	mov	r4, sp
 8001748:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800174c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001750:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001754:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001758:	cb0c      	ldmia	r3, {r2, r3}
 800175a:	4928      	ldr	r1, [pc, #160]	; (80017fc <main+0x254>)
 800175c:	4630      	mov	r0, r6
 800175e:	f7ff fc01 	bl	8000f64 <_ZN6PE43xxC1EP12GPIO_TypeDef16GPIO_InitTypeDefS1_S2_S1_S2_hh>
  pe4312.begin();
 8001762:	463b      	mov	r3, r7
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fc31 	bl	8000fcc <_ZN6PE43xx5beginEv>
  HAL_GPIO_WritePin(GPIOC, LE_Att_Pin, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001770:	4823      	ldr	r0, [pc, #140]	; (8001800 <main+0x258>)
 8001772:	f002 fc5b 	bl	800402c <HAL_GPIO_WritePin>

  Netif_Config();
 8001776:	f000 fab9 	bl	8001cec <_ZL12Netif_Configv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 800177a:	f004 faeb 	bl	8005d54 <MX_LWIP_Process>

	  angle = pe44820.setAngle(anglevalue);
 800177e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001782:	ee07 3a90 	vmov	s15, r3
 8001786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800178a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800178e:	eeb0 0a67 	vmov.f32	s0, s15
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fec8 	bl	8001528 <_ZN12PhaseShifter8setAngleEf>
 8001798:	ed87 0a4c 	vstr	s0, [r7, #304]	; 0x130
	  pe4312.setLevel(30);
 800179c:	463b      	mov	r3, r7
 800179e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fc52 	bl	800104c <_ZN6PE43xx8setLevelEf>
	  sprintf(data,"%f\n\r",angle);
 80017a8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80017ac:	f7fe fedc 	bl	8000568 <__aeabi_f2d>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 80017b8:	4912      	ldr	r1, [pc, #72]	; (8001804 <main+0x25c>)
 80017ba:	f00f f929 	bl	8010a10 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)data, sizeof(data), 10);
 80017be:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80017c2:	230a      	movs	r3, #10
 80017c4:	2212      	movs	r2, #18
 80017c6:	4810      	ldr	r0, [pc, #64]	; (8001808 <main+0x260>)
 80017c8:	f003 fac9 	bl	8004d5e <HAL_UART_Transmit>

	  anglevalue++;
 80017cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80017d0:	3301      	adds	r3, #1
 80017d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  if(anglevalue >= 360){
 80017d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80017da:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80017de:	db02      	blt.n	80017e6 <main+0x23e>
		  anglevalue = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  }

	  HAL_Delay(1000);
 80017e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ea:	f000 ff47 	bl	800267c <HAL_Delay>
	  MX_LWIP_Process();
 80017ee:	e7c4      	b.n	800177a <main+0x1d2>
 80017f0:	08012db0 	.word	0x08012db0
 80017f4:	40020c00 	.word	0x40020c00
 80017f8:	40021400 	.word	0x40021400
 80017fc:	40021000 	.word	0x40021000
 8001800:	40020800 	.word	0x40020800
 8001804:	08012da8 	.word	0x08012da8
 8001808:	200002c8 	.word	0x200002c8

0800180c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b094      	sub	sp, #80	; 0x50
 8001810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001812:	f107 0320 	add.w	r3, r7, #32
 8001816:	2230      	movs	r2, #48	; 0x30
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f00f f985 	bl	8010b2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <_Z18SystemClock_Configv+0xe0>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	4a2c      	ldr	r2, [pc, #176]	; (80018ec <_Z18SystemClock_Configv+0xe0>)
 800183a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183e:	6413      	str	r3, [r2, #64]	; 0x40
 8001840:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <_Z18SystemClock_Configv+0xe0>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800184c:	2300      	movs	r3, #0
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <_Z18SystemClock_Configv+0xe4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <_Z18SystemClock_Configv+0xe4>)
 8001856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <_Z18SystemClock_Configv+0xe4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001868:	2301      	movs	r3, #1
 800186a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800186c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001872:	2302      	movs	r3, #2
 8001874:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800187c:	2304      	movs	r3, #4
 800187e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001880:	23a8      	movs	r3, #168	; 0xa8
 8001882:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001884:	2302      	movs	r3, #2
 8001886:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001888:	2307      	movs	r3, #7
 800188a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188c:	f107 0320 	add.w	r3, r7, #32
 8001890:	4618      	mov	r0, r3
 8001892:	f002 fcf3 	bl	800427c <HAL_RCC_OscConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80018a6:	f000 fa51 	bl	8001d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018aa:	230f      	movs	r3, #15
 80018ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ae:	2302      	movs	r3, #2
 80018b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	2105      	movs	r1, #5
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 ff4f 	bl	800476c <HAL_RCC_ClockConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf14      	ite	ne
 80018d4:	2301      	movne	r3, #1
 80018d6:	2300      	moveq	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80018de:	f000 fa35 	bl	8001d4c <Error_Handler>
  }
}
 80018e2:	bf00      	nop
 80018e4:	3750      	adds	r7, #80	; 0x50
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40007000 	.word	0x40007000

080018f4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <_ZL12MX_SPI1_Initv+0x70>)
 80018fa:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <_ZL12MX_SPI1_Initv+0x74>)
 80018fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <_ZL12MX_SPI1_Initv+0x70>)
 8001900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <_ZL12MX_SPI1_Initv+0x70>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <_ZL12MX_SPI1_Initv+0x70>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <_ZL12MX_SPI1_Initv+0x70>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <_ZL12MX_SPI1_Initv+0x70>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <_ZL12MX_SPI1_Initv+0x70>)
 8001920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001924:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <_ZL12MX_SPI1_Initv+0x70>)
 8001928:	2200      	movs	r2, #0
 800192a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800192c:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <_ZL12MX_SPI1_Initv+0x70>)
 800192e:	2200      	movs	r2, #0
 8001930:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <_ZL12MX_SPI1_Initv+0x70>)
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <_ZL12MX_SPI1_Initv+0x70>)
 800193a:	2200      	movs	r2, #0
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <_ZL12MX_SPI1_Initv+0x70>)
 8001940:	220a      	movs	r2, #10
 8001942:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001944:	4807      	ldr	r0, [pc, #28]	; (8001964 <_ZL12MX_SPI1_Initv+0x70>)
 8001946:	f003 f931 	bl	8004bac <HAL_SPI_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf14      	ite	ne
 8001950:	2301      	movne	r3, #1
 8001952:	2300      	moveq	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800195a:	f000 f9f7 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000218 	.word	0x20000218
 8001968:	40013000 	.word	0x40013000

0800196c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <_ZL12MX_SPI2_Initv+0x70>)
 8001972:	4a1b      	ldr	r2, [pc, #108]	; (80019e0 <_ZL12MX_SPI2_Initv+0x74>)
 8001974:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001976:	4b19      	ldr	r3, [pc, #100]	; (80019dc <_ZL12MX_SPI2_Initv+0x70>)
 8001978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800197c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <_ZL12MX_SPI2_Initv+0x70>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <_ZL12MX_SPI2_Initv+0x70>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <_ZL12MX_SPI2_Initv+0x70>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <_ZL12MX_SPI2_Initv+0x70>)
 8001992:	2200      	movs	r2, #0
 8001994:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <_ZL12MX_SPI2_Initv+0x70>)
 8001998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800199c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <_ZL12MX_SPI2_Initv+0x70>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019a4:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <_ZL12MX_SPI2_Initv+0x70>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <_ZL12MX_SPI2_Initv+0x70>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <_ZL12MX_SPI2_Initv+0x70>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <_ZL12MX_SPI2_Initv+0x70>)
 80019b8:	220a      	movs	r2, #10
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019bc:	4807      	ldr	r0, [pc, #28]	; (80019dc <_ZL12MX_SPI2_Initv+0x70>)
 80019be:	f003 f8f5 	bl	8004bac <HAL_SPI_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf14      	ite	ne
 80019c8:	2301      	movne	r3, #1
 80019ca:	2300      	moveq	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 80019d2:	f000 f9bb 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000270 	.word	0x20000270
 80019e0:	40003800 	.word	0x40003800

080019e4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <_ZL19MX_USART3_UART_Initv+0x54>)
 80019ea:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <_ZL19MX_USART3_UART_Initv+0x58>)
 80019ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <_ZL19MX_USART3_UART_Initv+0x54>)
 80019f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <_ZL19MX_USART3_UART_Initv+0x54>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <_ZL19MX_USART3_UART_Initv+0x54>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a1c:	f003 f94f 	bl	8004cbe <HAL_UART_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001a30:	f000 f98c 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200002c8 	.word	0x200002c8
 8001a3c:	40004800 	.word	0x40004800

08001a40 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a4e:	2204      	movs	r2, #4
 8001a50:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a54:	2202      	movs	r2, #2
 8001a56:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a60:	2202      	movs	r2, #2
 8001a62:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a82:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001a84:	f002 faeb 	bl	800405e <HAL_PCD_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bf14      	ite	ne
 8001a8e:	2301      	movne	r3, #1
 8001a90:	2300      	moveq	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 8001a98:	f000 f958 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000310 	.word	0x20000310

08001aa4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08e      	sub	sp, #56	; 0x38
 8001aa8:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	623b      	str	r3, [r7, #32]
 8001abe:	4b84      	ldr	r3, [pc, #528]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a83      	ldr	r2, [pc, #524]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b81      	ldr	r3, [pc, #516]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	623b      	str	r3, [r7, #32]
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	4b7d      	ldr	r3, [pc, #500]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a7c      	ldr	r2, [pc, #496]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b7a      	ldr	r3, [pc, #488]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a75      	ldr	r2, [pc, #468]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b73      	ldr	r3, [pc, #460]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	4b6f      	ldr	r3, [pc, #444]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a6e      	ldr	r2, [pc, #440]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b6c      	ldr	r3, [pc, #432]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a67      	ldr	r2, [pc, #412]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001b34:	f043 0320 	orr.w	r3, r3, #32
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b65      	ldr	r3, [pc, #404]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0320 	and.w	r3, r3, #32
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b61      	ldr	r3, [pc, #388]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a60      	ldr	r2, [pc, #384]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001b50:	f043 0310 	orr.w	r3, r3, #16
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b5e      	ldr	r3, [pc, #376]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	4b5a      	ldr	r3, [pc, #360]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a59      	ldr	r2, [pc, #356]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001b6c:	f043 0308 	orr.w	r3, r3, #8
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b57      	ldr	r3, [pc, #348]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a52      	ldr	r2, [pc, #328]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b50      	ldr	r3, [pc, #320]	; (8001cd0 <_ZL12MX_GPIO_Initv+0x22c>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001ba0:	484c      	ldr	r0, [pc, #304]	; (8001cd4 <_ZL12MX_GPIO_Initv+0x230>)
 8001ba2:	f002 fa43 	bl	800402c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LE_GPIO_Port, LE_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bac:	484a      	ldr	r0, [pc, #296]	; (8001cd8 <_ZL12MX_GPIO_Initv+0x234>)
 8001bae:	f002 fa3d 	bl	800402c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SDI_Att_Pin|CLK_Att_Pin, GPIO_PIN_RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8001bb8:	4848      	ldr	r0, [pc, #288]	; (8001cdc <_ZL12MX_GPIO_Initv+0x238>)
 8001bba:	f002 fa37 	bl	800402c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SI_Pin|CLK_Pin, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001bc4:	4846      	ldr	r0, [pc, #280]	; (8001ce0 <_ZL12MX_GPIO_Initv+0x23c>)
 8001bc6:	f002 fa31 	bl	800402c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2140      	movs	r1, #64	; 0x40
 8001bce:	4845      	ldr	r0, [pc, #276]	; (8001ce4 <_ZL12MX_GPIO_Initv+0x240>)
 8001bd0:	f002 fa2c 	bl	800402c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LE_Att_GPIO_Port, LE_Att_Pin, GPIO_PIN_RESET);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bda:	4843      	ldr	r0, [pc, #268]	; (8001ce8 <_ZL12MX_GPIO_Initv+0x244>)
 8001bdc:	f002 fa26 	bl	800402c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001be6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	483c      	ldr	r0, [pc, #240]	; (8001ce8 <_ZL12MX_GPIO_Initv+0x244>)
 8001bf8:	f002 f86c 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001bfc:	f244 0381 	movw	r3, #16513	; 0x4081
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c02:	2301      	movs	r3, #1
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c12:	4619      	mov	r1, r3
 8001c14:	482f      	ldr	r0, [pc, #188]	; (8001cd4 <_ZL12MX_GPIO_Initv+0x230>)
 8001c16:	f002 f85d 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LE_Pin */
  GPIO_InitStruct.Pin = LE_Pin;
 8001c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LE_GPIO_Port, &GPIO_InitStruct);
 8001c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c30:	4619      	mov	r1, r3
 8001c32:	4829      	ldr	r0, [pc, #164]	; (8001cd8 <_ZL12MX_GPIO_Initv+0x234>)
 8001c34:	f002 f84e 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDI_Att_Pin CLK_Att_Pin */
  GPIO_InitStruct.Pin = SDI_Att_Pin|CLK_Att_Pin;
 8001c38:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4822      	ldr	r0, [pc, #136]	; (8001cdc <_ZL12MX_GPIO_Initv+0x238>)
 8001c52:	f002 f83f 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SI_Pin CLK_Pin */
  GPIO_InitStruct.Pin = SI_Pin|CLK_Pin;
 8001c56:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	481c      	ldr	r0, [pc, #112]	; (8001ce0 <_ZL12MX_GPIO_Initv+0x23c>)
 8001c70:	f002 f830 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001c74:	2340      	movs	r3, #64	; 0x40
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4816      	ldr	r0, [pc, #88]	; (8001ce4 <_ZL12MX_GPIO_Initv+0x240>)
 8001c8c:	f002 f822 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4810      	ldr	r0, [pc, #64]	; (8001ce4 <_ZL12MX_GPIO_Initv+0x240>)
 8001ca4:	f002 f816 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LE_Att_Pin */
  GPIO_InitStruct.Pin = LE_Att_Pin;
 8001ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LE_Att_GPIO_Port, &GPIO_InitStruct);
 8001cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4809      	ldr	r0, [pc, #36]	; (8001ce8 <_ZL12MX_GPIO_Initv+0x244>)
 8001cc2:	f002 f807 	bl	8003cd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cc6:	bf00      	nop
 8001cc8:	3738      	adds	r7, #56	; 0x38
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40021400 	.word	0x40021400
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40020c00 	.word	0x40020c00
 8001ce4:	40021800 	.word	0x40021800
 8001ce8:	40020800 	.word	0x40020800

08001cec <_ZL12Netif_Configv>:

/* USER CODE BEGIN 4 */
static void Netif_Config(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af04      	add	r7, sp, #16
    ip_addr_t ipaddr;
    ip_addr_t netmask;
    ip_addr_t gw;

    /* Initialize the LwIP stack */
    lwip_init();
 8001cf2:	f004 fc31 	bl	8006558 <lwip_init>

    /* IP address setting */
    IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <_ZL12Netif_Configv+0x48>)
 8001cf8:	60fb      	str	r3, [r7, #12]
    IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 8001cfa:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001cfe:	60bb      	str	r3, [r7, #8]
    IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <_ZL12Netif_Configv+0x4c>)
 8001d02:	607b      	str	r3, [r7, #4]

    /* Add the network interface */
    netif_add(&gnetif, &ipaddr, &netmask, &gw, MACAddr, &ethernetif_init, &ethernet_input);
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	f107 0208 	add.w	r2, r7, #8
 8001d0a:	f107 010c 	add.w	r1, r7, #12
 8001d0e:	480b      	ldr	r0, [pc, #44]	; (8001d3c <_ZL12Netif_Configv+0x50>)
 8001d10:	9002      	str	r0, [sp, #8]
 8001d12:	480b      	ldr	r0, [pc, #44]	; (8001d40 <_ZL12Netif_Configv+0x54>)
 8001d14:	9001      	str	r0, [sp, #4]
 8001d16:	480b      	ldr	r0, [pc, #44]	; (8001d44 <_ZL12Netif_Configv+0x58>)
 8001d18:	9000      	str	r0, [sp, #0]
 8001d1a:	480b      	ldr	r0, [pc, #44]	; (8001d48 <_ZL12Netif_Configv+0x5c>)
 8001d1c:	f005 f908 	bl	8006f30 <netif_add>

    /* Set the network interface as default */
    netif_set_default(&gnetif);
 8001d20:	4809      	ldr	r0, [pc, #36]	; (8001d48 <_ZL12Netif_Configv+0x5c>)
 8001d22:	f005 fab7 	bl	8007294 <netif_set_default>

    /* Bring up the network interface */
    netif_set_up(&gnetif);
 8001d26:	4808      	ldr	r0, [pc, #32]	; (8001d48 <_ZL12Netif_Configv+0x5c>)
 8001d28:	f005 fac4 	bl	80072b4 <netif_set_up>
}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	6401a8c0 	.word	0x6401a8c0
 8001d38:	0101a8c0 	.word	0x0101a8c0
 8001d3c:	0800fd75 	.word	0x0800fd75
 8001d40:	0800602d 	.word	0x0800602d
 8001d44:	20000000 	.word	0x20000000
 8001d48:	200007f4 	.word	0x200007f4

08001d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d50:	b672      	cpsid	i
}
 8001d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <Error_Handler+0x8>
	...

08001d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a0f      	ldr	r2, [pc, #60]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08e      	sub	sp, #56	; 0x38
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a50      	ldr	r2, [pc, #320]	; (8001f08 <HAL_SPI_MspInit+0x160>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d14a      	bne.n	8001e60 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
 8001dce:	4b4f      	ldr	r3, [pc, #316]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	4a4e      	ldr	r2, [pc, #312]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001dd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dda:	4b4c      	ldr	r3, [pc, #304]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	4b48      	ldr	r3, [pc, #288]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a47      	ldr	r2, [pc, #284]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b45      	ldr	r3, [pc, #276]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	4b41      	ldr	r3, [pc, #260]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a40      	ldr	r2, [pc, #256]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b3e      	ldr	r3, [pc, #248]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e1e:	2320      	movs	r3, #32
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e2e:	2305      	movs	r3, #5
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e36:	4619      	mov	r1, r3
 8001e38:	4835      	ldr	r0, [pc, #212]	; (8001f10 <HAL_SPI_MspInit+0x168>)
 8001e3a:	f001 ff4b 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e3e:	2320      	movs	r3, #32
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e4e:	2305      	movs	r3, #5
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e56:	4619      	mov	r1, r3
 8001e58:	482e      	ldr	r0, [pc, #184]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001e5a:	f001 ff3b 	bl	8003cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e5e:	e04f      	b.n	8001f00 <HAL_SPI_MspInit+0x158>
  else if(hspi->Instance==SPI2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a2c      	ldr	r2, [pc, #176]	; (8001f18 <HAL_SPI_MspInit+0x170>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d14a      	bne.n	8001f00 <HAL_SPI_MspInit+0x158>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	4b27      	ldr	r3, [pc, #156]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a26      	ldr	r2, [pc, #152]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a1f      	ldr	r2, [pc, #124]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <HAL_SPI_MspInit+0x164>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ece:	2305      	movs	r3, #5
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4810      	ldr	r0, [pc, #64]	; (8001f1c <HAL_SPI_MspInit+0x174>)
 8001eda:	f001 fefb 	bl	8003cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ef0:	2305      	movs	r3, #5
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4806      	ldr	r0, [pc, #24]	; (8001f14 <HAL_SPI_MspInit+0x16c>)
 8001efc:	f001 feea 	bl	8003cd4 <HAL_GPIO_Init>
}
 8001f00:	bf00      	nop
 8001f02:	3738      	adds	r7, #56	; 0x38
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40013000 	.word	0x40013000
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000
 8001f14:	40020400 	.word	0x40020400
 8001f18:	40003800 	.word	0x40003800
 8001f1c:	40020800 	.word	0x40020800

08001f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a19      	ldr	r2, [pc, #100]	; (8001fa4 <HAL_UART_MspInit+0x84>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d12c      	bne.n	8001f9c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_UART_MspInit+0x88>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <HAL_UART_MspInit+0x88>)
 8001f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_UART_MspInit+0x88>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_UART_MspInit+0x88>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a10      	ldr	r2, [pc, #64]	; (8001fa8 <HAL_UART_MspInit+0x88>)
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_UART_MspInit+0x88>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f8c:	2307      	movs	r3, #7
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4619      	mov	r1, r3
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <HAL_UART_MspInit+0x8c>)
 8001f98:	f001 fe9c 	bl	8003cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f9c:	bf00      	nop
 8001f9e:	3728      	adds	r7, #40	; 0x28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40004800 	.word	0x40004800
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020c00 	.word	0x40020c00

08001fb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fd0:	d13f      	bne.n	8002052 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	4b21      	ldr	r3, [pc, #132]	; (800205c <HAL_PCD_MspInit+0xac>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a20      	ldr	r2, [pc, #128]	; (800205c <HAL_PCD_MspInit+0xac>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	; (800205c <HAL_PCD_MspInit+0xac>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fee:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002000:	230a      	movs	r3, #10
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4619      	mov	r1, r3
 800200a:	4815      	ldr	r0, [pc, #84]	; (8002060 <HAL_PCD_MspInit+0xb0>)
 800200c:	f001 fe62 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	480e      	ldr	r0, [pc, #56]	; (8002060 <HAL_PCD_MspInit+0xb0>)
 8002026:	f001 fe55 	bl	8003cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <HAL_PCD_MspInit+0xac>)
 800202c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <HAL_PCD_MspInit+0xac>)
 8002030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002034:	6353      	str	r3, [r2, #52]	; 0x34
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_PCD_MspInit+0xac>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a07      	ldr	r2, [pc, #28]	; (800205c <HAL_PCD_MspInit+0xac>)
 8002040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_PCD_MspInit+0xac>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002052:	bf00      	nop
 8002054:	3728      	adds	r7, #40	; 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	40020000 	.word	0x40020000

08002064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002068:	e7fe      	b.n	8002068 <NMI_Handler+0x4>

0800206a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206e:	e7fe      	b.n	800206e <HardFault_Handler+0x4>

08002070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <MemManage_Handler+0x4>

08002076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <BusFault_Handler+0x4>

0800207c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <UsageFault_Handler+0x4>

08002082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b0:	f000 fac4 	bl	800263c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <ETH_IRQHandler+0x10>)
 80020be:	f000 ff21 	bl	8002f04 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200055f4 	.word	0x200055f4

080020cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return 1;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_kill>:

int _kill(int pid, int sig)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <_kill+0x20>)
 80020e8:	2216      	movs	r2, #22
 80020ea:	601a      	str	r2, [r3, #0]
  return -1;
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	20000ae0 	.word	0x20000ae0

08002100 <_exit>:

void _exit (int status)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002108:	f04f 31ff 	mov.w	r1, #4294967295
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ffe5 	bl	80020dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002112:	e7fe      	b.n	8002112 <_exit+0x12>

08002114 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	e00a      	b.n	800213c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002126:	f3af 8000 	nop.w
 800212a:	4601      	mov	r1, r0
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	60ba      	str	r2, [r7, #8]
 8002132:	b2ca      	uxtb	r2, r1
 8002134:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	dbf0      	blt.n	8002126 <_read+0x12>
  }

  return len;
 8002144:	687b      	ldr	r3, [r7, #4]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e009      	b.n	8002174 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	60ba      	str	r2, [r7, #8]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	dbf1      	blt.n	8002160 <_write+0x12>
  }
  return len;
 800217c:	687b      	ldr	r3, [r7, #4]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <_close>:

int _close(int file)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ae:	605a      	str	r2, [r3, #4]
  return 0;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <_isatty>:

int _isatty(int file)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021c6:	2301      	movs	r3, #1
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f8:	4a14      	ldr	r2, [pc, #80]	; (800224c <_sbrk+0x5c>)
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <_sbrk+0x60>)
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <_sbrk+0x64>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <_sbrk+0x64>)
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <_sbrk+0x68>)
 8002210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	429a      	cmp	r2, r3
 800221e:	d205      	bcs.n	800222c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <_sbrk+0x6c>)
 8002222:	220c      	movs	r2, #12
 8002224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	e009      	b.n	8002240 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a06      	ldr	r2, [pc, #24]	; (8002254 <_sbrk+0x64>)
 800223c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	4618      	mov	r0, r3
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	20030000 	.word	0x20030000
 8002250:	00000400 	.word	0x00000400
 8002254:	20000828 	.word	0x20000828
 8002258:	2000ae00 	.word	0x2000ae00
 800225c:	20000ae0 	.word	0x20000ae0

08002260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <SystemInit+0x20>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	4a05      	ldr	r2, [pc, #20]	; (8002280 <SystemInit+0x20>)
 800226c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002288:	f7ff ffea 	bl	8002260 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800228c:	480c      	ldr	r0, [pc, #48]	; (80022c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800228e:	490d      	ldr	r1, [pc, #52]	; (80022c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002290:	4a0d      	ldr	r2, [pc, #52]	; (80022c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002294:	e002      	b.n	800229c <LoopCopyDataInit>

08002296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229a:	3304      	adds	r3, #4

0800229c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800229c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800229e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a0:	d3f9      	bcc.n	8002296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a2:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022a4:	4c0a      	ldr	r4, [pc, #40]	; (80022d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a8:	e001      	b.n	80022ae <LoopFillZerobss>

080022aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022ac:	3204      	adds	r2, #4

080022ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b0:	d3fb      	bcc.n	80022aa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022b2:	f00e fc8d 	bl	8010bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022b6:	f7ff f977 	bl	80015a8 <main>
  bx  lr    
 80022ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80022bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80022c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c4:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80022c8:	08016488 	.word	0x08016488
  ldr r2, =_sbss
 80022cc:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80022d0:	2000adfc 	.word	0x2000adfc

080022d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022d4:	e7fe      	b.n	80022d4 <ADC_IRQHandler>

080022d6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <LAN8742_RegisterBusIO+0x28>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d007      	beq.n	80022fe <LAN8742_RegisterBusIO+0x28>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <LAN8742_RegisterBusIO+0x28>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	e014      	b.n	800232e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d17c      	bne.n	8002454 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	e01c      	b.n	80023ae <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	f107 0208 	add.w	r2, r7, #8
 800237c:	2112      	movs	r1, #18
 800237e:	6978      	ldr	r0, [r7, #20]
 8002380:	4798      	blx	r3
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	da03      	bge.n	8002390 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002388:	f06f 0304 	mvn.w	r3, #4
 800238c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800238e:	e00b      	b.n	80023a8 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	429a      	cmp	r2, r3
 800239a:	d105      	bne.n	80023a8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
         break;
 80023a6:	e005      	b.n	80023b4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3301      	adds	r3, #1
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	d9df      	bls.n	8002374 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b1f      	cmp	r3, #31
 80023ba:	d902      	bls.n	80023c2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80023bc:	f06f 0302 	mvn.w	r3, #2
 80023c0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d145      	bne.n	8002454 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6810      	ldr	r0, [r2, #0]
 80023d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80023d4:	2100      	movs	r1, #0
 80023d6:	4798      	blx	r3
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	db37      	blt.n	800244e <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6810      	ldr	r0, [r2, #0]
 80023e6:	f107 0208 	add.w	r2, r7, #8
 80023ea:	2100      	movs	r1, #0
 80023ec:	4798      	blx	r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	db28      	blt.n	8002446 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	4798      	blx	r3
 80023fa:	4603      	mov	r3, r0
 80023fc:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80023fe:	e01c      	b.n	800243a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4798      	blx	r3
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002412:	d80e      	bhi.n	8002432 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6810      	ldr	r0, [r2, #0]
 800241c:	f107 0208 	add.w	r2, r7, #8
 8002420:	2100      	movs	r1, #0
 8002422:	4798      	blx	r3
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	da07      	bge.n	800243a <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 800242a:	f06f 0304 	mvn.w	r3, #4
 800242e:	613b      	str	r3, [r7, #16]
                 break;
 8002430:	e010      	b.n	8002454 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002432:	f06f 0301 	mvn.w	r3, #1
 8002436:	613b      	str	r3, [r7, #16]
               break;
 8002438:	e00c      	b.n	8002454 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1dd      	bne.n	8002400 <LAN8742_Init+0xc6>
 8002444:	e006      	b.n	8002454 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002446:	f06f 0304 	mvn.w	r3, #4
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	e002      	b.n	8002454 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800244e:	f06f 0303 	mvn.w	r3, #3
 8002452:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d112      	bne.n	8002480 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	4798      	blx	r3
 8002460:	4603      	mov	r3, r0
 8002462:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002464:	bf00      	nop
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	4798      	blx	r3
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002478:	d9f5      	bls.n	8002466 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	605a      	str	r2, [r3, #4]
   }

   return status;
 8002480:	693b      	ldr	r3, [r7, #16]
 }
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b084      	sub	sp, #16
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6810      	ldr	r0, [r2, #0]
 800249e:	f107 020c 	add.w	r2, r7, #12
 80024a2:	2101      	movs	r1, #1
 80024a4:	4798      	blx	r3
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	da02      	bge.n	80024b2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80024ac:	f06f 0304 	mvn.w	r3, #4
 80024b0:	e06e      	b.n	8002590 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6810      	ldr	r0, [r2, #0]
 80024ba:	f107 020c 	add.w	r2, r7, #12
 80024be:	2101      	movs	r1, #1
 80024c0:	4798      	blx	r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	da02      	bge.n	80024ce <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80024c8:	f06f 0304 	mvn.w	r3, #4
 80024cc:	e060      	b.n	8002590 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80024d8:	2301      	movs	r3, #1
 80024da:	e059      	b.n	8002590 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6810      	ldr	r0, [r2, #0]
 80024e4:	f107 020c 	add.w	r2, r7, #12
 80024e8:	2100      	movs	r1, #0
 80024ea:	4798      	blx	r3
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	da02      	bge.n	80024f8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80024f2:	f06f 0304 	mvn.w	r3, #4
 80024f6:	e04b      	b.n	8002590 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d11b      	bne.n	800253a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d006      	beq.n	800251a <LAN8742_GetLinkState+0x90>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002516:	2302      	movs	r3, #2
 8002518:	e03a      	b.n	8002590 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002524:	2303      	movs	r3, #3
 8002526:	e033      	b.n	8002590 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002532:	2304      	movs	r3, #4
 8002534:	e02c      	b.n	8002590 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002536:	2305      	movs	r3, #5
 8002538:	e02a      	b.n	8002590 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6810      	ldr	r0, [r2, #0]
 8002542:	f107 020c 	add.w	r2, r7, #12
 8002546:	211f      	movs	r1, #31
 8002548:	4798      	blx	r3
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	da02      	bge.n	8002556 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002550:	f06f 0304 	mvn.w	r3, #4
 8002554:	e01c      	b.n	8002590 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002560:	2306      	movs	r3, #6
 8002562:	e015      	b.n	8002590 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 031c 	and.w	r3, r3, #28
 800256a:	2b18      	cmp	r3, #24
 800256c:	d101      	bne.n	8002572 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800256e:	2302      	movs	r3, #2
 8002570:	e00e      	b.n	8002590 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f003 031c 	and.w	r3, r3, #28
 8002578:	2b08      	cmp	r3, #8
 800257a:	d101      	bne.n	8002580 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800257c:	2303      	movs	r3, #3
 800257e:	e007      	b.n	8002590 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 031c 	and.w	r3, r3, #28
 8002586:	2b14      	cmp	r3, #20
 8002588:	d101      	bne.n	800258e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800258a:	2304      	movs	r3, #4
 800258c:	e000      	b.n	8002590 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800258e:	2305      	movs	r3, #5
    }
  }
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_Init+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <HAL_Init+0x40>)
 80025a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_Init+0x40>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_Init+0x40>)
 80025ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HAL_Init+0x40>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <HAL_Init+0x40>)
 80025ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f000 f94f 	bl	8002864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025c6:	200f      	movs	r0, #15
 80025c8:	f000 f808 	bl	80025dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025cc:	f7ff fbc4 	bl	8001d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023c00 	.word	0x40023c00

080025dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_InitTick+0x54>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_InitTick+0x58>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f967 	bl	80028ce <HAL_SYSTICK_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e00e      	b.n	8002628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b0f      	cmp	r3, #15
 800260e:	d80a      	bhi.n	8002626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002610:	2200      	movs	r2, #0
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	f000 f92f 	bl	800287a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800261c:	4a06      	ldr	r2, [pc, #24]	; (8002638 <HAL_InitTick+0x5c>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000008 	.word	0x20000008
 8002634:	20000010 	.word	0x20000010
 8002638:	2000000c 	.word	0x2000000c

0800263c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_IncTick+0x20>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_IncTick+0x24>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4413      	add	r3, r2
 800264c:	4a04      	ldr	r2, [pc, #16]	; (8002660 <HAL_IncTick+0x24>)
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000010 	.word	0x20000010
 8002660:	20000af0 	.word	0x20000af0

08002664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return uwTick;
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <HAL_GetTick+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000af0 	.word	0x20000af0

0800267c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff ffee 	bl	8002664 <HAL_GetTick>
 8002688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002694:	d005      	beq.n	80026a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <HAL_Delay+0x44>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026a2:	bf00      	nop
 80026a4:	f7ff ffde 	bl	8002664 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d8f7      	bhi.n	80026a4 <HAL_Delay+0x28>
  {
  }
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000010 	.word	0x20000010

080026c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e0:	4013      	ands	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f6:	4a04      	ldr	r2, [pc, #16]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	60d3      	str	r3, [r2, #12]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <__NVIC_GetPriorityGrouping+0x18>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	0a1b      	lsrs	r3, r3, #8
 8002716:	f003 0307 	and.w	r3, r3, #7
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	2b00      	cmp	r3, #0
 8002738:	db0b      	blt.n	8002752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	f003 021f 	and.w	r2, r3, #31
 8002740:	4907      	ldr	r1, [pc, #28]	; (8002760 <__NVIC_EnableIRQ+0x38>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	2001      	movs	r0, #1
 800274a:	fa00 f202 	lsl.w	r2, r0, r2
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000e100 	.word	0xe000e100

08002764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	2b00      	cmp	r3, #0
 8002776:	db0a      	blt.n	800278e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	490c      	ldr	r1, [pc, #48]	; (80027b0 <__NVIC_SetPriority+0x4c>)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	0112      	lsls	r2, r2, #4
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	440b      	add	r3, r1
 8002788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800278c:	e00a      	b.n	80027a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4908      	ldr	r1, [pc, #32]	; (80027b4 <__NVIC_SetPriority+0x50>)
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	3b04      	subs	r3, #4
 800279c:	0112      	lsls	r2, r2, #4
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	440b      	add	r3, r1
 80027a2:	761a      	strb	r2, [r3, #24]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000e100 	.word	0xe000e100
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f1c3 0307 	rsb	r3, r3, #7
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	bf28      	it	cs
 80027d6:	2304      	movcs	r3, #4
 80027d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3304      	adds	r3, #4
 80027de:	2b06      	cmp	r3, #6
 80027e0:	d902      	bls.n	80027e8 <NVIC_EncodePriority+0x30>
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3b03      	subs	r3, #3
 80027e6:	e000      	b.n	80027ea <NVIC_EncodePriority+0x32>
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	f04f 32ff 	mov.w	r2, #4294967295
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43da      	mvns	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	401a      	ands	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002800:	f04f 31ff 	mov.w	r1, #4294967295
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa01 f303 	lsl.w	r3, r1, r3
 800280a:	43d9      	mvns	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	4313      	orrs	r3, r2
         );
}
 8002812:	4618      	mov	r0, r3
 8002814:	3724      	adds	r7, #36	; 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002830:	d301      	bcc.n	8002836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002832:	2301      	movs	r3, #1
 8002834:	e00f      	b.n	8002856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <SysTick_Config+0x40>)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3b01      	subs	r3, #1
 800283c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800283e:	210f      	movs	r1, #15
 8002840:	f04f 30ff 	mov.w	r0, #4294967295
 8002844:	f7ff ff8e 	bl	8002764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <SysTick_Config+0x40>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800284e:	4b04      	ldr	r3, [pc, #16]	; (8002860 <SysTick_Config+0x40>)
 8002850:	2207      	movs	r2, #7
 8002852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	e000e010 	.word	0xe000e010

08002864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ff29 	bl	80026c4 <__NVIC_SetPriorityGrouping>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800287a:	b580      	push	{r7, lr}
 800287c:	b086      	sub	sp, #24
 800287e:	af00      	add	r7, sp, #0
 8002880:	4603      	mov	r3, r0
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800288c:	f7ff ff3e 	bl	800270c <__NVIC_GetPriorityGrouping>
 8002890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	6978      	ldr	r0, [r7, #20]
 8002898:	f7ff ff8e 	bl	80027b8 <NVIC_EncodePriority>
 800289c:	4602      	mov	r2, r0
 800289e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff5d 	bl	8002764 <__NVIC_SetPriority>
}
 80028aa:	bf00      	nop
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4603      	mov	r3, r0
 80028ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff31 	bl	8002728 <__NVIC_EnableIRQ>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ffa2 	bl	8002820 <SysTick_Config>
 80028dc:	4603      	mov	r3, r0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e06c      	b.n	80029d4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2223      	movs	r2, #35	; 0x23
 8002908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f003 fbdd 	bl	80060cc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	4b31      	ldr	r3, [pc, #196]	; (80029dc <HAL_ETH_Init+0xf4>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	4a30      	ldr	r2, [pc, #192]	; (80029dc <HAL_ETH_Init+0xf4>)
 800291c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002920:	6453      	str	r3, [r2, #68]	; 0x44
 8002922:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <HAL_ETH_Init+0xf4>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800292e:	4b2c      	ldr	r3, [pc, #176]	; (80029e0 <HAL_ETH_Init+0xf8>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4a2b      	ldr	r2, [pc, #172]	; (80029e0 <HAL_ETH_Init+0xf8>)
 8002934:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002938:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800293a:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <HAL_ETH_Init+0xf8>)
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	4927      	ldr	r1, [pc, #156]	; (80029e0 <HAL_ETH_Init+0xf8>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <HAL_ETH_Init+0xf8>)
 800294a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6812      	ldr	r2, [r2, #0]
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002962:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002964:	f7ff fe7e 	bl	8002664 <HAL_GetTick>
 8002968:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800296a:	e011      	b.n	8002990 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800296c:	f7ff fe7a 	bl	8002664 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800297a:	d909      	bls.n	8002990 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2204      	movs	r2, #4
 8002980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	22e0      	movs	r2, #224	; 0xe0
 8002988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e021      	b.n	80029d4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1e4      	bne.n	800296c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fef0 	bl	8003788 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 ff97 	bl	80038dc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 ffed 	bl	800398e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	461a      	mov	r2, r3
 80029ba:	2100      	movs	r1, #0
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 ff55 	bl	800386c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2210      	movs	r2, #16
 80029ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40013800 	.word	0x40013800

080029e4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d150      	bne.n	8002a98 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2223      	movs	r2, #35	; 0x23
 80029fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2204      	movs	r2, #4
 8002a02:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f9fd 	bl	8002e04 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0208 	orr.w	r2, r2, #8
 8002a18:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a22:	2001      	movs	r0, #1
 8002a24:	f7ff fe2a 	bl	800267c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0204 	orr.w	r2, r2, #4
 8002a3e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a48:	2001      	movs	r0, #1
 8002a4a:	f7ff fe17 	bl	800267c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fd36 	bl	80034c8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a72:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	f043 0302 	orr.w	r3, r3, #2
 8002a86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a8a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2223      	movs	r2, #35	; 0x23
 8002a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	e000      	b.n	8002a9a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
  }
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab0:	2b23      	cmp	r3, #35	; 0x23
 8002ab2:	d14a      	bne.n	8002b4a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2223      	movs	r2, #35	; 0x23
 8002ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ace:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ad2:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	f023 0302 	bic.w	r3, r3, #2
 8002ae6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002aea:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0204 	bic.w	r2, r2, #4
 8002afa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b04:	2001      	movs	r0, #1
 8002b06:	f7ff fdb9 	bl	800267c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fcd8 	bl	80034c8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0208 	bic.w	r2, r2, #8
 8002b26:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b30:	2001      	movs	r0, #1
 8002b32:	f7ff fda3 	bl	800267c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2210      	movs	r2, #16
 8002b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	e000      	b.n	8002b4c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
  }
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6c:	f043 0201 	orr.w	r2, r3, #1
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e07c      	b.n	8002c74 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b80:	2b23      	cmp	r3, #35	; 0x23
 8002b82:	d176      	bne.n	8002c72 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002b84:	2200      	movs	r2, #0
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 ff6d 	bl	8003a68 <ETH_Prepare_Tx_Descriptors>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d009      	beq.n	8002ba8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	f043 0202 	orr.w	r2, r3, #2
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e065      	b.n	8002c74 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8002ba8:	f3bf 8f4f 	dsb	sy
}
 8002bac:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3206      	adds	r2, #6
 8002bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bba:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	629a      	str	r2, [r3, #40]	; 0x28
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d904      	bls.n	8002bd8 <HAL_ETH_Transmit+0x84>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	1f1a      	subs	r2, r3, #4
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3106      	adds	r1, #6
 8002be4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002be8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bec:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002bee:	f7ff fd39 	bl	8002664 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002bf4:	e037      	b.n	8002c66 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d011      	beq.n	8002c2c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	f043 0208 	orr.w	r2, r3, #8
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e023      	b.n	8002c74 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c32:	d018      	beq.n	8002c66 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c34:	f7ff fd16 	bl	8002664 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d302      	bcc.n	8002c4a <HAL_ETH_Transmit+0xf6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10d      	bne.n	8002c66 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c50:	f043 0204 	orr.w	r2, r3, #4
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002c60:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e006      	b.n	8002c74 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	dbc3      	blt.n	8002bf6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
  }
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f043 0201 	orr.w	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0a8      	b.n	8002dfa <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cae:	2b23      	cmp	r3, #35	; 0x23
 8002cb0:	d001      	beq.n	8002cb6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e0a1      	b.n	8002dfa <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cba:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	3212      	adds	r2, #18
 8002cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ccc:	f1c3 0304 	rsb	r3, r3, #4
 8002cd0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002cd2:	e06a      	b.n	8002daa <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	69da      	ldr	r2, [r3, #28]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d103      	bne.n	8002d04 <HAL_ETH_ReadData+0x88>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d040      	beq.n	8002d86 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00c      	beq.n	8002d48 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0c1b      	lsrs	r3, r3, #16
 8002d34:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002d38:	3b04      	subs	r3, #4
 8002d3a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002d60:	461a      	mov	r2, r3
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	f003 fb89 	bl	800647c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	441a      	add	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2200      	movs	r2, #0
 8002d84:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d902      	bls.n	8002d98 <HAL_ETH_ReadData+0x11c>
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3b04      	subs	r3, #4
 8002d96:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	3212      	adds	r2, #18
 8002d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	3301      	adds	r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	db06      	blt.n	8002dc0 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d202      	bcs.n	8002dc0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d089      	beq.n	8002cd4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	441a      	add	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f815 	bl	8002e04 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d108      	bne.n	8002df8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e000      	b.n	8002dfa <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002e10:	2301      	movs	r3, #1
 8002e12:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e18:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	3212      	adds	r2, #18
 8002e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e24:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e2a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002e2c:	e03d      	b.n	8002eaa <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d112      	bne.n	8002e5c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002e36:	f107 0308 	add.w	r3, r7, #8
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f003 faee 	bl	800641c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	74fb      	strb	r3, [r7, #19]
 8002e4a:	e007      	b.n	8002e5c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	461a      	mov	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002e5c:	7cfb      	ldrb	r3, [r7, #19]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d023      	beq.n	8002eaa <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	4a24      	ldr	r2, [pc, #144]	; (8002f00 <ETH_UpdateDescriptor+0xfc>)
 8002e6e:	605a      	str	r2, [r3, #4]
 8002e70:	e003      	b.n	8002e7a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002e78:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	61fb      	str	r3, [r7, #28]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d902      	bls.n	8002e98 <ETH_UpdateDescriptor+0x94>
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3b04      	subs	r3, #4
 8002e96:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	3212      	adds	r2, #18
 8002e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea2:	617b      	str	r3, [r7, #20]
      desccount--;
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <ETH_UpdateDescriptor+0xb2>
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1bb      	bne.n	8002e2e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d01a      	beq.n	8002ef6 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002eca:	f3bf 8f5f 	dmb	sy
}
 8002ece:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6919      	ldr	r1, [r3, #16]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	18ca      	adds	r2, r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ee8:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	3720      	adds	r7, #32
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	80004600 	.word	0x80004600

08002f04 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d112      	bne.n	8002f44 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b40      	cmp	r3, #64	; 0x40
 8002f2e:	d109      	bne.n	8002f44 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b50      	ldr	r3, [pc, #320]	; (800307c <HAL_ETH_IRQHandler+0x178>)
 8002f3c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f8ac 	bl	800309c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d113      	bne.n	8002f7e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d10a      	bne.n	8002f7e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f70:	461a      	mov	r2, r3
 8002f72:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002f76:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f885 	bl	8003088 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f90:	d14c      	bne.n	800302c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa4:	d142      	bne.n	800302c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fac:	f043 0208 	orr.w	r2, r3, #8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc8:	d11a      	bne.n	8003000 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <HAL_ETH_IRQHandler+0x17c>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002ff0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ff4:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	22e0      	movs	r2, #224	; 0xe0
 8002ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002ffe:	e012      	b.n	8003026 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	f248 6380 	movw	r3, #34432	; 0x8680
 800300e:	4013      	ands	r3, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800301e:	461a      	mov	r2, r3
 8003020:	f248 6380 	movw	r3, #34432	; 0x8680
 8003024:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f842 	bl	80030b0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b08      	cmp	r3, #8
 8003038:	d10e      	bne.n	8003058 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f83a 	bl	80030c4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_ETH_IRQHandler+0x180>)
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d006      	beq.n	8003072 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003064:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_ETH_IRQHandler+0x180>)
 8003066:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800306a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f833 	bl	80030d8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	00010040 	.word	0x00010040
 8003080:	007e2000 	.word	0x007e2000
 8003084:	40013c00 	.word	0x40013c00

08003088 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f003 031c 	and.w	r3, r3, #28
 8003108:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	02db      	lsls	r3, r3, #11
 800310e:	b29b      	uxth	r3, r3
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	019b      	lsls	r3, r3, #6
 800311a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f023 0302 	bic.w	r3, r3, #2
 800312a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800313c:	f7ff fa92 	bl	8002664 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003142:	e00d      	b.n	8003160 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003144:	f7ff fa8e 	bl	8002664 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003152:	d301      	bcc.n	8003158 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e010      	b.n	800317a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1ec      	bne.n	8003144 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	b29b      	uxth	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b086      	sub	sp, #24
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f003 031c 	and.w	r3, r3, #28
 800319e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	02db      	lsls	r3, r3, #11
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	019b      	lsls	r3, r3, #6
 80031b0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031dc:	f7ff fa42 	bl	8002664 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80031e2:	e00d      	b.n	8003200 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80031e4:	f7ff fa3e 	bl	8002664 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f2:	d301      	bcc.n	80031f8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e009      	b.n	800320c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1ec      	bne.n	80031e4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0d9      	b.n	80033dc <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b00      	cmp	r3, #0
 8003234:	bf14      	ite	ne
 8003236:	2301      	movne	r3, #1
 8003238:	2300      	moveq	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf0c      	ite	eq
 8003296:	2301      	moveq	r3, #1
 8003298:	2300      	movne	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	bf0c      	ite	eq
 80032e6:	2301      	moveq	r3, #1
 80032e8:	2300      	movne	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bf0c      	ite	eq
 8003300:	2301      	moveq	r3, #1
 8003302:	2300      	movne	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003316:	2b00      	cmp	r3, #0
 8003318:	bf14      	ite	ne
 800331a:	2301      	movne	r3, #1
 800331c:	2300      	moveq	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333e:	2b00      	cmp	r3, #0
 8003340:	bf14      	ite	ne
 8003342:	2301      	movne	r3, #1
 8003344:	2300      	moveq	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	bf14      	ite	ne
 800335c:	2301      	movne	r3, #1
 800335e:	2300      	moveq	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	0c1b      	lsrs	r3, r3, #16
 800339c:	b29a      	uxth	r2, r3
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf14      	ite	ne
 80033b0:	2301      	movne	r3, #1
 80033b2:	2300      	moveq	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf14      	ite	ne
 80033cc:	2301      	movne	r3, #1
 80033ce:	2300      	moveq	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e00b      	b.n	8003414 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003402:	2b10      	cmp	r3, #16
 8003404:	d105      	bne.n	8003412 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003406:	6839      	ldr	r1, [r7, #0]
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f883 	bl	8003514 <ETH_SetMACConfig>

    return HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	e000      	b.n	8003414 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
  }
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 031c 	bic.w	r3, r3, #28
 8003432:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003434:	f001 fb86 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8003438:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4a1d      	ldr	r2, [pc, #116]	; (80034b4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d908      	bls.n	8003454 <HAL_ETH_SetMDIOClockRange+0x38>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4a1c      	ldr	r2, [pc, #112]	; (80034b8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d804      	bhi.n	8003454 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f043 0308 	orr.w	r3, r3, #8
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	e027      	b.n	80034a4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4a18      	ldr	r2, [pc, #96]	; (80034b8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d908      	bls.n	800346e <HAL_ETH_SetMDIOClockRange+0x52>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4a17      	ldr	r2, [pc, #92]	; (80034bc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d204      	bcs.n	800346e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f043 030c 	orr.w	r3, r3, #12
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	e01a      	b.n	80034a4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4a12      	ldr	r2, [pc, #72]	; (80034bc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d303      	bcc.n	800347e <HAL_ETH_SetMDIOClockRange+0x62>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4a11      	ldr	r2, [pc, #68]	; (80034c0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d911      	bls.n	80034a2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4a0f      	ldr	r2, [pc, #60]	; (80034c0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d908      	bls.n	8003498 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4a0e      	ldr	r2, [pc, #56]	; (80034c4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d804      	bhi.n	8003498 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f043 0304 	orr.w	r3, r3, #4
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	e005      	b.n	80034a4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f043 0310 	orr.w	r3, r3, #16
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e000      	b.n	80034a4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80034a2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	611a      	str	r2, [r3, #16]
}
 80034ac:	bf00      	nop
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	01312cff 	.word	0x01312cff
 80034b8:	02160ebf 	.word	0x02160ebf
 80034bc:	03938700 	.word	0x03938700
 80034c0:	05f5e0ff 	.word	0x05f5e0ff
 80034c4:	08f0d17f 	.word	0x08f0d17f

080034c8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034ea:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034f8:	2001      	movs	r0, #1
 80034fa:	f7ff f8bf 	bl	800267c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003508:	6193      	str	r3, [r2, #24]
}
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4b51      	ldr	r3, [pc, #324]	; (8003670 <ETH_SetMACConfig+0x15c>)
 800352a:	4013      	ands	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	7c1b      	ldrb	r3, [r3, #16]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <ETH_SetMACConfig+0x28>
 8003536:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800353a:	e000      	b.n	800353e <ETH_SetMACConfig+0x2a>
 800353c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	7c5b      	ldrb	r3, [r3, #17]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <ETH_SetMACConfig+0x38>
 8003546:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800354a:	e000      	b.n	800354e <ETH_SetMACConfig+0x3a>
 800354c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800354e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003554:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	7fdb      	ldrb	r3, [r3, #31]
 800355a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800355c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003562:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	7f92      	ldrb	r2, [r2, #30]
 8003568:	2a00      	cmp	r2, #0
 800356a:	d102      	bne.n	8003572 <ETH_SetMACConfig+0x5e>
 800356c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003570:	e000      	b.n	8003574 <ETH_SetMACConfig+0x60>
 8003572:	2200      	movs	r2, #0
                        macconf->Speed |
 8003574:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	7f1b      	ldrb	r3, [r3, #28]
 800357a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800357c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003582:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	791b      	ldrb	r3, [r3, #4]
 8003588:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800358a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003592:	2a00      	cmp	r2, #0
 8003594:	d102      	bne.n	800359c <ETH_SetMACConfig+0x88>
 8003596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800359a:	e000      	b.n	800359e <ETH_SetMACConfig+0x8a>
 800359c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800359e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	7bdb      	ldrb	r3, [r3, #15]
 80035a4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80035a6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80035ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035b4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80035b6:	4313      	orrs	r3, r2
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035ce:	2001      	movs	r0, #1
 80035d0:	f7ff f854 	bl	800267c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80035ea:	4013      	ands	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80035fa:	2a00      	cmp	r2, #0
 80035fc:	d101      	bne.n	8003602 <ETH_SetMACConfig+0xee>
 80035fe:	2280      	movs	r2, #128	; 0x80
 8003600:	e000      	b.n	8003604 <ETH_SetMACConfig+0xf0>
 8003602:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003604:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800360a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003612:	2a01      	cmp	r2, #1
 8003614:	d101      	bne.n	800361a <ETH_SetMACConfig+0x106>
 8003616:	2208      	movs	r2, #8
 8003618:	e000      	b.n	800361c <ETH_SetMACConfig+0x108>
 800361a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800361c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003624:	2a01      	cmp	r2, #1
 8003626:	d101      	bne.n	800362c <ETH_SetMACConfig+0x118>
 8003628:	2204      	movs	r2, #4
 800362a:	e000      	b.n	800362e <ETH_SetMACConfig+0x11a>
 800362c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800362e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003636:	2a01      	cmp	r2, #1
 8003638:	d101      	bne.n	800363e <ETH_SetMACConfig+0x12a>
 800363a:	2202      	movs	r2, #2
 800363c:	e000      	b.n	8003640 <ETH_SetMACConfig+0x12c>
 800363e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003640:	4313      	orrs	r3, r2
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003658:	2001      	movs	r0, #1
 800365a:	f7ff f80f 	bl	800267c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	619a      	str	r2, [r3, #24]
}
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	ff20810f 	.word	0xff20810f

08003674 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4b3d      	ldr	r3, [pc, #244]	; (8003784 <ETH_SetDMAConfig+0x110>)
 800368e:	4013      	ands	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	7b1b      	ldrb	r3, [r3, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d102      	bne.n	80036a0 <ETH_SetDMAConfig+0x2c>
 800369a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800369e:	e000      	b.n	80036a2 <ETH_SetDMAConfig+0x2e>
 80036a0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	7b5b      	ldrb	r3, [r3, #13]
 80036a6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036a8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	7f52      	ldrb	r2, [r2, #29]
 80036ae:	2a00      	cmp	r2, #0
 80036b0:	d102      	bne.n	80036b8 <ETH_SetDMAConfig+0x44>
 80036b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036b6:	e000      	b.n	80036ba <ETH_SetDMAConfig+0x46>
 80036b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80036ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	7b9b      	ldrb	r3, [r3, #14]
 80036c0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80036c2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80036c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	7f1b      	ldrb	r3, [r3, #28]
 80036ce:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80036d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	7f9b      	ldrb	r3, [r3, #30]
 80036d6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80036d8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80036de:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036e6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036e8:	4313      	orrs	r3, r2
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f8:	461a      	mov	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800370a:	2001      	movs	r0, #1
 800370c:	f7fe ffb6 	bl	800267c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003718:	461a      	mov	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	791b      	ldrb	r3, [r3, #4]
 8003722:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003728:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800372e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003734:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800373c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800373e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003746:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800374c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003756:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800375a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003768:	2001      	movs	r0, #1
 800376a:	f7fe ff87 	bl	800267c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003776:	461a      	mov	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6013      	str	r3, [r2, #0]
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	f8de3f23 	.word	0xf8de3f23

08003788 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b0a6      	sub	sp, #152	; 0x98
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800379c:	2300      	movs	r3, #0
 800379e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80037a0:	2300      	movs	r3, #0
 80037a2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80037ac:	2300      	movs	r3, #0
 80037ae:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80037be:	2300      	movs	r3, #0
 80037c0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80037c4:	2300      	movs	r3, #0
 80037c6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80037c8:	2300      	movs	r3, #0
 80037ca:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80037d8:	2300      	movs	r3, #0
 80037da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80037de:	2300      	movs	r3, #0
 80037e0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80037ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037ee:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80037f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80037f6:	2300      	movs	r3, #0
 80037f8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80037fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003800:	4619      	mov	r1, r3
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff fe86 	bl	8003514 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003808:	2301      	movs	r3, #1
 800380a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800380c:	2301      	movs	r3, #1
 800380e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003816:	2301      	movs	r3, #1
 8003818:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800381e:	2300      	movs	r3, #0
 8003820:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003824:	2300      	movs	r3, #0
 8003826:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800382a:	2300      	movs	r3, #0
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800382e:	2301      	movs	r3, #1
 8003830:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003834:	2301      	movs	r3, #1
 8003836:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800383c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800383e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003842:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003848:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003850:	2300      	movs	r3, #0
 8003852:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003854:	2300      	movs	r3, #0
 8003856:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003858:	f107 0308 	add.w	r3, r7, #8
 800385c:	4619      	mov	r1, r3
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff ff08 	bl	8003674 <ETH_SetDMAConfig>
}
 8003864:	bf00      	nop
 8003866:	3798      	adds	r7, #152	; 0x98
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3305      	adds	r3, #5
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	021b      	lsls	r3, r3, #8
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	3204      	adds	r2, #4
 8003884:	7812      	ldrb	r2, [r2, #0]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <ETH_MACAddressConfig+0x68>)
 800388e:	4413      	add	r3, r2
 8003890:	461a      	mov	r2, r3
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3303      	adds	r3, #3
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	061a      	lsls	r2, r3, #24
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3302      	adds	r3, #2
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3301      	adds	r3, #1
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	4313      	orrs	r3, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	7812      	ldrb	r2, [r2, #0]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <ETH_MACAddressConfig+0x6c>)
 80038be:	4413      	add	r3, r2
 80038c0:	461a      	mov	r2, r3
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	6013      	str	r3, [r2, #0]
}
 80038c6:	bf00      	nop
 80038c8:	371c      	adds	r7, #28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40028040 	.word	0x40028040
 80038d8:	40028044 	.word	0x40028044

080038dc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	e03e      	b.n	8003968 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68d9      	ldr	r1, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	440b      	add	r3, r1
 80038fa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2200      	movs	r2, #0
 8003906:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2200      	movs	r2, #0
 8003912:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	3206      	adds	r2, #6
 800391c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d80c      	bhi.n	800394c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68d9      	ldr	r1, [r3, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	440b      	add	r3, r1
 8003944:	461a      	mov	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	60da      	str	r2, [r3, #12]
 800394a:	e004      	b.n	8003956 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3301      	adds	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d9bd      	bls.n	80038ea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003980:	611a      	str	r2, [r3, #16]
}
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	e046      	b.n	8003a2a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6919      	ldr	r1, [r3, #16]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	440b      	add	r3, r1
 80039ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2200      	movs	r2, #0
 80039b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2200      	movs	r2, #0
 80039be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2200      	movs	r2, #0
 80039c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2200      	movs	r2, #0
 80039ca:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2200      	movs	r2, #0
 80039d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039d8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80039e0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	3212      	adds	r2, #18
 80039f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d80c      	bhi.n	8003a1a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6919      	ldr	r1, [r3, #16]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	440b      	add	r3, r1
 8003a12:	461a      	mov	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	60da      	str	r2, [r3, #12]
 8003a18:	e004      	b.n	8003a24 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3301      	adds	r3, #1
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d9b5      	bls.n	800399c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a5a:	60da      	str	r2, [r3, #12]
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b08d      	sub	sp, #52	; 0x34
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3318      	adds	r3, #24
 8003a78:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a92:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aaa:	d007      	beq.n	8003abc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003abc:	2302      	movs	r3, #2
 8003abe:	e103      	b.n	8003cc8 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003ad8:	f023 031f 	bic.w	r3, r3, #31
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	6852      	ldr	r2, [r2, #4]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003b46:	f3bf 8f5f 	dmb	sy
}
 8003b4a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003b58:	e084      	b.n	8003c64 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d006      	beq.n	8003b7a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	e005      	b.n	8003b86 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	3301      	adds	r3, #1
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d902      	bls.n	8003b98 <ETH_Prepare_Tx_Descriptors+0x130>
 8003b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b94:	3b04      	subs	r3, #4
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bba:	d007      	beq.n	8003bcc <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d029      	beq.n	8003c20 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bde:	e019      	b.n	8003c14 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8003be0:	f3bf 8f5f 	dmb	sy
}
 8003be4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d902      	bls.n	8003c04 <ETH_Prepare_Tx_Descriptors+0x19c>
 8003bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c00:	3b04      	subs	r3, #4
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c0c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c10:	3301      	adds	r3, #1
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d3e1      	bcc.n	8003be0 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e053      	b.n	8003cc8 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	3301      	adds	r3, #1
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003c3e:	f023 031f 	bic.w	r3, r3, #31
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	6852      	ldr	r2, [r2, #4]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003c52:	f3bf 8f5f 	dmb	sy
}
 8003c56:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f47f af76 	bne.w	8003b5a <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d006      	beq.n	8003c82 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	e005      	b.n	8003c8e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c9e:	6979      	ldr	r1, [r7, #20]
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cae:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb0:	b672      	cpsid	i
}
 8003cb2:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	4413      	add	r3, r2
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003cc2:	b662      	cpsie	i
}
 8003cc4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3734      	adds	r7, #52	; 0x34
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b089      	sub	sp, #36	; 0x24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	e177      	b.n	8003fe0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	f040 8166 	bne.w	8003fda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d005      	beq.n	8003d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d130      	bne.n	8003d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	2203      	movs	r2, #3
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f003 0201 	and.w	r2, r3, #1
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d017      	beq.n	8003dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	2203      	movs	r2, #3
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43db      	mvns	r3, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4013      	ands	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d123      	bne.n	8003e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	08da      	lsrs	r2, r3, #3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3208      	adds	r2, #8
 8003dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	220f      	movs	r2, #15
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	08da      	lsrs	r2, r3, #3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3208      	adds	r2, #8
 8003e12:	69b9      	ldr	r1, [r7, #24]
 8003e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	2203      	movs	r2, #3
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0203 	and.w	r2, r3, #3
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80c0 	beq.w	8003fda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	4b66      	ldr	r3, [pc, #408]	; (8003ff8 <HAL_GPIO_Init+0x324>)
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	4a65      	ldr	r2, [pc, #404]	; (8003ff8 <HAL_GPIO_Init+0x324>)
 8003e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e68:	6453      	str	r3, [r2, #68]	; 0x44
 8003e6a:	4b63      	ldr	r3, [pc, #396]	; (8003ff8 <HAL_GPIO_Init+0x324>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e76:	4a61      	ldr	r2, [pc, #388]	; (8003ffc <HAL_GPIO_Init+0x328>)
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	089b      	lsrs	r3, r3, #2
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	220f      	movs	r2, #15
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4013      	ands	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a58      	ldr	r2, [pc, #352]	; (8004000 <HAL_GPIO_Init+0x32c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d037      	beq.n	8003f12 <HAL_GPIO_Init+0x23e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a57      	ldr	r2, [pc, #348]	; (8004004 <HAL_GPIO_Init+0x330>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d031      	beq.n	8003f0e <HAL_GPIO_Init+0x23a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a56      	ldr	r2, [pc, #344]	; (8004008 <HAL_GPIO_Init+0x334>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d02b      	beq.n	8003f0a <HAL_GPIO_Init+0x236>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a55      	ldr	r2, [pc, #340]	; (800400c <HAL_GPIO_Init+0x338>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d025      	beq.n	8003f06 <HAL_GPIO_Init+0x232>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a54      	ldr	r2, [pc, #336]	; (8004010 <HAL_GPIO_Init+0x33c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01f      	beq.n	8003f02 <HAL_GPIO_Init+0x22e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a53      	ldr	r2, [pc, #332]	; (8004014 <HAL_GPIO_Init+0x340>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d019      	beq.n	8003efe <HAL_GPIO_Init+0x22a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a52      	ldr	r2, [pc, #328]	; (8004018 <HAL_GPIO_Init+0x344>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d013      	beq.n	8003efa <HAL_GPIO_Init+0x226>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a51      	ldr	r2, [pc, #324]	; (800401c <HAL_GPIO_Init+0x348>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00d      	beq.n	8003ef6 <HAL_GPIO_Init+0x222>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a50      	ldr	r2, [pc, #320]	; (8004020 <HAL_GPIO_Init+0x34c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d007      	beq.n	8003ef2 <HAL_GPIO_Init+0x21e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a4f      	ldr	r2, [pc, #316]	; (8004024 <HAL_GPIO_Init+0x350>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d101      	bne.n	8003eee <HAL_GPIO_Init+0x21a>
 8003eea:	2309      	movs	r3, #9
 8003eec:	e012      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003eee:	230a      	movs	r3, #10
 8003ef0:	e010      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003ef2:	2308      	movs	r3, #8
 8003ef4:	e00e      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003ef6:	2307      	movs	r3, #7
 8003ef8:	e00c      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003efa:	2306      	movs	r3, #6
 8003efc:	e00a      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003efe:	2305      	movs	r3, #5
 8003f00:	e008      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003f02:	2304      	movs	r3, #4
 8003f04:	e006      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003f06:	2303      	movs	r3, #3
 8003f08:	e004      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e002      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003f12:	2300      	movs	r3, #0
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	f002 0203 	and.w	r2, r2, #3
 8003f1a:	0092      	lsls	r2, r2, #2
 8003f1c:	4093      	lsls	r3, r2
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f24:	4935      	ldr	r1, [pc, #212]	; (8003ffc <HAL_GPIO_Init+0x328>)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	089b      	lsrs	r3, r3, #2
 8003f2a:	3302      	adds	r3, #2
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f32:	4b3d      	ldr	r3, [pc, #244]	; (8004028 <HAL_GPIO_Init+0x354>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f56:	4a34      	ldr	r2, [pc, #208]	; (8004028 <HAL_GPIO_Init+0x354>)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f5c:	4b32      	ldr	r3, [pc, #200]	; (8004028 <HAL_GPIO_Init+0x354>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f80:	4a29      	ldr	r2, [pc, #164]	; (8004028 <HAL_GPIO_Init+0x354>)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f86:	4b28      	ldr	r3, [pc, #160]	; (8004028 <HAL_GPIO_Init+0x354>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4013      	ands	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003faa:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <HAL_GPIO_Init+0x354>)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <HAL_GPIO_Init+0x354>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fd4:	4a14      	ldr	r2, [pc, #80]	; (8004028 <HAL_GPIO_Init+0x354>)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	61fb      	str	r3, [r7, #28]
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2b0f      	cmp	r3, #15
 8003fe4:	f67f ae84 	bls.w	8003cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	3724      	adds	r7, #36	; 0x24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	40013800 	.word	0x40013800
 8004000:	40020000 	.word	0x40020000
 8004004:	40020400 	.word	0x40020400
 8004008:	40020800 	.word	0x40020800
 800400c:	40020c00 	.word	0x40020c00
 8004010:	40021000 	.word	0x40021000
 8004014:	40021400 	.word	0x40021400
 8004018:	40021800 	.word	0x40021800
 800401c:	40021c00 	.word	0x40021c00
 8004020:	40022000 	.word	0x40022000
 8004024:	40022400 	.word	0x40022400
 8004028:	40013c00 	.word	0x40013c00

0800402c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	807b      	strh	r3, [r7, #2]
 8004038:	4613      	mov	r3, r2
 800403a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800403c:	787b      	ldrb	r3, [r7, #1]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004048:	e003      	b.n	8004052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800404a:	887b      	ldrh	r3, [r7, #2]
 800404c:	041a      	lsls	r2, r3, #16
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	619a      	str	r2, [r3, #24]
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b086      	sub	sp, #24
 8004062:	af02      	add	r7, sp, #8
 8004064:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e101      	b.n	8004274 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fd ff90 	bl	8001fb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2203      	movs	r2, #3
 8004094:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800409e:	d102      	bne.n	80040a6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f001 fa76 	bl	800559c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	7c1a      	ldrb	r2, [r3, #16]
 80040b8:	f88d 2000 	strb.w	r2, [sp]
 80040bc:	3304      	adds	r3, #4
 80040be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040c0:	f001 fa08 	bl	80054d4 <USB_CoreInit>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2202      	movs	r2, #2
 80040ce:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e0ce      	b.n	8004274 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2100      	movs	r1, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f001 fa6e 	bl	80055be <USB_SetCurrentMode>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0bf      	b.n	8004274 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]
 80040f8:	e04a      	b.n	8004190 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040fa:	7bfa      	ldrb	r2, [r7, #15]
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	4613      	mov	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	3315      	adds	r3, #21
 800410a:	2201      	movs	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800410e:	7bfa      	ldrb	r2, [r7, #15]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	3314      	adds	r3, #20
 800411e:	7bfa      	ldrb	r2, [r7, #15]
 8004120:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004122:	7bfa      	ldrb	r2, [r7, #15]
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	b298      	uxth	r0, r3
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	332e      	adds	r3, #46	; 0x2e
 8004136:	4602      	mov	r2, r0
 8004138:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800413a:	7bfa      	ldrb	r2, [r7, #15]
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	3318      	adds	r3, #24
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800414e:	7bfa      	ldrb	r2, [r7, #15]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	331c      	adds	r3, #28
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004162:	7bfa      	ldrb	r2, [r7, #15]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	3320      	adds	r3, #32
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004176:	7bfa      	ldrb	r2, [r7, #15]
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	3324      	adds	r3, #36	; 0x24
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800418a:	7bfb      	ldrb	r3, [r7, #15]
 800418c:	3301      	adds	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	791b      	ldrb	r3, [r3, #4]
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	429a      	cmp	r2, r3
 8004198:	d3af      	bcc.n	80040fa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800419a:	2300      	movs	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
 800419e:	e044      	b.n	800422a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041a0:	7bfa      	ldrb	r2, [r7, #15]
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	4613      	mov	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	f203 2355 	addw	r3, r3, #597	; 0x255
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041b6:	7bfa      	ldrb	r2, [r7, #15]
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80041c8:	7bfa      	ldrb	r2, [r7, #15]
 80041ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041cc:	7bfa      	ldrb	r2, [r7, #15]
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80041de:	2200      	movs	r2, #0
 80041e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041e2:	7bfa      	ldrb	r2, [r7, #15]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041f8:	7bfa      	ldrb	r2, [r7, #15]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800420e:	7bfa      	ldrb	r2, [r7, #15]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	3301      	adds	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	791b      	ldrb	r3, [r3, #4]
 800422e:	7bfa      	ldrb	r2, [r7, #15]
 8004230:	429a      	cmp	r2, r3
 8004232:	d3b5      	bcc.n	80041a0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	7c1a      	ldrb	r2, [r3, #16]
 800423c:	f88d 2000 	strb.w	r2, [sp]
 8004240:	3304      	adds	r3, #4
 8004242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004244:	f001 fa08 	bl	8005658 <USB_DevInit>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2202      	movs	r2, #2
 8004252:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e00c      	b.n	8004274 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f001 fbd0 	bl	8005a12 <USB_DevDisconnect>

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e267      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d075      	beq.n	8004386 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800429a:	4b88      	ldr	r3, [pc, #544]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d00c      	beq.n	80042c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042a6:	4b85      	ldr	r3, [pc, #532]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d112      	bne.n	80042d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b2:	4b82      	ldr	r3, [pc, #520]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042be:	d10b      	bne.n	80042d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c0:	4b7e      	ldr	r3, [pc, #504]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d05b      	beq.n	8004384 <HAL_RCC_OscConfig+0x108>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d157      	bne.n	8004384 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e242      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e0:	d106      	bne.n	80042f0 <HAL_RCC_OscConfig+0x74>
 80042e2:	4b76      	ldr	r3, [pc, #472]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a75      	ldr	r2, [pc, #468]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e01d      	b.n	800432c <HAL_RCC_OscConfig+0xb0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f8:	d10c      	bne.n	8004314 <HAL_RCC_OscConfig+0x98>
 80042fa:	4b70      	ldr	r3, [pc, #448]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a6f      	ldr	r2, [pc, #444]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	4b6d      	ldr	r3, [pc, #436]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a6c      	ldr	r2, [pc, #432]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 800430c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	e00b      	b.n	800432c <HAL_RCC_OscConfig+0xb0>
 8004314:	4b69      	ldr	r3, [pc, #420]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a68      	ldr	r2, [pc, #416]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 800431a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	4b66      	ldr	r3, [pc, #408]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a65      	ldr	r2, [pc, #404]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800432a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d013      	beq.n	800435c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fe f996 	bl	8002664 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800433c:	f7fe f992 	bl	8002664 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	; 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e207      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b5b      	ldr	r3, [pc, #364]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0xc0>
 800435a:	e014      	b.n	8004386 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7fe f982 	bl	8002664 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004364:	f7fe f97e 	bl	8002664 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	; 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e1f3      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004376:	4b51      	ldr	r3, [pc, #324]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0xe8>
 8004382:	e000      	b.n	8004386 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d063      	beq.n	800445a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004392:	4b4a      	ldr	r3, [pc, #296]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800439e:	4b47      	ldr	r3, [pc, #284]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d11c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043aa:	4b44      	ldr	r3, [pc, #272]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d116      	bne.n	80043e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	4b41      	ldr	r3, [pc, #260]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_RCC_OscConfig+0x152>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d001      	beq.n	80043ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e1c7      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ce:	4b3b      	ldr	r3, [pc, #236]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4937      	ldr	r1, [pc, #220]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	e03a      	b.n	800445a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d020      	beq.n	800442e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ec:	4b34      	ldr	r3, [pc, #208]	; (80044c0 <HAL_RCC_OscConfig+0x244>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f2:	f7fe f937 	bl	8002664 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043fa:	f7fe f933 	bl	8002664 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e1a8      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440c:	4b2b      	ldr	r3, [pc, #172]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004418:	4b28      	ldr	r3, [pc, #160]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	4925      	ldr	r1, [pc, #148]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004428:	4313      	orrs	r3, r2
 800442a:	600b      	str	r3, [r1, #0]
 800442c:	e015      	b.n	800445a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800442e:	4b24      	ldr	r3, [pc, #144]	; (80044c0 <HAL_RCC_OscConfig+0x244>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fe f916 	bl	8002664 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800443c:	f7fe f912 	bl	8002664 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e187      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444e:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d036      	beq.n	80044d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d016      	beq.n	800449c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800446e:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <HAL_RCC_OscConfig+0x248>)
 8004470:	2201      	movs	r2, #1
 8004472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004474:	f7fe f8f6 	bl	8002664 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800447c:	f7fe f8f2 	bl	8002664 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e167      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448e:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_RCC_OscConfig+0x240>)
 8004490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0f0      	beq.n	800447c <HAL_RCC_OscConfig+0x200>
 800449a:	e01b      	b.n	80044d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800449c:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <HAL_RCC_OscConfig+0x248>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a2:	f7fe f8df 	bl	8002664 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a8:	e00e      	b.n	80044c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044aa:	f7fe f8db 	bl	8002664 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d907      	bls.n	80044c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e150      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
 80044bc:	40023800 	.word	0x40023800
 80044c0:	42470000 	.word	0x42470000
 80044c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c8:	4b88      	ldr	r3, [pc, #544]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 80044ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1ea      	bne.n	80044aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 8097 	beq.w	8004610 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e6:	4b81      	ldr	r3, [pc, #516]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10f      	bne.n	8004512 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	4b7d      	ldr	r3, [pc, #500]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	4a7c      	ldr	r2, [pc, #496]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 80044fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004500:	6413      	str	r3, [r2, #64]	; 0x40
 8004502:	4b7a      	ldr	r3, [pc, #488]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450a:	60bb      	str	r3, [r7, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450e:	2301      	movs	r3, #1
 8004510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004512:	4b77      	ldr	r3, [pc, #476]	; (80046f0 <HAL_RCC_OscConfig+0x474>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d118      	bne.n	8004550 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800451e:	4b74      	ldr	r3, [pc, #464]	; (80046f0 <HAL_RCC_OscConfig+0x474>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a73      	ldr	r2, [pc, #460]	; (80046f0 <HAL_RCC_OscConfig+0x474>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452a:	f7fe f89b 	bl	8002664 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004532:	f7fe f897 	bl	8002664 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e10c      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004544:	4b6a      	ldr	r3, [pc, #424]	; (80046f0 <HAL_RCC_OscConfig+0x474>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f0      	beq.n	8004532 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d106      	bne.n	8004566 <HAL_RCC_OscConfig+0x2ea>
 8004558:	4b64      	ldr	r3, [pc, #400]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 800455a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455c:	4a63      	ldr	r2, [pc, #396]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	6713      	str	r3, [r2, #112]	; 0x70
 8004564:	e01c      	b.n	80045a0 <HAL_RCC_OscConfig+0x324>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b05      	cmp	r3, #5
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0x30c>
 800456e:	4b5f      	ldr	r3, [pc, #380]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	4a5e      	ldr	r2, [pc, #376]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 8004574:	f043 0304 	orr.w	r3, r3, #4
 8004578:	6713      	str	r3, [r2, #112]	; 0x70
 800457a:	4b5c      	ldr	r3, [pc, #368]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	4a5b      	ldr	r2, [pc, #364]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	6713      	str	r3, [r2, #112]	; 0x70
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0x324>
 8004588:	4b58      	ldr	r3, [pc, #352]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	4a57      	ldr	r2, [pc, #348]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	6713      	str	r3, [r2, #112]	; 0x70
 8004594:	4b55      	ldr	r3, [pc, #340]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004598:	4a54      	ldr	r2, [pc, #336]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 800459a:	f023 0304 	bic.w	r3, r3, #4
 800459e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d015      	beq.n	80045d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fe f85c 	bl	8002664 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b0:	f7fe f858 	bl	8002664 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e0cb      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c6:	4b49      	ldr	r3, [pc, #292]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0ee      	beq.n	80045b0 <HAL_RCC_OscConfig+0x334>
 80045d2:	e014      	b.n	80045fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d4:	f7fe f846 	bl	8002664 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045dc:	f7fe f842 	bl	8002664 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e0b5      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f2:	4b3e      	ldr	r3, [pc, #248]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1ee      	bne.n	80045dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d105      	bne.n	8004610 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004604:	4b39      	ldr	r3, [pc, #228]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	4a38      	ldr	r2, [pc, #224]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 800460a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800460e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80a1 	beq.w	800475c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800461a:	4b34      	ldr	r3, [pc, #208]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
 8004622:	2b08      	cmp	r3, #8
 8004624:	d05c      	beq.n	80046e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d141      	bne.n	80046b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800462e:	4b31      	ldr	r3, [pc, #196]	; (80046f4 <HAL_RCC_OscConfig+0x478>)
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004634:	f7fe f816 	bl	8002664 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800463c:	f7fe f812 	bl	8002664 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e087      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464e:	4b27      	ldr	r3, [pc, #156]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	019b      	lsls	r3, r3, #6
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	3b01      	subs	r3, #1
 8004674:	041b      	lsls	r3, r3, #16
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	061b      	lsls	r3, r3, #24
 800467e:	491b      	ldr	r1, [pc, #108]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 8004680:	4313      	orrs	r3, r2
 8004682:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004684:	4b1b      	ldr	r3, [pc, #108]	; (80046f4 <HAL_RCC_OscConfig+0x478>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468a:	f7fd ffeb 	bl	8002664 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004692:	f7fd ffe7 	bl	8002664 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e05c      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a4:	4b11      	ldr	r3, [pc, #68]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x416>
 80046b0:	e054      	b.n	800475c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <HAL_RCC_OscConfig+0x478>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fd ffd4 	bl	8002664 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fd ffd0 	bl	8002664 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e045      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	4b06      	ldr	r3, [pc, #24]	; (80046ec <HAL_RCC_OscConfig+0x470>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x444>
 80046de:	e03d      	b.n	800475c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e038      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40007000 	.word	0x40007000
 80046f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046f8:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <HAL_RCC_OscConfig+0x4ec>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d028      	beq.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d121      	bne.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d11a      	bne.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004728:	4013      	ands	r3, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800472e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004730:	4293      	cmp	r3, r2
 8004732:	d111      	bne.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	3b01      	subs	r3, #1
 8004742:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d107      	bne.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40023800 	.word	0x40023800

0800476c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0cc      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004780:	4b68      	ldr	r3, [pc, #416]	; (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d90c      	bls.n	80047a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478e:	4b65      	ldr	r3, [pc, #404]	; (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004796:	4b63      	ldr	r3, [pc, #396]	; (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0b8      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d020      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c0:	4b59      	ldr	r3, [pc, #356]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4a58      	ldr	r2, [pc, #352]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047d8:	4b53      	ldr	r3, [pc, #332]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4a52      	ldr	r2, [pc, #328]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e4:	4b50      	ldr	r3, [pc, #320]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	494d      	ldr	r1, [pc, #308]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d044      	beq.n	800488c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d107      	bne.n	800481a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480a:	4b47      	ldr	r3, [pc, #284]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d119      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e07f      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d003      	beq.n	800482a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004826:	2b03      	cmp	r3, #3
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482a:	4b3f      	ldr	r3, [pc, #252]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e06f      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483a:	4b3b      	ldr	r3, [pc, #236]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e067      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800484a:	4b37      	ldr	r3, [pc, #220]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f023 0203 	bic.w	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4934      	ldr	r1, [pc, #208]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	4313      	orrs	r3, r2
 800485a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800485c:	f7fd ff02 	bl	8002664 <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004862:	e00a      	b.n	800487a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004864:	f7fd fefe 	bl	8002664 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e04f      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487a:	4b2b      	ldr	r3, [pc, #172]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 020c 	and.w	r2, r3, #12
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	429a      	cmp	r2, r3
 800488a:	d1eb      	bne.n	8004864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800488c:	4b25      	ldr	r3, [pc, #148]	; (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d20c      	bcs.n	80048b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489a:	4b22      	ldr	r3, [pc, #136]	; (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a2:	4b20      	ldr	r3, [pc, #128]	; (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e032      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c0:	4b19      	ldr	r3, [pc, #100]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4916      	ldr	r1, [pc, #88]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048de:	4b12      	ldr	r3, [pc, #72]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	490e      	ldr	r1, [pc, #56]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048f2:	f000 f821 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 80048f6:	4602      	mov	r2, r0
 80048f8:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	490a      	ldr	r1, [pc, #40]	; (800492c <HAL_RCC_ClockConfig+0x1c0>)
 8004904:	5ccb      	ldrb	r3, [r1, r3]
 8004906:	fa22 f303 	lsr.w	r3, r2, r3
 800490a:	4a09      	ldr	r2, [pc, #36]	; (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800490c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <HAL_RCC_ClockConfig+0x1c8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7fd fe62 	bl	80025dc <HAL_InitTick>

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40023c00 	.word	0x40023c00
 8004928:	40023800 	.word	0x40023800
 800492c:	08015fa4 	.word	0x08015fa4
 8004930:	20000008 	.word	0x20000008
 8004934:	2000000c 	.word	0x2000000c

08004938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800493c:	b094      	sub	sp, #80	; 0x50
 800493e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	647b      	str	r3, [r7, #68]	; 0x44
 8004944:	2300      	movs	r3, #0
 8004946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004948:	2300      	movs	r3, #0
 800494a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004950:	4b79      	ldr	r3, [pc, #484]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 030c 	and.w	r3, r3, #12
 8004958:	2b08      	cmp	r3, #8
 800495a:	d00d      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x40>
 800495c:	2b08      	cmp	r3, #8
 800495e:	f200 80e1 	bhi.w	8004b24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <HAL_RCC_GetSysClockFreq+0x34>
 8004966:	2b04      	cmp	r3, #4
 8004968:	d003      	beq.n	8004972 <HAL_RCC_GetSysClockFreq+0x3a>
 800496a:	e0db      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800496c:	4b73      	ldr	r3, [pc, #460]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x204>)
 800496e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004970:	e0db      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004972:	4b73      	ldr	r3, [pc, #460]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x208>)
 8004974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004976:	e0d8      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004978:	4b6f      	ldr	r3, [pc, #444]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004980:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004982:	4b6d      	ldr	r3, [pc, #436]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d063      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800498e:	4b6a      	ldr	r3, [pc, #424]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	099b      	lsrs	r3, r3, #6
 8004994:	2200      	movs	r2, #0
 8004996:	63bb      	str	r3, [r7, #56]	; 0x38
 8004998:	63fa      	str	r2, [r7, #60]	; 0x3c
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a0:	633b      	str	r3, [r7, #48]	; 0x30
 80049a2:	2300      	movs	r3, #0
 80049a4:	637b      	str	r3, [r7, #52]	; 0x34
 80049a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049aa:	4622      	mov	r2, r4
 80049ac:	462b      	mov	r3, r5
 80049ae:	f04f 0000 	mov.w	r0, #0
 80049b2:	f04f 0100 	mov.w	r1, #0
 80049b6:	0159      	lsls	r1, r3, #5
 80049b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049bc:	0150      	lsls	r0, r2, #5
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4621      	mov	r1, r4
 80049c4:	1a51      	subs	r1, r2, r1
 80049c6:	6139      	str	r1, [r7, #16]
 80049c8:	4629      	mov	r1, r5
 80049ca:	eb63 0301 	sbc.w	r3, r3, r1
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049dc:	4659      	mov	r1, fp
 80049de:	018b      	lsls	r3, r1, #6
 80049e0:	4651      	mov	r1, sl
 80049e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049e6:	4651      	mov	r1, sl
 80049e8:	018a      	lsls	r2, r1, #6
 80049ea:	4651      	mov	r1, sl
 80049ec:	ebb2 0801 	subs.w	r8, r2, r1
 80049f0:	4659      	mov	r1, fp
 80049f2:	eb63 0901 	sbc.w	r9, r3, r1
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a0a:	4690      	mov	r8, r2
 8004a0c:	4699      	mov	r9, r3
 8004a0e:	4623      	mov	r3, r4
 8004a10:	eb18 0303 	adds.w	r3, r8, r3
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	462b      	mov	r3, r5
 8004a18:	eb49 0303 	adc.w	r3, r9, r3
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	024b      	lsls	r3, r1, #9
 8004a2e:	4621      	mov	r1, r4
 8004a30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a34:	4621      	mov	r1, r4
 8004a36:	024a      	lsls	r2, r1, #9
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a3e:	2200      	movs	r2, #0
 8004a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a48:	f7fc f90e 	bl	8000c68 <__aeabi_uldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4613      	mov	r3, r2
 8004a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a54:	e058      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a56:	4b38      	ldr	r3, [pc, #224]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	099b      	lsrs	r3, r3, #6
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	4611      	mov	r1, r2
 8004a62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a66:	623b      	str	r3, [r7, #32]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a70:	4642      	mov	r2, r8
 8004a72:	464b      	mov	r3, r9
 8004a74:	f04f 0000 	mov.w	r0, #0
 8004a78:	f04f 0100 	mov.w	r1, #0
 8004a7c:	0159      	lsls	r1, r3, #5
 8004a7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a82:	0150      	lsls	r0, r2, #5
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4641      	mov	r1, r8
 8004a8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a8e:	4649      	mov	r1, r9
 8004a90:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004aa0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004aa4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004aa8:	ebb2 040a 	subs.w	r4, r2, sl
 8004aac:	eb63 050b 	sbc.w	r5, r3, fp
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	00eb      	lsls	r3, r5, #3
 8004aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004abe:	00e2      	lsls	r2, r4, #3
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	461d      	mov	r5, r3
 8004ac4:	4643      	mov	r3, r8
 8004ac6:	18e3      	adds	r3, r4, r3
 8004ac8:	603b      	str	r3, [r7, #0]
 8004aca:	464b      	mov	r3, r9
 8004acc:	eb45 0303 	adc.w	r3, r5, r3
 8004ad0:	607b      	str	r3, [r7, #4]
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ade:	4629      	mov	r1, r5
 8004ae0:	028b      	lsls	r3, r1, #10
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ae8:	4621      	mov	r1, r4
 8004aea:	028a      	lsls	r2, r1, #10
 8004aec:	4610      	mov	r0, r2
 8004aee:	4619      	mov	r1, r3
 8004af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004af2:	2200      	movs	r2, #0
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	61fa      	str	r2, [r7, #28]
 8004af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004afc:	f7fc f8b4 	bl	8000c68 <__aeabi_uldivmod>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4613      	mov	r3, r2
 8004b06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b08:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	3301      	adds	r3, #1
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b22:	e002      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3750      	adds	r7, #80	; 0x50
 8004b30:	46bd      	mov	sp, r7
 8004b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	00f42400 	.word	0x00f42400
 8004b40:	007a1200 	.word	0x007a1200

08004b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b48:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20000008 	.word	0x20000008

08004b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b60:	f7ff fff0 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0a9b      	lsrs	r3, r3, #10
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4903      	ldr	r1, [pc, #12]	; (8004b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	08015fb4 	.word	0x08015fb4

08004b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b88:	f7ff ffdc 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	0b5b      	lsrs	r3, r3, #13
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	4903      	ldr	r1, [pc, #12]	; (8004ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	08015fb4 	.word	0x08015fb4

08004bac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e07b      	b.n	8004cb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d108      	bne.n	8004bd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bce:	d009      	beq.n	8004be4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	61da      	str	r2, [r3, #28]
 8004bd6:	e005      	b.n	8004be4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fd f8d2 	bl	8001da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c68:	ea42 0103 	orr.w	r1, r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	0c1b      	lsrs	r3, r3, #16
 8004c82:	f003 0104 	and.w	r1, r3, #4
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	f003 0210 	and.w	r2, r3, #16
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e042      	b.n	8004d56 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d106      	bne.n	8004cea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7fd f91b 	bl	8001f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2224      	movs	r2, #36	; 0x24
 8004cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f972 	bl	8004fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695a      	ldr	r2, [r3, #20]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b08a      	sub	sp, #40	; 0x28
 8004d62:	af02      	add	r7, sp, #8
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	603b      	str	r3, [r7, #0]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d175      	bne.n	8004e6a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_UART_Transmit+0x2c>
 8004d84:	88fb      	ldrh	r3, [r7, #6]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e06e      	b.n	8004e6c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2221      	movs	r2, #33	; 0x21
 8004d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d9c:	f7fd fc62 	bl	8002664 <HAL_GetTick>
 8004da0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	88fa      	ldrh	r2, [r7, #6]
 8004da6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	88fa      	ldrh	r2, [r7, #6]
 8004dac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db6:	d108      	bne.n	8004dca <HAL_UART_Transmit+0x6c>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d104      	bne.n	8004dca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	61bb      	str	r3, [r7, #24]
 8004dc8:	e003      	b.n	8004dd2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dd2:	e02e      	b.n	8004e32 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2180      	movs	r1, #128	; 0x80
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f848 	bl	8004e74 <UART_WaitOnFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e03a      	b.n	8004e6c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10b      	bne.n	8004e14 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e0a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	3302      	adds	r3, #2
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	e007      	b.n	8004e24 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	781a      	ldrb	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	3301      	adds	r3, #1
 8004e22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1cb      	bne.n	8004dd4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2200      	movs	r2, #0
 8004e44:	2140      	movs	r1, #64	; 0x40
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f814 	bl	8004e74 <UART_WaitOnFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e006      	b.n	8004e6c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e000      	b.n	8004e6c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e6a:	2302      	movs	r3, #2
  }
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3720      	adds	r7, #32
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	4613      	mov	r3, r2
 8004e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e84:	e03b      	b.n	8004efe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8c:	d037      	beq.n	8004efe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e8e:	f7fd fbe9 	bl	8002664 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	6a3a      	ldr	r2, [r7, #32]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d302      	bcc.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e03a      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d023      	beq.n	8004efe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b80      	cmp	r3, #128	; 0x80
 8004eba:	d020      	beq.n	8004efe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b40      	cmp	r3, #64	; 0x40
 8004ec0:	d01d      	beq.n	8004efe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d116      	bne.n	8004efe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f81d 	bl	8004f26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2208      	movs	r2, #8
 8004ef0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e00f      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4013      	ands	r3, r2
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	bf0c      	ite	eq
 8004f0e:	2301      	moveq	r3, #1
 8004f10:	2300      	movne	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	79fb      	ldrb	r3, [r7, #7]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d0b4      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b095      	sub	sp, #84	; 0x54
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	330c      	adds	r3, #12
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	330c      	adds	r3, #12
 8004f4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f4e:	643a      	str	r2, [r7, #64]	; 0x40
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e5      	bne.n	8004f2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3314      	adds	r3, #20
 8004f68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	f023 0301 	bic.w	r3, r3, #1
 8004f78:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3314      	adds	r3, #20
 8004f80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e5      	bne.n	8004f62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d119      	bne.n	8004fd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	330c      	adds	r3, #12
 8004fa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	e853 3f00 	ldrex	r3, [r3]
 8004fac:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f023 0310 	bic.w	r3, r3, #16
 8004fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	330c      	adds	r3, #12
 8004fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fbe:	61ba      	str	r2, [r7, #24]
 8004fc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	6979      	ldr	r1, [r7, #20]
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	613b      	str	r3, [r7, #16]
   return(result);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e5      	bne.n	8004f9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fe0:	bf00      	nop
 8004fe2:	3754      	adds	r7, #84	; 0x54
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff0:	b0c0      	sub	sp, #256	; 0x100
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005008:	68d9      	ldr	r1, [r3, #12]
 800500a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	ea40 0301 	orr.w	r3, r0, r1
 8005014:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	431a      	orrs	r2, r3
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	431a      	orrs	r2, r3
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005044:	f021 010c 	bic.w	r1, r1, #12
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005052:	430b      	orrs	r3, r1
 8005054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005066:	6999      	ldr	r1, [r3, #24]
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	ea40 0301 	orr.w	r3, r0, r1
 8005072:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b8f      	ldr	r3, [pc, #572]	; (80052b8 <UART_SetConfig+0x2cc>)
 800507c:	429a      	cmp	r2, r3
 800507e:	d005      	beq.n	800508c <UART_SetConfig+0xa0>
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	4b8d      	ldr	r3, [pc, #564]	; (80052bc <UART_SetConfig+0x2d0>)
 8005088:	429a      	cmp	r2, r3
 800508a:	d104      	bne.n	8005096 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800508c:	f7ff fd7a 	bl	8004b84 <HAL_RCC_GetPCLK2Freq>
 8005090:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005094:	e003      	b.n	800509e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005096:	f7ff fd61 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 800509a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800509e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a8:	f040 810c 	bne.w	80052c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050be:	4622      	mov	r2, r4
 80050c0:	462b      	mov	r3, r5
 80050c2:	1891      	adds	r1, r2, r2
 80050c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80050c6:	415b      	adcs	r3, r3
 80050c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050ce:	4621      	mov	r1, r4
 80050d0:	eb12 0801 	adds.w	r8, r2, r1
 80050d4:	4629      	mov	r1, r5
 80050d6:	eb43 0901 	adc.w	r9, r3, r1
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ee:	4690      	mov	r8, r2
 80050f0:	4699      	mov	r9, r3
 80050f2:	4623      	mov	r3, r4
 80050f4:	eb18 0303 	adds.w	r3, r8, r3
 80050f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050fc:	462b      	mov	r3, r5
 80050fe:	eb49 0303 	adc.w	r3, r9, r3
 8005102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005112:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005116:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800511a:	460b      	mov	r3, r1
 800511c:	18db      	adds	r3, r3, r3
 800511e:	653b      	str	r3, [r7, #80]	; 0x50
 8005120:	4613      	mov	r3, r2
 8005122:	eb42 0303 	adc.w	r3, r2, r3
 8005126:	657b      	str	r3, [r7, #84]	; 0x54
 8005128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800512c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005130:	f7fb fd9a 	bl	8000c68 <__aeabi_uldivmod>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4b61      	ldr	r3, [pc, #388]	; (80052c0 <UART_SetConfig+0x2d4>)
 800513a:	fba3 2302 	umull	r2, r3, r3, r2
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	011c      	lsls	r4, r3, #4
 8005142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005146:	2200      	movs	r2, #0
 8005148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800514c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005150:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005154:	4642      	mov	r2, r8
 8005156:	464b      	mov	r3, r9
 8005158:	1891      	adds	r1, r2, r2
 800515a:	64b9      	str	r1, [r7, #72]	; 0x48
 800515c:	415b      	adcs	r3, r3
 800515e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005160:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005164:	4641      	mov	r1, r8
 8005166:	eb12 0a01 	adds.w	sl, r2, r1
 800516a:	4649      	mov	r1, r9
 800516c:	eb43 0b01 	adc.w	fp, r3, r1
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800517c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005184:	4692      	mov	sl, r2
 8005186:	469b      	mov	fp, r3
 8005188:	4643      	mov	r3, r8
 800518a:	eb1a 0303 	adds.w	r3, sl, r3
 800518e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005192:	464b      	mov	r3, r9
 8005194:	eb4b 0303 	adc.w	r3, fp, r3
 8005198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051b0:	460b      	mov	r3, r1
 80051b2:	18db      	adds	r3, r3, r3
 80051b4:	643b      	str	r3, [r7, #64]	; 0x40
 80051b6:	4613      	mov	r3, r2
 80051b8:	eb42 0303 	adc.w	r3, r2, r3
 80051bc:	647b      	str	r3, [r7, #68]	; 0x44
 80051be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051c6:	f7fb fd4f 	bl	8000c68 <__aeabi_uldivmod>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4611      	mov	r1, r2
 80051d0:	4b3b      	ldr	r3, [pc, #236]	; (80052c0 <UART_SetConfig+0x2d4>)
 80051d2:	fba3 2301 	umull	r2, r3, r3, r1
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	2264      	movs	r2, #100	; 0x64
 80051da:	fb02 f303 	mul.w	r3, r2, r3
 80051de:	1acb      	subs	r3, r1, r3
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051e6:	4b36      	ldr	r3, [pc, #216]	; (80052c0 <UART_SetConfig+0x2d4>)
 80051e8:	fba3 2302 	umull	r2, r3, r3, r2
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051f4:	441c      	add	r4, r3
 80051f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005200:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005204:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005208:	4642      	mov	r2, r8
 800520a:	464b      	mov	r3, r9
 800520c:	1891      	adds	r1, r2, r2
 800520e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005210:	415b      	adcs	r3, r3
 8005212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005218:	4641      	mov	r1, r8
 800521a:	1851      	adds	r1, r2, r1
 800521c:	6339      	str	r1, [r7, #48]	; 0x30
 800521e:	4649      	mov	r1, r9
 8005220:	414b      	adcs	r3, r1
 8005222:	637b      	str	r3, [r7, #52]	; 0x34
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005230:	4659      	mov	r1, fp
 8005232:	00cb      	lsls	r3, r1, #3
 8005234:	4651      	mov	r1, sl
 8005236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800523a:	4651      	mov	r1, sl
 800523c:	00ca      	lsls	r2, r1, #3
 800523e:	4610      	mov	r0, r2
 8005240:	4619      	mov	r1, r3
 8005242:	4603      	mov	r3, r0
 8005244:	4642      	mov	r2, r8
 8005246:	189b      	adds	r3, r3, r2
 8005248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800524c:	464b      	mov	r3, r9
 800524e:	460a      	mov	r2, r1
 8005250:	eb42 0303 	adc.w	r3, r2, r3
 8005254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005264:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800526c:	460b      	mov	r3, r1
 800526e:	18db      	adds	r3, r3, r3
 8005270:	62bb      	str	r3, [r7, #40]	; 0x28
 8005272:	4613      	mov	r3, r2
 8005274:	eb42 0303 	adc.w	r3, r2, r3
 8005278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800527a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800527e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005282:	f7fb fcf1 	bl	8000c68 <__aeabi_uldivmod>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4b0d      	ldr	r3, [pc, #52]	; (80052c0 <UART_SetConfig+0x2d4>)
 800528c:	fba3 1302 	umull	r1, r3, r3, r2
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	2164      	movs	r1, #100	; 0x64
 8005294:	fb01 f303 	mul.w	r3, r1, r3
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	3332      	adds	r3, #50	; 0x32
 800529e:	4a08      	ldr	r2, [pc, #32]	; (80052c0 <UART_SetConfig+0x2d4>)
 80052a0:	fba2 2303 	umull	r2, r3, r2, r3
 80052a4:	095b      	lsrs	r3, r3, #5
 80052a6:	f003 0207 	and.w	r2, r3, #7
 80052aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4422      	add	r2, r4
 80052b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052b4:	e106      	b.n	80054c4 <UART_SetConfig+0x4d8>
 80052b6:	bf00      	nop
 80052b8:	40011000 	.word	0x40011000
 80052bc:	40011400 	.word	0x40011400
 80052c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c8:	2200      	movs	r2, #0
 80052ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052d6:	4642      	mov	r2, r8
 80052d8:	464b      	mov	r3, r9
 80052da:	1891      	adds	r1, r2, r2
 80052dc:	6239      	str	r1, [r7, #32]
 80052de:	415b      	adcs	r3, r3
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
 80052e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052e6:	4641      	mov	r1, r8
 80052e8:	1854      	adds	r4, r2, r1
 80052ea:	4649      	mov	r1, r9
 80052ec:	eb43 0501 	adc.w	r5, r3, r1
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	00eb      	lsls	r3, r5, #3
 80052fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052fe:	00e2      	lsls	r2, r4, #3
 8005300:	4614      	mov	r4, r2
 8005302:	461d      	mov	r5, r3
 8005304:	4643      	mov	r3, r8
 8005306:	18e3      	adds	r3, r4, r3
 8005308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800530c:	464b      	mov	r3, r9
 800530e:	eb45 0303 	adc.w	r3, r5, r3
 8005312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005332:	4629      	mov	r1, r5
 8005334:	008b      	lsls	r3, r1, #2
 8005336:	4621      	mov	r1, r4
 8005338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800533c:	4621      	mov	r1, r4
 800533e:	008a      	lsls	r2, r1, #2
 8005340:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005344:	f7fb fc90 	bl	8000c68 <__aeabi_uldivmod>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4b60      	ldr	r3, [pc, #384]	; (80054d0 <UART_SetConfig+0x4e4>)
 800534e:	fba3 2302 	umull	r2, r3, r3, r2
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	011c      	lsls	r4, r3, #4
 8005356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535a:	2200      	movs	r2, #0
 800535c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005360:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005364:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005368:	4642      	mov	r2, r8
 800536a:	464b      	mov	r3, r9
 800536c:	1891      	adds	r1, r2, r2
 800536e:	61b9      	str	r1, [r7, #24]
 8005370:	415b      	adcs	r3, r3
 8005372:	61fb      	str	r3, [r7, #28]
 8005374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005378:	4641      	mov	r1, r8
 800537a:	1851      	adds	r1, r2, r1
 800537c:	6139      	str	r1, [r7, #16]
 800537e:	4649      	mov	r1, r9
 8005380:	414b      	adcs	r3, r1
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005390:	4659      	mov	r1, fp
 8005392:	00cb      	lsls	r3, r1, #3
 8005394:	4651      	mov	r1, sl
 8005396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800539a:	4651      	mov	r1, sl
 800539c:	00ca      	lsls	r2, r1, #3
 800539e:	4610      	mov	r0, r2
 80053a0:	4619      	mov	r1, r3
 80053a2:	4603      	mov	r3, r0
 80053a4:	4642      	mov	r2, r8
 80053a6:	189b      	adds	r3, r3, r2
 80053a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053ac:	464b      	mov	r3, r9
 80053ae:	460a      	mov	r2, r1
 80053b0:	eb42 0303 	adc.w	r3, r2, r3
 80053b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80053c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053d0:	4649      	mov	r1, r9
 80053d2:	008b      	lsls	r3, r1, #2
 80053d4:	4641      	mov	r1, r8
 80053d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053da:	4641      	mov	r1, r8
 80053dc:	008a      	lsls	r2, r1, #2
 80053de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053e2:	f7fb fc41 	bl	8000c68 <__aeabi_uldivmod>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4611      	mov	r1, r2
 80053ec:	4b38      	ldr	r3, [pc, #224]	; (80054d0 <UART_SetConfig+0x4e4>)
 80053ee:	fba3 2301 	umull	r2, r3, r3, r1
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	2264      	movs	r2, #100	; 0x64
 80053f6:	fb02 f303 	mul.w	r3, r2, r3
 80053fa:	1acb      	subs	r3, r1, r3
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	3332      	adds	r3, #50	; 0x32
 8005400:	4a33      	ldr	r2, [pc, #204]	; (80054d0 <UART_SetConfig+0x4e4>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800540c:	441c      	add	r4, r3
 800540e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005412:	2200      	movs	r2, #0
 8005414:	673b      	str	r3, [r7, #112]	; 0x70
 8005416:	677a      	str	r2, [r7, #116]	; 0x74
 8005418:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800541c:	4642      	mov	r2, r8
 800541e:	464b      	mov	r3, r9
 8005420:	1891      	adds	r1, r2, r2
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	415b      	adcs	r3, r3
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800542c:	4641      	mov	r1, r8
 800542e:	1851      	adds	r1, r2, r1
 8005430:	6039      	str	r1, [r7, #0]
 8005432:	4649      	mov	r1, r9
 8005434:	414b      	adcs	r3, r1
 8005436:	607b      	str	r3, [r7, #4]
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005444:	4659      	mov	r1, fp
 8005446:	00cb      	lsls	r3, r1, #3
 8005448:	4651      	mov	r1, sl
 800544a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800544e:	4651      	mov	r1, sl
 8005450:	00ca      	lsls	r2, r1, #3
 8005452:	4610      	mov	r0, r2
 8005454:	4619      	mov	r1, r3
 8005456:	4603      	mov	r3, r0
 8005458:	4642      	mov	r2, r8
 800545a:	189b      	adds	r3, r3, r2
 800545c:	66bb      	str	r3, [r7, #104]	; 0x68
 800545e:	464b      	mov	r3, r9
 8005460:	460a      	mov	r2, r1
 8005462:	eb42 0303 	adc.w	r3, r2, r3
 8005466:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	663b      	str	r3, [r7, #96]	; 0x60
 8005472:	667a      	str	r2, [r7, #100]	; 0x64
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	f04f 0300 	mov.w	r3, #0
 800547c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005480:	4649      	mov	r1, r9
 8005482:	008b      	lsls	r3, r1, #2
 8005484:	4641      	mov	r1, r8
 8005486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800548a:	4641      	mov	r1, r8
 800548c:	008a      	lsls	r2, r1, #2
 800548e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005492:	f7fb fbe9 	bl	8000c68 <__aeabi_uldivmod>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <UART_SetConfig+0x4e4>)
 800549c:	fba3 1302 	umull	r1, r3, r3, r2
 80054a0:	095b      	lsrs	r3, r3, #5
 80054a2:	2164      	movs	r1, #100	; 0x64
 80054a4:	fb01 f303 	mul.w	r3, r1, r3
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	3332      	adds	r3, #50	; 0x32
 80054ae:	4a08      	ldr	r2, [pc, #32]	; (80054d0 <UART_SetConfig+0x4e4>)
 80054b0:	fba2 2303 	umull	r2, r3, r2, r3
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	f003 020f 	and.w	r2, r3, #15
 80054ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4422      	add	r2, r4
 80054c2:	609a      	str	r2, [r3, #8]
}
 80054c4:	bf00      	nop
 80054c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054ca:	46bd      	mov	sp, r7
 80054cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d0:	51eb851f 	.word	0x51eb851f

080054d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054d4:	b084      	sub	sp, #16
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b084      	sub	sp, #16
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	f107 001c 	add.w	r0, r7, #28
 80054e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054e6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d123      	bne.n	8005536 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005516:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800551a:	2b01      	cmp	r3, #1
 800551c:	d105      	bne.n	800552a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 faa0 	bl	8005a70 <USB_CoreReset>
 8005530:	4603      	mov	r3, r0
 8005532:	73fb      	strb	r3, [r7, #15]
 8005534:	e01b      	b.n	800556e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fa94 	bl	8005a70 <USB_CoreReset>
 8005548:	4603      	mov	r3, r0
 800554a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800554c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005550:	2b00      	cmp	r3, #0
 8005552:	d106      	bne.n	8005562 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	639a      	str	r2, [r3, #56]	; 0x38
 8005560:	e005      	b.n	800556e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800556e:	7fbb      	ldrb	r3, [r7, #30]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d10b      	bne.n	800558c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f043 0206 	orr.w	r2, r3, #6
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800558c:	7bfb      	ldrb	r3, [r7, #15]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005598:	b004      	add	sp, #16
 800559a:	4770      	bx	lr

0800559c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f023 0201 	bic.w	r2, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	460b      	mov	r3, r1
 80055c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d115      	bne.n	800560c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80055ec:	200a      	movs	r0, #10
 80055ee:	f7fd f845 	bl	800267c <HAL_Delay>
      ms += 10U;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	330a      	adds	r3, #10
 80055f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fa2b 	bl	8005a54 <USB_GetMode>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b01      	cmp	r3, #1
 8005602:	d01e      	beq.n	8005642 <USB_SetCurrentMode+0x84>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2bc7      	cmp	r3, #199	; 0xc7
 8005608:	d9f0      	bls.n	80055ec <USB_SetCurrentMode+0x2e>
 800560a:	e01a      	b.n	8005642 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d115      	bne.n	800563e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800561e:	200a      	movs	r0, #10
 8005620:	f7fd f82c 	bl	800267c <HAL_Delay>
      ms += 10U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	330a      	adds	r3, #10
 8005628:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fa12 	bl	8005a54 <USB_GetMode>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d005      	beq.n	8005642 <USB_SetCurrentMode+0x84>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2bc7      	cmp	r3, #199	; 0xc7
 800563a:	d9f0      	bls.n	800561e <USB_SetCurrentMode+0x60>
 800563c:	e001      	b.n	8005642 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e005      	b.n	800564e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2bc8      	cmp	r3, #200	; 0xc8
 8005646:	d101      	bne.n	800564c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e000      	b.n	800564e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005658:	b084      	sub	sp, #16
 800565a:	b580      	push	{r7, lr}
 800565c:	b086      	sub	sp, #24
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005672:	2300      	movs	r3, #0
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	e009      	b.n	800568c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	3340      	adds	r3, #64	; 0x40
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	2200      	movs	r2, #0
 8005684:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	3301      	adds	r3, #1
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	2b0e      	cmp	r3, #14
 8005690:	d9f2      	bls.n	8005678 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005692:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005696:	2b00      	cmp	r3, #0
 8005698:	d11c      	bne.n	80056d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056a8:	f043 0302 	orr.w	r3, r3, #2
 80056ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38
 80056d2:	e00b      	b.n	80056ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056f2:	461a      	mov	r2, r3
 80056f4:	2300      	movs	r3, #0
 80056f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056f8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d10d      	bne.n	800571c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005704:	2b00      	cmp	r3, #0
 8005706:	d104      	bne.n	8005712 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005708:	2100      	movs	r1, #0
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f968 	bl	80059e0 <USB_SetDevSpeed>
 8005710:	e008      	b.n	8005724 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005712:	2101      	movs	r1, #1
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f963 	bl	80059e0 <USB_SetDevSpeed>
 800571a:	e003      	b.n	8005724 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800571c:	2103      	movs	r1, #3
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f95e 	bl	80059e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005724:	2110      	movs	r1, #16
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f8fa 	bl	8005920 <USB_FlushTxFifo>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f924 	bl	8005984 <USB_FlushRxFifo>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574c:	461a      	mov	r2, r3
 800574e:	2300      	movs	r3, #0
 8005750:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005758:	461a      	mov	r2, r3
 800575a:	2300      	movs	r3, #0
 800575c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005764:	461a      	mov	r2, r3
 8005766:	2300      	movs	r3, #0
 8005768:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800576a:	2300      	movs	r3, #0
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	e043      	b.n	80057f8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005786:	d118      	bne.n	80057ba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579a:	461a      	mov	r2, r3
 800579c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	e013      	b.n	80057cc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	461a      	mov	r2, r3
 80057b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	e008      	b.n	80057cc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c6:	461a      	mov	r2, r3
 80057c8:	2300      	movs	r3, #0
 80057ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	461a      	mov	r2, r3
 80057da:	2300      	movs	r3, #0
 80057dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ea:	461a      	mov	r2, r3
 80057ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	3301      	adds	r3, #1
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057fc:	461a      	mov	r2, r3
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4293      	cmp	r3, r2
 8005802:	d3b5      	bcc.n	8005770 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005804:	2300      	movs	r3, #0
 8005806:	613b      	str	r3, [r7, #16]
 8005808:	e043      	b.n	8005892 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800581c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005820:	d118      	bne.n	8005854 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	461a      	mov	r2, r3
 8005836:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	e013      	b.n	8005866 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584a:	461a      	mov	r2, r3
 800584c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	e008      	b.n	8005866 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005860:	461a      	mov	r2, r3
 8005862:	2300      	movs	r3, #0
 8005864:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005872:	461a      	mov	r2, r3
 8005874:	2300      	movs	r3, #0
 8005876:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005884:	461a      	mov	r2, r3
 8005886:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800588a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	3301      	adds	r3, #1
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005896:	461a      	mov	r2, r3
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	4293      	cmp	r3, r2
 800589c:	d3b5      	bcc.n	800580a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80058be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d105      	bne.n	80058d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	f043 0210 	orr.w	r2, r3, #16
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699a      	ldr	r2, [r3, #24]
 80058d8:	4b10      	ldr	r3, [pc, #64]	; (800591c <USB_DevInit+0x2c4>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058e0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	f043 0208 	orr.w	r2, r3, #8
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d107      	bne.n	800590c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005904:	f043 0304 	orr.w	r3, r3, #4
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800590c:	7dfb      	ldrb	r3, [r7, #23]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005918:	b004      	add	sp, #16
 800591a:	4770      	bx	lr
 800591c:	803c3800 	.word	0x803c3800

08005920 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3301      	adds	r3, #1
 8005932:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800593a:	d901      	bls.n	8005940 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e01b      	b.n	8005978 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	daf2      	bge.n	800592e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	019b      	lsls	r3, r3, #6
 8005950:	f043 0220 	orr.w	r2, r3, #32
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3301      	adds	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005964:	d901      	bls.n	800596a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e006      	b.n	8005978 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b20      	cmp	r3, #32
 8005974:	d0f0      	beq.n	8005958 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800599c:	d901      	bls.n	80059a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e018      	b.n	80059d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	daf2      	bge.n	8005990 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2210      	movs	r2, #16
 80059b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3301      	adds	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80059c0:	d901      	bls.n	80059c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e006      	b.n	80059d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b10      	cmp	r3, #16
 80059d0:	d0f0      	beq.n	80059b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a00:	4313      	orrs	r3, r2
 8005a02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a2c:	f023 0303 	bic.w	r3, r3, #3
 8005a30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a40:	f043 0302 	orr.w	r3, r3, #2
 8005a44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	f003 0301 	and.w	r3, r3, #1
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005a88:	d901      	bls.n	8005a8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e01b      	b.n	8005ac6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	daf2      	bge.n	8005a7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f043 0201 	orr.w	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005ab2:	d901      	bls.n	8005ab8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e006      	b.n	8005ac6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d0f0      	beq.n	8005aa6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005ada:	4b87      	ldr	r3, [pc, #540]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005adc:	22c0      	movs	r2, #192	; 0xc0
 8005ade:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005ae0:	4b85      	ldr	r3, [pc, #532]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005ae2:	22a8      	movs	r2, #168	; 0xa8
 8005ae4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8005ae6:	4b84      	ldr	r3, [pc, #528]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005ae8:	2201      	movs	r2, #1
 8005aea:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8005aec:	4b82      	ldr	r3, [pc, #520]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005aee:	2264      	movs	r2, #100	; 0x64
 8005af0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005af2:	4b82      	ldr	r3, [pc, #520]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005af4:	22ff      	movs	r2, #255	; 0xff
 8005af6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005af8:	4b80      	ldr	r3, [pc, #512]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005afa:	22ff      	movs	r2, #255	; 0xff
 8005afc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005afe:	4b7f      	ldr	r3, [pc, #508]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005b00:	22ff      	movs	r2, #255	; 0xff
 8005b02:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005b04:	4b7d      	ldr	r3, [pc, #500]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005b0a:	4b7d      	ldr	r3, [pc, #500]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005b0c:	22c0      	movs	r2, #192	; 0xc0
 8005b0e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005b10:	4b7b      	ldr	r3, [pc, #492]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005b12:	22a8      	movs	r2, #168	; 0xa8
 8005b14:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8005b16:	4b7a      	ldr	r3, [pc, #488]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005b18:	2201      	movs	r2, #1
 8005b1a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005b1c:	4b78      	ldr	r3, [pc, #480]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005b22:	f000 fd19 	bl	8006558 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005b26:	4b74      	ldr	r3, [pc, #464]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	061a      	lsls	r2, r3, #24
 8005b2c:	4b72      	ldr	r3, [pc, #456]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	041b      	lsls	r3, r3, #16
 8005b32:	431a      	orrs	r2, r3
 8005b34:	4b70      	ldr	r3, [pc, #448]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005b36:	789b      	ldrb	r3, [r3, #2]
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	4a6e      	ldr	r2, [pc, #440]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005b3e:	78d2      	ldrb	r2, [r2, #3]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	061a      	lsls	r2, r3, #24
 8005b44:	4b6c      	ldr	r3, [pc, #432]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	0619      	lsls	r1, r3, #24
 8005b4a:	4b6b      	ldr	r3, [pc, #428]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	041b      	lsls	r3, r3, #16
 8005b50:	4319      	orrs	r1, r3
 8005b52:	4b69      	ldr	r3, [pc, #420]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005b54:	789b      	ldrb	r3, [r3, #2]
 8005b56:	021b      	lsls	r3, r3, #8
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	4967      	ldr	r1, [pc, #412]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005b5c:	78c9      	ldrb	r1, [r1, #3]
 8005b5e:	430b      	orrs	r3, r1
 8005b60:	021b      	lsls	r3, r3, #8
 8005b62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b66:	431a      	orrs	r2, r3
 8005b68:	4b63      	ldr	r3, [pc, #396]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	0619      	lsls	r1, r3, #24
 8005b6e:	4b62      	ldr	r3, [pc, #392]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	041b      	lsls	r3, r3, #16
 8005b74:	4319      	orrs	r1, r3
 8005b76:	4b60      	ldr	r3, [pc, #384]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005b78:	789b      	ldrb	r3, [r3, #2]
 8005b7a:	021b      	lsls	r3, r3, #8
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	495e      	ldr	r1, [pc, #376]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005b80:	78c9      	ldrb	r1, [r1, #3]
 8005b82:	430b      	orrs	r3, r1
 8005b84:	0a1b      	lsrs	r3, r3, #8
 8005b86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	4b5a      	ldr	r3, [pc, #360]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	0619      	lsls	r1, r3, #24
 8005b92:	4b59      	ldr	r3, [pc, #356]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005b94:	785b      	ldrb	r3, [r3, #1]
 8005b96:	041b      	lsls	r3, r3, #16
 8005b98:	4319      	orrs	r1, r3
 8005b9a:	4b57      	ldr	r3, [pc, #348]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005b9c:	789b      	ldrb	r3, [r3, #2]
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	430b      	orrs	r3, r1
 8005ba2:	4955      	ldr	r1, [pc, #340]	; (8005cf8 <MX_LWIP_Init+0x224>)
 8005ba4:	78c9      	ldrb	r1, [r1, #3]
 8005ba6:	430b      	orrs	r3, r1
 8005ba8:	0e1b      	lsrs	r3, r3, #24
 8005baa:	4313      	orrs	r3, r2
 8005bac:	4a55      	ldr	r2, [pc, #340]	; (8005d04 <MX_LWIP_Init+0x230>)
 8005bae:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005bb0:	4b52      	ldr	r3, [pc, #328]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	061a      	lsls	r2, r3, #24
 8005bb6:	4b51      	ldr	r3, [pc, #324]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005bb8:	785b      	ldrb	r3, [r3, #1]
 8005bba:	041b      	lsls	r3, r3, #16
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	4b4f      	ldr	r3, [pc, #316]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005bc0:	789b      	ldrb	r3, [r3, #2]
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	4a4d      	ldr	r2, [pc, #308]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005bc8:	78d2      	ldrb	r2, [r2, #3]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	061a      	lsls	r2, r3, #24
 8005bce:	4b4b      	ldr	r3, [pc, #300]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	0619      	lsls	r1, r3, #24
 8005bd4:	4b49      	ldr	r3, [pc, #292]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005bd6:	785b      	ldrb	r3, [r3, #1]
 8005bd8:	041b      	lsls	r3, r3, #16
 8005bda:	4319      	orrs	r1, r3
 8005bdc:	4b47      	ldr	r3, [pc, #284]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005bde:	789b      	ldrb	r3, [r3, #2]
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	430b      	orrs	r3, r1
 8005be4:	4945      	ldr	r1, [pc, #276]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005be6:	78c9      	ldrb	r1, [r1, #3]
 8005be8:	430b      	orrs	r3, r1
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	4b42      	ldr	r3, [pc, #264]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	0619      	lsls	r1, r3, #24
 8005bf8:	4b40      	ldr	r3, [pc, #256]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	041b      	lsls	r3, r3, #16
 8005bfe:	4319      	orrs	r1, r3
 8005c00:	4b3e      	ldr	r3, [pc, #248]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005c02:	789b      	ldrb	r3, [r3, #2]
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	430b      	orrs	r3, r1
 8005c08:	493c      	ldr	r1, [pc, #240]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005c0a:	78c9      	ldrb	r1, [r1, #3]
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	0a1b      	lsrs	r3, r3, #8
 8005c10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c14:	431a      	orrs	r2, r3
 8005c16:	4b39      	ldr	r3, [pc, #228]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	0619      	lsls	r1, r3, #24
 8005c1c:	4b37      	ldr	r3, [pc, #220]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	041b      	lsls	r3, r3, #16
 8005c22:	4319      	orrs	r1, r3
 8005c24:	4b35      	ldr	r3, [pc, #212]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005c26:	789b      	ldrb	r3, [r3, #2]
 8005c28:	021b      	lsls	r3, r3, #8
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	4933      	ldr	r1, [pc, #204]	; (8005cfc <MX_LWIP_Init+0x228>)
 8005c2e:	78c9      	ldrb	r1, [r1, #3]
 8005c30:	430b      	orrs	r3, r1
 8005c32:	0e1b      	lsrs	r3, r3, #24
 8005c34:	4313      	orrs	r3, r2
 8005c36:	4a34      	ldr	r2, [pc, #208]	; (8005d08 <MX_LWIP_Init+0x234>)
 8005c38:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005c3a:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	061a      	lsls	r2, r3, #24
 8005c40:	4b2f      	ldr	r3, [pc, #188]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	041b      	lsls	r3, r3, #16
 8005c46:	431a      	orrs	r2, r3
 8005c48:	4b2d      	ldr	r3, [pc, #180]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005c4a:	789b      	ldrb	r3, [r3, #2]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	4a2b      	ldr	r2, [pc, #172]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005c52:	78d2      	ldrb	r2, [r2, #3]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	061a      	lsls	r2, r3, #24
 8005c58:	4b29      	ldr	r3, [pc, #164]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	0619      	lsls	r1, r3, #24
 8005c5e:	4b28      	ldr	r3, [pc, #160]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	041b      	lsls	r3, r3, #16
 8005c64:	4319      	orrs	r1, r3
 8005c66:	4b26      	ldr	r3, [pc, #152]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005c68:	789b      	ldrb	r3, [r3, #2]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	4924      	ldr	r1, [pc, #144]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005c70:	78c9      	ldrb	r1, [r1, #3]
 8005c72:	430b      	orrs	r3, r1
 8005c74:	021b      	lsls	r3, r3, #8
 8005c76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	4b20      	ldr	r3, [pc, #128]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	0619      	lsls	r1, r3, #24
 8005c82:	4b1f      	ldr	r3, [pc, #124]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005c84:	785b      	ldrb	r3, [r3, #1]
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	4319      	orrs	r1, r3
 8005c8a:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005c8c:	789b      	ldrb	r3, [r3, #2]
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	430b      	orrs	r3, r1
 8005c92:	491b      	ldr	r1, [pc, #108]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005c94:	78c9      	ldrb	r1, [r1, #3]
 8005c96:	430b      	orrs	r3, r1
 8005c98:	0a1b      	lsrs	r3, r3, #8
 8005c9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	4b17      	ldr	r3, [pc, #92]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	0619      	lsls	r1, r3, #24
 8005ca6:	4b16      	ldr	r3, [pc, #88]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005ca8:	785b      	ldrb	r3, [r3, #1]
 8005caa:	041b      	lsls	r3, r3, #16
 8005cac:	4319      	orrs	r1, r3
 8005cae:	4b14      	ldr	r3, [pc, #80]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005cb0:	789b      	ldrb	r3, [r3, #2]
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	4912      	ldr	r1, [pc, #72]	; (8005d00 <MX_LWIP_Init+0x22c>)
 8005cb8:	78c9      	ldrb	r1, [r1, #3]
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	0e1b      	lsrs	r3, r3, #24
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	4a12      	ldr	r2, [pc, #72]	; (8005d0c <MX_LWIP_Init+0x238>)
 8005cc2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005cc4:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <MX_LWIP_Init+0x23c>)
 8005cc6:	9302      	str	r3, [sp, #8]
 8005cc8:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <MX_LWIP_Init+0x240>)
 8005cca:	9301      	str	r3, [sp, #4]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	4b0e      	ldr	r3, [pc, #56]	; (8005d0c <MX_LWIP_Init+0x238>)
 8005cd2:	4a0d      	ldr	r2, [pc, #52]	; (8005d08 <MX_LWIP_Init+0x234>)
 8005cd4:	490b      	ldr	r1, [pc, #44]	; (8005d04 <MX_LWIP_Init+0x230>)
 8005cd6:	4810      	ldr	r0, [pc, #64]	; (8005d18 <MX_LWIP_Init+0x244>)
 8005cd8:	f001 f92a 	bl	8006f30 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005cdc:	480e      	ldr	r0, [pc, #56]	; (8005d18 <MX_LWIP_Init+0x244>)
 8005cde:	f001 fad9 	bl	8007294 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8005ce2:	480d      	ldr	r0, [pc, #52]	; (8005d18 <MX_LWIP_Init+0x244>)
 8005ce4:	f001 fae6 	bl	80072b4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005ce8:	490c      	ldr	r1, [pc, #48]	; (8005d1c <MX_LWIP_Init+0x248>)
 8005cea:	480b      	ldr	r0, [pc, #44]	; (8005d18 <MX_LWIP_Init+0x244>)
 8005cec:	f001 fbe4 	bl	80074b8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005cf0:	bf00      	nop
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000b04 	.word	0x20000b04
 8005cfc:	20000b00 	.word	0x20000b00
 8005d00:	20000af4 	.word	0x20000af4
 8005d04:	20000af8 	.word	0x20000af8
 8005d08:	20000b08 	.word	0x20000b08
 8005d0c:	20000b0c 	.word	0x20000b0c
 8005d10:	0800fd75 	.word	0x0800fd75
 8005d14:	0800602d 	.word	0x0800602d
 8005d18:	200007f4 	.word	0x200007f4
 8005d1c:	08005d71 	.word	0x08005d71

08005d20 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005d28:	f7fc fc9c 	bl	8002664 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <Ethernet_Link_Periodic_Handle+0x30>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b63      	cmp	r3, #99	; 0x63
 8005d36:	d907      	bls.n	8005d48 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005d38:	f7fc fc94 	bl	8002664 <HAL_GetTick>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	4a04      	ldr	r2, [pc, #16]	; (8005d50 <Ethernet_Link_Periodic_Handle+0x30>)
 8005d40:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fade 	bl	8006304 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005d48:	bf00      	nop
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20000afc 	.word	0x20000afc

08005d54 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005d58:	4804      	ldr	r0, [pc, #16]	; (8005d6c <MX_LWIP_Process+0x18>)
 8005d5a:	f000 f947 	bl	8005fec <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005d5e:	f007 fc1d 	bl	800d59c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005d62:	4802      	ldr	r0, [pc, #8]	; (8005d6c <MX_LWIP_Process+0x18>)
 8005d64:	f7ff ffdc 	bl	8005d20 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005d68:	bf00      	nop
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	200007f4 	.word	0x200007f4

08005d70 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005d90:	4b40      	ldr	r3, [pc, #256]	; (8005e94 <low_level_init+0x110>)
 8005d92:	4a41      	ldr	r2, [pc, #260]	; (8005e98 <low_level_init+0x114>)
 8005d94:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005d96:	2300      	movs	r3, #0
 8005d98:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005d9a:	2380      	movs	r3, #128	; 0x80
 8005d9c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005d9e:	23e1      	movs	r3, #225	; 0xe1
 8005da0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005da2:	2300      	movs	r3, #0
 8005da4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005da6:	2300      	movs	r3, #0
 8005da8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005daa:	2300      	movs	r3, #0
 8005dac:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005dae:	4a39      	ldr	r2, [pc, #228]	; (8005e94 <low_level_init+0x110>)
 8005db0:	f107 0308 	add.w	r3, r7, #8
 8005db4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005db6:	4b37      	ldr	r3, [pc, #220]	; (8005e94 <low_level_init+0x110>)
 8005db8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005dbc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005dbe:	4b35      	ldr	r3, [pc, #212]	; (8005e94 <low_level_init+0x110>)
 8005dc0:	4a36      	ldr	r2, [pc, #216]	; (8005e9c <low_level_init+0x118>)
 8005dc2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005dc4:	4b33      	ldr	r3, [pc, #204]	; (8005e94 <low_level_init+0x110>)
 8005dc6:	4a36      	ldr	r2, [pc, #216]	; (8005ea0 <low_level_init+0x11c>)
 8005dc8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005dca:	4b32      	ldr	r3, [pc, #200]	; (8005e94 <low_level_init+0x110>)
 8005dcc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005dd0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005dd2:	4830      	ldr	r0, [pc, #192]	; (8005e94 <low_level_init+0x110>)
 8005dd4:	f7fc fd88 	bl	80028e8 <HAL_ETH_Init>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005ddc:	2238      	movs	r2, #56	; 0x38
 8005dde:	2100      	movs	r1, #0
 8005de0:	4830      	ldr	r0, [pc, #192]	; (8005ea4 <low_level_init+0x120>)
 8005de2:	f00a fea2 	bl	8010b2a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005de6:	4b2f      	ldr	r3, [pc, #188]	; (8005ea4 <low_level_init+0x120>)
 8005de8:	2221      	movs	r2, #33	; 0x21
 8005dea:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005dec:	4b2d      	ldr	r3, [pc, #180]	; (8005ea4 <low_level_init+0x120>)
 8005dee:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005df2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005df4:	4b2b      	ldr	r3, [pc, #172]	; (8005ea4 <low_level_init+0x120>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005dfa:	482b      	ldr	r0, [pc, #172]	; (8005ea8 <low_level_init+0x124>)
 8005dfc:	f000 ff60 	bl	8006cc0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2206      	movs	r2, #6
 8005e04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005e08:	4b22      	ldr	r3, [pc, #136]	; (8005e94 <low_level_init+0x110>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	781a      	ldrb	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005e14:	4b1f      	ldr	r3, [pc, #124]	; (8005e94 <low_level_init+0x110>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	785a      	ldrb	r2, [r3, #1]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005e20:	4b1c      	ldr	r3, [pc, #112]	; (8005e94 <low_level_init+0x110>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	789a      	ldrb	r2, [r3, #2]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005e2c:	4b19      	ldr	r3, [pc, #100]	; (8005e94 <low_level_init+0x110>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	78da      	ldrb	r2, [r3, #3]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005e38:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <low_level_init+0x110>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	791a      	ldrb	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005e44:	4b13      	ldr	r3, [pc, #76]	; (8005e94 <low_level_init+0x110>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	795a      	ldrb	r2, [r3, #5]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005e56:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e5e:	f043 030a 	orr.w	r3, r3, #10
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005e6a:	4910      	ldr	r1, [pc, #64]	; (8005eac <low_level_init+0x128>)
 8005e6c:	4810      	ldr	r0, [pc, #64]	; (8005eb0 <low_level_init+0x12c>)
 8005e6e:	f7fc fa32 	bl	80022d6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005e72:	480f      	ldr	r0, [pc, #60]	; (8005eb0 <low_level_init+0x12c>)
 8005e74:	f7fc fa61 	bl	800233a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d103      	bne.n	8005e86 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fa40 	bl	8006304 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005e84:	e001      	b.n	8005e8a <low_level_init+0x106>
    Error_Handler();
 8005e86:	f7fb ff61 	bl	8001d4c <Error_Handler>
}
 8005e8a:	bf00      	nop
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	200055f4 	.word	0x200055f4
 8005e98:	40028000 	.word	0x40028000
 8005e9c:	20000b10 	.word	0x20000b10
 8005ea0:	20005534 	.word	0x20005534
 8005ea4:	200056a4 	.word	0x200056a4
 8005ea8:	08015fbc 	.word	0x08015fbc
 8005eac:	20000014 	.word	0x20000014
 8005eb0:	200055d4 	.word	0x200055d4

08005eb4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b092      	sub	sp, #72	; 0x48
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005ecc:	f107 030c 	add.w	r3, r7, #12
 8005ed0:	2230      	movs	r2, #48	; 0x30
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f00a fe28 	bl	8010b2a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005eda:	f107 030c 	add.w	r3, r7, #12
 8005ede:	2230      	movs	r2, #48	; 0x30
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f00a fe21 	bl	8010b2a <memset>

  for(q = p; q != NULL; q = q->next)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	643b      	str	r3, [r7, #64]	; 0x40
 8005eec:	e045      	b.n	8005f7a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d902      	bls.n	8005efa <low_level_output+0x46>
      return ERR_IF;
 8005ef4:	f06f 030b 	mvn.w	r3, #11
 8005ef8:	e055      	b.n	8005fa6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005efc:	6859      	ldr	r1, [r3, #4]
 8005efe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f00:	4613      	mov	r3, r2
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	4413      	add	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	3348      	adds	r3, #72	; 0x48
 8005f0a:	443b      	add	r3, r7
 8005f0c:	3b3c      	subs	r3, #60	; 0x3c
 8005f0e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f12:	895b      	ldrh	r3, [r3, #10]
 8005f14:	4619      	mov	r1, r3
 8005f16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f18:	4613      	mov	r3, r2
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	3348      	adds	r3, #72	; 0x48
 8005f22:	443b      	add	r3, r7
 8005f24:	3b38      	subs	r3, #56	; 0x38
 8005f26:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d011      	beq.n	8005f52 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f30:	1e5a      	subs	r2, r3, #1
 8005f32:	f107 000c 	add.w	r0, r7, #12
 8005f36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f38:	460b      	mov	r3, r1
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	440b      	add	r3, r1
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	18c1      	adds	r1, r0, r3
 8005f42:	4613      	mov	r3, r2
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	3348      	adds	r3, #72	; 0x48
 8005f4c:	443b      	add	r3, r7
 8005f4e:	3b34      	subs	r3, #52	; 0x34
 8005f50:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d109      	bne.n	8005f6e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005f5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	3348      	adds	r3, #72	; 0x48
 8005f66:	443b      	add	r3, r7
 8005f68:	3b34      	subs	r3, #52	; 0x34
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f70:	3301      	adds	r3, #1
 8005f72:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	643b      	str	r3, [r7, #64]	; 0x40
 8005f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1b6      	bne.n	8005eee <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	891b      	ldrh	r3, [r3, #8]
 8005f84:	461a      	mov	r2, r3
 8005f86:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <low_level_output+0xfc>)
 8005f88:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005f8a:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <low_level_output+0xfc>)
 8005f8c:	f107 030c 	add.w	r3, r7, #12
 8005f90:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005f92:	4a07      	ldr	r2, [pc, #28]	; (8005fb0 <low_level_output+0xfc>)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005f98:	2214      	movs	r2, #20
 8005f9a:	4905      	ldr	r1, [pc, #20]	; (8005fb0 <low_level_output+0xfc>)
 8005f9c:	4805      	ldr	r0, [pc, #20]	; (8005fb4 <low_level_output+0x100>)
 8005f9e:	f7fc fdd9 	bl	8002b54 <HAL_ETH_Transmit>

  return errval;
 8005fa2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3748      	adds	r7, #72	; 0x48
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	200056a4 	.word	0x200056a4
 8005fb4:	200055f4 	.word	0x200055f4

08005fb8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005fc4:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <low_level_input+0x2c>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d105      	bne.n	8005fd8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005fcc:	f107 030c 	add.w	r3, r7, #12
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4805      	ldr	r0, [pc, #20]	; (8005fe8 <low_level_input+0x30>)
 8005fd4:	f7fc fe52 	bl	8002c7c <HAL_ETH_ReadData>
  }

  return p;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000830 	.word	0x20000830
 8005fe8:	200055f4 	.word	0x200055f4

08005fec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff ffdd 	bl	8005fb8 <low_level_input>
 8005ffe:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	4798      	blx	r3
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f001 fdce 	bl	8007bb8 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1ea      	bne.n	8005ff8 <ethernetif_input+0xc>
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <ethernetif_init+0x1c>
 800603a:	4b0e      	ldr	r3, [pc, #56]	; (8006074 <ethernetif_init+0x48>)
 800603c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8006040:	490d      	ldr	r1, [pc, #52]	; (8006078 <ethernetif_init+0x4c>)
 8006042:	480e      	ldr	r0, [pc, #56]	; (800607c <ethernetif_init+0x50>)
 8006044:	f00a fcd2 	bl	80109ec <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2273      	movs	r2, #115	; 0x73
 800604c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2274      	movs	r2, #116	; 0x74
 8006054:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a09      	ldr	r2, [pc, #36]	; (8006080 <ethernetif_init+0x54>)
 800605c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a08      	ldr	r2, [pc, #32]	; (8006084 <ethernetif_init+0x58>)
 8006062:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff fe8d 	bl	8005d84 <low_level_init>

  return ERR_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	08012dc4 	.word	0x08012dc4
 8006078:	08012de0 	.word	0x08012de0
 800607c:	08012df0 	.word	0x08012df0
 8006080:	0800e22d 	.word	0x0800e22d
 8006084:	08005eb5 	.word	0x08005eb5

08006088 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006094:	68f9      	ldr	r1, [r7, #12]
 8006096:	4807      	ldr	r0, [pc, #28]	; (80060b4 <pbuf_free_custom+0x2c>)
 8006098:	f000 fef4 	bl	8006e84 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800609c:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <pbuf_free_custom+0x30>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d102      	bne.n	80060aa <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80060a4:	4b04      	ldr	r3, [pc, #16]	; (80060b8 <pbuf_free_custom+0x30>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
  }
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	08015fbc 	.word	0x08015fbc
 80060b8:	20000830 	.word	0x20000830

080060bc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80060c0:	f7fc fad0 	bl	8002664 <HAL_GetTick>
 80060c4:	4603      	mov	r3, r0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08e      	sub	sp, #56	; 0x38
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	605a      	str	r2, [r3, #4]
 80060de:	609a      	str	r2, [r3, #8]
 80060e0:	60da      	str	r2, [r3, #12]
 80060e2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a59      	ldr	r2, [pc, #356]	; (8006250 <HAL_ETH_MspInit+0x184>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	f040 80ac 	bne.w	8006248 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80060f0:	2300      	movs	r3, #0
 80060f2:	623b      	str	r3, [r7, #32]
 80060f4:	4b57      	ldr	r3, [pc, #348]	; (8006254 <HAL_ETH_MspInit+0x188>)
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	4a56      	ldr	r2, [pc, #344]	; (8006254 <HAL_ETH_MspInit+0x188>)
 80060fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060fe:	6313      	str	r3, [r2, #48]	; 0x30
 8006100:	4b54      	ldr	r3, [pc, #336]	; (8006254 <HAL_ETH_MspInit+0x188>)
 8006102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006108:	623b      	str	r3, [r7, #32]
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	2300      	movs	r3, #0
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	4b50      	ldr	r3, [pc, #320]	; (8006254 <HAL_ETH_MspInit+0x188>)
 8006112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006114:	4a4f      	ldr	r2, [pc, #316]	; (8006254 <HAL_ETH_MspInit+0x188>)
 8006116:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800611a:	6313      	str	r3, [r2, #48]	; 0x30
 800611c:	4b4d      	ldr	r3, [pc, #308]	; (8006254 <HAL_ETH_MspInit+0x188>)
 800611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006120:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006124:	61fb      	str	r3, [r7, #28]
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	2300      	movs	r3, #0
 800612a:	61bb      	str	r3, [r7, #24]
 800612c:	4b49      	ldr	r3, [pc, #292]	; (8006254 <HAL_ETH_MspInit+0x188>)
 800612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006130:	4a48      	ldr	r2, [pc, #288]	; (8006254 <HAL_ETH_MspInit+0x188>)
 8006132:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006136:	6313      	str	r3, [r2, #48]	; 0x30
 8006138:	4b46      	ldr	r3, [pc, #280]	; (8006254 <HAL_ETH_MspInit+0x188>)
 800613a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	4b42      	ldr	r3, [pc, #264]	; (8006254 <HAL_ETH_MspInit+0x188>)
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	4a41      	ldr	r2, [pc, #260]	; (8006254 <HAL_ETH_MspInit+0x188>)
 800614e:	f043 0304 	orr.w	r3, r3, #4
 8006152:	6313      	str	r3, [r2, #48]	; 0x30
 8006154:	4b3f      	ldr	r3, [pc, #252]	; (8006254 <HAL_ETH_MspInit+0x188>)
 8006156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	617b      	str	r3, [r7, #20]
 800615e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006160:	2300      	movs	r3, #0
 8006162:	613b      	str	r3, [r7, #16]
 8006164:	4b3b      	ldr	r3, [pc, #236]	; (8006254 <HAL_ETH_MspInit+0x188>)
 8006166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006168:	4a3a      	ldr	r2, [pc, #232]	; (8006254 <HAL_ETH_MspInit+0x188>)
 800616a:	f043 0301 	orr.w	r3, r3, #1
 800616e:	6313      	str	r3, [r2, #48]	; 0x30
 8006170:	4b38      	ldr	r3, [pc, #224]	; (8006254 <HAL_ETH_MspInit+0x188>)
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	613b      	str	r3, [r7, #16]
 800617a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800617c:	2300      	movs	r3, #0
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	4b34      	ldr	r3, [pc, #208]	; (8006254 <HAL_ETH_MspInit+0x188>)
 8006182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006184:	4a33      	ldr	r2, [pc, #204]	; (8006254 <HAL_ETH_MspInit+0x188>)
 8006186:	f043 0302 	orr.w	r3, r3, #2
 800618a:	6313      	str	r3, [r2, #48]	; 0x30
 800618c:	4b31      	ldr	r3, [pc, #196]	; (8006254 <HAL_ETH_MspInit+0x188>)
 800618e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006198:	2300      	movs	r3, #0
 800619a:	60bb      	str	r3, [r7, #8]
 800619c:	4b2d      	ldr	r3, [pc, #180]	; (8006254 <HAL_ETH_MspInit+0x188>)
 800619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a0:	4a2c      	ldr	r2, [pc, #176]	; (8006254 <HAL_ETH_MspInit+0x188>)
 80061a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061a6:	6313      	str	r3, [r2, #48]	; 0x30
 80061a8:	4b2a      	ldr	r3, [pc, #168]	; (8006254 <HAL_ETH_MspInit+0x188>)
 80061aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b0:	60bb      	str	r3, [r7, #8]
 80061b2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80061b4:	2332      	movs	r3, #50	; 0x32
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061b8:	2302      	movs	r3, #2
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061bc:	2300      	movs	r3, #0
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061c0:	2303      	movs	r3, #3
 80061c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80061c4:	230b      	movs	r3, #11
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061cc:	4619      	mov	r1, r3
 80061ce:	4822      	ldr	r0, [pc, #136]	; (8006258 <HAL_ETH_MspInit+0x18c>)
 80061d0:	f7fd fd80 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80061d4:	2386      	movs	r3, #134	; 0x86
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061d8:	2302      	movs	r3, #2
 80061da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061dc:	2300      	movs	r3, #0
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061e0:	2303      	movs	r3, #3
 80061e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80061e4:	230b      	movs	r3, #11
 80061e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061ec:	4619      	mov	r1, r3
 80061ee:	481b      	ldr	r0, [pc, #108]	; (800625c <HAL_ETH_MspInit+0x190>)
 80061f0:	f7fd fd70 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80061f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061fa:	2302      	movs	r3, #2
 80061fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006202:	2303      	movs	r3, #3
 8006204:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006206:	230b      	movs	r3, #11
 8006208:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800620a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800620e:	4619      	mov	r1, r3
 8006210:	4813      	ldr	r0, [pc, #76]	; (8006260 <HAL_ETH_MspInit+0x194>)
 8006212:	f7fd fd5f 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006216:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800621c:	2302      	movs	r3, #2
 800621e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006220:	2300      	movs	r3, #0
 8006222:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006224:	2303      	movs	r3, #3
 8006226:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006228:	230b      	movs	r3, #11
 800622a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800622c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006230:	4619      	mov	r1, r3
 8006232:	480c      	ldr	r0, [pc, #48]	; (8006264 <HAL_ETH_MspInit+0x198>)
 8006234:	f7fd fd4e 	bl	8003cd4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8006238:	2200      	movs	r2, #0
 800623a:	2100      	movs	r1, #0
 800623c:	203d      	movs	r0, #61	; 0x3d
 800623e:	f7fc fb1c 	bl	800287a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006242:	203d      	movs	r0, #61	; 0x3d
 8006244:	f7fc fb35 	bl	80028b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006248:	bf00      	nop
 800624a:	3738      	adds	r7, #56	; 0x38
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	40028000 	.word	0x40028000
 8006254:	40023800 	.word	0x40023800
 8006258:	40020800 	.word	0x40020800
 800625c:	40020000 	.word	0x40020000
 8006260:	40020400 	.word	0x40020400
 8006264:	40021800 	.word	0x40021800

08006268 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800626c:	4802      	ldr	r0, [pc, #8]	; (8006278 <ETH_PHY_IO_Init+0x10>)
 800626e:	f7fd f8d5 	bl	800341c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	bd80      	pop	{r7, pc}
 8006278:	200055f4 	.word	0x200055f4

0800627c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
  return 0;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	68f9      	ldr	r1, [r7, #12]
 800629e:	4807      	ldr	r0, [pc, #28]	; (80062bc <ETH_PHY_IO_ReadReg+0x30>)
 80062a0:	f7fc ff24 	bl	80030ec <HAL_ETH_ReadPHYRegister>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80062aa:	f04f 33ff 	mov.w	r3, #4294967295
 80062ae:	e000      	b.n	80062b2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	200055f4 	.word	0x200055f4

080062c0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	68f9      	ldr	r1, [r7, #12]
 80062d2:	4807      	ldr	r0, [pc, #28]	; (80062f0 <ETH_PHY_IO_WriteReg+0x30>)
 80062d4:	f7fc ff55 	bl	8003182 <HAL_ETH_WritePHYRegister>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80062de:	f04f 33ff 	mov.w	r3, #4294967295
 80062e2:	e000      	b.n	80062e6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	200055f4 	.word	0x200055f4

080062f4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80062f8:	f7fc f9b4 	bl	8002664 <HAL_GetTick>
 80062fc:	4603      	mov	r3, r0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b0a0      	sub	sp, #128	; 0x80
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800630c:	f107 030c 	add.w	r3, r7, #12
 8006310:	2264      	movs	r2, #100	; 0x64
 8006312:	2100      	movs	r1, #0
 8006314:	4618      	mov	r0, r3
 8006316:	f00a fc08 	bl	8010b2a <memset>
  int32_t PHYLinkState = 0;
 800631a:	2300      	movs	r3, #0
 800631c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006322:	2300      	movs	r3, #0
 8006324:	67bb      	str	r3, [r7, #120]	; 0x78
 8006326:	2300      	movs	r3, #0
 8006328:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800632a:	483a      	ldr	r0, [pc, #232]	; (8006414 <ethernet_link_check_state+0x110>)
 800632c:	f7fc f8ad 	bl	800248a <LAN8742_GetLinkState>
 8006330:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006338:	089b      	lsrs	r3, r3, #2
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00c      	beq.n	800635e <ethernet_link_check_state+0x5a>
 8006344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006346:	2b01      	cmp	r3, #1
 8006348:	dc09      	bgt.n	800635e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800634a:	4833      	ldr	r0, [pc, #204]	; (8006418 <ethernet_link_check_state+0x114>)
 800634c:	f7fc fba9 	bl	8002aa2 <HAL_ETH_Stop>
    netif_set_down(netif);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f001 f81b 	bl	800738c <netif_set_down>
    netif_set_link_down(netif);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f001 f87e 	bl	8007458 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800635c:	e055      	b.n	800640a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b00      	cmp	r3, #0
 800636a:	d14e      	bne.n	800640a <ethernet_link_check_state+0x106>
 800636c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800636e:	2b01      	cmp	r3, #1
 8006370:	dd4b      	ble.n	800640a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8006372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006374:	3b02      	subs	r3, #2
 8006376:	2b03      	cmp	r3, #3
 8006378:	d82a      	bhi.n	80063d0 <ethernet_link_check_state+0xcc>
 800637a:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <ethernet_link_check_state+0x7c>)
 800637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006380:	08006391 	.word	0x08006391
 8006384:	080063a3 	.word	0x080063a3
 8006388:	080063b3 	.word	0x080063b3
 800638c:	080063c3 	.word	0x080063c3
      duplex = ETH_FULLDUPLEX_MODE;
 8006390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006394:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006396:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800639a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800639c:	2301      	movs	r3, #1
 800639e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80063a0:	e017      	b.n	80063d2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80063a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063aa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80063ac:	2301      	movs	r3, #1
 80063ae:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80063b0:	e00f      	b.n	80063d2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80063b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063b6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80063b8:	2300      	movs	r3, #0
 80063ba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80063bc:	2301      	movs	r3, #1
 80063be:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80063c0:	e007      	b.n	80063d2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80063c2:	2300      	movs	r3, #0
 80063c4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80063c6:	2300      	movs	r3, #0
 80063c8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80063ca:	2301      	movs	r3, #1
 80063cc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80063ce:	e000      	b.n	80063d2 <ethernet_link_check_state+0xce>
      break;
 80063d0:	bf00      	nop
    if(linkchanged)
 80063d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d018      	beq.n	800640a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80063d8:	f107 030c 	add.w	r3, r7, #12
 80063dc:	4619      	mov	r1, r3
 80063de:	480e      	ldr	r0, [pc, #56]	; (8006418 <ethernet_link_check_state+0x114>)
 80063e0:	f7fc ff18 	bl	8003214 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80063e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063e6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80063e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ea:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80063ec:	f107 030c 	add.w	r3, r7, #12
 80063f0:	4619      	mov	r1, r3
 80063f2:	4809      	ldr	r0, [pc, #36]	; (8006418 <ethernet_link_check_state+0x114>)
 80063f4:	f7fc fff8 	bl	80033e8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80063f8:	4807      	ldr	r0, [pc, #28]	; (8006418 <ethernet_link_check_state+0x114>)
 80063fa:	f7fc faf3 	bl	80029e4 <HAL_ETH_Start>
      netif_set_up(netif);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 ff58 	bl	80072b4 <netif_set_up>
      netif_set_link_up(netif);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fff3 	bl	80073f0 <netif_set_link_up>
}
 800640a:	bf00      	nop
 800640c:	3780      	adds	r7, #128	; 0x80
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	200055d4 	.word	0x200055d4
 8006418:	200055f4 	.word	0x200055f4

0800641c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af02      	add	r7, sp, #8
 8006422:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006424:	4812      	ldr	r0, [pc, #72]	; (8006470 <HAL_ETH_RxAllocateCallback+0x54>)
 8006426:	f000 fcbf 	bl	8006da8 <memp_malloc_pool>
 800642a:	60f8      	str	r0, [r7, #12]
  if (p)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d014      	beq.n	800645c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f103 0220 	add.w	r2, r3, #32
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4a0d      	ldr	r2, [pc, #52]	; (8006474 <HAL_ETH_RxAllocateCallback+0x58>)
 8006440:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800644a:	9201      	str	r2, [sp, #4]
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2241      	movs	r2, #65	; 0x41
 8006452:	2100      	movs	r1, #0
 8006454:	2000      	movs	r0, #0
 8006456:	f001 f9f5 	bl	8007844 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800645a:	e005      	b.n	8006468 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800645c:	4b06      	ldr	r3, [pc, #24]	; (8006478 <HAL_ETH_RxAllocateCallback+0x5c>)
 800645e:	2201      	movs	r2, #1
 8006460:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
}
 8006468:	bf00      	nop
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	08015fbc 	.word	0x08015fbc
 8006474:	08006089 	.word	0x08006089
 8006478:	20000830 	.word	0x20000830

0800647c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800647c:	b480      	push	{r7}
 800647e:	b089      	sub	sp, #36	; 0x24
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006492:	2300      	movs	r3, #0
 8006494:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3b20      	subs	r3, #32
 800649a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	2200      	movs	r2, #0
 80064a6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	887a      	ldrh	r2, [r7, #2]
 80064ac:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	e003      	b.n	80064c6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	e009      	b.n	80064e8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	891a      	ldrh	r2, [r3, #8]
 80064d8:	887b      	ldrh	r3, [r7, #2]
 80064da:	4413      	add	r3, r2
 80064dc:	b29a      	uxth	r2, r3
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f2      	bne.n	80064d4 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	3724      	adds	r7, #36	; 0x24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	4603      	mov	r3, r0
 8006504:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006506:	88fb      	ldrh	r3, [r7, #6]
 8006508:	021b      	lsls	r3, r3, #8
 800650a:	b21a      	sxth	r2, r3
 800650c:	88fb      	ldrh	r3, [r7, #6]
 800650e:	0a1b      	lsrs	r3, r3, #8
 8006510:	b29b      	uxth	r3, r3
 8006512:	b21b      	sxth	r3, r3
 8006514:	4313      	orrs	r3, r2
 8006516:	b21b      	sxth	r3, r3
 8006518:	b29b      	uxth	r3, r3
}
 800651a:	4618      	mov	r0, r3
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	061a      	lsls	r2, r3, #24
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800653a:	431a      	orrs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	0a1b      	lsrs	r3, r3, #8
 8006540:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	0e1b      	lsrs	r3, r3, #24
 800654a:	4313      	orrs	r3, r2
}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800655e:	2300      	movs	r3, #0
 8006560:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006562:	f000 f8d5 	bl	8006710 <mem_init>
  memp_init();
 8006566:	f000 fbdb 	bl	8006d20 <memp_init>
  pbuf_init();
  netif_init();
 800656a:	f000 fcd9 	bl	8006f20 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800656e:	f007 f857 	bl	800d620 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006572:	f001 fdaf 	bl	80080d4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006576:	f006 ffc9 	bl	800d50c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	4603      	mov	r3, r0
 800658c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800658e:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <ptr_to_mem+0x20>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	88fb      	ldrh	r3, [r7, #6]
 8006594:	4413      	add	r3, r2
}
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	20000834 	.word	0x20000834

080065a8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80065b0:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <mem_to_ptr+0x20>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	b29b      	uxth	r3, r3
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000834 	.word	0x20000834

080065cc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80065cc:	b590      	push	{r4, r7, lr}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80065d4:	4b45      	ldr	r3, [pc, #276]	; (80066ec <plug_holes+0x120>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d206      	bcs.n	80065ec <plug_holes+0x20>
 80065de:	4b44      	ldr	r3, [pc, #272]	; (80066f0 <plug_holes+0x124>)
 80065e0:	f240 12df 	movw	r2, #479	; 0x1df
 80065e4:	4943      	ldr	r1, [pc, #268]	; (80066f4 <plug_holes+0x128>)
 80065e6:	4844      	ldr	r0, [pc, #272]	; (80066f8 <plug_holes+0x12c>)
 80065e8:	f00a fa00 	bl	80109ec <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80065ec:	4b43      	ldr	r3, [pc, #268]	; (80066fc <plug_holes+0x130>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d306      	bcc.n	8006604 <plug_holes+0x38>
 80065f6:	4b3e      	ldr	r3, [pc, #248]	; (80066f0 <plug_holes+0x124>)
 80065f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80065fc:	4940      	ldr	r1, [pc, #256]	; (8006700 <plug_holes+0x134>)
 80065fe:	483e      	ldr	r0, [pc, #248]	; (80066f8 <plug_holes+0x12c>)
 8006600:	f00a f9f4 	bl	80109ec <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	791b      	ldrb	r3, [r3, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d006      	beq.n	800661a <plug_holes+0x4e>
 800660c:	4b38      	ldr	r3, [pc, #224]	; (80066f0 <plug_holes+0x124>)
 800660e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006612:	493c      	ldr	r1, [pc, #240]	; (8006704 <plug_holes+0x138>)
 8006614:	4838      	ldr	r0, [pc, #224]	; (80066f8 <plug_holes+0x12c>)
 8006616:	f00a f9e9 	bl	80109ec <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006622:	d906      	bls.n	8006632 <plug_holes+0x66>
 8006624:	4b32      	ldr	r3, [pc, #200]	; (80066f0 <plug_holes+0x124>)
 8006626:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800662a:	4937      	ldr	r1, [pc, #220]	; (8006708 <plug_holes+0x13c>)
 800662c:	4832      	ldr	r0, [pc, #200]	; (80066f8 <plug_holes+0x12c>)
 800662e:	f00a f9dd 	bl	80109ec <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff ffa4 	bl	8006584 <ptr_to_mem>
 800663c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	429a      	cmp	r2, r3
 8006644:	d024      	beq.n	8006690 <plug_holes+0xc4>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	791b      	ldrb	r3, [r3, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d120      	bne.n	8006690 <plug_holes+0xc4>
 800664e:	4b2b      	ldr	r3, [pc, #172]	; (80066fc <plug_holes+0x130>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	429a      	cmp	r2, r3
 8006656:	d01b      	beq.n	8006690 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006658:	4b2c      	ldr	r3, [pc, #176]	; (800670c <plug_holes+0x140>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	429a      	cmp	r2, r3
 8006660:	d102      	bne.n	8006668 <plug_holes+0x9c>
      lfree = mem;
 8006662:	4a2a      	ldr	r2, [pc, #168]	; (800670c <plug_holes+0x140>)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	881a      	ldrh	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006678:	d00a      	beq.n	8006690 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	4618      	mov	r0, r3
 8006680:	f7ff ff80 	bl	8006584 <ptr_to_mem>
 8006684:	4604      	mov	r4, r0
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff ff8e 	bl	80065a8 <mem_to_ptr>
 800668c:	4603      	mov	r3, r0
 800668e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	885b      	ldrh	r3, [r3, #2]
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff ff75 	bl	8006584 <ptr_to_mem>
 800669a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d01f      	beq.n	80066e4 <plug_holes+0x118>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	791b      	ldrb	r3, [r3, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d11b      	bne.n	80066e4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80066ac:	4b17      	ldr	r3, [pc, #92]	; (800670c <plug_holes+0x140>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d102      	bne.n	80066bc <plug_holes+0xf0>
      lfree = pmem;
 80066b6:	4a15      	ldr	r2, [pc, #84]	; (800670c <plug_holes+0x140>)
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	881a      	ldrh	r2, [r3, #0]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80066cc:	d00a      	beq.n	80066e4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff ff56 	bl	8006584 <ptr_to_mem>
 80066d8:	4604      	mov	r4, r0
 80066da:	68b8      	ldr	r0, [r7, #8]
 80066dc:	f7ff ff64 	bl	80065a8 <mem_to_ptr>
 80066e0:	4603      	mov	r3, r0
 80066e2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80066e4:	bf00      	nop
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd90      	pop	{r4, r7, pc}
 80066ec:	20000834 	.word	0x20000834
 80066f0:	08012e18 	.word	0x08012e18
 80066f4:	08012e48 	.word	0x08012e48
 80066f8:	08012e60 	.word	0x08012e60
 80066fc:	20000838 	.word	0x20000838
 8006700:	08012e88 	.word	0x08012e88
 8006704:	08012ea4 	.word	0x08012ea4
 8006708:	08012ec0 	.word	0x08012ec0
 800670c:	2000083c 	.word	0x2000083c

08006710 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006716:	4b18      	ldr	r3, [pc, #96]	; (8006778 <mem_init+0x68>)
 8006718:	3303      	adds	r3, #3
 800671a:	f023 0303 	bic.w	r3, r3, #3
 800671e:	461a      	mov	r2, r3
 8006720:	4b16      	ldr	r3, [pc, #88]	; (800677c <mem_init+0x6c>)
 8006722:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006724:	4b15      	ldr	r3, [pc, #84]	; (800677c <mem_init+0x6c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006730:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800673e:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8006742:	f7ff ff1f 	bl	8006584 <ptr_to_mem>
 8006746:	4603      	mov	r3, r0
 8006748:	4a0d      	ldr	r2, [pc, #52]	; (8006780 <mem_init+0x70>)
 800674a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800674c:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <mem_init+0x70>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2201      	movs	r2, #1
 8006752:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006754:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <mem_init+0x70>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800675c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800675e:	4b08      	ldr	r3, [pc, #32]	; (8006780 <mem_init+0x70>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006766:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006768:	4b04      	ldr	r3, [pc, #16]	; (800677c <mem_init+0x6c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a05      	ldr	r2, [pc, #20]	; (8006784 <mem_init+0x74>)
 800676e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	200056f4 	.word	0x200056f4
 800677c:	20000834 	.word	0x20000834
 8006780:	20000838 	.word	0x20000838
 8006784:	2000083c 	.word	0x2000083c

08006788 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff ff09 	bl	80065a8 <mem_to_ptr>
 8006796:	4603      	mov	r3, r0
 8006798:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff fef0 	bl	8006584 <ptr_to_mem>
 80067a4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	885b      	ldrh	r3, [r3, #2]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff feea 	bl	8006584 <ptr_to_mem>
 80067b0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80067ba:	d818      	bhi.n	80067ee <mem_link_valid+0x66>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	885b      	ldrh	r3, [r3, #2]
 80067c0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80067c4:	d813      	bhi.n	80067ee <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80067ca:	8afa      	ldrh	r2, [r7, #22]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d004      	beq.n	80067da <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	8afa      	ldrh	r2, [r7, #22]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d109      	bne.n	80067ee <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80067da:	4b08      	ldr	r3, [pc, #32]	; (80067fc <mem_link_valid+0x74>)
 80067dc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d006      	beq.n	80067f2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	885b      	ldrh	r3, [r3, #2]
 80067e8:	8afa      	ldrh	r2, [r7, #22]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d001      	beq.n	80067f2 <mem_link_valid+0x6a>
    return 0;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e000      	b.n	80067f4 <mem_link_valid+0x6c>
  }
  return 1;
 80067f2:	2301      	movs	r3, #1
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	20000838 	.word	0x20000838

08006800 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d04c      	beq.n	80068a8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f003 0303 	and.w	r3, r3, #3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d007      	beq.n	8006828 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006818:	4b25      	ldr	r3, [pc, #148]	; (80068b0 <mem_free+0xb0>)
 800681a:	f240 2273 	movw	r2, #627	; 0x273
 800681e:	4925      	ldr	r1, [pc, #148]	; (80068b4 <mem_free+0xb4>)
 8006820:	4825      	ldr	r0, [pc, #148]	; (80068b8 <mem_free+0xb8>)
 8006822:	f00a f8e3 	bl	80109ec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006826:	e040      	b.n	80068aa <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3b08      	subs	r3, #8
 800682c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800682e:	4b23      	ldr	r3, [pc, #140]	; (80068bc <mem_free+0xbc>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	429a      	cmp	r2, r3
 8006836:	d306      	bcc.n	8006846 <mem_free+0x46>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f103 020c 	add.w	r2, r3, #12
 800683e:	4b20      	ldr	r3, [pc, #128]	; (80068c0 <mem_free+0xc0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d907      	bls.n	8006856 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006846:	4b1a      	ldr	r3, [pc, #104]	; (80068b0 <mem_free+0xb0>)
 8006848:	f240 227f 	movw	r2, #639	; 0x27f
 800684c:	491d      	ldr	r1, [pc, #116]	; (80068c4 <mem_free+0xc4>)
 800684e:	481a      	ldr	r0, [pc, #104]	; (80068b8 <mem_free+0xb8>)
 8006850:	f00a f8cc 	bl	80109ec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006854:	e029      	b.n	80068aa <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	791b      	ldrb	r3, [r3, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d107      	bne.n	800686e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800685e:	4b14      	ldr	r3, [pc, #80]	; (80068b0 <mem_free+0xb0>)
 8006860:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006864:	4918      	ldr	r1, [pc, #96]	; (80068c8 <mem_free+0xc8>)
 8006866:	4814      	ldr	r0, [pc, #80]	; (80068b8 <mem_free+0xb8>)
 8006868:	f00a f8c0 	bl	80109ec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800686c:	e01d      	b.n	80068aa <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7ff ff8a 	bl	8006788 <mem_link_valid>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d107      	bne.n	800688a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800687a:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <mem_free+0xb0>)
 800687c:	f240 2295 	movw	r2, #661	; 0x295
 8006880:	4912      	ldr	r1, [pc, #72]	; (80068cc <mem_free+0xcc>)
 8006882:	480d      	ldr	r0, [pc, #52]	; (80068b8 <mem_free+0xb8>)
 8006884:	f00a f8b2 	bl	80109ec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006888:	e00f      	b.n	80068aa <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006890:	4b0f      	ldr	r3, [pc, #60]	; (80068d0 <mem_free+0xd0>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	429a      	cmp	r2, r3
 8006898:	d202      	bcs.n	80068a0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800689a:	4a0d      	ldr	r2, [pc, #52]	; (80068d0 <mem_free+0xd0>)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7ff fe93 	bl	80065cc <plug_holes>
 80068a6:	e000      	b.n	80068aa <mem_free+0xaa>
    return;
 80068a8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	08012e18 	.word	0x08012e18
 80068b4:	08012eec 	.word	0x08012eec
 80068b8:	08012e60 	.word	0x08012e60
 80068bc:	20000834 	.word	0x20000834
 80068c0:	20000838 	.word	0x20000838
 80068c4:	08012f10 	.word	0x08012f10
 80068c8:	08012f2c 	.word	0x08012f2c
 80068cc:	08012f54 	.word	0x08012f54
 80068d0:	2000083c 	.word	0x2000083c

080068d4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80068e0:	887b      	ldrh	r3, [r7, #2]
 80068e2:	3303      	adds	r3, #3
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f023 0303 	bic.w	r3, r3, #3
 80068ea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80068ec:	8bfb      	ldrh	r3, [r7, #30]
 80068ee:	2b0b      	cmp	r3, #11
 80068f0:	d801      	bhi.n	80068f6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80068f2:	230c      	movs	r3, #12
 80068f4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80068f6:	8bfb      	ldrh	r3, [r7, #30]
 80068f8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80068fc:	d803      	bhi.n	8006906 <mem_trim+0x32>
 80068fe:	8bfa      	ldrh	r2, [r7, #30]
 8006900:	887b      	ldrh	r3, [r7, #2]
 8006902:	429a      	cmp	r2, r3
 8006904:	d201      	bcs.n	800690a <mem_trim+0x36>
    return NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	e0cc      	b.n	8006aa4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800690a:	4b68      	ldr	r3, [pc, #416]	; (8006aac <mem_trim+0x1d8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	429a      	cmp	r2, r3
 8006912:	d304      	bcc.n	800691e <mem_trim+0x4a>
 8006914:	4b66      	ldr	r3, [pc, #408]	; (8006ab0 <mem_trim+0x1dc>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	429a      	cmp	r2, r3
 800691c:	d306      	bcc.n	800692c <mem_trim+0x58>
 800691e:	4b65      	ldr	r3, [pc, #404]	; (8006ab4 <mem_trim+0x1e0>)
 8006920:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006924:	4964      	ldr	r1, [pc, #400]	; (8006ab8 <mem_trim+0x1e4>)
 8006926:	4865      	ldr	r0, [pc, #404]	; (8006abc <mem_trim+0x1e8>)
 8006928:	f00a f860 	bl	80109ec <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800692c:	4b5f      	ldr	r3, [pc, #380]	; (8006aac <mem_trim+0x1d8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	429a      	cmp	r2, r3
 8006934:	d304      	bcc.n	8006940 <mem_trim+0x6c>
 8006936:	4b5e      	ldr	r3, [pc, #376]	; (8006ab0 <mem_trim+0x1dc>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	429a      	cmp	r2, r3
 800693e:	d301      	bcc.n	8006944 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	e0af      	b.n	8006aa4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3b08      	subs	r3, #8
 8006948:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800694a:	69b8      	ldr	r0, [r7, #24]
 800694c:	f7ff fe2c 	bl	80065a8 <mem_to_ptr>
 8006950:	4603      	mov	r3, r0
 8006952:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	881a      	ldrh	r2, [r3, #0]
 8006958:	8afb      	ldrh	r3, [r7, #22]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	b29b      	uxth	r3, r3
 800695e:	3b08      	subs	r3, #8
 8006960:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006962:	8bfa      	ldrh	r2, [r7, #30]
 8006964:	8abb      	ldrh	r3, [r7, #20]
 8006966:	429a      	cmp	r2, r3
 8006968:	d906      	bls.n	8006978 <mem_trim+0xa4>
 800696a:	4b52      	ldr	r3, [pc, #328]	; (8006ab4 <mem_trim+0x1e0>)
 800696c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006970:	4953      	ldr	r1, [pc, #332]	; (8006ac0 <mem_trim+0x1ec>)
 8006972:	4852      	ldr	r0, [pc, #328]	; (8006abc <mem_trim+0x1e8>)
 8006974:	f00a f83a 	bl	80109ec <iprintf>
  if (newsize > size) {
 8006978:	8bfa      	ldrh	r2, [r7, #30]
 800697a:	8abb      	ldrh	r3, [r7, #20]
 800697c:	429a      	cmp	r2, r3
 800697e:	d901      	bls.n	8006984 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006980:	2300      	movs	r3, #0
 8006982:	e08f      	b.n	8006aa4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006984:	8bfa      	ldrh	r2, [r7, #30]
 8006986:	8abb      	ldrh	r3, [r7, #20]
 8006988:	429a      	cmp	r2, r3
 800698a:	d101      	bne.n	8006990 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	e089      	b.n	8006aa4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	4618      	mov	r0, r3
 8006996:	f7ff fdf5 	bl	8006584 <ptr_to_mem>
 800699a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	791b      	ldrb	r3, [r3, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d13f      	bne.n	8006a24 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80069ac:	d106      	bne.n	80069bc <mem_trim+0xe8>
 80069ae:	4b41      	ldr	r3, [pc, #260]	; (8006ab4 <mem_trim+0x1e0>)
 80069b0:	f240 22f5 	movw	r2, #757	; 0x2f5
 80069b4:	4943      	ldr	r1, [pc, #268]	; (8006ac4 <mem_trim+0x1f0>)
 80069b6:	4841      	ldr	r0, [pc, #260]	; (8006abc <mem_trim+0x1e8>)
 80069b8:	f00a f818 	bl	80109ec <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80069c2:	8afa      	ldrh	r2, [r7, #22]
 80069c4:	8bfb      	ldrh	r3, [r7, #30]
 80069c6:	4413      	add	r3, r2
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3308      	adds	r3, #8
 80069cc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80069ce:	4b3e      	ldr	r3, [pc, #248]	; (8006ac8 <mem_trim+0x1f4>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d106      	bne.n	80069e6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80069d8:	89fb      	ldrh	r3, [r7, #14]
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff fdd2 	bl	8006584 <ptr_to_mem>
 80069e0:	4603      	mov	r3, r0
 80069e2:	4a39      	ldr	r2, [pc, #228]	; (8006ac8 <mem_trim+0x1f4>)
 80069e4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80069e6:	89fb      	ldrh	r3, [r7, #14]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff fdcb 	bl	8006584 <ptr_to_mem>
 80069ee:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	2200      	movs	r2, #0
 80069f4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	89ba      	ldrh	r2, [r7, #12]
 80069fa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	8afa      	ldrh	r2, [r7, #22]
 8006a00:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	89fa      	ldrh	r2, [r7, #14]
 8006a06:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006a10:	d047      	beq.n	8006aa2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff fdb4 	bl	8006584 <ptr_to_mem>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	89fb      	ldrh	r3, [r7, #14]
 8006a20:	8053      	strh	r3, [r2, #2]
 8006a22:	e03e      	b.n	8006aa2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006a24:	8bfb      	ldrh	r3, [r7, #30]
 8006a26:	f103 0214 	add.w	r2, r3, #20
 8006a2a:	8abb      	ldrh	r3, [r7, #20]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d838      	bhi.n	8006aa2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006a30:	8afa      	ldrh	r2, [r7, #22]
 8006a32:	8bfb      	ldrh	r3, [r7, #30]
 8006a34:	4413      	add	r3, r2
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3308      	adds	r3, #8
 8006a3a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006a44:	d106      	bne.n	8006a54 <mem_trim+0x180>
 8006a46:	4b1b      	ldr	r3, [pc, #108]	; (8006ab4 <mem_trim+0x1e0>)
 8006a48:	f240 3216 	movw	r2, #790	; 0x316
 8006a4c:	491d      	ldr	r1, [pc, #116]	; (8006ac4 <mem_trim+0x1f0>)
 8006a4e:	481b      	ldr	r0, [pc, #108]	; (8006abc <mem_trim+0x1e8>)
 8006a50:	f009 ffcc 	bl	80109ec <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006a54:	89fb      	ldrh	r3, [r7, #14]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff fd94 	bl	8006584 <ptr_to_mem>
 8006a5c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006a5e:	4b1a      	ldr	r3, [pc, #104]	; (8006ac8 <mem_trim+0x1f4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d202      	bcs.n	8006a6e <mem_trim+0x19a>
      lfree = mem2;
 8006a68:	4a17      	ldr	r2, [pc, #92]	; (8006ac8 <mem_trim+0x1f4>)
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	2200      	movs	r2, #0
 8006a72:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	881a      	ldrh	r2, [r3, #0]
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	8afa      	ldrh	r2, [r7, #22]
 8006a80:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	89fa      	ldrh	r2, [r7, #14]
 8006a86:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006a90:	d007      	beq.n	8006aa2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff fd74 	bl	8006584 <ptr_to_mem>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	89fb      	ldrh	r3, [r7, #14]
 8006aa0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006aa2:	687b      	ldr	r3, [r7, #4]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3720      	adds	r7, #32
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	20000834 	.word	0x20000834
 8006ab0:	20000838 	.word	0x20000838
 8006ab4:	08012e18 	.word	0x08012e18
 8006ab8:	08012f88 	.word	0x08012f88
 8006abc:	08012e60 	.word	0x08012e60
 8006ac0:	08012fa0 	.word	0x08012fa0
 8006ac4:	08012fc0 	.word	0x08012fc0
 8006ac8:	2000083c 	.word	0x2000083c

08006acc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006ad6:	88fb      	ldrh	r3, [r7, #6]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <mem_malloc+0x14>
    return NULL;
 8006adc:	2300      	movs	r3, #0
 8006ade:	e0d9      	b.n	8006c94 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006ae0:	88fb      	ldrh	r3, [r7, #6]
 8006ae2:	3303      	adds	r3, #3
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	f023 0303 	bic.w	r3, r3, #3
 8006aea:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006aec:	8bbb      	ldrh	r3, [r7, #28]
 8006aee:	2b0b      	cmp	r3, #11
 8006af0:	d801      	bhi.n	8006af6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006af2:	230c      	movs	r3, #12
 8006af4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006af6:	8bbb      	ldrh	r3, [r7, #28]
 8006af8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006afc:	d803      	bhi.n	8006b06 <mem_malloc+0x3a>
 8006afe:	8bba      	ldrh	r2, [r7, #28]
 8006b00:	88fb      	ldrh	r3, [r7, #6]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d201      	bcs.n	8006b0a <mem_malloc+0x3e>
    return NULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	e0c4      	b.n	8006c94 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006b0a:	4b64      	ldr	r3, [pc, #400]	; (8006c9c <mem_malloc+0x1d0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff fd4a 	bl	80065a8 <mem_to_ptr>
 8006b14:	4603      	mov	r3, r0
 8006b16:	83fb      	strh	r3, [r7, #30]
 8006b18:	e0b4      	b.n	8006c84 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006b1a:	8bfb      	ldrh	r3, [r7, #30]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7ff fd31 	bl	8006584 <ptr_to_mem>
 8006b22:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	791b      	ldrb	r3, [r3, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f040 80a4 	bne.w	8006c76 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	8bfb      	ldrh	r3, [r7, #30]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	f1a3 0208 	sub.w	r2, r3, #8
 8006b3c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	f0c0 8099 	bcc.w	8006c76 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	8bfb      	ldrh	r3, [r7, #30]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	f1a3 0208 	sub.w	r2, r3, #8
 8006b52:	8bbb      	ldrh	r3, [r7, #28]
 8006b54:	3314      	adds	r3, #20
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d333      	bcc.n	8006bc2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006b5a:	8bfa      	ldrh	r2, [r7, #30]
 8006b5c:	8bbb      	ldrh	r3, [r7, #28]
 8006b5e:	4413      	add	r3, r2
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	3308      	adds	r3, #8
 8006b64:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006b66:	8a7b      	ldrh	r3, [r7, #18]
 8006b68:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006b6c:	d106      	bne.n	8006b7c <mem_malloc+0xb0>
 8006b6e:	4b4c      	ldr	r3, [pc, #304]	; (8006ca0 <mem_malloc+0x1d4>)
 8006b70:	f240 3287 	movw	r2, #903	; 0x387
 8006b74:	494b      	ldr	r1, [pc, #300]	; (8006ca4 <mem_malloc+0x1d8>)
 8006b76:	484c      	ldr	r0, [pc, #304]	; (8006ca8 <mem_malloc+0x1dc>)
 8006b78:	f009 ff38 	bl	80109ec <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006b7c:	8a7b      	ldrh	r3, [r7, #18]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff fd00 	bl	8006584 <ptr_to_mem>
 8006b84:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	881a      	ldrh	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8bfa      	ldrh	r2, [r7, #30]
 8006b98:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	8a7a      	ldrh	r2, [r7, #18]
 8006b9e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006bae:	d00b      	beq.n	8006bc8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff fce5 	bl	8006584 <ptr_to_mem>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	8a7b      	ldrh	r3, [r7, #18]
 8006bbe:	8053      	strh	r3, [r2, #2]
 8006bc0:	e002      	b.n	8006bc8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006bc8:	4b34      	ldr	r3, [pc, #208]	; (8006c9c <mem_malloc+0x1d0>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d127      	bne.n	8006c22 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006bd2:	4b32      	ldr	r3, [pc, #200]	; (8006c9c <mem_malloc+0x1d0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006bd8:	e005      	b.n	8006be6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff fcd0 	bl	8006584 <ptr_to_mem>
 8006be4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	791b      	ldrb	r3, [r3, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d004      	beq.n	8006bf8 <mem_malloc+0x12c>
 8006bee:	4b2f      	ldr	r3, [pc, #188]	; (8006cac <mem_malloc+0x1e0>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d1f0      	bne.n	8006bda <mem_malloc+0x10e>
          }
          lfree = cur;
 8006bf8:	4a28      	ldr	r2, [pc, #160]	; (8006c9c <mem_malloc+0x1d0>)
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006bfe:	4b27      	ldr	r3, [pc, #156]	; (8006c9c <mem_malloc+0x1d0>)
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4b2a      	ldr	r3, [pc, #168]	; (8006cac <mem_malloc+0x1e0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d00b      	beq.n	8006c22 <mem_malloc+0x156>
 8006c0a:	4b24      	ldr	r3, [pc, #144]	; (8006c9c <mem_malloc+0x1d0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	791b      	ldrb	r3, [r3, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d006      	beq.n	8006c22 <mem_malloc+0x156>
 8006c14:	4b22      	ldr	r3, [pc, #136]	; (8006ca0 <mem_malloc+0x1d4>)
 8006c16:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006c1a:	4925      	ldr	r1, [pc, #148]	; (8006cb0 <mem_malloc+0x1e4>)
 8006c1c:	4822      	ldr	r0, [pc, #136]	; (8006ca8 <mem_malloc+0x1dc>)
 8006c1e:	f009 fee5 	bl	80109ec <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006c22:	8bba      	ldrh	r2, [r7, #28]
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	4413      	add	r3, r2
 8006c28:	3308      	adds	r3, #8
 8006c2a:	4a20      	ldr	r2, [pc, #128]	; (8006cac <mem_malloc+0x1e0>)
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d906      	bls.n	8006c40 <mem_malloc+0x174>
 8006c32:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <mem_malloc+0x1d4>)
 8006c34:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006c38:	491e      	ldr	r1, [pc, #120]	; (8006cb4 <mem_malloc+0x1e8>)
 8006c3a:	481b      	ldr	r0, [pc, #108]	; (8006ca8 <mem_malloc+0x1dc>)
 8006c3c:	f009 fed6 	bl	80109ec <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f003 0303 	and.w	r3, r3, #3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d006      	beq.n	8006c58 <mem_malloc+0x18c>
 8006c4a:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <mem_malloc+0x1d4>)
 8006c4c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006c50:	4919      	ldr	r1, [pc, #100]	; (8006cb8 <mem_malloc+0x1ec>)
 8006c52:	4815      	ldr	r0, [pc, #84]	; (8006ca8 <mem_malloc+0x1dc>)
 8006c54:	f009 feca 	bl	80109ec <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f003 0303 	and.w	r3, r3, #3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d006      	beq.n	8006c70 <mem_malloc+0x1a4>
 8006c62:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <mem_malloc+0x1d4>)
 8006c64:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006c68:	4914      	ldr	r1, [pc, #80]	; (8006cbc <mem_malloc+0x1f0>)
 8006c6a:	480f      	ldr	r0, [pc, #60]	; (8006ca8 <mem_malloc+0x1dc>)
 8006c6c:	f009 febe 	bl	80109ec <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	3308      	adds	r3, #8
 8006c74:	e00e      	b.n	8006c94 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006c76:	8bfb      	ldrh	r3, [r7, #30]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff fc83 	bl	8006584 <ptr_to_mem>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006c84:	8bfa      	ldrh	r2, [r7, #30]
 8006c86:	8bbb      	ldrh	r3, [r7, #28]
 8006c88:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	f4ff af44 	bcc.w	8006b1a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3720      	adds	r7, #32
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	2000083c 	.word	0x2000083c
 8006ca0:	08012e18 	.word	0x08012e18
 8006ca4:	08012fc0 	.word	0x08012fc0
 8006ca8:	08012e60 	.word	0x08012e60
 8006cac:	20000838 	.word	0x20000838
 8006cb0:	08012fd4 	.word	0x08012fd4
 8006cb4:	08012ff0 	.word	0x08012ff0
 8006cb8:	08013020 	.word	0x08013020
 8006cbc:	08013050 	.word	0x08013050

08006cc0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	3303      	adds	r3, #3
 8006cd6:	f023 0303 	bic.w	r3, r3, #3
 8006cda:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006cdc:	2300      	movs	r3, #0
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	e011      	b.n	8006d06 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3301      	adds	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	885b      	ldrh	r3, [r3, #2]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	dbe7      	blt.n	8006ce2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006d12:	bf00      	nop
 8006d14:	bf00      	nop
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006d26:	2300      	movs	r3, #0
 8006d28:	80fb      	strh	r3, [r7, #6]
 8006d2a:	e009      	b.n	8006d40 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006d2c:	88fb      	ldrh	r3, [r7, #6]
 8006d2e:	4a08      	ldr	r2, [pc, #32]	; (8006d50 <memp_init+0x30>)
 8006d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7ff ffc3 	bl	8006cc0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006d3a:	88fb      	ldrh	r3, [r7, #6]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	80fb      	strh	r3, [r7, #6]
 8006d40:	88fb      	ldrh	r3, [r7, #6]
 8006d42:	2b08      	cmp	r3, #8
 8006d44:	d9f2      	bls.n	8006d2c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006d46:	bf00      	nop
 8006d48:	bf00      	nop
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	08016034 	.word	0x08016034

08006d54 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d012      	beq.n	8006d90 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	6812      	ldr	r2, [r2, #0]
 8006d72:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f003 0303 	and.w	r3, r3, #3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d006      	beq.n	8006d8c <do_memp_malloc_pool+0x38>
 8006d7e:	4b07      	ldr	r3, [pc, #28]	; (8006d9c <do_memp_malloc_pool+0x48>)
 8006d80:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006d84:	4906      	ldr	r1, [pc, #24]	; (8006da0 <do_memp_malloc_pool+0x4c>)
 8006d86:	4807      	ldr	r0, [pc, #28]	; (8006da4 <do_memp_malloc_pool+0x50>)
 8006d88:	f009 fe30 	bl	80109ec <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	e000      	b.n	8006d92 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	08013074 	.word	0x08013074
 8006da0:	080130a4 	.word	0x080130a4
 8006da4:	080130c8 	.word	0x080130c8

08006da8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d106      	bne.n	8006dc4 <memp_malloc_pool+0x1c>
 8006db6:	4b0a      	ldr	r3, [pc, #40]	; (8006de0 <memp_malloc_pool+0x38>)
 8006db8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8006dbc:	4909      	ldr	r1, [pc, #36]	; (8006de4 <memp_malloc_pool+0x3c>)
 8006dbe:	480a      	ldr	r0, [pc, #40]	; (8006de8 <memp_malloc_pool+0x40>)
 8006dc0:	f009 fe14 	bl	80109ec <iprintf>
  if (desc == NULL) {
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <memp_malloc_pool+0x26>
    return NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e003      	b.n	8006dd6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff ffc0 	bl	8006d54 <do_memp_malloc_pool>
 8006dd4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	08013074 	.word	0x08013074
 8006de4:	080130f0 	.word	0x080130f0
 8006de8:	080130c8 	.word	0x080130c8

08006dec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	4603      	mov	r3, r0
 8006df4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006df6:	79fb      	ldrb	r3, [r7, #7]
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d908      	bls.n	8006e0e <memp_malloc+0x22>
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	; (8006e28 <memp_malloc+0x3c>)
 8006dfe:	f240 1257 	movw	r2, #343	; 0x157
 8006e02:	490a      	ldr	r1, [pc, #40]	; (8006e2c <memp_malloc+0x40>)
 8006e04:	480a      	ldr	r0, [pc, #40]	; (8006e30 <memp_malloc+0x44>)
 8006e06:	f009 fdf1 	bl	80109ec <iprintf>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e008      	b.n	8006e20 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	4a08      	ldr	r2, [pc, #32]	; (8006e34 <memp_malloc+0x48>)
 8006e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff ff9c 	bl	8006d54 <do_memp_malloc_pool>
 8006e1c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	08013074 	.word	0x08013074
 8006e2c:	08013104 	.word	0x08013104
 8006e30:	080130c8 	.word	0x080130c8
 8006e34:	08016034 	.word	0x08016034

08006e38 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	f003 0303 	and.w	r3, r3, #3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d006      	beq.n	8006e5a <do_memp_free_pool+0x22>
 8006e4c:	4b0a      	ldr	r3, [pc, #40]	; (8006e78 <do_memp_free_pool+0x40>)
 8006e4e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006e52:	490a      	ldr	r1, [pc, #40]	; (8006e7c <do_memp_free_pool+0x44>)
 8006e54:	480a      	ldr	r0, [pc, #40]	; (8006e80 <do_memp_free_pool+0x48>)
 8006e56:	f009 fdc9 	bl	80109ec <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006e70:	bf00      	nop
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	08013074 	.word	0x08013074
 8006e7c:	08013124 	.word	0x08013124
 8006e80:	080130c8 	.word	0x080130c8

08006e84 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d106      	bne.n	8006ea2 <memp_free_pool+0x1e>
 8006e94:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <memp_free_pool+0x3c>)
 8006e96:	f240 1295 	movw	r2, #405	; 0x195
 8006e9a:	490a      	ldr	r1, [pc, #40]	; (8006ec4 <memp_free_pool+0x40>)
 8006e9c:	480a      	ldr	r0, [pc, #40]	; (8006ec8 <memp_free_pool+0x44>)
 8006e9e:	f009 fda5 	bl	80109ec <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d007      	beq.n	8006eb8 <memp_free_pool+0x34>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d004      	beq.n	8006eb8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7ff ffc1 	bl	8006e38 <do_memp_free_pool>
 8006eb6:	e000      	b.n	8006eba <memp_free_pool+0x36>
    return;
 8006eb8:	bf00      	nop
}
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	08013074 	.word	0x08013074
 8006ec4:	080130f0 	.word	0x080130f0
 8006ec8:	080130c8 	.word	0x080130c8

08006ecc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	6039      	str	r1, [r7, #0]
 8006ed6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	2b08      	cmp	r3, #8
 8006edc:	d907      	bls.n	8006eee <memp_free+0x22>
 8006ede:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <memp_free+0x44>)
 8006ee0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006ee4:	490b      	ldr	r1, [pc, #44]	; (8006f14 <memp_free+0x48>)
 8006ee6:	480c      	ldr	r0, [pc, #48]	; (8006f18 <memp_free+0x4c>)
 8006ee8:	f009 fd80 	bl	80109ec <iprintf>
 8006eec:	e00c      	b.n	8006f08 <memp_free+0x3c>

  if (mem == NULL) {
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d008      	beq.n	8006f06 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006ef4:	79fb      	ldrb	r3, [r7, #7]
 8006ef6:	4a09      	ldr	r2, [pc, #36]	; (8006f1c <memp_free+0x50>)
 8006ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff ff9a 	bl	8006e38 <do_memp_free_pool>
 8006f04:	e000      	b.n	8006f08 <memp_free+0x3c>
    return;
 8006f06:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	08013074 	.word	0x08013074
 8006f14:	08013144 	.word	0x08013144
 8006f18:	080130c8 	.word	0x080130c8
 8006f1c:	08016034 	.word	0x08016034

08006f20 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006f20:	b480      	push	{r7}
 8006f22:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006f24:	bf00      	nop
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d108      	bne.n	8006f56 <netif_add+0x26>
 8006f44:	4b57      	ldr	r3, [pc, #348]	; (80070a4 <netif_add+0x174>)
 8006f46:	f240 1227 	movw	r2, #295	; 0x127
 8006f4a:	4957      	ldr	r1, [pc, #348]	; (80070a8 <netif_add+0x178>)
 8006f4c:	4857      	ldr	r0, [pc, #348]	; (80070ac <netif_add+0x17c>)
 8006f4e:	f009 fd4d 	bl	80109ec <iprintf>
 8006f52:	2300      	movs	r3, #0
 8006f54:	e0a2      	b.n	800709c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d108      	bne.n	8006f6e <netif_add+0x3e>
 8006f5c:	4b51      	ldr	r3, [pc, #324]	; (80070a4 <netif_add+0x174>)
 8006f5e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006f62:	4953      	ldr	r1, [pc, #332]	; (80070b0 <netif_add+0x180>)
 8006f64:	4851      	ldr	r0, [pc, #324]	; (80070ac <netif_add+0x17c>)
 8006f66:	f009 fd41 	bl	80109ec <iprintf>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	e096      	b.n	800709c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006f74:	4b4f      	ldr	r3, [pc, #316]	; (80070b4 <netif_add+0x184>)
 8006f76:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006f7e:	4b4d      	ldr	r3, [pc, #308]	; (80070b4 <netif_add+0x184>)
 8006f80:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006f88:	4b4a      	ldr	r3, [pc, #296]	; (80070b4 <netif_add+0x184>)
 8006f8a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4a45      	ldr	r2, [pc, #276]	; (80070b8 <netif_add+0x188>)
 8006fa2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6a3a      	ldr	r2, [r7, #32]
 8006fbc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006fbe:	4b3f      	ldr	r3, [pc, #252]	; (80070bc <netif_add+0x18c>)
 8006fc0:	781a      	ldrb	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fcc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	68b9      	ldr	r1, [r7, #8]
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 f913 	bl	8007200 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	4798      	blx	r3
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <netif_add+0xba>
    return NULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e058      	b.n	800709c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ff0:	2bff      	cmp	r3, #255	; 0xff
 8006ff2:	d103      	bne.n	8006ffc <netif_add+0xcc>
        netif->num = 0;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007000:	4b2f      	ldr	r3, [pc, #188]	; (80070c0 <netif_add+0x190>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	617b      	str	r3, [r7, #20]
 8007006:	e02b      	b.n	8007060 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	429a      	cmp	r2, r3
 800700e:	d106      	bne.n	800701e <netif_add+0xee>
 8007010:	4b24      	ldr	r3, [pc, #144]	; (80070a4 <netif_add+0x174>)
 8007012:	f240 128b 	movw	r2, #395	; 0x18b
 8007016:	492b      	ldr	r1, [pc, #172]	; (80070c4 <netif_add+0x194>)
 8007018:	4824      	ldr	r0, [pc, #144]	; (80070ac <netif_add+0x17c>)
 800701a:	f009 fce7 	bl	80109ec <iprintf>
        num_netifs++;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	3301      	adds	r3, #1
 8007022:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	2bff      	cmp	r3, #255	; 0xff
 8007028:	dd06      	ble.n	8007038 <netif_add+0x108>
 800702a:	4b1e      	ldr	r3, [pc, #120]	; (80070a4 <netif_add+0x174>)
 800702c:	f240 128d 	movw	r2, #397	; 0x18d
 8007030:	4925      	ldr	r1, [pc, #148]	; (80070c8 <netif_add+0x198>)
 8007032:	481e      	ldr	r0, [pc, #120]	; (80070ac <netif_add+0x17c>)
 8007034:	f009 fcda 	bl	80109ec <iprintf>
        if (netif2->num == netif->num) {
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007044:	429a      	cmp	r2, r3
 8007046:	d108      	bne.n	800705a <netif_add+0x12a>
          netif->num++;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800704e:	3301      	adds	r3, #1
 8007050:	b2da      	uxtb	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007058:	e005      	b.n	8007066 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1d0      	bne.n	8007008 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1be      	bne.n	8006fea <netif_add+0xba>
  }
  if (netif->num == 254) {
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007072:	2bfe      	cmp	r3, #254	; 0xfe
 8007074:	d103      	bne.n	800707e <netif_add+0x14e>
    netif_num = 0;
 8007076:	4b11      	ldr	r3, [pc, #68]	; (80070bc <netif_add+0x18c>)
 8007078:	2200      	movs	r2, #0
 800707a:	701a      	strb	r2, [r3, #0]
 800707c:	e006      	b.n	800708c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007084:	3301      	adds	r3, #1
 8007086:	b2da      	uxtb	r2, r3
 8007088:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <netif_add+0x18c>)
 800708a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800708c:	4b0c      	ldr	r3, [pc, #48]	; (80070c0 <netif_add+0x190>)
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007094:	4a0a      	ldr	r2, [pc, #40]	; (80070c0 <netif_add+0x190>)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800709a:	68fb      	ldr	r3, [r7, #12]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	08013160 	.word	0x08013160
 80070a8:	080131f4 	.word	0x080131f4
 80070ac:	080131b0 	.word	0x080131b0
 80070b0:	08013210 	.word	0x08013210
 80070b4:	08016098 	.word	0x08016098
 80070b8:	080074db 	.word	0x080074db
 80070bc:	20000864 	.word	0x20000864
 80070c0:	2000add0 	.word	0x2000add0
 80070c4:	08013234 	.word	0x08013234
 80070c8:	08013248 	.word	0x08013248

080070cc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f002 fb43 	bl	8009764 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f006 fc27 	bl	800d934 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d106      	bne.n	8007110 <netif_do_set_ipaddr+0x20>
 8007102:	4b1d      	ldr	r3, [pc, #116]	; (8007178 <netif_do_set_ipaddr+0x88>)
 8007104:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007108:	491c      	ldr	r1, [pc, #112]	; (800717c <netif_do_set_ipaddr+0x8c>)
 800710a:	481d      	ldr	r0, [pc, #116]	; (8007180 <netif_do_set_ipaddr+0x90>)
 800710c:	f009 fc6e 	bl	80109ec <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d106      	bne.n	8007124 <netif_do_set_ipaddr+0x34>
 8007116:	4b18      	ldr	r3, [pc, #96]	; (8007178 <netif_do_set_ipaddr+0x88>)
 8007118:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800711c:	4917      	ldr	r1, [pc, #92]	; (800717c <netif_do_set_ipaddr+0x8c>)
 800711e:	4818      	ldr	r0, [pc, #96]	; (8007180 <netif_do_set_ipaddr+0x90>)
 8007120:	f009 fc64 	bl	80109ec <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3304      	adds	r3, #4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	429a      	cmp	r2, r3
 8007130:	d01c      	beq.n	800716c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3304      	adds	r3, #4
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007142:	f107 0314 	add.w	r3, r7, #20
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff ffbf 	bl	80070cc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <netif_do_set_ipaddr+0x6a>
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	e000      	b.n	800715c <netif_do_set_ipaddr+0x6c>
 800715a:	2300      	movs	r3, #0
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007160:	2101      	movs	r1, #1
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 f8d2 	bl	800730c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007168:	2301      	movs	r3, #1
 800716a:	e000      	b.n	800716e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	08013160 	.word	0x08013160
 800717c:	08013278 	.word	0x08013278
 8007180:	080131b0 	.word	0x080131b0

08007184 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	3308      	adds	r3, #8
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d00a      	beq.n	80071b4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <netif_do_set_netmask+0x26>
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	e000      	b.n	80071ac <netif_do_set_netmask+0x28>
 80071aa:	2300      	movs	r3, #0
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80071b0:	2301      	movs	r3, #1
 80071b2:	e000      	b.n	80071b6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b085      	sub	sp, #20
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	330c      	adds	r3, #12
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d00a      	beq.n	80071f2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <netif_do_set_gw+0x26>
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	e000      	b.n	80071ea <netif_do_set_gw+0x28>
 80071e8:	2300      	movs	r3, #0
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80071ee:	2301      	movs	r3, #1
 80071f0:	e000      	b.n	80071f4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b088      	sub	sp, #32
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800720e:	2300      	movs	r3, #0
 8007210:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007212:	2300      	movs	r3, #0
 8007214:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800721c:	4b1c      	ldr	r3, [pc, #112]	; (8007290 <netif_set_addr+0x90>)
 800721e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007226:	4b1a      	ldr	r3, [pc, #104]	; (8007290 <netif_set_addr+0x90>)
 8007228:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007230:	4b17      	ldr	r3, [pc, #92]	; (8007290 <netif_set_addr+0x90>)
 8007232:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <netif_set_addr+0x42>
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <netif_set_addr+0x46>
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <netif_set_addr+0x48>
 8007246:	2300      	movs	r3, #0
 8007248:	617b      	str	r3, [r7, #20]
  if (remove) {
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d006      	beq.n	800725e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007250:	f107 0310 	add.w	r3, r7, #16
 8007254:	461a      	mov	r2, r3
 8007256:	68b9      	ldr	r1, [r7, #8]
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f7ff ff49 	bl	80070f0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	6879      	ldr	r1, [r7, #4]
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f7ff ff8e 	bl	8007184 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f7ff ffa8 	bl	80071c2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d106      	bne.n	8007286 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007278:	f107 0310 	add.w	r3, r7, #16
 800727c:	461a      	mov	r2, r3
 800727e:	68b9      	ldr	r1, [r7, #8]
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f7ff ff35 	bl	80070f0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007286:	bf00      	nop
 8007288:	3720      	adds	r7, #32
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	08016098 	.word	0x08016098

08007294 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800729c:	4a04      	ldr	r2, [pc, #16]	; (80072b0 <netif_set_default+0x1c>)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80072a2:	bf00      	nop
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	2000add4 	.word	0x2000add4

080072b4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d107      	bne.n	80072d2 <netif_set_up+0x1e>
 80072c2:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <netif_set_up+0x4c>)
 80072c4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80072c8:	490e      	ldr	r1, [pc, #56]	; (8007304 <netif_set_up+0x50>)
 80072ca:	480f      	ldr	r0, [pc, #60]	; (8007308 <netif_set_up+0x54>)
 80072cc:	f009 fb8e 	bl	80109ec <iprintf>
 80072d0:	e013      	b.n	80072fa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10c      	bne.n	80072fa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072e6:	f043 0301 	orr.w	r3, r3, #1
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80072f2:	2103      	movs	r1, #3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f809 	bl	800730c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	08013160 	.word	0x08013160
 8007304:	080132e8 	.word	0x080132e8
 8007308:	080131b0 	.word	0x080131b0

0800730c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d106      	bne.n	800732c <netif_issue_reports+0x20>
 800731e:	4b18      	ldr	r3, [pc, #96]	; (8007380 <netif_issue_reports+0x74>)
 8007320:	f240 326d 	movw	r2, #877	; 0x36d
 8007324:	4917      	ldr	r1, [pc, #92]	; (8007384 <netif_issue_reports+0x78>)
 8007326:	4818      	ldr	r0, [pc, #96]	; (8007388 <netif_issue_reports+0x7c>)
 8007328:	f009 fb60 	bl	80109ec <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	2b00      	cmp	r3, #0
 8007338:	d01e      	beq.n	8007378 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007340:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007344:	2b00      	cmp	r3, #0
 8007346:	d017      	beq.n	8007378 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007348:	78fb      	ldrb	r3, [r7, #3]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d013      	beq.n	800737a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	3304      	adds	r3, #4
 8007356:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00e      	beq.n	800737a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007362:	f003 0308 	and.w	r3, r3, #8
 8007366:	2b00      	cmp	r3, #0
 8007368:	d007      	beq.n	800737a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	3304      	adds	r3, #4
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f007 fa49 	bl	800e808 <etharp_request>
 8007376:	e000      	b.n	800737a <netif_issue_reports+0x6e>
    return;
 8007378:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	08013160 	.word	0x08013160
 8007384:	08013304 	.word	0x08013304
 8007388:	080131b0 	.word	0x080131b0

0800738c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d107      	bne.n	80073aa <netif_set_down+0x1e>
 800739a:	4b12      	ldr	r3, [pc, #72]	; (80073e4 <netif_set_down+0x58>)
 800739c:	f240 329b 	movw	r2, #923	; 0x39b
 80073a0:	4911      	ldr	r1, [pc, #68]	; (80073e8 <netif_set_down+0x5c>)
 80073a2:	4812      	ldr	r0, [pc, #72]	; (80073ec <netif_set_down+0x60>)
 80073a4:	f009 fb22 	bl	80109ec <iprintf>
 80073a8:	e019      	b.n	80073de <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d012      	beq.n	80073de <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80073be:	f023 0301 	bic.w	r3, r3, #1
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80073d0:	f003 0308 	and.w	r3, r3, #8
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f006 fdd3 	bl	800df84 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	08013160 	.word	0x08013160
 80073e8:	08013328 	.word	0x08013328
 80073ec:	080131b0 	.word	0x080131b0

080073f0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d107      	bne.n	800740e <netif_set_link_up+0x1e>
 80073fe:	4b13      	ldr	r3, [pc, #76]	; (800744c <netif_set_link_up+0x5c>)
 8007400:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8007404:	4912      	ldr	r1, [pc, #72]	; (8007450 <netif_set_link_up+0x60>)
 8007406:	4813      	ldr	r0, [pc, #76]	; (8007454 <netif_set_link_up+0x64>)
 8007408:	f009 faf0 	bl	80109ec <iprintf>
 800740c:	e01b      	b.n	8007446 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b00      	cmp	r3, #0
 800741a:	d114      	bne.n	8007446 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007422:	f043 0304 	orr.w	r3, r3, #4
 8007426:	b2da      	uxtb	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800742e:	2103      	movs	r1, #3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff ff6b 	bl	800730c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <netif_set_link_up+0x56>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	08013160 	.word	0x08013160
 8007450:	08013348 	.word	0x08013348
 8007454:	080131b0 	.word	0x080131b0

08007458 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d107      	bne.n	8007476 <netif_set_link_down+0x1e>
 8007466:	4b11      	ldr	r3, [pc, #68]	; (80074ac <netif_set_link_down+0x54>)
 8007468:	f240 4206 	movw	r2, #1030	; 0x406
 800746c:	4910      	ldr	r1, [pc, #64]	; (80074b0 <netif_set_link_down+0x58>)
 800746e:	4811      	ldr	r0, [pc, #68]	; (80074b4 <netif_set_link_down+0x5c>)
 8007470:	f009 fabc 	bl	80109ec <iprintf>
 8007474:	e017      	b.n	80074a6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800747c:	f003 0304 	and.w	r3, r3, #4
 8007480:	2b00      	cmp	r3, #0
 8007482:	d010      	beq.n	80074a6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800748a:	f023 0304 	bic.w	r3, r3, #4
 800748e:	b2da      	uxtb	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <netif_set_link_down+0x4e>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	08013160 	.word	0x08013160
 80074b0:	0801336c 	.word	0x0801336c
 80074b4:	080131b0 	.word	0x080131b0

080074b8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	61da      	str	r2, [r3, #28]
  }
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80074da:	b480      	push	{r7}
 80074dc:	b085      	sub	sp, #20
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80074e6:	f06f 030b 	mvn.w	r3, #11
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
	...

080074f8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	4603      	mov	r3, r0
 8007500:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d013      	beq.n	8007530 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007508:	4b0d      	ldr	r3, [pc, #52]	; (8007540 <netif_get_by_index+0x48>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	e00c      	b.n	800752a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007516:	3301      	adds	r3, #1
 8007518:	b2db      	uxtb	r3, r3
 800751a:	79fa      	ldrb	r2, [r7, #7]
 800751c:	429a      	cmp	r2, r3
 800751e:	d101      	bne.n	8007524 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	e006      	b.n	8007532 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	60fb      	str	r3, [r7, #12]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1ef      	bne.n	8007510 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	2000add0 	.word	0x2000add0

08007544 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800754a:	4b0c      	ldr	r3, [pc, #48]	; (800757c <pbuf_free_ooseq+0x38>)
 800754c:	2200      	movs	r2, #0
 800754e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007550:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <pbuf_free_ooseq+0x3c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	e00a      	b.n	800756e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f002 f93d 	bl	80097e0 <tcp_free_ooseq>
      return;
 8007566:	e005      	b.n	8007574 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	607b      	str	r3, [r7, #4]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1f1      	bne.n	8007558 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	2000add8 	.word	0x2000add8
 8007580:	2000ade0 	.word	0x2000ade0

08007584 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007584:	b480      	push	{r7}
 8007586:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007588:	4b03      	ldr	r3, [pc, #12]	; (8007598 <pbuf_pool_is_empty+0x14>)
 800758a:	2201      	movs	r2, #1
 800758c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800758e:	bf00      	nop
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr
 8007598:	2000add8 	.word	0x2000add8

0800759c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	4611      	mov	r1, r2
 80075a8:	461a      	mov	r2, r3
 80075aa:	460b      	mov	r3, r1
 80075ac:	80fb      	strh	r3, [r7, #6]
 80075ae:	4613      	mov	r3, r2
 80075b0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	88fa      	ldrh	r2, [r7, #6]
 80075c2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	88ba      	ldrh	r2, [r7, #4]
 80075c8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80075ca:	8b3b      	ldrh	r3, [r7, #24]
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	7f3a      	ldrb	r2, [r7, #28]
 80075d6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2201      	movs	r2, #1
 80075dc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	73da      	strb	r2, [r3, #15]
}
 80075e4:	bf00      	nop
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08c      	sub	sp, #48	; 0x30
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	4603      	mov	r3, r0
 80075f8:	71fb      	strb	r3, [r7, #7]
 80075fa:	460b      	mov	r3, r1
 80075fc:	80bb      	strh	r3, [r7, #4]
 80075fe:	4613      	mov	r3, r2
 8007600:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007602:	79fb      	ldrb	r3, [r7, #7]
 8007604:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007606:	887b      	ldrh	r3, [r7, #2]
 8007608:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800760c:	d07f      	beq.n	800770e <pbuf_alloc+0x11e>
 800760e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007612:	f300 80c8 	bgt.w	80077a6 <pbuf_alloc+0x1b6>
 8007616:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800761a:	d010      	beq.n	800763e <pbuf_alloc+0x4e>
 800761c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007620:	f300 80c1 	bgt.w	80077a6 <pbuf_alloc+0x1b6>
 8007624:	2b01      	cmp	r3, #1
 8007626:	d002      	beq.n	800762e <pbuf_alloc+0x3e>
 8007628:	2b41      	cmp	r3, #65	; 0x41
 800762a:	f040 80bc 	bne.w	80077a6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800762e:	887a      	ldrh	r2, [r7, #2]
 8007630:	88bb      	ldrh	r3, [r7, #4]
 8007632:	4619      	mov	r1, r3
 8007634:	2000      	movs	r0, #0
 8007636:	f000 f8d1 	bl	80077dc <pbuf_alloc_reference>
 800763a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800763c:	e0bd      	b.n	80077ba <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800763e:	2300      	movs	r3, #0
 8007640:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8007642:	2300      	movs	r3, #0
 8007644:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007646:	88bb      	ldrh	r3, [r7, #4]
 8007648:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800764a:	2008      	movs	r0, #8
 800764c:	f7ff fbce 	bl	8006dec <memp_malloc>
 8007650:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d109      	bne.n	800766c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007658:	f7ff ff94 	bl	8007584 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <pbuf_alloc+0x78>
            pbuf_free(p);
 8007662:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007664:	f000 faa8 	bl	8007bb8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007668:	2300      	movs	r3, #0
 800766a:	e0a7      	b.n	80077bc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800766c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800766e:	3303      	adds	r3, #3
 8007670:	b29b      	uxth	r3, r3
 8007672:	f023 0303 	bic.w	r3, r3, #3
 8007676:	b29b      	uxth	r3, r3
 8007678:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800767c:	b29b      	uxth	r3, r3
 800767e:	8b7a      	ldrh	r2, [r7, #26]
 8007680:	4293      	cmp	r3, r2
 8007682:	bf28      	it	cs
 8007684:	4613      	movcs	r3, r2
 8007686:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007688:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800768a:	3310      	adds	r3, #16
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	4413      	add	r3, r2
 8007690:	3303      	adds	r3, #3
 8007692:	f023 0303 	bic.w	r3, r3, #3
 8007696:	4618      	mov	r0, r3
 8007698:	89f9      	ldrh	r1, [r7, #14]
 800769a:	8b7a      	ldrh	r2, [r7, #26]
 800769c:	2300      	movs	r3, #0
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	887b      	ldrh	r3, [r7, #2]
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	460b      	mov	r3, r1
 80076a6:	4601      	mov	r1, r0
 80076a8:	6938      	ldr	r0, [r7, #16]
 80076aa:	f7ff ff77 	bl	800759c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d006      	beq.n	80076c8 <pbuf_alloc+0xd8>
 80076ba:	4b42      	ldr	r3, [pc, #264]	; (80077c4 <pbuf_alloc+0x1d4>)
 80076bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076c0:	4941      	ldr	r1, [pc, #260]	; (80077c8 <pbuf_alloc+0x1d8>)
 80076c2:	4842      	ldr	r0, [pc, #264]	; (80077cc <pbuf_alloc+0x1dc>)
 80076c4:	f009 f992 	bl	80109ec <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80076c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076ca:	3303      	adds	r3, #3
 80076cc:	f023 0303 	bic.w	r3, r3, #3
 80076d0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80076d4:	d106      	bne.n	80076e4 <pbuf_alloc+0xf4>
 80076d6:	4b3b      	ldr	r3, [pc, #236]	; (80077c4 <pbuf_alloc+0x1d4>)
 80076d8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80076dc:	493c      	ldr	r1, [pc, #240]	; (80077d0 <pbuf_alloc+0x1e0>)
 80076de:	483b      	ldr	r0, [pc, #236]	; (80077cc <pbuf_alloc+0x1dc>)
 80076e0:	f009 f984 	bl	80109ec <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d102      	bne.n	80076f0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	627b      	str	r3, [r7, #36]	; 0x24
 80076ee:	e002      	b.n	80076f6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80076fa:	8b7a      	ldrh	r2, [r7, #26]
 80076fc:	89fb      	ldrh	r3, [r7, #14]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8007706:	8b7b      	ldrh	r3, [r7, #26]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d19e      	bne.n	800764a <pbuf_alloc+0x5a>
      break;
 800770c:	e055      	b.n	80077ba <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800770e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007710:	3303      	adds	r3, #3
 8007712:	b29b      	uxth	r3, r3
 8007714:	f023 0303 	bic.w	r3, r3, #3
 8007718:	b29a      	uxth	r2, r3
 800771a:	88bb      	ldrh	r3, [r7, #4]
 800771c:	3303      	adds	r3, #3
 800771e:	b29b      	uxth	r3, r3
 8007720:	f023 0303 	bic.w	r3, r3, #3
 8007724:	b29b      	uxth	r3, r3
 8007726:	4413      	add	r3, r2
 8007728:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800772a:	8b3b      	ldrh	r3, [r7, #24]
 800772c:	3310      	adds	r3, #16
 800772e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007730:	8b3a      	ldrh	r2, [r7, #24]
 8007732:	88bb      	ldrh	r3, [r7, #4]
 8007734:	3303      	adds	r3, #3
 8007736:	f023 0303 	bic.w	r3, r3, #3
 800773a:	429a      	cmp	r2, r3
 800773c:	d306      	bcc.n	800774c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800773e:	8afa      	ldrh	r2, [r7, #22]
 8007740:	88bb      	ldrh	r3, [r7, #4]
 8007742:	3303      	adds	r3, #3
 8007744:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007748:	429a      	cmp	r2, r3
 800774a:	d201      	bcs.n	8007750 <pbuf_alloc+0x160>
        return NULL;
 800774c:	2300      	movs	r3, #0
 800774e:	e035      	b.n	80077bc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007750:	8afb      	ldrh	r3, [r7, #22]
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff f9ba 	bl	8006acc <mem_malloc>
 8007758:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <pbuf_alloc+0x174>
        return NULL;
 8007760:	2300      	movs	r3, #0
 8007762:	e02b      	b.n	80077bc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007764:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007766:	3310      	adds	r3, #16
 8007768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776a:	4413      	add	r3, r2
 800776c:	3303      	adds	r3, #3
 800776e:	f023 0303 	bic.w	r3, r3, #3
 8007772:	4618      	mov	r0, r3
 8007774:	88b9      	ldrh	r1, [r7, #4]
 8007776:	88ba      	ldrh	r2, [r7, #4]
 8007778:	2300      	movs	r3, #0
 800777a:	9301      	str	r3, [sp, #4]
 800777c:	887b      	ldrh	r3, [r7, #2]
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	460b      	mov	r3, r1
 8007782:	4601      	mov	r1, r0
 8007784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007786:	f7ff ff09 	bl	800759c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d010      	beq.n	80077b8 <pbuf_alloc+0x1c8>
 8007796:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <pbuf_alloc+0x1d4>)
 8007798:	f44f 7291 	mov.w	r2, #290	; 0x122
 800779c:	490d      	ldr	r1, [pc, #52]	; (80077d4 <pbuf_alloc+0x1e4>)
 800779e:	480b      	ldr	r0, [pc, #44]	; (80077cc <pbuf_alloc+0x1dc>)
 80077a0:	f009 f924 	bl	80109ec <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80077a4:	e008      	b.n	80077b8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80077a6:	4b07      	ldr	r3, [pc, #28]	; (80077c4 <pbuf_alloc+0x1d4>)
 80077a8:	f240 1227 	movw	r2, #295	; 0x127
 80077ac:	490a      	ldr	r1, [pc, #40]	; (80077d8 <pbuf_alloc+0x1e8>)
 80077ae:	4807      	ldr	r0, [pc, #28]	; (80077cc <pbuf_alloc+0x1dc>)
 80077b0:	f009 f91c 	bl	80109ec <iprintf>
      return NULL;
 80077b4:	2300      	movs	r3, #0
 80077b6:	e001      	b.n	80077bc <pbuf_alloc+0x1cc>
      break;
 80077b8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3728      	adds	r7, #40	; 0x28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	08013390 	.word	0x08013390
 80077c8:	080133c0 	.word	0x080133c0
 80077cc:	080133f0 	.word	0x080133f0
 80077d0:	08013418 	.word	0x08013418
 80077d4:	0801344c 	.word	0x0801344c
 80077d8:	08013478 	.word	0x08013478

080077dc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af02      	add	r7, sp, #8
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	807b      	strh	r3, [r7, #2]
 80077e8:	4613      	mov	r3, r2
 80077ea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80077ec:	883b      	ldrh	r3, [r7, #0]
 80077ee:	2b41      	cmp	r3, #65	; 0x41
 80077f0:	d009      	beq.n	8007806 <pbuf_alloc_reference+0x2a>
 80077f2:	883b      	ldrh	r3, [r7, #0]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d006      	beq.n	8007806 <pbuf_alloc_reference+0x2a>
 80077f8:	4b0f      	ldr	r3, [pc, #60]	; (8007838 <pbuf_alloc_reference+0x5c>)
 80077fa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80077fe:	490f      	ldr	r1, [pc, #60]	; (800783c <pbuf_alloc_reference+0x60>)
 8007800:	480f      	ldr	r0, [pc, #60]	; (8007840 <pbuf_alloc_reference+0x64>)
 8007802:	f009 f8f3 	bl	80109ec <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007806:	2007      	movs	r0, #7
 8007808:	f7ff faf0 	bl	8006dec <memp_malloc>
 800780c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007814:	2300      	movs	r3, #0
 8007816:	e00b      	b.n	8007830 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007818:	8879      	ldrh	r1, [r7, #2]
 800781a:	887a      	ldrh	r2, [r7, #2]
 800781c:	2300      	movs	r3, #0
 800781e:	9301      	str	r3, [sp, #4]
 8007820:	883b      	ldrh	r3, [r7, #0]
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	460b      	mov	r3, r1
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7ff feb7 	bl	800759c <pbuf_init_alloced_pbuf>
  return p;
 800782e:	68fb      	ldr	r3, [r7, #12]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	08013390 	.word	0x08013390
 800783c:	08013494 	.word	0x08013494
 8007840:	080133f0 	.word	0x080133f0

08007844 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af02      	add	r7, sp, #8
 800784a:	607b      	str	r3, [r7, #4]
 800784c:	4603      	mov	r3, r0
 800784e:	73fb      	strb	r3, [r7, #15]
 8007850:	460b      	mov	r3, r1
 8007852:	81bb      	strh	r3, [r7, #12]
 8007854:	4613      	mov	r3, r2
 8007856:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800785c:	8a7b      	ldrh	r3, [r7, #18]
 800785e:	3303      	adds	r3, #3
 8007860:	f023 0203 	bic.w	r2, r3, #3
 8007864:	89bb      	ldrh	r3, [r7, #12]
 8007866:	441a      	add	r2, r3
 8007868:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800786a:	429a      	cmp	r2, r3
 800786c:	d901      	bls.n	8007872 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800786e:	2300      	movs	r3, #0
 8007870:	e018      	b.n	80078a4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d007      	beq.n	8007888 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007878:	8a7b      	ldrh	r3, [r7, #18]
 800787a:	3303      	adds	r3, #3
 800787c:	f023 0303 	bic.w	r3, r3, #3
 8007880:	6a3a      	ldr	r2, [r7, #32]
 8007882:	4413      	add	r3, r2
 8007884:	617b      	str	r3, [r7, #20]
 8007886:	e001      	b.n	800788c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007888:	2300      	movs	r3, #0
 800788a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	89b9      	ldrh	r1, [r7, #12]
 8007890:	89ba      	ldrh	r2, [r7, #12]
 8007892:	2302      	movs	r3, #2
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	897b      	ldrh	r3, [r7, #10]
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	460b      	mov	r3, r1
 800789c:	6979      	ldr	r1, [r7, #20]
 800789e:	f7ff fe7d 	bl	800759c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80078a2:	687b      	ldr	r3, [r7, #4]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	460b      	mov	r3, r1
 80078b6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d106      	bne.n	80078cc <pbuf_realloc+0x20>
 80078be:	4b3a      	ldr	r3, [pc, #232]	; (80079a8 <pbuf_realloc+0xfc>)
 80078c0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80078c4:	4939      	ldr	r1, [pc, #228]	; (80079ac <pbuf_realloc+0x100>)
 80078c6:	483a      	ldr	r0, [pc, #232]	; (80079b0 <pbuf_realloc+0x104>)
 80078c8:	f009 f890 	bl	80109ec <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	891b      	ldrh	r3, [r3, #8]
 80078d0:	887a      	ldrh	r2, [r7, #2]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d263      	bcs.n	800799e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	891a      	ldrh	r2, [r3, #8]
 80078da:	887b      	ldrh	r3, [r7, #2]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80078e0:	887b      	ldrh	r3, [r7, #2]
 80078e2:	817b      	strh	r3, [r7, #10]
  q = p;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80078e8:	e018      	b.n	800791c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	895b      	ldrh	r3, [r3, #10]
 80078ee:	897a      	ldrh	r2, [r7, #10]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	891a      	ldrh	r2, [r3, #8]
 80078f8:	893b      	ldrh	r3, [r7, #8]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d106      	bne.n	800791c <pbuf_realloc+0x70>
 800790e:	4b26      	ldr	r3, [pc, #152]	; (80079a8 <pbuf_realloc+0xfc>)
 8007910:	f240 12af 	movw	r2, #431	; 0x1af
 8007914:	4927      	ldr	r1, [pc, #156]	; (80079b4 <pbuf_realloc+0x108>)
 8007916:	4826      	ldr	r0, [pc, #152]	; (80079b0 <pbuf_realloc+0x104>)
 8007918:	f009 f868 	bl	80109ec <iprintf>
  while (rem_len > q->len) {
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	895b      	ldrh	r3, [r3, #10]
 8007920:	897a      	ldrh	r2, [r7, #10]
 8007922:	429a      	cmp	r2, r3
 8007924:	d8e1      	bhi.n	80078ea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	7b1b      	ldrb	r3, [r3, #12]
 800792a:	f003 030f 	and.w	r3, r3, #15
 800792e:	2b00      	cmp	r3, #0
 8007930:	d121      	bne.n	8007976 <pbuf_realloc+0xca>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	895b      	ldrh	r3, [r3, #10]
 8007936:	897a      	ldrh	r2, [r7, #10]
 8007938:	429a      	cmp	r2, r3
 800793a:	d01c      	beq.n	8007976 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	7b5b      	ldrb	r3, [r3, #13]
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	2b00      	cmp	r3, #0
 8007946:	d116      	bne.n	8007976 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	b29a      	uxth	r2, r3
 8007952:	897b      	ldrh	r3, [r7, #10]
 8007954:	4413      	add	r3, r2
 8007956:	b29b      	uxth	r3, r3
 8007958:	4619      	mov	r1, r3
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f7fe ffba 	bl	80068d4 <mem_trim>
 8007960:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d106      	bne.n	8007976 <pbuf_realloc+0xca>
 8007968:	4b0f      	ldr	r3, [pc, #60]	; (80079a8 <pbuf_realloc+0xfc>)
 800796a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800796e:	4912      	ldr	r1, [pc, #72]	; (80079b8 <pbuf_realloc+0x10c>)
 8007970:	480f      	ldr	r0, [pc, #60]	; (80079b0 <pbuf_realloc+0x104>)
 8007972:	f009 f83b 	bl	80109ec <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	897a      	ldrh	r2, [r7, #10]
 800797a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	895a      	ldrh	r2, [r3, #10]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4618      	mov	r0, r3
 8007992:	f000 f911 	bl	8007bb8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	e000      	b.n	80079a0 <pbuf_realloc+0xf4>
    return;
 800799e:	bf00      	nop

}
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	08013390 	.word	0x08013390
 80079ac:	080134a8 	.word	0x080134a8
 80079b0:	080133f0 	.word	0x080133f0
 80079b4:	080134c0 	.word	0x080134c0
 80079b8:	080134d8 	.word	0x080134d8

080079bc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	4613      	mov	r3, r2
 80079c8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d106      	bne.n	80079de <pbuf_add_header_impl+0x22>
 80079d0:	4b2b      	ldr	r3, [pc, #172]	; (8007a80 <pbuf_add_header_impl+0xc4>)
 80079d2:	f240 12df 	movw	r2, #479	; 0x1df
 80079d6:	492b      	ldr	r1, [pc, #172]	; (8007a84 <pbuf_add_header_impl+0xc8>)
 80079d8:	482b      	ldr	r0, [pc, #172]	; (8007a88 <pbuf_add_header_impl+0xcc>)
 80079da:	f009 f807 	bl	80109ec <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <pbuf_add_header_impl+0x30>
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ea:	d301      	bcc.n	80079f0 <pbuf_add_header_impl+0x34>
    return 1;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e043      	b.n	8007a78 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <pbuf_add_header_impl+0x3e>
    return 0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	e03e      	b.n	8007a78 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	891a      	ldrh	r2, [r3, #8]
 8007a02:	8a7b      	ldrh	r3, [r7, #18]
 8007a04:	4413      	add	r3, r2
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	8a7a      	ldrh	r2, [r7, #18]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d901      	bls.n	8007a12 <pbuf_add_header_impl+0x56>
    return 1;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e032      	b.n	8007a78 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	7b1b      	ldrb	r3, [r3, #12]
 8007a16:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007a18:	8a3b      	ldrh	r3, [r7, #16]
 8007a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00c      	beq.n	8007a3c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	425b      	negs	r3, r3
 8007a2a:	4413      	add	r3, r2
 8007a2c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3310      	adds	r3, #16
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d20d      	bcs.n	8007a54 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e01d      	b.n	8007a78 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007a3c:	79fb      	ldrb	r3, [r7, #7]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d006      	beq.n	8007a50 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	425b      	negs	r3, r3
 8007a4a:	4413      	add	r3, r2
 8007a4c:	617b      	str	r3, [r7, #20]
 8007a4e:	e001      	b.n	8007a54 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e011      	b.n	8007a78 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	895a      	ldrh	r2, [r3, #10]
 8007a5e:	8a7b      	ldrh	r3, [r7, #18]
 8007a60:	4413      	add	r3, r2
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	891a      	ldrh	r2, [r3, #8]
 8007a6c:	8a7b      	ldrh	r3, [r7, #18]
 8007a6e:	4413      	add	r3, r2
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	811a      	strh	r2, [r3, #8]


  return 0;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	08013390 	.word	0x08013390
 8007a84:	080134f4 	.word	0x080134f4
 8007a88:	080133f0 	.word	0x080133f0

08007a8c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007a96:	2200      	movs	r2, #0
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7ff ff8e 	bl	80079bc <pbuf_add_header_impl>
 8007aa0:	4603      	mov	r3, r0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d106      	bne.n	8007aca <pbuf_remove_header+0x1e>
 8007abc:	4b20      	ldr	r3, [pc, #128]	; (8007b40 <pbuf_remove_header+0x94>)
 8007abe:	f240 224b 	movw	r2, #587	; 0x24b
 8007ac2:	4920      	ldr	r1, [pc, #128]	; (8007b44 <pbuf_remove_header+0x98>)
 8007ac4:	4820      	ldr	r0, [pc, #128]	; (8007b48 <pbuf_remove_header+0x9c>)
 8007ac6:	f008 ff91 	bl	80109ec <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d003      	beq.n	8007ad8 <pbuf_remove_header+0x2c>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ad6:	d301      	bcc.n	8007adc <pbuf_remove_header+0x30>
    return 1;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e02c      	b.n	8007b36 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <pbuf_remove_header+0x3a>
    return 0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e027      	b.n	8007b36 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	895b      	ldrh	r3, [r3, #10]
 8007aee:	89fa      	ldrh	r2, [r7, #14]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d908      	bls.n	8007b06 <pbuf_remove_header+0x5a>
 8007af4:	4b12      	ldr	r3, [pc, #72]	; (8007b40 <pbuf_remove_header+0x94>)
 8007af6:	f240 2255 	movw	r2, #597	; 0x255
 8007afa:	4914      	ldr	r1, [pc, #80]	; (8007b4c <pbuf_remove_header+0xa0>)
 8007afc:	4812      	ldr	r0, [pc, #72]	; (8007b48 <pbuf_remove_header+0x9c>)
 8007afe:	f008 ff75 	bl	80109ec <iprintf>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e017      	b.n	8007b36 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	441a      	add	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	895a      	ldrh	r2, [r3, #10]
 8007b1c:	89fb      	ldrh	r3, [r7, #14]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	891a      	ldrh	r2, [r3, #8]
 8007b2a:	89fb      	ldrh	r3, [r7, #14]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	08013390 	.word	0x08013390
 8007b44:	080134f4 	.word	0x080134f4
 8007b48:	080133f0 	.word	0x080133f0
 8007b4c:	08013500 	.word	0x08013500

08007b50 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	807b      	strh	r3, [r7, #2]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007b60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	da08      	bge.n	8007b7a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007b68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b6c:	425b      	negs	r3, r3
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7ff ff9b 	bl	8007aac <pbuf_remove_header>
 8007b76:	4603      	mov	r3, r0
 8007b78:	e007      	b.n	8007b8a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007b7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b7e:	787a      	ldrb	r2, [r7, #1]
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff ff1a 	bl	80079bc <pbuf_add_header_impl>
 8007b88:	4603      	mov	r3, r0
  }
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007b9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7ff ffd2 	bl	8007b50 <pbuf_header_impl>
 8007bac:	4603      	mov	r3, r0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10b      	bne.n	8007bde <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d106      	bne.n	8007bda <pbuf_free+0x22>
 8007bcc:	4b38      	ldr	r3, [pc, #224]	; (8007cb0 <pbuf_free+0xf8>)
 8007bce:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007bd2:	4938      	ldr	r1, [pc, #224]	; (8007cb4 <pbuf_free+0xfc>)
 8007bd4:	4838      	ldr	r0, [pc, #224]	; (8007cb8 <pbuf_free+0x100>)
 8007bd6:	f008 ff09 	bl	80109ec <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	e063      	b.n	8007ca6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007be2:	e05c      	b.n	8007c9e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	7b9b      	ldrb	r3, [r3, #14]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d106      	bne.n	8007bfa <pbuf_free+0x42>
 8007bec:	4b30      	ldr	r3, [pc, #192]	; (8007cb0 <pbuf_free+0xf8>)
 8007bee:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007bf2:	4932      	ldr	r1, [pc, #200]	; (8007cbc <pbuf_free+0x104>)
 8007bf4:	4830      	ldr	r0, [pc, #192]	; (8007cb8 <pbuf_free+0x100>)
 8007bf6:	f008 fef9 	bl	80109ec <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	7b9b      	ldrb	r3, [r3, #14]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	739a      	strb	r2, [r3, #14]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	7b9b      	ldrb	r3, [r3, #14]
 8007c0a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007c0c:	7dbb      	ldrb	r3, [r7, #22]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d143      	bne.n	8007c9a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	7b1b      	ldrb	r3, [r3, #12]
 8007c1c:	f003 030f 	and.w	r3, r3, #15
 8007c20:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	7b5b      	ldrb	r3, [r3, #13]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d011      	beq.n	8007c52 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d106      	bne.n	8007c48 <pbuf_free+0x90>
 8007c3a:	4b1d      	ldr	r3, [pc, #116]	; (8007cb0 <pbuf_free+0xf8>)
 8007c3c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007c40:	491f      	ldr	r1, [pc, #124]	; (8007cc0 <pbuf_free+0x108>)
 8007c42:	481d      	ldr	r0, [pc, #116]	; (8007cb8 <pbuf_free+0x100>)
 8007c44:	f008 fed2 	bl	80109ec <iprintf>
        pc->custom_free_function(p);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	4798      	blx	r3
 8007c50:	e01d      	b.n	8007c8e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d104      	bne.n	8007c62 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007c58:	6879      	ldr	r1, [r7, #4]
 8007c5a:	2008      	movs	r0, #8
 8007c5c:	f7ff f936 	bl	8006ecc <memp_free>
 8007c60:	e015      	b.n	8007c8e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d104      	bne.n	8007c72 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007c68:	6879      	ldr	r1, [r7, #4]
 8007c6a:	2007      	movs	r0, #7
 8007c6c:	f7ff f92e 	bl	8006ecc <memp_free>
 8007c70:	e00d      	b.n	8007c8e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d103      	bne.n	8007c80 <pbuf_free+0xc8>
          mem_free(p);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7fe fdc1 	bl	8006800 <mem_free>
 8007c7e:	e006      	b.n	8007c8e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007c80:	4b0b      	ldr	r3, [pc, #44]	; (8007cb0 <pbuf_free+0xf8>)
 8007c82:	f240 320f 	movw	r2, #783	; 0x30f
 8007c86:	490f      	ldr	r1, [pc, #60]	; (8007cc4 <pbuf_free+0x10c>)
 8007c88:	480b      	ldr	r0, [pc, #44]	; (8007cb8 <pbuf_free+0x100>)
 8007c8a:	f008 feaf 	bl	80109ec <iprintf>
        }
      }
      count++;
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
 8007c90:	3301      	adds	r3, #1
 8007c92:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	607b      	str	r3, [r7, #4]
 8007c98:	e001      	b.n	8007c9e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d19f      	bne.n	8007be4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3718      	adds	r7, #24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	08013390 	.word	0x08013390
 8007cb4:	080134f4 	.word	0x080134f4
 8007cb8:	080133f0 	.word	0x080133f0
 8007cbc:	08013520 	.word	0x08013520
 8007cc0:	08013538 	.word	0x08013538
 8007cc4:	0801355c 	.word	0x0801355c

08007cc8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007cd4:	e005      	b.n	8007ce2 <pbuf_clen+0x1a>
    ++len;
 8007cd6:	89fb      	ldrh	r3, [r7, #14]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1f6      	bne.n	8007cd6 <pbuf_clen+0xe>
  }
  return len;
 8007ce8:	89fb      	ldrh	r3, [r7, #14]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
	...

08007cf8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d010      	beq.n	8007d28 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	7b9b      	ldrb	r3, [r3, #14]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7b9b      	ldrb	r3, [r3, #14]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d106      	bne.n	8007d28 <pbuf_ref+0x30>
 8007d1a:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <pbuf_ref+0x38>)
 8007d1c:	f240 3242 	movw	r2, #834	; 0x342
 8007d20:	4904      	ldr	r1, [pc, #16]	; (8007d34 <pbuf_ref+0x3c>)
 8007d22:	4805      	ldr	r0, [pc, #20]	; (8007d38 <pbuf_ref+0x40>)
 8007d24:	f008 fe62 	bl	80109ec <iprintf>
  }
}
 8007d28:	bf00      	nop
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	08013390 	.word	0x08013390
 8007d34:	08013570 	.word	0x08013570
 8007d38:	080133f0 	.word	0x080133f0

08007d3c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <pbuf_cat+0x16>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d107      	bne.n	8007d62 <pbuf_cat+0x26>
 8007d52:	4b20      	ldr	r3, [pc, #128]	; (8007dd4 <pbuf_cat+0x98>)
 8007d54:	f240 3259 	movw	r2, #857	; 0x359
 8007d58:	491f      	ldr	r1, [pc, #124]	; (8007dd8 <pbuf_cat+0x9c>)
 8007d5a:	4820      	ldr	r0, [pc, #128]	; (8007ddc <pbuf_cat+0xa0>)
 8007d5c:	f008 fe46 	bl	80109ec <iprintf>
 8007d60:	e034      	b.n	8007dcc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	e00a      	b.n	8007d7e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	891a      	ldrh	r2, [r3, #8]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	891b      	ldrh	r3, [r3, #8]
 8007d70:	4413      	add	r3, r2
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	60fb      	str	r3, [r7, #12]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1f0      	bne.n	8007d68 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	891a      	ldrh	r2, [r3, #8]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	895b      	ldrh	r3, [r3, #10]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d006      	beq.n	8007da0 <pbuf_cat+0x64>
 8007d92:	4b10      	ldr	r3, [pc, #64]	; (8007dd4 <pbuf_cat+0x98>)
 8007d94:	f240 3262 	movw	r2, #866	; 0x362
 8007d98:	4911      	ldr	r1, [pc, #68]	; (8007de0 <pbuf_cat+0xa4>)
 8007d9a:	4810      	ldr	r0, [pc, #64]	; (8007ddc <pbuf_cat+0xa0>)
 8007d9c:	f008 fe26 	bl	80109ec <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d006      	beq.n	8007db6 <pbuf_cat+0x7a>
 8007da8:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <pbuf_cat+0x98>)
 8007daa:	f240 3263 	movw	r2, #867	; 0x363
 8007dae:	490d      	ldr	r1, [pc, #52]	; (8007de4 <pbuf_cat+0xa8>)
 8007db0:	480a      	ldr	r0, [pc, #40]	; (8007ddc <pbuf_cat+0xa0>)
 8007db2:	f008 fe1b 	bl	80109ec <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	891a      	ldrh	r2, [r3, #8]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	891b      	ldrh	r3, [r3, #8]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	08013390 	.word	0x08013390
 8007dd8:	08013584 	.word	0x08013584
 8007ddc:	080133f0 	.word	0x080133f0
 8007de0:	080135bc 	.word	0x080135bc
 8007de4:	080135ec 	.word	0x080135ec

08007de8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007df2:	2300      	movs	r3, #0
 8007df4:	617b      	str	r3, [r7, #20]
 8007df6:	2300      	movs	r3, #0
 8007df8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d008      	beq.n	8007e12 <pbuf_copy+0x2a>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <pbuf_copy+0x2a>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	891a      	ldrh	r2, [r3, #8]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	891b      	ldrh	r3, [r3, #8]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d209      	bcs.n	8007e26 <pbuf_copy+0x3e>
 8007e12:	4b57      	ldr	r3, [pc, #348]	; (8007f70 <pbuf_copy+0x188>)
 8007e14:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007e18:	4956      	ldr	r1, [pc, #344]	; (8007f74 <pbuf_copy+0x18c>)
 8007e1a:	4857      	ldr	r0, [pc, #348]	; (8007f78 <pbuf_copy+0x190>)
 8007e1c:	f008 fde6 	bl	80109ec <iprintf>
 8007e20:	f06f 030f 	mvn.w	r3, #15
 8007e24:	e09f      	b.n	8007f66 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	895b      	ldrh	r3, [r3, #10]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	1ad2      	subs	r2, r2, r3
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	895b      	ldrh	r3, [r3, #10]
 8007e34:	4619      	mov	r1, r3
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	1acb      	subs	r3, r1, r3
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d306      	bcc.n	8007e4c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	895b      	ldrh	r3, [r3, #10]
 8007e42:	461a      	mov	r2, r3
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	e005      	b.n	8007e58 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	895b      	ldrh	r3, [r3, #10]
 8007e50:	461a      	mov	r2, r3
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	18d0      	adds	r0, r2, r3
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	4413      	add	r3, r2
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	f008 fed7 	bl	8010c1e <memcpy>
    offset_to += len;
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4413      	add	r3, r2
 8007e76:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	895b      	ldrh	r3, [r3, #10]
 8007e84:	461a      	mov	r2, r3
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d906      	bls.n	8007e9a <pbuf_copy+0xb2>
 8007e8c:	4b38      	ldr	r3, [pc, #224]	; (8007f70 <pbuf_copy+0x188>)
 8007e8e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007e92:	493a      	ldr	r1, [pc, #232]	; (8007f7c <pbuf_copy+0x194>)
 8007e94:	4838      	ldr	r0, [pc, #224]	; (8007f78 <pbuf_copy+0x190>)
 8007e96:	f008 fda9 	bl	80109ec <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	895b      	ldrh	r3, [r3, #10]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d906      	bls.n	8007eb4 <pbuf_copy+0xcc>
 8007ea6:	4b32      	ldr	r3, [pc, #200]	; (8007f70 <pbuf_copy+0x188>)
 8007ea8:	f240 32da 	movw	r2, #986	; 0x3da
 8007eac:	4934      	ldr	r1, [pc, #208]	; (8007f80 <pbuf_copy+0x198>)
 8007eae:	4832      	ldr	r0, [pc, #200]	; (8007f78 <pbuf_copy+0x190>)
 8007eb0:	f008 fd9c 	bl	80109ec <iprintf>
    if (offset_from >= p_from->len) {
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	895b      	ldrh	r3, [r3, #10]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d304      	bcc.n	8007eca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	895b      	ldrh	r3, [r3, #10]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d114      	bne.n	8007f00 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10c      	bne.n	8007f00 <pbuf_copy+0x118>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d009      	beq.n	8007f00 <pbuf_copy+0x118>
 8007eec:	4b20      	ldr	r3, [pc, #128]	; (8007f70 <pbuf_copy+0x188>)
 8007eee:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007ef2:	4924      	ldr	r1, [pc, #144]	; (8007f84 <pbuf_copy+0x19c>)
 8007ef4:	4820      	ldr	r0, [pc, #128]	; (8007f78 <pbuf_copy+0x190>)
 8007ef6:	f008 fd79 	bl	80109ec <iprintf>
 8007efa:	f06f 030f 	mvn.w	r3, #15
 8007efe:	e032      	b.n	8007f66 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d013      	beq.n	8007f2e <pbuf_copy+0x146>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	895a      	ldrh	r2, [r3, #10]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	891b      	ldrh	r3, [r3, #8]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d10d      	bne.n	8007f2e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d009      	beq.n	8007f2e <pbuf_copy+0x146>
 8007f1a:	4b15      	ldr	r3, [pc, #84]	; (8007f70 <pbuf_copy+0x188>)
 8007f1c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007f20:	4919      	ldr	r1, [pc, #100]	; (8007f88 <pbuf_copy+0x1a0>)
 8007f22:	4815      	ldr	r0, [pc, #84]	; (8007f78 <pbuf_copy+0x190>)
 8007f24:	f008 fd62 	bl	80109ec <iprintf>
 8007f28:	f06f 0305 	mvn.w	r3, #5
 8007f2c:	e01b      	b.n	8007f66 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d013      	beq.n	8007f5c <pbuf_copy+0x174>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	895a      	ldrh	r2, [r3, #10]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	891b      	ldrh	r3, [r3, #8]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d10d      	bne.n	8007f5c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d009      	beq.n	8007f5c <pbuf_copy+0x174>
 8007f48:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <pbuf_copy+0x188>)
 8007f4a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007f4e:	490e      	ldr	r1, [pc, #56]	; (8007f88 <pbuf_copy+0x1a0>)
 8007f50:	4809      	ldr	r0, [pc, #36]	; (8007f78 <pbuf_copy+0x190>)
 8007f52:	f008 fd4b 	bl	80109ec <iprintf>
 8007f56:	f06f 0305 	mvn.w	r3, #5
 8007f5a:	e004      	b.n	8007f66 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f47f af61 	bne.w	8007e26 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	08013390 	.word	0x08013390
 8007f74:	08013638 	.word	0x08013638
 8007f78:	080133f0 	.word	0x080133f0
 8007f7c:	08013668 	.word	0x08013668
 8007f80:	08013680 	.word	0x08013680
 8007f84:	0801369c 	.word	0x0801369c
 8007f88:	080136ac 	.word	0x080136ac

08007f8c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	4611      	mov	r1, r2
 8007f98:	461a      	mov	r2, r3
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	80fb      	strh	r3, [r7, #6]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d108      	bne.n	8007fc2 <pbuf_copy_partial+0x36>
 8007fb0:	4b2b      	ldr	r3, [pc, #172]	; (8008060 <pbuf_copy_partial+0xd4>)
 8007fb2:	f240 420a 	movw	r2, #1034	; 0x40a
 8007fb6:	492b      	ldr	r1, [pc, #172]	; (8008064 <pbuf_copy_partial+0xd8>)
 8007fb8:	482b      	ldr	r0, [pc, #172]	; (8008068 <pbuf_copy_partial+0xdc>)
 8007fba:	f008 fd17 	bl	80109ec <iprintf>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	e04a      	b.n	8008058 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d108      	bne.n	8007fda <pbuf_copy_partial+0x4e>
 8007fc8:	4b25      	ldr	r3, [pc, #148]	; (8008060 <pbuf_copy_partial+0xd4>)
 8007fca:	f240 420b 	movw	r2, #1035	; 0x40b
 8007fce:	4927      	ldr	r1, [pc, #156]	; (800806c <pbuf_copy_partial+0xe0>)
 8007fd0:	4825      	ldr	r0, [pc, #148]	; (8008068 <pbuf_copy_partial+0xdc>)
 8007fd2:	f008 fd0b 	bl	80109ec <iprintf>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e03e      	b.n	8008058 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	61fb      	str	r3, [r7, #28]
 8007fde:	e034      	b.n	800804a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007fe0:	88bb      	ldrh	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00a      	beq.n	8007ffc <pbuf_copy_partial+0x70>
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	895b      	ldrh	r3, [r3, #10]
 8007fea:	88ba      	ldrh	r2, [r7, #4]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d305      	bcc.n	8007ffc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	895b      	ldrh	r3, [r3, #10]
 8007ff4:	88ba      	ldrh	r2, [r7, #4]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	80bb      	strh	r3, [r7, #4]
 8007ffa:	e023      	b.n	8008044 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	895a      	ldrh	r2, [r3, #10]
 8008000:	88bb      	ldrh	r3, [r7, #4]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008006:	8b3a      	ldrh	r2, [r7, #24]
 8008008:	88fb      	ldrh	r3, [r7, #6]
 800800a:	429a      	cmp	r2, r3
 800800c:	d901      	bls.n	8008012 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800800e:	88fb      	ldrh	r3, [r7, #6]
 8008010:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008012:	8b7b      	ldrh	r3, [r7, #26]
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	18d0      	adds	r0, r2, r3
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	88bb      	ldrh	r3, [r7, #4]
 800801e:	4413      	add	r3, r2
 8008020:	8b3a      	ldrh	r2, [r7, #24]
 8008022:	4619      	mov	r1, r3
 8008024:	f008 fdfb 	bl	8010c1e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008028:	8afa      	ldrh	r2, [r7, #22]
 800802a:	8b3b      	ldrh	r3, [r7, #24]
 800802c:	4413      	add	r3, r2
 800802e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008030:	8b7a      	ldrh	r2, [r7, #26]
 8008032:	8b3b      	ldrh	r3, [r7, #24]
 8008034:	4413      	add	r3, r2
 8008036:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008038:	88fa      	ldrh	r2, [r7, #6]
 800803a:	8b3b      	ldrh	r3, [r7, #24]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008040:	2300      	movs	r3, #0
 8008042:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	61fb      	str	r3, [r7, #28]
 800804a:	88fb      	ldrh	r3, [r7, #6]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <pbuf_copy_partial+0xca>
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1c4      	bne.n	8007fe0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008056:	8afb      	ldrh	r3, [r7, #22]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3720      	adds	r7, #32
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	08013390 	.word	0x08013390
 8008064:	080136d8 	.word	0x080136d8
 8008068:	080133f0 	.word	0x080133f0
 800806c:	080136f8 	.word	0x080136f8

08008070 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	4603      	mov	r3, r0
 8008078:	603a      	str	r2, [r7, #0]
 800807a:	71fb      	strb	r3, [r7, #7]
 800807c:	460b      	mov	r3, r1
 800807e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	8919      	ldrh	r1, [r3, #8]
 8008084:	88ba      	ldrh	r2, [r7, #4]
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	4618      	mov	r0, r3
 800808a:	f7ff fab1 	bl	80075f0 <pbuf_alloc>
 800808e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <pbuf_clone+0x2a>
    return NULL;
 8008096:	2300      	movs	r3, #0
 8008098:	e011      	b.n	80080be <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f7ff fea3 	bl	8007de8 <pbuf_copy>
 80080a2:	4603      	mov	r3, r0
 80080a4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80080a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d006      	beq.n	80080bc <pbuf_clone+0x4c>
 80080ae:	4b06      	ldr	r3, [pc, #24]	; (80080c8 <pbuf_clone+0x58>)
 80080b0:	f240 5224 	movw	r2, #1316	; 0x524
 80080b4:	4905      	ldr	r1, [pc, #20]	; (80080cc <pbuf_clone+0x5c>)
 80080b6:	4806      	ldr	r0, [pc, #24]	; (80080d0 <pbuf_clone+0x60>)
 80080b8:	f008 fc98 	bl	80109ec <iprintf>
  return q;
 80080bc:	68fb      	ldr	r3, [r7, #12]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	08013390 	.word	0x08013390
 80080cc:	08013804 	.word	0x08013804
 80080d0:	080133f0 	.word	0x080133f0

080080d4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80080d8:	f007 ff22 	bl	800ff20 <rand>
 80080dc:	4603      	mov	r3, r0
 80080de:	b29b      	uxth	r3, r3
 80080e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	4b01      	ldr	r3, [pc, #4]	; (80080f4 <tcp_init+0x20>)
 80080ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80080f0:	bf00      	nop
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	20000028 	.word	0x20000028

080080f8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	7d1b      	ldrb	r3, [r3, #20]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d105      	bne.n	8008114 <tcp_free+0x1c>
 8008108:	4b06      	ldr	r3, [pc, #24]	; (8008124 <tcp_free+0x2c>)
 800810a:	22d4      	movs	r2, #212	; 0xd4
 800810c:	4906      	ldr	r1, [pc, #24]	; (8008128 <tcp_free+0x30>)
 800810e:	4807      	ldr	r0, [pc, #28]	; (800812c <tcp_free+0x34>)
 8008110:	f008 fc6c 	bl	80109ec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008114:	6879      	ldr	r1, [r7, #4]
 8008116:	2001      	movs	r0, #1
 8008118:	f7fe fed8 	bl	8006ecc <memp_free>
}
 800811c:	bf00      	nop
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	08013890 	.word	0x08013890
 8008128:	080138c0 	.word	0x080138c0
 800812c:	080138d4 	.word	0x080138d4

08008130 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	7d1b      	ldrb	r3, [r3, #20]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d105      	bne.n	800814c <tcp_free_listen+0x1c>
 8008140:	4b06      	ldr	r3, [pc, #24]	; (800815c <tcp_free_listen+0x2c>)
 8008142:	22df      	movs	r2, #223	; 0xdf
 8008144:	4906      	ldr	r1, [pc, #24]	; (8008160 <tcp_free_listen+0x30>)
 8008146:	4807      	ldr	r0, [pc, #28]	; (8008164 <tcp_free_listen+0x34>)
 8008148:	f008 fc50 	bl	80109ec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800814c:	6879      	ldr	r1, [r7, #4]
 800814e:	2002      	movs	r0, #2
 8008150:	f7fe febc 	bl	8006ecc <memp_free>
}
 8008154:	bf00      	nop
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	08013890 	.word	0x08013890
 8008160:	080138fc 	.word	0x080138fc
 8008164:	080138d4 	.word	0x080138d4

08008168 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800816c:	f000 fea2 	bl	8008eb4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008170:	4b07      	ldr	r3, [pc, #28]	; (8008190 <tcp_tmr+0x28>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	3301      	adds	r3, #1
 8008176:	b2da      	uxtb	r2, r3
 8008178:	4b05      	ldr	r3, [pc, #20]	; (8008190 <tcp_tmr+0x28>)
 800817a:	701a      	strb	r2, [r3, #0]
 800817c:	4b04      	ldr	r3, [pc, #16]	; (8008190 <tcp_tmr+0x28>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008188:	f000 fb54 	bl	8008834 <tcp_slowtmr>
  }
}
 800818c:	bf00      	nop
 800818e:	bd80      	pop	{r7, pc}
 8008190:	20000865 	.word	0x20000865

08008194 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d105      	bne.n	80081b0 <tcp_remove_listener+0x1c>
 80081a4:	4b0d      	ldr	r3, [pc, #52]	; (80081dc <tcp_remove_listener+0x48>)
 80081a6:	22ff      	movs	r2, #255	; 0xff
 80081a8:	490d      	ldr	r1, [pc, #52]	; (80081e0 <tcp_remove_listener+0x4c>)
 80081aa:	480e      	ldr	r0, [pc, #56]	; (80081e4 <tcp_remove_listener+0x50>)
 80081ac:	f008 fc1e 	bl	80109ec <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	e00a      	b.n	80081cc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d102      	bne.n	80081c6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1f1      	bne.n	80081b6 <tcp_remove_listener+0x22>
    }
  }
}
 80081d2:	bf00      	nop
 80081d4:	bf00      	nop
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	08013890 	.word	0x08013890
 80081e0:	08013918 	.word	0x08013918
 80081e4:	080138d4 	.word	0x080138d4

080081e8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d106      	bne.n	8008204 <tcp_listen_closed+0x1c>
 80081f6:	4b14      	ldr	r3, [pc, #80]	; (8008248 <tcp_listen_closed+0x60>)
 80081f8:	f240 1211 	movw	r2, #273	; 0x111
 80081fc:	4913      	ldr	r1, [pc, #76]	; (800824c <tcp_listen_closed+0x64>)
 80081fe:	4814      	ldr	r0, [pc, #80]	; (8008250 <tcp_listen_closed+0x68>)
 8008200:	f008 fbf4 	bl	80109ec <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	7d1b      	ldrb	r3, [r3, #20]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d006      	beq.n	800821a <tcp_listen_closed+0x32>
 800820c:	4b0e      	ldr	r3, [pc, #56]	; (8008248 <tcp_listen_closed+0x60>)
 800820e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008212:	4910      	ldr	r1, [pc, #64]	; (8008254 <tcp_listen_closed+0x6c>)
 8008214:	480e      	ldr	r0, [pc, #56]	; (8008250 <tcp_listen_closed+0x68>)
 8008216:	f008 fbe9 	bl	80109ec <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800821a:	2301      	movs	r3, #1
 800821c:	60fb      	str	r3, [r7, #12]
 800821e:	e00b      	b.n	8008238 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008220:	4a0d      	ldr	r2, [pc, #52]	; (8008258 <tcp_listen_closed+0x70>)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6879      	ldr	r1, [r7, #4]
 800822c:	4618      	mov	r0, r3
 800822e:	f7ff ffb1 	bl	8008194 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3301      	adds	r3, #1
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2b03      	cmp	r3, #3
 800823c:	d9f0      	bls.n	8008220 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800823e:	bf00      	nop
 8008240:	bf00      	nop
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	08013890 	.word	0x08013890
 800824c:	08013940 	.word	0x08013940
 8008250:	080138d4 	.word	0x080138d4
 8008254:	0801394c 	.word	0x0801394c
 8008258:	08016070 	.word	0x08016070

0800825c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800825c:	b5b0      	push	{r4, r5, r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af04      	add	r7, sp, #16
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	460b      	mov	r3, r1
 8008266:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d106      	bne.n	800827c <tcp_close_shutdown+0x20>
 800826e:	4b63      	ldr	r3, [pc, #396]	; (80083fc <tcp_close_shutdown+0x1a0>)
 8008270:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008274:	4962      	ldr	r1, [pc, #392]	; (8008400 <tcp_close_shutdown+0x1a4>)
 8008276:	4863      	ldr	r0, [pc, #396]	; (8008404 <tcp_close_shutdown+0x1a8>)
 8008278:	f008 fbb8 	bl	80109ec <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800827c:	78fb      	ldrb	r3, [r7, #3]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d066      	beq.n	8008350 <tcp_close_shutdown+0xf4>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	7d1b      	ldrb	r3, [r3, #20]
 8008286:	2b04      	cmp	r3, #4
 8008288:	d003      	beq.n	8008292 <tcp_close_shutdown+0x36>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	7d1b      	ldrb	r3, [r3, #20]
 800828e:	2b07      	cmp	r3, #7
 8008290:	d15e      	bne.n	8008350 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008296:	2b00      	cmp	r3, #0
 8008298:	d104      	bne.n	80082a4 <tcp_close_shutdown+0x48>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800829e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80082a2:	d055      	beq.n	8008350 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	8b5b      	ldrh	r3, [r3, #26]
 80082a8:	f003 0310 	and.w	r3, r3, #16
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d106      	bne.n	80082be <tcp_close_shutdown+0x62>
 80082b0:	4b52      	ldr	r3, [pc, #328]	; (80083fc <tcp_close_shutdown+0x1a0>)
 80082b2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80082b6:	4954      	ldr	r1, [pc, #336]	; (8008408 <tcp_close_shutdown+0x1ac>)
 80082b8:	4852      	ldr	r0, [pc, #328]	; (8008404 <tcp_close_shutdown+0x1a8>)
 80082ba:	f008 fb97 	bl	80109ec <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80082c6:	687d      	ldr	r5, [r7, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3304      	adds	r3, #4
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	8ad2      	ldrh	r2, [r2, #22]
 80082d0:	6879      	ldr	r1, [r7, #4]
 80082d2:	8b09      	ldrh	r1, [r1, #24]
 80082d4:	9102      	str	r1, [sp, #8]
 80082d6:	9201      	str	r2, [sp, #4]
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	462b      	mov	r3, r5
 80082dc:	4622      	mov	r2, r4
 80082de:	4601      	mov	r1, r0
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f004 fe91 	bl	800d008 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f001 f8c6 	bl	8009478 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80082ec:	4b47      	ldr	r3, [pc, #284]	; (800840c <tcp_close_shutdown+0x1b0>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d105      	bne.n	8008302 <tcp_close_shutdown+0xa6>
 80082f6:	4b45      	ldr	r3, [pc, #276]	; (800840c <tcp_close_shutdown+0x1b0>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	4a43      	ldr	r2, [pc, #268]	; (800840c <tcp_close_shutdown+0x1b0>)
 80082fe:	6013      	str	r3, [r2, #0]
 8008300:	e013      	b.n	800832a <tcp_close_shutdown+0xce>
 8008302:	4b42      	ldr	r3, [pc, #264]	; (800840c <tcp_close_shutdown+0x1b0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	e00c      	b.n	8008324 <tcp_close_shutdown+0xc8>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	429a      	cmp	r2, r3
 8008312:	d104      	bne.n	800831e <tcp_close_shutdown+0xc2>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68da      	ldr	r2, [r3, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	60da      	str	r2, [r3, #12]
 800831c:	e005      	b.n	800832a <tcp_close_shutdown+0xce>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1ef      	bne.n	800830a <tcp_close_shutdown+0xae>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	60da      	str	r2, [r3, #12]
 8008330:	4b37      	ldr	r3, [pc, #220]	; (8008410 <tcp_close_shutdown+0x1b4>)
 8008332:	2201      	movs	r2, #1
 8008334:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008336:	4b37      	ldr	r3, [pc, #220]	; (8008414 <tcp_close_shutdown+0x1b8>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	429a      	cmp	r2, r3
 800833e:	d102      	bne.n	8008346 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008340:	f003 fd5e 	bl	800be00 <tcp_trigger_input_pcb_close>
 8008344:	e002      	b.n	800834c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff fed6 	bl	80080f8 <tcp_free>
      }
      return ERR_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	e050      	b.n	80083f2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	7d1b      	ldrb	r3, [r3, #20]
 8008354:	2b02      	cmp	r3, #2
 8008356:	d03b      	beq.n	80083d0 <tcp_close_shutdown+0x174>
 8008358:	2b02      	cmp	r3, #2
 800835a:	dc44      	bgt.n	80083e6 <tcp_close_shutdown+0x18a>
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <tcp_close_shutdown+0x10a>
 8008360:	2b01      	cmp	r3, #1
 8008362:	d02a      	beq.n	80083ba <tcp_close_shutdown+0x15e>
 8008364:	e03f      	b.n	80083e6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	8adb      	ldrh	r3, [r3, #22]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d021      	beq.n	80083b2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800836e:	4b2a      	ldr	r3, [pc, #168]	; (8008418 <tcp_close_shutdown+0x1bc>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	429a      	cmp	r2, r3
 8008376:	d105      	bne.n	8008384 <tcp_close_shutdown+0x128>
 8008378:	4b27      	ldr	r3, [pc, #156]	; (8008418 <tcp_close_shutdown+0x1bc>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	4a26      	ldr	r2, [pc, #152]	; (8008418 <tcp_close_shutdown+0x1bc>)
 8008380:	6013      	str	r3, [r2, #0]
 8008382:	e013      	b.n	80083ac <tcp_close_shutdown+0x150>
 8008384:	4b24      	ldr	r3, [pc, #144]	; (8008418 <tcp_close_shutdown+0x1bc>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60bb      	str	r3, [r7, #8]
 800838a:	e00c      	b.n	80083a6 <tcp_close_shutdown+0x14a>
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	429a      	cmp	r2, r3
 8008394:	d104      	bne.n	80083a0 <tcp_close_shutdown+0x144>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	60da      	str	r2, [r3, #12]
 800839e:	e005      	b.n	80083ac <tcp_close_shutdown+0x150>
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	60bb      	str	r3, [r7, #8]
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1ef      	bne.n	800838c <tcp_close_shutdown+0x130>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7ff fea0 	bl	80080f8 <tcp_free>
      break;
 80083b8:	e01a      	b.n	80083f0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7ff ff14 	bl	80081e8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	4816      	ldr	r0, [pc, #88]	; (800841c <tcp_close_shutdown+0x1c0>)
 80083c4:	f001 f8a8 	bl	8009518 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7ff feb1 	bl	8008130 <tcp_free_listen>
      break;
 80083ce:	e00f      	b.n	80083f0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	480e      	ldr	r0, [pc, #56]	; (800840c <tcp_close_shutdown+0x1b0>)
 80083d4:	f001 f8a0 	bl	8009518 <tcp_pcb_remove>
 80083d8:	4b0d      	ldr	r3, [pc, #52]	; (8008410 <tcp_close_shutdown+0x1b4>)
 80083da:	2201      	movs	r2, #1
 80083dc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7ff fe8a 	bl	80080f8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80083e4:	e004      	b.n	80083f0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f81a 	bl	8008420 <tcp_close_shutdown_fin>
 80083ec:	4603      	mov	r3, r0
 80083ee:	e000      	b.n	80083f2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bdb0      	pop	{r4, r5, r7, pc}
 80083fa:	bf00      	nop
 80083fc:	08013890 	.word	0x08013890
 8008400:	08013964 	.word	0x08013964
 8008404:	080138d4 	.word	0x080138d4
 8008408:	08013984 	.word	0x08013984
 800840c:	2000ade0 	.word	0x2000ade0
 8008410:	2000addc 	.word	0x2000addc
 8008414:	2000adf4 	.word	0x2000adf4
 8008418:	2000adec 	.word	0x2000adec
 800841c:	2000ade8 	.word	0x2000ade8

08008420 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d106      	bne.n	800843c <tcp_close_shutdown_fin+0x1c>
 800842e:	4b2e      	ldr	r3, [pc, #184]	; (80084e8 <tcp_close_shutdown_fin+0xc8>)
 8008430:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008434:	492d      	ldr	r1, [pc, #180]	; (80084ec <tcp_close_shutdown_fin+0xcc>)
 8008436:	482e      	ldr	r0, [pc, #184]	; (80084f0 <tcp_close_shutdown_fin+0xd0>)
 8008438:	f008 fad8 	bl	80109ec <iprintf>

  switch (pcb->state) {
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	7d1b      	ldrb	r3, [r3, #20]
 8008440:	2b07      	cmp	r3, #7
 8008442:	d020      	beq.n	8008486 <tcp_close_shutdown_fin+0x66>
 8008444:	2b07      	cmp	r3, #7
 8008446:	dc2b      	bgt.n	80084a0 <tcp_close_shutdown_fin+0x80>
 8008448:	2b03      	cmp	r3, #3
 800844a:	d002      	beq.n	8008452 <tcp_close_shutdown_fin+0x32>
 800844c:	2b04      	cmp	r3, #4
 800844e:	d00d      	beq.n	800846c <tcp_close_shutdown_fin+0x4c>
 8008450:	e026      	b.n	80084a0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f003 fee6 	bl	800c224 <tcp_send_fin>
 8008458:	4603      	mov	r3, r0
 800845a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800845c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d11f      	bne.n	80084a4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2205      	movs	r2, #5
 8008468:	751a      	strb	r2, [r3, #20]
      }
      break;
 800846a:	e01b      	b.n	80084a4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f003 fed9 	bl	800c224 <tcp_send_fin>
 8008472:	4603      	mov	r3, r0
 8008474:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d114      	bne.n	80084a8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2205      	movs	r2, #5
 8008482:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008484:	e010      	b.n	80084a8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f003 fecc 	bl	800c224 <tcp_send_fin>
 800848c:	4603      	mov	r3, r0
 800848e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d109      	bne.n	80084ac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2209      	movs	r2, #9
 800849c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800849e:	e005      	b.n	80084ac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	e01c      	b.n	80084de <tcp_close_shutdown_fin+0xbe>
      break;
 80084a4:	bf00      	nop
 80084a6:	e002      	b.n	80084ae <tcp_close_shutdown_fin+0x8e>
      break;
 80084a8:	bf00      	nop
 80084aa:	e000      	b.n	80084ae <tcp_close_shutdown_fin+0x8e>
      break;
 80084ac:	bf00      	nop
  }

  if (err == ERR_OK) {
 80084ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d103      	bne.n	80084be <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f003 fff2 	bl	800c4a0 <tcp_output>
 80084bc:	e00d      	b.n	80084da <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80084be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c6:	d108      	bne.n	80084da <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	8b5b      	ldrh	r3, [r3, #26]
 80084cc:	f043 0308 	orr.w	r3, r3, #8
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	e001      	b.n	80084de <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80084da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	08013890 	.word	0x08013890
 80084ec:	08013940 	.word	0x08013940
 80084f0:	080138d4 	.word	0x080138d4

080084f4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d109      	bne.n	8008516 <tcp_close+0x22>
 8008502:	4b0f      	ldr	r3, [pc, #60]	; (8008540 <tcp_close+0x4c>)
 8008504:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008508:	490e      	ldr	r1, [pc, #56]	; (8008544 <tcp_close+0x50>)
 800850a:	480f      	ldr	r0, [pc, #60]	; (8008548 <tcp_close+0x54>)
 800850c:	f008 fa6e 	bl	80109ec <iprintf>
 8008510:	f06f 030f 	mvn.w	r3, #15
 8008514:	e00f      	b.n	8008536 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	7d1b      	ldrb	r3, [r3, #20]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d006      	beq.n	800852c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	8b5b      	ldrh	r3, [r3, #26]
 8008522:	f043 0310 	orr.w	r3, r3, #16
 8008526:	b29a      	uxth	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800852c:	2101      	movs	r1, #1
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7ff fe94 	bl	800825c <tcp_close_shutdown>
 8008534:	4603      	mov	r3, r0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	08013890 	.word	0x08013890
 8008544:	080139a0 	.word	0x080139a0
 8008548:	080138d4 	.word	0x080138d4

0800854c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b08e      	sub	sp, #56	; 0x38
 8008550:	af04      	add	r7, sp, #16
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d107      	bne.n	800856c <tcp_abandon+0x20>
 800855c:	4b52      	ldr	r3, [pc, #328]	; (80086a8 <tcp_abandon+0x15c>)
 800855e:	f240 223d 	movw	r2, #573	; 0x23d
 8008562:	4952      	ldr	r1, [pc, #328]	; (80086ac <tcp_abandon+0x160>)
 8008564:	4852      	ldr	r0, [pc, #328]	; (80086b0 <tcp_abandon+0x164>)
 8008566:	f008 fa41 	bl	80109ec <iprintf>
 800856a:	e099      	b.n	80086a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	7d1b      	ldrb	r3, [r3, #20]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d106      	bne.n	8008582 <tcp_abandon+0x36>
 8008574:	4b4c      	ldr	r3, [pc, #304]	; (80086a8 <tcp_abandon+0x15c>)
 8008576:	f44f 7210 	mov.w	r2, #576	; 0x240
 800857a:	494e      	ldr	r1, [pc, #312]	; (80086b4 <tcp_abandon+0x168>)
 800857c:	484c      	ldr	r0, [pc, #304]	; (80086b0 <tcp_abandon+0x164>)
 800857e:	f008 fa35 	bl	80109ec <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	7d1b      	ldrb	r3, [r3, #20]
 8008586:	2b0a      	cmp	r3, #10
 8008588:	d107      	bne.n	800859a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	484a      	ldr	r0, [pc, #296]	; (80086b8 <tcp_abandon+0x16c>)
 800858e:	f000 ffc3 	bl	8009518 <tcp_pcb_remove>
    tcp_free(pcb);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff fdb0 	bl	80080f8 <tcp_free>
 8008598:	e082      	b.n	80086a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800859a:	2300      	movs	r3, #0
 800859c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800859e:	2300      	movs	r3, #0
 80085a0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	7d1b      	ldrb	r3, [r3, #20]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d126      	bne.n	8008612 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	8adb      	ldrh	r3, [r3, #22]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d02e      	beq.n	800862a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80085cc:	4b3b      	ldr	r3, [pc, #236]	; (80086bc <tcp_abandon+0x170>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d105      	bne.n	80085e2 <tcp_abandon+0x96>
 80085d6:	4b39      	ldr	r3, [pc, #228]	; (80086bc <tcp_abandon+0x170>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	4a37      	ldr	r2, [pc, #220]	; (80086bc <tcp_abandon+0x170>)
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	e013      	b.n	800860a <tcp_abandon+0xbe>
 80085e2:	4b36      	ldr	r3, [pc, #216]	; (80086bc <tcp_abandon+0x170>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	61fb      	str	r3, [r7, #28]
 80085e8:	e00c      	b.n	8008604 <tcp_abandon+0xb8>
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d104      	bne.n	80085fe <tcp_abandon+0xb2>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68da      	ldr	r2, [r3, #12]
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	60da      	str	r2, [r3, #12]
 80085fc:	e005      	b.n	800860a <tcp_abandon+0xbe>
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	61fb      	str	r3, [r7, #28]
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1ef      	bne.n	80085ea <tcp_abandon+0x9e>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	60da      	str	r2, [r3, #12]
 8008610:	e00b      	b.n	800862a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	8adb      	ldrh	r3, [r3, #22]
 800861a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800861c:	6879      	ldr	r1, [r7, #4]
 800861e:	4828      	ldr	r0, [pc, #160]	; (80086c0 <tcp_abandon+0x174>)
 8008620:	f000 ff7a 	bl	8009518 <tcp_pcb_remove>
 8008624:	4b27      	ldr	r3, [pc, #156]	; (80086c4 <tcp_abandon+0x178>)
 8008626:	2201      	movs	r2, #1
 8008628:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800862e:	2b00      	cmp	r3, #0
 8008630:	d004      	beq.n	800863c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fd1c 	bl	8009074 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008640:	2b00      	cmp	r3, #0
 8008642:	d004      	beq.n	800864e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008648:	4618      	mov	r0, r3
 800864a:	f000 fd13 	bl	8009074 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008652:	2b00      	cmp	r3, #0
 8008654:	d004      	beq.n	8008660 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800865a:	4618      	mov	r0, r3
 800865c:	f000 fd0a 	bl	8009074 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00e      	beq.n	8008684 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008666:	6879      	ldr	r1, [r7, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	3304      	adds	r3, #4
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	8b12      	ldrh	r2, [r2, #24]
 8008670:	9202      	str	r2, [sp, #8]
 8008672:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008674:	9201      	str	r2, [sp, #4]
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	460b      	mov	r3, r1
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	69b9      	ldr	r1, [r7, #24]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f004 fcc2 	bl	800d008 <tcp_rst>
    }
    last_state = pcb->state;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	7d1b      	ldrb	r3, [r3, #20]
 8008688:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7ff fd34 	bl	80080f8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d004      	beq.n	80086a0 <tcp_abandon+0x154>
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	f06f 010c 	mvn.w	r1, #12
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	4798      	blx	r3
  }
}
 80086a0:	3728      	adds	r7, #40	; 0x28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	08013890 	.word	0x08013890
 80086ac:	080139d4 	.word	0x080139d4
 80086b0:	080138d4 	.word	0x080138d4
 80086b4:	080139f0 	.word	0x080139f0
 80086b8:	2000adf0 	.word	0x2000adf0
 80086bc:	2000adec 	.word	0x2000adec
 80086c0:	2000ade0 	.word	0x2000ade0
 80086c4:	2000addc 	.word	0x2000addc

080086c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80086d0:	2101      	movs	r1, #1
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7ff ff3a 	bl	800854c <tcp_abandon>
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d106      	bne.n	80086fc <tcp_update_rcv_ann_wnd+0x1c>
 80086ee:	4b25      	ldr	r3, [pc, #148]	; (8008784 <tcp_update_rcv_ann_wnd+0xa4>)
 80086f0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80086f4:	4924      	ldr	r1, [pc, #144]	; (8008788 <tcp_update_rcv_ann_wnd+0xa8>)
 80086f6:	4825      	ldr	r0, [pc, #148]	; (800878c <tcp_update_rcv_ann_wnd+0xac>)
 80086f8:	f008 f978 	bl	80109ec <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008704:	4413      	add	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008710:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008714:	bf28      	it	cs
 8008716:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800871a:	b292      	uxth	r2, r2
 800871c:	4413      	add	r3, r2
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	db08      	blt.n	8008738 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	e020      	b.n	800877a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	dd03      	ble.n	800874e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800874c:	e014      	b.n	8008778 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008760:	d306      	bcc.n	8008770 <tcp_update_rcv_ann_wnd+0x90>
 8008762:	4b08      	ldr	r3, [pc, #32]	; (8008784 <tcp_update_rcv_ann_wnd+0xa4>)
 8008764:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008768:	4909      	ldr	r1, [pc, #36]	; (8008790 <tcp_update_rcv_ann_wnd+0xb0>)
 800876a:	4808      	ldr	r0, [pc, #32]	; (800878c <tcp_update_rcv_ann_wnd+0xac>)
 800876c:	f008 f93e 	bl	80109ec <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	b29a      	uxth	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008778:	2300      	movs	r3, #0
  }
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	08013890 	.word	0x08013890
 8008788:	08013aec 	.word	0x08013aec
 800878c:	080138d4 	.word	0x080138d4
 8008790:	08013b10 	.word	0x08013b10

08008794 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d107      	bne.n	80087b6 <tcp_recved+0x22>
 80087a6:	4b1f      	ldr	r3, [pc, #124]	; (8008824 <tcp_recved+0x90>)
 80087a8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80087ac:	491e      	ldr	r1, [pc, #120]	; (8008828 <tcp_recved+0x94>)
 80087ae:	481f      	ldr	r0, [pc, #124]	; (800882c <tcp_recved+0x98>)
 80087b0:	f008 f91c 	bl	80109ec <iprintf>
 80087b4:	e032      	b.n	800881c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	7d1b      	ldrb	r3, [r3, #20]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d106      	bne.n	80087cc <tcp_recved+0x38>
 80087be:	4b19      	ldr	r3, [pc, #100]	; (8008824 <tcp_recved+0x90>)
 80087c0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80087c4:	491a      	ldr	r1, [pc, #104]	; (8008830 <tcp_recved+0x9c>)
 80087c6:	4819      	ldr	r0, [pc, #100]	; (800882c <tcp_recved+0x98>)
 80087c8:	f008 f910 	bl	80109ec <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80087d0:	887b      	ldrh	r3, [r7, #2]
 80087d2:	4413      	add	r3, r2
 80087d4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80087d6:	89fb      	ldrh	r3, [r7, #14]
 80087d8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80087dc:	d804      	bhi.n	80087e8 <tcp_recved+0x54>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087e2:	89fa      	ldrh	r2, [r7, #14]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d204      	bcs.n	80087f2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80087ee:	851a      	strh	r2, [r3, #40]	; 0x28
 80087f0:	e002      	b.n	80087f8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	89fa      	ldrh	r2, [r7, #14]
 80087f6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f7ff ff71 	bl	80086e0 <tcp_update_rcv_ann_wnd>
 80087fe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008806:	d309      	bcc.n	800881c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	8b5b      	ldrh	r3, [r3, #26]
 800880c:	f043 0302 	orr.w	r3, r3, #2
 8008810:	b29a      	uxth	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f003 fe42 	bl	800c4a0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	08013890 	.word	0x08013890
 8008828:	08013b2c 	.word	0x08013b2c
 800882c:	080138d4 	.word	0x080138d4
 8008830:	08013b44 	.word	0x08013b44

08008834 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008834:	b5b0      	push	{r4, r5, r7, lr}
 8008836:	b090      	sub	sp, #64	; 0x40
 8008838:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008840:	4b94      	ldr	r3, [pc, #592]	; (8008a94 <tcp_slowtmr+0x260>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3301      	adds	r3, #1
 8008846:	4a93      	ldr	r2, [pc, #588]	; (8008a94 <tcp_slowtmr+0x260>)
 8008848:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800884a:	4b93      	ldr	r3, [pc, #588]	; (8008a98 <tcp_slowtmr+0x264>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	3301      	adds	r3, #1
 8008850:	b2da      	uxtb	r2, r3
 8008852:	4b91      	ldr	r3, [pc, #580]	; (8008a98 <tcp_slowtmr+0x264>)
 8008854:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008856:	2300      	movs	r3, #0
 8008858:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800885a:	4b90      	ldr	r3, [pc, #576]	; (8008a9c <tcp_slowtmr+0x268>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008860:	e29f      	b.n	8008da2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008864:	7d1b      	ldrb	r3, [r3, #20]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d106      	bne.n	8008878 <tcp_slowtmr+0x44>
 800886a:	4b8d      	ldr	r3, [pc, #564]	; (8008aa0 <tcp_slowtmr+0x26c>)
 800886c:	f240 42be 	movw	r2, #1214	; 0x4be
 8008870:	498c      	ldr	r1, [pc, #560]	; (8008aa4 <tcp_slowtmr+0x270>)
 8008872:	488d      	ldr	r0, [pc, #564]	; (8008aa8 <tcp_slowtmr+0x274>)
 8008874:	f008 f8ba 	bl	80109ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	7d1b      	ldrb	r3, [r3, #20]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d106      	bne.n	800888e <tcp_slowtmr+0x5a>
 8008880:	4b87      	ldr	r3, [pc, #540]	; (8008aa0 <tcp_slowtmr+0x26c>)
 8008882:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008886:	4989      	ldr	r1, [pc, #548]	; (8008aac <tcp_slowtmr+0x278>)
 8008888:	4887      	ldr	r0, [pc, #540]	; (8008aa8 <tcp_slowtmr+0x274>)
 800888a:	f008 f8af 	bl	80109ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800888e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008890:	7d1b      	ldrb	r3, [r3, #20]
 8008892:	2b0a      	cmp	r3, #10
 8008894:	d106      	bne.n	80088a4 <tcp_slowtmr+0x70>
 8008896:	4b82      	ldr	r3, [pc, #520]	; (8008aa0 <tcp_slowtmr+0x26c>)
 8008898:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800889c:	4984      	ldr	r1, [pc, #528]	; (8008ab0 <tcp_slowtmr+0x27c>)
 800889e:	4882      	ldr	r0, [pc, #520]	; (8008aa8 <tcp_slowtmr+0x274>)
 80088a0:	f008 f8a4 	bl	80109ec <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80088a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a6:	7f9a      	ldrb	r2, [r3, #30]
 80088a8:	4b7b      	ldr	r3, [pc, #492]	; (8008a98 <tcp_slowtmr+0x264>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d105      	bne.n	80088bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80088b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80088ba:	e272      	b.n	8008da2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80088bc:	4b76      	ldr	r3, [pc, #472]	; (8008a98 <tcp_slowtmr+0x264>)
 80088be:	781a      	ldrb	r2, [r3, #0]
 80088c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80088d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d2:	7d1b      	ldrb	r3, [r3, #20]
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d10a      	bne.n	80088ee <tcp_slowtmr+0xba>
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088de:	2b05      	cmp	r3, #5
 80088e0:	d905      	bls.n	80088ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 80088e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088e6:	3301      	adds	r3, #1
 80088e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088ec:	e11e      	b.n	8008b2c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80088ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088f4:	2b0b      	cmp	r3, #11
 80088f6:	d905      	bls.n	8008904 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80088f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088fc:	3301      	adds	r3, #1
 80088fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008902:	e113      	b.n	8008b2c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800890a:	2b00      	cmp	r3, #0
 800890c:	d075      	beq.n	80089fa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800890e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008912:	2b00      	cmp	r3, #0
 8008914:	d006      	beq.n	8008924 <tcp_slowtmr+0xf0>
 8008916:	4b62      	ldr	r3, [pc, #392]	; (8008aa0 <tcp_slowtmr+0x26c>)
 8008918:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800891c:	4965      	ldr	r1, [pc, #404]	; (8008ab4 <tcp_slowtmr+0x280>)
 800891e:	4862      	ldr	r0, [pc, #392]	; (8008aa8 <tcp_slowtmr+0x274>)
 8008920:	f008 f864 	bl	80109ec <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008928:	2b00      	cmp	r3, #0
 800892a:	d106      	bne.n	800893a <tcp_slowtmr+0x106>
 800892c:	4b5c      	ldr	r3, [pc, #368]	; (8008aa0 <tcp_slowtmr+0x26c>)
 800892e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008932:	4961      	ldr	r1, [pc, #388]	; (8008ab8 <tcp_slowtmr+0x284>)
 8008934:	485c      	ldr	r0, [pc, #368]	; (8008aa8 <tcp_slowtmr+0x274>)
 8008936:	f008 f859 	bl	80109ec <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800893a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008940:	2b0b      	cmp	r3, #11
 8008942:	d905      	bls.n	8008950 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008948:	3301      	adds	r3, #1
 800894a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800894e:	e0ed      	b.n	8008b2c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008956:	3b01      	subs	r3, #1
 8008958:	4a58      	ldr	r2, [pc, #352]	; (8008abc <tcp_slowtmr+0x288>)
 800895a:	5cd3      	ldrb	r3, [r2, r3]
 800895c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800895e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008960:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008964:	7c7a      	ldrb	r2, [r7, #17]
 8008966:	429a      	cmp	r2, r3
 8008968:	d907      	bls.n	800897a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800896a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008970:	3301      	adds	r3, #1
 8008972:	b2da      	uxtb	r2, r3
 8008974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008976:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800897a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008980:	7c7a      	ldrb	r2, [r7, #17]
 8008982:	429a      	cmp	r2, r3
 8008984:	f200 80d2 	bhi.w	8008b2c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008988:	2301      	movs	r3, #1
 800898a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800898c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008992:	2b00      	cmp	r3, #0
 8008994:	d108      	bne.n	80089a8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008996:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008998:	f004 fc2a 	bl	800d1f0 <tcp_zero_window_probe>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d014      	beq.n	80089cc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80089a2:	2300      	movs	r3, #0
 80089a4:	623b      	str	r3, [r7, #32]
 80089a6:	e011      	b.n	80089cc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80089a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089ae:	4619      	mov	r1, r3
 80089b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089b2:	f003 faef 	bl	800bf94 <tcp_split_unsent_seg>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d107      	bne.n	80089cc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80089bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089be:	f003 fd6f 	bl	800c4a0 <tcp_output>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80089c8:	2300      	movs	r3, #0
 80089ca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 80ac 	beq.w	8008b2c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80089d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80089dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80089e2:	2b06      	cmp	r3, #6
 80089e4:	f200 80a2 	bhi.w	8008b2c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80089e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80089ee:	3301      	adds	r3, #1
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80089f8:	e098      	b.n	8008b2c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80089fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	db0f      	blt.n	8008a24 <tcp_slowtmr+0x1f0>
 8008a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a06:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008a0a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d008      	beq.n	8008a24 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8008a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	b21a      	sxth	r2, r3
 8008a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a22:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a26:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008a30:	429a      	cmp	r2, r3
 8008a32:	db7b      	blt.n	8008b2c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008a34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a36:	f004 f827 	bl	800ca88 <tcp_rexmit_rto_prepare>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d007      	beq.n	8008a50 <tcp_slowtmr+0x21c>
 8008a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d171      	bne.n	8008b2c <tcp_slowtmr+0x2f8>
 8008a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d06d      	beq.n	8008b2c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a52:	7d1b      	ldrb	r3, [r3, #20]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d03a      	beq.n	8008ace <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a5e:	2b0c      	cmp	r3, #12
 8008a60:	bf28      	it	cs
 8008a62:	230c      	movcs	r3, #12
 8008a64:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008a6c:	10db      	asrs	r3, r3, #3
 8008a6e:	b21b      	sxth	r3, r3
 8008a70:	461a      	mov	r2, r3
 8008a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a78:	4413      	add	r3, r2
 8008a7a:	7efa      	ldrb	r2, [r7, #27]
 8008a7c:	4910      	ldr	r1, [pc, #64]	; (8008ac0 <tcp_slowtmr+0x28c>)
 8008a7e:	5c8a      	ldrb	r2, [r1, r2]
 8008a80:	4093      	lsls	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	dc1a      	bgt.n	8008ac4 <tcp_slowtmr+0x290>
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	b21a      	sxth	r2, r3
 8008a92:	e019      	b.n	8008ac8 <tcp_slowtmr+0x294>
 8008a94:	2000ade4 	.word	0x2000ade4
 8008a98:	20000866 	.word	0x20000866
 8008a9c:	2000ade0 	.word	0x2000ade0
 8008aa0:	08013890 	.word	0x08013890
 8008aa4:	08013bd4 	.word	0x08013bd4
 8008aa8:	080138d4 	.word	0x080138d4
 8008aac:	08013c00 	.word	0x08013c00
 8008ab0:	08013c2c 	.word	0x08013c2c
 8008ab4:	08013c5c 	.word	0x08013c5c
 8008ab8:	08013c90 	.word	0x08013c90
 8008abc:	08016068 	.word	0x08016068
 8008ac0:	08016058 	.word	0x08016058
 8008ac4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008adc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	bf28      	it	cs
 8008ae4:	4613      	movcs	r3, r2
 8008ae6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008ae8:	8a7b      	ldrh	r3, [r7, #18]
 8008aea:	085b      	lsrs	r3, r3, #1
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008afe:	005b      	lsls	r3, r3, #1
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d206      	bcs.n	8008b14 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b20:	2200      	movs	r2, #0
 8008b22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b28:	f004 f81e 	bl	800cb68 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2e:	7d1b      	ldrb	r3, [r3, #20]
 8008b30:	2b06      	cmp	r3, #6
 8008b32:	d111      	bne.n	8008b58 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b36:	8b5b      	ldrh	r3, [r3, #26]
 8008b38:	f003 0310 	and.w	r3, r3, #16
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00b      	beq.n	8008b58 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b40:	4b9d      	ldr	r3, [pc, #628]	; (8008db8 <tcp_slowtmr+0x584>)
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b46:	6a1b      	ldr	r3, [r3, #32]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	2b28      	cmp	r3, #40	; 0x28
 8008b4c:	d904      	bls.n	8008b58 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b52:	3301      	adds	r3, #1
 8008b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5a:	7a5b      	ldrb	r3, [r3, #9]
 8008b5c:	f003 0308 	and.w	r3, r3, #8
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d04c      	beq.n	8008bfe <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b68:	2b04      	cmp	r3, #4
 8008b6a:	d003      	beq.n	8008b74 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008b70:	2b07      	cmp	r3, #7
 8008b72:	d144      	bne.n	8008bfe <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b74:	4b90      	ldr	r3, [pc, #576]	; (8008db8 <tcp_slowtmr+0x584>)
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7a:	6a1b      	ldr	r3, [r3, #32]
 8008b7c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b84:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8008b88:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8008b8c:	498b      	ldr	r1, [pc, #556]	; (8008dbc <tcp_slowtmr+0x588>)
 8008b8e:	fba1 1303 	umull	r1, r3, r1, r3
 8008b92:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d90a      	bls.n	8008bae <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8008ba2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008bac:	e027      	b.n	8008bfe <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bae:	4b82      	ldr	r3, [pc, #520]	; (8008db8 <tcp_slowtmr+0x584>)
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	4b7e      	ldr	r3, [pc, #504]	; (8008dc0 <tcp_slowtmr+0x58c>)
 8008bc8:	fb00 f303 	mul.w	r3, r0, r3
 8008bcc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008bce:	497b      	ldr	r1, [pc, #492]	; (8008dbc <tcp_slowtmr+0x588>)
 8008bd0:	fba1 1303 	umull	r1, r3, r1, r3
 8008bd4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d911      	bls.n	8008bfe <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8008bda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bdc:	f004 fac8 	bl	800d170 <tcp_keepalive>
 8008be0:	4603      	mov	r3, r0
 8008be2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8008be6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d107      	bne.n	8008bfe <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d011      	beq.n	8008c2a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008c06:	4b6c      	ldr	r3, [pc, #432]	; (8008db8 <tcp_slowtmr+0x584>)
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	1ad2      	subs	r2, r2, r3
 8008c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c12:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008c16:	4619      	mov	r1, r3
 8008c18:	460b      	mov	r3, r1
 8008c1a:	005b      	lsls	r3, r3, #1
 8008c1c:	440b      	add	r3, r1
 8008c1e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d302      	bcc.n	8008c2a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008c24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c26:	f000 fddb 	bl	80097e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2c:	7d1b      	ldrb	r3, [r3, #20]
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d10b      	bne.n	8008c4a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c32:	4b61      	ldr	r3, [pc, #388]	; (8008db8 <tcp_slowtmr+0x584>)
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	2b28      	cmp	r3, #40	; 0x28
 8008c3e:	d904      	bls.n	8008c4a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c44:	3301      	adds	r3, #1
 8008c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4c:	7d1b      	ldrb	r3, [r3, #20]
 8008c4e:	2b09      	cmp	r3, #9
 8008c50:	d10b      	bne.n	8008c6a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008c52:	4b59      	ldr	r3, [pc, #356]	; (8008db8 <tcp_slowtmr+0x584>)
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	2bf0      	cmp	r3, #240	; 0xf0
 8008c5e:	d904      	bls.n	8008c6a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8008c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c64:	3301      	adds	r3, #1
 8008c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d060      	beq.n	8008d34 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c78:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008c7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c7c:	f000 fbfc 	bl	8009478 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d010      	beq.n	8008ca8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008c86:	4b4f      	ldr	r3, [pc, #316]	; (8008dc4 <tcp_slowtmr+0x590>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d106      	bne.n	8008c9e <tcp_slowtmr+0x46a>
 8008c90:	4b4d      	ldr	r3, [pc, #308]	; (8008dc8 <tcp_slowtmr+0x594>)
 8008c92:	f240 526d 	movw	r2, #1389	; 0x56d
 8008c96:	494d      	ldr	r1, [pc, #308]	; (8008dcc <tcp_slowtmr+0x598>)
 8008c98:	484d      	ldr	r0, [pc, #308]	; (8008dd0 <tcp_slowtmr+0x59c>)
 8008c9a:	f007 fea7 	bl	80109ec <iprintf>
        prev->next = pcb->next;
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca0:	68da      	ldr	r2, [r3, #12]
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	60da      	str	r2, [r3, #12]
 8008ca6:	e00f      	b.n	8008cc8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008ca8:	4b46      	ldr	r3, [pc, #280]	; (8008dc4 <tcp_slowtmr+0x590>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d006      	beq.n	8008cc0 <tcp_slowtmr+0x48c>
 8008cb2:	4b45      	ldr	r3, [pc, #276]	; (8008dc8 <tcp_slowtmr+0x594>)
 8008cb4:	f240 5271 	movw	r2, #1393	; 0x571
 8008cb8:	4946      	ldr	r1, [pc, #280]	; (8008dd4 <tcp_slowtmr+0x5a0>)
 8008cba:	4845      	ldr	r0, [pc, #276]	; (8008dd0 <tcp_slowtmr+0x59c>)
 8008cbc:	f007 fe96 	bl	80109ec <iprintf>
        tcp_active_pcbs = pcb->next;
 8008cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	4a3f      	ldr	r2, [pc, #252]	; (8008dc4 <tcp_slowtmr+0x590>)
 8008cc6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008cc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d013      	beq.n	8008cf8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008cd8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cdc:	3304      	adds	r3, #4
 8008cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ce0:	8ad2      	ldrh	r2, [r2, #22]
 8008ce2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ce4:	8b09      	ldrh	r1, [r1, #24]
 8008ce6:	9102      	str	r1, [sp, #8]
 8008ce8:	9201      	str	r2, [sp, #4]
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	462b      	mov	r3, r5
 8008cee:	4622      	mov	r2, r4
 8008cf0:	4601      	mov	r1, r0
 8008cf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cf4:	f004 f988 	bl	800d008 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d00:	7d1b      	ldrb	r3, [r3, #20]
 8008d02:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d06:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008d0e:	6838      	ldr	r0, [r7, #0]
 8008d10:	f7ff f9f2 	bl	80080f8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008d14:	4b30      	ldr	r3, [pc, #192]	; (8008dd8 <tcp_slowtmr+0x5a4>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d004      	beq.n	8008d2a <tcp_slowtmr+0x4f6>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f06f 010c 	mvn.w	r1, #12
 8008d26:	68b8      	ldr	r0, [r7, #8]
 8008d28:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008d2a:	4b2b      	ldr	r3, [pc, #172]	; (8008dd8 <tcp_slowtmr+0x5a4>)
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d037      	beq.n	8008da2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8008d32:	e590      	b.n	8008856 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d40:	7f1b      	ldrb	r3, [r3, #28]
 8008d42:	3301      	adds	r3, #1
 8008d44:	b2da      	uxtb	r2, r3
 8008d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d48:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4c:	7f1a      	ldrb	r2, [r3, #28]
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	7f5b      	ldrb	r3, [r3, #29]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d325      	bcc.n	8008da2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8008d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d58:	2200      	movs	r2, #0
 8008d5a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008d5c:	4b1e      	ldr	r3, [pc, #120]	; (8008dd8 <tcp_slowtmr+0x5a4>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00b      	beq.n	8008d84 <tcp_slowtmr+0x550>
 8008d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d74:	6912      	ldr	r2, [r2, #16]
 8008d76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d78:	4610      	mov	r0, r2
 8008d7a:	4798      	blx	r3
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008d82:	e002      	b.n	8008d8a <tcp_slowtmr+0x556>
 8008d84:	2300      	movs	r3, #0
 8008d86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008d8a:	4b13      	ldr	r3, [pc, #76]	; (8008dd8 <tcp_slowtmr+0x5a4>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d000      	beq.n	8008d94 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8008d92:	e560      	b.n	8008856 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008d94:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d102      	bne.n	8008da2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8008d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d9e:	f003 fb7f 	bl	800c4a0 <tcp_output>
  while (pcb != NULL) {
 8008da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f47f ad5c 	bne.w	8008862 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008dae:	4b0b      	ldr	r3, [pc, #44]	; (8008ddc <tcp_slowtmr+0x5a8>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008db4:	e067      	b.n	8008e86 <tcp_slowtmr+0x652>
 8008db6:	bf00      	nop
 8008db8:	2000ade4 	.word	0x2000ade4
 8008dbc:	10624dd3 	.word	0x10624dd3
 8008dc0:	000124f8 	.word	0x000124f8
 8008dc4:	2000ade0 	.word	0x2000ade0
 8008dc8:	08013890 	.word	0x08013890
 8008dcc:	08013cc8 	.word	0x08013cc8
 8008dd0:	080138d4 	.word	0x080138d4
 8008dd4:	08013cf4 	.word	0x08013cf4
 8008dd8:	2000addc 	.word	0x2000addc
 8008ddc:	2000adf0 	.word	0x2000adf0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de2:	7d1b      	ldrb	r3, [r3, #20]
 8008de4:	2b0a      	cmp	r3, #10
 8008de6:	d006      	beq.n	8008df6 <tcp_slowtmr+0x5c2>
 8008de8:	4b2b      	ldr	r3, [pc, #172]	; (8008e98 <tcp_slowtmr+0x664>)
 8008dea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008dee:	492b      	ldr	r1, [pc, #172]	; (8008e9c <tcp_slowtmr+0x668>)
 8008df0:	482b      	ldr	r0, [pc, #172]	; (8008ea0 <tcp_slowtmr+0x66c>)
 8008df2:	f007 fdfb 	bl	80109ec <iprintf>
    pcb_remove = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008dfc:	4b29      	ldr	r3, [pc, #164]	; (8008ea4 <tcp_slowtmr+0x670>)
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	2bf0      	cmp	r3, #240	; 0xf0
 8008e08:	d904      	bls.n	8008e14 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e0e:	3301      	adds	r3, #1
 8008e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d02f      	beq.n	8008e7c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008e1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e1e:	f000 fb2b 	bl	8009478 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d010      	beq.n	8008e4a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008e28:	4b1f      	ldr	r3, [pc, #124]	; (8008ea8 <tcp_slowtmr+0x674>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d106      	bne.n	8008e40 <tcp_slowtmr+0x60c>
 8008e32:	4b19      	ldr	r3, [pc, #100]	; (8008e98 <tcp_slowtmr+0x664>)
 8008e34:	f240 52af 	movw	r2, #1455	; 0x5af
 8008e38:	491c      	ldr	r1, [pc, #112]	; (8008eac <tcp_slowtmr+0x678>)
 8008e3a:	4819      	ldr	r0, [pc, #100]	; (8008ea0 <tcp_slowtmr+0x66c>)
 8008e3c:	f007 fdd6 	bl	80109ec <iprintf>
        prev->next = pcb->next;
 8008e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e42:	68da      	ldr	r2, [r3, #12]
 8008e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e46:	60da      	str	r2, [r3, #12]
 8008e48:	e00f      	b.n	8008e6a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008e4a:	4b17      	ldr	r3, [pc, #92]	; (8008ea8 <tcp_slowtmr+0x674>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d006      	beq.n	8008e62 <tcp_slowtmr+0x62e>
 8008e54:	4b10      	ldr	r3, [pc, #64]	; (8008e98 <tcp_slowtmr+0x664>)
 8008e56:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008e5a:	4915      	ldr	r1, [pc, #84]	; (8008eb0 <tcp_slowtmr+0x67c>)
 8008e5c:	4810      	ldr	r0, [pc, #64]	; (8008ea0 <tcp_slowtmr+0x66c>)
 8008e5e:	f007 fdc5 	bl	80109ec <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	4a10      	ldr	r2, [pc, #64]	; (8008ea8 <tcp_slowtmr+0x674>)
 8008e68:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008e74:	69f8      	ldr	r0, [r7, #28]
 8008e76:	f7ff f93f 	bl	80080f8 <tcp_free>
 8008e7a:	e004      	b.n	8008e86 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1a9      	bne.n	8008de0 <tcp_slowtmr+0x5ac>
    }
  }
}
 8008e8c:	bf00      	nop
 8008e8e:	bf00      	nop
 8008e90:	3730      	adds	r7, #48	; 0x30
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bdb0      	pop	{r4, r5, r7, pc}
 8008e96:	bf00      	nop
 8008e98:	08013890 	.word	0x08013890
 8008e9c:	08013d20 	.word	0x08013d20
 8008ea0:	080138d4 	.word	0x080138d4
 8008ea4:	2000ade4 	.word	0x2000ade4
 8008ea8:	2000adf0 	.word	0x2000adf0
 8008eac:	08013d50 	.word	0x08013d50
 8008eb0:	08013d78 	.word	0x08013d78

08008eb4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008eba:	4b2d      	ldr	r3, [pc, #180]	; (8008f70 <tcp_fasttmr+0xbc>)
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	4b2b      	ldr	r3, [pc, #172]	; (8008f70 <tcp_fasttmr+0xbc>)
 8008ec4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008ec6:	4b2b      	ldr	r3, [pc, #172]	; (8008f74 <tcp_fasttmr+0xc0>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008ecc:	e048      	b.n	8008f60 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	7f9a      	ldrb	r2, [r3, #30]
 8008ed2:	4b27      	ldr	r3, [pc, #156]	; (8008f70 <tcp_fasttmr+0xbc>)
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d03f      	beq.n	8008f5a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008eda:	4b25      	ldr	r3, [pc, #148]	; (8008f70 <tcp_fasttmr+0xbc>)
 8008edc:	781a      	ldrb	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	8b5b      	ldrh	r3, [r3, #26]
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d010      	beq.n	8008f10 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	8b5b      	ldrh	r3, [r3, #26]
 8008ef2:	f043 0302 	orr.w	r3, r3, #2
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f003 facf 	bl	800c4a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	8b5b      	ldrh	r3, [r3, #26]
 8008f06:	f023 0303 	bic.w	r3, r3, #3
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	8b5b      	ldrh	r3, [r3, #26]
 8008f14:	f003 0308 	and.w	r3, r3, #8
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d009      	beq.n	8008f30 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	8b5b      	ldrh	r3, [r3, #26]
 8008f20:	f023 0308 	bic.w	r3, r3, #8
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7ff fa78 	bl	8008420 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00a      	beq.n	8008f54 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008f3e:	4b0e      	ldr	r3, [pc, #56]	; (8008f78 <tcp_fasttmr+0xc4>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f819 	bl	8008f7c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008f4a:	4b0b      	ldr	r3, [pc, #44]	; (8008f78 <tcp_fasttmr+0xc4>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d000      	beq.n	8008f54 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008f52:	e7b8      	b.n	8008ec6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	607b      	str	r3, [r7, #4]
 8008f58:	e002      	b.n	8008f60 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1b3      	bne.n	8008ece <tcp_fasttmr+0x1a>
    }
  }
}
 8008f66:	bf00      	nop
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20000866 	.word	0x20000866
 8008f74:	2000ade0 	.word	0x2000ade0
 8008f78:	2000addc 	.word	0x2000addc

08008f7c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008f7c:	b590      	push	{r4, r7, lr}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d109      	bne.n	8008f9e <tcp_process_refused_data+0x22>
 8008f8a:	4b37      	ldr	r3, [pc, #220]	; (8009068 <tcp_process_refused_data+0xec>)
 8008f8c:	f240 6209 	movw	r2, #1545	; 0x609
 8008f90:	4936      	ldr	r1, [pc, #216]	; (800906c <tcp_process_refused_data+0xf0>)
 8008f92:	4837      	ldr	r0, [pc, #220]	; (8009070 <tcp_process_refused_data+0xf4>)
 8008f94:	f007 fd2a 	bl	80109ec <iprintf>
 8008f98:	f06f 030f 	mvn.w	r3, #15
 8008f9c:	e060      	b.n	8009060 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fa2:	7b5b      	ldrb	r3, [r3, #13]
 8008fa4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008faa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00b      	beq.n	8008fd4 <tcp_process_refused_data+0x58>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6918      	ldr	r0, [r3, #16]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	47a0      	blx	r4
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73fb      	strb	r3, [r7, #15]
 8008fd2:	e007      	b.n	8008fe4 <tcp_process_refused_data+0x68>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	2000      	movs	r0, #0
 8008fdc:	f000 f8a4 	bl	8009128 <tcp_recv_null>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d12a      	bne.n	8009042 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d033      	beq.n	800905e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ffa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008ffe:	d005      	beq.n	800900c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009004:	3301      	adds	r3, #1
 8009006:	b29a      	uxth	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00b      	beq.n	800902e <tcp_process_refused_data+0xb2>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6918      	ldr	r0, [r3, #16]
 8009020:	2300      	movs	r3, #0
 8009022:	2200      	movs	r2, #0
 8009024:	6879      	ldr	r1, [r7, #4]
 8009026:	47a0      	blx	r4
 8009028:	4603      	mov	r3, r0
 800902a:	73fb      	strb	r3, [r7, #15]
 800902c:	e001      	b.n	8009032 <tcp_process_refused_data+0xb6>
 800902e:	2300      	movs	r3, #0
 8009030:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009036:	f113 0f0d 	cmn.w	r3, #13
 800903a:	d110      	bne.n	800905e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800903c:	f06f 030c 	mvn.w	r3, #12
 8009040:	e00e      	b.n	8009060 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009046:	f113 0f0d 	cmn.w	r3, #13
 800904a:	d102      	bne.n	8009052 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800904c:	f06f 030c 	mvn.w	r3, #12
 8009050:	e006      	b.n	8009060 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68ba      	ldr	r2, [r7, #8]
 8009056:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009058:	f06f 0304 	mvn.w	r3, #4
 800905c:	e000      	b.n	8009060 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3714      	adds	r7, #20
 8009064:	46bd      	mov	sp, r7
 8009066:	bd90      	pop	{r4, r7, pc}
 8009068:	08013890 	.word	0x08013890
 800906c:	08013da0 	.word	0x08013da0
 8009070:	080138d4 	.word	0x080138d4

08009074 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800907c:	e007      	b.n	800908e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f80a 	bl	800909e <tcp_seg_free>
    seg = next;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1f4      	bne.n	800907e <tcp_segs_free+0xa>
  }
}
 8009094:	bf00      	nop
 8009096:	bf00      	nop
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b082      	sub	sp, #8
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00c      	beq.n	80090c6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d004      	beq.n	80090be <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fe fd7d 	bl	8007bb8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	2003      	movs	r0, #3
 80090c2:	f7fd ff03 	bl	8006ecc <memp_free>
  }
}
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d106      	bne.n	80090ec <tcp_seg_copy+0x1c>
 80090de:	4b0f      	ldr	r3, [pc, #60]	; (800911c <tcp_seg_copy+0x4c>)
 80090e0:	f240 6282 	movw	r2, #1666	; 0x682
 80090e4:	490e      	ldr	r1, [pc, #56]	; (8009120 <tcp_seg_copy+0x50>)
 80090e6:	480f      	ldr	r0, [pc, #60]	; (8009124 <tcp_seg_copy+0x54>)
 80090e8:	f007 fc80 	bl	80109ec <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80090ec:	2003      	movs	r0, #3
 80090ee:	f7fd fe7d 	bl	8006dec <memp_malloc>
 80090f2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <tcp_seg_copy+0x2e>
    return NULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	e00a      	b.n	8009114 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80090fe:	2210      	movs	r2, #16
 8009100:	6879      	ldr	r1, [r7, #4]
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f007 fd8b 	bl	8010c1e <memcpy>
  pbuf_ref(cseg->p);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	4618      	mov	r0, r3
 800910e:	f7fe fdf3 	bl	8007cf8 <pbuf_ref>
  return cseg;
 8009112:	68fb      	ldr	r3, [r7, #12]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	08013890 	.word	0x08013890
 8009120:	08013de4 	.word	0x08013de4
 8009124:	080138d4 	.word	0x080138d4

08009128 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
 8009134:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d109      	bne.n	8009150 <tcp_recv_null+0x28>
 800913c:	4b12      	ldr	r3, [pc, #72]	; (8009188 <tcp_recv_null+0x60>)
 800913e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009142:	4912      	ldr	r1, [pc, #72]	; (800918c <tcp_recv_null+0x64>)
 8009144:	4812      	ldr	r0, [pc, #72]	; (8009190 <tcp_recv_null+0x68>)
 8009146:	f007 fc51 	bl	80109ec <iprintf>
 800914a:	f06f 030f 	mvn.w	r3, #15
 800914e:	e016      	b.n	800917e <tcp_recv_null+0x56>

  if (p != NULL) {
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d009      	beq.n	800916a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	891b      	ldrh	r3, [r3, #8]
 800915a:	4619      	mov	r1, r3
 800915c:	68b8      	ldr	r0, [r7, #8]
 800915e:	f7ff fb19 	bl	8008794 <tcp_recved>
    pbuf_free(p);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7fe fd28 	bl	8007bb8 <pbuf_free>
 8009168:	e008      	b.n	800917c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800916a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d104      	bne.n	800917c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009172:	68b8      	ldr	r0, [r7, #8]
 8009174:	f7ff f9be 	bl	80084f4 <tcp_close>
 8009178:	4603      	mov	r3, r0
 800917a:	e000      	b.n	800917e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	08013890 	.word	0x08013890
 800918c:	08013e00 	.word	0x08013e00
 8009190:	080138d4 	.word	0x080138d4

08009194 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	4603      	mov	r3, r0
 800919c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800919e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	db01      	blt.n	80091aa <tcp_kill_prio+0x16>
 80091a6:	79fb      	ldrb	r3, [r7, #7]
 80091a8:	e000      	b.n	80091ac <tcp_kill_prio+0x18>
 80091aa:	237f      	movs	r3, #127	; 0x7f
 80091ac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80091ae:	7afb      	ldrb	r3, [r7, #11]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d034      	beq.n	800921e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80091b4:	7afb      	ldrb	r3, [r7, #11]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80091ba:	2300      	movs	r3, #0
 80091bc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80091be:	2300      	movs	r3, #0
 80091c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80091c2:	4b19      	ldr	r3, [pc, #100]	; (8009228 <tcp_kill_prio+0x94>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	617b      	str	r3, [r7, #20]
 80091c8:	e01f      	b.n	800920a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	7d5b      	ldrb	r3, [r3, #21]
 80091ce:	7afa      	ldrb	r2, [r7, #11]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d80c      	bhi.n	80091ee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80091d8:	7afa      	ldrb	r2, [r7, #11]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d112      	bne.n	8009204 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091de:	4b13      	ldr	r3, [pc, #76]	; (800922c <tcp_kill_prio+0x98>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d80a      	bhi.n	8009204 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80091ee:	4b0f      	ldr	r3, [pc, #60]	; (800922c <tcp_kill_prio+0x98>)
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	7d5b      	ldrb	r3, [r3, #21]
 8009202:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	617b      	str	r3, [r7, #20]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1dc      	bne.n	80091ca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d004      	beq.n	8009220 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009216:	6938      	ldr	r0, [r7, #16]
 8009218:	f7ff fa56 	bl	80086c8 <tcp_abort>
 800921c:	e000      	b.n	8009220 <tcp_kill_prio+0x8c>
    return;
 800921e:	bf00      	nop
  }
}
 8009220:	3718      	adds	r7, #24
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	2000ade0 	.word	0x2000ade0
 800922c:	2000ade4 	.word	0x2000ade4

08009230 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800923a:	79fb      	ldrb	r3, [r7, #7]
 800923c:	2b08      	cmp	r3, #8
 800923e:	d009      	beq.n	8009254 <tcp_kill_state+0x24>
 8009240:	79fb      	ldrb	r3, [r7, #7]
 8009242:	2b09      	cmp	r3, #9
 8009244:	d006      	beq.n	8009254 <tcp_kill_state+0x24>
 8009246:	4b1a      	ldr	r3, [pc, #104]	; (80092b0 <tcp_kill_state+0x80>)
 8009248:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800924c:	4919      	ldr	r1, [pc, #100]	; (80092b4 <tcp_kill_state+0x84>)
 800924e:	481a      	ldr	r0, [pc, #104]	; (80092b8 <tcp_kill_state+0x88>)
 8009250:	f007 fbcc 	bl	80109ec <iprintf>

  inactivity = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009258:	2300      	movs	r3, #0
 800925a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800925c:	4b17      	ldr	r3, [pc, #92]	; (80092bc <tcp_kill_state+0x8c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	617b      	str	r3, [r7, #20]
 8009262:	e017      	b.n	8009294 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	7d1b      	ldrb	r3, [r3, #20]
 8009268:	79fa      	ldrb	r2, [r7, #7]
 800926a:	429a      	cmp	r2, r3
 800926c:	d10f      	bne.n	800928e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800926e:	4b14      	ldr	r3, [pc, #80]	; (80092c0 <tcp_kill_state+0x90>)
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	429a      	cmp	r2, r3
 800927c:	d807      	bhi.n	800928e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800927e:	4b10      	ldr	r3, [pc, #64]	; (80092c0 <tcp_kill_state+0x90>)
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	617b      	str	r3, [r7, #20]
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1e4      	bne.n	8009264 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d003      	beq.n	80092a8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80092a0:	2100      	movs	r1, #0
 80092a2:	6938      	ldr	r0, [r7, #16]
 80092a4:	f7ff f952 	bl	800854c <tcp_abandon>
  }
}
 80092a8:	bf00      	nop
 80092aa:	3718      	adds	r7, #24
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	08013890 	.word	0x08013890
 80092b4:	08013e1c 	.word	0x08013e1c
 80092b8:	080138d4 	.word	0x080138d4
 80092bc:	2000ade0 	.word	0x2000ade0
 80092c0:	2000ade4 	.word	0x2000ade4

080092c4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80092ce:	2300      	movs	r3, #0
 80092d0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092d2:	4b12      	ldr	r3, [pc, #72]	; (800931c <tcp_kill_timewait+0x58>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	e012      	b.n	8009300 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80092da:	4b11      	ldr	r3, [pc, #68]	; (8009320 <tcp_kill_timewait+0x5c>)
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d807      	bhi.n	80092fa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80092ea:	4b0d      	ldr	r3, [pc, #52]	; (8009320 <tcp_kill_timewait+0x5c>)
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	60fb      	str	r3, [r7, #12]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1e9      	bne.n	80092da <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800930c:	68b8      	ldr	r0, [r7, #8]
 800930e:	f7ff f9db 	bl	80086c8 <tcp_abort>
  }
}
 8009312:	bf00      	nop
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	2000adf0 	.word	0x2000adf0
 8009320:	2000ade4 	.word	0x2000ade4

08009324 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800932a:	4b10      	ldr	r3, [pc, #64]	; (800936c <tcp_handle_closepend+0x48>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009330:	e014      	b.n	800935c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	8b5b      	ldrh	r3, [r3, #26]
 800933c:	f003 0308 	and.w	r3, r3, #8
 8009340:	2b00      	cmp	r3, #0
 8009342:	d009      	beq.n	8009358 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	8b5b      	ldrh	r3, [r3, #26]
 8009348:	f023 0308 	bic.w	r3, r3, #8
 800934c:	b29a      	uxth	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7ff f864 	bl	8008420 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e7      	bne.n	8009332 <tcp_handle_closepend+0xe>
  }
}
 8009362:	bf00      	nop
 8009364:	bf00      	nop
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	2000ade0 	.word	0x2000ade0

08009370 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	4603      	mov	r3, r0
 8009378:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800937a:	2001      	movs	r0, #1
 800937c:	f7fd fd36 	bl	8006dec <memp_malloc>
 8009380:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d126      	bne.n	80093d6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009388:	f7ff ffcc 	bl	8009324 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800938c:	f7ff ff9a 	bl	80092c4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009390:	2001      	movs	r0, #1
 8009392:	f7fd fd2b 	bl	8006dec <memp_malloc>
 8009396:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d11b      	bne.n	80093d6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800939e:	2009      	movs	r0, #9
 80093a0:	f7ff ff46 	bl	8009230 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093a4:	2001      	movs	r0, #1
 80093a6:	f7fd fd21 	bl	8006dec <memp_malloc>
 80093aa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d111      	bne.n	80093d6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80093b2:	2008      	movs	r0, #8
 80093b4:	f7ff ff3c 	bl	8009230 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093b8:	2001      	movs	r0, #1
 80093ba:	f7fd fd17 	bl	8006dec <memp_malloc>
 80093be:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d107      	bne.n	80093d6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7ff fee3 	bl	8009194 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093ce:	2001      	movs	r0, #1
 80093d0:	f7fd fd0c 	bl	8006dec <memp_malloc>
 80093d4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d03f      	beq.n	800945c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80093dc:	229c      	movs	r2, #156	; 0x9c
 80093de:	2100      	movs	r1, #0
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f007 fba2 	bl	8010b2a <memset>
    pcb->prio = prio;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	79fa      	ldrb	r2, [r7, #7]
 80093ea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80093f2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80093fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	22ff      	movs	r2, #255	; 0xff
 800940a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009412:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2206      	movs	r2, #6
 8009418:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2206      	movs	r2, #6
 8009420:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009428:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2201      	movs	r2, #1
 800942e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009432:	4b0d      	ldr	r3, [pc, #52]	; (8009468 <tcp_alloc+0xf8>)
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800943a:	4b0c      	ldr	r3, [pc, #48]	; (800946c <tcp_alloc+0xfc>)
 800943c:	781a      	ldrb	r2, [r3, #0]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009448:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4a08      	ldr	r2, [pc, #32]	; (8009470 <tcp_alloc+0x100>)
 8009450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	4a07      	ldr	r2, [pc, #28]	; (8009474 <tcp_alloc+0x104>)
 8009458:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800945c:	68fb      	ldr	r3, [r7, #12]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	2000ade4 	.word	0x2000ade4
 800946c:	20000866 	.word	0x20000866
 8009470:	08009129 	.word	0x08009129
 8009474:	006ddd00 	.word	0x006ddd00

08009478 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d107      	bne.n	8009496 <tcp_pcb_purge+0x1e>
 8009486:	4b21      	ldr	r3, [pc, #132]	; (800950c <tcp_pcb_purge+0x94>)
 8009488:	f640 0251 	movw	r2, #2129	; 0x851
 800948c:	4920      	ldr	r1, [pc, #128]	; (8009510 <tcp_pcb_purge+0x98>)
 800948e:	4821      	ldr	r0, [pc, #132]	; (8009514 <tcp_pcb_purge+0x9c>)
 8009490:	f007 faac 	bl	80109ec <iprintf>
 8009494:	e037      	b.n	8009506 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	7d1b      	ldrb	r3, [r3, #20]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d033      	beq.n	8009506 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80094a2:	2b0a      	cmp	r3, #10
 80094a4:	d02f      	beq.n	8009506 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d02b      	beq.n	8009506 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d007      	beq.n	80094c6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fe fb7c 	bl	8007bb8 <pbuf_free>
      pcb->refused_data = NULL;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f986 	bl	80097e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094da:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7ff fdc7 	bl	8009074 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff fdc2 	bl	8009074 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	08013890 	.word	0x08013890
 8009510:	08013edc 	.word	0x08013edc
 8009514:	080138d4 	.word	0x080138d4

08009518 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d106      	bne.n	8009536 <tcp_pcb_remove+0x1e>
 8009528:	4b3e      	ldr	r3, [pc, #248]	; (8009624 <tcp_pcb_remove+0x10c>)
 800952a:	f640 0283 	movw	r2, #2179	; 0x883
 800952e:	493e      	ldr	r1, [pc, #248]	; (8009628 <tcp_pcb_remove+0x110>)
 8009530:	483e      	ldr	r0, [pc, #248]	; (800962c <tcp_pcb_remove+0x114>)
 8009532:	f007 fa5b 	bl	80109ec <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d106      	bne.n	800954a <tcp_pcb_remove+0x32>
 800953c:	4b39      	ldr	r3, [pc, #228]	; (8009624 <tcp_pcb_remove+0x10c>)
 800953e:	f640 0284 	movw	r2, #2180	; 0x884
 8009542:	493b      	ldr	r1, [pc, #236]	; (8009630 <tcp_pcb_remove+0x118>)
 8009544:	4839      	ldr	r0, [pc, #228]	; (800962c <tcp_pcb_remove+0x114>)
 8009546:	f007 fa51 	bl	80109ec <iprintf>

  TCP_RMV(pcblist, pcb);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	429a      	cmp	r2, r3
 8009552:	d105      	bne.n	8009560 <tcp_pcb_remove+0x48>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68da      	ldr	r2, [r3, #12]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	e013      	b.n	8009588 <tcp_pcb_remove+0x70>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	60fb      	str	r3, [r7, #12]
 8009566:	e00c      	b.n	8009582 <tcp_pcb_remove+0x6a>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	429a      	cmp	r2, r3
 8009570:	d104      	bne.n	800957c <tcp_pcb_remove+0x64>
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	68da      	ldr	r2, [r3, #12]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	60da      	str	r2, [r3, #12]
 800957a:	e005      	b.n	8009588 <tcp_pcb_remove+0x70>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	60fb      	str	r3, [r7, #12]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1ef      	bne.n	8009568 <tcp_pcb_remove+0x50>
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	2200      	movs	r2, #0
 800958c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800958e:	6838      	ldr	r0, [r7, #0]
 8009590:	f7ff ff72 	bl	8009478 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	7d1b      	ldrb	r3, [r3, #20]
 8009598:	2b0a      	cmp	r3, #10
 800959a:	d013      	beq.n	80095c4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d00f      	beq.n	80095c4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	8b5b      	ldrh	r3, [r3, #26]
 80095a8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d009      	beq.n	80095c4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	8b5b      	ldrh	r3, [r3, #26]
 80095b4:	f043 0302 	orr.w	r3, r3, #2
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80095be:	6838      	ldr	r0, [r7, #0]
 80095c0:	f002 ff6e 	bl	800c4a0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	7d1b      	ldrb	r3, [r3, #20]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d020      	beq.n	800960e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d006      	beq.n	80095e2 <tcp_pcb_remove+0xca>
 80095d4:	4b13      	ldr	r3, [pc, #76]	; (8009624 <tcp_pcb_remove+0x10c>)
 80095d6:	f640 0293 	movw	r2, #2195	; 0x893
 80095da:	4916      	ldr	r1, [pc, #88]	; (8009634 <tcp_pcb_remove+0x11c>)
 80095dc:	4813      	ldr	r0, [pc, #76]	; (800962c <tcp_pcb_remove+0x114>)
 80095de:	f007 fa05 	bl	80109ec <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d006      	beq.n	80095f8 <tcp_pcb_remove+0xe0>
 80095ea:	4b0e      	ldr	r3, [pc, #56]	; (8009624 <tcp_pcb_remove+0x10c>)
 80095ec:	f640 0294 	movw	r2, #2196	; 0x894
 80095f0:	4911      	ldr	r1, [pc, #68]	; (8009638 <tcp_pcb_remove+0x120>)
 80095f2:	480e      	ldr	r0, [pc, #56]	; (800962c <tcp_pcb_remove+0x114>)
 80095f4:	f007 f9fa 	bl	80109ec <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d006      	beq.n	800960e <tcp_pcb_remove+0xf6>
 8009600:	4b08      	ldr	r3, [pc, #32]	; (8009624 <tcp_pcb_remove+0x10c>)
 8009602:	f640 0296 	movw	r2, #2198	; 0x896
 8009606:	490d      	ldr	r1, [pc, #52]	; (800963c <tcp_pcb_remove+0x124>)
 8009608:	4808      	ldr	r0, [pc, #32]	; (800962c <tcp_pcb_remove+0x114>)
 800960a:	f007 f9ef 	bl	80109ec <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	2200      	movs	r2, #0
 8009612:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	2200      	movs	r2, #0
 8009618:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800961a:	bf00      	nop
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	08013890 	.word	0x08013890
 8009628:	08013ef8 	.word	0x08013ef8
 800962c:	080138d4 	.word	0x080138d4
 8009630:	08013f14 	.word	0x08013f14
 8009634:	08013f34 	.word	0x08013f34
 8009638:	08013f4c 	.word	0x08013f4c
 800963c:	08013f68 	.word	0x08013f68

08009640 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d106      	bne.n	800965c <tcp_next_iss+0x1c>
 800964e:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <tcp_next_iss+0x38>)
 8009650:	f640 02af 	movw	r2, #2223	; 0x8af
 8009654:	4909      	ldr	r1, [pc, #36]	; (800967c <tcp_next_iss+0x3c>)
 8009656:	480a      	ldr	r0, [pc, #40]	; (8009680 <tcp_next_iss+0x40>)
 8009658:	f007 f9c8 	bl	80109ec <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800965c:	4b09      	ldr	r3, [pc, #36]	; (8009684 <tcp_next_iss+0x44>)
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	4b09      	ldr	r3, [pc, #36]	; (8009688 <tcp_next_iss+0x48>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4413      	add	r3, r2
 8009666:	4a07      	ldr	r2, [pc, #28]	; (8009684 <tcp_next_iss+0x44>)
 8009668:	6013      	str	r3, [r2, #0]
  return iss;
 800966a:	4b06      	ldr	r3, [pc, #24]	; (8009684 <tcp_next_iss+0x44>)
 800966c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800966e:	4618      	mov	r0, r3
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	08013890 	.word	0x08013890
 800967c:	08013f80 	.word	0x08013f80
 8009680:	080138d4 	.word	0x080138d4
 8009684:	2000002c 	.word	0x2000002c
 8009688:	2000ade4 	.word	0x2000ade4

0800968c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	4603      	mov	r3, r0
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
 8009698:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d106      	bne.n	80096ae <tcp_eff_send_mss_netif+0x22>
 80096a0:	4b14      	ldr	r3, [pc, #80]	; (80096f4 <tcp_eff_send_mss_netif+0x68>)
 80096a2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80096a6:	4914      	ldr	r1, [pc, #80]	; (80096f8 <tcp_eff_send_mss_netif+0x6c>)
 80096a8:	4814      	ldr	r0, [pc, #80]	; (80096fc <tcp_eff_send_mss_netif+0x70>)
 80096aa:	f007 f99f 	bl	80109ec <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d101      	bne.n	80096b8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80096b4:	89fb      	ldrh	r3, [r7, #14]
 80096b6:	e019      	b.n	80096ec <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80096bc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80096be:	8afb      	ldrh	r3, [r7, #22]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d012      	beq.n	80096ea <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80096c4:	2328      	movs	r3, #40	; 0x28
 80096c6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80096c8:	8afa      	ldrh	r2, [r7, #22]
 80096ca:	8abb      	ldrh	r3, [r7, #20]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d904      	bls.n	80096da <tcp_eff_send_mss_netif+0x4e>
 80096d0:	8afa      	ldrh	r2, [r7, #22]
 80096d2:	8abb      	ldrh	r3, [r7, #20]
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	e000      	b.n	80096dc <tcp_eff_send_mss_netif+0x50>
 80096da:	2300      	movs	r3, #0
 80096dc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80096de:	8a7a      	ldrh	r2, [r7, #18]
 80096e0:	89fb      	ldrh	r3, [r7, #14]
 80096e2:	4293      	cmp	r3, r2
 80096e4:	bf28      	it	cs
 80096e6:	4613      	movcs	r3, r2
 80096e8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80096ea:	89fb      	ldrh	r3, [r7, #14]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3718      	adds	r7, #24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	08013890 	.word	0x08013890
 80096f8:	08013f9c 	.word	0x08013f9c
 80096fc:	080138d4 	.word	0x080138d4

08009700 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d119      	bne.n	8009748 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009714:	4b10      	ldr	r3, [pc, #64]	; (8009758 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009716:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800971a:	4910      	ldr	r1, [pc, #64]	; (800975c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800971c:	4810      	ldr	r0, [pc, #64]	; (8009760 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800971e:	f007 f965 	bl	80109ec <iprintf>

  while (pcb != NULL) {
 8009722:	e011      	b.n	8009748 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	429a      	cmp	r2, r3
 800972e:	d108      	bne.n	8009742 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f7fe ffc6 	bl	80086c8 <tcp_abort>
      pcb = next;
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	60fb      	str	r3, [r7, #12]
 8009740:	e002      	b.n	8009748 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1ea      	bne.n	8009724 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800974e:	bf00      	nop
 8009750:	bf00      	nop
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	08013890 	.word	0x08013890
 800975c:	08013fc4 	.word	0x08013fc4
 8009760:	080138d4 	.word	0x080138d4

08009764 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d02a      	beq.n	80097ca <tcp_netif_ip_addr_changed+0x66>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d026      	beq.n	80097ca <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800977c:	4b15      	ldr	r3, [pc, #84]	; (80097d4 <tcp_netif_ip_addr_changed+0x70>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4619      	mov	r1, r3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f7ff ffbc 	bl	8009700 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009788:	4b13      	ldr	r3, [pc, #76]	; (80097d8 <tcp_netif_ip_addr_changed+0x74>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7ff ffb6 	bl	8009700 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d017      	beq.n	80097ca <tcp_netif_ip_addr_changed+0x66>
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d013      	beq.n	80097ca <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80097a2:	4b0e      	ldr	r3, [pc, #56]	; (80097dc <tcp_netif_ip_addr_changed+0x78>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	e00c      	b.n	80097c4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d103      	bne.n	80097be <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	60fb      	str	r3, [r7, #12]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1ef      	bne.n	80097aa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80097ca:	bf00      	nop
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	2000ade0 	.word	0x2000ade0
 80097d8:	2000adec 	.word	0x2000adec
 80097dc:	2000ade8 	.word	0x2000ade8

080097e0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d007      	beq.n	8009800 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7ff fc3d 	bl	8009074 <tcp_segs_free>
    pcb->ooseq = NULL;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009800:	bf00      	nop
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009808:	b590      	push	{r4, r7, lr}
 800980a:	b08d      	sub	sp, #52	; 0x34
 800980c:	af04      	add	r7, sp, #16
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d105      	bne.n	8009824 <tcp_input+0x1c>
 8009818:	4b9b      	ldr	r3, [pc, #620]	; (8009a88 <tcp_input+0x280>)
 800981a:	2283      	movs	r2, #131	; 0x83
 800981c:	499b      	ldr	r1, [pc, #620]	; (8009a8c <tcp_input+0x284>)
 800981e:	489c      	ldr	r0, [pc, #624]	; (8009a90 <tcp_input+0x288>)
 8009820:	f007 f8e4 	bl	80109ec <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	4a9a      	ldr	r2, [pc, #616]	; (8009a94 <tcp_input+0x28c>)
 800982a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	895b      	ldrh	r3, [r3, #10]
 8009830:	2b13      	cmp	r3, #19
 8009832:	f240 83d1 	bls.w	8009fd8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009836:	4b98      	ldr	r3, [pc, #608]	; (8009a98 <tcp_input+0x290>)
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	4a97      	ldr	r2, [pc, #604]	; (8009a98 <tcp_input+0x290>)
 800983c:	6812      	ldr	r2, [r2, #0]
 800983e:	4611      	mov	r1, r2
 8009840:	4618      	mov	r0, r3
 8009842:	f005 fc17 	bl	800f074 <ip4_addr_isbroadcast_u32>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	f040 83c7 	bne.w	8009fdc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800984e:	4b92      	ldr	r3, [pc, #584]	; (8009a98 <tcp_input+0x290>)
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009856:	2be0      	cmp	r3, #224	; 0xe0
 8009858:	f000 83c0 	beq.w	8009fdc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800985c:	4b8d      	ldr	r3, [pc, #564]	; (8009a94 <tcp_input+0x28c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	899b      	ldrh	r3, [r3, #12]
 8009862:	b29b      	uxth	r3, r3
 8009864:	4618      	mov	r0, r3
 8009866:	f7fc fe49 	bl	80064fc <lwip_htons>
 800986a:	4603      	mov	r3, r0
 800986c:	0b1b      	lsrs	r3, r3, #12
 800986e:	b29b      	uxth	r3, r3
 8009870:	b2db      	uxtb	r3, r3
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009876:	7cbb      	ldrb	r3, [r7, #18]
 8009878:	2b13      	cmp	r3, #19
 800987a:	f240 83b1 	bls.w	8009fe0 <tcp_input+0x7d8>
 800987e:	7cbb      	ldrb	r3, [r7, #18]
 8009880:	b29a      	uxth	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	891b      	ldrh	r3, [r3, #8]
 8009886:	429a      	cmp	r2, r3
 8009888:	f200 83aa 	bhi.w	8009fe0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800988c:	7cbb      	ldrb	r3, [r7, #18]
 800988e:	b29b      	uxth	r3, r3
 8009890:	3b14      	subs	r3, #20
 8009892:	b29a      	uxth	r2, r3
 8009894:	4b81      	ldr	r3, [pc, #516]	; (8009a9c <tcp_input+0x294>)
 8009896:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009898:	4b81      	ldr	r3, [pc, #516]	; (8009aa0 <tcp_input+0x298>)
 800989a:	2200      	movs	r2, #0
 800989c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	895a      	ldrh	r2, [r3, #10]
 80098a2:	7cbb      	ldrb	r3, [r7, #18]
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d309      	bcc.n	80098be <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80098aa:	4b7c      	ldr	r3, [pc, #496]	; (8009a9c <tcp_input+0x294>)
 80098ac:	881a      	ldrh	r2, [r3, #0]
 80098ae:	4b7d      	ldr	r3, [pc, #500]	; (8009aa4 <tcp_input+0x29c>)
 80098b0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80098b2:	7cbb      	ldrb	r3, [r7, #18]
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7fe f8f8 	bl	8007aac <pbuf_remove_header>
 80098bc:	e04e      	b.n	800995c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d105      	bne.n	80098d2 <tcp_input+0xca>
 80098c6:	4b70      	ldr	r3, [pc, #448]	; (8009a88 <tcp_input+0x280>)
 80098c8:	22c2      	movs	r2, #194	; 0xc2
 80098ca:	4977      	ldr	r1, [pc, #476]	; (8009aa8 <tcp_input+0x2a0>)
 80098cc:	4870      	ldr	r0, [pc, #448]	; (8009a90 <tcp_input+0x288>)
 80098ce:	f007 f88d 	bl	80109ec <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80098d2:	2114      	movs	r1, #20
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7fe f8e9 	bl	8007aac <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	895a      	ldrh	r2, [r3, #10]
 80098de:	4b71      	ldr	r3, [pc, #452]	; (8009aa4 <tcp_input+0x29c>)
 80098e0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80098e2:	4b6e      	ldr	r3, [pc, #440]	; (8009a9c <tcp_input+0x294>)
 80098e4:	881a      	ldrh	r2, [r3, #0]
 80098e6:	4b6f      	ldr	r3, [pc, #444]	; (8009aa4 <tcp_input+0x29c>)
 80098e8:	881b      	ldrh	r3, [r3, #0]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80098ee:	4b6d      	ldr	r3, [pc, #436]	; (8009aa4 <tcp_input+0x29c>)
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7fe f8d9 	bl	8007aac <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	895b      	ldrh	r3, [r3, #10]
 8009900:	8a3a      	ldrh	r2, [r7, #16]
 8009902:	429a      	cmp	r2, r3
 8009904:	f200 836e 	bhi.w	8009fe4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	4a64      	ldr	r2, [pc, #400]	; (8009aa0 <tcp_input+0x298>)
 8009910:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	8a3a      	ldrh	r2, [r7, #16]
 8009918:	4611      	mov	r1, r2
 800991a:	4618      	mov	r0, r3
 800991c:	f7fe f8c6 	bl	8007aac <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	891a      	ldrh	r2, [r3, #8]
 8009924:	8a3b      	ldrh	r3, [r7, #16]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	b29a      	uxth	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	895b      	ldrh	r3, [r3, #10]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d005      	beq.n	8009942 <tcp_input+0x13a>
 8009936:	4b54      	ldr	r3, [pc, #336]	; (8009a88 <tcp_input+0x280>)
 8009938:	22df      	movs	r2, #223	; 0xdf
 800993a:	495c      	ldr	r1, [pc, #368]	; (8009aac <tcp_input+0x2a4>)
 800993c:	4854      	ldr	r0, [pc, #336]	; (8009a90 <tcp_input+0x288>)
 800993e:	f007 f855 	bl	80109ec <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	891a      	ldrh	r2, [r3, #8]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	891b      	ldrh	r3, [r3, #8]
 800994c:	429a      	cmp	r2, r3
 800994e:	d005      	beq.n	800995c <tcp_input+0x154>
 8009950:	4b4d      	ldr	r3, [pc, #308]	; (8009a88 <tcp_input+0x280>)
 8009952:	22e0      	movs	r2, #224	; 0xe0
 8009954:	4956      	ldr	r1, [pc, #344]	; (8009ab0 <tcp_input+0x2a8>)
 8009956:	484e      	ldr	r0, [pc, #312]	; (8009a90 <tcp_input+0x288>)
 8009958:	f007 f848 	bl	80109ec <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800995c:	4b4d      	ldr	r3, [pc, #308]	; (8009a94 <tcp_input+0x28c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	881b      	ldrh	r3, [r3, #0]
 8009962:	b29b      	uxth	r3, r3
 8009964:	4a4b      	ldr	r2, [pc, #300]	; (8009a94 <tcp_input+0x28c>)
 8009966:	6814      	ldr	r4, [r2, #0]
 8009968:	4618      	mov	r0, r3
 800996a:	f7fc fdc7 	bl	80064fc <lwip_htons>
 800996e:	4603      	mov	r3, r0
 8009970:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009972:	4b48      	ldr	r3, [pc, #288]	; (8009a94 <tcp_input+0x28c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	885b      	ldrh	r3, [r3, #2]
 8009978:	b29b      	uxth	r3, r3
 800997a:	4a46      	ldr	r2, [pc, #280]	; (8009a94 <tcp_input+0x28c>)
 800997c:	6814      	ldr	r4, [r2, #0]
 800997e:	4618      	mov	r0, r3
 8009980:	f7fc fdbc 	bl	80064fc <lwip_htons>
 8009984:	4603      	mov	r3, r0
 8009986:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009988:	4b42      	ldr	r3, [pc, #264]	; (8009a94 <tcp_input+0x28c>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	4a41      	ldr	r2, [pc, #260]	; (8009a94 <tcp_input+0x28c>)
 8009990:	6814      	ldr	r4, [r2, #0]
 8009992:	4618      	mov	r0, r3
 8009994:	f7fc fdc7 	bl	8006526 <lwip_htonl>
 8009998:	4603      	mov	r3, r0
 800999a:	6063      	str	r3, [r4, #4]
 800999c:	6863      	ldr	r3, [r4, #4]
 800999e:	4a45      	ldr	r2, [pc, #276]	; (8009ab4 <tcp_input+0x2ac>)
 80099a0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80099a2:	4b3c      	ldr	r3, [pc, #240]	; (8009a94 <tcp_input+0x28c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	4a3a      	ldr	r2, [pc, #232]	; (8009a94 <tcp_input+0x28c>)
 80099aa:	6814      	ldr	r4, [r2, #0]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fc fdba 	bl	8006526 <lwip_htonl>
 80099b2:	4603      	mov	r3, r0
 80099b4:	60a3      	str	r3, [r4, #8]
 80099b6:	68a3      	ldr	r3, [r4, #8]
 80099b8:	4a3f      	ldr	r2, [pc, #252]	; (8009ab8 <tcp_input+0x2b0>)
 80099ba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80099bc:	4b35      	ldr	r3, [pc, #212]	; (8009a94 <tcp_input+0x28c>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	89db      	ldrh	r3, [r3, #14]
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	4a33      	ldr	r2, [pc, #204]	; (8009a94 <tcp_input+0x28c>)
 80099c6:	6814      	ldr	r4, [r2, #0]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fc fd97 	bl	80064fc <lwip_htons>
 80099ce:	4603      	mov	r3, r0
 80099d0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80099d2:	4b30      	ldr	r3, [pc, #192]	; (8009a94 <tcp_input+0x28c>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	899b      	ldrh	r3, [r3, #12]
 80099d8:	b29b      	uxth	r3, r3
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fc fd8e 	bl	80064fc <lwip_htons>
 80099e0:	4603      	mov	r3, r0
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099e8:	b2da      	uxtb	r2, r3
 80099ea:	4b34      	ldr	r3, [pc, #208]	; (8009abc <tcp_input+0x2b4>)
 80099ec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	891a      	ldrh	r2, [r3, #8]
 80099f2:	4b33      	ldr	r3, [pc, #204]	; (8009ac0 <tcp_input+0x2b8>)
 80099f4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80099f6:	4b31      	ldr	r3, [pc, #196]	; (8009abc <tcp_input+0x2b4>)
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	f003 0303 	and.w	r3, r3, #3
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00c      	beq.n	8009a1c <tcp_input+0x214>
    tcplen++;
 8009a02:	4b2f      	ldr	r3, [pc, #188]	; (8009ac0 <tcp_input+0x2b8>)
 8009a04:	881b      	ldrh	r3, [r3, #0]
 8009a06:	3301      	adds	r3, #1
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	4b2d      	ldr	r3, [pc, #180]	; (8009ac0 <tcp_input+0x2b8>)
 8009a0c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	891a      	ldrh	r2, [r3, #8]
 8009a12:	4b2b      	ldr	r3, [pc, #172]	; (8009ac0 <tcp_input+0x2b8>)
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	f200 82e6 	bhi.w	8009fe8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a20:	4b28      	ldr	r3, [pc, #160]	; (8009ac4 <tcp_input+0x2bc>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	61fb      	str	r3, [r7, #28]
 8009a26:	e09d      	b.n	8009b64 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	7d1b      	ldrb	r3, [r3, #20]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d105      	bne.n	8009a3c <tcp_input+0x234>
 8009a30:	4b15      	ldr	r3, [pc, #84]	; (8009a88 <tcp_input+0x280>)
 8009a32:	22fb      	movs	r2, #251	; 0xfb
 8009a34:	4924      	ldr	r1, [pc, #144]	; (8009ac8 <tcp_input+0x2c0>)
 8009a36:	4816      	ldr	r0, [pc, #88]	; (8009a90 <tcp_input+0x288>)
 8009a38:	f006 ffd8 	bl	80109ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	7d1b      	ldrb	r3, [r3, #20]
 8009a40:	2b0a      	cmp	r3, #10
 8009a42:	d105      	bne.n	8009a50 <tcp_input+0x248>
 8009a44:	4b10      	ldr	r3, [pc, #64]	; (8009a88 <tcp_input+0x280>)
 8009a46:	22fc      	movs	r2, #252	; 0xfc
 8009a48:	4920      	ldr	r1, [pc, #128]	; (8009acc <tcp_input+0x2c4>)
 8009a4a:	4811      	ldr	r0, [pc, #68]	; (8009a90 <tcp_input+0x288>)
 8009a4c:	f006 ffce 	bl	80109ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	7d1b      	ldrb	r3, [r3, #20]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d105      	bne.n	8009a64 <tcp_input+0x25c>
 8009a58:	4b0b      	ldr	r3, [pc, #44]	; (8009a88 <tcp_input+0x280>)
 8009a5a:	22fd      	movs	r2, #253	; 0xfd
 8009a5c:	491c      	ldr	r1, [pc, #112]	; (8009ad0 <tcp_input+0x2c8>)
 8009a5e:	480c      	ldr	r0, [pc, #48]	; (8009a90 <tcp_input+0x288>)
 8009a60:	f006 ffc4 	bl	80109ec <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	7a1b      	ldrb	r3, [r3, #8]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d033      	beq.n	8009ad4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	7a1a      	ldrb	r2, [r3, #8]
 8009a70:	4b09      	ldr	r3, [pc, #36]	; (8009a98 <tcp_input+0x290>)
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009a78:	3301      	adds	r3, #1
 8009a7a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d029      	beq.n	8009ad4 <tcp_input+0x2cc>
      prev = pcb;
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	61bb      	str	r3, [r7, #24]
      continue;
 8009a84:	e06b      	b.n	8009b5e <tcp_input+0x356>
 8009a86:	bf00      	nop
 8009a88:	08013ff8 	.word	0x08013ff8
 8009a8c:	0801402c 	.word	0x0801402c
 8009a90:	08014044 	.word	0x08014044
 8009a94:	20000878 	.word	0x20000878
 8009a98:	200056dc 	.word	0x200056dc
 8009a9c:	2000087c 	.word	0x2000087c
 8009aa0:	20000880 	.word	0x20000880
 8009aa4:	2000087e 	.word	0x2000087e
 8009aa8:	0801406c 	.word	0x0801406c
 8009aac:	0801407c 	.word	0x0801407c
 8009ab0:	08014088 	.word	0x08014088
 8009ab4:	20000888 	.word	0x20000888
 8009ab8:	2000088c 	.word	0x2000088c
 8009abc:	20000894 	.word	0x20000894
 8009ac0:	20000892 	.word	0x20000892
 8009ac4:	2000ade0 	.word	0x2000ade0
 8009ac8:	080140a8 	.word	0x080140a8
 8009acc:	080140d0 	.word	0x080140d0
 8009ad0:	080140fc 	.word	0x080140fc
    }

    if (pcb->remote_port == tcphdr->src &&
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	8b1a      	ldrh	r2, [r3, #24]
 8009ad8:	4b72      	ldr	r3, [pc, #456]	; (8009ca4 <tcp_input+0x49c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d13a      	bne.n	8009b5a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	8ada      	ldrh	r2, [r3, #22]
 8009ae8:	4b6e      	ldr	r3, [pc, #440]	; (8009ca4 <tcp_input+0x49c>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	885b      	ldrh	r3, [r3, #2]
 8009aee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d132      	bne.n	8009b5a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	685a      	ldr	r2, [r3, #4]
 8009af8:	4b6b      	ldr	r3, [pc, #428]	; (8009ca8 <tcp_input+0x4a0>)
 8009afa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d12c      	bne.n	8009b5a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	4b68      	ldr	r3, [pc, #416]	; (8009ca8 <tcp_input+0x4a0>)
 8009b06:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d126      	bne.n	8009b5a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	69fa      	ldr	r2, [r7, #28]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d106      	bne.n	8009b24 <tcp_input+0x31c>
 8009b16:	4b65      	ldr	r3, [pc, #404]	; (8009cac <tcp_input+0x4a4>)
 8009b18:	f240 120d 	movw	r2, #269	; 0x10d
 8009b1c:	4964      	ldr	r1, [pc, #400]	; (8009cb0 <tcp_input+0x4a8>)
 8009b1e:	4865      	ldr	r0, [pc, #404]	; (8009cb4 <tcp_input+0x4ac>)
 8009b20:	f006 ff64 	bl	80109ec <iprintf>
      if (prev != NULL) {
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <tcp_input+0x338>
        prev->next = pcb->next;
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	68da      	ldr	r2, [r3, #12]
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009b32:	4b61      	ldr	r3, [pc, #388]	; (8009cb8 <tcp_input+0x4b0>)
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009b3a:	4a5f      	ldr	r2, [pc, #380]	; (8009cb8 <tcp_input+0x4b0>)
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	69fa      	ldr	r2, [r7, #28]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d111      	bne.n	8009b6e <tcp_input+0x366>
 8009b4a:	4b58      	ldr	r3, [pc, #352]	; (8009cac <tcp_input+0x4a4>)
 8009b4c:	f240 1215 	movw	r2, #277	; 0x115
 8009b50:	495a      	ldr	r1, [pc, #360]	; (8009cbc <tcp_input+0x4b4>)
 8009b52:	4858      	ldr	r0, [pc, #352]	; (8009cb4 <tcp_input+0x4ac>)
 8009b54:	f006 ff4a 	bl	80109ec <iprintf>
      break;
 8009b58:	e009      	b.n	8009b6e <tcp_input+0x366>
    }
    prev = pcb;
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	61fb      	str	r3, [r7, #28]
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f47f af5e 	bne.w	8009a28 <tcp_input+0x220>
 8009b6c:	e000      	b.n	8009b70 <tcp_input+0x368>
      break;
 8009b6e:	bf00      	nop
  }

  if (pcb == NULL) {
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f040 80aa 	bne.w	8009ccc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b78:	4b51      	ldr	r3, [pc, #324]	; (8009cc0 <tcp_input+0x4b8>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	61fb      	str	r3, [r7, #28]
 8009b7e:	e03f      	b.n	8009c00 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	7d1b      	ldrb	r3, [r3, #20]
 8009b84:	2b0a      	cmp	r3, #10
 8009b86:	d006      	beq.n	8009b96 <tcp_input+0x38e>
 8009b88:	4b48      	ldr	r3, [pc, #288]	; (8009cac <tcp_input+0x4a4>)
 8009b8a:	f240 121f 	movw	r2, #287	; 0x11f
 8009b8e:	494d      	ldr	r1, [pc, #308]	; (8009cc4 <tcp_input+0x4bc>)
 8009b90:	4848      	ldr	r0, [pc, #288]	; (8009cb4 <tcp_input+0x4ac>)
 8009b92:	f006 ff2b 	bl	80109ec <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	7a1b      	ldrb	r3, [r3, #8]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d009      	beq.n	8009bb2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	7a1a      	ldrb	r2, [r3, #8]
 8009ba2:	4b41      	ldr	r3, [pc, #260]	; (8009ca8 <tcp_input+0x4a0>)
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009baa:	3301      	adds	r3, #1
 8009bac:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d122      	bne.n	8009bf8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	8b1a      	ldrh	r2, [r3, #24]
 8009bb6:	4b3b      	ldr	r3, [pc, #236]	; (8009ca4 <tcp_input+0x49c>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	881b      	ldrh	r3, [r3, #0]
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d11b      	bne.n	8009bfa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	8ada      	ldrh	r2, [r3, #22]
 8009bc6:	4b37      	ldr	r3, [pc, #220]	; (8009ca4 <tcp_input+0x49c>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	885b      	ldrh	r3, [r3, #2]
 8009bcc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d113      	bne.n	8009bfa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	685a      	ldr	r2, [r3, #4]
 8009bd6:	4b34      	ldr	r3, [pc, #208]	; (8009ca8 <tcp_input+0x4a0>)
 8009bd8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d10d      	bne.n	8009bfa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	4b31      	ldr	r3, [pc, #196]	; (8009ca8 <tcp_input+0x4a0>)
 8009be4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d107      	bne.n	8009bfa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009bea:	69f8      	ldr	r0, [r7, #28]
 8009bec:	f000 fb56 	bl	800a29c <tcp_timewait_input>
        }
        pbuf_free(p);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f7fd ffe1 	bl	8007bb8 <pbuf_free>
        return;
 8009bf6:	e1fd      	b.n	8009ff4 <tcp_input+0x7ec>
        continue;
 8009bf8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	61fb      	str	r3, [r7, #28]
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1bc      	bne.n	8009b80 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009c06:	2300      	movs	r3, #0
 8009c08:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009c0a:	4b2f      	ldr	r3, [pc, #188]	; (8009cc8 <tcp_input+0x4c0>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	617b      	str	r3, [r7, #20]
 8009c10:	e02a      	b.n	8009c68 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	7a1b      	ldrb	r3, [r3, #8]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00c      	beq.n	8009c34 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	7a1a      	ldrb	r2, [r3, #8]
 8009c1e:	4b22      	ldr	r3, [pc, #136]	; (8009ca8 <tcp_input+0x4a0>)
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c26:	3301      	adds	r3, #1
 8009c28:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d002      	beq.n	8009c34 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	61bb      	str	r3, [r7, #24]
        continue;
 8009c32:	e016      	b.n	8009c62 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	8ada      	ldrh	r2, [r3, #22]
 8009c38:	4b1a      	ldr	r3, [pc, #104]	; (8009ca4 <tcp_input+0x49c>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	885b      	ldrh	r3, [r3, #2]
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d10c      	bne.n	8009c5e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	4b17      	ldr	r3, [pc, #92]	; (8009ca8 <tcp_input+0x4a0>)
 8009c4a:	695b      	ldr	r3, [r3, #20]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d00f      	beq.n	8009c70 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00d      	beq.n	8009c72 <tcp_input+0x46a>
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d009      	beq.n	8009c72 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	617b      	str	r3, [r7, #20]
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1d1      	bne.n	8009c12 <tcp_input+0x40a>
 8009c6e:	e000      	b.n	8009c72 <tcp_input+0x46a>
            break;
 8009c70:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d029      	beq.n	8009ccc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00a      	beq.n	8009c94 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	68da      	ldr	r2, [r3, #12]
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009c86:	4b10      	ldr	r3, [pc, #64]	; (8009cc8 <tcp_input+0x4c0>)
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009c8e:	4a0e      	ldr	r2, [pc, #56]	; (8009cc8 <tcp_input+0x4c0>)
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009c94:	6978      	ldr	r0, [r7, #20]
 8009c96:	f000 fa03 	bl	800a0a0 <tcp_listen_input>
      }
      pbuf_free(p);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7fd ff8c 	bl	8007bb8 <pbuf_free>
      return;
 8009ca0:	e1a8      	b.n	8009ff4 <tcp_input+0x7ec>
 8009ca2:	bf00      	nop
 8009ca4:	20000878 	.word	0x20000878
 8009ca8:	200056dc 	.word	0x200056dc
 8009cac:	08013ff8 	.word	0x08013ff8
 8009cb0:	08014124 	.word	0x08014124
 8009cb4:	08014044 	.word	0x08014044
 8009cb8:	2000ade0 	.word	0x2000ade0
 8009cbc:	08014150 	.word	0x08014150
 8009cc0:	2000adf0 	.word	0x2000adf0
 8009cc4:	0801417c 	.word	0x0801417c
 8009cc8:	2000ade8 	.word	0x2000ade8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f000 8158 	beq.w	8009f84 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009cd4:	4b95      	ldr	r3, [pc, #596]	; (8009f2c <tcp_input+0x724>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	891a      	ldrh	r2, [r3, #8]
 8009cde:	4b93      	ldr	r3, [pc, #588]	; (8009f2c <tcp_input+0x724>)
 8009ce0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009ce2:	4a92      	ldr	r2, [pc, #584]	; (8009f2c <tcp_input+0x724>)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009ce8:	4b91      	ldr	r3, [pc, #580]	; (8009f30 <tcp_input+0x728>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a8f      	ldr	r2, [pc, #572]	; (8009f2c <tcp_input+0x724>)
 8009cee:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009cf0:	4b90      	ldr	r3, [pc, #576]	; (8009f34 <tcp_input+0x72c>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009cf6:	4b90      	ldr	r3, [pc, #576]	; (8009f38 <tcp_input+0x730>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009cfc:	4b8f      	ldr	r3, [pc, #572]	; (8009f3c <tcp_input+0x734>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009d02:	4b8f      	ldr	r3, [pc, #572]	; (8009f40 <tcp_input+0x738>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	f003 0308 	and.w	r3, r3, #8
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d006      	beq.n	8009d1c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	7b5b      	ldrb	r3, [r3, #13]
 8009d12:	f043 0301 	orr.w	r3, r3, #1
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d017      	beq.n	8009d54 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009d24:	69f8      	ldr	r0, [r7, #28]
 8009d26:	f7ff f929 	bl	8008f7c <tcp_process_refused_data>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	f113 0f0d 	cmn.w	r3, #13
 8009d30:	d007      	beq.n	8009d42 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00c      	beq.n	8009d54 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009d3a:	4b82      	ldr	r3, [pc, #520]	; (8009f44 <tcp_input+0x73c>)
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d008      	beq.n	8009d54 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f040 80e3 	bne.w	8009f12 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009d4c:	69f8      	ldr	r0, [r7, #28]
 8009d4e:	f003 f9ad 	bl	800d0ac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009d52:	e0de      	b.n	8009f12 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009d54:	4a7c      	ldr	r2, [pc, #496]	; (8009f48 <tcp_input+0x740>)
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009d5a:	69f8      	ldr	r0, [r7, #28]
 8009d5c:	f000 fb18 	bl	800a390 <tcp_process>
 8009d60:	4603      	mov	r3, r0
 8009d62:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009d64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009d68:	f113 0f0d 	cmn.w	r3, #13
 8009d6c:	f000 80d3 	beq.w	8009f16 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009d70:	4b71      	ldr	r3, [pc, #452]	; (8009f38 <tcp_input+0x730>)
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	f003 0308 	and.w	r3, r3, #8
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d015      	beq.n	8009da8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d008      	beq.n	8009d98 <tcp_input+0x590>
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d8c:	69fa      	ldr	r2, [r7, #28]
 8009d8e:	6912      	ldr	r2, [r2, #16]
 8009d90:	f06f 010d 	mvn.w	r1, #13
 8009d94:	4610      	mov	r0, r2
 8009d96:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009d98:	69f9      	ldr	r1, [r7, #28]
 8009d9a:	486c      	ldr	r0, [pc, #432]	; (8009f4c <tcp_input+0x744>)
 8009d9c:	f7ff fbbc 	bl	8009518 <tcp_pcb_remove>
        tcp_free(pcb);
 8009da0:	69f8      	ldr	r0, [r7, #28]
 8009da2:	f7fe f9a9 	bl	80080f8 <tcp_free>
 8009da6:	e0da      	b.n	8009f5e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009da8:	2300      	movs	r3, #0
 8009daa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009dac:	4b63      	ldr	r3, [pc, #396]	; (8009f3c <tcp_input+0x734>)
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d01d      	beq.n	8009df0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009db4:	4b61      	ldr	r3, [pc, #388]	; (8009f3c <tcp_input+0x734>)
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00a      	beq.n	8009dda <tcp_input+0x5d2>
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dca:	69fa      	ldr	r2, [r7, #28]
 8009dcc:	6910      	ldr	r0, [r2, #16]
 8009dce:	89fa      	ldrh	r2, [r7, #14]
 8009dd0:	69f9      	ldr	r1, [r7, #28]
 8009dd2:	4798      	blx	r3
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	74fb      	strb	r3, [r7, #19]
 8009dd8:	e001      	b.n	8009dde <tcp_input+0x5d6>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009dde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009de2:	f113 0f0d 	cmn.w	r3, #13
 8009de6:	f000 8098 	beq.w	8009f1a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009dea:	4b54      	ldr	r3, [pc, #336]	; (8009f3c <tcp_input+0x734>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009df0:	69f8      	ldr	r0, [r7, #28]
 8009df2:	f000 f915 	bl	800a020 <tcp_input_delayed_close>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f040 8090 	bne.w	8009f1e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009dfe:	4b4d      	ldr	r3, [pc, #308]	; (8009f34 <tcp_input+0x72c>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d041      	beq.n	8009e8a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d006      	beq.n	8009e1c <tcp_input+0x614>
 8009e0e:	4b50      	ldr	r3, [pc, #320]	; (8009f50 <tcp_input+0x748>)
 8009e10:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009e14:	494f      	ldr	r1, [pc, #316]	; (8009f54 <tcp_input+0x74c>)
 8009e16:	4850      	ldr	r0, [pc, #320]	; (8009f58 <tcp_input+0x750>)
 8009e18:	f006 fde8 	bl	80109ec <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	8b5b      	ldrh	r3, [r3, #26]
 8009e20:	f003 0310 	and.w	r3, r3, #16
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d008      	beq.n	8009e3a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009e28:	4b42      	ldr	r3, [pc, #264]	; (8009f34 <tcp_input+0x72c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7fd fec3 	bl	8007bb8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009e32:	69f8      	ldr	r0, [r7, #28]
 8009e34:	f7fe fc48 	bl	80086c8 <tcp_abort>
            goto aborted;
 8009e38:	e091      	b.n	8009f5e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00c      	beq.n	8009e5e <tcp_input+0x656>
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	6918      	ldr	r0, [r3, #16]
 8009e4e:	4b39      	ldr	r3, [pc, #228]	; (8009f34 <tcp_input+0x72c>)
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	2300      	movs	r3, #0
 8009e54:	69f9      	ldr	r1, [r7, #28]
 8009e56:	47a0      	blx	r4
 8009e58:	4603      	mov	r3, r0
 8009e5a:	74fb      	strb	r3, [r7, #19]
 8009e5c:	e008      	b.n	8009e70 <tcp_input+0x668>
 8009e5e:	4b35      	ldr	r3, [pc, #212]	; (8009f34 <tcp_input+0x72c>)
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	2300      	movs	r3, #0
 8009e64:	69f9      	ldr	r1, [r7, #28]
 8009e66:	2000      	movs	r0, #0
 8009e68:	f7ff f95e 	bl	8009128 <tcp_recv_null>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009e70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e74:	f113 0f0d 	cmn.w	r3, #13
 8009e78:	d053      	beq.n	8009f22 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009e7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d003      	beq.n	8009e8a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009e82:	4b2c      	ldr	r3, [pc, #176]	; (8009f34 <tcp_input+0x72c>)
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009e8a:	4b2b      	ldr	r3, [pc, #172]	; (8009f38 <tcp_input+0x730>)
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	f003 0320 	and.w	r3, r3, #32
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d030      	beq.n	8009ef8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d009      	beq.n	8009eb2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ea2:	7b5a      	ldrb	r2, [r3, #13]
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ea8:	f042 0220 	orr.w	r2, r2, #32
 8009eac:	b2d2      	uxtb	r2, r2
 8009eae:	735a      	strb	r2, [r3, #13]
 8009eb0:	e022      	b.n	8009ef8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eb6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009eba:	d005      	beq.n	8009ec8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00b      	beq.n	8009eea <tcp_input+0x6e2>
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	6918      	ldr	r0, [r3, #16]
 8009edc:	2300      	movs	r3, #0
 8009ede:	2200      	movs	r2, #0
 8009ee0:	69f9      	ldr	r1, [r7, #28]
 8009ee2:	47a0      	blx	r4
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	74fb      	strb	r3, [r7, #19]
 8009ee8:	e001      	b.n	8009eee <tcp_input+0x6e6>
 8009eea:	2300      	movs	r3, #0
 8009eec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009eee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ef2:	f113 0f0d 	cmn.w	r3, #13
 8009ef6:	d016      	beq.n	8009f26 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009ef8:	4b13      	ldr	r3, [pc, #76]	; (8009f48 <tcp_input+0x740>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009efe:	69f8      	ldr	r0, [r7, #28]
 8009f00:	f000 f88e 	bl	800a020 <tcp_input_delayed_close>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d128      	bne.n	8009f5c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009f0a:	69f8      	ldr	r0, [r7, #28]
 8009f0c:	f002 fac8 	bl	800c4a0 <tcp_output>
 8009f10:	e025      	b.n	8009f5e <tcp_input+0x756>
        goto aborted;
 8009f12:	bf00      	nop
 8009f14:	e023      	b.n	8009f5e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009f16:	bf00      	nop
 8009f18:	e021      	b.n	8009f5e <tcp_input+0x756>
              goto aborted;
 8009f1a:	bf00      	nop
 8009f1c:	e01f      	b.n	8009f5e <tcp_input+0x756>
          goto aborted;
 8009f1e:	bf00      	nop
 8009f20:	e01d      	b.n	8009f5e <tcp_input+0x756>
            goto aborted;
 8009f22:	bf00      	nop
 8009f24:	e01b      	b.n	8009f5e <tcp_input+0x756>
              goto aborted;
 8009f26:	bf00      	nop
 8009f28:	e019      	b.n	8009f5e <tcp_input+0x756>
 8009f2a:	bf00      	nop
 8009f2c:	20000868 	.word	0x20000868
 8009f30:	20000878 	.word	0x20000878
 8009f34:	20000898 	.word	0x20000898
 8009f38:	20000895 	.word	0x20000895
 8009f3c:	20000890 	.word	0x20000890
 8009f40:	20000894 	.word	0x20000894
 8009f44:	20000892 	.word	0x20000892
 8009f48:	2000adf4 	.word	0x2000adf4
 8009f4c:	2000ade0 	.word	0x2000ade0
 8009f50:	08013ff8 	.word	0x08013ff8
 8009f54:	080141ac 	.word	0x080141ac
 8009f58:	08014044 	.word	0x08014044
          goto aborted;
 8009f5c:	bf00      	nop
    tcp_input_pcb = NULL;
 8009f5e:	4b27      	ldr	r3, [pc, #156]	; (8009ffc <tcp_input+0x7f4>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009f64:	4b26      	ldr	r3, [pc, #152]	; (800a000 <tcp_input+0x7f8>)
 8009f66:	2200      	movs	r2, #0
 8009f68:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009f6a:	4b26      	ldr	r3, [pc, #152]	; (800a004 <tcp_input+0x7fc>)
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d03f      	beq.n	8009ff2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009f72:	4b24      	ldr	r3, [pc, #144]	; (800a004 <tcp_input+0x7fc>)
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fd fe1e 	bl	8007bb8 <pbuf_free>
      inseg.p = NULL;
 8009f7c:	4b21      	ldr	r3, [pc, #132]	; (800a004 <tcp_input+0x7fc>)
 8009f7e:	2200      	movs	r2, #0
 8009f80:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009f82:	e036      	b.n	8009ff2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009f84:	4b20      	ldr	r3, [pc, #128]	; (800a008 <tcp_input+0x800>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	899b      	ldrh	r3, [r3, #12]
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7fc fab5 	bl	80064fc <lwip_htons>
 8009f92:	4603      	mov	r3, r0
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	f003 0304 	and.w	r3, r3, #4
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d118      	bne.n	8009fd0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f9e:	4b1b      	ldr	r3, [pc, #108]	; (800a00c <tcp_input+0x804>)
 8009fa0:	6819      	ldr	r1, [r3, #0]
 8009fa2:	4b1b      	ldr	r3, [pc, #108]	; (800a010 <tcp_input+0x808>)
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	4b1a      	ldr	r3, [pc, #104]	; (800a014 <tcp_input+0x80c>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009fae:	4b16      	ldr	r3, [pc, #88]	; (800a008 <tcp_input+0x800>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009fb2:	885b      	ldrh	r3, [r3, #2]
 8009fb4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009fb6:	4a14      	ldr	r2, [pc, #80]	; (800a008 <tcp_input+0x800>)
 8009fb8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009fba:	8812      	ldrh	r2, [r2, #0]
 8009fbc:	b292      	uxth	r2, r2
 8009fbe:	9202      	str	r2, [sp, #8]
 8009fc0:	9301      	str	r3, [sp, #4]
 8009fc2:	4b15      	ldr	r3, [pc, #84]	; (800a018 <tcp_input+0x810>)
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	4b15      	ldr	r3, [pc, #84]	; (800a01c <tcp_input+0x814>)
 8009fc8:	4602      	mov	r2, r0
 8009fca:	2000      	movs	r0, #0
 8009fcc:	f003 f81c 	bl	800d008 <tcp_rst>
    pbuf_free(p);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7fd fdf1 	bl	8007bb8 <pbuf_free>
  return;
 8009fd6:	e00c      	b.n	8009ff2 <tcp_input+0x7ea>
    goto dropped;
 8009fd8:	bf00      	nop
 8009fda:	e006      	b.n	8009fea <tcp_input+0x7e2>
    goto dropped;
 8009fdc:	bf00      	nop
 8009fde:	e004      	b.n	8009fea <tcp_input+0x7e2>
    goto dropped;
 8009fe0:	bf00      	nop
 8009fe2:	e002      	b.n	8009fea <tcp_input+0x7e2>
      goto dropped;
 8009fe4:	bf00      	nop
 8009fe6:	e000      	b.n	8009fea <tcp_input+0x7e2>
      goto dropped;
 8009fe8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7fd fde4 	bl	8007bb8 <pbuf_free>
 8009ff0:	e000      	b.n	8009ff4 <tcp_input+0x7ec>
  return;
 8009ff2:	bf00      	nop
}
 8009ff4:	3724      	adds	r7, #36	; 0x24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd90      	pop	{r4, r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	2000adf4 	.word	0x2000adf4
 800a000:	20000898 	.word	0x20000898
 800a004:	20000868 	.word	0x20000868
 800a008:	20000878 	.word	0x20000878
 800a00c:	2000088c 	.word	0x2000088c
 800a010:	20000892 	.word	0x20000892
 800a014:	20000888 	.word	0x20000888
 800a018:	200056ec 	.word	0x200056ec
 800a01c:	200056f0 	.word	0x200056f0

0800a020 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d106      	bne.n	800a03c <tcp_input_delayed_close+0x1c>
 800a02e:	4b17      	ldr	r3, [pc, #92]	; (800a08c <tcp_input_delayed_close+0x6c>)
 800a030:	f240 225a 	movw	r2, #602	; 0x25a
 800a034:	4916      	ldr	r1, [pc, #88]	; (800a090 <tcp_input_delayed_close+0x70>)
 800a036:	4817      	ldr	r0, [pc, #92]	; (800a094 <tcp_input_delayed_close+0x74>)
 800a038:	f006 fcd8 	bl	80109ec <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a03c:	4b16      	ldr	r3, [pc, #88]	; (800a098 <tcp_input_delayed_close+0x78>)
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	f003 0310 	and.w	r3, r3, #16
 800a044:	2b00      	cmp	r3, #0
 800a046:	d01c      	beq.n	800a082 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	8b5b      	ldrh	r3, [r3, #26]
 800a04c:	f003 0310 	and.w	r3, r3, #16
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10d      	bne.n	800a070 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d008      	beq.n	800a070 <tcp_input_delayed_close+0x50>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	6912      	ldr	r2, [r2, #16]
 800a068:	f06f 010e 	mvn.w	r1, #14
 800a06c:	4610      	mov	r0, r2
 800a06e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a070:	6879      	ldr	r1, [r7, #4]
 800a072:	480a      	ldr	r0, [pc, #40]	; (800a09c <tcp_input_delayed_close+0x7c>)
 800a074:	f7ff fa50 	bl	8009518 <tcp_pcb_remove>
    tcp_free(pcb);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f7fe f83d 	bl	80080f8 <tcp_free>
    return 1;
 800a07e:	2301      	movs	r3, #1
 800a080:	e000      	b.n	800a084 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	08013ff8 	.word	0x08013ff8
 800a090:	080141c8 	.word	0x080141c8
 800a094:	08014044 	.word	0x08014044
 800a098:	20000895 	.word	0x20000895
 800a09c:	2000ade0 	.word	0x2000ade0

0800a0a0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a0a0:	b590      	push	{r4, r7, lr}
 800a0a2:	b08b      	sub	sp, #44	; 0x2c
 800a0a4:	af04      	add	r7, sp, #16
 800a0a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a0a8:	4b6f      	ldr	r3, [pc, #444]	; (800a268 <tcp_listen_input+0x1c8>)
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f040 80d2 	bne.w	800a25a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d106      	bne.n	800a0ca <tcp_listen_input+0x2a>
 800a0bc:	4b6b      	ldr	r3, [pc, #428]	; (800a26c <tcp_listen_input+0x1cc>)
 800a0be:	f240 2281 	movw	r2, #641	; 0x281
 800a0c2:	496b      	ldr	r1, [pc, #428]	; (800a270 <tcp_listen_input+0x1d0>)
 800a0c4:	486b      	ldr	r0, [pc, #428]	; (800a274 <tcp_listen_input+0x1d4>)
 800a0c6:	f006 fc91 	bl	80109ec <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a0ca:	4b67      	ldr	r3, [pc, #412]	; (800a268 <tcp_listen_input+0x1c8>)
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	f003 0310 	and.w	r3, r3, #16
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d019      	beq.n	800a10a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0d6:	4b68      	ldr	r3, [pc, #416]	; (800a278 <tcp_listen_input+0x1d8>)
 800a0d8:	6819      	ldr	r1, [r3, #0]
 800a0da:	4b68      	ldr	r3, [pc, #416]	; (800a27c <tcp_listen_input+0x1dc>)
 800a0dc:	881b      	ldrh	r3, [r3, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	4b67      	ldr	r3, [pc, #412]	; (800a280 <tcp_listen_input+0x1e0>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0e6:	4b67      	ldr	r3, [pc, #412]	; (800a284 <tcp_listen_input+0x1e4>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0ea:	885b      	ldrh	r3, [r3, #2]
 800a0ec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0ee:	4a65      	ldr	r2, [pc, #404]	; (800a284 <tcp_listen_input+0x1e4>)
 800a0f0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0f2:	8812      	ldrh	r2, [r2, #0]
 800a0f4:	b292      	uxth	r2, r2
 800a0f6:	9202      	str	r2, [sp, #8]
 800a0f8:	9301      	str	r3, [sp, #4]
 800a0fa:	4b63      	ldr	r3, [pc, #396]	; (800a288 <tcp_listen_input+0x1e8>)
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	4b63      	ldr	r3, [pc, #396]	; (800a28c <tcp_listen_input+0x1ec>)
 800a100:	4602      	mov	r2, r0
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f002 ff80 	bl	800d008 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a108:	e0a9      	b.n	800a25e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a10a:	4b57      	ldr	r3, [pc, #348]	; (800a268 <tcp_listen_input+0x1c8>)
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	f003 0302 	and.w	r3, r3, #2
 800a112:	2b00      	cmp	r3, #0
 800a114:	f000 80a3 	beq.w	800a25e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	7d5b      	ldrb	r3, [r3, #21]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7ff f927 	bl	8009370 <tcp_alloc>
 800a122:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d111      	bne.n	800a14e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00a      	beq.n	800a148 <tcp_listen_input+0xa8>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	699b      	ldr	r3, [r3, #24]
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	6910      	ldr	r0, [r2, #16]
 800a13a:	f04f 32ff 	mov.w	r2, #4294967295
 800a13e:	2100      	movs	r1, #0
 800a140:	4798      	blx	r3
 800a142:	4603      	mov	r3, r0
 800a144:	73bb      	strb	r3, [r7, #14]
      return;
 800a146:	e08b      	b.n	800a260 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a148:	23f0      	movs	r3, #240	; 0xf0
 800a14a:	73bb      	strb	r3, [r7, #14]
      return;
 800a14c:	e088      	b.n	800a260 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a14e:	4b50      	ldr	r3, [pc, #320]	; (800a290 <tcp_listen_input+0x1f0>)
 800a150:	695a      	ldr	r2, [r3, #20]
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a156:	4b4e      	ldr	r3, [pc, #312]	; (800a290 <tcp_listen_input+0x1f0>)
 800a158:	691a      	ldr	r2, [r3, #16]
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	8ada      	ldrh	r2, [r3, #22]
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a166:	4b47      	ldr	r3, [pc, #284]	; (800a284 <tcp_listen_input+0x1e4>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	881b      	ldrh	r3, [r3, #0]
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	2203      	movs	r2, #3
 800a176:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a178:	4b41      	ldr	r3, [pc, #260]	; (800a280 <tcp_listen_input+0x1e0>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a18a:	6978      	ldr	r0, [r7, #20]
 800a18c:	f7ff fa58 	bl	8009640 <tcp_next_iss>
 800a190:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a1aa:	4b35      	ldr	r3, [pc, #212]	; (800a280 <tcp_listen_input+0x1e0>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	1e5a      	subs	r2, r3, #1
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691a      	ldr	r2, [r3, #16]
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	7a5b      	ldrb	r3, [r3, #9]
 800a1c6:	f003 030c 	and.w	r3, r3, #12
 800a1ca:	b2da      	uxtb	r2, r3
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	7a1a      	ldrb	r2, [r3, #8]
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a1d8:	4b2e      	ldr	r3, [pc, #184]	; (800a294 <tcp_listen_input+0x1f4>)
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	60da      	str	r2, [r3, #12]
 800a1e0:	4a2c      	ldr	r2, [pc, #176]	; (800a294 <tcp_listen_input+0x1f4>)
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	6013      	str	r3, [r2, #0]
 800a1e6:	f003 f8d1 	bl	800d38c <tcp_timer_needed>
 800a1ea:	4b2b      	ldr	r3, [pc, #172]	; (800a298 <tcp_listen_input+0x1f8>)
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a1f0:	6978      	ldr	r0, [r7, #20]
 800a1f2:	f001 fd8f 	bl	800bd14 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a1f6:	4b23      	ldr	r3, [pc, #140]	; (800a284 <tcp_listen_input+0x1e4>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	89db      	ldrh	r3, [r3, #14]
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	3304      	adds	r3, #4
 800a218:	4618      	mov	r0, r3
 800a21a:	f004 fc95 	bl	800eb48 <ip4_route>
 800a21e:	4601      	mov	r1, r0
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	3304      	adds	r3, #4
 800a224:	461a      	mov	r2, r3
 800a226:	4620      	mov	r0, r4
 800a228:	f7ff fa30 	bl	800968c <tcp_eff_send_mss_netif>
 800a22c:	4603      	mov	r3, r0
 800a22e:	461a      	mov	r2, r3
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a234:	2112      	movs	r1, #18
 800a236:	6978      	ldr	r0, [r7, #20]
 800a238:	f002 f844 	bl	800c2c4 <tcp_enqueue_flags>
 800a23c:	4603      	mov	r3, r0
 800a23e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d004      	beq.n	800a252 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a248:	2100      	movs	r1, #0
 800a24a:	6978      	ldr	r0, [r7, #20]
 800a24c:	f7fe f97e 	bl	800854c <tcp_abandon>
      return;
 800a250:	e006      	b.n	800a260 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a252:	6978      	ldr	r0, [r7, #20]
 800a254:	f002 f924 	bl	800c4a0 <tcp_output>
  return;
 800a258:	e001      	b.n	800a25e <tcp_listen_input+0x1be>
    return;
 800a25a:	bf00      	nop
 800a25c:	e000      	b.n	800a260 <tcp_listen_input+0x1c0>
  return;
 800a25e:	bf00      	nop
}
 800a260:	371c      	adds	r7, #28
 800a262:	46bd      	mov	sp, r7
 800a264:	bd90      	pop	{r4, r7, pc}
 800a266:	bf00      	nop
 800a268:	20000894 	.word	0x20000894
 800a26c:	08013ff8 	.word	0x08013ff8
 800a270:	080141f0 	.word	0x080141f0
 800a274:	08014044 	.word	0x08014044
 800a278:	2000088c 	.word	0x2000088c
 800a27c:	20000892 	.word	0x20000892
 800a280:	20000888 	.word	0x20000888
 800a284:	20000878 	.word	0x20000878
 800a288:	200056ec 	.word	0x200056ec
 800a28c:	200056f0 	.word	0x200056f0
 800a290:	200056dc 	.word	0x200056dc
 800a294:	2000ade0 	.word	0x2000ade0
 800a298:	2000addc 	.word	0x2000addc

0800a29c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af04      	add	r7, sp, #16
 800a2a2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a2a4:	4b2f      	ldr	r3, [pc, #188]	; (800a364 <tcp_timewait_input+0xc8>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	f003 0304 	and.w	r3, r3, #4
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d153      	bne.n	800a358 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d106      	bne.n	800a2c4 <tcp_timewait_input+0x28>
 800a2b6:	4b2c      	ldr	r3, [pc, #176]	; (800a368 <tcp_timewait_input+0xcc>)
 800a2b8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a2bc:	492b      	ldr	r1, [pc, #172]	; (800a36c <tcp_timewait_input+0xd0>)
 800a2be:	482c      	ldr	r0, [pc, #176]	; (800a370 <tcp_timewait_input+0xd4>)
 800a2c0:	f006 fb94 	bl	80109ec <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a2c4:	4b27      	ldr	r3, [pc, #156]	; (800a364 <tcp_timewait_input+0xc8>)
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	f003 0302 	and.w	r3, r3, #2
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d02a      	beq.n	800a326 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a2d0:	4b28      	ldr	r3, [pc, #160]	; (800a374 <tcp_timewait_input+0xd8>)
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	db2d      	blt.n	800a33a <tcp_timewait_input+0x9e>
 800a2de:	4b25      	ldr	r3, [pc, #148]	; (800a374 <tcp_timewait_input+0xd8>)
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e6:	6879      	ldr	r1, [r7, #4]
 800a2e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a2ea:	440b      	add	r3, r1
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	dc23      	bgt.n	800a33a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2f2:	4b21      	ldr	r3, [pc, #132]	; (800a378 <tcp_timewait_input+0xdc>)
 800a2f4:	6819      	ldr	r1, [r3, #0]
 800a2f6:	4b21      	ldr	r3, [pc, #132]	; (800a37c <tcp_timewait_input+0xe0>)
 800a2f8:	881b      	ldrh	r3, [r3, #0]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	4b1d      	ldr	r3, [pc, #116]	; (800a374 <tcp_timewait_input+0xd8>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a302:	4b1f      	ldr	r3, [pc, #124]	; (800a380 <tcp_timewait_input+0xe4>)
 800a304:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a306:	885b      	ldrh	r3, [r3, #2]
 800a308:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a30a:	4a1d      	ldr	r2, [pc, #116]	; (800a380 <tcp_timewait_input+0xe4>)
 800a30c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a30e:	8812      	ldrh	r2, [r2, #0]
 800a310:	b292      	uxth	r2, r2
 800a312:	9202      	str	r2, [sp, #8]
 800a314:	9301      	str	r3, [sp, #4]
 800a316:	4b1b      	ldr	r3, [pc, #108]	; (800a384 <tcp_timewait_input+0xe8>)
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	4b1b      	ldr	r3, [pc, #108]	; (800a388 <tcp_timewait_input+0xec>)
 800a31c:	4602      	mov	r2, r0
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f002 fe72 	bl	800d008 <tcp_rst>
      return;
 800a324:	e01b      	b.n	800a35e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a326:	4b0f      	ldr	r3, [pc, #60]	; (800a364 <tcp_timewait_input+0xc8>)
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	f003 0301 	and.w	r3, r3, #1
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d003      	beq.n	800a33a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a332:	4b16      	ldr	r3, [pc, #88]	; (800a38c <tcp_timewait_input+0xf0>)
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a33a:	4b10      	ldr	r3, [pc, #64]	; (800a37c <tcp_timewait_input+0xe0>)
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00c      	beq.n	800a35c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	8b5b      	ldrh	r3, [r3, #26]
 800a346:	f043 0302 	orr.w	r3, r3, #2
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f002 f8a5 	bl	800c4a0 <tcp_output>
  }
  return;
 800a356:	e001      	b.n	800a35c <tcp_timewait_input+0xc0>
    return;
 800a358:	bf00      	nop
 800a35a:	e000      	b.n	800a35e <tcp_timewait_input+0xc2>
  return;
 800a35c:	bf00      	nop
}
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	20000894 	.word	0x20000894
 800a368:	08013ff8 	.word	0x08013ff8
 800a36c:	08014210 	.word	0x08014210
 800a370:	08014044 	.word	0x08014044
 800a374:	20000888 	.word	0x20000888
 800a378:	2000088c 	.word	0x2000088c
 800a37c:	20000892 	.word	0x20000892
 800a380:	20000878 	.word	0x20000878
 800a384:	200056ec 	.word	0x200056ec
 800a388:	200056f0 	.word	0x200056f0
 800a38c:	2000ade4 	.word	0x2000ade4

0800a390 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a390:	b590      	push	{r4, r7, lr}
 800a392:	b08d      	sub	sp, #52	; 0x34
 800a394:	af04      	add	r7, sp, #16
 800a396:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a398:	2300      	movs	r3, #0
 800a39a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d106      	bne.n	800a3b4 <tcp_process+0x24>
 800a3a6:	4b9d      	ldr	r3, [pc, #628]	; (800a61c <tcp_process+0x28c>)
 800a3a8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a3ac:	499c      	ldr	r1, [pc, #624]	; (800a620 <tcp_process+0x290>)
 800a3ae:	489d      	ldr	r0, [pc, #628]	; (800a624 <tcp_process+0x294>)
 800a3b0:	f006 fb1c 	bl	80109ec <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a3b4:	4b9c      	ldr	r3, [pc, #624]	; (800a628 <tcp_process+0x298>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	f003 0304 	and.w	r3, r3, #4
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d04e      	beq.n	800a45e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	7d1b      	ldrb	r3, [r3, #20]
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d108      	bne.n	800a3da <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a3cc:	4b97      	ldr	r3, [pc, #604]	; (800a62c <tcp_process+0x29c>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d123      	bne.n	800a41c <tcp_process+0x8c>
        acceptable = 1;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	76fb      	strb	r3, [r7, #27]
 800a3d8:	e020      	b.n	800a41c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3de:	4b94      	ldr	r3, [pc, #592]	; (800a630 <tcp_process+0x2a0>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d102      	bne.n	800a3ec <tcp_process+0x5c>
        acceptable = 1;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	76fb      	strb	r3, [r7, #27]
 800a3ea:	e017      	b.n	800a41c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a3ec:	4b90      	ldr	r3, [pc, #576]	; (800a630 <tcp_process+0x2a0>)
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	db10      	blt.n	800a41c <tcp_process+0x8c>
 800a3fa:	4b8d      	ldr	r3, [pc, #564]	; (800a630 <tcp_process+0x2a0>)
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a402:	6879      	ldr	r1, [r7, #4]
 800a404:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a406:	440b      	add	r3, r1
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	dc06      	bgt.n	800a41c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	8b5b      	ldrh	r3, [r3, #26]
 800a412:	f043 0302 	orr.w	r3, r3, #2
 800a416:	b29a      	uxth	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a41c:	7efb      	ldrb	r3, [r7, #27]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d01b      	beq.n	800a45a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	7d1b      	ldrb	r3, [r3, #20]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d106      	bne.n	800a438 <tcp_process+0xa8>
 800a42a:	4b7c      	ldr	r3, [pc, #496]	; (800a61c <tcp_process+0x28c>)
 800a42c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a430:	4980      	ldr	r1, [pc, #512]	; (800a634 <tcp_process+0x2a4>)
 800a432:	487c      	ldr	r0, [pc, #496]	; (800a624 <tcp_process+0x294>)
 800a434:	f006 fada 	bl	80109ec <iprintf>
      recv_flags |= TF_RESET;
 800a438:	4b7f      	ldr	r3, [pc, #508]	; (800a638 <tcp_process+0x2a8>)
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	f043 0308 	orr.w	r3, r3, #8
 800a440:	b2da      	uxtb	r2, r3
 800a442:	4b7d      	ldr	r3, [pc, #500]	; (800a638 <tcp_process+0x2a8>)
 800a444:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	8b5b      	ldrh	r3, [r3, #26]
 800a44a:	f023 0301 	bic.w	r3, r3, #1
 800a44e:	b29a      	uxth	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a454:	f06f 030d 	mvn.w	r3, #13
 800a458:	e37a      	b.n	800ab50 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	e378      	b.n	800ab50 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a45e:	4b72      	ldr	r3, [pc, #456]	; (800a628 <tcp_process+0x298>)
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	f003 0302 	and.w	r3, r3, #2
 800a466:	2b00      	cmp	r3, #0
 800a468:	d010      	beq.n	800a48c <tcp_process+0xfc>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	7d1b      	ldrb	r3, [r3, #20]
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d00c      	beq.n	800a48c <tcp_process+0xfc>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	7d1b      	ldrb	r3, [r3, #20]
 800a476:	2b03      	cmp	r3, #3
 800a478:	d008      	beq.n	800a48c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	8b5b      	ldrh	r3, [r3, #26]
 800a47e:	f043 0302 	orr.w	r3, r3, #2
 800a482:	b29a      	uxth	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	e361      	b.n	800ab50 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	8b5b      	ldrh	r3, [r3, #26]
 800a490:	f003 0310 	and.w	r3, r3, #16
 800a494:	2b00      	cmp	r3, #0
 800a496:	d103      	bne.n	800a4a0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a498:	4b68      	ldr	r3, [pc, #416]	; (800a63c <tcp_process+0x2ac>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f001 fc2f 	bl	800bd14 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	7d1b      	ldrb	r3, [r3, #20]
 800a4ba:	3b02      	subs	r3, #2
 800a4bc:	2b07      	cmp	r3, #7
 800a4be:	f200 8337 	bhi.w	800ab30 <tcp_process+0x7a0>
 800a4c2:	a201      	add	r2, pc, #4	; (adr r2, 800a4c8 <tcp_process+0x138>)
 800a4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c8:	0800a4e9 	.word	0x0800a4e9
 800a4cc:	0800a719 	.word	0x0800a719
 800a4d0:	0800a891 	.word	0x0800a891
 800a4d4:	0800a8bb 	.word	0x0800a8bb
 800a4d8:	0800a9df 	.word	0x0800a9df
 800a4dc:	0800a891 	.word	0x0800a891
 800a4e0:	0800aa6b 	.word	0x0800aa6b
 800a4e4:	0800aafb 	.word	0x0800aafb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a4e8:	4b4f      	ldr	r3, [pc, #316]	; (800a628 <tcp_process+0x298>)
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	f003 0310 	and.w	r3, r3, #16
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	f000 80e4 	beq.w	800a6be <tcp_process+0x32e>
 800a4f6:	4b4c      	ldr	r3, [pc, #304]	; (800a628 <tcp_process+0x298>)
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 80dd 	beq.w	800a6be <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	4b48      	ldr	r3, [pc, #288]	; (800a62c <tcp_process+0x29c>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	429a      	cmp	r2, r3
 800a510:	f040 80d5 	bne.w	800a6be <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a514:	4b46      	ldr	r3, [pc, #280]	; (800a630 <tcp_process+0x2a0>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	1c5a      	adds	r2, r3, #1
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a526:	4b41      	ldr	r3, [pc, #260]	; (800a62c <tcp_process+0x29c>)
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a52e:	4b44      	ldr	r3, [pc, #272]	; (800a640 <tcp_process+0x2b0>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	89db      	ldrh	r3, [r3, #14]
 800a534:	b29a      	uxth	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a548:	4b39      	ldr	r3, [pc, #228]	; (800a630 <tcp_process+0x2a0>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	1e5a      	subs	r2, r3, #1
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2204      	movs	r2, #4
 800a556:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3304      	adds	r3, #4
 800a560:	4618      	mov	r0, r3
 800a562:	f004 faf1 	bl	800eb48 <ip4_route>
 800a566:	4601      	mov	r1, r0
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	3304      	adds	r3, #4
 800a56c:	461a      	mov	r2, r3
 800a56e:	4620      	mov	r0, r4
 800a570:	f7ff f88c 	bl	800968c <tcp_eff_send_mss_netif>
 800a574:	4603      	mov	r3, r0
 800a576:	461a      	mov	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a580:	009a      	lsls	r2, r3, #2
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a586:	005b      	lsls	r3, r3, #1
 800a588:	f241 111c 	movw	r1, #4380	; 0x111c
 800a58c:	428b      	cmp	r3, r1
 800a58e:	bf38      	it	cc
 800a590:	460b      	movcc	r3, r1
 800a592:	429a      	cmp	r2, r3
 800a594:	d204      	bcs.n	800a5a0 <tcp_process+0x210>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	e00d      	b.n	800a5bc <tcp_process+0x22c>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5a4:	005b      	lsls	r3, r3, #1
 800a5a6:	f241 121c 	movw	r2, #4380	; 0x111c
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d904      	bls.n	800a5b8 <tcp_process+0x228>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	e001      	b.n	800a5bc <tcp_process+0x22c>
 800a5b8:	f241 131c 	movw	r3, #4380	; 0x111c
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d106      	bne.n	800a5da <tcp_process+0x24a>
 800a5cc:	4b13      	ldr	r3, [pc, #76]	; (800a61c <tcp_process+0x28c>)
 800a5ce:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a5d2:	491c      	ldr	r1, [pc, #112]	; (800a644 <tcp_process+0x2b4>)
 800a5d4:	4813      	ldr	r0, [pc, #76]	; (800a624 <tcp_process+0x294>)
 800a5d6:	f006 fa09 	bl	80109ec <iprintf>
        --pcb->snd_queuelen;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ee:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d12a      	bne.n	800a64c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5fa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d106      	bne.n	800a610 <tcp_process+0x280>
 800a602:	4b06      	ldr	r3, [pc, #24]	; (800a61c <tcp_process+0x28c>)
 800a604:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a608:	490f      	ldr	r1, [pc, #60]	; (800a648 <tcp_process+0x2b8>)
 800a60a:	4806      	ldr	r0, [pc, #24]	; (800a624 <tcp_process+0x294>)
 800a60c:	f006 f9ee 	bl	80109ec <iprintf>
          pcb->unsent = rseg->next;
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	66da      	str	r2, [r3, #108]	; 0x6c
 800a618:	e01c      	b.n	800a654 <tcp_process+0x2c4>
 800a61a:	bf00      	nop
 800a61c:	08013ff8 	.word	0x08013ff8
 800a620:	08014230 	.word	0x08014230
 800a624:	08014044 	.word	0x08014044
 800a628:	20000894 	.word	0x20000894
 800a62c:	2000088c 	.word	0x2000088c
 800a630:	20000888 	.word	0x20000888
 800a634:	0801424c 	.word	0x0801424c
 800a638:	20000895 	.word	0x20000895
 800a63c:	2000ade4 	.word	0x2000ade4
 800a640:	20000878 	.word	0x20000878
 800a644:	0801426c 	.word	0x0801426c
 800a648:	08014284 	.word	0x08014284
        } else {
          pcb->unacked = rseg->next;
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a654:	69f8      	ldr	r0, [r7, #28]
 800a656:	f7fe fd22 	bl	800909e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d104      	bne.n	800a66c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a668:	861a      	strh	r2, [r3, #48]	; 0x30
 800a66a:	e006      	b.n	800a67a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00a      	beq.n	800a69a <tcp_process+0x30a>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	6910      	ldr	r0, [r2, #16]
 800a68e:	2200      	movs	r2, #0
 800a690:	6879      	ldr	r1, [r7, #4]
 800a692:	4798      	blx	r3
 800a694:	4603      	mov	r3, r0
 800a696:	76bb      	strb	r3, [r7, #26]
 800a698:	e001      	b.n	800a69e <tcp_process+0x30e>
 800a69a:	2300      	movs	r3, #0
 800a69c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a69e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a6a2:	f113 0f0d 	cmn.w	r3, #13
 800a6a6:	d102      	bne.n	800a6ae <tcp_process+0x31e>
          return ERR_ABRT;
 800a6a8:	f06f 030c 	mvn.w	r3, #12
 800a6ac:	e250      	b.n	800ab50 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	8b5b      	ldrh	r3, [r3, #26]
 800a6b2:	f043 0302 	orr.w	r3, r3, #2
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a6bc:	e23a      	b.n	800ab34 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a6be:	4b98      	ldr	r3, [pc, #608]	; (800a920 <tcp_process+0x590>)
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	f003 0310 	and.w	r3, r3, #16
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f000 8234 	beq.w	800ab34 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6cc:	4b95      	ldr	r3, [pc, #596]	; (800a924 <tcp_process+0x594>)
 800a6ce:	6819      	ldr	r1, [r3, #0]
 800a6d0:	4b95      	ldr	r3, [pc, #596]	; (800a928 <tcp_process+0x598>)
 800a6d2:	881b      	ldrh	r3, [r3, #0]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	4b95      	ldr	r3, [pc, #596]	; (800a92c <tcp_process+0x59c>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6dc:	4b94      	ldr	r3, [pc, #592]	; (800a930 <tcp_process+0x5a0>)
 800a6de:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6e0:	885b      	ldrh	r3, [r3, #2]
 800a6e2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6e4:	4a92      	ldr	r2, [pc, #584]	; (800a930 <tcp_process+0x5a0>)
 800a6e6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6e8:	8812      	ldrh	r2, [r2, #0]
 800a6ea:	b292      	uxth	r2, r2
 800a6ec:	9202      	str	r2, [sp, #8]
 800a6ee:	9301      	str	r3, [sp, #4]
 800a6f0:	4b90      	ldr	r3, [pc, #576]	; (800a934 <tcp_process+0x5a4>)
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	4b90      	ldr	r3, [pc, #576]	; (800a938 <tcp_process+0x5a8>)
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f002 fc85 	bl	800d008 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a704:	2b05      	cmp	r3, #5
 800a706:	f200 8215 	bhi.w	800ab34 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f002 fa51 	bl	800cbb8 <tcp_rexmit_rto>
      break;
 800a716:	e20d      	b.n	800ab34 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a718:	4b81      	ldr	r3, [pc, #516]	; (800a920 <tcp_process+0x590>)
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	f003 0310 	and.w	r3, r3, #16
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 80a1 	beq.w	800a868 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a726:	4b7f      	ldr	r3, [pc, #508]	; (800a924 <tcp_process+0x594>)
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	3b01      	subs	r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	db7e      	blt.n	800a834 <tcp_process+0x4a4>
 800a736:	4b7b      	ldr	r3, [pc, #492]	; (800a924 <tcp_process+0x594>)
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	2b00      	cmp	r3, #0
 800a742:	dc77      	bgt.n	800a834 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2204      	movs	r2, #4
 800a748:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d102      	bne.n	800a758 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a752:	23fa      	movs	r3, #250	; 0xfa
 800a754:	76bb      	strb	r3, [r7, #26]
 800a756:	e01d      	b.n	800a794 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d106      	bne.n	800a770 <tcp_process+0x3e0>
 800a762:	4b76      	ldr	r3, [pc, #472]	; (800a93c <tcp_process+0x5ac>)
 800a764:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a768:	4975      	ldr	r1, [pc, #468]	; (800a940 <tcp_process+0x5b0>)
 800a76a:	4876      	ldr	r0, [pc, #472]	; (800a944 <tcp_process+0x5b4>)
 800a76c:	f006 f93e 	bl	80109ec <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00a      	beq.n	800a790 <tcp_process+0x400>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	6910      	ldr	r0, [r2, #16]
 800a784:	2200      	movs	r2, #0
 800a786:	6879      	ldr	r1, [r7, #4]
 800a788:	4798      	blx	r3
 800a78a:	4603      	mov	r3, r0
 800a78c:	76bb      	strb	r3, [r7, #26]
 800a78e:	e001      	b.n	800a794 <tcp_process+0x404>
 800a790:	23f0      	movs	r3, #240	; 0xf0
 800a792:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a794:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00a      	beq.n	800a7b2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a79c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a7a0:	f113 0f0d 	cmn.w	r3, #13
 800a7a4:	d002      	beq.n	800a7ac <tcp_process+0x41c>
              tcp_abort(pcb);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7fd ff8e 	bl	80086c8 <tcp_abort>
            }
            return ERR_ABRT;
 800a7ac:	f06f 030c 	mvn.w	r3, #12
 800a7b0:	e1ce      	b.n	800ab50 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fae0 	bl	800ad78 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a7b8:	4b63      	ldr	r3, [pc, #396]	; (800a948 <tcp_process+0x5b8>)
 800a7ba:	881b      	ldrh	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d005      	beq.n	800a7cc <tcp_process+0x43c>
            recv_acked--;
 800a7c0:	4b61      	ldr	r3, [pc, #388]	; (800a948 <tcp_process+0x5b8>)
 800a7c2:	881b      	ldrh	r3, [r3, #0]
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	4b5f      	ldr	r3, [pc, #380]	; (800a948 <tcp_process+0x5b8>)
 800a7ca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7d0:	009a      	lsls	r2, r3, #2
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7d6:	005b      	lsls	r3, r3, #1
 800a7d8:	f241 111c 	movw	r1, #4380	; 0x111c
 800a7dc:	428b      	cmp	r3, r1
 800a7de:	bf38      	it	cc
 800a7e0:	460b      	movcc	r3, r1
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d204      	bcs.n	800a7f0 <tcp_process+0x460>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	e00d      	b.n	800a80c <tcp_process+0x47c>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	f241 121c 	movw	r2, #4380	; 0x111c
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d904      	bls.n	800a808 <tcp_process+0x478>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a802:	005b      	lsls	r3, r3, #1
 800a804:	b29b      	uxth	r3, r3
 800a806:	e001      	b.n	800a80c <tcp_process+0x47c>
 800a808:	f241 131c 	movw	r3, #4380	; 0x111c
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a812:	4b4e      	ldr	r3, [pc, #312]	; (800a94c <tcp_process+0x5bc>)
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	f003 0320 	and.w	r3, r3, #32
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d037      	beq.n	800a88e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	8b5b      	ldrh	r3, [r3, #26]
 800a822:	f043 0302 	orr.w	r3, r3, #2
 800a826:	b29a      	uxth	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2207      	movs	r2, #7
 800a830:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a832:	e02c      	b.n	800a88e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a834:	4b3b      	ldr	r3, [pc, #236]	; (800a924 <tcp_process+0x594>)
 800a836:	6819      	ldr	r1, [r3, #0]
 800a838:	4b3b      	ldr	r3, [pc, #236]	; (800a928 <tcp_process+0x598>)
 800a83a:	881b      	ldrh	r3, [r3, #0]
 800a83c:	461a      	mov	r2, r3
 800a83e:	4b3b      	ldr	r3, [pc, #236]	; (800a92c <tcp_process+0x59c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a844:	4b3a      	ldr	r3, [pc, #232]	; (800a930 <tcp_process+0x5a0>)
 800a846:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a848:	885b      	ldrh	r3, [r3, #2]
 800a84a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a84c:	4a38      	ldr	r2, [pc, #224]	; (800a930 <tcp_process+0x5a0>)
 800a84e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a850:	8812      	ldrh	r2, [r2, #0]
 800a852:	b292      	uxth	r2, r2
 800a854:	9202      	str	r2, [sp, #8]
 800a856:	9301      	str	r3, [sp, #4]
 800a858:	4b36      	ldr	r3, [pc, #216]	; (800a934 <tcp_process+0x5a4>)
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	4b36      	ldr	r3, [pc, #216]	; (800a938 <tcp_process+0x5a8>)
 800a85e:	4602      	mov	r2, r0
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f002 fbd1 	bl	800d008 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a866:	e167      	b.n	800ab38 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a868:	4b2d      	ldr	r3, [pc, #180]	; (800a920 <tcp_process+0x590>)
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	f003 0302 	and.w	r3, r3, #2
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 8161 	beq.w	800ab38 <tcp_process+0x7a8>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87a:	1e5a      	subs	r2, r3, #1
 800a87c:	4b2b      	ldr	r3, [pc, #172]	; (800a92c <tcp_process+0x59c>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	429a      	cmp	r2, r3
 800a882:	f040 8159 	bne.w	800ab38 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f002 f9b8 	bl	800cbfc <tcp_rexmit>
      break;
 800a88c:	e154      	b.n	800ab38 <tcp_process+0x7a8>
 800a88e:	e153      	b.n	800ab38 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fa71 	bl	800ad78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a896:	4b2d      	ldr	r3, [pc, #180]	; (800a94c <tcp_process+0x5bc>)
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	f003 0320 	and.w	r3, r3, #32
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f000 814c 	beq.w	800ab3c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	8b5b      	ldrh	r3, [r3, #26]
 800a8a8:	f043 0302 	orr.w	r3, r3, #2
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2207      	movs	r2, #7
 800a8b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a8b8:	e140      	b.n	800ab3c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fa5c 	bl	800ad78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a8c0:	4b22      	ldr	r3, [pc, #136]	; (800a94c <tcp_process+0x5bc>)
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	f003 0320 	and.w	r3, r3, #32
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d071      	beq.n	800a9b0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a8cc:	4b14      	ldr	r3, [pc, #80]	; (800a920 <tcp_process+0x590>)
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	f003 0310 	and.w	r3, r3, #16
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d060      	beq.n	800a99a <tcp_process+0x60a>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a8dc:	4b11      	ldr	r3, [pc, #68]	; (800a924 <tcp_process+0x594>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d15a      	bne.n	800a99a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d156      	bne.n	800a99a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	8b5b      	ldrh	r3, [r3, #26]
 800a8f0:	f043 0302 	orr.w	r3, r3, #2
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f7fe fdbc 	bl	8009478 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a900:	4b13      	ldr	r3, [pc, #76]	; (800a950 <tcp_process+0x5c0>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	429a      	cmp	r2, r3
 800a908:	d105      	bne.n	800a916 <tcp_process+0x586>
 800a90a:	4b11      	ldr	r3, [pc, #68]	; (800a950 <tcp_process+0x5c0>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	4a0f      	ldr	r2, [pc, #60]	; (800a950 <tcp_process+0x5c0>)
 800a912:	6013      	str	r3, [r2, #0]
 800a914:	e02e      	b.n	800a974 <tcp_process+0x5e4>
 800a916:	4b0e      	ldr	r3, [pc, #56]	; (800a950 <tcp_process+0x5c0>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	617b      	str	r3, [r7, #20]
 800a91c:	e027      	b.n	800a96e <tcp_process+0x5de>
 800a91e:	bf00      	nop
 800a920:	20000894 	.word	0x20000894
 800a924:	2000088c 	.word	0x2000088c
 800a928:	20000892 	.word	0x20000892
 800a92c:	20000888 	.word	0x20000888
 800a930:	20000878 	.word	0x20000878
 800a934:	200056ec 	.word	0x200056ec
 800a938:	200056f0 	.word	0x200056f0
 800a93c:	08013ff8 	.word	0x08013ff8
 800a940:	08014298 	.word	0x08014298
 800a944:	08014044 	.word	0x08014044
 800a948:	20000890 	.word	0x20000890
 800a94c:	20000895 	.word	0x20000895
 800a950:	2000ade0 	.word	0x2000ade0
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d104      	bne.n	800a968 <tcp_process+0x5d8>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	68da      	ldr	r2, [r3, #12]
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	60da      	str	r2, [r3, #12]
 800a966:	e005      	b.n	800a974 <tcp_process+0x5e4>
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	617b      	str	r3, [r7, #20]
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1ef      	bne.n	800a954 <tcp_process+0x5c4>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	60da      	str	r2, [r3, #12]
 800a97a:	4b77      	ldr	r3, [pc, #476]	; (800ab58 <tcp_process+0x7c8>)
 800a97c:	2201      	movs	r2, #1
 800a97e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	220a      	movs	r2, #10
 800a984:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a986:	4b75      	ldr	r3, [pc, #468]	; (800ab5c <tcp_process+0x7cc>)
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	60da      	str	r2, [r3, #12]
 800a98e:	4a73      	ldr	r2, [pc, #460]	; (800ab5c <tcp_process+0x7cc>)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6013      	str	r3, [r2, #0]
 800a994:	f002 fcfa 	bl	800d38c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a998:	e0d2      	b.n	800ab40 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	8b5b      	ldrh	r3, [r3, #26]
 800a99e:	f043 0302 	orr.w	r3, r3, #2
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2208      	movs	r2, #8
 800a9ac:	751a      	strb	r2, [r3, #20]
      break;
 800a9ae:	e0c7      	b.n	800ab40 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a9b0:	4b6b      	ldr	r3, [pc, #428]	; (800ab60 <tcp_process+0x7d0>)
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	f003 0310 	and.w	r3, r3, #16
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 80c1 	beq.w	800ab40 <tcp_process+0x7b0>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a9c2:	4b68      	ldr	r3, [pc, #416]	; (800ab64 <tcp_process+0x7d4>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	f040 80ba 	bne.w	800ab40 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f040 80b5 	bne.w	800ab40 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2206      	movs	r2, #6
 800a9da:	751a      	strb	r2, [r3, #20]
      break;
 800a9dc:	e0b0      	b.n	800ab40 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 f9ca 	bl	800ad78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a9e4:	4b60      	ldr	r3, [pc, #384]	; (800ab68 <tcp_process+0x7d8>)
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	f003 0320 	and.w	r3, r3, #32
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f000 80a9 	beq.w	800ab44 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	8b5b      	ldrh	r3, [r3, #26]
 800a9f6:	f043 0302 	orr.w	r3, r3, #2
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f7fe fd39 	bl	8009478 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aa06:	4b59      	ldr	r3, [pc, #356]	; (800ab6c <tcp_process+0x7dc>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d105      	bne.n	800aa1c <tcp_process+0x68c>
 800aa10:	4b56      	ldr	r3, [pc, #344]	; (800ab6c <tcp_process+0x7dc>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	4a55      	ldr	r2, [pc, #340]	; (800ab6c <tcp_process+0x7dc>)
 800aa18:	6013      	str	r3, [r2, #0]
 800aa1a:	e013      	b.n	800aa44 <tcp_process+0x6b4>
 800aa1c:	4b53      	ldr	r3, [pc, #332]	; (800ab6c <tcp_process+0x7dc>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	613b      	str	r3, [r7, #16]
 800aa22:	e00c      	b.n	800aa3e <tcp_process+0x6ae>
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d104      	bne.n	800aa38 <tcp_process+0x6a8>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68da      	ldr	r2, [r3, #12]
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	60da      	str	r2, [r3, #12]
 800aa36:	e005      	b.n	800aa44 <tcp_process+0x6b4>
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	613b      	str	r3, [r7, #16]
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1ef      	bne.n	800aa24 <tcp_process+0x694>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	60da      	str	r2, [r3, #12]
 800aa4a:	4b43      	ldr	r3, [pc, #268]	; (800ab58 <tcp_process+0x7c8>)
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	220a      	movs	r2, #10
 800aa54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aa56:	4b41      	ldr	r3, [pc, #260]	; (800ab5c <tcp_process+0x7cc>)
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	60da      	str	r2, [r3, #12]
 800aa5e:	4a3f      	ldr	r2, [pc, #252]	; (800ab5c <tcp_process+0x7cc>)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6013      	str	r3, [r2, #0]
 800aa64:	f002 fc92 	bl	800d38c <tcp_timer_needed>
      }
      break;
 800aa68:	e06c      	b.n	800ab44 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f984 	bl	800ad78 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aa70:	4b3b      	ldr	r3, [pc, #236]	; (800ab60 <tcp_process+0x7d0>)
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	f003 0310 	and.w	r3, r3, #16
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d065      	beq.n	800ab48 <tcp_process+0x7b8>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa80:	4b38      	ldr	r3, [pc, #224]	; (800ab64 <tcp_process+0x7d4>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d15f      	bne.n	800ab48 <tcp_process+0x7b8>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d15b      	bne.n	800ab48 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7fe fcf1 	bl	8009478 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aa96:	4b35      	ldr	r3, [pc, #212]	; (800ab6c <tcp_process+0x7dc>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d105      	bne.n	800aaac <tcp_process+0x71c>
 800aaa0:	4b32      	ldr	r3, [pc, #200]	; (800ab6c <tcp_process+0x7dc>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	4a31      	ldr	r2, [pc, #196]	; (800ab6c <tcp_process+0x7dc>)
 800aaa8:	6013      	str	r3, [r2, #0]
 800aaaa:	e013      	b.n	800aad4 <tcp_process+0x744>
 800aaac:	4b2f      	ldr	r3, [pc, #188]	; (800ab6c <tcp_process+0x7dc>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	60fb      	str	r3, [r7, #12]
 800aab2:	e00c      	b.n	800aace <tcp_process+0x73e>
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d104      	bne.n	800aac8 <tcp_process+0x738>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	68da      	ldr	r2, [r3, #12]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	60da      	str	r2, [r3, #12]
 800aac6:	e005      	b.n	800aad4 <tcp_process+0x744>
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	60fb      	str	r3, [r7, #12]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d1ef      	bne.n	800aab4 <tcp_process+0x724>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	60da      	str	r2, [r3, #12]
 800aada:	4b1f      	ldr	r3, [pc, #124]	; (800ab58 <tcp_process+0x7c8>)
 800aadc:	2201      	movs	r2, #1
 800aade:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	220a      	movs	r2, #10
 800aae4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aae6:	4b1d      	ldr	r3, [pc, #116]	; (800ab5c <tcp_process+0x7cc>)
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	60da      	str	r2, [r3, #12]
 800aaee:	4a1b      	ldr	r2, [pc, #108]	; (800ab5c <tcp_process+0x7cc>)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6013      	str	r3, [r2, #0]
 800aaf4:	f002 fc4a 	bl	800d38c <tcp_timer_needed>
      }
      break;
 800aaf8:	e026      	b.n	800ab48 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f93c 	bl	800ad78 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ab00:	4b17      	ldr	r3, [pc, #92]	; (800ab60 <tcp_process+0x7d0>)
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	f003 0310 	and.w	r3, r3, #16
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d01f      	beq.n	800ab4c <tcp_process+0x7bc>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab10:	4b14      	ldr	r3, [pc, #80]	; (800ab64 <tcp_process+0x7d4>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d119      	bne.n	800ab4c <tcp_process+0x7bc>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d115      	bne.n	800ab4c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ab20:	4b11      	ldr	r3, [pc, #68]	; (800ab68 <tcp_process+0x7d8>)
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	f043 0310 	orr.w	r3, r3, #16
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	4b0f      	ldr	r3, [pc, #60]	; (800ab68 <tcp_process+0x7d8>)
 800ab2c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ab2e:	e00d      	b.n	800ab4c <tcp_process+0x7bc>
    default:
      break;
 800ab30:	bf00      	nop
 800ab32:	e00c      	b.n	800ab4e <tcp_process+0x7be>
      break;
 800ab34:	bf00      	nop
 800ab36:	e00a      	b.n	800ab4e <tcp_process+0x7be>
      break;
 800ab38:	bf00      	nop
 800ab3a:	e008      	b.n	800ab4e <tcp_process+0x7be>
      break;
 800ab3c:	bf00      	nop
 800ab3e:	e006      	b.n	800ab4e <tcp_process+0x7be>
      break;
 800ab40:	bf00      	nop
 800ab42:	e004      	b.n	800ab4e <tcp_process+0x7be>
      break;
 800ab44:	bf00      	nop
 800ab46:	e002      	b.n	800ab4e <tcp_process+0x7be>
      break;
 800ab48:	bf00      	nop
 800ab4a:	e000      	b.n	800ab4e <tcp_process+0x7be>
      break;
 800ab4c:	bf00      	nop
  }
  return ERR_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3724      	adds	r7, #36	; 0x24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd90      	pop	{r4, r7, pc}
 800ab58:	2000addc 	.word	0x2000addc
 800ab5c:	2000adf0 	.word	0x2000adf0
 800ab60:	20000894 	.word	0x20000894
 800ab64:	2000088c 	.word	0x2000088c
 800ab68:	20000895 	.word	0x20000895
 800ab6c:	2000ade0 	.word	0x2000ade0

0800ab70 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ab70:	b590      	push	{r4, r7, lr}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d106      	bne.n	800ab8e <tcp_oos_insert_segment+0x1e>
 800ab80:	4b3b      	ldr	r3, [pc, #236]	; (800ac70 <tcp_oos_insert_segment+0x100>)
 800ab82:	f240 421f 	movw	r2, #1055	; 0x41f
 800ab86:	493b      	ldr	r1, [pc, #236]	; (800ac74 <tcp_oos_insert_segment+0x104>)
 800ab88:	483b      	ldr	r0, [pc, #236]	; (800ac78 <tcp_oos_insert_segment+0x108>)
 800ab8a:	f005 ff2f 	bl	80109ec <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	899b      	ldrh	r3, [r3, #12]
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fb fcb0 	bl	80064fc <lwip_htons>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	f003 0301 	and.w	r3, r3, #1
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d028      	beq.n	800abfa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800aba8:	6838      	ldr	r0, [r7, #0]
 800abaa:	f7fe fa63 	bl	8009074 <tcp_segs_free>
    next = NULL;
 800abae:	2300      	movs	r3, #0
 800abb0:	603b      	str	r3, [r7, #0]
 800abb2:	e056      	b.n	800ac62 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	899b      	ldrh	r3, [r3, #12]
 800abba:	b29b      	uxth	r3, r3
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7fb fc9d 	bl	80064fc <lwip_htons>
 800abc2:	4603      	mov	r3, r0
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	f003 0301 	and.w	r3, r3, #1
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00d      	beq.n	800abea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	899b      	ldrh	r3, [r3, #12]
 800abd4:	b29c      	uxth	r4, r3
 800abd6:	2001      	movs	r0, #1
 800abd8:	f7fb fc90 	bl	80064fc <lwip_htons>
 800abdc:	4603      	mov	r3, r0
 800abde:	461a      	mov	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	4322      	orrs	r2, r4
 800abe6:	b292      	uxth	r2, r2
 800abe8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f7fe fa52 	bl	800909e <tcp_seg_free>
    while (next &&
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00e      	beq.n	800ac1e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	891b      	ldrh	r3, [r3, #8]
 800ac04:	461a      	mov	r2, r3
 800ac06:	4b1d      	ldr	r3, [pc, #116]	; (800ac7c <tcp_oos_insert_segment+0x10c>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	441a      	add	r2, r3
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	6839      	ldr	r1, [r7, #0]
 800ac14:	8909      	ldrh	r1, [r1, #8]
 800ac16:	440b      	add	r3, r1
 800ac18:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	daca      	bge.n	800abb4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d01e      	beq.n	800ac62 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	891b      	ldrh	r3, [r3, #8]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	4b14      	ldr	r3, [pc, #80]	; (800ac7c <tcp_oos_insert_segment+0x10c>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	441a      	add	r2, r3
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	dd12      	ble.n	800ac62 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	4b0d      	ldr	r3, [pc, #52]	; (800ac7c <tcp_oos_insert_segment+0x10c>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	1ad3      	subs	r3, r2, r3
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	891b      	ldrh	r3, [r3, #8]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	f7fc fe25 	bl	80078ac <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	601a      	str	r2, [r3, #0]
}
 800ac68:	bf00      	nop
 800ac6a:	3714      	adds	r7, #20
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd90      	pop	{r4, r7, pc}
 800ac70:	08013ff8 	.word	0x08013ff8
 800ac74:	080142b8 	.word	0x080142b8
 800ac78:	08014044 	.word	0x08014044
 800ac7c:	20000888 	.word	0x20000888

0800ac80 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ac80:	b5b0      	push	{r4, r5, r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	607a      	str	r2, [r7, #4]
 800ac8c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ac8e:	e03e      	b.n	800ad0e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fd f812 	bl	8007cc8 <pbuf_clen>
 800aca4:	4603      	mov	r3, r0
 800aca6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800acae:	8a7a      	ldrh	r2, [r7, #18]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d906      	bls.n	800acc2 <tcp_free_acked_segments+0x42>
 800acb4:	4b2a      	ldr	r3, [pc, #168]	; (800ad60 <tcp_free_acked_segments+0xe0>)
 800acb6:	f240 4257 	movw	r2, #1111	; 0x457
 800acba:	492a      	ldr	r1, [pc, #168]	; (800ad64 <tcp_free_acked_segments+0xe4>)
 800acbc:	482a      	ldr	r0, [pc, #168]	; (800ad68 <tcp_free_acked_segments+0xe8>)
 800acbe:	f005 fe95 	bl	80109ec <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800acc8:	8a7b      	ldrh	r3, [r7, #18]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	b29a      	uxth	r2, r3
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	891a      	ldrh	r2, [r3, #8]
 800acd8:	4b24      	ldr	r3, [pc, #144]	; (800ad6c <tcp_free_acked_segments+0xec>)
 800acda:	881b      	ldrh	r3, [r3, #0]
 800acdc:	4413      	add	r3, r2
 800acde:	b29a      	uxth	r2, r3
 800ace0:	4b22      	ldr	r3, [pc, #136]	; (800ad6c <tcp_free_acked_segments+0xec>)
 800ace2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ace4:	6978      	ldr	r0, [r7, #20]
 800ace6:	f7fe f9da 	bl	800909e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00c      	beq.n	800ad0e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d109      	bne.n	800ad0e <tcp_free_acked_segments+0x8e>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d106      	bne.n	800ad0e <tcp_free_acked_segments+0x8e>
 800ad00:	4b17      	ldr	r3, [pc, #92]	; (800ad60 <tcp_free_acked_segments+0xe0>)
 800ad02:	f240 4261 	movw	r2, #1121	; 0x461
 800ad06:	491a      	ldr	r1, [pc, #104]	; (800ad70 <tcp_free_acked_segments+0xf0>)
 800ad08:	4817      	ldr	r0, [pc, #92]	; (800ad68 <tcp_free_acked_segments+0xe8>)
 800ad0a:	f005 fe6f 	bl	80109ec <iprintf>
  while (seg_list != NULL &&
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d020      	beq.n	800ad56 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fb fc03 	bl	8006526 <lwip_htonl>
 800ad20:	4604      	mov	r4, r0
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	891b      	ldrh	r3, [r3, #8]
 800ad26:	461d      	mov	r5, r3
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	899b      	ldrh	r3, [r3, #12]
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fb fbe3 	bl	80064fc <lwip_htons>
 800ad36:	4603      	mov	r3, r0
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	f003 0303 	and.w	r3, r3, #3
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <tcp_free_acked_segments+0xc6>
 800ad42:	2301      	movs	r3, #1
 800ad44:	e000      	b.n	800ad48 <tcp_free_acked_segments+0xc8>
 800ad46:	2300      	movs	r3, #0
 800ad48:	442b      	add	r3, r5
 800ad4a:	18e2      	adds	r2, r4, r3
 800ad4c:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <tcp_free_acked_segments+0xf4>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	dd9c      	ble.n	800ac90 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ad56:	68bb      	ldr	r3, [r7, #8]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3718      	adds	r7, #24
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bdb0      	pop	{r4, r5, r7, pc}
 800ad60:	08013ff8 	.word	0x08013ff8
 800ad64:	080142e0 	.word	0x080142e0
 800ad68:	08014044 	.word	0x08014044
 800ad6c:	20000890 	.word	0x20000890
 800ad70:	08014308 	.word	0x08014308
 800ad74:	2000088c 	.word	0x2000088c

0800ad78 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ad78:	b5b0      	push	{r4, r5, r7, lr}
 800ad7a:	b094      	sub	sp, #80	; 0x50
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d106      	bne.n	800ad98 <tcp_receive+0x20>
 800ad8a:	4b91      	ldr	r3, [pc, #580]	; (800afd0 <tcp_receive+0x258>)
 800ad8c:	f240 427b 	movw	r2, #1147	; 0x47b
 800ad90:	4990      	ldr	r1, [pc, #576]	; (800afd4 <tcp_receive+0x25c>)
 800ad92:	4891      	ldr	r0, [pc, #580]	; (800afd8 <tcp_receive+0x260>)
 800ad94:	f005 fe2a 	bl	80109ec <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	7d1b      	ldrb	r3, [r3, #20]
 800ad9c:	2b03      	cmp	r3, #3
 800ad9e:	d806      	bhi.n	800adae <tcp_receive+0x36>
 800ada0:	4b8b      	ldr	r3, [pc, #556]	; (800afd0 <tcp_receive+0x258>)
 800ada2:	f240 427c 	movw	r2, #1148	; 0x47c
 800ada6:	498d      	ldr	r1, [pc, #564]	; (800afdc <tcp_receive+0x264>)
 800ada8:	488b      	ldr	r0, [pc, #556]	; (800afd8 <tcp_receive+0x260>)
 800adaa:	f005 fe1f 	bl	80109ec <iprintf>

  if (flags & TCP_ACK) {
 800adae:	4b8c      	ldr	r3, [pc, #560]	; (800afe0 <tcp_receive+0x268>)
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	f003 0310 	and.w	r3, r3, #16
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	f000 8264 	beq.w	800b284 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800adc2:	461a      	mov	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc8:	4413      	add	r3, r2
 800adca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800add0:	4b84      	ldr	r3, [pc, #528]	; (800afe4 <tcp_receive+0x26c>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	1ad3      	subs	r3, r2, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	db1b      	blt.n	800ae12 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adde:	4b81      	ldr	r3, [pc, #516]	; (800afe4 <tcp_receive+0x26c>)
 800ade0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d106      	bne.n	800adf4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800adea:	4b7f      	ldr	r3, [pc, #508]	; (800afe8 <tcp_receive+0x270>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	db0e      	blt.n	800ae12 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800adf8:	4b7b      	ldr	r3, [pc, #492]	; (800afe8 <tcp_receive+0x270>)
 800adfa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d125      	bne.n	800ae4c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ae00:	4b7a      	ldr	r3, [pc, #488]	; (800afec <tcp_receive+0x274>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	89db      	ldrh	r3, [r3, #14]
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d91c      	bls.n	800ae4c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ae12:	4b76      	ldr	r3, [pc, #472]	; (800afec <tcp_receive+0x274>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	89db      	ldrh	r3, [r3, #14]
 800ae18:	b29a      	uxth	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d205      	bcs.n	800ae3c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ae3c:	4b69      	ldr	r3, [pc, #420]	; (800afe4 <tcp_receive+0x26c>)
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ae44:	4b68      	ldr	r3, [pc, #416]	; (800afe8 <tcp_receive+0x270>)
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ae4c:	4b66      	ldr	r3, [pc, #408]	; (800afe8 <tcp_receive+0x270>)
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	dc58      	bgt.n	800af0c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ae5a:	4b65      	ldr	r3, [pc, #404]	; (800aff0 <tcp_receive+0x278>)
 800ae5c:	881b      	ldrh	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d14b      	bne.n	800aefa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ae6c:	4413      	add	r3, r2
 800ae6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d142      	bne.n	800aefa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	db3d      	blt.n	800aefa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae82:	4b59      	ldr	r3, [pc, #356]	; (800afe8 <tcp_receive+0x270>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d137      	bne.n	800aefa <tcp_receive+0x182>
              found_dupack = 1;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae94:	2bff      	cmp	r3, #255	; 0xff
 800ae96:	d007      	beq.n	800aea8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae9e:	3301      	adds	r3, #1
 800aea0:	b2da      	uxtb	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aeae:	2b03      	cmp	r3, #3
 800aeb0:	d91b      	bls.n	800aeea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aebc:	4413      	add	r3, r2
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d30a      	bcc.n	800aee0 <tcp_receive+0x168>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aed4:	4413      	add	r3, r2
 800aed6:	b29a      	uxth	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800aede:	e004      	b.n	800aeea <tcp_receive+0x172>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aee6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d902      	bls.n	800aefa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f001 feed 	bl	800ccd4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800aefa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f040 8161 	bne.w	800b1c4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af0a:	e15b      	b.n	800b1c4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800af0c:	4b36      	ldr	r3, [pc, #216]	; (800afe8 <tcp_receive+0x270>)
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	3b01      	subs	r3, #1
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f2c0 814e 	blt.w	800b1ba <tcp_receive+0x442>
 800af1e:	4b32      	ldr	r3, [pc, #200]	; (800afe8 <tcp_receive+0x270>)
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f300 8146 	bgt.w	800b1ba <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	8b5b      	ldrh	r3, [r3, #26]
 800af32:	f003 0304 	and.w	r3, r3, #4
 800af36:	2b00      	cmp	r3, #0
 800af38:	d010      	beq.n	800af5c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	8b5b      	ldrh	r3, [r3, #26]
 800af3e:	f023 0304 	bic.w	r3, r3, #4
 800af42:	b29a      	uxth	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800af6a:	10db      	asrs	r3, r3, #3
 800af6c:	b21b      	sxth	r3, r3
 800af6e:	b29a      	uxth	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800af76:	b29b      	uxth	r3, r3
 800af78:	4413      	add	r3, r2
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	b21a      	sxth	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800af84:	4b18      	ldr	r3, [pc, #96]	; (800afe8 <tcp_receive+0x270>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	b29a      	uxth	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af8e:	b29b      	uxth	r3, r3
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800af9c:	4b12      	ldr	r3, [pc, #72]	; (800afe8 <tcp_receive+0x270>)
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	7d1b      	ldrb	r3, [r3, #20]
 800afa8:	2b03      	cmp	r3, #3
 800afaa:	f240 8097 	bls.w	800b0dc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800afba:	429a      	cmp	r2, r3
 800afbc:	d245      	bcs.n	800b04a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	8b5b      	ldrh	r3, [r3, #26]
 800afc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d014      	beq.n	800aff4 <tcp_receive+0x27c>
 800afca:	2301      	movs	r3, #1
 800afcc:	e013      	b.n	800aff6 <tcp_receive+0x27e>
 800afce:	bf00      	nop
 800afd0:	08013ff8 	.word	0x08013ff8
 800afd4:	08014328 	.word	0x08014328
 800afd8:	08014044 	.word	0x08014044
 800afdc:	08014344 	.word	0x08014344
 800afe0:	20000894 	.word	0x20000894
 800afe4:	20000888 	.word	0x20000888
 800afe8:	2000088c 	.word	0x2000088c
 800afec:	20000878 	.word	0x20000878
 800aff0:	20000892 	.word	0x20000892
 800aff4:	2302      	movs	r3, #2
 800aff6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800affa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800affe:	b29a      	uxth	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b004:	fb12 f303 	smulbb	r3, r2, r3
 800b008:	b29b      	uxth	r3, r3
 800b00a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b00c:	4293      	cmp	r3, r2
 800b00e:	bf28      	it	cs
 800b010:	4613      	movcs	r3, r2
 800b012:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b01a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b01c:	4413      	add	r3, r2
 800b01e:	b29a      	uxth	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b026:	429a      	cmp	r2, r3
 800b028:	d309      	bcc.n	800b03e <tcp_receive+0x2c6>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b030:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b032:	4413      	add	r3, r2
 800b034:	b29a      	uxth	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b03c:	e04e      	b.n	800b0dc <tcp_receive+0x364>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b044:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b048:	e048      	b.n	800b0dc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b050:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b052:	4413      	add	r3, r2
 800b054:	b29a      	uxth	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d309      	bcc.n	800b074 <tcp_receive+0x2fc>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b066:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b068:	4413      	add	r3, r2
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b072:	e004      	b.n	800b07e <tcp_receive+0x306>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b07a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d326      	bcc.n	800b0dc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b09a:	1ad3      	subs	r3, r2, r3
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b0ae:	4413      	add	r3, r2
 800b0b0:	b29a      	uxth	r2, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d30a      	bcc.n	800b0d2 <tcp_receive+0x35a>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b0c6:	4413      	add	r3, r2
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b0d0:	e004      	b.n	800b0dc <tcp_receive+0x364>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0e4:	4a98      	ldr	r2, [pc, #608]	; (800b348 <tcp_receive+0x5d0>)
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7ff fdca 	bl	800ac80 <tcp_free_acked_segments>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0fa:	4a94      	ldr	r2, [pc, #592]	; (800b34c <tcp_receive+0x5d4>)
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f7ff fdbf 	bl	800ac80 <tcp_free_acked_segments>
 800b102:	4602      	mov	r2, r0
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d104      	bne.n	800b11a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b116:	861a      	strh	r2, [r3, #48]	; 0x30
 800b118:	e002      	b.n	800b120 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d103      	bne.n	800b136 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b13c:	4b84      	ldr	r3, [pc, #528]	; (800b350 <tcp_receive+0x5d8>)
 800b13e:	881b      	ldrh	r3, [r3, #0]
 800b140:	4413      	add	r3, r2
 800b142:	b29a      	uxth	r2, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	8b5b      	ldrh	r3, [r3, #26]
 800b14e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b152:	2b00      	cmp	r3, #0
 800b154:	d035      	beq.n	800b1c2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d118      	bne.n	800b190 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00c      	beq.n	800b180 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	4618      	mov	r0, r3
 800b174:	f7fb f9d7 	bl	8006526 <lwip_htonl>
 800b178:	4603      	mov	r3, r0
 800b17a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	dc20      	bgt.n	800b1c2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	8b5b      	ldrh	r3, [r3, #26]
 800b184:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b188:	b29a      	uxth	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b18e:	e018      	b.n	800b1c2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7fb f9c2 	bl	8006526 <lwip_htonl>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	1ae3      	subs	r3, r4, r3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	dc0b      	bgt.n	800b1c2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	8b5b      	ldrh	r3, [r3, #26]
 800b1ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b1b8:	e003      	b.n	800b1c2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f001 ff76 	bl	800d0ac <tcp_send_empty_ack>
 800b1c0:	e000      	b.n	800b1c4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b1c2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d05b      	beq.n	800b284 <tcp_receive+0x50c>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1d0:	4b60      	ldr	r3, [pc, #384]	; (800b354 <tcp_receive+0x5dc>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	1ad3      	subs	r3, r2, r3
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	da54      	bge.n	800b284 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b1da:	4b5f      	ldr	r3, [pc, #380]	; (800b358 <tcp_receive+0x5e0>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	b29a      	uxth	r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b1ee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b1f8:	10db      	asrs	r3, r3, #3
 800b1fa:	b21b      	sxth	r3, r3
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	b29b      	uxth	r3, r3
 800b202:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b212:	4413      	add	r3, r2
 800b214:	b29b      	uxth	r3, r3
 800b216:	b21a      	sxth	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b21c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b220:	2b00      	cmp	r3, #0
 800b222:	da05      	bge.n	800b230 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b224:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b228:	425b      	negs	r3, r3
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b230:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b23a:	109b      	asrs	r3, r3, #2
 800b23c:	b21b      	sxth	r3, r3
 800b23e:	b29b      	uxth	r3, r3
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	b29b      	uxth	r3, r3
 800b244:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b24e:	b29a      	uxth	r2, r3
 800b250:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b254:	4413      	add	r3, r2
 800b256:	b29b      	uxth	r3, r3
 800b258:	b21a      	sxth	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b264:	10db      	asrs	r3, r3, #3
 800b266:	b21b      	sxth	r3, r3
 800b268:	b29a      	uxth	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b270:	b29b      	uxth	r3, r3
 800b272:	4413      	add	r3, r2
 800b274:	b29b      	uxth	r3, r3
 800b276:	b21a      	sxth	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b284:	4b35      	ldr	r3, [pc, #212]	; (800b35c <tcp_receive+0x5e4>)
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f000 84e2 	beq.w	800bc52 <tcp_receive+0xeda>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	7d1b      	ldrb	r3, [r3, #20]
 800b292:	2b06      	cmp	r3, #6
 800b294:	f200 84dd 	bhi.w	800bc52 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b29c:	4b30      	ldr	r3, [pc, #192]	; (800b360 <tcp_receive+0x5e8>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f2c0 808f 	blt.w	800b3c8 <tcp_receive+0x650>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2ae:	4b2b      	ldr	r3, [pc, #172]	; (800b35c <tcp_receive+0x5e4>)
 800b2b0:	881b      	ldrh	r3, [r3, #0]
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	4b2a      	ldr	r3, [pc, #168]	; (800b360 <tcp_receive+0x5e8>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	440b      	add	r3, r1
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	3301      	adds	r3, #1
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f300 8082 	bgt.w	800b3c8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b2c4:	4b27      	ldr	r3, [pc, #156]	; (800b364 <tcp_receive+0x5ec>)
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2ce:	4b24      	ldr	r3, [pc, #144]	; (800b360 <tcp_receive+0x5e8>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	1ad3      	subs	r3, r2, r3
 800b2d4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b2d6:	4b23      	ldr	r3, [pc, #140]	; (800b364 <tcp_receive+0x5ec>)
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d106      	bne.n	800b2ec <tcp_receive+0x574>
 800b2de:	4b22      	ldr	r3, [pc, #136]	; (800b368 <tcp_receive+0x5f0>)
 800b2e0:	f240 5294 	movw	r2, #1428	; 0x594
 800b2e4:	4921      	ldr	r1, [pc, #132]	; (800b36c <tcp_receive+0x5f4>)
 800b2e6:	4822      	ldr	r0, [pc, #136]	; (800b370 <tcp_receive+0x5f8>)
 800b2e8:	f005 fb80 	bl	80109ec <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d906      	bls.n	800b304 <tcp_receive+0x58c>
 800b2f6:	4b1c      	ldr	r3, [pc, #112]	; (800b368 <tcp_receive+0x5f0>)
 800b2f8:	f240 5295 	movw	r2, #1429	; 0x595
 800b2fc:	491d      	ldr	r1, [pc, #116]	; (800b374 <tcp_receive+0x5fc>)
 800b2fe:	481c      	ldr	r0, [pc, #112]	; (800b370 <tcp_receive+0x5f8>)
 800b300:	f005 fb74 	bl	80109ec <iprintf>
      off = (u16_t)off32;
 800b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b306:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b30a:	4b16      	ldr	r3, [pc, #88]	; (800b364 <tcp_receive+0x5ec>)
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	891b      	ldrh	r3, [r3, #8]
 800b310:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b314:	429a      	cmp	r2, r3
 800b316:	d906      	bls.n	800b326 <tcp_receive+0x5ae>
 800b318:	4b13      	ldr	r3, [pc, #76]	; (800b368 <tcp_receive+0x5f0>)
 800b31a:	f240 5297 	movw	r2, #1431	; 0x597
 800b31e:	4916      	ldr	r1, [pc, #88]	; (800b378 <tcp_receive+0x600>)
 800b320:	4813      	ldr	r0, [pc, #76]	; (800b370 <tcp_receive+0x5f8>)
 800b322:	f005 fb63 	bl	80109ec <iprintf>
      inseg.len -= off;
 800b326:	4b0f      	ldr	r3, [pc, #60]	; (800b364 <tcp_receive+0x5ec>)
 800b328:	891a      	ldrh	r2, [r3, #8]
 800b32a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	b29a      	uxth	r2, r3
 800b332:	4b0c      	ldr	r3, [pc, #48]	; (800b364 <tcp_receive+0x5ec>)
 800b334:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b336:	4b0b      	ldr	r3, [pc, #44]	; (800b364 <tcp_receive+0x5ec>)
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	891a      	ldrh	r2, [r3, #8]
 800b33c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b344:	e02a      	b.n	800b39c <tcp_receive+0x624>
 800b346:	bf00      	nop
 800b348:	08014360 	.word	0x08014360
 800b34c:	08014368 	.word	0x08014368
 800b350:	20000890 	.word	0x20000890
 800b354:	2000088c 	.word	0x2000088c
 800b358:	2000ade4 	.word	0x2000ade4
 800b35c:	20000892 	.word	0x20000892
 800b360:	20000888 	.word	0x20000888
 800b364:	20000868 	.word	0x20000868
 800b368:	08013ff8 	.word	0x08013ff8
 800b36c:	08014370 	.word	0x08014370
 800b370:	08014044 	.word	0x08014044
 800b374:	08014380 	.word	0x08014380
 800b378:	08014390 	.word	0x08014390
        off -= p->len;
 800b37c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b37e:	895b      	ldrh	r3, [r3, #10]
 800b380:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b384:	1ad3      	subs	r3, r2, r3
 800b386:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b38a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b38c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b38e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b392:	2200      	movs	r2, #0
 800b394:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b39c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b39e:	895b      	ldrh	r3, [r3, #10]
 800b3a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d8e9      	bhi.n	800b37c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b3a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b3b0:	f7fc fb7c 	bl	8007aac <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b8:	4a91      	ldr	r2, [pc, #580]	; (800b600 <tcp_receive+0x888>)
 800b3ba:	6013      	str	r3, [r2, #0]
 800b3bc:	4b91      	ldr	r3, [pc, #580]	; (800b604 <tcp_receive+0x88c>)
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	4a8f      	ldr	r2, [pc, #572]	; (800b600 <tcp_receive+0x888>)
 800b3c2:	6812      	ldr	r2, [r2, #0]
 800b3c4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b3c6:	e00d      	b.n	800b3e4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b3c8:	4b8d      	ldr	r3, [pc, #564]	; (800b600 <tcp_receive+0x888>)
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	da06      	bge.n	800b3e4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	8b5b      	ldrh	r3, [r3, #26]
 800b3da:	f043 0302 	orr.w	r3, r3, #2
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b3e4:	4b86      	ldr	r3, [pc, #536]	; (800b600 <tcp_receive+0x888>)
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f2c0 842a 	blt.w	800bc48 <tcp_receive+0xed0>
 800b3f4:	4b82      	ldr	r3, [pc, #520]	; (800b600 <tcp_receive+0x888>)
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fc:	6879      	ldr	r1, [r7, #4]
 800b3fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b400:	440b      	add	r3, r1
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	3301      	adds	r3, #1
 800b406:	2b00      	cmp	r3, #0
 800b408:	f300 841e 	bgt.w	800bc48 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b410:	4b7b      	ldr	r3, [pc, #492]	; (800b600 <tcp_receive+0x888>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	429a      	cmp	r2, r3
 800b416:	f040 829a 	bne.w	800b94e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b41a:	4b7a      	ldr	r3, [pc, #488]	; (800b604 <tcp_receive+0x88c>)
 800b41c:	891c      	ldrh	r4, [r3, #8]
 800b41e:	4b79      	ldr	r3, [pc, #484]	; (800b604 <tcp_receive+0x88c>)
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	899b      	ldrh	r3, [r3, #12]
 800b424:	b29b      	uxth	r3, r3
 800b426:	4618      	mov	r0, r3
 800b428:	f7fb f868 	bl	80064fc <lwip_htons>
 800b42c:	4603      	mov	r3, r0
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	f003 0303 	and.w	r3, r3, #3
 800b434:	2b00      	cmp	r3, #0
 800b436:	d001      	beq.n	800b43c <tcp_receive+0x6c4>
 800b438:	2301      	movs	r3, #1
 800b43a:	e000      	b.n	800b43e <tcp_receive+0x6c6>
 800b43c:	2300      	movs	r3, #0
 800b43e:	4423      	add	r3, r4
 800b440:	b29a      	uxth	r2, r3
 800b442:	4b71      	ldr	r3, [pc, #452]	; (800b608 <tcp_receive+0x890>)
 800b444:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b44a:	4b6f      	ldr	r3, [pc, #444]	; (800b608 <tcp_receive+0x890>)
 800b44c:	881b      	ldrh	r3, [r3, #0]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d275      	bcs.n	800b53e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b452:	4b6c      	ldr	r3, [pc, #432]	; (800b604 <tcp_receive+0x88c>)
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	899b      	ldrh	r3, [r3, #12]
 800b458:	b29b      	uxth	r3, r3
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fb f84e 	bl	80064fc <lwip_htons>
 800b460:	4603      	mov	r3, r0
 800b462:	b2db      	uxtb	r3, r3
 800b464:	f003 0301 	and.w	r3, r3, #1
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d01f      	beq.n	800b4ac <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b46c:	4b65      	ldr	r3, [pc, #404]	; (800b604 <tcp_receive+0x88c>)
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	899b      	ldrh	r3, [r3, #12]
 800b472:	b29b      	uxth	r3, r3
 800b474:	b21b      	sxth	r3, r3
 800b476:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b47a:	b21c      	sxth	r4, r3
 800b47c:	4b61      	ldr	r3, [pc, #388]	; (800b604 <tcp_receive+0x88c>)
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	899b      	ldrh	r3, [r3, #12]
 800b482:	b29b      	uxth	r3, r3
 800b484:	4618      	mov	r0, r3
 800b486:	f7fb f839 	bl	80064fc <lwip_htons>
 800b48a:	4603      	mov	r3, r0
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	b29b      	uxth	r3, r3
 800b490:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b494:	b29b      	uxth	r3, r3
 800b496:	4618      	mov	r0, r3
 800b498:	f7fb f830 	bl	80064fc <lwip_htons>
 800b49c:	4603      	mov	r3, r0
 800b49e:	b21b      	sxth	r3, r3
 800b4a0:	4323      	orrs	r3, r4
 800b4a2:	b21a      	sxth	r2, r3
 800b4a4:	4b57      	ldr	r3, [pc, #348]	; (800b604 <tcp_receive+0x88c>)
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	b292      	uxth	r2, r2
 800b4aa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b4b0:	4b54      	ldr	r3, [pc, #336]	; (800b604 <tcp_receive+0x88c>)
 800b4b2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b4b4:	4b53      	ldr	r3, [pc, #332]	; (800b604 <tcp_receive+0x88c>)
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	899b      	ldrh	r3, [r3, #12]
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7fb f81d 	bl	80064fc <lwip_htons>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	f003 0302 	and.w	r3, r3, #2
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d005      	beq.n	800b4da <tcp_receive+0x762>
            inseg.len -= 1;
 800b4ce:	4b4d      	ldr	r3, [pc, #308]	; (800b604 <tcp_receive+0x88c>)
 800b4d0:	891b      	ldrh	r3, [r3, #8]
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	4b4b      	ldr	r3, [pc, #300]	; (800b604 <tcp_receive+0x88c>)
 800b4d8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b4da:	4b4a      	ldr	r3, [pc, #296]	; (800b604 <tcp_receive+0x88c>)
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	4a49      	ldr	r2, [pc, #292]	; (800b604 <tcp_receive+0x88c>)
 800b4e0:	8912      	ldrh	r2, [r2, #8]
 800b4e2:	4611      	mov	r1, r2
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7fc f9e1 	bl	80078ac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b4ea:	4b46      	ldr	r3, [pc, #280]	; (800b604 <tcp_receive+0x88c>)
 800b4ec:	891c      	ldrh	r4, [r3, #8]
 800b4ee:	4b45      	ldr	r3, [pc, #276]	; (800b604 <tcp_receive+0x88c>)
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	899b      	ldrh	r3, [r3, #12]
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7fb f800 	bl	80064fc <lwip_htons>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	f003 0303 	and.w	r3, r3, #3
 800b504:	2b00      	cmp	r3, #0
 800b506:	d001      	beq.n	800b50c <tcp_receive+0x794>
 800b508:	2301      	movs	r3, #1
 800b50a:	e000      	b.n	800b50e <tcp_receive+0x796>
 800b50c:	2300      	movs	r3, #0
 800b50e:	4423      	add	r3, r4
 800b510:	b29a      	uxth	r2, r3
 800b512:	4b3d      	ldr	r3, [pc, #244]	; (800b608 <tcp_receive+0x890>)
 800b514:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b516:	4b3c      	ldr	r3, [pc, #240]	; (800b608 <tcp_receive+0x890>)
 800b518:	881b      	ldrh	r3, [r3, #0]
 800b51a:	461a      	mov	r2, r3
 800b51c:	4b38      	ldr	r3, [pc, #224]	; (800b600 <tcp_receive+0x888>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	441a      	add	r2, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b526:	6879      	ldr	r1, [r7, #4]
 800b528:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b52a:	440b      	add	r3, r1
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d006      	beq.n	800b53e <tcp_receive+0x7c6>
 800b530:	4b36      	ldr	r3, [pc, #216]	; (800b60c <tcp_receive+0x894>)
 800b532:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b536:	4936      	ldr	r1, [pc, #216]	; (800b610 <tcp_receive+0x898>)
 800b538:	4836      	ldr	r0, [pc, #216]	; (800b614 <tcp_receive+0x89c>)
 800b53a:	f005 fa57 	bl	80109ec <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b542:	2b00      	cmp	r3, #0
 800b544:	f000 80e7 	beq.w	800b716 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b548:	4b2e      	ldr	r3, [pc, #184]	; (800b604 <tcp_receive+0x88c>)
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	899b      	ldrh	r3, [r3, #12]
 800b54e:	b29b      	uxth	r3, r3
 800b550:	4618      	mov	r0, r3
 800b552:	f7fa ffd3 	bl	80064fc <lwip_htons>
 800b556:	4603      	mov	r3, r0
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	f003 0301 	and.w	r3, r3, #1
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d010      	beq.n	800b584 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b562:	e00a      	b.n	800b57a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b568:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f7fd fd92 	bl	800909e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d1f0      	bne.n	800b564 <tcp_receive+0x7ec>
 800b582:	e0c8      	b.n	800b716 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b588:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b58a:	e052      	b.n	800b632 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	899b      	ldrh	r3, [r3, #12]
 800b592:	b29b      	uxth	r3, r3
 800b594:	4618      	mov	r0, r3
 800b596:	f7fa ffb1 	bl	80064fc <lwip_htons>
 800b59a:	4603      	mov	r3, r0
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	f003 0301 	and.w	r3, r3, #1
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d03d      	beq.n	800b622 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b5a6:	4b17      	ldr	r3, [pc, #92]	; (800b604 <tcp_receive+0x88c>)
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	899b      	ldrh	r3, [r3, #12]
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fa ffa4 	bl	80064fc <lwip_htons>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d130      	bne.n	800b622 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b5c0:	4b10      	ldr	r3, [pc, #64]	; (800b604 <tcp_receive+0x88c>)
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	899b      	ldrh	r3, [r3, #12]
 800b5c6:	b29c      	uxth	r4, r3
 800b5c8:	2001      	movs	r0, #1
 800b5ca:	f7fa ff97 	bl	80064fc <lwip_htons>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	4b0c      	ldr	r3, [pc, #48]	; (800b604 <tcp_receive+0x88c>)
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	4322      	orrs	r2, r4
 800b5d8:	b292      	uxth	r2, r2
 800b5da:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b5dc:	4b09      	ldr	r3, [pc, #36]	; (800b604 <tcp_receive+0x88c>)
 800b5de:	891c      	ldrh	r4, [r3, #8]
 800b5e0:	4b08      	ldr	r3, [pc, #32]	; (800b604 <tcp_receive+0x88c>)
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	899b      	ldrh	r3, [r3, #12]
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7fa ff87 	bl	80064fc <lwip_htons>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	f003 0303 	and.w	r3, r3, #3
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00e      	beq.n	800b618 <tcp_receive+0x8a0>
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e00d      	b.n	800b61a <tcp_receive+0x8a2>
 800b5fe:	bf00      	nop
 800b600:	20000888 	.word	0x20000888
 800b604:	20000868 	.word	0x20000868
 800b608:	20000892 	.word	0x20000892
 800b60c:	08013ff8 	.word	0x08013ff8
 800b610:	080143a0 	.word	0x080143a0
 800b614:	08014044 	.word	0x08014044
 800b618:	2300      	movs	r3, #0
 800b61a:	4423      	add	r3, r4
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	4b98      	ldr	r3, [pc, #608]	; (800b880 <tcp_receive+0xb08>)
 800b620:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b624:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b62c:	6938      	ldr	r0, [r7, #16]
 800b62e:	f7fd fd36 	bl	800909e <tcp_seg_free>
            while (next &&
 800b632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00e      	beq.n	800b656 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b638:	4b91      	ldr	r3, [pc, #580]	; (800b880 <tcp_receive+0xb08>)
 800b63a:	881b      	ldrh	r3, [r3, #0]
 800b63c:	461a      	mov	r2, r3
 800b63e:	4b91      	ldr	r3, [pc, #580]	; (800b884 <tcp_receive+0xb0c>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	441a      	add	r2, r3
 800b644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b64c:	8909      	ldrh	r1, [r1, #8]
 800b64e:	440b      	add	r3, r1
 800b650:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b652:	2b00      	cmp	r3, #0
 800b654:	da9a      	bge.n	800b58c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d059      	beq.n	800b710 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800b65c:	4b88      	ldr	r3, [pc, #544]	; (800b880 <tcp_receive+0xb08>)
 800b65e:	881b      	ldrh	r3, [r3, #0]
 800b660:	461a      	mov	r2, r3
 800b662:	4b88      	ldr	r3, [pc, #544]	; (800b884 <tcp_receive+0xb0c>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	441a      	add	r2, r3
 800b668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b670:	2b00      	cmp	r3, #0
 800b672:	dd4d      	ble.n	800b710 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	b29a      	uxth	r2, r3
 800b67c:	4b81      	ldr	r3, [pc, #516]	; (800b884 <tcp_receive+0xb0c>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	b29b      	uxth	r3, r3
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	b29a      	uxth	r2, r3
 800b686:	4b80      	ldr	r3, [pc, #512]	; (800b888 <tcp_receive+0xb10>)
 800b688:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b68a:	4b7f      	ldr	r3, [pc, #508]	; (800b888 <tcp_receive+0xb10>)
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	899b      	ldrh	r3, [r3, #12]
 800b690:	b29b      	uxth	r3, r3
 800b692:	4618      	mov	r0, r3
 800b694:	f7fa ff32 	bl	80064fc <lwip_htons>
 800b698:	4603      	mov	r3, r0
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	f003 0302 	and.w	r3, r3, #2
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d005      	beq.n	800b6b0 <tcp_receive+0x938>
                inseg.len -= 1;
 800b6a4:	4b78      	ldr	r3, [pc, #480]	; (800b888 <tcp_receive+0xb10>)
 800b6a6:	891b      	ldrh	r3, [r3, #8]
 800b6a8:	3b01      	subs	r3, #1
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	4b76      	ldr	r3, [pc, #472]	; (800b888 <tcp_receive+0xb10>)
 800b6ae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b6b0:	4b75      	ldr	r3, [pc, #468]	; (800b888 <tcp_receive+0xb10>)
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	4a74      	ldr	r2, [pc, #464]	; (800b888 <tcp_receive+0xb10>)
 800b6b6:	8912      	ldrh	r2, [r2, #8]
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fc f8f6 	bl	80078ac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b6c0:	4b71      	ldr	r3, [pc, #452]	; (800b888 <tcp_receive+0xb10>)
 800b6c2:	891c      	ldrh	r4, [r3, #8]
 800b6c4:	4b70      	ldr	r3, [pc, #448]	; (800b888 <tcp_receive+0xb10>)
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	899b      	ldrh	r3, [r3, #12]
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fa ff15 	bl	80064fc <lwip_htons>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	f003 0303 	and.w	r3, r3, #3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d001      	beq.n	800b6e2 <tcp_receive+0x96a>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e000      	b.n	800b6e4 <tcp_receive+0x96c>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	4423      	add	r3, r4
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	4b65      	ldr	r3, [pc, #404]	; (800b880 <tcp_receive+0xb08>)
 800b6ea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b6ec:	4b64      	ldr	r3, [pc, #400]	; (800b880 <tcp_receive+0xb08>)
 800b6ee:	881b      	ldrh	r3, [r3, #0]
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	4b64      	ldr	r3, [pc, #400]	; (800b884 <tcp_receive+0xb0c>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	441a      	add	r2, r3
 800b6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d006      	beq.n	800b710 <tcp_receive+0x998>
 800b702:	4b62      	ldr	r3, [pc, #392]	; (800b88c <tcp_receive+0xb14>)
 800b704:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b708:	4961      	ldr	r1, [pc, #388]	; (800b890 <tcp_receive+0xb18>)
 800b70a:	4862      	ldr	r0, [pc, #392]	; (800b894 <tcp_receive+0xb1c>)
 800b70c:	f005 f96e 	bl	80109ec <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b714:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b716:	4b5a      	ldr	r3, [pc, #360]	; (800b880 <tcp_receive+0xb08>)
 800b718:	881b      	ldrh	r3, [r3, #0]
 800b71a:	461a      	mov	r2, r3
 800b71c:	4b59      	ldr	r3, [pc, #356]	; (800b884 <tcp_receive+0xb0c>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	441a      	add	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b72a:	4b55      	ldr	r3, [pc, #340]	; (800b880 <tcp_receive+0xb08>)
 800b72c:	881b      	ldrh	r3, [r3, #0]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d206      	bcs.n	800b740 <tcp_receive+0x9c8>
 800b732:	4b56      	ldr	r3, [pc, #344]	; (800b88c <tcp_receive+0xb14>)
 800b734:	f240 6207 	movw	r2, #1543	; 0x607
 800b738:	4957      	ldr	r1, [pc, #348]	; (800b898 <tcp_receive+0xb20>)
 800b73a:	4856      	ldr	r0, [pc, #344]	; (800b894 <tcp_receive+0xb1c>)
 800b73c:	f005 f956 	bl	80109ec <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b744:	4b4e      	ldr	r3, [pc, #312]	; (800b880 <tcp_receive+0xb08>)
 800b746:	881b      	ldrh	r3, [r3, #0]
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7fc ffc5 	bl	80086e0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b756:	4b4c      	ldr	r3, [pc, #304]	; (800b888 <tcp_receive+0xb10>)
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	891b      	ldrh	r3, [r3, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d006      	beq.n	800b76e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800b760:	4b49      	ldr	r3, [pc, #292]	; (800b888 <tcp_receive+0xb10>)
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	4a4d      	ldr	r2, [pc, #308]	; (800b89c <tcp_receive+0xb24>)
 800b766:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b768:	4b47      	ldr	r3, [pc, #284]	; (800b888 <tcp_receive+0xb10>)
 800b76a:	2200      	movs	r2, #0
 800b76c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b76e:	4b46      	ldr	r3, [pc, #280]	; (800b888 <tcp_receive+0xb10>)
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	899b      	ldrh	r3, [r3, #12]
 800b774:	b29b      	uxth	r3, r3
 800b776:	4618      	mov	r0, r3
 800b778:	f7fa fec0 	bl	80064fc <lwip_htons>
 800b77c:	4603      	mov	r3, r0
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	f003 0301 	and.w	r3, r3, #1
 800b784:	2b00      	cmp	r3, #0
 800b786:	f000 80b8 	beq.w	800b8fa <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b78a:	4b45      	ldr	r3, [pc, #276]	; (800b8a0 <tcp_receive+0xb28>)
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	f043 0320 	orr.w	r3, r3, #32
 800b792:	b2da      	uxtb	r2, r3
 800b794:	4b42      	ldr	r3, [pc, #264]	; (800b8a0 <tcp_receive+0xb28>)
 800b796:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b798:	e0af      	b.n	800b8fa <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b79e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	4a36      	ldr	r2, [pc, #216]	; (800b884 <tcp_receive+0xb0c>)
 800b7aa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	891b      	ldrh	r3, [r3, #8]
 800b7b0:	461c      	mov	r4, r3
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	899b      	ldrh	r3, [r3, #12]
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fa fe9e 	bl	80064fc <lwip_htons>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	f003 0303 	and.w	r3, r3, #3
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d001      	beq.n	800b7d0 <tcp_receive+0xa58>
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e000      	b.n	800b7d2 <tcp_receive+0xa5a>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	191a      	adds	r2, r3, r4
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d8:	441a      	add	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7e2:	461c      	mov	r4, r3
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	891b      	ldrh	r3, [r3, #8]
 800b7e8:	461d      	mov	r5, r3
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	899b      	ldrh	r3, [r3, #12]
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fa fe82 	bl	80064fc <lwip_htons>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	f003 0303 	and.w	r3, r3, #3
 800b800:	2b00      	cmp	r3, #0
 800b802:	d001      	beq.n	800b808 <tcp_receive+0xa90>
 800b804:	2301      	movs	r3, #1
 800b806:	e000      	b.n	800b80a <tcp_receive+0xa92>
 800b808:	2300      	movs	r3, #0
 800b80a:	442b      	add	r3, r5
 800b80c:	429c      	cmp	r4, r3
 800b80e:	d206      	bcs.n	800b81e <tcp_receive+0xaa6>
 800b810:	4b1e      	ldr	r3, [pc, #120]	; (800b88c <tcp_receive+0xb14>)
 800b812:	f240 622b 	movw	r2, #1579	; 0x62b
 800b816:	4923      	ldr	r1, [pc, #140]	; (800b8a4 <tcp_receive+0xb2c>)
 800b818:	481e      	ldr	r0, [pc, #120]	; (800b894 <tcp_receive+0xb1c>)
 800b81a:	f005 f8e7 	bl	80109ec <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	891b      	ldrh	r3, [r3, #8]
 800b822:	461c      	mov	r4, r3
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	899b      	ldrh	r3, [r3, #12]
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7fa fe65 	bl	80064fc <lwip_htons>
 800b832:	4603      	mov	r3, r0
 800b834:	b2db      	uxtb	r3, r3
 800b836:	f003 0303 	and.w	r3, r3, #3
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d001      	beq.n	800b842 <tcp_receive+0xaca>
 800b83e:	2301      	movs	r3, #1
 800b840:	e000      	b.n	800b844 <tcp_receive+0xacc>
 800b842:	2300      	movs	r3, #0
 800b844:	1919      	adds	r1, r3, r4
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b84a:	b28b      	uxth	r3, r1
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	b29a      	uxth	r2, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f7fc ff43 	bl	80086e0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	891b      	ldrh	r3, [r3, #8]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d028      	beq.n	800b8b6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b864:	4b0d      	ldr	r3, [pc, #52]	; (800b89c <tcp_receive+0xb24>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d01d      	beq.n	800b8a8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800b86c:	4b0b      	ldr	r3, [pc, #44]	; (800b89c <tcp_receive+0xb24>)
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	4619      	mov	r1, r3
 800b876:	4610      	mov	r0, r2
 800b878:	f7fc fa60 	bl	8007d3c <pbuf_cat>
 800b87c:	e018      	b.n	800b8b0 <tcp_receive+0xb38>
 800b87e:	bf00      	nop
 800b880:	20000892 	.word	0x20000892
 800b884:	20000888 	.word	0x20000888
 800b888:	20000868 	.word	0x20000868
 800b88c:	08013ff8 	.word	0x08013ff8
 800b890:	080143d8 	.word	0x080143d8
 800b894:	08014044 	.word	0x08014044
 800b898:	08014414 	.word	0x08014414
 800b89c:	20000898 	.word	0x20000898
 800b8a0:	20000895 	.word	0x20000895
 800b8a4:	08014434 	.word	0x08014434
            } else {
              recv_data = cseg->p;
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	4a70      	ldr	r2, [pc, #448]	; (800ba70 <tcp_receive+0xcf8>)
 800b8ae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	899b      	ldrh	r3, [r3, #12]
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7fa fe1c 	bl	80064fc <lwip_htons>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	f003 0301 	and.w	r3, r3, #1
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00d      	beq.n	800b8ec <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b8d0:	4b68      	ldr	r3, [pc, #416]	; (800ba74 <tcp_receive+0xcfc>)
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	f043 0320 	orr.w	r3, r3, #32
 800b8d8:	b2da      	uxtb	r2, r3
 800b8da:	4b66      	ldr	r3, [pc, #408]	; (800ba74 <tcp_receive+0xcfc>)
 800b8dc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	7d1b      	ldrb	r3, [r3, #20]
 800b8e2:	2b04      	cmp	r3, #4
 800b8e4:	d102      	bne.n	800b8ec <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2207      	movs	r2, #7
 800b8ea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800b8f4:	68b8      	ldr	r0, [r7, #8]
 800b8f6:	f7fd fbd2 	bl	800909e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d008      	beq.n	800b914 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	685a      	ldr	r2, [r3, #4]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b90e:	429a      	cmp	r2, r3
 800b910:	f43f af43 	beq.w	800b79a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	8b5b      	ldrh	r3, [r3, #26]
 800b918:	f003 0301 	and.w	r3, r3, #1
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00e      	beq.n	800b93e <tcp_receive+0xbc6>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	8b5b      	ldrh	r3, [r3, #26]
 800b924:	f023 0301 	bic.w	r3, r3, #1
 800b928:	b29a      	uxth	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	835a      	strh	r2, [r3, #26]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	8b5b      	ldrh	r3, [r3, #26]
 800b932:	f043 0302 	orr.w	r3, r3, #2
 800b936:	b29a      	uxth	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b93c:	e188      	b.n	800bc50 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	8b5b      	ldrh	r3, [r3, #26]
 800b942:	f043 0301 	orr.w	r3, r3, #1
 800b946:	b29a      	uxth	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b94c:	e180      	b.n	800bc50 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b952:	2b00      	cmp	r3, #0
 800b954:	d106      	bne.n	800b964 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b956:	4848      	ldr	r0, [pc, #288]	; (800ba78 <tcp_receive+0xd00>)
 800b958:	f7fd fbba 	bl	80090d0 <tcp_seg_copy>
 800b95c:	4602      	mov	r2, r0
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	675a      	str	r2, [r3, #116]	; 0x74
 800b962:	e16d      	b.n	800bc40 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b964:	2300      	movs	r3, #0
 800b966:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b96c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b96e:	e157      	b.n	800bc20 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800b970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	685a      	ldr	r2, [r3, #4]
 800b976:	4b41      	ldr	r3, [pc, #260]	; (800ba7c <tcp_receive+0xd04>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d11d      	bne.n	800b9ba <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b97e:	4b3e      	ldr	r3, [pc, #248]	; (800ba78 <tcp_receive+0xd00>)
 800b980:	891a      	ldrh	r2, [r3, #8]
 800b982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b984:	891b      	ldrh	r3, [r3, #8]
 800b986:	429a      	cmp	r2, r3
 800b988:	f240 814f 	bls.w	800bc2a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b98c:	483a      	ldr	r0, [pc, #232]	; (800ba78 <tcp_receive+0xd00>)
 800b98e:	f7fd fb9f 	bl	80090d0 <tcp_seg_copy>
 800b992:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	2b00      	cmp	r3, #0
 800b998:	f000 8149 	beq.w	800bc2e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800b99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d003      	beq.n	800b9aa <tcp_receive+0xc32>
                    prev->next = cseg;
 800b9a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a4:	697a      	ldr	r2, [r7, #20]
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	e002      	b.n	800b9b0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	697a      	ldr	r2, [r7, #20]
 800b9ae:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b9b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b9b2:	6978      	ldr	r0, [r7, #20]
 800b9b4:	f7ff f8dc 	bl	800ab70 <tcp_oos_insert_segment>
                }
                break;
 800b9b8:	e139      	b.n	800bc2e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d117      	bne.n	800b9f0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b9c0:	4b2e      	ldr	r3, [pc, #184]	; (800ba7c <tcp_receive+0xd04>)
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	1ad3      	subs	r3, r2, r3
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	da57      	bge.n	800ba80 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b9d0:	4829      	ldr	r0, [pc, #164]	; (800ba78 <tcp_receive+0xd00>)
 800b9d2:	f7fd fb7d 	bl	80090d0 <tcp_seg_copy>
 800b9d6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f000 8129 	beq.w	800bc32 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	69ba      	ldr	r2, [r7, #24]
 800b9e4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b9e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b9e8:	69b8      	ldr	r0, [r7, #24]
 800b9ea:	f7ff f8c1 	bl	800ab70 <tcp_oos_insert_segment>
                  }
                  break;
 800b9ee:	e120      	b.n	800bc32 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b9f0:	4b22      	ldr	r3, [pc, #136]	; (800ba7c <tcp_receive+0xd04>)
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	1ad3      	subs	r3, r2, r3
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	db3e      	blt.n	800ba80 <tcp_receive+0xd08>
 800ba02:	4b1e      	ldr	r3, [pc, #120]	; (800ba7c <tcp_receive+0xd04>)
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	1ad3      	subs	r3, r2, r3
 800ba0e:	3301      	adds	r3, #1
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	dc35      	bgt.n	800ba80 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ba14:	4818      	ldr	r0, [pc, #96]	; (800ba78 <tcp_receive+0xd00>)
 800ba16:	f7fd fb5b 	bl	80090d0 <tcp_seg_copy>
 800ba1a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f000 8109 	beq.w	800bc36 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ba24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba2c:	8912      	ldrh	r2, [r2, #8]
 800ba2e:	441a      	add	r2, r3
 800ba30:	4b12      	ldr	r3, [pc, #72]	; (800ba7c <tcp_receive+0xd04>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	dd12      	ble.n	800ba60 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ba3a:	4b10      	ldr	r3, [pc, #64]	; (800ba7c <tcp_receive+0xd04>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	1ad3      	subs	r3, r2, r3
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba4e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ba50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba52:	685a      	ldr	r2, [r3, #4]
 800ba54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba56:	891b      	ldrh	r3, [r3, #8]
 800ba58:	4619      	mov	r1, r3
 800ba5a:	4610      	mov	r0, r2
 800ba5c:	f7fb ff26 	bl	80078ac <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ba60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba62:	69fa      	ldr	r2, [r7, #28]
 800ba64:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ba66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ba68:	69f8      	ldr	r0, [r7, #28]
 800ba6a:	f7ff f881 	bl	800ab70 <tcp_oos_insert_segment>
                  }
                  break;
 800ba6e:	e0e2      	b.n	800bc36 <tcp_receive+0xebe>
 800ba70:	20000898 	.word	0x20000898
 800ba74:	20000895 	.word	0x20000895
 800ba78:	20000868 	.word	0x20000868
 800ba7c:	20000888 	.word	0x20000888
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ba80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba82:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ba84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f040 80c6 	bne.w	800bc1a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ba8e:	4b80      	ldr	r3, [pc, #512]	; (800bc90 <tcp_receive+0xf18>)
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f340 80bd 	ble.w	800bc1a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800baa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	899b      	ldrh	r3, [r3, #12]
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fa fd27 	bl	80064fc <lwip_htons>
 800baae:	4603      	mov	r3, r0
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	f003 0301 	and.w	r3, r3, #1
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f040 80bf 	bne.w	800bc3a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800babc:	4875      	ldr	r0, [pc, #468]	; (800bc94 <tcp_receive+0xf1c>)
 800babe:	f7fd fb07 	bl	80090d0 <tcp_seg_copy>
 800bac2:	4602      	mov	r2, r0
 800bac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	f000 80b6 	beq.w	800bc3e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bada:	8912      	ldrh	r2, [r2, #8]
 800badc:	441a      	add	r2, r3
 800bade:	4b6c      	ldr	r3, [pc, #432]	; (800bc90 <tcp_receive+0xf18>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	dd12      	ble.n	800bb0e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bae8:	4b69      	ldr	r3, [pc, #420]	; (800bc90 <tcp_receive+0xf18>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	b29a      	uxth	r2, r3
 800baee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb00:	685a      	ldr	r2, [r3, #4]
 800bb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb04:	891b      	ldrh	r3, [r3, #8]
 800bb06:	4619      	mov	r1, r3
 800bb08:	4610      	mov	r0, r2
 800bb0a:	f7fb fecf 	bl	80078ac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bb0e:	4b62      	ldr	r3, [pc, #392]	; (800bc98 <tcp_receive+0xf20>)
 800bb10:	881b      	ldrh	r3, [r3, #0]
 800bb12:	461a      	mov	r2, r3
 800bb14:	4b5e      	ldr	r3, [pc, #376]	; (800bc90 <tcp_receive+0xf18>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	441a      	add	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1e:	6879      	ldr	r1, [r7, #4]
 800bb20:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bb22:	440b      	add	r3, r1
 800bb24:	1ad3      	subs	r3, r2, r3
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f340 8089 	ble.w	800bc3e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	899b      	ldrh	r3, [r3, #12]
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fa fce0 	bl	80064fc <lwip_htons>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	f003 0301 	and.w	r3, r3, #1
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d022      	beq.n	800bb8e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	899b      	ldrh	r3, [r3, #12]
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	b21b      	sxth	r3, r3
 800bb54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bb58:	b21c      	sxth	r4, r3
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	899b      	ldrh	r3, [r3, #12]
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fa fcc9 	bl	80064fc <lwip_htons>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fa fcc0 	bl	80064fc <lwip_htons>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	b21b      	sxth	r3, r3
 800bb80:	4323      	orrs	r3, r4
 800bb82:	b21a      	sxth	r2, r3
 800bb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	b292      	uxth	r2, r2
 800bb8c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb92:	b29a      	uxth	r2, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb98:	4413      	add	r3, r2
 800bb9a:	b299      	uxth	r1, r3
 800bb9c:	4b3c      	ldr	r3, [pc, #240]	; (800bc90 <tcp_receive+0xf18>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	1a8a      	subs	r2, r1, r2
 800bba8:	b292      	uxth	r2, r2
 800bbaa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	685a      	ldr	r2, [r3, #4]
 800bbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	891b      	ldrh	r3, [r3, #8]
 800bbb8:	4619      	mov	r1, r3
 800bbba:	4610      	mov	r0, r2
 800bbbc:	f7fb fe76 	bl	80078ac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	891c      	ldrh	r4, [r3, #8]
 800bbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	899b      	ldrh	r3, [r3, #12]
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7fa fc93 	bl	80064fc <lwip_htons>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	f003 0303 	and.w	r3, r3, #3
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d001      	beq.n	800bbe6 <tcp_receive+0xe6e>
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e000      	b.n	800bbe8 <tcp_receive+0xe70>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	4423      	add	r3, r4
 800bbea:	b29a      	uxth	r2, r3
 800bbec:	4b2a      	ldr	r3, [pc, #168]	; (800bc98 <tcp_receive+0xf20>)
 800bbee:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bbf0:	4b29      	ldr	r3, [pc, #164]	; (800bc98 <tcp_receive+0xf20>)
 800bbf2:	881b      	ldrh	r3, [r3, #0]
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	4b26      	ldr	r3, [pc, #152]	; (800bc90 <tcp_receive+0xf18>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	441a      	add	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc00:	6879      	ldr	r1, [r7, #4]
 800bc02:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bc04:	440b      	add	r3, r1
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d019      	beq.n	800bc3e <tcp_receive+0xec6>
 800bc0a:	4b24      	ldr	r3, [pc, #144]	; (800bc9c <tcp_receive+0xf24>)
 800bc0c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800bc10:	4923      	ldr	r1, [pc, #140]	; (800bca0 <tcp_receive+0xf28>)
 800bc12:	4824      	ldr	r0, [pc, #144]	; (800bca4 <tcp_receive+0xf2c>)
 800bc14:	f004 feea 	bl	80109ec <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bc18:	e011      	b.n	800bc3e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	f47f aea4 	bne.w	800b970 <tcp_receive+0xbf8>
 800bc28:	e00a      	b.n	800bc40 <tcp_receive+0xec8>
                break;
 800bc2a:	bf00      	nop
 800bc2c:	e008      	b.n	800bc40 <tcp_receive+0xec8>
                break;
 800bc2e:	bf00      	nop
 800bc30:	e006      	b.n	800bc40 <tcp_receive+0xec8>
                  break;
 800bc32:	bf00      	nop
 800bc34:	e004      	b.n	800bc40 <tcp_receive+0xec8>
                  break;
 800bc36:	bf00      	nop
 800bc38:	e002      	b.n	800bc40 <tcp_receive+0xec8>
                  break;
 800bc3a:	bf00      	nop
 800bc3c:	e000      	b.n	800bc40 <tcp_receive+0xec8>
                break;
 800bc3e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f001 fa33 	bl	800d0ac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bc46:	e003      	b.n	800bc50 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f001 fa2f 	bl	800d0ac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bc4e:	e01a      	b.n	800bc86 <tcp_receive+0xf0e>
 800bc50:	e019      	b.n	800bc86 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bc52:	4b0f      	ldr	r3, [pc, #60]	; (800bc90 <tcp_receive+0xf18>)
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	db0a      	blt.n	800bc76 <tcp_receive+0xefe>
 800bc60:	4b0b      	ldr	r3, [pc, #44]	; (800bc90 <tcp_receive+0xf18>)
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc68:	6879      	ldr	r1, [r7, #4]
 800bc6a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bc6c:	440b      	add	r3, r1
 800bc6e:	1ad3      	subs	r3, r2, r3
 800bc70:	3301      	adds	r3, #1
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	dd07      	ble.n	800bc86 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	8b5b      	ldrh	r3, [r3, #26]
 800bc7a:	f043 0302 	orr.w	r3, r3, #2
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800bc84:	e7ff      	b.n	800bc86 <tcp_receive+0xf0e>
 800bc86:	bf00      	nop
 800bc88:	3750      	adds	r7, #80	; 0x50
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bdb0      	pop	{r4, r5, r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	20000888 	.word	0x20000888
 800bc94:	20000868 	.word	0x20000868
 800bc98:	20000892 	.word	0x20000892
 800bc9c:	08013ff8 	.word	0x08013ff8
 800bca0:	080143a0 	.word	0x080143a0
 800bca4:	08014044 	.word	0x08014044

0800bca8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800bcae:	4b15      	ldr	r3, [pc, #84]	; (800bd04 <tcp_get_next_optbyte+0x5c>)
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	1c5a      	adds	r2, r3, #1
 800bcb4:	b291      	uxth	r1, r2
 800bcb6:	4a13      	ldr	r2, [pc, #76]	; (800bd04 <tcp_get_next_optbyte+0x5c>)
 800bcb8:	8011      	strh	r1, [r2, #0]
 800bcba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bcbc:	4b12      	ldr	r3, [pc, #72]	; (800bd08 <tcp_get_next_optbyte+0x60>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d004      	beq.n	800bcce <tcp_get_next_optbyte+0x26>
 800bcc4:	4b11      	ldr	r3, [pc, #68]	; (800bd0c <tcp_get_next_optbyte+0x64>)
 800bcc6:	881b      	ldrh	r3, [r3, #0]
 800bcc8:	88fa      	ldrh	r2, [r7, #6]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d208      	bcs.n	800bce0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bcce:	4b10      	ldr	r3, [pc, #64]	; (800bd10 <tcp_get_next_optbyte+0x68>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	3314      	adds	r3, #20
 800bcd4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800bcd6:	88fb      	ldrh	r3, [r7, #6]
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	4413      	add	r3, r2
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	e00b      	b.n	800bcf8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bce0:	88fb      	ldrh	r3, [r7, #6]
 800bce2:	b2da      	uxtb	r2, r3
 800bce4:	4b09      	ldr	r3, [pc, #36]	; (800bd0c <tcp_get_next_optbyte+0x64>)
 800bce6:	881b      	ldrh	r3, [r3, #0]
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	1ad3      	subs	r3, r2, r3
 800bcec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800bcee:	4b06      	ldr	r3, [pc, #24]	; (800bd08 <tcp_get_next_optbyte+0x60>)
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	797b      	ldrb	r3, [r7, #5]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr
 800bd04:	20000884 	.word	0x20000884
 800bd08:	20000880 	.word	0x20000880
 800bd0c:	2000087e 	.word	0x2000087e
 800bd10:	20000878 	.word	0x20000878

0800bd14 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d106      	bne.n	800bd30 <tcp_parseopt+0x1c>
 800bd22:	4b32      	ldr	r3, [pc, #200]	; (800bdec <tcp_parseopt+0xd8>)
 800bd24:	f240 727d 	movw	r2, #1917	; 0x77d
 800bd28:	4931      	ldr	r1, [pc, #196]	; (800bdf0 <tcp_parseopt+0xdc>)
 800bd2a:	4832      	ldr	r0, [pc, #200]	; (800bdf4 <tcp_parseopt+0xe0>)
 800bd2c:	f004 fe5e 	bl	80109ec <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bd30:	4b31      	ldr	r3, [pc, #196]	; (800bdf8 <tcp_parseopt+0xe4>)
 800bd32:	881b      	ldrh	r3, [r3, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d055      	beq.n	800bde4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bd38:	4b30      	ldr	r3, [pc, #192]	; (800bdfc <tcp_parseopt+0xe8>)
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	801a      	strh	r2, [r3, #0]
 800bd3e:	e045      	b.n	800bdcc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800bd40:	f7ff ffb2 	bl	800bca8 <tcp_get_next_optbyte>
 800bd44:	4603      	mov	r3, r0
 800bd46:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d006      	beq.n	800bd5c <tcp_parseopt+0x48>
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	dc2b      	bgt.n	800bdaa <tcp_parseopt+0x96>
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d041      	beq.n	800bdda <tcp_parseopt+0xc6>
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d127      	bne.n	800bdaa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800bd5a:	e037      	b.n	800bdcc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800bd5c:	f7ff ffa4 	bl	800bca8 <tcp_get_next_optbyte>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b04      	cmp	r3, #4
 800bd64:	d13b      	bne.n	800bdde <tcp_parseopt+0xca>
 800bd66:	4b25      	ldr	r3, [pc, #148]	; (800bdfc <tcp_parseopt+0xe8>)
 800bd68:	881b      	ldrh	r3, [r3, #0]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	4a22      	ldr	r2, [pc, #136]	; (800bdf8 <tcp_parseopt+0xe4>)
 800bd6e:	8812      	ldrh	r2, [r2, #0]
 800bd70:	4293      	cmp	r3, r2
 800bd72:	da34      	bge.n	800bdde <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bd74:	f7ff ff98 	bl	800bca8 <tcp_get_next_optbyte>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	021b      	lsls	r3, r3, #8
 800bd7e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800bd80:	f7ff ff92 	bl	800bca8 <tcp_get_next_optbyte>
 800bd84:	4603      	mov	r3, r0
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	89bb      	ldrh	r3, [r7, #12]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bd8e:	89bb      	ldrh	r3, [r7, #12]
 800bd90:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bd94:	d804      	bhi.n	800bda0 <tcp_parseopt+0x8c>
 800bd96:	89bb      	ldrh	r3, [r7, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d001      	beq.n	800bda0 <tcp_parseopt+0x8c>
 800bd9c:	89ba      	ldrh	r2, [r7, #12]
 800bd9e:	e001      	b.n	800bda4 <tcp_parseopt+0x90>
 800bda0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800bda8:	e010      	b.n	800bdcc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800bdaa:	f7ff ff7d 	bl	800bca8 <tcp_get_next_optbyte>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800bdb2:	7afb      	ldrb	r3, [r7, #11]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d914      	bls.n	800bde2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800bdb8:	7afb      	ldrb	r3, [r7, #11]
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	4b0f      	ldr	r3, [pc, #60]	; (800bdfc <tcp_parseopt+0xe8>)
 800bdbe:	881b      	ldrh	r3, [r3, #0]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	3b02      	subs	r3, #2
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	4b0c      	ldr	r3, [pc, #48]	; (800bdfc <tcp_parseopt+0xe8>)
 800bdca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bdcc:	4b0b      	ldr	r3, [pc, #44]	; (800bdfc <tcp_parseopt+0xe8>)
 800bdce:	881a      	ldrh	r2, [r3, #0]
 800bdd0:	4b09      	ldr	r3, [pc, #36]	; (800bdf8 <tcp_parseopt+0xe4>)
 800bdd2:	881b      	ldrh	r3, [r3, #0]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d3b3      	bcc.n	800bd40 <tcp_parseopt+0x2c>
 800bdd8:	e004      	b.n	800bde4 <tcp_parseopt+0xd0>
          return;
 800bdda:	bf00      	nop
 800bddc:	e002      	b.n	800bde4 <tcp_parseopt+0xd0>
            return;
 800bdde:	bf00      	nop
 800bde0:	e000      	b.n	800bde4 <tcp_parseopt+0xd0>
            return;
 800bde2:	bf00      	nop
      }
    }
  }
}
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	08013ff8 	.word	0x08013ff8
 800bdf0:	0801445c 	.word	0x0801445c
 800bdf4:	08014044 	.word	0x08014044
 800bdf8:	2000087c 	.word	0x2000087c
 800bdfc:	20000884 	.word	0x20000884

0800be00 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800be00:	b480      	push	{r7}
 800be02:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800be04:	4b05      	ldr	r3, [pc, #20]	; (800be1c <tcp_trigger_input_pcb_close+0x1c>)
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	f043 0310 	orr.w	r3, r3, #16
 800be0c:	b2da      	uxtb	r2, r3
 800be0e:	4b03      	ldr	r3, [pc, #12]	; (800be1c <tcp_trigger_input_pcb_close+0x1c>)
 800be10:	701a      	strb	r2, [r3, #0]
}
 800be12:	bf00      	nop
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	20000895 	.word	0x20000895

0800be20 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00a      	beq.n	800be48 <tcp_route+0x28>
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	7a1b      	ldrb	r3, [r3, #8]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d006      	beq.n	800be48 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	7a1b      	ldrb	r3, [r3, #8]
 800be3e:	4618      	mov	r0, r3
 800be40:	f7fb fb5a 	bl	80074f8 <netif_get_by_index>
 800be44:	4603      	mov	r3, r0
 800be46:	e003      	b.n	800be50 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f002 fe7d 	bl	800eb48 <ip4_route>
 800be4e:	4603      	mov	r3, r0
  }
}
 800be50:	4618      	mov	r0, r3
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800be58:	b590      	push	{r4, r7, lr}
 800be5a:	b087      	sub	sp, #28
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	603b      	str	r3, [r7, #0]
 800be64:	4613      	mov	r3, r2
 800be66:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d105      	bne.n	800be7a <tcp_create_segment+0x22>
 800be6e:	4b44      	ldr	r3, [pc, #272]	; (800bf80 <tcp_create_segment+0x128>)
 800be70:	22a3      	movs	r2, #163	; 0xa3
 800be72:	4944      	ldr	r1, [pc, #272]	; (800bf84 <tcp_create_segment+0x12c>)
 800be74:	4844      	ldr	r0, [pc, #272]	; (800bf88 <tcp_create_segment+0x130>)
 800be76:	f004 fdb9 	bl	80109ec <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d105      	bne.n	800be8c <tcp_create_segment+0x34>
 800be80:	4b3f      	ldr	r3, [pc, #252]	; (800bf80 <tcp_create_segment+0x128>)
 800be82:	22a4      	movs	r2, #164	; 0xa4
 800be84:	4941      	ldr	r1, [pc, #260]	; (800bf8c <tcp_create_segment+0x134>)
 800be86:	4840      	ldr	r0, [pc, #256]	; (800bf88 <tcp_create_segment+0x130>)
 800be88:	f004 fdb0 	bl	80109ec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800be8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	b2db      	uxtb	r3, r3
 800be94:	f003 0304 	and.w	r3, r3, #4
 800be98:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800be9a:	2003      	movs	r0, #3
 800be9c:	f7fa ffa6 	bl	8006dec <memp_malloc>
 800bea0:	6138      	str	r0, [r7, #16]
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d104      	bne.n	800beb2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800bea8:	68b8      	ldr	r0, [r7, #8]
 800beaa:	f7fb fe85 	bl	8007bb8 <pbuf_free>
    return NULL;
 800beae:	2300      	movs	r3, #0
 800beb0:	e061      	b.n	800bf76 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800beb8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	2200      	movs	r2, #0
 800bebe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	68ba      	ldr	r2, [r7, #8]
 800bec4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	891a      	ldrh	r2, [r3, #8]
 800beca:	7dfb      	ldrb	r3, [r7, #23]
 800becc:	b29b      	uxth	r3, r3
 800bece:	429a      	cmp	r2, r3
 800bed0:	d205      	bcs.n	800bede <tcp_create_segment+0x86>
 800bed2:	4b2b      	ldr	r3, [pc, #172]	; (800bf80 <tcp_create_segment+0x128>)
 800bed4:	22b0      	movs	r2, #176	; 0xb0
 800bed6:	492e      	ldr	r1, [pc, #184]	; (800bf90 <tcp_create_segment+0x138>)
 800bed8:	482b      	ldr	r0, [pc, #172]	; (800bf88 <tcp_create_segment+0x130>)
 800beda:	f004 fd87 	bl	80109ec <iprintf>
  seg->len = p->tot_len - optlen;
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	891a      	ldrh	r2, [r3, #8]
 800bee2:	7dfb      	ldrb	r3, [r7, #23]
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	b29a      	uxth	r2, r3
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800beee:	2114      	movs	r1, #20
 800bef0:	68b8      	ldr	r0, [r7, #8]
 800bef2:	f7fb fdcb 	bl	8007a8c <pbuf_add_header>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d004      	beq.n	800bf06 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800befc:	6938      	ldr	r0, [r7, #16]
 800befe:	f7fd f8ce 	bl	800909e <tcp_seg_free>
    return NULL;
 800bf02:	2300      	movs	r3, #0
 800bf04:	e037      	b.n	800bf76 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	685a      	ldr	r2, [r3, #4]
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	8ada      	ldrh	r2, [r3, #22]
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	68dc      	ldr	r4, [r3, #12]
 800bf18:	4610      	mov	r0, r2
 800bf1a:	f7fa faef 	bl	80064fc <lwip_htons>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	8b1a      	ldrh	r2, [r3, #24]
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	68dc      	ldr	r4, [r3, #12]
 800bf2a:	4610      	mov	r0, r2
 800bf2c:	f7fa fae6 	bl	80064fc <lwip_htons>
 800bf30:	4603      	mov	r3, r0
 800bf32:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	68dc      	ldr	r4, [r3, #12]
 800bf38:	6838      	ldr	r0, [r7, #0]
 800bf3a:	f7fa faf4 	bl	8006526 <lwip_htonl>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bf42:	7dfb      	ldrb	r3, [r7, #23]
 800bf44:	089b      	lsrs	r3, r3, #2
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	3305      	adds	r3, #5
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	031b      	lsls	r3, r3, #12
 800bf50:	b29a      	uxth	r2, r3
 800bf52:	79fb      	ldrb	r3, [r7, #7]
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	4313      	orrs	r3, r2
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	68dc      	ldr	r4, [r3, #12]
 800bf5e:	4610      	mov	r0, r2
 800bf60:	f7fa facc 	bl	80064fc <lwip_htons>
 800bf64:	4603      	mov	r3, r0
 800bf66:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	749a      	strb	r2, [r3, #18]
 800bf70:	2200      	movs	r2, #0
 800bf72:	74da      	strb	r2, [r3, #19]
  return seg;
 800bf74:	693b      	ldr	r3, [r7, #16]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	371c      	adds	r7, #28
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd90      	pop	{r4, r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	08014478 	.word	0x08014478
 800bf84:	080144ac 	.word	0x080144ac
 800bf88:	080144cc 	.word	0x080144cc
 800bf8c:	080144f4 	.word	0x080144f4
 800bf90:	08014518 	.word	0x08014518

0800bf94 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800bf94:	b590      	push	{r4, r7, lr}
 800bf96:	b08b      	sub	sp, #44	; 0x2c
 800bf98:	af02      	add	r7, sp, #8
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	61fb      	str	r3, [r7, #28]
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d106      	bne.n	800bfc0 <tcp_split_unsent_seg+0x2c>
 800bfb2:	4b95      	ldr	r3, [pc, #596]	; (800c208 <tcp_split_unsent_seg+0x274>)
 800bfb4:	f240 324b 	movw	r2, #843	; 0x34b
 800bfb8:	4994      	ldr	r1, [pc, #592]	; (800c20c <tcp_split_unsent_seg+0x278>)
 800bfba:	4895      	ldr	r0, [pc, #596]	; (800c210 <tcp_split_unsent_seg+0x27c>)
 800bfbc:	f004 fd16 	bl	80109ec <iprintf>

  useg = pcb->unsent;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfc4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d102      	bne.n	800bfd2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800bfcc:	f04f 33ff 	mov.w	r3, #4294967295
 800bfd0:	e116      	b.n	800c200 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800bfd2:	887b      	ldrh	r3, [r7, #2]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d109      	bne.n	800bfec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bfd8:	4b8b      	ldr	r3, [pc, #556]	; (800c208 <tcp_split_unsent_seg+0x274>)
 800bfda:	f240 3253 	movw	r2, #851	; 0x353
 800bfde:	498d      	ldr	r1, [pc, #564]	; (800c214 <tcp_split_unsent_seg+0x280>)
 800bfe0:	488b      	ldr	r0, [pc, #556]	; (800c210 <tcp_split_unsent_seg+0x27c>)
 800bfe2:	f004 fd03 	bl	80109ec <iprintf>
    return ERR_VAL;
 800bfe6:	f06f 0305 	mvn.w	r3, #5
 800bfea:	e109      	b.n	800c200 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	891b      	ldrh	r3, [r3, #8]
 800bff0:	887a      	ldrh	r2, [r7, #2]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d301      	bcc.n	800bffa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800bff6:	2300      	movs	r3, #0
 800bff8:	e102      	b.n	800c200 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bffe:	887a      	ldrh	r2, [r7, #2]
 800c000:	429a      	cmp	r2, r3
 800c002:	d906      	bls.n	800c012 <tcp_split_unsent_seg+0x7e>
 800c004:	4b80      	ldr	r3, [pc, #512]	; (800c208 <tcp_split_unsent_seg+0x274>)
 800c006:	f240 325b 	movw	r2, #859	; 0x35b
 800c00a:	4983      	ldr	r1, [pc, #524]	; (800c218 <tcp_split_unsent_seg+0x284>)
 800c00c:	4880      	ldr	r0, [pc, #512]	; (800c210 <tcp_split_unsent_seg+0x27c>)
 800c00e:	f004 fced 	bl	80109ec <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	891b      	ldrh	r3, [r3, #8]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d106      	bne.n	800c028 <tcp_split_unsent_seg+0x94>
 800c01a:	4b7b      	ldr	r3, [pc, #492]	; (800c208 <tcp_split_unsent_seg+0x274>)
 800c01c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c020:	497e      	ldr	r1, [pc, #504]	; (800c21c <tcp_split_unsent_seg+0x288>)
 800c022:	487b      	ldr	r0, [pc, #492]	; (800c210 <tcp_split_unsent_seg+0x27c>)
 800c024:	f004 fce2 	bl	80109ec <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	7a9b      	ldrb	r3, [r3, #10]
 800c02c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c02e:	7bfb      	ldrb	r3, [r7, #15]
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	b2db      	uxtb	r3, r3
 800c034:	f003 0304 	and.w	r3, r3, #4
 800c038:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	891a      	ldrh	r2, [r3, #8]
 800c03e:	887b      	ldrh	r3, [r7, #2]
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	b29a      	uxth	r2, r3
 800c048:	89bb      	ldrh	r3, [r7, #12]
 800c04a:	4413      	add	r3, r2
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c052:	4619      	mov	r1, r3
 800c054:	2036      	movs	r0, #54	; 0x36
 800c056:	f7fb facb 	bl	80075f0 <pbuf_alloc>
 800c05a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f000 80b7 	beq.w	800c1d2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	891a      	ldrh	r2, [r3, #8]
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	891b      	ldrh	r3, [r3, #8]
 800c06e:	1ad3      	subs	r3, r2, r3
 800c070:	b29a      	uxth	r2, r3
 800c072:	887b      	ldrh	r3, [r7, #2]
 800c074:	4413      	add	r3, r2
 800c076:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	6858      	ldr	r0, [r3, #4]
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	685a      	ldr	r2, [r3, #4]
 800c080:	7bbb      	ldrb	r3, [r7, #14]
 800c082:	18d1      	adds	r1, r2, r3
 800c084:	897b      	ldrh	r3, [r7, #10]
 800c086:	89ba      	ldrh	r2, [r7, #12]
 800c088:	f7fb ff80 	bl	8007f8c <pbuf_copy_partial>
 800c08c:	4603      	mov	r3, r0
 800c08e:	461a      	mov	r2, r3
 800c090:	89bb      	ldrh	r3, [r7, #12]
 800c092:	4293      	cmp	r3, r2
 800c094:	f040 809f 	bne.w	800c1d6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	899b      	ldrh	r3, [r3, #12]
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7fa fa2b 	bl	80064fc <lwip_htons>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0ae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c0b4:	7efb      	ldrb	r3, [r7, #27]
 800c0b6:	f003 0308 	and.w	r3, r3, #8
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d007      	beq.n	800c0ce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c0be:	7efb      	ldrb	r3, [r7, #27]
 800c0c0:	f023 0308 	bic.w	r3, r3, #8
 800c0c4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c0c6:	7ebb      	ldrb	r3, [r7, #26]
 800c0c8:	f043 0308 	orr.w	r3, r3, #8
 800c0cc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c0ce:	7efb      	ldrb	r3, [r7, #27]
 800c0d0:	f003 0301 	and.w	r3, r3, #1
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d007      	beq.n	800c0e8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c0d8:	7efb      	ldrb	r3, [r7, #27]
 800c0da:	f023 0301 	bic.w	r3, r3, #1
 800c0de:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c0e0:	7ebb      	ldrb	r3, [r7, #26]
 800c0e2:	f043 0301 	orr.w	r3, r3, #1
 800c0e6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fa fa19 	bl	8006526 <lwip_htonl>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	887b      	ldrh	r3, [r7, #2]
 800c0f8:	18d1      	adds	r1, r2, r3
 800c0fa:	7eba      	ldrb	r2, [r7, #26]
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
 800c0fe:	9300      	str	r3, [sp, #0]
 800c100:	460b      	mov	r3, r1
 800c102:	6939      	ldr	r1, [r7, #16]
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f7ff fea7 	bl	800be58 <tcp_create_segment>
 800c10a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d063      	beq.n	800c1da <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	4618      	mov	r0, r3
 800c118:	f7fb fdd6 	bl	8007cc8 <pbuf_clen>
 800c11c:	4603      	mov	r3, r0
 800c11e:	461a      	mov	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c126:	1a9b      	subs	r3, r3, r2
 800c128:	b29a      	uxth	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	6858      	ldr	r0, [r3, #4]
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	891a      	ldrh	r2, [r3, #8]
 800c13a:	89bb      	ldrh	r3, [r7, #12]
 800c13c:	1ad3      	subs	r3, r2, r3
 800c13e:	b29b      	uxth	r3, r3
 800c140:	4619      	mov	r1, r3
 800c142:	f7fb fbb3 	bl	80078ac <pbuf_realloc>
  useg->len -= remainder;
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	891a      	ldrh	r2, [r3, #8]
 800c14a:	89bb      	ldrh	r3, [r7, #12]
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	b29a      	uxth	r2, r3
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	899b      	ldrh	r3, [r3, #12]
 800c15a:	b29c      	uxth	r4, r3
 800c15c:	7efb      	ldrb	r3, [r7, #27]
 800c15e:	b29b      	uxth	r3, r3
 800c160:	4618      	mov	r0, r3
 800c162:	f7fa f9cb 	bl	80064fc <lwip_htons>
 800c166:	4603      	mov	r3, r0
 800c168:	461a      	mov	r2, r3
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	4322      	orrs	r2, r4
 800c170:	b292      	uxth	r2, r2
 800c172:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fb fda5 	bl	8007cc8 <pbuf_clen>
 800c17e:	4603      	mov	r3, r0
 800c180:	461a      	mov	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c188:	4413      	add	r3, r2
 800c18a:	b29a      	uxth	r2, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c192:	69fb      	ldr	r3, [r7, #28]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	4618      	mov	r0, r3
 800c198:	f7fb fd96 	bl	8007cc8 <pbuf_clen>
 800c19c:	4603      	mov	r3, r0
 800c19e:	461a      	mov	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c1a6:	4413      	add	r3, r2
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	69fb      	ldr	r3, [r7, #28]
 800c1b6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	69fa      	ldr	r2, [r7, #28]
 800c1bc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d103      	bne.n	800c1ce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	e016      	b.n	800c200 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c1d2:	bf00      	nop
 800c1d4:	e002      	b.n	800c1dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c1d6:	bf00      	nop
 800c1d8:	e000      	b.n	800c1dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c1da:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c1dc:	69fb      	ldr	r3, [r7, #28]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d006      	beq.n	800c1f0 <tcp_split_unsent_seg+0x25c>
 800c1e2:	4b09      	ldr	r3, [pc, #36]	; (800c208 <tcp_split_unsent_seg+0x274>)
 800c1e4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c1e8:	490d      	ldr	r1, [pc, #52]	; (800c220 <tcp_split_unsent_seg+0x28c>)
 800c1ea:	4809      	ldr	r0, [pc, #36]	; (800c210 <tcp_split_unsent_seg+0x27c>)
 800c1ec:	f004 fbfe 	bl	80109ec <iprintf>
  if (p != NULL) {
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d002      	beq.n	800c1fc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c1f6:	6938      	ldr	r0, [r7, #16]
 800c1f8:	f7fb fcde 	bl	8007bb8 <pbuf_free>
  }

  return ERR_MEM;
 800c1fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c200:	4618      	mov	r0, r3
 800c202:	3724      	adds	r7, #36	; 0x24
 800c204:	46bd      	mov	sp, r7
 800c206:	bd90      	pop	{r4, r7, pc}
 800c208:	08014478 	.word	0x08014478
 800c20c:	0801480c 	.word	0x0801480c
 800c210:	080144cc 	.word	0x080144cc
 800c214:	08014830 	.word	0x08014830
 800c218:	08014854 	.word	0x08014854
 800c21c:	08014864 	.word	0x08014864
 800c220:	08014874 	.word	0x08014874

0800c224 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c224:	b590      	push	{r4, r7, lr}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d106      	bne.n	800c240 <tcp_send_fin+0x1c>
 800c232:	4b21      	ldr	r3, [pc, #132]	; (800c2b8 <tcp_send_fin+0x94>)
 800c234:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c238:	4920      	ldr	r1, [pc, #128]	; (800c2bc <tcp_send_fin+0x98>)
 800c23a:	4821      	ldr	r0, [pc, #132]	; (800c2c0 <tcp_send_fin+0x9c>)
 800c23c:	f004 fbd6 	bl	80109ec <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c244:	2b00      	cmp	r3, #0
 800c246:	d02e      	beq.n	800c2a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c24c:	60fb      	str	r3, [r7, #12]
 800c24e:	e002      	b.n	800c256 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1f8      	bne.n	800c250 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	899b      	ldrh	r3, [r3, #12]
 800c264:	b29b      	uxth	r3, r3
 800c266:	4618      	mov	r0, r3
 800c268:	f7fa f948 	bl	80064fc <lwip_htons>
 800c26c:	4603      	mov	r3, r0
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	f003 0307 	and.w	r3, r3, #7
 800c274:	2b00      	cmp	r3, #0
 800c276:	d116      	bne.n	800c2a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	899b      	ldrh	r3, [r3, #12]
 800c27e:	b29c      	uxth	r4, r3
 800c280:	2001      	movs	r0, #1
 800c282:	f7fa f93b 	bl	80064fc <lwip_htons>
 800c286:	4603      	mov	r3, r0
 800c288:	461a      	mov	r2, r3
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	4322      	orrs	r2, r4
 800c290:	b292      	uxth	r2, r2
 800c292:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	8b5b      	ldrh	r3, [r3, #26]
 800c298:	f043 0320 	orr.w	r3, r3, #32
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	e004      	b.n	800c2b0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c2a6:	2101      	movs	r1, #1
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 f80b 	bl	800c2c4 <tcp_enqueue_flags>
 800c2ae:	4603      	mov	r3, r0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3714      	adds	r7, #20
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd90      	pop	{r4, r7, pc}
 800c2b8:	08014478 	.word	0x08014478
 800c2bc:	08014880 	.word	0x08014880
 800c2c0:	080144cc 	.word	0x080144cc

0800c2c4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b08a      	sub	sp, #40	; 0x28
 800c2c8:	af02      	add	r7, sp, #8
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c2d8:	78fb      	ldrb	r3, [r7, #3]
 800c2da:	f003 0303 	and.w	r3, r3, #3
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d106      	bne.n	800c2f0 <tcp_enqueue_flags+0x2c>
 800c2e2:	4b67      	ldr	r3, [pc, #412]	; (800c480 <tcp_enqueue_flags+0x1bc>)
 800c2e4:	f240 4211 	movw	r2, #1041	; 0x411
 800c2e8:	4966      	ldr	r1, [pc, #408]	; (800c484 <tcp_enqueue_flags+0x1c0>)
 800c2ea:	4867      	ldr	r0, [pc, #412]	; (800c488 <tcp_enqueue_flags+0x1c4>)
 800c2ec:	f004 fb7e 	bl	80109ec <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d106      	bne.n	800c304 <tcp_enqueue_flags+0x40>
 800c2f6:	4b62      	ldr	r3, [pc, #392]	; (800c480 <tcp_enqueue_flags+0x1bc>)
 800c2f8:	f240 4213 	movw	r2, #1043	; 0x413
 800c2fc:	4963      	ldr	r1, [pc, #396]	; (800c48c <tcp_enqueue_flags+0x1c8>)
 800c2fe:	4862      	ldr	r0, [pc, #392]	; (800c488 <tcp_enqueue_flags+0x1c4>)
 800c300:	f004 fb74 	bl	80109ec <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c304:	78fb      	ldrb	r3, [r7, #3]
 800c306:	f003 0302 	and.w	r3, r3, #2
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d001      	beq.n	800c312 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c30e:	2301      	movs	r3, #1
 800c310:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c312:	7ffb      	ldrb	r3, [r7, #31]
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	b2db      	uxtb	r3, r3
 800c318:	f003 0304 	and.w	r3, r3, #4
 800c31c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c31e:	7dfb      	ldrb	r3, [r7, #23]
 800c320:	b29b      	uxth	r3, r3
 800c322:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c326:	4619      	mov	r1, r3
 800c328:	2036      	movs	r0, #54	; 0x36
 800c32a:	f7fb f961 	bl	80075f0 <pbuf_alloc>
 800c32e:	6138      	str	r0, [r7, #16]
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d109      	bne.n	800c34a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	8b5b      	ldrh	r3, [r3, #26]
 800c33a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c33e:	b29a      	uxth	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c344:	f04f 33ff 	mov.w	r3, #4294967295
 800c348:	e095      	b.n	800c476 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	895a      	ldrh	r2, [r3, #10]
 800c34e:	7dfb      	ldrb	r3, [r7, #23]
 800c350:	b29b      	uxth	r3, r3
 800c352:	429a      	cmp	r2, r3
 800c354:	d206      	bcs.n	800c364 <tcp_enqueue_flags+0xa0>
 800c356:	4b4a      	ldr	r3, [pc, #296]	; (800c480 <tcp_enqueue_flags+0x1bc>)
 800c358:	f240 4239 	movw	r2, #1081	; 0x439
 800c35c:	494c      	ldr	r1, [pc, #304]	; (800c490 <tcp_enqueue_flags+0x1cc>)
 800c35e:	484a      	ldr	r0, [pc, #296]	; (800c488 <tcp_enqueue_flags+0x1c4>)
 800c360:	f004 fb44 	bl	80109ec <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c368:	78fa      	ldrb	r2, [r7, #3]
 800c36a:	7ffb      	ldrb	r3, [r7, #31]
 800c36c:	9300      	str	r3, [sp, #0]
 800c36e:	460b      	mov	r3, r1
 800c370:	6939      	ldr	r1, [r7, #16]
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7ff fd70 	bl	800be58 <tcp_create_segment>
 800c378:	60f8      	str	r0, [r7, #12]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d109      	bne.n	800c394 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	8b5b      	ldrh	r3, [r3, #26]
 800c384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c388:	b29a      	uxth	r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c38e:	f04f 33ff 	mov.w	r3, #4294967295
 800c392:	e070      	b.n	800c476 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	f003 0303 	and.w	r3, r3, #3
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d006      	beq.n	800c3ae <tcp_enqueue_flags+0xea>
 800c3a0:	4b37      	ldr	r3, [pc, #220]	; (800c480 <tcp_enqueue_flags+0x1bc>)
 800c3a2:	f240 4242 	movw	r2, #1090	; 0x442
 800c3a6:	493b      	ldr	r1, [pc, #236]	; (800c494 <tcp_enqueue_flags+0x1d0>)
 800c3a8:	4837      	ldr	r0, [pc, #220]	; (800c488 <tcp_enqueue_flags+0x1c4>)
 800c3aa:	f004 fb1f 	bl	80109ec <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	891b      	ldrh	r3, [r3, #8]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d006      	beq.n	800c3c4 <tcp_enqueue_flags+0x100>
 800c3b6:	4b32      	ldr	r3, [pc, #200]	; (800c480 <tcp_enqueue_flags+0x1bc>)
 800c3b8:	f240 4243 	movw	r2, #1091	; 0x443
 800c3bc:	4936      	ldr	r1, [pc, #216]	; (800c498 <tcp_enqueue_flags+0x1d4>)
 800c3be:	4832      	ldr	r0, [pc, #200]	; (800c488 <tcp_enqueue_flags+0x1c4>)
 800c3c0:	f004 fb14 	bl	80109ec <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d103      	bne.n	800c3d4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	68fa      	ldr	r2, [r7, #12]
 800c3d0:	66da      	str	r2, [r3, #108]	; 0x6c
 800c3d2:	e00d      	b.n	800c3f0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3d8:	61bb      	str	r3, [r7, #24]
 800c3da:	e002      	b.n	800c3e2 <tcp_enqueue_flags+0x11e>
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	61bb      	str	r3, [r7, #24]
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d1f8      	bne.n	800c3dc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c3f8:	78fb      	ldrb	r3, [r7, #3]
 800c3fa:	f003 0302 	and.w	r3, r3, #2
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d104      	bne.n	800c40c <tcp_enqueue_flags+0x148>
 800c402:	78fb      	ldrb	r3, [r7, #3]
 800c404:	f003 0301 	and.w	r3, r3, #1
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d004      	beq.n	800c416 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c410:	1c5a      	adds	r2, r3, #1
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c416:	78fb      	ldrb	r3, [r7, #3]
 800c418:	f003 0301 	and.w	r3, r3, #1
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d006      	beq.n	800c42e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	8b5b      	ldrh	r3, [r3, #26]
 800c424:	f043 0320 	orr.w	r3, r3, #32
 800c428:	b29a      	uxth	r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	4618      	mov	r0, r3
 800c434:	f7fb fc48 	bl	8007cc8 <pbuf_clen>
 800c438:	4603      	mov	r3, r0
 800c43a:	461a      	mov	r2, r3
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c442:	4413      	add	r3, r2
 800c444:	b29a      	uxth	r2, r3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00e      	beq.n	800c474 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d10a      	bne.n	800c474 <tcp_enqueue_flags+0x1b0>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c462:	2b00      	cmp	r3, #0
 800c464:	d106      	bne.n	800c474 <tcp_enqueue_flags+0x1b0>
 800c466:	4b06      	ldr	r3, [pc, #24]	; (800c480 <tcp_enqueue_flags+0x1bc>)
 800c468:	f240 4265 	movw	r2, #1125	; 0x465
 800c46c:	490b      	ldr	r1, [pc, #44]	; (800c49c <tcp_enqueue_flags+0x1d8>)
 800c46e:	4806      	ldr	r0, [pc, #24]	; (800c488 <tcp_enqueue_flags+0x1c4>)
 800c470:	f004 fabc 	bl	80109ec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3720      	adds	r7, #32
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	08014478 	.word	0x08014478
 800c484:	0801489c 	.word	0x0801489c
 800c488:	080144cc 	.word	0x080144cc
 800c48c:	080148f4 	.word	0x080148f4
 800c490:	08014914 	.word	0x08014914
 800c494:	08014950 	.word	0x08014950
 800c498:	08014968 	.word	0x08014968
 800c49c:	08014994 	.word	0x08014994

0800c4a0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c4a0:	b5b0      	push	{r4, r5, r7, lr}
 800c4a2:	b08a      	sub	sp, #40	; 0x28
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d106      	bne.n	800c4bc <tcp_output+0x1c>
 800c4ae:	4b8a      	ldr	r3, [pc, #552]	; (800c6d8 <tcp_output+0x238>)
 800c4b0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c4b4:	4989      	ldr	r1, [pc, #548]	; (800c6dc <tcp_output+0x23c>)
 800c4b6:	488a      	ldr	r0, [pc, #552]	; (800c6e0 <tcp_output+0x240>)
 800c4b8:	f004 fa98 	bl	80109ec <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	7d1b      	ldrb	r3, [r3, #20]
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d106      	bne.n	800c4d2 <tcp_output+0x32>
 800c4c4:	4b84      	ldr	r3, [pc, #528]	; (800c6d8 <tcp_output+0x238>)
 800c4c6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c4ca:	4986      	ldr	r1, [pc, #536]	; (800c6e4 <tcp_output+0x244>)
 800c4cc:	4884      	ldr	r0, [pc, #528]	; (800c6e0 <tcp_output+0x240>)
 800c4ce:	f004 fa8d 	bl	80109ec <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c4d2:	4b85      	ldr	r3, [pc, #532]	; (800c6e8 <tcp_output+0x248>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d101      	bne.n	800c4e0 <tcp_output+0x40>
    return ERR_OK;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	e1ce      	b.n	800c87e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	bf28      	it	cs
 800c4f0:	4613      	movcs	r3, r2
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10b      	bne.n	800c51a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	8b5b      	ldrh	r3, [r3, #26]
 800c506:	f003 0302 	and.w	r3, r3, #2
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f000 81aa 	beq.w	800c864 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 fdcb 	bl	800d0ac <tcp_send_empty_ack>
 800c516:	4603      	mov	r3, r0
 800c518:	e1b1      	b.n	800c87e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c51a:	6879      	ldr	r1, [r7, #4]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	3304      	adds	r3, #4
 800c520:	461a      	mov	r2, r3
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7ff fc7c 	bl	800be20 <tcp_route>
 800c528:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d102      	bne.n	800c536 <tcp_output+0x96>
    return ERR_RTE;
 800c530:	f06f 0303 	mvn.w	r3, #3
 800c534:	e1a3      	b.n	800c87e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d003      	beq.n	800c544 <tcp_output+0xa4>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d111      	bne.n	800c568 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d002      	beq.n	800c550 <tcp_output+0xb0>
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	3304      	adds	r3, #4
 800c54e:	e000      	b.n	800c552 <tcp_output+0xb2>
 800c550:	2300      	movs	r3, #0
 800c552:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d102      	bne.n	800c560 <tcp_output+0xc0>
      return ERR_RTE;
 800c55a:	f06f 0303 	mvn.w	r3, #3
 800c55e:	e18e      	b.n	800c87e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56a:	68db      	ldr	r3, [r3, #12]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	4618      	mov	r0, r3
 800c570:	f7f9 ffd9 	bl	8006526 <lwip_htonl>
 800c574:	4602      	mov	r2, r0
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c57a:	1ad3      	subs	r3, r2, r3
 800c57c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c57e:	8912      	ldrh	r2, [r2, #8]
 800c580:	4413      	add	r3, r2
 800c582:	69ba      	ldr	r2, [r7, #24]
 800c584:	429a      	cmp	r2, r3
 800c586:	d227      	bcs.n	800c5d8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c58e:	461a      	mov	r2, r3
 800c590:	69bb      	ldr	r3, [r7, #24]
 800c592:	4293      	cmp	r3, r2
 800c594:	d114      	bne.n	800c5c0 <tcp_output+0x120>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d110      	bne.n	800c5c0 <tcp_output+0x120>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10b      	bne.n	800c5c0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	8b5b      	ldrh	r3, [r3, #26]
 800c5c4:	f003 0302 	and.w	r3, r3, #2
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f000 814d 	beq.w	800c868 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fd6c 	bl	800d0ac <tcp_send_empty_ack>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	e152      	b.n	800c87e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5e4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c5e6:	6a3b      	ldr	r3, [r7, #32]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	f000 811c 	beq.w	800c826 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c5ee:	e002      	b.n	800c5f6 <tcp_output+0x156>
 800c5f0:	6a3b      	ldr	r3, [r7, #32]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	623b      	str	r3, [r7, #32]
 800c5f6:	6a3b      	ldr	r3, [r7, #32]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d1f8      	bne.n	800c5f0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c5fe:	e112      	b.n	800c826 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	899b      	ldrh	r3, [r3, #12]
 800c606:	b29b      	uxth	r3, r3
 800c608:	4618      	mov	r0, r3
 800c60a:	f7f9 ff77 	bl	80064fc <lwip_htons>
 800c60e:	4603      	mov	r3, r0
 800c610:	b2db      	uxtb	r3, r3
 800c612:	f003 0304 	and.w	r3, r3, #4
 800c616:	2b00      	cmp	r3, #0
 800c618:	d006      	beq.n	800c628 <tcp_output+0x188>
 800c61a:	4b2f      	ldr	r3, [pc, #188]	; (800c6d8 <tcp_output+0x238>)
 800c61c:	f240 5236 	movw	r2, #1334	; 0x536
 800c620:	4932      	ldr	r1, [pc, #200]	; (800c6ec <tcp_output+0x24c>)
 800c622:	482f      	ldr	r0, [pc, #188]	; (800c6e0 <tcp_output+0x240>)
 800c624:	f004 f9e2 	bl	80109ec <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d01f      	beq.n	800c670 <tcp_output+0x1d0>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	8b5b      	ldrh	r3, [r3, #26]
 800c634:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d119      	bne.n	800c670 <tcp_output+0x1d0>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00b      	beq.n	800c65c <tcp_output+0x1bc>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d110      	bne.n	800c670 <tcp_output+0x1d0>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c652:	891a      	ldrh	r2, [r3, #8]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c658:	429a      	cmp	r2, r3
 800c65a:	d209      	bcs.n	800c670 <tcp_output+0x1d0>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c662:	2b00      	cmp	r3, #0
 800c664:	d004      	beq.n	800c670 <tcp_output+0x1d0>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c66c:	2b08      	cmp	r3, #8
 800c66e:	d901      	bls.n	800c674 <tcp_output+0x1d4>
 800c670:	2301      	movs	r3, #1
 800c672:	e000      	b.n	800c676 <tcp_output+0x1d6>
 800c674:	2300      	movs	r3, #0
 800c676:	2b00      	cmp	r3, #0
 800c678:	d106      	bne.n	800c688 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	8b5b      	ldrh	r3, [r3, #26]
 800c67e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c682:	2b00      	cmp	r3, #0
 800c684:	f000 80e4 	beq.w	800c850 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	7d1b      	ldrb	r3, [r3, #20]
 800c68c:	2b02      	cmp	r3, #2
 800c68e:	d00d      	beq.n	800c6ac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	899b      	ldrh	r3, [r3, #12]
 800c696:	b29c      	uxth	r4, r3
 800c698:	2010      	movs	r0, #16
 800c69a:	f7f9 ff2f 	bl	80064fc <lwip_htons>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	4322      	orrs	r2, r4
 800c6a8:	b292      	uxth	r2, r2
 800c6aa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c6ac:	697a      	ldr	r2, [r7, #20]
 800c6ae:	6879      	ldr	r1, [r7, #4]
 800c6b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6b2:	f000 f909 	bl	800c8c8 <tcp_output_segment>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c6ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d016      	beq.n	800c6f0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	8b5b      	ldrh	r3, [r3, #26]
 800c6c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	835a      	strh	r2, [r3, #26]
      return err;
 800c6d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6d4:	e0d3      	b.n	800c87e <tcp_output+0x3de>
 800c6d6:	bf00      	nop
 800c6d8:	08014478 	.word	0x08014478
 800c6dc:	080149bc 	.word	0x080149bc
 800c6e0:	080144cc 	.word	0x080144cc
 800c6e4:	080149d4 	.word	0x080149d4
 800c6e8:	2000adf4 	.word	0x2000adf4
 800c6ec:	080149fc 	.word	0x080149fc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	7d1b      	ldrb	r3, [r3, #20]
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d006      	beq.n	800c70e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	8b5b      	ldrh	r3, [r3, #26]
 800c704:	f023 0303 	bic.w	r3, r3, #3
 800c708:	b29a      	uxth	r2, r3
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	4618      	mov	r0, r3
 800c716:	f7f9 ff06 	bl	8006526 <lwip_htonl>
 800c71a:	4604      	mov	r4, r0
 800c71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71e:	891b      	ldrh	r3, [r3, #8]
 800c720:	461d      	mov	r5, r3
 800c722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	899b      	ldrh	r3, [r3, #12]
 800c728:	b29b      	uxth	r3, r3
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7f9 fee6 	bl	80064fc <lwip_htons>
 800c730:	4603      	mov	r3, r0
 800c732:	b2db      	uxtb	r3, r3
 800c734:	f003 0303 	and.w	r3, r3, #3
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d001      	beq.n	800c740 <tcp_output+0x2a0>
 800c73c:	2301      	movs	r3, #1
 800c73e:	e000      	b.n	800c742 <tcp_output+0x2a2>
 800c740:	2300      	movs	r3, #0
 800c742:	442b      	add	r3, r5
 800c744:	4423      	add	r3, r4
 800c746:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	1ad3      	subs	r3, r2, r3
 800c750:	2b00      	cmp	r3, #0
 800c752:	da02      	bge.n	800c75a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	68ba      	ldr	r2, [r7, #8]
 800c758:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75c:	891b      	ldrh	r3, [r3, #8]
 800c75e:	461c      	mov	r4, r3
 800c760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	899b      	ldrh	r3, [r3, #12]
 800c766:	b29b      	uxth	r3, r3
 800c768:	4618      	mov	r0, r3
 800c76a:	f7f9 fec7 	bl	80064fc <lwip_htons>
 800c76e:	4603      	mov	r3, r0
 800c770:	b2db      	uxtb	r3, r3
 800c772:	f003 0303 	and.w	r3, r3, #3
 800c776:	2b00      	cmp	r3, #0
 800c778:	d001      	beq.n	800c77e <tcp_output+0x2de>
 800c77a:	2301      	movs	r3, #1
 800c77c:	e000      	b.n	800c780 <tcp_output+0x2e0>
 800c77e:	2300      	movs	r3, #0
 800c780:	4423      	add	r3, r4
 800c782:	2b00      	cmp	r3, #0
 800c784:	d049      	beq.n	800c81a <tcp_output+0x37a>
      seg->next = NULL;
 800c786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c788:	2200      	movs	r2, #0
 800c78a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c790:	2b00      	cmp	r3, #0
 800c792:	d105      	bne.n	800c7a0 <tcp_output+0x300>
        pcb->unacked = seg;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c798:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	623b      	str	r3, [r7, #32]
 800c79e:	e03f      	b.n	800c820 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7f9 febd 	bl	8006526 <lwip_htonl>
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	6a3b      	ldr	r3, [r7, #32]
 800c7b0:	68db      	ldr	r3, [r3, #12]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7f9 feb6 	bl	8006526 <lwip_htonl>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	1ae3      	subs	r3, r4, r3
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	da24      	bge.n	800c80c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	3370      	adds	r3, #112	; 0x70
 800c7c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c7c8:	e002      	b.n	800c7d0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d011      	beq.n	800c7fc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7f9 fea0 	bl	8006526 <lwip_htonl>
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7f9 fe99 	bl	8006526 <lwip_htonl>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	dbe6      	blt.n	800c7ca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c804:	69fb      	ldr	r3, [r7, #28]
 800c806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c808:	601a      	str	r2, [r3, #0]
 800c80a:	e009      	b.n	800c820 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c80c:	6a3b      	ldr	r3, [r7, #32]
 800c80e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c810:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c812:	6a3b      	ldr	r3, [r7, #32]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	623b      	str	r3, [r7, #32]
 800c818:	e002      	b.n	800c820 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c81a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c81c:	f7fc fc3f 	bl	800909e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c824:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d012      	beq.n	800c852 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	4618      	mov	r0, r3
 800c834:	f7f9 fe77 	bl	8006526 <lwip_htonl>
 800c838:	4602      	mov	r2, r0
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c83e:	1ad3      	subs	r3, r2, r3
 800c840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c842:	8912      	ldrh	r2, [r2, #8]
 800c844:	4413      	add	r3, r2
  while (seg != NULL &&
 800c846:	69ba      	ldr	r2, [r7, #24]
 800c848:	429a      	cmp	r2, r3
 800c84a:	f4bf aed9 	bcs.w	800c600 <tcp_output+0x160>
 800c84e:	e000      	b.n	800c852 <tcp_output+0x3b2>
      break;
 800c850:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c856:	2b00      	cmp	r3, #0
 800c858:	d108      	bne.n	800c86c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c862:	e004      	b.n	800c86e <tcp_output+0x3ce>
    goto output_done;
 800c864:	bf00      	nop
 800c866:	e002      	b.n	800c86e <tcp_output+0x3ce>
    goto output_done;
 800c868:	bf00      	nop
 800c86a:	e000      	b.n	800c86e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c86c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	8b5b      	ldrh	r3, [r3, #26]
 800c872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c876:	b29a      	uxth	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3728      	adds	r7, #40	; 0x28
 800c882:	46bd      	mov	sp, r7
 800c884:	bdb0      	pop	{r4, r5, r7, pc}
 800c886:	bf00      	nop

0800c888 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d106      	bne.n	800c8a4 <tcp_output_segment_busy+0x1c>
 800c896:	4b09      	ldr	r3, [pc, #36]	; (800c8bc <tcp_output_segment_busy+0x34>)
 800c898:	f240 529a 	movw	r2, #1434	; 0x59a
 800c89c:	4908      	ldr	r1, [pc, #32]	; (800c8c0 <tcp_output_segment_busy+0x38>)
 800c89e:	4809      	ldr	r0, [pc, #36]	; (800c8c4 <tcp_output_segment_busy+0x3c>)
 800c8a0:	f004 f8a4 	bl	80109ec <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	7b9b      	ldrb	r3, [r3, #14]
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d001      	beq.n	800c8b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e000      	b.n	800c8b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	08014478 	.word	0x08014478
 800c8c0:	08014a14 	.word	0x08014a14
 800c8c4:	080144cc 	.word	0x080144cc

0800c8c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c8c8:	b5b0      	push	{r4, r5, r7, lr}
 800c8ca:	b08c      	sub	sp, #48	; 0x30
 800c8cc:	af04      	add	r7, sp, #16
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d106      	bne.n	800c8e8 <tcp_output_segment+0x20>
 800c8da:	4b64      	ldr	r3, [pc, #400]	; (800ca6c <tcp_output_segment+0x1a4>)
 800c8dc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c8e0:	4963      	ldr	r1, [pc, #396]	; (800ca70 <tcp_output_segment+0x1a8>)
 800c8e2:	4864      	ldr	r0, [pc, #400]	; (800ca74 <tcp_output_segment+0x1ac>)
 800c8e4:	f004 f882 	bl	80109ec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d106      	bne.n	800c8fc <tcp_output_segment+0x34>
 800c8ee:	4b5f      	ldr	r3, [pc, #380]	; (800ca6c <tcp_output_segment+0x1a4>)
 800c8f0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c8f4:	4960      	ldr	r1, [pc, #384]	; (800ca78 <tcp_output_segment+0x1b0>)
 800c8f6:	485f      	ldr	r0, [pc, #380]	; (800ca74 <tcp_output_segment+0x1ac>)
 800c8f8:	f004 f878 	bl	80109ec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d106      	bne.n	800c910 <tcp_output_segment+0x48>
 800c902:	4b5a      	ldr	r3, [pc, #360]	; (800ca6c <tcp_output_segment+0x1a4>)
 800c904:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c908:	495c      	ldr	r1, [pc, #368]	; (800ca7c <tcp_output_segment+0x1b4>)
 800c90a:	485a      	ldr	r0, [pc, #360]	; (800ca74 <tcp_output_segment+0x1ac>)
 800c90c:	f004 f86e 	bl	80109ec <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c910:	68f8      	ldr	r0, [r7, #12]
 800c912:	f7ff ffb9 	bl	800c888 <tcp_output_segment_busy>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d001      	beq.n	800c920 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c91c:	2300      	movs	r3, #0
 800c91e:	e0a1      	b.n	800ca64 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	68dc      	ldr	r4, [r3, #12]
 800c928:	4610      	mov	r0, r2
 800c92a:	f7f9 fdfc 	bl	8006526 <lwip_htonl>
 800c92e:	4603      	mov	r3, r0
 800c930:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	68dc      	ldr	r4, [r3, #12]
 800c93a:	4610      	mov	r0, r2
 800c93c:	f7f9 fdde 	bl	80064fc <lwip_htons>
 800c940:	4603      	mov	r3, r0
 800c942:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c94c:	441a      	add	r2, r3
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	3314      	adds	r3, #20
 800c958:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	7a9b      	ldrb	r3, [r3, #10]
 800c95e:	f003 0301 	and.w	r3, r3, #1
 800c962:	2b00      	cmp	r3, #0
 800c964:	d015      	beq.n	800c992 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	3304      	adds	r3, #4
 800c96a:	461a      	mov	r2, r3
 800c96c:	6879      	ldr	r1, [r7, #4]
 800c96e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c972:	f7fc fe8b 	bl	800968c <tcp_eff_send_mss_netif>
 800c976:	4603      	mov	r3, r0
 800c978:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c97a:	8b7b      	ldrh	r3, [r7, #26]
 800c97c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c980:	4618      	mov	r0, r3
 800c982:	f7f9 fdd0 	bl	8006526 <lwip_htonl>
 800c986:	4602      	mov	r2, r0
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	3304      	adds	r3, #4
 800c990:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c998:	2b00      	cmp	r3, #0
 800c99a:	da02      	bge.n	800c9a2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d10c      	bne.n	800c9c4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c9aa:	4b35      	ldr	r3, [pc, #212]	; (800ca80 <tcp_output_segment+0x1b8>)
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7f9 fdb4 	bl	8006526 <lwip_htonl>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	68da      	ldr	r2, [r3, #12]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	1ad3      	subs	r3, r2, r3
 800c9d0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	8959      	ldrh	r1, [r3, #10]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	8b3a      	ldrh	r2, [r7, #24]
 800c9de:	1a8a      	subs	r2, r1, r2
 800c9e0:	b292      	uxth	r2, r2
 800c9e2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	8919      	ldrh	r1, [r3, #8]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	8b3a      	ldrh	r2, [r7, #24]
 800c9f0:	1a8a      	subs	r2, r1, r2
 800c9f2:	b292      	uxth	r2, r2
 800c9f4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	68fa      	ldr	r2, [r7, #12]
 800c9fc:	68d2      	ldr	r2, [r2, #12]
 800c9fe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	2200      	movs	r2, #0
 800ca06:	741a      	strb	r2, [r3, #16]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	68da      	ldr	r2, [r3, #12]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	7a9b      	ldrb	r3, [r3, #10]
 800ca14:	f003 0301 	and.w	r3, r3, #1
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d001      	beq.n	800ca20 <tcp_output_segment+0x158>
 800ca1c:	2318      	movs	r3, #24
 800ca1e:	e000      	b.n	800ca22 <tcp_output_segment+0x15a>
 800ca20:	2314      	movs	r3, #20
 800ca22:	4413      	add	r3, r2
 800ca24:	69fa      	ldr	r2, [r7, #28]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d006      	beq.n	800ca38 <tcp_output_segment+0x170>
 800ca2a:	4b10      	ldr	r3, [pc, #64]	; (800ca6c <tcp_output_segment+0x1a4>)
 800ca2c:	f240 621c 	movw	r2, #1564	; 0x61c
 800ca30:	4914      	ldr	r1, [pc, #80]	; (800ca84 <tcp_output_segment+0x1bc>)
 800ca32:	4810      	ldr	r0, [pc, #64]	; (800ca74 <tcp_output_segment+0x1ac>)
 800ca34:	f003 ffda 	bl	80109ec <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	6858      	ldr	r0, [r3, #4]
 800ca3c:	68b9      	ldr	r1, [r7, #8]
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	1d1c      	adds	r4, r3, #4
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	7add      	ldrb	r5, [r3, #11]
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	7a9b      	ldrb	r3, [r3, #10]
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	9202      	str	r2, [sp, #8]
 800ca4e:	2206      	movs	r2, #6
 800ca50:	9201      	str	r2, [sp, #4]
 800ca52:	9300      	str	r3, [sp, #0]
 800ca54:	462b      	mov	r3, r5
 800ca56:	4622      	mov	r2, r4
 800ca58:	f002 fa34 	bl	800eec4 <ip4_output_if>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ca60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3720      	adds	r7, #32
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bdb0      	pop	{r4, r5, r7, pc}
 800ca6c:	08014478 	.word	0x08014478
 800ca70:	08014a3c 	.word	0x08014a3c
 800ca74:	080144cc 	.word	0x080144cc
 800ca78:	08014a5c 	.word	0x08014a5c
 800ca7c:	08014a7c 	.word	0x08014a7c
 800ca80:	2000ade4 	.word	0x2000ade4
 800ca84:	08014aa0 	.word	0x08014aa0

0800ca88 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ca88:	b5b0      	push	{r4, r5, r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d106      	bne.n	800caa4 <tcp_rexmit_rto_prepare+0x1c>
 800ca96:	4b31      	ldr	r3, [pc, #196]	; (800cb5c <tcp_rexmit_rto_prepare+0xd4>)
 800ca98:	f240 6263 	movw	r2, #1635	; 0x663
 800ca9c:	4930      	ldr	r1, [pc, #192]	; (800cb60 <tcp_rexmit_rto_prepare+0xd8>)
 800ca9e:	4831      	ldr	r0, [pc, #196]	; (800cb64 <tcp_rexmit_rto_prepare+0xdc>)
 800caa0:	f003 ffa4 	bl	80109ec <iprintf>

  if (pcb->unacked == NULL) {
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d102      	bne.n	800cab2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800caac:	f06f 0305 	mvn.w	r3, #5
 800cab0:	e050      	b.n	800cb54 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab6:	60fb      	str	r3, [r7, #12]
 800cab8:	e00b      	b.n	800cad2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f7ff fee4 	bl	800c888 <tcp_output_segment_busy>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d002      	beq.n	800cacc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cac6:	f06f 0305 	mvn.w	r3, #5
 800caca:	e043      	b.n	800cb54 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	60fb      	str	r3, [r7, #12]
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d1ef      	bne.n	800caba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	f7ff fed4 	bl	800c888 <tcp_output_segment_busy>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d002      	beq.n	800caec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cae6:	f06f 0305 	mvn.w	r3, #5
 800caea:	e033      	b.n	800cb54 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2200      	movs	r2, #0
 800cb00:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	8b5b      	ldrh	r3, [r3, #26]
 800cb06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cb0a:	b29a      	uxth	r2, r3
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7f9 fd05 	bl	8006526 <lwip_htonl>
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	891b      	ldrh	r3, [r3, #8]
 800cb22:	461d      	mov	r5, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	899b      	ldrh	r3, [r3, #12]
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7f9 fce5 	bl	80064fc <lwip_htons>
 800cb32:	4603      	mov	r3, r0
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	f003 0303 	and.w	r3, r3, #3
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d001      	beq.n	800cb42 <tcp_rexmit_rto_prepare+0xba>
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e000      	b.n	800cb44 <tcp_rexmit_rto_prepare+0xbc>
 800cb42:	2300      	movs	r3, #0
 800cb44:	442b      	add	r3, r5
 800cb46:	18e2      	adds	r2, r4, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800cb52:	2300      	movs	r3, #0
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3710      	adds	r7, #16
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bdb0      	pop	{r4, r5, r7, pc}
 800cb5c:	08014478 	.word	0x08014478
 800cb60:	08014ab4 	.word	0x08014ab4
 800cb64:	080144cc 	.word	0x080144cc

0800cb68 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d106      	bne.n	800cb84 <tcp_rexmit_rto_commit+0x1c>
 800cb76:	4b0d      	ldr	r3, [pc, #52]	; (800cbac <tcp_rexmit_rto_commit+0x44>)
 800cb78:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cb7c:	490c      	ldr	r1, [pc, #48]	; (800cbb0 <tcp_rexmit_rto_commit+0x48>)
 800cb7e:	480d      	ldr	r0, [pc, #52]	; (800cbb4 <tcp_rexmit_rto_commit+0x4c>)
 800cb80:	f003 ff34 	bl	80109ec <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb8a:	2bff      	cmp	r3, #255	; 0xff
 800cb8c:	d007      	beq.n	800cb9e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb94:	3301      	adds	r3, #1
 800cb96:	b2da      	uxtb	r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f7ff fc7e 	bl	800c4a0 <tcp_output>
}
 800cba4:	bf00      	nop
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	08014478 	.word	0x08014478
 800cbb0:	08014ad8 	.word	0x08014ad8
 800cbb4:	080144cc 	.word	0x080144cc

0800cbb8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d106      	bne.n	800cbd4 <tcp_rexmit_rto+0x1c>
 800cbc6:	4b0a      	ldr	r3, [pc, #40]	; (800cbf0 <tcp_rexmit_rto+0x38>)
 800cbc8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800cbcc:	4909      	ldr	r1, [pc, #36]	; (800cbf4 <tcp_rexmit_rto+0x3c>)
 800cbce:	480a      	ldr	r0, [pc, #40]	; (800cbf8 <tcp_rexmit_rto+0x40>)
 800cbd0:	f003 ff0c 	bl	80109ec <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f7ff ff57 	bl	800ca88 <tcp_rexmit_rto_prepare>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d102      	bne.n	800cbe6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7ff ffc1 	bl	800cb68 <tcp_rexmit_rto_commit>
  }
}
 800cbe6:	bf00      	nop
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	08014478 	.word	0x08014478
 800cbf4:	08014afc 	.word	0x08014afc
 800cbf8:	080144cc 	.word	0x080144cc

0800cbfc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cbfc:	b590      	push	{r4, r7, lr}
 800cbfe:	b085      	sub	sp, #20
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d106      	bne.n	800cc18 <tcp_rexmit+0x1c>
 800cc0a:	4b2f      	ldr	r3, [pc, #188]	; (800ccc8 <tcp_rexmit+0xcc>)
 800cc0c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800cc10:	492e      	ldr	r1, [pc, #184]	; (800cccc <tcp_rexmit+0xd0>)
 800cc12:	482f      	ldr	r0, [pc, #188]	; (800ccd0 <tcp_rexmit+0xd4>)
 800cc14:	f003 feea 	bl	80109ec <iprintf>

  if (pcb->unacked == NULL) {
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d102      	bne.n	800cc26 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800cc20:	f06f 0305 	mvn.w	r3, #5
 800cc24:	e04c      	b.n	800ccc0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc2a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cc2c:	68b8      	ldr	r0, [r7, #8]
 800cc2e:	f7ff fe2b 	bl	800c888 <tcp_output_segment_busy>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d002      	beq.n	800cc3e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cc38:	f06f 0305 	mvn.w	r3, #5
 800cc3c:	e040      	b.n	800ccc0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	336c      	adds	r3, #108	; 0x6c
 800cc4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cc4c:	e002      	b.n	800cc54 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d011      	beq.n	800cc80 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7f9 fc5e 	bl	8006526 <lwip_htonl>
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7f9 fc57 	bl	8006526 <lwip_htonl>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	dbe6      	blt.n	800cc4e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	68ba      	ldr	r2, [r7, #8]
 800cc8c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d103      	bne.n	800cc9e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cca4:	2bff      	cmp	r3, #255	; 0xff
 800cca6:	d007      	beq.n	800ccb8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ccae:	3301      	adds	r3, #1
 800ccb0:	b2da      	uxtb	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3714      	adds	r7, #20
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd90      	pop	{r4, r7, pc}
 800ccc8:	08014478 	.word	0x08014478
 800cccc:	08014b18 	.word	0x08014b18
 800ccd0:	080144cc 	.word	0x080144cc

0800ccd4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d106      	bne.n	800ccf0 <tcp_rexmit_fast+0x1c>
 800cce2:	4b2a      	ldr	r3, [pc, #168]	; (800cd8c <tcp_rexmit_fast+0xb8>)
 800cce4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800cce8:	4929      	ldr	r1, [pc, #164]	; (800cd90 <tcp_rexmit_fast+0xbc>)
 800ccea:	482a      	ldr	r0, [pc, #168]	; (800cd94 <tcp_rexmit_fast+0xc0>)
 800ccec:	f003 fe7e 	bl	80109ec <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d044      	beq.n	800cd82 <tcp_rexmit_fast+0xae>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	8b5b      	ldrh	r3, [r3, #26]
 800ccfc:	f003 0304 	and.w	r3, r3, #4
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d13e      	bne.n	800cd82 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7ff ff79 	bl	800cbfc <tcp_rexmit>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d138      	bne.n	800cd82 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	bf28      	it	cs
 800cd20:	4613      	movcs	r3, r2
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	0fda      	lsrs	r2, r3, #31
 800cd26:	4413      	add	r3, r2
 800cd28:	105b      	asrs	r3, r3, #1
 800cd2a:	b29a      	uxth	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cd38:	461a      	mov	r2, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd3e:	005b      	lsls	r3, r3, #1
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d206      	bcs.n	800cd52 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd48:	005b      	lsls	r3, r3, #1
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	0049      	lsls	r1, r1, #1
 800cd60:	440b      	add	r3, r1
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	4413      	add	r3, r2
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	8b5b      	ldrh	r3, [r3, #26]
 800cd72:	f043 0304 	orr.w	r3, r3, #4
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800cd82:	bf00      	nop
 800cd84:	3708      	adds	r7, #8
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	08014478 	.word	0x08014478
 800cd90:	08014b30 	.word	0x08014b30
 800cd94:	080144cc 	.word	0x080144cc

0800cd98 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b086      	sub	sp, #24
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	607b      	str	r3, [r7, #4]
 800cda2:	460b      	mov	r3, r1
 800cda4:	817b      	strh	r3, [r7, #10]
 800cda6:	4613      	mov	r3, r2
 800cda8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cdaa:	897a      	ldrh	r2, [r7, #10]
 800cdac:	893b      	ldrh	r3, [r7, #8]
 800cdae:	4413      	add	r3, r2
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	3314      	adds	r3, #20
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cdba:	4619      	mov	r1, r3
 800cdbc:	2022      	movs	r0, #34	; 0x22
 800cdbe:	f7fa fc17 	bl	80075f0 <pbuf_alloc>
 800cdc2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d04d      	beq.n	800ce66 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cdca:	897b      	ldrh	r3, [r7, #10]
 800cdcc:	3313      	adds	r3, #19
 800cdce:	697a      	ldr	r2, [r7, #20]
 800cdd0:	8952      	ldrh	r2, [r2, #10]
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	db06      	blt.n	800cde4 <tcp_output_alloc_header_common+0x4c>
 800cdd6:	4b26      	ldr	r3, [pc, #152]	; (800ce70 <tcp_output_alloc_header_common+0xd8>)
 800cdd8:	f240 7223 	movw	r2, #1827	; 0x723
 800cddc:	4925      	ldr	r1, [pc, #148]	; (800ce74 <tcp_output_alloc_header_common+0xdc>)
 800cdde:	4826      	ldr	r0, [pc, #152]	; (800ce78 <tcp_output_alloc_header_common+0xe0>)
 800cde0:	f003 fe04 	bl	80109ec <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800cdea:	8c3b      	ldrh	r3, [r7, #32]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7f9 fb85 	bl	80064fc <lwip_htons>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cdfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7f9 fb7d 	bl	80064fc <lwip_htons>
 800ce02:	4603      	mov	r3, r0
 800ce04:	461a      	mov	r2, r3
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f7f9 fb88 	bl	8006526 <lwip_htonl>
 800ce16:	4602      	mov	r2, r0
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ce1c:	897b      	ldrh	r3, [r7, #10]
 800ce1e:	089b      	lsrs	r3, r3, #2
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	3305      	adds	r3, #5
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	031b      	lsls	r3, r3, #12
 800ce28:	b29a      	uxth	r2, r3
 800ce2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	4313      	orrs	r3, r2
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	4618      	mov	r0, r3
 800ce36:	f7f9 fb61 	bl	80064fc <lwip_htons>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ce42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7f9 fb59 	bl	80064fc <lwip_htons>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	2200      	movs	r2, #0
 800ce56:	741a      	strb	r2, [r3, #16]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	749a      	strb	r2, [r3, #18]
 800ce62:	2200      	movs	r2, #0
 800ce64:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ce66:	697b      	ldr	r3, [r7, #20]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3718      	adds	r7, #24
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	08014478 	.word	0x08014478
 800ce74:	08014b50 	.word	0x08014b50
 800ce78:	080144cc 	.word	0x080144cc

0800ce7c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ce7c:	b5b0      	push	{r4, r5, r7, lr}
 800ce7e:	b08a      	sub	sp, #40	; 0x28
 800ce80:	af04      	add	r7, sp, #16
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	607b      	str	r3, [r7, #4]
 800ce86:	460b      	mov	r3, r1
 800ce88:	817b      	strh	r3, [r7, #10]
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d106      	bne.n	800cea2 <tcp_output_alloc_header+0x26>
 800ce94:	4b15      	ldr	r3, [pc, #84]	; (800ceec <tcp_output_alloc_header+0x70>)
 800ce96:	f240 7242 	movw	r2, #1858	; 0x742
 800ce9a:	4915      	ldr	r1, [pc, #84]	; (800cef0 <tcp_output_alloc_header+0x74>)
 800ce9c:	4815      	ldr	r0, [pc, #84]	; (800cef4 <tcp_output_alloc_header+0x78>)
 800ce9e:	f003 fda5 	bl	80109ec <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	8adb      	ldrh	r3, [r3, #22]
 800ceaa:	68fa      	ldr	r2, [r7, #12]
 800ceac:	8b12      	ldrh	r2, [r2, #24]
 800ceae:	68f9      	ldr	r1, [r7, #12]
 800ceb0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800ceb2:	893d      	ldrh	r5, [r7, #8]
 800ceb4:	897c      	ldrh	r4, [r7, #10]
 800ceb6:	9103      	str	r1, [sp, #12]
 800ceb8:	2110      	movs	r1, #16
 800ceba:	9102      	str	r1, [sp, #8]
 800cebc:	9201      	str	r2, [sp, #4]
 800cebe:	9300      	str	r3, [sp, #0]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	462a      	mov	r2, r5
 800cec4:	4621      	mov	r1, r4
 800cec6:	f7ff ff67 	bl	800cd98 <tcp_output_alloc_header_common>
 800ceca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d006      	beq.n	800cee0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ceda:	441a      	add	r2, r3
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800cee0:	697b      	ldr	r3, [r7, #20]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3718      	adds	r7, #24
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bdb0      	pop	{r4, r5, r7, pc}
 800ceea:	bf00      	nop
 800ceec:	08014478 	.word	0x08014478
 800cef0:	08014b80 	.word	0x08014b80
 800cef4:	080144cc 	.word	0x080144cc

0800cef8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b088      	sub	sp, #32
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	4611      	mov	r1, r2
 800cf04:	461a      	mov	r2, r3
 800cf06:	460b      	mov	r3, r1
 800cf08:	71fb      	strb	r3, [r7, #7]
 800cf0a:	4613      	mov	r3, r2
 800cf0c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d106      	bne.n	800cf26 <tcp_output_fill_options+0x2e>
 800cf18:	4b12      	ldr	r3, [pc, #72]	; (800cf64 <tcp_output_fill_options+0x6c>)
 800cf1a:	f240 7256 	movw	r2, #1878	; 0x756
 800cf1e:	4912      	ldr	r1, [pc, #72]	; (800cf68 <tcp_output_fill_options+0x70>)
 800cf20:	4812      	ldr	r0, [pc, #72]	; (800cf6c <tcp_output_fill_options+0x74>)
 800cf22:	f003 fd63 	bl	80109ec <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	3314      	adds	r3, #20
 800cf30:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800cf32:	8bfb      	ldrh	r3, [r7, #30]
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	461a      	mov	r2, r3
 800cf38:	79fb      	ldrb	r3, [r7, #7]
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	f003 0304 	and.w	r3, r3, #4
 800cf40:	4413      	add	r3, r2
 800cf42:	3314      	adds	r3, #20
 800cf44:	69ba      	ldr	r2, [r7, #24]
 800cf46:	4413      	add	r3, r2
 800cf48:	697a      	ldr	r2, [r7, #20]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d006      	beq.n	800cf5c <tcp_output_fill_options+0x64>
 800cf4e:	4b05      	ldr	r3, [pc, #20]	; (800cf64 <tcp_output_fill_options+0x6c>)
 800cf50:	f240 7275 	movw	r2, #1909	; 0x775
 800cf54:	4906      	ldr	r1, [pc, #24]	; (800cf70 <tcp_output_fill_options+0x78>)
 800cf56:	4805      	ldr	r0, [pc, #20]	; (800cf6c <tcp_output_fill_options+0x74>)
 800cf58:	f003 fd48 	bl	80109ec <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800cf5c:	bf00      	nop
 800cf5e:	3720      	adds	r7, #32
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	08014478 	.word	0x08014478
 800cf68:	08014ba8 	.word	0x08014ba8
 800cf6c:	080144cc 	.word	0x080144cc
 800cf70:	08014aa0 	.word	0x08014aa0

0800cf74 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b08a      	sub	sp, #40	; 0x28
 800cf78:	af04      	add	r7, sp, #16
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	607a      	str	r2, [r7, #4]
 800cf80:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d106      	bne.n	800cf96 <tcp_output_control_segment+0x22>
 800cf88:	4b1c      	ldr	r3, [pc, #112]	; (800cffc <tcp_output_control_segment+0x88>)
 800cf8a:	f240 7287 	movw	r2, #1927	; 0x787
 800cf8e:	491c      	ldr	r1, [pc, #112]	; (800d000 <tcp_output_control_segment+0x8c>)
 800cf90:	481c      	ldr	r0, [pc, #112]	; (800d004 <tcp_output_control_segment+0x90>)
 800cf92:	f003 fd2b 	bl	80109ec <iprintf>

  netif = tcp_route(pcb, src, dst);
 800cf96:	683a      	ldr	r2, [r7, #0]
 800cf98:	6879      	ldr	r1, [r7, #4]
 800cf9a:	68f8      	ldr	r0, [r7, #12]
 800cf9c:	f7fe ff40 	bl	800be20 <tcp_route>
 800cfa0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d102      	bne.n	800cfae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800cfa8:	23fc      	movs	r3, #252	; 0xfc
 800cfaa:	75fb      	strb	r3, [r7, #23]
 800cfac:	e01c      	b.n	800cfe8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d006      	beq.n	800cfc2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	7adb      	ldrb	r3, [r3, #11]
 800cfb8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	7a9b      	ldrb	r3, [r3, #10]
 800cfbe:	757b      	strb	r3, [r7, #21]
 800cfc0:	e003      	b.n	800cfca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800cfc2:	23ff      	movs	r3, #255	; 0xff
 800cfc4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800cfca:	7dba      	ldrb	r2, [r7, #22]
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	9302      	str	r3, [sp, #8]
 800cfd0:	2306      	movs	r3, #6
 800cfd2:	9301      	str	r3, [sp, #4]
 800cfd4:	7d7b      	ldrb	r3, [r7, #21]
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	4613      	mov	r3, r2
 800cfda:	683a      	ldr	r2, [r7, #0]
 800cfdc:	6879      	ldr	r1, [r7, #4]
 800cfde:	68b8      	ldr	r0, [r7, #8]
 800cfe0:	f001 ff70 	bl	800eec4 <ip4_output_if>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800cfe8:	68b8      	ldr	r0, [r7, #8]
 800cfea:	f7fa fde5 	bl	8007bb8 <pbuf_free>
  return err;
 800cfee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3718      	adds	r7, #24
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	08014478 	.word	0x08014478
 800d000:	08014bd0 	.word	0x08014bd0
 800d004:	080144cc 	.word	0x080144cc

0800d008 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d008:	b590      	push	{r4, r7, lr}
 800d00a:	b08b      	sub	sp, #44	; 0x2c
 800d00c:	af04      	add	r7, sp, #16
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	607a      	str	r2, [r7, #4]
 800d014:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d106      	bne.n	800d02a <tcp_rst+0x22>
 800d01c:	4b1f      	ldr	r3, [pc, #124]	; (800d09c <tcp_rst+0x94>)
 800d01e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d022:	491f      	ldr	r1, [pc, #124]	; (800d0a0 <tcp_rst+0x98>)
 800d024:	481f      	ldr	r0, [pc, #124]	; (800d0a4 <tcp_rst+0x9c>)
 800d026:	f003 fce1 	bl	80109ec <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d106      	bne.n	800d03e <tcp_rst+0x36>
 800d030:	4b1a      	ldr	r3, [pc, #104]	; (800d09c <tcp_rst+0x94>)
 800d032:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d036:	491c      	ldr	r1, [pc, #112]	; (800d0a8 <tcp_rst+0xa0>)
 800d038:	481a      	ldr	r0, [pc, #104]	; (800d0a4 <tcp_rst+0x9c>)
 800d03a:	f003 fcd7 	bl	80109ec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d03e:	2300      	movs	r3, #0
 800d040:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d042:	f246 0308 	movw	r3, #24584	; 0x6008
 800d046:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d048:	7dfb      	ldrb	r3, [r7, #23]
 800d04a:	b29c      	uxth	r4, r3
 800d04c:	68b8      	ldr	r0, [r7, #8]
 800d04e:	f7f9 fa6a 	bl	8006526 <lwip_htonl>
 800d052:	4602      	mov	r2, r0
 800d054:	8abb      	ldrh	r3, [r7, #20]
 800d056:	9303      	str	r3, [sp, #12]
 800d058:	2314      	movs	r3, #20
 800d05a:	9302      	str	r3, [sp, #8]
 800d05c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d05e:	9301      	str	r3, [sp, #4]
 800d060:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d062:	9300      	str	r3, [sp, #0]
 800d064:	4613      	mov	r3, r2
 800d066:	2200      	movs	r2, #0
 800d068:	4621      	mov	r1, r4
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7ff fe94 	bl	800cd98 <tcp_output_alloc_header_common>
 800d070:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d00c      	beq.n	800d092 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d078:	7dfb      	ldrb	r3, [r7, #23]
 800d07a:	2200      	movs	r2, #0
 800d07c:	6939      	ldr	r1, [r7, #16]
 800d07e:	68f8      	ldr	r0, [r7, #12]
 800d080:	f7ff ff3a 	bl	800cef8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d086:	683a      	ldr	r2, [r7, #0]
 800d088:	6939      	ldr	r1, [r7, #16]
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f7ff ff72 	bl	800cf74 <tcp_output_control_segment>
 800d090:	e000      	b.n	800d094 <tcp_rst+0x8c>
    return;
 800d092:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d094:	371c      	adds	r7, #28
 800d096:	46bd      	mov	sp, r7
 800d098:	bd90      	pop	{r4, r7, pc}
 800d09a:	bf00      	nop
 800d09c:	08014478 	.word	0x08014478
 800d0a0:	08014bfc 	.word	0x08014bfc
 800d0a4:	080144cc 	.word	0x080144cc
 800d0a8:	08014c18 	.word	0x08014c18

0800d0ac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d0ac:	b590      	push	{r4, r7, lr}
 800d0ae:	b087      	sub	sp, #28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d106      	bne.n	800d0d0 <tcp_send_empty_ack+0x24>
 800d0c2:	4b28      	ldr	r3, [pc, #160]	; (800d164 <tcp_send_empty_ack+0xb8>)
 800d0c4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d0c8:	4927      	ldr	r1, [pc, #156]	; (800d168 <tcp_send_empty_ack+0xbc>)
 800d0ca:	4828      	ldr	r0, [pc, #160]	; (800d16c <tcp_send_empty_ack+0xc0>)
 800d0cc:	f003 fc8e 	bl	80109ec <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d0d0:	7dfb      	ldrb	r3, [r7, #23]
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	f003 0304 	and.w	r3, r3, #4
 800d0da:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d0dc:	7d7b      	ldrb	r3, [r7, #21]
 800d0de:	b29c      	uxth	r4, r3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7f9 fa1e 	bl	8006526 <lwip_htonl>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	4621      	mov	r1, r4
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f7ff fec3 	bl	800ce7c <tcp_output_alloc_header>
 800d0f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d109      	bne.n	800d112 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	8b5b      	ldrh	r3, [r3, #26]
 800d102:	f043 0303 	orr.w	r3, r3, #3
 800d106:	b29a      	uxth	r2, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d10c:	f06f 0301 	mvn.w	r3, #1
 800d110:	e023      	b.n	800d15a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d112:	7dbb      	ldrb	r3, [r7, #22]
 800d114:	7dfa      	ldrb	r2, [r7, #23]
 800d116:	6939      	ldr	r1, [r7, #16]
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f7ff feed 	bl	800cef8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	3304      	adds	r3, #4
 800d124:	6939      	ldr	r1, [r7, #16]
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7ff ff24 	bl	800cf74 <tcp_output_control_segment>
 800d12c:	4603      	mov	r3, r0
 800d12e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d007      	beq.n	800d148 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	8b5b      	ldrh	r3, [r3, #26]
 800d13c:	f043 0303 	orr.w	r3, r3, #3
 800d140:	b29a      	uxth	r2, r3
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	835a      	strh	r2, [r3, #26]
 800d146:	e006      	b.n	800d156 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	8b5b      	ldrh	r3, [r3, #26]
 800d14c:	f023 0303 	bic.w	r3, r3, #3
 800d150:	b29a      	uxth	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d156:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	371c      	adds	r7, #28
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd90      	pop	{r4, r7, pc}
 800d162:	bf00      	nop
 800d164:	08014478 	.word	0x08014478
 800d168:	08014c34 	.word	0x08014c34
 800d16c:	080144cc 	.word	0x080144cc

0800d170 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d170:	b590      	push	{r4, r7, lr}
 800d172:	b087      	sub	sp, #28
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d178:	2300      	movs	r3, #0
 800d17a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d106      	bne.n	800d190 <tcp_keepalive+0x20>
 800d182:	4b18      	ldr	r3, [pc, #96]	; (800d1e4 <tcp_keepalive+0x74>)
 800d184:	f640 0224 	movw	r2, #2084	; 0x824
 800d188:	4917      	ldr	r1, [pc, #92]	; (800d1e8 <tcp_keepalive+0x78>)
 800d18a:	4818      	ldr	r0, [pc, #96]	; (800d1ec <tcp_keepalive+0x7c>)
 800d18c:	f003 fc2e 	bl	80109ec <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d190:	7dfb      	ldrb	r3, [r7, #23]
 800d192:	b29c      	uxth	r4, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d198:	3b01      	subs	r3, #1
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7f9 f9c3 	bl	8006526 <lwip_htonl>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	4621      	mov	r1, r4
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f7ff fe68 	bl	800ce7c <tcp_output_alloc_header>
 800d1ac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d102      	bne.n	800d1ba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d1b8:	e010      	b.n	800d1dc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d1ba:	7dfb      	ldrb	r3, [r7, #23]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	6939      	ldr	r1, [r7, #16]
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f7ff fe99 	bl	800cef8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	3304      	adds	r3, #4
 800d1cc:	6939      	ldr	r1, [r7, #16]
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f7ff fed0 	bl	800cf74 <tcp_output_control_segment>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d1d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	371c      	adds	r7, #28
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd90      	pop	{r4, r7, pc}
 800d1e4:	08014478 	.word	0x08014478
 800d1e8:	08014c54 	.word	0x08014c54
 800d1ec:	080144cc 	.word	0x080144cc

0800d1f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d1f0:	b590      	push	{r4, r7, lr}
 800d1f2:	b08b      	sub	sp, #44	; 0x2c
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d106      	bne.n	800d212 <tcp_zero_window_probe+0x22>
 800d204:	4b4c      	ldr	r3, [pc, #304]	; (800d338 <tcp_zero_window_probe+0x148>)
 800d206:	f640 024f 	movw	r2, #2127	; 0x84f
 800d20a:	494c      	ldr	r1, [pc, #304]	; (800d33c <tcp_zero_window_probe+0x14c>)
 800d20c:	484c      	ldr	r0, [pc, #304]	; (800d340 <tcp_zero_window_probe+0x150>)
 800d20e:	f003 fbed 	bl	80109ec <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d216:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d218:	6a3b      	ldr	r3, [r7, #32]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d101      	bne.n	800d222 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d21e:	2300      	movs	r3, #0
 800d220:	e086      	b.n	800d330 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d228:	2bff      	cmp	r3, #255	; 0xff
 800d22a:	d007      	beq.n	800d23c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d232:	3301      	adds	r3, #1
 800d234:	b2da      	uxtb	r2, r3
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d23c:	6a3b      	ldr	r3, [r7, #32]
 800d23e:	68db      	ldr	r3, [r3, #12]
 800d240:	899b      	ldrh	r3, [r3, #12]
 800d242:	b29b      	uxth	r3, r3
 800d244:	4618      	mov	r0, r3
 800d246:	f7f9 f959 	bl	80064fc <lwip_htons>
 800d24a:	4603      	mov	r3, r0
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	f003 0301 	and.w	r3, r3, #1
 800d252:	2b00      	cmp	r3, #0
 800d254:	d005      	beq.n	800d262 <tcp_zero_window_probe+0x72>
 800d256:	6a3b      	ldr	r3, [r7, #32]
 800d258:	891b      	ldrh	r3, [r3, #8]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d101      	bne.n	800d262 <tcp_zero_window_probe+0x72>
 800d25e:	2301      	movs	r3, #1
 800d260:	e000      	b.n	800d264 <tcp_zero_window_probe+0x74>
 800d262:	2300      	movs	r3, #0
 800d264:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d266:	7ffb      	ldrb	r3, [r7, #31]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	bf0c      	ite	eq
 800d26c:	2301      	moveq	r3, #1
 800d26e:	2300      	movne	r3, #0
 800d270:	b2db      	uxtb	r3, r3
 800d272:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d278:	b299      	uxth	r1, r3
 800d27a:	6a3b      	ldr	r3, [r7, #32]
 800d27c:	68db      	ldr	r3, [r3, #12]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	8bba      	ldrh	r2, [r7, #28]
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f7ff fdfa 	bl	800ce7c <tcp_output_alloc_header>
 800d288:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d102      	bne.n	800d296 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d290:	f04f 33ff 	mov.w	r3, #4294967295
 800d294:	e04c      	b.n	800d330 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d29c:	7ffb      	ldrb	r3, [r7, #31]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d011      	beq.n	800d2c6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	899b      	ldrh	r3, [r3, #12]
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	b21b      	sxth	r3, r3
 800d2aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d2ae:	b21c      	sxth	r4, r3
 800d2b0:	2011      	movs	r0, #17
 800d2b2:	f7f9 f923 	bl	80064fc <lwip_htons>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	b21b      	sxth	r3, r3
 800d2ba:	4323      	orrs	r3, r4
 800d2bc:	b21b      	sxth	r3, r3
 800d2be:	b29a      	uxth	r2, r3
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	819a      	strh	r2, [r3, #12]
 800d2c4:	e010      	b.n	800d2e8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	3314      	adds	r3, #20
 800d2cc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d2ce:	6a3b      	ldr	r3, [r7, #32]
 800d2d0:	6858      	ldr	r0, [r3, #4]
 800d2d2:	6a3b      	ldr	r3, [r7, #32]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	891a      	ldrh	r2, [r3, #8]
 800d2d8:	6a3b      	ldr	r3, [r7, #32]
 800d2da:	891b      	ldrh	r3, [r3, #8]
 800d2dc:	1ad3      	subs	r3, r2, r3
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	6939      	ldr	r1, [r7, #16]
 800d2e4:	f7fa fe52 	bl	8007f8c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d2e8:	6a3b      	ldr	r3, [r7, #32]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7f9 f919 	bl	8006526 <lwip_htonl>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	2b00      	cmp	r3, #0
 800d304:	da02      	bge.n	800d30c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d30c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d310:	2200      	movs	r2, #0
 800d312:	69b9      	ldr	r1, [r7, #24]
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f7ff fdef 	bl	800cef8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	3304      	adds	r3, #4
 800d320:	69b9      	ldr	r1, [r7, #24]
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f7ff fe26 	bl	800cf74 <tcp_output_control_segment>
 800d328:	4603      	mov	r3, r0
 800d32a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d32c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d330:	4618      	mov	r0, r3
 800d332:	372c      	adds	r7, #44	; 0x2c
 800d334:	46bd      	mov	sp, r7
 800d336:	bd90      	pop	{r4, r7, pc}
 800d338:	08014478 	.word	0x08014478
 800d33c:	08014c70 	.word	0x08014c70
 800d340:	080144cc 	.word	0x080144cc

0800d344 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d34c:	f7fa ff0c 	bl	8008168 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d350:	4b0a      	ldr	r3, [pc, #40]	; (800d37c <tcpip_tcp_timer+0x38>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d103      	bne.n	800d360 <tcpip_tcp_timer+0x1c>
 800d358:	4b09      	ldr	r3, [pc, #36]	; (800d380 <tcpip_tcp_timer+0x3c>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d005      	beq.n	800d36c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d360:	2200      	movs	r2, #0
 800d362:	4908      	ldr	r1, [pc, #32]	; (800d384 <tcpip_tcp_timer+0x40>)
 800d364:	20fa      	movs	r0, #250	; 0xfa
 800d366:	f000 f8f3 	bl	800d550 <sys_timeout>
 800d36a:	e003      	b.n	800d374 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d36c:	4b06      	ldr	r3, [pc, #24]	; (800d388 <tcpip_tcp_timer+0x44>)
 800d36e:	2200      	movs	r2, #0
 800d370:	601a      	str	r2, [r3, #0]
  }
}
 800d372:	bf00      	nop
 800d374:	bf00      	nop
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	2000ade0 	.word	0x2000ade0
 800d380:	2000adf0 	.word	0x2000adf0
 800d384:	0800d345 	.word	0x0800d345
 800d388:	200008a4 	.word	0x200008a4

0800d38c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d390:	4b0a      	ldr	r3, [pc, #40]	; (800d3bc <tcp_timer_needed+0x30>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d10f      	bne.n	800d3b8 <tcp_timer_needed+0x2c>
 800d398:	4b09      	ldr	r3, [pc, #36]	; (800d3c0 <tcp_timer_needed+0x34>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d103      	bne.n	800d3a8 <tcp_timer_needed+0x1c>
 800d3a0:	4b08      	ldr	r3, [pc, #32]	; (800d3c4 <tcp_timer_needed+0x38>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d007      	beq.n	800d3b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d3a8:	4b04      	ldr	r3, [pc, #16]	; (800d3bc <tcp_timer_needed+0x30>)
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	4905      	ldr	r1, [pc, #20]	; (800d3c8 <tcp_timer_needed+0x3c>)
 800d3b2:	20fa      	movs	r0, #250	; 0xfa
 800d3b4:	f000 f8cc 	bl	800d550 <sys_timeout>
  }
}
 800d3b8:	bf00      	nop
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	200008a4 	.word	0x200008a4
 800d3c0:	2000ade0 	.word	0x2000ade0
 800d3c4:	2000adf0 	.word	0x2000adf0
 800d3c8:	0800d345 	.word	0x0800d345

0800d3cc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b086      	sub	sp, #24
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	60f8      	str	r0, [r7, #12]
 800d3d4:	60b9      	str	r1, [r7, #8]
 800d3d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d3d8:	2006      	movs	r0, #6
 800d3da:	f7f9 fd07 	bl	8006dec <memp_malloc>
 800d3de:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d109      	bne.n	800d3fa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d151      	bne.n	800d490 <sys_timeout_abs+0xc4>
 800d3ec:	4b2a      	ldr	r3, [pc, #168]	; (800d498 <sys_timeout_abs+0xcc>)
 800d3ee:	22be      	movs	r2, #190	; 0xbe
 800d3f0:	492a      	ldr	r1, [pc, #168]	; (800d49c <sys_timeout_abs+0xd0>)
 800d3f2:	482b      	ldr	r0, [pc, #172]	; (800d4a0 <sys_timeout_abs+0xd4>)
 800d3f4:	f003 fafa 	bl	80109ec <iprintf>
    return;
 800d3f8:	e04a      	b.n	800d490 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	68ba      	ldr	r2, [r7, #8]
 800d404:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	68fa      	ldr	r2, [r7, #12]
 800d410:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d412:	4b24      	ldr	r3, [pc, #144]	; (800d4a4 <sys_timeout_abs+0xd8>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d103      	bne.n	800d422 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d41a:	4a22      	ldr	r2, [pc, #136]	; (800d4a4 <sys_timeout_abs+0xd8>)
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	6013      	str	r3, [r2, #0]
    return;
 800d420:	e037      	b.n	800d492 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	685a      	ldr	r2, [r3, #4]
 800d426:	4b1f      	ldr	r3, [pc, #124]	; (800d4a4 <sys_timeout_abs+0xd8>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	1ad3      	subs	r3, r2, r3
 800d42e:	0fdb      	lsrs	r3, r3, #31
 800d430:	f003 0301 	and.w	r3, r3, #1
 800d434:	b2db      	uxtb	r3, r3
 800d436:	2b00      	cmp	r3, #0
 800d438:	d007      	beq.n	800d44a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d43a:	4b1a      	ldr	r3, [pc, #104]	; (800d4a4 <sys_timeout_abs+0xd8>)
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d442:	4a18      	ldr	r2, [pc, #96]	; (800d4a4 <sys_timeout_abs+0xd8>)
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	6013      	str	r3, [r2, #0]
 800d448:	e023      	b.n	800d492 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d44a:	4b16      	ldr	r3, [pc, #88]	; (800d4a4 <sys_timeout_abs+0xd8>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	617b      	str	r3, [r7, #20]
 800d450:	e01a      	b.n	800d488 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00b      	beq.n	800d472 <sys_timeout_abs+0xa6>
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	685a      	ldr	r2, [r3, #4]
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	0fdb      	lsrs	r3, r3, #31
 800d468:	f003 0301 	and.w	r3, r3, #1
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d007      	beq.n	800d482 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	693a      	ldr	r2, [r7, #16]
 800d47e:	601a      	str	r2, [r3, #0]
        break;
 800d480:	e007      	b.n	800d492 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	617b      	str	r3, [r7, #20]
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1e1      	bne.n	800d452 <sys_timeout_abs+0x86>
 800d48e:	e000      	b.n	800d492 <sys_timeout_abs+0xc6>
    return;
 800d490:	bf00      	nop
      }
    }
  }
}
 800d492:	3718      	adds	r7, #24
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	08014c94 	.word	0x08014c94
 800d49c:	08014cc8 	.word	0x08014cc8
 800d4a0:	08014d08 	.word	0x08014d08
 800d4a4:	2000089c 	.word	0x2000089c

0800d4a8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b086      	sub	sp, #24
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	4798      	blx	r3

  now = sys_now();
 800d4ba:	f7f8 fdff 	bl	80060bc <sys_now>
 800d4be:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	4b0f      	ldr	r3, [pc, #60]	; (800d504 <lwip_cyclic_timer+0x5c>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	0fdb      	lsrs	r3, r3, #31
 800d4d4:	f003 0301 	and.w	r3, r3, #1
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d009      	beq.n	800d4f2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	4413      	add	r3, r2
 800d4e6:	687a      	ldr	r2, [r7, #4]
 800d4e8:	4907      	ldr	r1, [pc, #28]	; (800d508 <lwip_cyclic_timer+0x60>)
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7ff ff6e 	bl	800d3cc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d4f0:	e004      	b.n	800d4fc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d4f2:	687a      	ldr	r2, [r7, #4]
 800d4f4:	4904      	ldr	r1, [pc, #16]	; (800d508 <lwip_cyclic_timer+0x60>)
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	f7ff ff68 	bl	800d3cc <sys_timeout_abs>
}
 800d4fc:	bf00      	nop
 800d4fe:	3718      	adds	r7, #24
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	200008a0 	.word	0x200008a0
 800d508:	0800d4a9 	.word	0x0800d4a9

0800d50c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d512:	2301      	movs	r3, #1
 800d514:	607b      	str	r3, [r7, #4]
 800d516:	e00e      	b.n	800d536 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d518:	4a0b      	ldr	r2, [pc, #44]	; (800d548 <sys_timeouts_init+0x3c>)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	00db      	lsls	r3, r3, #3
 800d524:	4a08      	ldr	r2, [pc, #32]	; (800d548 <sys_timeouts_init+0x3c>)
 800d526:	4413      	add	r3, r2
 800d528:	461a      	mov	r2, r3
 800d52a:	4908      	ldr	r1, [pc, #32]	; (800d54c <sys_timeouts_init+0x40>)
 800d52c:	f000 f810 	bl	800d550 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	3301      	adds	r3, #1
 800d534:	607b      	str	r3, [r7, #4]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2b02      	cmp	r3, #2
 800d53a:	d9ed      	bls.n	800d518 <sys_timeouts_init+0xc>
  }
}
 800d53c:	bf00      	nop
 800d53e:	bf00      	nop
 800d540:	3708      	adds	r7, #8
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	08016080 	.word	0x08016080
 800d54c:	0800d4a9 	.word	0x0800d4a9

0800d550 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b086      	sub	sp, #24
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d562:	d306      	bcc.n	800d572 <sys_timeout+0x22>
 800d564:	4b0a      	ldr	r3, [pc, #40]	; (800d590 <sys_timeout+0x40>)
 800d566:	f240 1229 	movw	r2, #297	; 0x129
 800d56a:	490a      	ldr	r1, [pc, #40]	; (800d594 <sys_timeout+0x44>)
 800d56c:	480a      	ldr	r0, [pc, #40]	; (800d598 <sys_timeout+0x48>)
 800d56e:	f003 fa3d 	bl	80109ec <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d572:	f7f8 fda3 	bl	80060bc <sys_now>
 800d576:	4602      	mov	r2, r0
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	4413      	add	r3, r2
 800d57c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	68b9      	ldr	r1, [r7, #8]
 800d582:	6978      	ldr	r0, [r7, #20]
 800d584:	f7ff ff22 	bl	800d3cc <sys_timeout_abs>
#endif
}
 800d588:	bf00      	nop
 800d58a:	3718      	adds	r7, #24
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	08014c94 	.word	0x08014c94
 800d594:	08014d30 	.word	0x08014d30
 800d598:	08014d08 	.word	0x08014d08

0800d59c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d5a2:	f7f8 fd8b 	bl	80060bc <sys_now>
 800d5a6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d5a8:	4b1a      	ldr	r3, [pc, #104]	; (800d614 <sys_check_timeouts+0x78>)
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d001      	beq.n	800d5b6 <sys_check_timeouts+0x1a>
 800d5b2:	f7f9 ffc7 	bl	8007544 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d5b6:	4b18      	ldr	r3, [pc, #96]	; (800d618 <sys_check_timeouts+0x7c>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d022      	beq.n	800d608 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	1ad3      	subs	r3, r2, r3
 800d5ca:	0fdb      	lsrs	r3, r3, #31
 800d5cc:	f003 0301 	and.w	r3, r3, #1
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d11a      	bne.n	800d60c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a0f      	ldr	r2, [pc, #60]	; (800d618 <sys_check_timeouts+0x7c>)
 800d5dc:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	4a0b      	ldr	r2, [pc, #44]	; (800d61c <sys_check_timeouts+0x80>)
 800d5f0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d5f2:	68b9      	ldr	r1, [r7, #8]
 800d5f4:	2006      	movs	r0, #6
 800d5f6:	f7f9 fc69 	bl	8006ecc <memp_free>
    if (handler != NULL) {
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d0d3      	beq.n	800d5a8 <sys_check_timeouts+0xc>
      handler(arg);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6838      	ldr	r0, [r7, #0]
 800d604:	4798      	blx	r3
  do {
 800d606:	e7cf      	b.n	800d5a8 <sys_check_timeouts+0xc>
      return;
 800d608:	bf00      	nop
 800d60a:	e000      	b.n	800d60e <sys_check_timeouts+0x72>
      return;
 800d60c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d60e:	3710      	adds	r7, #16
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	2000add8 	.word	0x2000add8
 800d618:	2000089c 	.word	0x2000089c
 800d61c:	200008a0 	.word	0x200008a0

0800d620 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d624:	f002 fc7c 	bl	800ff20 <rand>
 800d628:	4603      	mov	r3, r0
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d630:	b29b      	uxth	r3, r3
 800d632:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d636:	b29a      	uxth	r2, r3
 800d638:	4b01      	ldr	r3, [pc, #4]	; (800d640 <udp_init+0x20>)
 800d63a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d63c:	bf00      	nop
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	20000030 	.word	0x20000030

0800d644 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	4613      	mov	r3, r2
 800d650:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d105      	bne.n	800d664 <udp_input_local_match+0x20>
 800d658:	4b27      	ldr	r3, [pc, #156]	; (800d6f8 <udp_input_local_match+0xb4>)
 800d65a:	2287      	movs	r2, #135	; 0x87
 800d65c:	4927      	ldr	r1, [pc, #156]	; (800d6fc <udp_input_local_match+0xb8>)
 800d65e:	4828      	ldr	r0, [pc, #160]	; (800d700 <udp_input_local_match+0xbc>)
 800d660:	f003 f9c4 	bl	80109ec <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d105      	bne.n	800d676 <udp_input_local_match+0x32>
 800d66a:	4b23      	ldr	r3, [pc, #140]	; (800d6f8 <udp_input_local_match+0xb4>)
 800d66c:	2288      	movs	r2, #136	; 0x88
 800d66e:	4925      	ldr	r1, [pc, #148]	; (800d704 <udp_input_local_match+0xc0>)
 800d670:	4823      	ldr	r0, [pc, #140]	; (800d700 <udp_input_local_match+0xbc>)
 800d672:	f003 f9bb 	bl	80109ec <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	7a1b      	ldrb	r3, [r3, #8]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d00b      	beq.n	800d696 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	7a1a      	ldrb	r2, [r3, #8]
 800d682:	4b21      	ldr	r3, [pc, #132]	; (800d708 <udp_input_local_match+0xc4>)
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d68a:	3301      	adds	r3, #1
 800d68c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d68e:	429a      	cmp	r2, r3
 800d690:	d001      	beq.n	800d696 <udp_input_local_match+0x52>
    return 0;
 800d692:	2300      	movs	r3, #0
 800d694:	e02b      	b.n	800d6ee <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d696:	79fb      	ldrb	r3, [r7, #7]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d018      	beq.n	800d6ce <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d013      	beq.n	800d6ca <udp_input_local_match+0x86>
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d00f      	beq.n	800d6ca <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d6aa:	4b17      	ldr	r3, [pc, #92]	; (800d708 <udp_input_local_match+0xc4>)
 800d6ac:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6b2:	d00a      	beq.n	800d6ca <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	4b13      	ldr	r3, [pc, #76]	; (800d708 <udp_input_local_match+0xc4>)
 800d6ba:	695b      	ldr	r3, [r3, #20]
 800d6bc:	405a      	eors	r2, r3
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	3308      	adds	r3, #8
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d110      	bne.n	800d6ec <udp_input_local_match+0xa8>
          return 1;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	e00f      	b.n	800d6ee <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d009      	beq.n	800d6e8 <udp_input_local_match+0xa4>
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d005      	beq.n	800d6e8 <udp_input_local_match+0xa4>
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	4b09      	ldr	r3, [pc, #36]	; (800d708 <udp_input_local_match+0xc4>)
 800d6e2:	695b      	ldr	r3, [r3, #20]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d101      	bne.n	800d6ec <udp_input_local_match+0xa8>
        return 1;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	e000      	b.n	800d6ee <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d6ec:	2300      	movs	r3, #0
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3710      	adds	r7, #16
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop
 800d6f8:	08014d7c 	.word	0x08014d7c
 800d6fc:	08014dac 	.word	0x08014dac
 800d700:	08014dd0 	.word	0x08014dd0
 800d704:	08014df8 	.word	0x08014df8
 800d708:	200056dc 	.word	0x200056dc

0800d70c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d70c:	b590      	push	{r4, r7, lr}
 800d70e:	b08d      	sub	sp, #52	; 0x34
 800d710:	af02      	add	r7, sp, #8
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d716:	2300      	movs	r3, #0
 800d718:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d105      	bne.n	800d72c <udp_input+0x20>
 800d720:	4b7c      	ldr	r3, [pc, #496]	; (800d914 <udp_input+0x208>)
 800d722:	22cf      	movs	r2, #207	; 0xcf
 800d724:	497c      	ldr	r1, [pc, #496]	; (800d918 <udp_input+0x20c>)
 800d726:	487d      	ldr	r0, [pc, #500]	; (800d91c <udp_input+0x210>)
 800d728:	f003 f960 	bl	80109ec <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d105      	bne.n	800d73e <udp_input+0x32>
 800d732:	4b78      	ldr	r3, [pc, #480]	; (800d914 <udp_input+0x208>)
 800d734:	22d0      	movs	r2, #208	; 0xd0
 800d736:	497a      	ldr	r1, [pc, #488]	; (800d920 <udp_input+0x214>)
 800d738:	4878      	ldr	r0, [pc, #480]	; (800d91c <udp_input+0x210>)
 800d73a:	f003 f957 	bl	80109ec <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	895b      	ldrh	r3, [r3, #10]
 800d742:	2b07      	cmp	r3, #7
 800d744:	d803      	bhi.n	800d74e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7fa fa36 	bl	8007bb8 <pbuf_free>
    goto end;
 800d74c:	e0de      	b.n	800d90c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d754:	4b73      	ldr	r3, [pc, #460]	; (800d924 <udp_input+0x218>)
 800d756:	695b      	ldr	r3, [r3, #20]
 800d758:	4a72      	ldr	r2, [pc, #456]	; (800d924 <udp_input+0x218>)
 800d75a:	6812      	ldr	r2, [r2, #0]
 800d75c:	4611      	mov	r1, r2
 800d75e:	4618      	mov	r0, r3
 800d760:	f001 fc88 	bl	800f074 <ip4_addr_isbroadcast_u32>
 800d764:	4603      	mov	r3, r0
 800d766:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	881b      	ldrh	r3, [r3, #0]
 800d76c:	b29b      	uxth	r3, r3
 800d76e:	4618      	mov	r0, r3
 800d770:	f7f8 fec4 	bl	80064fc <lwip_htons>
 800d774:	4603      	mov	r3, r0
 800d776:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	885b      	ldrh	r3, [r3, #2]
 800d77c:	b29b      	uxth	r3, r3
 800d77e:	4618      	mov	r0, r3
 800d780:	f7f8 febc 	bl	80064fc <lwip_htons>
 800d784:	4603      	mov	r3, r0
 800d786:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d788:	2300      	movs	r3, #0
 800d78a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d78c:	2300      	movs	r3, #0
 800d78e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d790:	2300      	movs	r3, #0
 800d792:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d794:	4b64      	ldr	r3, [pc, #400]	; (800d928 <udp_input+0x21c>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	627b      	str	r3, [r7, #36]	; 0x24
 800d79a:	e054      	b.n	800d846 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79e:	8a5b      	ldrh	r3, [r3, #18]
 800d7a0:	89fa      	ldrh	r2, [r7, #14]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d14a      	bne.n	800d83c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d7a6:	7cfb      	ldrb	r3, [r7, #19]
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	6839      	ldr	r1, [r7, #0]
 800d7ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7ae:	f7ff ff49 	bl	800d644 <udp_input_local_match>
 800d7b2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d041      	beq.n	800d83c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ba:	7c1b      	ldrb	r3, [r3, #16]
 800d7bc:	f003 0304 	and.w	r3, r3, #4
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d11d      	bne.n	800d800 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d102      	bne.n	800d7d0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7cc:	61fb      	str	r3, [r7, #28]
 800d7ce:	e017      	b.n	800d800 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d7d0:	7cfb      	ldrb	r3, [r7, #19]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d014      	beq.n	800d800 <udp_input+0xf4>
 800d7d6:	4b53      	ldr	r3, [pc, #332]	; (800d924 <udp_input+0x218>)
 800d7d8:	695b      	ldr	r3, [r3, #20]
 800d7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7de:	d10f      	bne.n	800d800 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	3304      	adds	r3, #4
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d008      	beq.n	800d800 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	3304      	adds	r3, #4
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d101      	bne.n	800d800 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fe:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d802:	8a9b      	ldrh	r3, [r3, #20]
 800d804:	8a3a      	ldrh	r2, [r7, #16]
 800d806:	429a      	cmp	r2, r3
 800d808:	d118      	bne.n	800d83c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d005      	beq.n	800d81e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d814:	685a      	ldr	r2, [r3, #4]
 800d816:	4b43      	ldr	r3, [pc, #268]	; (800d924 <udp_input+0x218>)
 800d818:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d10e      	bne.n	800d83c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d81e:	6a3b      	ldr	r3, [r7, #32]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d014      	beq.n	800d84e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d826:	68da      	ldr	r2, [r3, #12]
 800d828:	6a3b      	ldr	r3, [r7, #32]
 800d82a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d82c:	4b3e      	ldr	r3, [pc, #248]	; (800d928 <udp_input+0x21c>)
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d832:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d834:	4a3c      	ldr	r2, [pc, #240]	; (800d928 <udp_input+0x21c>)
 800d836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d838:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d83a:	e008      	b.n	800d84e <udp_input+0x142>
      }
    }

    prev = pcb;
 800d83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	627b      	str	r3, [r7, #36]	; 0x24
 800d846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d1a7      	bne.n	800d79c <udp_input+0x90>
 800d84c:	e000      	b.n	800d850 <udp_input+0x144>
        break;
 800d84e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d852:	2b00      	cmp	r3, #0
 800d854:	d101      	bne.n	800d85a <udp_input+0x14e>
    pcb = uncon_pcb;
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d002      	beq.n	800d866 <udp_input+0x15a>
    for_us = 1;
 800d860:	2301      	movs	r3, #1
 800d862:	76fb      	strb	r3, [r7, #27]
 800d864:	e00a      	b.n	800d87c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	3304      	adds	r3, #4
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	4b2d      	ldr	r3, [pc, #180]	; (800d924 <udp_input+0x218>)
 800d86e:	695b      	ldr	r3, [r3, #20]
 800d870:	429a      	cmp	r2, r3
 800d872:	bf0c      	ite	eq
 800d874:	2301      	moveq	r3, #1
 800d876:	2300      	movne	r3, #0
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d87c:	7efb      	ldrb	r3, [r7, #27]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d041      	beq.n	800d906 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d882:	2108      	movs	r1, #8
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f7fa f911 	bl	8007aac <pbuf_remove_header>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d00a      	beq.n	800d8a6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d890:	4b20      	ldr	r3, [pc, #128]	; (800d914 <udp_input+0x208>)
 800d892:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d896:	4925      	ldr	r1, [pc, #148]	; (800d92c <udp_input+0x220>)
 800d898:	4820      	ldr	r0, [pc, #128]	; (800d91c <udp_input+0x210>)
 800d89a:	f003 f8a7 	bl	80109ec <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7fa f98a 	bl	8007bb8 <pbuf_free>
      goto end;
 800d8a4:	e032      	b.n	800d90c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d012      	beq.n	800d8d2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ae:	699b      	ldr	r3, [r3, #24]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d00a      	beq.n	800d8ca <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b6:	699c      	ldr	r4, [r3, #24]
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ba:	69d8      	ldr	r0, [r3, #28]
 800d8bc:	8a3b      	ldrh	r3, [r7, #16]
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	4b1b      	ldr	r3, [pc, #108]	; (800d930 <udp_input+0x224>)
 800d8c2:	687a      	ldr	r2, [r7, #4]
 800d8c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8c6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d8c8:	e021      	b.n	800d90e <udp_input+0x202>
        pbuf_free(p);
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f7fa f974 	bl	8007bb8 <pbuf_free>
        goto end;
 800d8d0:	e01c      	b.n	800d90c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d8d2:	7cfb      	ldrb	r3, [r7, #19]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d112      	bne.n	800d8fe <udp_input+0x1f2>
 800d8d8:	4b12      	ldr	r3, [pc, #72]	; (800d924 <udp_input+0x218>)
 800d8da:	695b      	ldr	r3, [r3, #20]
 800d8dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d8e0:	2be0      	cmp	r3, #224	; 0xe0
 800d8e2:	d00c      	beq.n	800d8fe <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d8e4:	4b0f      	ldr	r3, [pc, #60]	; (800d924 <udp_input+0x218>)
 800d8e6:	899b      	ldrh	r3, [r3, #12]
 800d8e8:	3308      	adds	r3, #8
 800d8ea:	b29b      	uxth	r3, r3
 800d8ec:	b21b      	sxth	r3, r3
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f7fa f94e 	bl	8007b92 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d8f6:	2103      	movs	r1, #3
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f001 f89b 	bl	800ea34 <icmp_dest_unreach>
      pbuf_free(p);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f7fa f95a 	bl	8007bb8 <pbuf_free>
  return;
 800d904:	e003      	b.n	800d90e <udp_input+0x202>
    pbuf_free(p);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f7fa f956 	bl	8007bb8 <pbuf_free>
  return;
 800d90c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d90e:	372c      	adds	r7, #44	; 0x2c
 800d910:	46bd      	mov	sp, r7
 800d912:	bd90      	pop	{r4, r7, pc}
 800d914:	08014d7c 	.word	0x08014d7c
 800d918:	08014e20 	.word	0x08014e20
 800d91c:	08014dd0 	.word	0x08014dd0
 800d920:	08014e38 	.word	0x08014e38
 800d924:	200056dc 	.word	0x200056dc
 800d928:	2000adf8 	.word	0x2000adf8
 800d92c:	08014e54 	.word	0x08014e54
 800d930:	200056ec 	.word	0x200056ec

0800d934 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d934:	b480      	push	{r7}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d01e      	beq.n	800d982 <udp_netif_ip_addr_changed+0x4e>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d01a      	beq.n	800d982 <udp_netif_ip_addr_changed+0x4e>
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d017      	beq.n	800d982 <udp_netif_ip_addr_changed+0x4e>
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d013      	beq.n	800d982 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d95a:	4b0d      	ldr	r3, [pc, #52]	; (800d990 <udp_netif_ip_addr_changed+0x5c>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	60fb      	str	r3, [r7, #12]
 800d960:	e00c      	b.n	800d97c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d103      	bne.n	800d976 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	60fb      	str	r3, [r7, #12]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d1ef      	bne.n	800d962 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d982:	bf00      	nop
 800d984:	3714      	adds	r7, #20
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop
 800d990:	2000adf8 	.word	0x2000adf8

0800d994 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d99c:	4915      	ldr	r1, [pc, #84]	; (800d9f4 <etharp_free_entry+0x60>)
 800d99e:	687a      	ldr	r2, [r7, #4]
 800d9a0:	4613      	mov	r3, r2
 800d9a2:	005b      	lsls	r3, r3, #1
 800d9a4:	4413      	add	r3, r2
 800d9a6:	00db      	lsls	r3, r3, #3
 800d9a8:	440b      	add	r3, r1
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d013      	beq.n	800d9d8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d9b0:	4910      	ldr	r1, [pc, #64]	; (800d9f4 <etharp_free_entry+0x60>)
 800d9b2:	687a      	ldr	r2, [r7, #4]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	4413      	add	r3, r2
 800d9ba:	00db      	lsls	r3, r3, #3
 800d9bc:	440b      	add	r3, r1
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7fa f8f9 	bl	8007bb8 <pbuf_free>
    arp_table[i].q = NULL;
 800d9c6:	490b      	ldr	r1, [pc, #44]	; (800d9f4 <etharp_free_entry+0x60>)
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	4613      	mov	r3, r2
 800d9cc:	005b      	lsls	r3, r3, #1
 800d9ce:	4413      	add	r3, r2
 800d9d0:	00db      	lsls	r3, r3, #3
 800d9d2:	440b      	add	r3, r1
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d9d8:	4906      	ldr	r1, [pc, #24]	; (800d9f4 <etharp_free_entry+0x60>)
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	4613      	mov	r3, r2
 800d9de:	005b      	lsls	r3, r3, #1
 800d9e0:	4413      	add	r3, r2
 800d9e2:	00db      	lsls	r3, r3, #3
 800d9e4:	440b      	add	r3, r1
 800d9e6:	3314      	adds	r3, #20
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d9ec:	bf00      	nop
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}
 800d9f4:	200008a8 	.word	0x200008a8

0800d9f8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d9fe:	2300      	movs	r3, #0
 800da00:	607b      	str	r3, [r7, #4]
 800da02:	e096      	b.n	800db32 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800da04:	494f      	ldr	r1, [pc, #316]	; (800db44 <etharp_tmr+0x14c>)
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	4613      	mov	r3, r2
 800da0a:	005b      	lsls	r3, r3, #1
 800da0c:	4413      	add	r3, r2
 800da0e:	00db      	lsls	r3, r3, #3
 800da10:	440b      	add	r3, r1
 800da12:	3314      	adds	r3, #20
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800da18:	78fb      	ldrb	r3, [r7, #3]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	f000 8086 	beq.w	800db2c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800da20:	4948      	ldr	r1, [pc, #288]	; (800db44 <etharp_tmr+0x14c>)
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	4613      	mov	r3, r2
 800da26:	005b      	lsls	r3, r3, #1
 800da28:	4413      	add	r3, r2
 800da2a:	00db      	lsls	r3, r3, #3
 800da2c:	440b      	add	r3, r1
 800da2e:	3312      	adds	r3, #18
 800da30:	881b      	ldrh	r3, [r3, #0]
 800da32:	3301      	adds	r3, #1
 800da34:	b298      	uxth	r0, r3
 800da36:	4943      	ldr	r1, [pc, #268]	; (800db44 <etharp_tmr+0x14c>)
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	4613      	mov	r3, r2
 800da3c:	005b      	lsls	r3, r3, #1
 800da3e:	4413      	add	r3, r2
 800da40:	00db      	lsls	r3, r3, #3
 800da42:	440b      	add	r3, r1
 800da44:	3312      	adds	r3, #18
 800da46:	4602      	mov	r2, r0
 800da48:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800da4a:	493e      	ldr	r1, [pc, #248]	; (800db44 <etharp_tmr+0x14c>)
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	4613      	mov	r3, r2
 800da50:	005b      	lsls	r3, r3, #1
 800da52:	4413      	add	r3, r2
 800da54:	00db      	lsls	r3, r3, #3
 800da56:	440b      	add	r3, r1
 800da58:	3312      	adds	r3, #18
 800da5a:	881b      	ldrh	r3, [r3, #0]
 800da5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800da60:	d215      	bcs.n	800da8e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800da62:	4938      	ldr	r1, [pc, #224]	; (800db44 <etharp_tmr+0x14c>)
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	4613      	mov	r3, r2
 800da68:	005b      	lsls	r3, r3, #1
 800da6a:	4413      	add	r3, r2
 800da6c:	00db      	lsls	r3, r3, #3
 800da6e:	440b      	add	r3, r1
 800da70:	3314      	adds	r3, #20
 800da72:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800da74:	2b01      	cmp	r3, #1
 800da76:	d10e      	bne.n	800da96 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800da78:	4932      	ldr	r1, [pc, #200]	; (800db44 <etharp_tmr+0x14c>)
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	4613      	mov	r3, r2
 800da7e:	005b      	lsls	r3, r3, #1
 800da80:	4413      	add	r3, r2
 800da82:	00db      	lsls	r3, r3, #3
 800da84:	440b      	add	r3, r1
 800da86:	3312      	adds	r3, #18
 800da88:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800da8a:	2b04      	cmp	r3, #4
 800da8c:	d903      	bls.n	800da96 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f7ff ff80 	bl	800d994 <etharp_free_entry>
 800da94:	e04a      	b.n	800db2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800da96:	492b      	ldr	r1, [pc, #172]	; (800db44 <etharp_tmr+0x14c>)
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	4613      	mov	r3, r2
 800da9c:	005b      	lsls	r3, r3, #1
 800da9e:	4413      	add	r3, r2
 800daa0:	00db      	lsls	r3, r3, #3
 800daa2:	440b      	add	r3, r1
 800daa4:	3314      	adds	r3, #20
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	2b03      	cmp	r3, #3
 800daaa:	d10a      	bne.n	800dac2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800daac:	4925      	ldr	r1, [pc, #148]	; (800db44 <etharp_tmr+0x14c>)
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	4613      	mov	r3, r2
 800dab2:	005b      	lsls	r3, r3, #1
 800dab4:	4413      	add	r3, r2
 800dab6:	00db      	lsls	r3, r3, #3
 800dab8:	440b      	add	r3, r1
 800daba:	3314      	adds	r3, #20
 800dabc:	2204      	movs	r2, #4
 800dabe:	701a      	strb	r2, [r3, #0]
 800dac0:	e034      	b.n	800db2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800dac2:	4920      	ldr	r1, [pc, #128]	; (800db44 <etharp_tmr+0x14c>)
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	4613      	mov	r3, r2
 800dac8:	005b      	lsls	r3, r3, #1
 800daca:	4413      	add	r3, r2
 800dacc:	00db      	lsls	r3, r3, #3
 800dace:	440b      	add	r3, r1
 800dad0:	3314      	adds	r3, #20
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	2b04      	cmp	r3, #4
 800dad6:	d10a      	bne.n	800daee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800dad8:	491a      	ldr	r1, [pc, #104]	; (800db44 <etharp_tmr+0x14c>)
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	4613      	mov	r3, r2
 800dade:	005b      	lsls	r3, r3, #1
 800dae0:	4413      	add	r3, r2
 800dae2:	00db      	lsls	r3, r3, #3
 800dae4:	440b      	add	r3, r1
 800dae6:	3314      	adds	r3, #20
 800dae8:	2202      	movs	r2, #2
 800daea:	701a      	strb	r2, [r3, #0]
 800daec:	e01e      	b.n	800db2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800daee:	4915      	ldr	r1, [pc, #84]	; (800db44 <etharp_tmr+0x14c>)
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	4613      	mov	r3, r2
 800daf4:	005b      	lsls	r3, r3, #1
 800daf6:	4413      	add	r3, r2
 800daf8:	00db      	lsls	r3, r3, #3
 800dafa:	440b      	add	r3, r1
 800dafc:	3314      	adds	r3, #20
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	2b01      	cmp	r3, #1
 800db02:	d113      	bne.n	800db2c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800db04:	490f      	ldr	r1, [pc, #60]	; (800db44 <etharp_tmr+0x14c>)
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	4613      	mov	r3, r2
 800db0a:	005b      	lsls	r3, r3, #1
 800db0c:	4413      	add	r3, r2
 800db0e:	00db      	lsls	r3, r3, #3
 800db10:	440b      	add	r3, r1
 800db12:	3308      	adds	r3, #8
 800db14:	6818      	ldr	r0, [r3, #0]
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	4613      	mov	r3, r2
 800db1a:	005b      	lsls	r3, r3, #1
 800db1c:	4413      	add	r3, r2
 800db1e:	00db      	lsls	r3, r3, #3
 800db20:	4a08      	ldr	r2, [pc, #32]	; (800db44 <etharp_tmr+0x14c>)
 800db22:	4413      	add	r3, r2
 800db24:	3304      	adds	r3, #4
 800db26:	4619      	mov	r1, r3
 800db28:	f000 fe6e 	bl	800e808 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	3301      	adds	r3, #1
 800db30:	607b      	str	r3, [r7, #4]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2b09      	cmp	r3, #9
 800db36:	f77f af65 	ble.w	800da04 <etharp_tmr+0xc>
      }
    }
  }
}
 800db3a:	bf00      	nop
 800db3c:	bf00      	nop
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	200008a8 	.word	0x200008a8

0800db48 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b08a      	sub	sp, #40	; 0x28
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	60f8      	str	r0, [r7, #12]
 800db50:	460b      	mov	r3, r1
 800db52:	607a      	str	r2, [r7, #4]
 800db54:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800db56:	230a      	movs	r3, #10
 800db58:	84fb      	strh	r3, [r7, #38]	; 0x26
 800db5a:	230a      	movs	r3, #10
 800db5c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800db5e:	230a      	movs	r3, #10
 800db60:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800db62:	2300      	movs	r3, #0
 800db64:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800db66:	230a      	movs	r3, #10
 800db68:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800db6a:	2300      	movs	r3, #0
 800db6c:	83bb      	strh	r3, [r7, #28]
 800db6e:	2300      	movs	r3, #0
 800db70:	837b      	strh	r3, [r7, #26]
 800db72:	2300      	movs	r3, #0
 800db74:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800db76:	2300      	movs	r3, #0
 800db78:	843b      	strh	r3, [r7, #32]
 800db7a:	e0ae      	b.n	800dcda <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800db7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db80:	49a6      	ldr	r1, [pc, #664]	; (800de1c <etharp_find_entry+0x2d4>)
 800db82:	4613      	mov	r3, r2
 800db84:	005b      	lsls	r3, r3, #1
 800db86:	4413      	add	r3, r2
 800db88:	00db      	lsls	r3, r3, #3
 800db8a:	440b      	add	r3, r1
 800db8c:	3314      	adds	r3, #20
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800db92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800db96:	2b0a      	cmp	r3, #10
 800db98:	d105      	bne.n	800dba6 <etharp_find_entry+0x5e>
 800db9a:	7dfb      	ldrb	r3, [r7, #23]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d102      	bne.n	800dba6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800dba0:	8c3b      	ldrh	r3, [r7, #32]
 800dba2:	847b      	strh	r3, [r7, #34]	; 0x22
 800dba4:	e095      	b.n	800dcd2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800dba6:	7dfb      	ldrb	r3, [r7, #23]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f000 8092 	beq.w	800dcd2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800dbae:	7dfb      	ldrb	r3, [r7, #23]
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d009      	beq.n	800dbc8 <etharp_find_entry+0x80>
 800dbb4:	7dfb      	ldrb	r3, [r7, #23]
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d806      	bhi.n	800dbc8 <etharp_find_entry+0x80>
 800dbba:	4b99      	ldr	r3, [pc, #612]	; (800de20 <etharp_find_entry+0x2d8>)
 800dbbc:	f240 1223 	movw	r2, #291	; 0x123
 800dbc0:	4998      	ldr	r1, [pc, #608]	; (800de24 <etharp_find_entry+0x2dc>)
 800dbc2:	4899      	ldr	r0, [pc, #612]	; (800de28 <etharp_find_entry+0x2e0>)
 800dbc4:	f002 ff12 	bl	80109ec <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d020      	beq.n	800dc10 <etharp_find_entry+0xc8>
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6819      	ldr	r1, [r3, #0]
 800dbd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dbd6:	4891      	ldr	r0, [pc, #580]	; (800de1c <etharp_find_entry+0x2d4>)
 800dbd8:	4613      	mov	r3, r2
 800dbda:	005b      	lsls	r3, r3, #1
 800dbdc:	4413      	add	r3, r2
 800dbde:	00db      	lsls	r3, r3, #3
 800dbe0:	4403      	add	r3, r0
 800dbe2:	3304      	adds	r3, #4
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4299      	cmp	r1, r3
 800dbe8:	d112      	bne.n	800dc10 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00c      	beq.n	800dc0a <etharp_find_entry+0xc2>
 800dbf0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dbf4:	4989      	ldr	r1, [pc, #548]	; (800de1c <etharp_find_entry+0x2d4>)
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	005b      	lsls	r3, r3, #1
 800dbfa:	4413      	add	r3, r2
 800dbfc:	00db      	lsls	r3, r3, #3
 800dbfe:	440b      	add	r3, r1
 800dc00:	3308      	adds	r3, #8
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d102      	bne.n	800dc10 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800dc0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dc0e:	e100      	b.n	800de12 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800dc10:	7dfb      	ldrb	r3, [r7, #23]
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d140      	bne.n	800dc98 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800dc16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dc1a:	4980      	ldr	r1, [pc, #512]	; (800de1c <etharp_find_entry+0x2d4>)
 800dc1c:	4613      	mov	r3, r2
 800dc1e:	005b      	lsls	r3, r3, #1
 800dc20:	4413      	add	r3, r2
 800dc22:	00db      	lsls	r3, r3, #3
 800dc24:	440b      	add	r3, r1
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d01a      	beq.n	800dc62 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800dc2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dc30:	497a      	ldr	r1, [pc, #488]	; (800de1c <etharp_find_entry+0x2d4>)
 800dc32:	4613      	mov	r3, r2
 800dc34:	005b      	lsls	r3, r3, #1
 800dc36:	4413      	add	r3, r2
 800dc38:	00db      	lsls	r3, r3, #3
 800dc3a:	440b      	add	r3, r1
 800dc3c:	3312      	adds	r3, #18
 800dc3e:	881b      	ldrh	r3, [r3, #0]
 800dc40:	8bba      	ldrh	r2, [r7, #28]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d845      	bhi.n	800dcd2 <etharp_find_entry+0x18a>
            old_queue = i;
 800dc46:	8c3b      	ldrh	r3, [r7, #32]
 800dc48:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800dc4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dc4e:	4973      	ldr	r1, [pc, #460]	; (800de1c <etharp_find_entry+0x2d4>)
 800dc50:	4613      	mov	r3, r2
 800dc52:	005b      	lsls	r3, r3, #1
 800dc54:	4413      	add	r3, r2
 800dc56:	00db      	lsls	r3, r3, #3
 800dc58:	440b      	add	r3, r1
 800dc5a:	3312      	adds	r3, #18
 800dc5c:	881b      	ldrh	r3, [r3, #0]
 800dc5e:	83bb      	strh	r3, [r7, #28]
 800dc60:	e037      	b.n	800dcd2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800dc62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dc66:	496d      	ldr	r1, [pc, #436]	; (800de1c <etharp_find_entry+0x2d4>)
 800dc68:	4613      	mov	r3, r2
 800dc6a:	005b      	lsls	r3, r3, #1
 800dc6c:	4413      	add	r3, r2
 800dc6e:	00db      	lsls	r3, r3, #3
 800dc70:	440b      	add	r3, r1
 800dc72:	3312      	adds	r3, #18
 800dc74:	881b      	ldrh	r3, [r3, #0]
 800dc76:	8b7a      	ldrh	r2, [r7, #26]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d82a      	bhi.n	800dcd2 <etharp_find_entry+0x18a>
            old_pending = i;
 800dc7c:	8c3b      	ldrh	r3, [r7, #32]
 800dc7e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800dc80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dc84:	4965      	ldr	r1, [pc, #404]	; (800de1c <etharp_find_entry+0x2d4>)
 800dc86:	4613      	mov	r3, r2
 800dc88:	005b      	lsls	r3, r3, #1
 800dc8a:	4413      	add	r3, r2
 800dc8c:	00db      	lsls	r3, r3, #3
 800dc8e:	440b      	add	r3, r1
 800dc90:	3312      	adds	r3, #18
 800dc92:	881b      	ldrh	r3, [r3, #0]
 800dc94:	837b      	strh	r3, [r7, #26]
 800dc96:	e01c      	b.n	800dcd2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800dc98:	7dfb      	ldrb	r3, [r7, #23]
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d919      	bls.n	800dcd2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800dc9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dca2:	495e      	ldr	r1, [pc, #376]	; (800de1c <etharp_find_entry+0x2d4>)
 800dca4:	4613      	mov	r3, r2
 800dca6:	005b      	lsls	r3, r3, #1
 800dca8:	4413      	add	r3, r2
 800dcaa:	00db      	lsls	r3, r3, #3
 800dcac:	440b      	add	r3, r1
 800dcae:	3312      	adds	r3, #18
 800dcb0:	881b      	ldrh	r3, [r3, #0]
 800dcb2:	8b3a      	ldrh	r2, [r7, #24]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d80c      	bhi.n	800dcd2 <etharp_find_entry+0x18a>
            old_stable = i;
 800dcb8:	8c3b      	ldrh	r3, [r7, #32]
 800dcba:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800dcbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dcc0:	4956      	ldr	r1, [pc, #344]	; (800de1c <etharp_find_entry+0x2d4>)
 800dcc2:	4613      	mov	r3, r2
 800dcc4:	005b      	lsls	r3, r3, #1
 800dcc6:	4413      	add	r3, r2
 800dcc8:	00db      	lsls	r3, r3, #3
 800dcca:	440b      	add	r3, r1
 800dccc:	3312      	adds	r3, #18
 800dcce:	881b      	ldrh	r3, [r3, #0]
 800dcd0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dcd2:	8c3b      	ldrh	r3, [r7, #32]
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	843b      	strh	r3, [r7, #32]
 800dcda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dcde:	2b09      	cmp	r3, #9
 800dce0:	f77f af4c 	ble.w	800db7c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800dce4:	7afb      	ldrb	r3, [r7, #11]
 800dce6:	f003 0302 	and.w	r3, r3, #2
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d108      	bne.n	800dd00 <etharp_find_entry+0x1b8>
 800dcee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dcf2:	2b0a      	cmp	r3, #10
 800dcf4:	d107      	bne.n	800dd06 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800dcf6:	7afb      	ldrb	r3, [r7, #11]
 800dcf8:	f003 0301 	and.w	r3, r3, #1
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d102      	bne.n	800dd06 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800dd00:	f04f 33ff 	mov.w	r3, #4294967295
 800dd04:	e085      	b.n	800de12 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800dd06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dd0a:	2b09      	cmp	r3, #9
 800dd0c:	dc02      	bgt.n	800dd14 <etharp_find_entry+0x1cc>
    i = empty;
 800dd0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd10:	843b      	strh	r3, [r7, #32]
 800dd12:	e039      	b.n	800dd88 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800dd14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800dd18:	2b09      	cmp	r3, #9
 800dd1a:	dc14      	bgt.n	800dd46 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800dd1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd1e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800dd20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dd24:	493d      	ldr	r1, [pc, #244]	; (800de1c <etharp_find_entry+0x2d4>)
 800dd26:	4613      	mov	r3, r2
 800dd28:	005b      	lsls	r3, r3, #1
 800dd2a:	4413      	add	r3, r2
 800dd2c:	00db      	lsls	r3, r3, #3
 800dd2e:	440b      	add	r3, r1
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d018      	beq.n	800dd68 <etharp_find_entry+0x220>
 800dd36:	4b3a      	ldr	r3, [pc, #232]	; (800de20 <etharp_find_entry+0x2d8>)
 800dd38:	f240 126d 	movw	r2, #365	; 0x16d
 800dd3c:	493b      	ldr	r1, [pc, #236]	; (800de2c <etharp_find_entry+0x2e4>)
 800dd3e:	483a      	ldr	r0, [pc, #232]	; (800de28 <etharp_find_entry+0x2e0>)
 800dd40:	f002 fe54 	bl	80109ec <iprintf>
 800dd44:	e010      	b.n	800dd68 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800dd46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800dd4a:	2b09      	cmp	r3, #9
 800dd4c:	dc02      	bgt.n	800dd54 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800dd4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dd50:	843b      	strh	r3, [r7, #32]
 800dd52:	e009      	b.n	800dd68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800dd54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dd58:	2b09      	cmp	r3, #9
 800dd5a:	dc02      	bgt.n	800dd62 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800dd5c:	8bfb      	ldrh	r3, [r7, #30]
 800dd5e:	843b      	strh	r3, [r7, #32]
 800dd60:	e002      	b.n	800dd68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800dd62:	f04f 33ff 	mov.w	r3, #4294967295
 800dd66:	e054      	b.n	800de12 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dd68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dd6c:	2b09      	cmp	r3, #9
 800dd6e:	dd06      	ble.n	800dd7e <etharp_find_entry+0x236>
 800dd70:	4b2b      	ldr	r3, [pc, #172]	; (800de20 <etharp_find_entry+0x2d8>)
 800dd72:	f240 127f 	movw	r2, #383	; 0x17f
 800dd76:	492e      	ldr	r1, [pc, #184]	; (800de30 <etharp_find_entry+0x2e8>)
 800dd78:	482b      	ldr	r0, [pc, #172]	; (800de28 <etharp_find_entry+0x2e0>)
 800dd7a:	f002 fe37 	bl	80109ec <iprintf>
    etharp_free_entry(i);
 800dd7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7ff fe06 	bl	800d994 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dd88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dd8c:	2b09      	cmp	r3, #9
 800dd8e:	dd06      	ble.n	800dd9e <etharp_find_entry+0x256>
 800dd90:	4b23      	ldr	r3, [pc, #140]	; (800de20 <etharp_find_entry+0x2d8>)
 800dd92:	f240 1283 	movw	r2, #387	; 0x183
 800dd96:	4926      	ldr	r1, [pc, #152]	; (800de30 <etharp_find_entry+0x2e8>)
 800dd98:	4823      	ldr	r0, [pc, #140]	; (800de28 <etharp_find_entry+0x2e0>)
 800dd9a:	f002 fe27 	bl	80109ec <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800dd9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dda2:	491e      	ldr	r1, [pc, #120]	; (800de1c <etharp_find_entry+0x2d4>)
 800dda4:	4613      	mov	r3, r2
 800dda6:	005b      	lsls	r3, r3, #1
 800dda8:	4413      	add	r3, r2
 800ddaa:	00db      	lsls	r3, r3, #3
 800ddac:	440b      	add	r3, r1
 800ddae:	3314      	adds	r3, #20
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d006      	beq.n	800ddc4 <etharp_find_entry+0x27c>
 800ddb6:	4b1a      	ldr	r3, [pc, #104]	; (800de20 <etharp_find_entry+0x2d8>)
 800ddb8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ddbc:	491d      	ldr	r1, [pc, #116]	; (800de34 <etharp_find_entry+0x2ec>)
 800ddbe:	481a      	ldr	r0, [pc, #104]	; (800de28 <etharp_find_entry+0x2e0>)
 800ddc0:	f002 fe14 	bl	80109ec <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d00b      	beq.n	800dde2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ddca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	6819      	ldr	r1, [r3, #0]
 800ddd2:	4812      	ldr	r0, [pc, #72]	; (800de1c <etharp_find_entry+0x2d4>)
 800ddd4:	4613      	mov	r3, r2
 800ddd6:	005b      	lsls	r3, r3, #1
 800ddd8:	4413      	add	r3, r2
 800ddda:	00db      	lsls	r3, r3, #3
 800dddc:	4403      	add	r3, r0
 800ddde:	3304      	adds	r3, #4
 800dde0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800dde2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dde6:	490d      	ldr	r1, [pc, #52]	; (800de1c <etharp_find_entry+0x2d4>)
 800dde8:	4613      	mov	r3, r2
 800ddea:	005b      	lsls	r3, r3, #1
 800ddec:	4413      	add	r3, r2
 800ddee:	00db      	lsls	r3, r3, #3
 800ddf0:	440b      	add	r3, r1
 800ddf2:	3312      	adds	r3, #18
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ddf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ddfc:	4907      	ldr	r1, [pc, #28]	; (800de1c <etharp_find_entry+0x2d4>)
 800ddfe:	4613      	mov	r3, r2
 800de00:	005b      	lsls	r3, r3, #1
 800de02:	4413      	add	r3, r2
 800de04:	00db      	lsls	r3, r3, #3
 800de06:	440b      	add	r3, r1
 800de08:	3308      	adds	r3, #8
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800de0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800de12:	4618      	mov	r0, r3
 800de14:	3728      	adds	r7, #40	; 0x28
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	200008a8 	.word	0x200008a8
 800de20:	080150e0 	.word	0x080150e0
 800de24:	08015118 	.word	0x08015118
 800de28:	08015158 	.word	0x08015158
 800de2c:	08015180 	.word	0x08015180
 800de30:	08015198 	.word	0x08015198
 800de34:	080151ac 	.word	0x080151ac

0800de38 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b088      	sub	sp, #32
 800de3c:	af02      	add	r7, sp, #8
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	607a      	str	r2, [r7, #4]
 800de44:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800de4c:	2b06      	cmp	r3, #6
 800de4e:	d006      	beq.n	800de5e <etharp_update_arp_entry+0x26>
 800de50:	4b48      	ldr	r3, [pc, #288]	; (800df74 <etharp_update_arp_entry+0x13c>)
 800de52:	f240 12a9 	movw	r2, #425	; 0x1a9
 800de56:	4948      	ldr	r1, [pc, #288]	; (800df78 <etharp_update_arp_entry+0x140>)
 800de58:	4848      	ldr	r0, [pc, #288]	; (800df7c <etharp_update_arp_entry+0x144>)
 800de5a:	f002 fdc7 	bl	80109ec <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d012      	beq.n	800de8a <etharp_update_arp_entry+0x52>
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d00e      	beq.n	800de8a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	68f9      	ldr	r1, [r7, #12]
 800de72:	4618      	mov	r0, r3
 800de74:	f001 f8fe 	bl	800f074 <ip4_addr_isbroadcast_u32>
 800de78:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d105      	bne.n	800de8a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800de86:	2be0      	cmp	r3, #224	; 0xe0
 800de88:	d102      	bne.n	800de90 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800de8a:	f06f 030f 	mvn.w	r3, #15
 800de8e:	e06c      	b.n	800df6a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800de90:	78fb      	ldrb	r3, [r7, #3]
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	4619      	mov	r1, r3
 800de96:	68b8      	ldr	r0, [r7, #8]
 800de98:	f7ff fe56 	bl	800db48 <etharp_find_entry>
 800de9c:	4603      	mov	r3, r0
 800de9e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800dea0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	da02      	bge.n	800deae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800dea8:	8afb      	ldrh	r3, [r7, #22]
 800deaa:	b25b      	sxtb	r3, r3
 800deac:	e05d      	b.n	800df6a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800deae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800deb2:	4933      	ldr	r1, [pc, #204]	; (800df80 <etharp_update_arp_entry+0x148>)
 800deb4:	4613      	mov	r3, r2
 800deb6:	005b      	lsls	r3, r3, #1
 800deb8:	4413      	add	r3, r2
 800deba:	00db      	lsls	r3, r3, #3
 800debc:	440b      	add	r3, r1
 800debe:	3314      	adds	r3, #20
 800dec0:	2202      	movs	r2, #2
 800dec2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800dec4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dec8:	492d      	ldr	r1, [pc, #180]	; (800df80 <etharp_update_arp_entry+0x148>)
 800deca:	4613      	mov	r3, r2
 800decc:	005b      	lsls	r3, r3, #1
 800dece:	4413      	add	r3, r2
 800ded0:	00db      	lsls	r3, r3, #3
 800ded2:	440b      	add	r3, r1
 800ded4:	3308      	adds	r3, #8
 800ded6:	68fa      	ldr	r2, [r7, #12]
 800ded8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800deda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dede:	4613      	mov	r3, r2
 800dee0:	005b      	lsls	r3, r3, #1
 800dee2:	4413      	add	r3, r2
 800dee4:	00db      	lsls	r3, r3, #3
 800dee6:	3308      	adds	r3, #8
 800dee8:	4a25      	ldr	r2, [pc, #148]	; (800df80 <etharp_update_arp_entry+0x148>)
 800deea:	4413      	add	r3, r2
 800deec:	3304      	adds	r3, #4
 800deee:	2206      	movs	r2, #6
 800def0:	6879      	ldr	r1, [r7, #4]
 800def2:	4618      	mov	r0, r3
 800def4:	f002 fe93 	bl	8010c1e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800def8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800defc:	4920      	ldr	r1, [pc, #128]	; (800df80 <etharp_update_arp_entry+0x148>)
 800defe:	4613      	mov	r3, r2
 800df00:	005b      	lsls	r3, r3, #1
 800df02:	4413      	add	r3, r2
 800df04:	00db      	lsls	r3, r3, #3
 800df06:	440b      	add	r3, r1
 800df08:	3312      	adds	r3, #18
 800df0a:	2200      	movs	r2, #0
 800df0c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800df0e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800df12:	491b      	ldr	r1, [pc, #108]	; (800df80 <etharp_update_arp_entry+0x148>)
 800df14:	4613      	mov	r3, r2
 800df16:	005b      	lsls	r3, r3, #1
 800df18:	4413      	add	r3, r2
 800df1a:	00db      	lsls	r3, r3, #3
 800df1c:	440b      	add	r3, r1
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d021      	beq.n	800df68 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800df24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800df28:	4915      	ldr	r1, [pc, #84]	; (800df80 <etharp_update_arp_entry+0x148>)
 800df2a:	4613      	mov	r3, r2
 800df2c:	005b      	lsls	r3, r3, #1
 800df2e:	4413      	add	r3, r2
 800df30:	00db      	lsls	r3, r3, #3
 800df32:	440b      	add	r3, r1
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800df38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800df3c:	4910      	ldr	r1, [pc, #64]	; (800df80 <etharp_update_arp_entry+0x148>)
 800df3e:	4613      	mov	r3, r2
 800df40:	005b      	lsls	r3, r3, #1
 800df42:	4413      	add	r3, r2
 800df44:	00db      	lsls	r3, r3, #3
 800df46:	440b      	add	r3, r1
 800df48:	2200      	movs	r2, #0
 800df4a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800df52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df56:	9300      	str	r3, [sp, #0]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6939      	ldr	r1, [r7, #16]
 800df5c:	68f8      	ldr	r0, [r7, #12]
 800df5e:	f001 ff97 	bl	800fe90 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800df62:	6938      	ldr	r0, [r7, #16]
 800df64:	f7f9 fe28 	bl	8007bb8 <pbuf_free>
  }
  return ERR_OK;
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3718      	adds	r7, #24
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	080150e0 	.word	0x080150e0
 800df78:	080151d8 	.word	0x080151d8
 800df7c:	08015158 	.word	0x08015158
 800df80:	200008a8 	.word	0x200008a8

0800df84 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800df8c:	2300      	movs	r3, #0
 800df8e:	60fb      	str	r3, [r7, #12]
 800df90:	e01e      	b.n	800dfd0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800df92:	4913      	ldr	r1, [pc, #76]	; (800dfe0 <etharp_cleanup_netif+0x5c>)
 800df94:	68fa      	ldr	r2, [r7, #12]
 800df96:	4613      	mov	r3, r2
 800df98:	005b      	lsls	r3, r3, #1
 800df9a:	4413      	add	r3, r2
 800df9c:	00db      	lsls	r3, r3, #3
 800df9e:	440b      	add	r3, r1
 800dfa0:	3314      	adds	r3, #20
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800dfa6:	7afb      	ldrb	r3, [r7, #11]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d00e      	beq.n	800dfca <etharp_cleanup_netif+0x46>
 800dfac:	490c      	ldr	r1, [pc, #48]	; (800dfe0 <etharp_cleanup_netif+0x5c>)
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	005b      	lsls	r3, r3, #1
 800dfb4:	4413      	add	r3, r2
 800dfb6:	00db      	lsls	r3, r3, #3
 800dfb8:	440b      	add	r3, r1
 800dfba:	3308      	adds	r3, #8
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d102      	bne.n	800dfca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f7ff fce5 	bl	800d994 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	3301      	adds	r3, #1
 800dfce:	60fb      	str	r3, [r7, #12]
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2b09      	cmp	r3, #9
 800dfd4:	dddd      	ble.n	800df92 <etharp_cleanup_netif+0xe>
    }
  }
}
 800dfd6:	bf00      	nop
 800dfd8:	bf00      	nop
 800dfda:	3710      	adds	r7, #16
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	200008a8 	.word	0x200008a8

0800dfe4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800dfe4:	b5b0      	push	{r4, r5, r7, lr}
 800dfe6:	b08a      	sub	sp, #40	; 0x28
 800dfe8:	af04      	add	r7, sp, #16
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d107      	bne.n	800e004 <etharp_input+0x20>
 800dff4:	4b3d      	ldr	r3, [pc, #244]	; (800e0ec <etharp_input+0x108>)
 800dff6:	f240 228a 	movw	r2, #650	; 0x28a
 800dffa:	493d      	ldr	r1, [pc, #244]	; (800e0f0 <etharp_input+0x10c>)
 800dffc:	483d      	ldr	r0, [pc, #244]	; (800e0f4 <etharp_input+0x110>)
 800dffe:	f002 fcf5 	bl	80109ec <iprintf>
 800e002:	e06f      	b.n	800e0e4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	881b      	ldrh	r3, [r3, #0]
 800e00e:	b29b      	uxth	r3, r3
 800e010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e014:	d10c      	bne.n	800e030 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e01a:	2b06      	cmp	r3, #6
 800e01c:	d108      	bne.n	800e030 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e022:	2b04      	cmp	r3, #4
 800e024:	d104      	bne.n	800e030 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	885b      	ldrh	r3, [r3, #2]
 800e02a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e02c:	2b08      	cmp	r3, #8
 800e02e:	d003      	beq.n	800e038 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7f9 fdc1 	bl	8007bb8 <pbuf_free>
    return;
 800e036:	e055      	b.n	800e0e4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	330e      	adds	r3, #14
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	3318      	adds	r3, #24
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	3304      	adds	r3, #4
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d102      	bne.n	800e058 <etharp_input+0x74>
    for_us = 0;
 800e052:	2300      	movs	r3, #0
 800e054:	75fb      	strb	r3, [r7, #23]
 800e056:	e009      	b.n	800e06c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e058:	68ba      	ldr	r2, [r7, #8]
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	3304      	adds	r3, #4
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	429a      	cmp	r2, r3
 800e062:	bf0c      	ite	eq
 800e064:	2301      	moveq	r3, #1
 800e066:	2300      	movne	r3, #0
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	f103 0208 	add.w	r2, r3, #8
 800e072:	7dfb      	ldrb	r3, [r7, #23]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d001      	beq.n	800e07c <etharp_input+0x98>
 800e078:	2301      	movs	r3, #1
 800e07a:	e000      	b.n	800e07e <etharp_input+0x9a>
 800e07c:	2302      	movs	r3, #2
 800e07e:	f107 010c 	add.w	r1, r7, #12
 800e082:	6838      	ldr	r0, [r7, #0]
 800e084:	f7ff fed8 	bl	800de38 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	88db      	ldrh	r3, [r3, #6]
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e092:	d003      	beq.n	800e09c <etharp_input+0xb8>
 800e094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e098:	d01e      	beq.n	800e0d8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e09a:	e020      	b.n	800e0de <etharp_input+0xfa>
      if (for_us) {
 800e09c:	7dfb      	ldrb	r3, [r7, #23]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d01c      	beq.n	800e0dc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e0b8:	693a      	ldr	r2, [r7, #16]
 800e0ba:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e0bc:	2102      	movs	r1, #2
 800e0be:	9103      	str	r1, [sp, #12]
 800e0c0:	f107 010c 	add.w	r1, r7, #12
 800e0c4:	9102      	str	r1, [sp, #8]
 800e0c6:	9201      	str	r2, [sp, #4]
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	462b      	mov	r3, r5
 800e0cc:	4622      	mov	r2, r4
 800e0ce:	4601      	mov	r1, r0
 800e0d0:	6838      	ldr	r0, [r7, #0]
 800e0d2:	f000 faeb 	bl	800e6ac <etharp_raw>
      break;
 800e0d6:	e001      	b.n	800e0dc <etharp_input+0xf8>
      break;
 800e0d8:	bf00      	nop
 800e0da:	e000      	b.n	800e0de <etharp_input+0xfa>
      break;
 800e0dc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f7f9 fd6a 	bl	8007bb8 <pbuf_free>
}
 800e0e4:	3718      	adds	r7, #24
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bdb0      	pop	{r4, r5, r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	080150e0 	.word	0x080150e0
 800e0f0:	08015230 	.word	0x08015230
 800e0f4:	08015158 	.word	0x08015158

0800e0f8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b086      	sub	sp, #24
 800e0fc:	af02      	add	r7, sp, #8
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	4613      	mov	r3, r2
 800e104:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e106:	79fa      	ldrb	r2, [r7, #7]
 800e108:	4944      	ldr	r1, [pc, #272]	; (800e21c <etharp_output_to_arp_index+0x124>)
 800e10a:	4613      	mov	r3, r2
 800e10c:	005b      	lsls	r3, r3, #1
 800e10e:	4413      	add	r3, r2
 800e110:	00db      	lsls	r3, r3, #3
 800e112:	440b      	add	r3, r1
 800e114:	3314      	adds	r3, #20
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	2b01      	cmp	r3, #1
 800e11a:	d806      	bhi.n	800e12a <etharp_output_to_arp_index+0x32>
 800e11c:	4b40      	ldr	r3, [pc, #256]	; (800e220 <etharp_output_to_arp_index+0x128>)
 800e11e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e122:	4940      	ldr	r1, [pc, #256]	; (800e224 <etharp_output_to_arp_index+0x12c>)
 800e124:	4840      	ldr	r0, [pc, #256]	; (800e228 <etharp_output_to_arp_index+0x130>)
 800e126:	f002 fc61 	bl	80109ec <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e12a:	79fa      	ldrb	r2, [r7, #7]
 800e12c:	493b      	ldr	r1, [pc, #236]	; (800e21c <etharp_output_to_arp_index+0x124>)
 800e12e:	4613      	mov	r3, r2
 800e130:	005b      	lsls	r3, r3, #1
 800e132:	4413      	add	r3, r2
 800e134:	00db      	lsls	r3, r3, #3
 800e136:	440b      	add	r3, r1
 800e138:	3314      	adds	r3, #20
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d153      	bne.n	800e1e8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e140:	79fa      	ldrb	r2, [r7, #7]
 800e142:	4936      	ldr	r1, [pc, #216]	; (800e21c <etharp_output_to_arp_index+0x124>)
 800e144:	4613      	mov	r3, r2
 800e146:	005b      	lsls	r3, r3, #1
 800e148:	4413      	add	r3, r2
 800e14a:	00db      	lsls	r3, r3, #3
 800e14c:	440b      	add	r3, r1
 800e14e:	3312      	adds	r3, #18
 800e150:	881b      	ldrh	r3, [r3, #0]
 800e152:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e156:	d919      	bls.n	800e18c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e158:	79fa      	ldrb	r2, [r7, #7]
 800e15a:	4613      	mov	r3, r2
 800e15c:	005b      	lsls	r3, r3, #1
 800e15e:	4413      	add	r3, r2
 800e160:	00db      	lsls	r3, r3, #3
 800e162:	4a2e      	ldr	r2, [pc, #184]	; (800e21c <etharp_output_to_arp_index+0x124>)
 800e164:	4413      	add	r3, r2
 800e166:	3304      	adds	r3, #4
 800e168:	4619      	mov	r1, r3
 800e16a:	68f8      	ldr	r0, [r7, #12]
 800e16c:	f000 fb4c 	bl	800e808 <etharp_request>
 800e170:	4603      	mov	r3, r0
 800e172:	2b00      	cmp	r3, #0
 800e174:	d138      	bne.n	800e1e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e176:	79fa      	ldrb	r2, [r7, #7]
 800e178:	4928      	ldr	r1, [pc, #160]	; (800e21c <etharp_output_to_arp_index+0x124>)
 800e17a:	4613      	mov	r3, r2
 800e17c:	005b      	lsls	r3, r3, #1
 800e17e:	4413      	add	r3, r2
 800e180:	00db      	lsls	r3, r3, #3
 800e182:	440b      	add	r3, r1
 800e184:	3314      	adds	r3, #20
 800e186:	2203      	movs	r2, #3
 800e188:	701a      	strb	r2, [r3, #0]
 800e18a:	e02d      	b.n	800e1e8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e18c:	79fa      	ldrb	r2, [r7, #7]
 800e18e:	4923      	ldr	r1, [pc, #140]	; (800e21c <etharp_output_to_arp_index+0x124>)
 800e190:	4613      	mov	r3, r2
 800e192:	005b      	lsls	r3, r3, #1
 800e194:	4413      	add	r3, r2
 800e196:	00db      	lsls	r3, r3, #3
 800e198:	440b      	add	r3, r1
 800e19a:	3312      	adds	r3, #18
 800e19c:	881b      	ldrh	r3, [r3, #0]
 800e19e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e1a2:	d321      	bcc.n	800e1e8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e1a4:	79fa      	ldrb	r2, [r7, #7]
 800e1a6:	4613      	mov	r3, r2
 800e1a8:	005b      	lsls	r3, r3, #1
 800e1aa:	4413      	add	r3, r2
 800e1ac:	00db      	lsls	r3, r3, #3
 800e1ae:	4a1b      	ldr	r2, [pc, #108]	; (800e21c <etharp_output_to_arp_index+0x124>)
 800e1b0:	4413      	add	r3, r2
 800e1b2:	1d19      	adds	r1, r3, #4
 800e1b4:	79fa      	ldrb	r2, [r7, #7]
 800e1b6:	4613      	mov	r3, r2
 800e1b8:	005b      	lsls	r3, r3, #1
 800e1ba:	4413      	add	r3, r2
 800e1bc:	00db      	lsls	r3, r3, #3
 800e1be:	3308      	adds	r3, #8
 800e1c0:	4a16      	ldr	r2, [pc, #88]	; (800e21c <etharp_output_to_arp_index+0x124>)
 800e1c2:	4413      	add	r3, r2
 800e1c4:	3304      	adds	r3, #4
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f000 fafb 	bl	800e7c4 <etharp_request_dst>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d109      	bne.n	800e1e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e1d4:	79fa      	ldrb	r2, [r7, #7]
 800e1d6:	4911      	ldr	r1, [pc, #68]	; (800e21c <etharp_output_to_arp_index+0x124>)
 800e1d8:	4613      	mov	r3, r2
 800e1da:	005b      	lsls	r3, r3, #1
 800e1dc:	4413      	add	r3, r2
 800e1de:	00db      	lsls	r3, r3, #3
 800e1e0:	440b      	add	r3, r1
 800e1e2:	3314      	adds	r3, #20
 800e1e4:	2203      	movs	r2, #3
 800e1e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800e1ee:	79fa      	ldrb	r2, [r7, #7]
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	005b      	lsls	r3, r3, #1
 800e1f4:	4413      	add	r3, r2
 800e1f6:	00db      	lsls	r3, r3, #3
 800e1f8:	3308      	adds	r3, #8
 800e1fa:	4a08      	ldr	r2, [pc, #32]	; (800e21c <etharp_output_to_arp_index+0x124>)
 800e1fc:	4413      	add	r3, r2
 800e1fe:	3304      	adds	r3, #4
 800e200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e204:	9200      	str	r2, [sp, #0]
 800e206:	460a      	mov	r2, r1
 800e208:	68b9      	ldr	r1, [r7, #8]
 800e20a:	68f8      	ldr	r0, [r7, #12]
 800e20c:	f001 fe40 	bl	800fe90 <ethernet_output>
 800e210:	4603      	mov	r3, r0
}
 800e212:	4618      	mov	r0, r3
 800e214:	3710      	adds	r7, #16
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	200008a8 	.word	0x200008a8
 800e220:	080150e0 	.word	0x080150e0
 800e224:	08015250 	.word	0x08015250
 800e228:	08015158 	.word	0x08015158

0800e22c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b08a      	sub	sp, #40	; 0x28
 800e230:	af02      	add	r7, sp, #8
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d106      	bne.n	800e250 <etharp_output+0x24>
 800e242:	4b73      	ldr	r3, [pc, #460]	; (800e410 <etharp_output+0x1e4>)
 800e244:	f240 321e 	movw	r2, #798	; 0x31e
 800e248:	4972      	ldr	r1, [pc, #456]	; (800e414 <etharp_output+0x1e8>)
 800e24a:	4873      	ldr	r0, [pc, #460]	; (800e418 <etharp_output+0x1ec>)
 800e24c:	f002 fbce 	bl	80109ec <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d106      	bne.n	800e264 <etharp_output+0x38>
 800e256:	4b6e      	ldr	r3, [pc, #440]	; (800e410 <etharp_output+0x1e4>)
 800e258:	f240 321f 	movw	r2, #799	; 0x31f
 800e25c:	496f      	ldr	r1, [pc, #444]	; (800e41c <etharp_output+0x1f0>)
 800e25e:	486e      	ldr	r0, [pc, #440]	; (800e418 <etharp_output+0x1ec>)
 800e260:	f002 fbc4 	bl	80109ec <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d106      	bne.n	800e278 <etharp_output+0x4c>
 800e26a:	4b69      	ldr	r3, [pc, #420]	; (800e410 <etharp_output+0x1e4>)
 800e26c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e270:	496b      	ldr	r1, [pc, #428]	; (800e420 <etharp_output+0x1f4>)
 800e272:	4869      	ldr	r0, [pc, #420]	; (800e418 <etharp_output+0x1ec>)
 800e274:	f002 fbba 	bl	80109ec <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	68f9      	ldr	r1, [r7, #12]
 800e27e:	4618      	mov	r0, r3
 800e280:	f000 fef8 	bl	800f074 <ip4_addr_isbroadcast_u32>
 800e284:	4603      	mov	r3, r0
 800e286:	2b00      	cmp	r3, #0
 800e288:	d002      	beq.n	800e290 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e28a:	4b66      	ldr	r3, [pc, #408]	; (800e424 <etharp_output+0x1f8>)
 800e28c:	61fb      	str	r3, [r7, #28]
 800e28e:	e0af      	b.n	800e3f0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e298:	2be0      	cmp	r3, #224	; 0xe0
 800e29a:	d118      	bne.n	800e2ce <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e29c:	2301      	movs	r3, #1
 800e29e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e2a4:	235e      	movs	r3, #94	; 0x5e
 800e2a6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2b2:	b2db      	uxtb	r3, r3
 800e2b4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	3302      	adds	r3, #2
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	3303      	adds	r3, #3
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e2c6:	f107 0310 	add.w	r3, r7, #16
 800e2ca:	61fb      	str	r3, [r7, #28]
 800e2cc:	e090      	b.n	800e3f0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	3304      	adds	r3, #4
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	405a      	eors	r2, r3
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	3308      	adds	r3, #8
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4013      	ands	r3, r2
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d012      	beq.n	800e30c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e2ec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d00b      	beq.n	800e30c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	330c      	adds	r3, #12
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d003      	beq.n	800e306 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	330c      	adds	r3, #12
 800e302:	61bb      	str	r3, [r7, #24]
 800e304:	e002      	b.n	800e30c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e306:	f06f 0303 	mvn.w	r3, #3
 800e30a:	e07d      	b.n	800e408 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e30c:	4b46      	ldr	r3, [pc, #280]	; (800e428 <etharp_output+0x1fc>)
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	4619      	mov	r1, r3
 800e312:	4a46      	ldr	r2, [pc, #280]	; (800e42c <etharp_output+0x200>)
 800e314:	460b      	mov	r3, r1
 800e316:	005b      	lsls	r3, r3, #1
 800e318:	440b      	add	r3, r1
 800e31a:	00db      	lsls	r3, r3, #3
 800e31c:	4413      	add	r3, r2
 800e31e:	3314      	adds	r3, #20
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	2b01      	cmp	r3, #1
 800e324:	d925      	bls.n	800e372 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e326:	4b40      	ldr	r3, [pc, #256]	; (800e428 <etharp_output+0x1fc>)
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	4619      	mov	r1, r3
 800e32c:	4a3f      	ldr	r2, [pc, #252]	; (800e42c <etharp_output+0x200>)
 800e32e:	460b      	mov	r3, r1
 800e330:	005b      	lsls	r3, r3, #1
 800e332:	440b      	add	r3, r1
 800e334:	00db      	lsls	r3, r3, #3
 800e336:	4413      	add	r3, r2
 800e338:	3308      	adds	r3, #8
 800e33a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	429a      	cmp	r2, r3
 800e340:	d117      	bne.n	800e372 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e342:	69bb      	ldr	r3, [r7, #24]
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	4b38      	ldr	r3, [pc, #224]	; (800e428 <etharp_output+0x1fc>)
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	4618      	mov	r0, r3
 800e34c:	4937      	ldr	r1, [pc, #220]	; (800e42c <etharp_output+0x200>)
 800e34e:	4603      	mov	r3, r0
 800e350:	005b      	lsls	r3, r3, #1
 800e352:	4403      	add	r3, r0
 800e354:	00db      	lsls	r3, r3, #3
 800e356:	440b      	add	r3, r1
 800e358:	3304      	adds	r3, #4
 800e35a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d108      	bne.n	800e372 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e360:	4b31      	ldr	r3, [pc, #196]	; (800e428 <etharp_output+0x1fc>)
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	461a      	mov	r2, r3
 800e366:	68b9      	ldr	r1, [r7, #8]
 800e368:	68f8      	ldr	r0, [r7, #12]
 800e36a:	f7ff fec5 	bl	800e0f8 <etharp_output_to_arp_index>
 800e36e:	4603      	mov	r3, r0
 800e370:	e04a      	b.n	800e408 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e372:	2300      	movs	r3, #0
 800e374:	75fb      	strb	r3, [r7, #23]
 800e376:	e031      	b.n	800e3dc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e378:	7dfa      	ldrb	r2, [r7, #23]
 800e37a:	492c      	ldr	r1, [pc, #176]	; (800e42c <etharp_output+0x200>)
 800e37c:	4613      	mov	r3, r2
 800e37e:	005b      	lsls	r3, r3, #1
 800e380:	4413      	add	r3, r2
 800e382:	00db      	lsls	r3, r3, #3
 800e384:	440b      	add	r3, r1
 800e386:	3314      	adds	r3, #20
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	d923      	bls.n	800e3d6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e38e:	7dfa      	ldrb	r2, [r7, #23]
 800e390:	4926      	ldr	r1, [pc, #152]	; (800e42c <etharp_output+0x200>)
 800e392:	4613      	mov	r3, r2
 800e394:	005b      	lsls	r3, r3, #1
 800e396:	4413      	add	r3, r2
 800e398:	00db      	lsls	r3, r3, #3
 800e39a:	440b      	add	r3, r1
 800e39c:	3308      	adds	r3, #8
 800e39e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d117      	bne.n	800e3d6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	6819      	ldr	r1, [r3, #0]
 800e3aa:	7dfa      	ldrb	r2, [r7, #23]
 800e3ac:	481f      	ldr	r0, [pc, #124]	; (800e42c <etharp_output+0x200>)
 800e3ae:	4613      	mov	r3, r2
 800e3b0:	005b      	lsls	r3, r3, #1
 800e3b2:	4413      	add	r3, r2
 800e3b4:	00db      	lsls	r3, r3, #3
 800e3b6:	4403      	add	r3, r0
 800e3b8:	3304      	adds	r3, #4
 800e3ba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e3bc:	4299      	cmp	r1, r3
 800e3be:	d10a      	bne.n	800e3d6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e3c0:	4a19      	ldr	r2, [pc, #100]	; (800e428 <etharp_output+0x1fc>)
 800e3c2:	7dfb      	ldrb	r3, [r7, #23]
 800e3c4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e3c6:	7dfb      	ldrb	r3, [r7, #23]
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	68b9      	ldr	r1, [r7, #8]
 800e3cc:	68f8      	ldr	r0, [r7, #12]
 800e3ce:	f7ff fe93 	bl	800e0f8 <etharp_output_to_arp_index>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	e018      	b.n	800e408 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e3d6:	7dfb      	ldrb	r3, [r7, #23]
 800e3d8:	3301      	adds	r3, #1
 800e3da:	75fb      	strb	r3, [r7, #23]
 800e3dc:	7dfb      	ldrb	r3, [r7, #23]
 800e3de:	2b09      	cmp	r3, #9
 800e3e0:	d9ca      	bls.n	800e378 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e3e2:	68ba      	ldr	r2, [r7, #8]
 800e3e4:	69b9      	ldr	r1, [r7, #24]
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f000 f822 	bl	800e430 <etharp_query>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	e00b      	b.n	800e408 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e3f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3fa:	9300      	str	r3, [sp, #0]
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	68b9      	ldr	r1, [r7, #8]
 800e400:	68f8      	ldr	r0, [r7, #12]
 800e402:	f001 fd45 	bl	800fe90 <ethernet_output>
 800e406:	4603      	mov	r3, r0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3720      	adds	r7, #32
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	080150e0 	.word	0x080150e0
 800e414:	08015230 	.word	0x08015230
 800e418:	08015158 	.word	0x08015158
 800e41c:	08015280 	.word	0x08015280
 800e420:	08015220 	.word	0x08015220
 800e424:	0801609c 	.word	0x0801609c
 800e428:	20000998 	.word	0x20000998
 800e42c:	200008a8 	.word	0x200008a8

0800e430 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b08c      	sub	sp, #48	; 0x30
 800e434:	af02      	add	r7, sp, #8
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	60b9      	str	r1, [r7, #8]
 800e43a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	3326      	adds	r3, #38	; 0x26
 800e440:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e442:	23ff      	movs	r3, #255	; 0xff
 800e444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e448:	2300      	movs	r3, #0
 800e44a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	68f9      	ldr	r1, [r7, #12]
 800e452:	4618      	mov	r0, r3
 800e454:	f000 fe0e 	bl	800f074 <ip4_addr_isbroadcast_u32>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d10c      	bne.n	800e478 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e466:	2be0      	cmp	r3, #224	; 0xe0
 800e468:	d006      	beq.n	800e478 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d003      	beq.n	800e478 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d102      	bne.n	800e47e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e478:	f06f 030f 	mvn.w	r3, #15
 800e47c:	e101      	b.n	800e682 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e47e:	68fa      	ldr	r2, [r7, #12]
 800e480:	2101      	movs	r1, #1
 800e482:	68b8      	ldr	r0, [r7, #8]
 800e484:	f7ff fb60 	bl	800db48 <etharp_find_entry>
 800e488:	4603      	mov	r3, r0
 800e48a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e48c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e490:	2b00      	cmp	r3, #0
 800e492:	da02      	bge.n	800e49a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e494:	8a7b      	ldrh	r3, [r7, #18]
 800e496:	b25b      	sxtb	r3, r3
 800e498:	e0f3      	b.n	800e682 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e49a:	8a7b      	ldrh	r3, [r7, #18]
 800e49c:	2b7e      	cmp	r3, #126	; 0x7e
 800e49e:	d906      	bls.n	800e4ae <etharp_query+0x7e>
 800e4a0:	4b7a      	ldr	r3, [pc, #488]	; (800e68c <etharp_query+0x25c>)
 800e4a2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e4a6:	497a      	ldr	r1, [pc, #488]	; (800e690 <etharp_query+0x260>)
 800e4a8:	487a      	ldr	r0, [pc, #488]	; (800e694 <etharp_query+0x264>)
 800e4aa:	f002 fa9f 	bl	80109ec <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e4ae:	8a7b      	ldrh	r3, [r7, #18]
 800e4b0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e4b2:	7c7a      	ldrb	r2, [r7, #17]
 800e4b4:	4978      	ldr	r1, [pc, #480]	; (800e698 <etharp_query+0x268>)
 800e4b6:	4613      	mov	r3, r2
 800e4b8:	005b      	lsls	r3, r3, #1
 800e4ba:	4413      	add	r3, r2
 800e4bc:	00db      	lsls	r3, r3, #3
 800e4be:	440b      	add	r3, r1
 800e4c0:	3314      	adds	r3, #20
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d115      	bne.n	800e4f4 <etharp_query+0xc4>
    is_new_entry = 1;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e4cc:	7c7a      	ldrb	r2, [r7, #17]
 800e4ce:	4972      	ldr	r1, [pc, #456]	; (800e698 <etharp_query+0x268>)
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	005b      	lsls	r3, r3, #1
 800e4d4:	4413      	add	r3, r2
 800e4d6:	00db      	lsls	r3, r3, #3
 800e4d8:	440b      	add	r3, r1
 800e4da:	3314      	adds	r3, #20
 800e4dc:	2201      	movs	r2, #1
 800e4de:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e4e0:	7c7a      	ldrb	r2, [r7, #17]
 800e4e2:	496d      	ldr	r1, [pc, #436]	; (800e698 <etharp_query+0x268>)
 800e4e4:	4613      	mov	r3, r2
 800e4e6:	005b      	lsls	r3, r3, #1
 800e4e8:	4413      	add	r3, r2
 800e4ea:	00db      	lsls	r3, r3, #3
 800e4ec:	440b      	add	r3, r1
 800e4ee:	3308      	adds	r3, #8
 800e4f0:	68fa      	ldr	r2, [r7, #12]
 800e4f2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e4f4:	7c7a      	ldrb	r2, [r7, #17]
 800e4f6:	4968      	ldr	r1, [pc, #416]	; (800e698 <etharp_query+0x268>)
 800e4f8:	4613      	mov	r3, r2
 800e4fa:	005b      	lsls	r3, r3, #1
 800e4fc:	4413      	add	r3, r2
 800e4fe:	00db      	lsls	r3, r3, #3
 800e500:	440b      	add	r3, r1
 800e502:	3314      	adds	r3, #20
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	2b01      	cmp	r3, #1
 800e508:	d011      	beq.n	800e52e <etharp_query+0xfe>
 800e50a:	7c7a      	ldrb	r2, [r7, #17]
 800e50c:	4962      	ldr	r1, [pc, #392]	; (800e698 <etharp_query+0x268>)
 800e50e:	4613      	mov	r3, r2
 800e510:	005b      	lsls	r3, r3, #1
 800e512:	4413      	add	r3, r2
 800e514:	00db      	lsls	r3, r3, #3
 800e516:	440b      	add	r3, r1
 800e518:	3314      	adds	r3, #20
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	d806      	bhi.n	800e52e <etharp_query+0xfe>
 800e520:	4b5a      	ldr	r3, [pc, #360]	; (800e68c <etharp_query+0x25c>)
 800e522:	f240 32cd 	movw	r2, #973	; 0x3cd
 800e526:	495d      	ldr	r1, [pc, #372]	; (800e69c <etharp_query+0x26c>)
 800e528:	485a      	ldr	r0, [pc, #360]	; (800e694 <etharp_query+0x264>)
 800e52a:	f002 fa5f 	bl	80109ec <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e52e:	6a3b      	ldr	r3, [r7, #32]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d102      	bne.n	800e53a <etharp_query+0x10a>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d10c      	bne.n	800e554 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e53a:	68b9      	ldr	r1, [r7, #8]
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f000 f963 	bl	800e808 <etharp_request>
 800e542:	4603      	mov	r3, r0
 800e544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d102      	bne.n	800e554 <etharp_query+0x124>
      return result;
 800e54e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e552:	e096      	b.n	800e682 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d106      	bne.n	800e568 <etharp_query+0x138>
 800e55a:	4b4c      	ldr	r3, [pc, #304]	; (800e68c <etharp_query+0x25c>)
 800e55c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e560:	494f      	ldr	r1, [pc, #316]	; (800e6a0 <etharp_query+0x270>)
 800e562:	484c      	ldr	r0, [pc, #304]	; (800e694 <etharp_query+0x264>)
 800e564:	f002 fa42 	bl	80109ec <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e568:	7c7a      	ldrb	r2, [r7, #17]
 800e56a:	494b      	ldr	r1, [pc, #300]	; (800e698 <etharp_query+0x268>)
 800e56c:	4613      	mov	r3, r2
 800e56e:	005b      	lsls	r3, r3, #1
 800e570:	4413      	add	r3, r2
 800e572:	00db      	lsls	r3, r3, #3
 800e574:	440b      	add	r3, r1
 800e576:	3314      	adds	r3, #20
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	d917      	bls.n	800e5ae <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e57e:	4a49      	ldr	r2, [pc, #292]	; (800e6a4 <etharp_query+0x274>)
 800e580:	7c7b      	ldrb	r3, [r7, #17]
 800e582:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e584:	7c7a      	ldrb	r2, [r7, #17]
 800e586:	4613      	mov	r3, r2
 800e588:	005b      	lsls	r3, r3, #1
 800e58a:	4413      	add	r3, r2
 800e58c:	00db      	lsls	r3, r3, #3
 800e58e:	3308      	adds	r3, #8
 800e590:	4a41      	ldr	r2, [pc, #260]	; (800e698 <etharp_query+0x268>)
 800e592:	4413      	add	r3, r2
 800e594:	3304      	adds	r3, #4
 800e596:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e59a:	9200      	str	r2, [sp, #0]
 800e59c:	697a      	ldr	r2, [r7, #20]
 800e59e:	6879      	ldr	r1, [r7, #4]
 800e5a0:	68f8      	ldr	r0, [r7, #12]
 800e5a2:	f001 fc75 	bl	800fe90 <ethernet_output>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e5ac:	e067      	b.n	800e67e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e5ae:	7c7a      	ldrb	r2, [r7, #17]
 800e5b0:	4939      	ldr	r1, [pc, #228]	; (800e698 <etharp_query+0x268>)
 800e5b2:	4613      	mov	r3, r2
 800e5b4:	005b      	lsls	r3, r3, #1
 800e5b6:	4413      	add	r3, r2
 800e5b8:	00db      	lsls	r3, r3, #3
 800e5ba:	440b      	add	r3, r1
 800e5bc:	3314      	adds	r3, #20
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d15c      	bne.n	800e67e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e5cc:	e01c      	b.n	800e608 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e5ce:	69fb      	ldr	r3, [r7, #28]
 800e5d0:	895a      	ldrh	r2, [r3, #10]
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	891b      	ldrh	r3, [r3, #8]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d10a      	bne.n	800e5f0 <etharp_query+0x1c0>
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d006      	beq.n	800e5f0 <etharp_query+0x1c0>
 800e5e2:	4b2a      	ldr	r3, [pc, #168]	; (800e68c <etharp_query+0x25c>)
 800e5e4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e5e8:	492f      	ldr	r1, [pc, #188]	; (800e6a8 <etharp_query+0x278>)
 800e5ea:	482a      	ldr	r0, [pc, #168]	; (800e694 <etharp_query+0x264>)
 800e5ec:	f002 f9fe 	bl	80109ec <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e5f0:	69fb      	ldr	r3, [r7, #28]
 800e5f2:	7b1b      	ldrb	r3, [r3, #12]
 800e5f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d002      	beq.n	800e602 <etharp_query+0x1d2>
        copy_needed = 1;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	61bb      	str	r3, [r7, #24]
        break;
 800e600:	e005      	b.n	800e60e <etharp_query+0x1de>
      }
      p = p->next;
 800e602:	69fb      	ldr	r3, [r7, #28]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e608:	69fb      	ldr	r3, [r7, #28]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d1df      	bne.n	800e5ce <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e60e:	69bb      	ldr	r3, [r7, #24]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d007      	beq.n	800e624 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e61a:	200e      	movs	r0, #14
 800e61c:	f7f9 fd28 	bl	8008070 <pbuf_clone>
 800e620:	61f8      	str	r0, [r7, #28]
 800e622:	e004      	b.n	800e62e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e628:	69f8      	ldr	r0, [r7, #28]
 800e62a:	f7f9 fb65 	bl	8007cf8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d021      	beq.n	800e678 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e634:	7c7a      	ldrb	r2, [r7, #17]
 800e636:	4918      	ldr	r1, [pc, #96]	; (800e698 <etharp_query+0x268>)
 800e638:	4613      	mov	r3, r2
 800e63a:	005b      	lsls	r3, r3, #1
 800e63c:	4413      	add	r3, r2
 800e63e:	00db      	lsls	r3, r3, #3
 800e640:	440b      	add	r3, r1
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d00a      	beq.n	800e65e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e648:	7c7a      	ldrb	r2, [r7, #17]
 800e64a:	4913      	ldr	r1, [pc, #76]	; (800e698 <etharp_query+0x268>)
 800e64c:	4613      	mov	r3, r2
 800e64e:	005b      	lsls	r3, r3, #1
 800e650:	4413      	add	r3, r2
 800e652:	00db      	lsls	r3, r3, #3
 800e654:	440b      	add	r3, r1
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4618      	mov	r0, r3
 800e65a:	f7f9 faad 	bl	8007bb8 <pbuf_free>
      }
      arp_table[i].q = p;
 800e65e:	7c7a      	ldrb	r2, [r7, #17]
 800e660:	490d      	ldr	r1, [pc, #52]	; (800e698 <etharp_query+0x268>)
 800e662:	4613      	mov	r3, r2
 800e664:	005b      	lsls	r3, r3, #1
 800e666:	4413      	add	r3, r2
 800e668:	00db      	lsls	r3, r3, #3
 800e66a:	440b      	add	r3, r1
 800e66c:	69fa      	ldr	r2, [r7, #28]
 800e66e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e670:	2300      	movs	r3, #0
 800e672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e676:	e002      	b.n	800e67e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e678:	23ff      	movs	r3, #255	; 0xff
 800e67a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e67e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e682:	4618      	mov	r0, r3
 800e684:	3728      	adds	r7, #40	; 0x28
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	080150e0 	.word	0x080150e0
 800e690:	0801528c 	.word	0x0801528c
 800e694:	08015158 	.word	0x08015158
 800e698:	200008a8 	.word	0x200008a8
 800e69c:	0801529c 	.word	0x0801529c
 800e6a0:	08015280 	.word	0x08015280
 800e6a4:	20000998 	.word	0x20000998
 800e6a8:	080152c4 	.word	0x080152c4

0800e6ac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b08a      	sub	sp, #40	; 0x28
 800e6b0:	af02      	add	r7, sp, #8
 800e6b2:	60f8      	str	r0, [r7, #12]
 800e6b4:	60b9      	str	r1, [r7, #8]
 800e6b6:	607a      	str	r2, [r7, #4]
 800e6b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d106      	bne.n	800e6d2 <etharp_raw+0x26>
 800e6c4:	4b3a      	ldr	r3, [pc, #232]	; (800e7b0 <etharp_raw+0x104>)
 800e6c6:	f240 4257 	movw	r2, #1111	; 0x457
 800e6ca:	493a      	ldr	r1, [pc, #232]	; (800e7b4 <etharp_raw+0x108>)
 800e6cc:	483a      	ldr	r0, [pc, #232]	; (800e7b8 <etharp_raw+0x10c>)
 800e6ce:	f002 f98d 	bl	80109ec <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e6d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e6d6:	211c      	movs	r1, #28
 800e6d8:	200e      	movs	r0, #14
 800e6da:	f7f8 ff89 	bl	80075f0 <pbuf_alloc>
 800e6de:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e6e0:	69bb      	ldr	r3, [r7, #24]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d102      	bne.n	800e6ec <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ea:	e05d      	b.n	800e7a8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e6ec:	69bb      	ldr	r3, [r7, #24]
 800e6ee:	895b      	ldrh	r3, [r3, #10]
 800e6f0:	2b1b      	cmp	r3, #27
 800e6f2:	d806      	bhi.n	800e702 <etharp_raw+0x56>
 800e6f4:	4b2e      	ldr	r3, [pc, #184]	; (800e7b0 <etharp_raw+0x104>)
 800e6f6:	f240 4262 	movw	r2, #1122	; 0x462
 800e6fa:	4930      	ldr	r1, [pc, #192]	; (800e7bc <etharp_raw+0x110>)
 800e6fc:	482e      	ldr	r0, [pc, #184]	; (800e7b8 <etharp_raw+0x10c>)
 800e6fe:	f002 f975 	bl	80109ec <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	685b      	ldr	r3, [r3, #4]
 800e706:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e708:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7f7 fef6 	bl	80064fc <lwip_htons>
 800e710:	4603      	mov	r3, r0
 800e712:	461a      	mov	r2, r3
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e71e:	2b06      	cmp	r3, #6
 800e720:	d006      	beq.n	800e730 <etharp_raw+0x84>
 800e722:	4b23      	ldr	r3, [pc, #140]	; (800e7b0 <etharp_raw+0x104>)
 800e724:	f240 4269 	movw	r2, #1129	; 0x469
 800e728:	4925      	ldr	r1, [pc, #148]	; (800e7c0 <etharp_raw+0x114>)
 800e72a:	4823      	ldr	r0, [pc, #140]	; (800e7b8 <etharp_raw+0x10c>)
 800e72c:	f002 f95e 	bl	80109ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	3308      	adds	r3, #8
 800e734:	2206      	movs	r2, #6
 800e736:	6839      	ldr	r1, [r7, #0]
 800e738:	4618      	mov	r0, r3
 800e73a:	f002 fa70 	bl	8010c1e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	3312      	adds	r3, #18
 800e742:	2206      	movs	r2, #6
 800e744:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e746:	4618      	mov	r0, r3
 800e748:	f002 fa69 	bl	8010c1e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	330e      	adds	r3, #14
 800e750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e752:	6812      	ldr	r2, [r2, #0]
 800e754:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	3318      	adds	r3, #24
 800e75a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e75c:	6812      	ldr	r2, [r2, #0]
 800e75e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	2200      	movs	r2, #0
 800e764:	701a      	strb	r2, [r3, #0]
 800e766:	2200      	movs	r2, #0
 800e768:	f042 0201 	orr.w	r2, r2, #1
 800e76c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	2200      	movs	r2, #0
 800e772:	f042 0208 	orr.w	r2, r2, #8
 800e776:	709a      	strb	r2, [r3, #2]
 800e778:	2200      	movs	r2, #0
 800e77a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	2206      	movs	r2, #6
 800e780:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	2204      	movs	r2, #4
 800e786:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e788:	f640 0306 	movw	r3, #2054	; 0x806
 800e78c:	9300      	str	r3, [sp, #0]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	69b9      	ldr	r1, [r7, #24]
 800e794:	68f8      	ldr	r0, [r7, #12]
 800e796:	f001 fb7b 	bl	800fe90 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e79a:	69b8      	ldr	r0, [r7, #24]
 800e79c:	f7f9 fa0c 	bl	8007bb8 <pbuf_free>
  p = NULL;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e7a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3720      	adds	r7, #32
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	080150e0 	.word	0x080150e0
 800e7b4:	08015230 	.word	0x08015230
 800e7b8:	08015158 	.word	0x08015158
 800e7bc:	080152e0 	.word	0x080152e0
 800e7c0:	08015314 	.word	0x08015314

0800e7c4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b088      	sub	sp, #32
 800e7c8:	af04      	add	r7, sp, #16
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	9203      	str	r2, [sp, #12]
 800e7e4:	68ba      	ldr	r2, [r7, #8]
 800e7e6:	9202      	str	r2, [sp, #8]
 800e7e8:	4a06      	ldr	r2, [pc, #24]	; (800e804 <etharp_request_dst+0x40>)
 800e7ea:	9201      	str	r2, [sp, #4]
 800e7ec:	9300      	str	r3, [sp, #0]
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	68f8      	ldr	r0, [r7, #12]
 800e7f4:	f7ff ff5a 	bl	800e6ac <etharp_raw>
 800e7f8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	080160a4 	.word	0x080160a4

0800e808 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e812:	4a05      	ldr	r2, [pc, #20]	; (800e828 <etharp_request+0x20>)
 800e814:	6839      	ldr	r1, [r7, #0]
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f7ff ffd4 	bl	800e7c4 <etharp_request_dst>
 800e81c:	4603      	mov	r3, r0
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3708      	adds	r7, #8
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	0801609c 	.word	0x0801609c

0800e82c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b08e      	sub	sp, #56	; 0x38
 800e830:	af04      	add	r7, sp, #16
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e836:	4b79      	ldr	r3, [pc, #484]	; (800ea1c <icmp_input+0x1f0>)
 800e838:	689b      	ldr	r3, [r3, #8]
 800e83a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	f003 030f 	and.w	r3, r3, #15
 800e844:	b2db      	uxtb	r3, r3
 800e846:	009b      	lsls	r3, r3, #2
 800e848:	b2db      	uxtb	r3, r3
 800e84a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e84c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e84e:	2b13      	cmp	r3, #19
 800e850:	f240 80cd 	bls.w	800e9ee <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	895b      	ldrh	r3, [r3, #10]
 800e858:	2b03      	cmp	r3, #3
 800e85a:	f240 80ca 	bls.w	800e9f2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e868:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	f000 80b7 	beq.w	800e9e0 <icmp_input+0x1b4>
 800e872:	2b08      	cmp	r3, #8
 800e874:	f040 80b7 	bne.w	800e9e6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e878:	4b69      	ldr	r3, [pc, #420]	; (800ea20 <icmp_input+0x1f4>)
 800e87a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e87c:	4b67      	ldr	r3, [pc, #412]	; (800ea1c <icmp_input+0x1f0>)
 800e87e:	695b      	ldr	r3, [r3, #20]
 800e880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e884:	2be0      	cmp	r3, #224	; 0xe0
 800e886:	f000 80bb 	beq.w	800ea00 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e88a:	4b64      	ldr	r3, [pc, #400]	; (800ea1c <icmp_input+0x1f0>)
 800e88c:	695b      	ldr	r3, [r3, #20]
 800e88e:	4a63      	ldr	r2, [pc, #396]	; (800ea1c <icmp_input+0x1f0>)
 800e890:	6812      	ldr	r2, [r2, #0]
 800e892:	4611      	mov	r1, r2
 800e894:	4618      	mov	r0, r3
 800e896:	f000 fbed 	bl	800f074 <ip4_addr_isbroadcast_u32>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	f040 80b1 	bne.w	800ea04 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	891b      	ldrh	r3, [r3, #8]
 800e8a6:	2b07      	cmp	r3, #7
 800e8a8:	f240 80a5 	bls.w	800e9f6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e8ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8ae:	330e      	adds	r3, #14
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f7f9 f8ea 	bl	8007a8c <pbuf_add_header>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d04b      	beq.n	800e956 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	891a      	ldrh	r2, [r3, #8]
 800e8c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8c4:	4413      	add	r3, r2
 800e8c6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	891b      	ldrh	r3, [r3, #8]
 800e8cc:	8b7a      	ldrh	r2, [r7, #26]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	f0c0 809a 	bcc.w	800ea08 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e8d4:	8b7b      	ldrh	r3, [r7, #26]
 800e8d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e8da:	4619      	mov	r1, r3
 800e8dc:	200e      	movs	r0, #14
 800e8de:	f7f8 fe87 	bl	80075f0 <pbuf_alloc>
 800e8e2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	f000 8090 	beq.w	800ea0c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	895b      	ldrh	r3, [r3, #10]
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8f4:	3308      	adds	r3, #8
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d203      	bcs.n	800e902 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e8fa:	6978      	ldr	r0, [r7, #20]
 800e8fc:	f7f9 f95c 	bl	8007bb8 <pbuf_free>
          goto icmperr;
 800e900:	e085      	b.n	800ea0e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e90a:	4618      	mov	r0, r3
 800e90c:	f002 f987 	bl	8010c1e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e910:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e912:	4619      	mov	r1, r3
 800e914:	6978      	ldr	r0, [r7, #20]
 800e916:	f7f9 f8c9 	bl	8007aac <pbuf_remove_header>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d009      	beq.n	800e934 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e920:	4b40      	ldr	r3, [pc, #256]	; (800ea24 <icmp_input+0x1f8>)
 800e922:	22b6      	movs	r2, #182	; 0xb6
 800e924:	4940      	ldr	r1, [pc, #256]	; (800ea28 <icmp_input+0x1fc>)
 800e926:	4841      	ldr	r0, [pc, #260]	; (800ea2c <icmp_input+0x200>)
 800e928:	f002 f860 	bl	80109ec <iprintf>
          pbuf_free(r);
 800e92c:	6978      	ldr	r0, [r7, #20]
 800e92e:	f7f9 f943 	bl	8007bb8 <pbuf_free>
          goto icmperr;
 800e932:	e06c      	b.n	800ea0e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e934:	6879      	ldr	r1, [r7, #4]
 800e936:	6978      	ldr	r0, [r7, #20]
 800e938:	f7f9 fa56 	bl	8007de8 <pbuf_copy>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d003      	beq.n	800e94a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e942:	6978      	ldr	r0, [r7, #20]
 800e944:	f7f9 f938 	bl	8007bb8 <pbuf_free>
          goto icmperr;
 800e948:	e061      	b.n	800ea0e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f7f9 f934 	bl	8007bb8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	607b      	str	r3, [r7, #4]
 800e954:	e00f      	b.n	800e976 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e956:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e958:	330e      	adds	r3, #14
 800e95a:	4619      	mov	r1, r3
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f7f9 f8a5 	bl	8007aac <pbuf_remove_header>
 800e962:	4603      	mov	r3, r0
 800e964:	2b00      	cmp	r3, #0
 800e966:	d006      	beq.n	800e976 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e968:	4b2e      	ldr	r3, [pc, #184]	; (800ea24 <icmp_input+0x1f8>)
 800e96a:	22c7      	movs	r2, #199	; 0xc7
 800e96c:	4930      	ldr	r1, [pc, #192]	; (800ea30 <icmp_input+0x204>)
 800e96e:	482f      	ldr	r0, [pc, #188]	; (800ea2c <icmp_input+0x200>)
 800e970:	f002 f83c 	bl	80109ec <iprintf>
          goto icmperr;
 800e974:	e04b      	b.n	800ea0e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e97c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e97e:	4619      	mov	r1, r3
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f7f9 f883 	bl	8007a8c <pbuf_add_header>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d12b      	bne.n	800e9e4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e99a:	4b20      	ldr	r3, [pc, #128]	; (800ea1c <icmp_input+0x1f0>)
 800e99c:	691a      	ldr	r2, [r3, #16]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	709a      	strb	r2, [r3, #2]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	22ff      	movs	r2, #255	; 0xff
 800e9b6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	729a      	strb	r2, [r3, #10]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	9302      	str	r3, [sp, #8]
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	9301      	str	r3, [sp, #4]
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	9300      	str	r3, [sp, #0]
 800e9ce:	23ff      	movs	r3, #255	; 0xff
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	69f9      	ldr	r1, [r7, #28]
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f000 fa75 	bl	800eec4 <ip4_output_if>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e9de:	e001      	b.n	800e9e4 <icmp_input+0x1b8>
      break;
 800e9e0:	bf00      	nop
 800e9e2:	e000      	b.n	800e9e6 <icmp_input+0x1ba>
      break;
 800e9e4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f7f9 f8e6 	bl	8007bb8 <pbuf_free>
  return;
 800e9ec:	e013      	b.n	800ea16 <icmp_input+0x1ea>
    goto lenerr;
 800e9ee:	bf00      	nop
 800e9f0:	e002      	b.n	800e9f8 <icmp_input+0x1cc>
    goto lenerr;
 800e9f2:	bf00      	nop
 800e9f4:	e000      	b.n	800e9f8 <icmp_input+0x1cc>
        goto lenerr;
 800e9f6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f7f9 f8dd 	bl	8007bb8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e9fe:	e00a      	b.n	800ea16 <icmp_input+0x1ea>
        goto icmperr;
 800ea00:	bf00      	nop
 800ea02:	e004      	b.n	800ea0e <icmp_input+0x1e2>
        goto icmperr;
 800ea04:	bf00      	nop
 800ea06:	e002      	b.n	800ea0e <icmp_input+0x1e2>
          goto icmperr;
 800ea08:	bf00      	nop
 800ea0a:	e000      	b.n	800ea0e <icmp_input+0x1e2>
          goto icmperr;
 800ea0c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f7f9 f8d2 	bl	8007bb8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ea14:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ea16:	3728      	adds	r7, #40	; 0x28
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	200056dc 	.word	0x200056dc
 800ea20:	200056f0 	.word	0x200056f0
 800ea24:	08015358 	.word	0x08015358
 800ea28:	08015390 	.word	0x08015390
 800ea2c:	080153c8 	.word	0x080153c8
 800ea30:	080153f0 	.word	0x080153f0

0800ea34 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ea40:	78fb      	ldrb	r3, [r7, #3]
 800ea42:	461a      	mov	r2, r3
 800ea44:	2103      	movs	r1, #3
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f000 f814 	bl	800ea74 <icmp_send_response>
}
 800ea4c:	bf00      	nop
 800ea4e:	3708      	adds	r7, #8
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ea60:	78fb      	ldrb	r3, [r7, #3]
 800ea62:	461a      	mov	r2, r3
 800ea64:	210b      	movs	r1, #11
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f000 f804 	bl	800ea74 <icmp_send_response>
}
 800ea6c:	bf00      	nop
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b08c      	sub	sp, #48	; 0x30
 800ea78:	af04      	add	r7, sp, #16
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	70fb      	strb	r3, [r7, #3]
 800ea80:	4613      	mov	r3, r2
 800ea82:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ea84:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ea88:	2124      	movs	r1, #36	; 0x24
 800ea8a:	2022      	movs	r0, #34	; 0x22
 800ea8c:	f7f8 fdb0 	bl	80075f0 <pbuf_alloc>
 800ea90:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d04c      	beq.n	800eb32 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	895b      	ldrh	r3, [r3, #10]
 800ea9c:	2b23      	cmp	r3, #35	; 0x23
 800ea9e:	d806      	bhi.n	800eaae <icmp_send_response+0x3a>
 800eaa0:	4b26      	ldr	r3, [pc, #152]	; (800eb3c <icmp_send_response+0xc8>)
 800eaa2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800eaa6:	4926      	ldr	r1, [pc, #152]	; (800eb40 <icmp_send_response+0xcc>)
 800eaa8:	4826      	ldr	r0, [pc, #152]	; (800eb44 <icmp_send_response+0xd0>)
 800eaaa:	f001 ff9f 	bl	80109ec <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	78fa      	ldrb	r2, [r7, #3]
 800eabe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	78ba      	ldrb	r2, [r7, #2]
 800eac4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	2200      	movs	r2, #0
 800eaca:	711a      	strb	r2, [r3, #4]
 800eacc:	2200      	movs	r2, #0
 800eace:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	2200      	movs	r2, #0
 800ead4:	719a      	strb	r2, [r3, #6]
 800ead6:	2200      	movs	r2, #0
 800ead8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	f103 0008 	add.w	r0, r3, #8
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	221c      	movs	r2, #28
 800eae8:	4619      	mov	r1, r3
 800eaea:	f002 f898 	bl	8010c1e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800eaee:	69bb      	ldr	r3, [r7, #24]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800eaf4:	f107 030c 	add.w	r3, r7, #12
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f000 f825 	bl	800eb48 <ip4_route>
 800eafe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d011      	beq.n	800eb2a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	709a      	strb	r2, [r3, #2]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800eb10:	f107 020c 	add.w	r2, r7, #12
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	9302      	str	r3, [sp, #8]
 800eb18:	2301      	movs	r3, #1
 800eb1a:	9301      	str	r3, [sp, #4]
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	9300      	str	r3, [sp, #0]
 800eb20:	23ff      	movs	r3, #255	; 0xff
 800eb22:	2100      	movs	r1, #0
 800eb24:	69f8      	ldr	r0, [r7, #28]
 800eb26:	f000 f9cd 	bl	800eec4 <ip4_output_if>
  }
  pbuf_free(q);
 800eb2a:	69f8      	ldr	r0, [r7, #28]
 800eb2c:	f7f9 f844 	bl	8007bb8 <pbuf_free>
 800eb30:	e000      	b.n	800eb34 <icmp_send_response+0xc0>
    return;
 800eb32:	bf00      	nop
}
 800eb34:	3720      	adds	r7, #32
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	08015358 	.word	0x08015358
 800eb40:	08015424 	.word	0x08015424
 800eb44:	080153c8 	.word	0x080153c8

0800eb48 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b085      	sub	sp, #20
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800eb50:	4b33      	ldr	r3, [pc, #204]	; (800ec20 <ip4_route+0xd8>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	60fb      	str	r3, [r7, #12]
 800eb56:	e036      	b.n	800ebc6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eb5e:	f003 0301 	and.w	r3, r3, #1
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d02b      	beq.n	800ebc0 <ip4_route+0x78>
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eb6e:	089b      	lsrs	r3, r3, #2
 800eb70:	f003 0301 	and.w	r3, r3, #1
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d022      	beq.n	800ebc0 <ip4_route+0x78>
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	3304      	adds	r3, #4
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d01d      	beq.n	800ebc0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681a      	ldr	r2, [r3, #0]
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	3304      	adds	r3, #4
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	405a      	eors	r2, r3
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	3308      	adds	r3, #8
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4013      	ands	r3, r2
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d101      	bne.n	800eba0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	e038      	b.n	800ec12 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eba6:	f003 0302 	and.w	r3, r3, #2
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d108      	bne.n	800ebc0 <ip4_route+0x78>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	330c      	adds	r3, #12
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d101      	bne.n	800ebc0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	e028      	b.n	800ec12 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	60fb      	str	r3, [r7, #12]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d1c5      	bne.n	800eb58 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ebcc:	4b15      	ldr	r3, [pc, #84]	; (800ec24 <ip4_route+0xdc>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d01a      	beq.n	800ec0a <ip4_route+0xc2>
 800ebd4:	4b13      	ldr	r3, [pc, #76]	; (800ec24 <ip4_route+0xdc>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ebdc:	f003 0301 	and.w	r3, r3, #1
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d012      	beq.n	800ec0a <ip4_route+0xc2>
 800ebe4:	4b0f      	ldr	r3, [pc, #60]	; (800ec24 <ip4_route+0xdc>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ebec:	f003 0304 	and.w	r3, r3, #4
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d00a      	beq.n	800ec0a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ebf4:	4b0b      	ldr	r3, [pc, #44]	; (800ec24 <ip4_route+0xdc>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	3304      	adds	r3, #4
 800ebfa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d004      	beq.n	800ec0a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	2b7f      	cmp	r3, #127	; 0x7f
 800ec08:	d101      	bne.n	800ec0e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	e001      	b.n	800ec12 <ip4_route+0xca>
  }

  return netif_default;
 800ec0e:	4b05      	ldr	r3, [pc, #20]	; (800ec24 <ip4_route+0xdc>)
 800ec10:	681b      	ldr	r3, [r3, #0]
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3714      	adds	r7, #20
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr
 800ec1e:	bf00      	nop
 800ec20:	2000add0 	.word	0x2000add0
 800ec24:	2000add4 	.word	0x2000add4

0800ec28 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ec36:	f003 0301 	and.w	r3, r3, #1
 800ec3a:	b2db      	uxtb	r3, r3
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d016      	beq.n	800ec6e <ip4_input_accept+0x46>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	3304      	adds	r3, #4
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d011      	beq.n	800ec6e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ec4a:	4b0b      	ldr	r3, [pc, #44]	; (800ec78 <ip4_input_accept+0x50>)
 800ec4c:	695a      	ldr	r2, [r3, #20]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	3304      	adds	r3, #4
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d008      	beq.n	800ec6a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ec58:	4b07      	ldr	r3, [pc, #28]	; (800ec78 <ip4_input_accept+0x50>)
 800ec5a:	695b      	ldr	r3, [r3, #20]
 800ec5c:	6879      	ldr	r1, [r7, #4]
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f000 fa08 	bl	800f074 <ip4_addr_isbroadcast_u32>
 800ec64:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d001      	beq.n	800ec6e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	e000      	b.n	800ec70 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ec6e:	2300      	movs	r3, #0
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3708      	adds	r7, #8
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	200056dc 	.word	0x200056dc

0800ec7c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b086      	sub	sp, #24
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	091b      	lsrs	r3, r3, #4
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	2b04      	cmp	r3, #4
 800ec96:	d004      	beq.n	800eca2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f7f8 ff8d 	bl	8007bb8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	e107      	b.n	800eeb2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	f003 030f 	and.w	r3, r3, #15
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	b2db      	uxtb	r3, r3
 800ecb0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	885b      	ldrh	r3, [r3, #2]
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7f7 fc1f 	bl	80064fc <lwip_htons>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	891b      	ldrh	r3, [r3, #8]
 800ecc6:	89ba      	ldrh	r2, [r7, #12]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d204      	bcs.n	800ecd6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800eccc:	89bb      	ldrh	r3, [r7, #12]
 800ecce:	4619      	mov	r1, r3
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f7f8 fdeb 	bl	80078ac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	895b      	ldrh	r3, [r3, #10]
 800ecda:	89fa      	ldrh	r2, [r7, #14]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d807      	bhi.n	800ecf0 <ip4_input+0x74>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	891b      	ldrh	r3, [r3, #8]
 800ece4:	89ba      	ldrh	r2, [r7, #12]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d802      	bhi.n	800ecf0 <ip4_input+0x74>
 800ecea:	89fb      	ldrh	r3, [r7, #14]
 800ecec:	2b13      	cmp	r3, #19
 800ecee:	d804      	bhi.n	800ecfa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f7f8 ff61 	bl	8007bb8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	e0db      	b.n	800eeb2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	691b      	ldr	r3, [r3, #16]
 800ecfe:	4a6f      	ldr	r2, [pc, #444]	; (800eebc <ip4_input+0x240>)
 800ed00:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	68db      	ldr	r3, [r3, #12]
 800ed06:	4a6d      	ldr	r2, [pc, #436]	; (800eebc <ip4_input+0x240>)
 800ed08:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ed0a:	4b6c      	ldr	r3, [pc, #432]	; (800eebc <ip4_input+0x240>)
 800ed0c:	695b      	ldr	r3, [r3, #20]
 800ed0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed12:	2be0      	cmp	r3, #224	; 0xe0
 800ed14:	d112      	bne.n	800ed3c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed1c:	f003 0301 	and.w	r3, r3, #1
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d007      	beq.n	800ed36 <ip4_input+0xba>
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	3304      	adds	r3, #4
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d002      	beq.n	800ed36 <ip4_input+0xba>
      netif = inp;
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	613b      	str	r3, [r7, #16]
 800ed34:	e02a      	b.n	800ed8c <ip4_input+0x110>
    } else {
      netif = NULL;
 800ed36:	2300      	movs	r3, #0
 800ed38:	613b      	str	r3, [r7, #16]
 800ed3a:	e027      	b.n	800ed8c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ed3c:	6838      	ldr	r0, [r7, #0]
 800ed3e:	f7ff ff73 	bl	800ec28 <ip4_input_accept>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d002      	beq.n	800ed4e <ip4_input+0xd2>
      netif = inp;
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	613b      	str	r3, [r7, #16]
 800ed4c:	e01e      	b.n	800ed8c <ip4_input+0x110>
    } else {
      netif = NULL;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ed52:	4b5a      	ldr	r3, [pc, #360]	; (800eebc <ip4_input+0x240>)
 800ed54:	695b      	ldr	r3, [r3, #20]
 800ed56:	b2db      	uxtb	r3, r3
 800ed58:	2b7f      	cmp	r3, #127	; 0x7f
 800ed5a:	d017      	beq.n	800ed8c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ed5c:	4b58      	ldr	r3, [pc, #352]	; (800eec0 <ip4_input+0x244>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	613b      	str	r3, [r7, #16]
 800ed62:	e00e      	b.n	800ed82 <ip4_input+0x106>
          if (netif == inp) {
 800ed64:	693a      	ldr	r2, [r7, #16]
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d006      	beq.n	800ed7a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ed6c:	6938      	ldr	r0, [r7, #16]
 800ed6e:	f7ff ff5b 	bl	800ec28 <ip4_input_accept>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d108      	bne.n	800ed8a <ip4_input+0x10e>
 800ed78:	e000      	b.n	800ed7c <ip4_input+0x100>
            continue;
 800ed7a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	613b      	str	r3, [r7, #16]
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d1ed      	bne.n	800ed64 <ip4_input+0xe8>
 800ed88:	e000      	b.n	800ed8c <ip4_input+0x110>
            break;
 800ed8a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ed8c:	4b4b      	ldr	r3, [pc, #300]	; (800eebc <ip4_input+0x240>)
 800ed8e:	691b      	ldr	r3, [r3, #16]
 800ed90:	6839      	ldr	r1, [r7, #0]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f000 f96e 	bl	800f074 <ip4_addr_isbroadcast_u32>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d105      	bne.n	800edaa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ed9e:	4b47      	ldr	r3, [pc, #284]	; (800eebc <ip4_input+0x240>)
 800eda0:	691b      	ldr	r3, [r3, #16]
 800eda2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eda6:	2be0      	cmp	r3, #224	; 0xe0
 800eda8:	d104      	bne.n	800edb4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f7f8 ff04 	bl	8007bb8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800edb0:	2300      	movs	r3, #0
 800edb2:	e07e      	b.n	800eeb2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d104      	bne.n	800edc4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f7f8 fefc 	bl	8007bb8 <pbuf_free>
    return ERR_OK;
 800edc0:	2300      	movs	r3, #0
 800edc2:	e076      	b.n	800eeb2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	88db      	ldrh	r3, [r3, #6]
 800edc8:	b29b      	uxth	r3, r3
 800edca:	461a      	mov	r2, r3
 800edcc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800edd0:	4013      	ands	r3, r2
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d00b      	beq.n	800edee <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 fc92 	bl	800f700 <ip4_reass>
 800eddc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d101      	bne.n	800ede8 <ip4_input+0x16c>
      return ERR_OK;
 800ede4:	2300      	movs	r3, #0
 800ede6:	e064      	b.n	800eeb2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800edee:	4a33      	ldr	r2, [pc, #204]	; (800eebc <ip4_input+0x240>)
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800edf4:	4a31      	ldr	r2, [pc, #196]	; (800eebc <ip4_input+0x240>)
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800edfa:	4a30      	ldr	r2, [pc, #192]	; (800eebc <ip4_input+0x240>)
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	f003 030f 	and.w	r3, r3, #15
 800ee08:	b2db      	uxtb	r3, r3
 800ee0a:	009b      	lsls	r3, r3, #2
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	b29a      	uxth	r2, r3
 800ee10:	4b2a      	ldr	r3, [pc, #168]	; (800eebc <ip4_input+0x240>)
 800ee12:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ee14:	89fb      	ldrh	r3, [r7, #14]
 800ee16:	4619      	mov	r1, r3
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f7f8 fe47 	bl	8007aac <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	7a5b      	ldrb	r3, [r3, #9]
 800ee22:	2b11      	cmp	r3, #17
 800ee24:	d006      	beq.n	800ee34 <ip4_input+0x1b8>
 800ee26:	2b11      	cmp	r3, #17
 800ee28:	dc13      	bgt.n	800ee52 <ip4_input+0x1d6>
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	d00c      	beq.n	800ee48 <ip4_input+0x1cc>
 800ee2e:	2b06      	cmp	r3, #6
 800ee30:	d005      	beq.n	800ee3e <ip4_input+0x1c2>
 800ee32:	e00e      	b.n	800ee52 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ee34:	6839      	ldr	r1, [r7, #0]
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f7fe fc68 	bl	800d70c <udp_input>
        break;
 800ee3c:	e026      	b.n	800ee8c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ee3e:	6839      	ldr	r1, [r7, #0]
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f7fa fce1 	bl	8009808 <tcp_input>
        break;
 800ee46:	e021      	b.n	800ee8c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ee48:	6839      	ldr	r1, [r7, #0]
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f7ff fcee 	bl	800e82c <icmp_input>
        break;
 800ee50:	e01c      	b.n	800ee8c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ee52:	4b1a      	ldr	r3, [pc, #104]	; (800eebc <ip4_input+0x240>)
 800ee54:	695b      	ldr	r3, [r3, #20]
 800ee56:	6939      	ldr	r1, [r7, #16]
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f000 f90b 	bl	800f074 <ip4_addr_isbroadcast_u32>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d10f      	bne.n	800ee84 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ee64:	4b15      	ldr	r3, [pc, #84]	; (800eebc <ip4_input+0x240>)
 800ee66:	695b      	ldr	r3, [r3, #20]
 800ee68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ee6c:	2be0      	cmp	r3, #224	; 0xe0
 800ee6e:	d009      	beq.n	800ee84 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ee70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ee74:	4619      	mov	r1, r3
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f7f8 fe8b 	bl	8007b92 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ee7c:	2102      	movs	r1, #2
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f7ff fdd8 	bl	800ea34 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7f8 fe97 	bl	8007bb8 <pbuf_free>
        break;
 800ee8a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ee8c:	4b0b      	ldr	r3, [pc, #44]	; (800eebc <ip4_input+0x240>)
 800ee8e:	2200      	movs	r2, #0
 800ee90:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ee92:	4b0a      	ldr	r3, [pc, #40]	; (800eebc <ip4_input+0x240>)
 800ee94:	2200      	movs	r2, #0
 800ee96:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ee98:	4b08      	ldr	r3, [pc, #32]	; (800eebc <ip4_input+0x240>)
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ee9e:	4b07      	ldr	r3, [pc, #28]	; (800eebc <ip4_input+0x240>)
 800eea0:	2200      	movs	r2, #0
 800eea2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800eea4:	4b05      	ldr	r3, [pc, #20]	; (800eebc <ip4_input+0x240>)
 800eea6:	2200      	movs	r2, #0
 800eea8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800eeaa:	4b04      	ldr	r3, [pc, #16]	; (800eebc <ip4_input+0x240>)
 800eeac:	2200      	movs	r2, #0
 800eeae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800eeb0:	2300      	movs	r3, #0
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3718      	adds	r7, #24
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	200056dc 	.word	0x200056dc
 800eec0:	2000add0 	.word	0x2000add0

0800eec4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b08a      	sub	sp, #40	; 0x28
 800eec8:	af04      	add	r7, sp, #16
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	607a      	str	r2, [r7, #4]
 800eed0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d009      	beq.n	800eef0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d003      	beq.n	800eeea <ip4_output_if+0x26>
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d102      	bne.n	800eef0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800eeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeec:	3304      	adds	r3, #4
 800eeee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800eef0:	78fa      	ldrb	r2, [r7, #3]
 800eef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef4:	9302      	str	r3, [sp, #8]
 800eef6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eefa:	9301      	str	r3, [sp, #4]
 800eefc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef00:	9300      	str	r3, [sp, #0]
 800ef02:	4613      	mov	r3, r2
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	6979      	ldr	r1, [r7, #20]
 800ef08:	68f8      	ldr	r0, [r7, #12]
 800ef0a:	f000 f805 	bl	800ef18 <ip4_output_if_src>
 800ef0e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3718      	adds	r7, #24
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b088      	sub	sp, #32
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	607a      	str	r2, [r7, #4]
 800ef24:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	7b9b      	ldrb	r3, [r3, #14]
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	d006      	beq.n	800ef3c <ip4_output_if_src+0x24>
 800ef2e:	4b4b      	ldr	r3, [pc, #300]	; (800f05c <ip4_output_if_src+0x144>)
 800ef30:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ef34:	494a      	ldr	r1, [pc, #296]	; (800f060 <ip4_output_if_src+0x148>)
 800ef36:	484b      	ldr	r0, [pc, #300]	; (800f064 <ip4_output_if_src+0x14c>)
 800ef38:	f001 fd58 	bl	80109ec <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d060      	beq.n	800f004 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ef42:	2314      	movs	r3, #20
 800ef44:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ef46:	2114      	movs	r1, #20
 800ef48:	68f8      	ldr	r0, [r7, #12]
 800ef4a:	f7f8 fd9f 	bl	8007a8c <pbuf_add_header>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d002      	beq.n	800ef5a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ef54:	f06f 0301 	mvn.w	r3, #1
 800ef58:	e07c      	b.n	800f054 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	685b      	ldr	r3, [r3, #4]
 800ef5e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	895b      	ldrh	r3, [r3, #10]
 800ef64:	2b13      	cmp	r3, #19
 800ef66:	d806      	bhi.n	800ef76 <ip4_output_if_src+0x5e>
 800ef68:	4b3c      	ldr	r3, [pc, #240]	; (800f05c <ip4_output_if_src+0x144>)
 800ef6a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800ef6e:	493e      	ldr	r1, [pc, #248]	; (800f068 <ip4_output_if_src+0x150>)
 800ef70:	483c      	ldr	r0, [pc, #240]	; (800f064 <ip4_output_if_src+0x14c>)
 800ef72:	f001 fd3b 	bl	80109ec <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ef76:	69fb      	ldr	r3, [r7, #28]
 800ef78:	78fa      	ldrb	r2, [r7, #3]
 800ef7a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ef7c:	69fb      	ldr	r3, [r7, #28]
 800ef7e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ef82:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681a      	ldr	r2, [r3, #0]
 800ef88:	69fb      	ldr	r3, [r7, #28]
 800ef8a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ef8c:	8b7b      	ldrh	r3, [r7, #26]
 800ef8e:	089b      	lsrs	r3, r3, #2
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	b2db      	uxtb	r3, r3
 800ef94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef98:	b2da      	uxtb	r2, r3
 800ef9a:	69fb      	ldr	r3, [r7, #28]
 800ef9c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800efa4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	891b      	ldrh	r3, [r3, #8]
 800efaa:	4618      	mov	r0, r3
 800efac:	f7f7 faa6 	bl	80064fc <lwip_htons>
 800efb0:	4603      	mov	r3, r0
 800efb2:	461a      	mov	r2, r3
 800efb4:	69fb      	ldr	r3, [r7, #28]
 800efb6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800efb8:	69fb      	ldr	r3, [r7, #28]
 800efba:	2200      	movs	r2, #0
 800efbc:	719a      	strb	r2, [r3, #6]
 800efbe:	2200      	movs	r2, #0
 800efc0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800efc2:	4b2a      	ldr	r3, [pc, #168]	; (800f06c <ip4_output_if_src+0x154>)
 800efc4:	881b      	ldrh	r3, [r3, #0]
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7f7 fa98 	bl	80064fc <lwip_htons>
 800efcc:	4603      	mov	r3, r0
 800efce:	461a      	mov	r2, r3
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800efd4:	4b25      	ldr	r3, [pc, #148]	; (800f06c <ip4_output_if_src+0x154>)
 800efd6:	881b      	ldrh	r3, [r3, #0]
 800efd8:	3301      	adds	r3, #1
 800efda:	b29a      	uxth	r2, r3
 800efdc:	4b23      	ldr	r3, [pc, #140]	; (800f06c <ip4_output_if_src+0x154>)
 800efde:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d104      	bne.n	800eff0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800efe6:	4b22      	ldr	r3, [pc, #136]	; (800f070 <ip4_output_if_src+0x158>)
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	60da      	str	r2, [r3, #12]
 800efee:	e003      	b.n	800eff8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	681a      	ldr	r2, [r3, #0]
 800eff4:	69fb      	ldr	r3, [r7, #28]
 800eff6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800eff8:	69fb      	ldr	r3, [r7, #28]
 800effa:	2200      	movs	r2, #0
 800effc:	729a      	strb	r2, [r3, #10]
 800effe:	2200      	movs	r2, #0
 800f000:	72da      	strb	r2, [r3, #11]
 800f002:	e00f      	b.n	800f024 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	895b      	ldrh	r3, [r3, #10]
 800f008:	2b13      	cmp	r3, #19
 800f00a:	d802      	bhi.n	800f012 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f00c:	f06f 0301 	mvn.w	r3, #1
 800f010:	e020      	b.n	800f054 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	685b      	ldr	r3, [r3, #4]
 800f016:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	691b      	ldr	r3, [r3, #16]
 800f01c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f01e:	f107 0314 	add.w	r3, r7, #20
 800f022:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f026:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d00c      	beq.n	800f046 <ip4_output_if_src+0x12e>
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	891a      	ldrh	r2, [r3, #8]
 800f030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f032:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f034:	429a      	cmp	r2, r3
 800f036:	d906      	bls.n	800f046 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f03c:	68f8      	ldr	r0, [r7, #12]
 800f03e:	f000 fd53 	bl	800fae8 <ip4_frag>
 800f042:	4603      	mov	r3, r0
 800f044:	e006      	b.n	800f054 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f048:	695b      	ldr	r3, [r3, #20]
 800f04a:	687a      	ldr	r2, [r7, #4]
 800f04c:	68f9      	ldr	r1, [r7, #12]
 800f04e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f050:	4798      	blx	r3
 800f052:	4603      	mov	r3, r0
}
 800f054:	4618      	mov	r0, r3
 800f056:	3720      	adds	r7, #32
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	08015450 	.word	0x08015450
 800f060:	08015484 	.word	0x08015484
 800f064:	08015490 	.word	0x08015490
 800f068:	080154b8 	.word	0x080154b8
 800f06c:	2000099a 	.word	0x2000099a
 800f070:	08016098 	.word	0x08016098

0800f074 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f074:	b480      	push	{r7}
 800f076:	b085      	sub	sp, #20
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f088:	d002      	beq.n	800f090 <ip4_addr_isbroadcast_u32+0x1c>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d101      	bne.n	800f094 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f090:	2301      	movs	r3, #1
 800f092:	e02a      	b.n	800f0ea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f09a:	f003 0302 	and.w	r3, r3, #2
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d101      	bne.n	800f0a6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	e021      	b.n	800f0ea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	3304      	adds	r3, #4
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	687a      	ldr	r2, [r7, #4]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d101      	bne.n	800f0b6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	e019      	b.n	800f0ea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	3304      	adds	r3, #4
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	405a      	eors	r2, r3
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	3308      	adds	r3, #8
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	4013      	ands	r3, r2
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d10d      	bne.n	800f0e8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	3308      	adds	r3, #8
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	43da      	mvns	r2, r3
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	3308      	adds	r3, #8
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d101      	bne.n	800f0e8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	e000      	b.n	800f0ea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f0e8:	2300      	movs	r3, #0
  }
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3714      	adds	r7, #20
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f4:	4770      	bx	lr
	...

0800f0f8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f0fe:	2300      	movs	r3, #0
 800f100:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f102:	4b12      	ldr	r3, [pc, #72]	; (800f14c <ip_reass_tmr+0x54>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f108:	e018      	b.n	800f13c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	7fdb      	ldrb	r3, [r3, #31]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d00b      	beq.n	800f12a <ip_reass_tmr+0x32>
      r->timer--;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	7fdb      	ldrb	r3, [r3, #31]
 800f116:	3b01      	subs	r3, #1
 800f118:	b2da      	uxtb	r2, r3
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	60fb      	str	r3, [r7, #12]
 800f128:	e008      	b.n	800f13c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f134:	68b9      	ldr	r1, [r7, #8]
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 f80a 	bl	800f150 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d1e3      	bne.n	800f10a <ip_reass_tmr+0x12>
    }
  }
}
 800f142:	bf00      	nop
 800f144:	bf00      	nop
 800f146:	3710      	adds	r7, #16
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	2000099c 	.word	0x2000099c

0800f150 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b088      	sub	sp, #32
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f15a:	2300      	movs	r3, #0
 800f15c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f15e:	683a      	ldr	r2, [r7, #0]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	429a      	cmp	r2, r3
 800f164:	d105      	bne.n	800f172 <ip_reass_free_complete_datagram+0x22>
 800f166:	4b45      	ldr	r3, [pc, #276]	; (800f27c <ip_reass_free_complete_datagram+0x12c>)
 800f168:	22ab      	movs	r2, #171	; 0xab
 800f16a:	4945      	ldr	r1, [pc, #276]	; (800f280 <ip_reass_free_complete_datagram+0x130>)
 800f16c:	4845      	ldr	r0, [pc, #276]	; (800f284 <ip_reass_free_complete_datagram+0x134>)
 800f16e:	f001 fc3d 	bl	80109ec <iprintf>
  if (prev != NULL) {
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d00a      	beq.n	800f18e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	687a      	ldr	r2, [r7, #4]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d005      	beq.n	800f18e <ip_reass_free_complete_datagram+0x3e>
 800f182:	4b3e      	ldr	r3, [pc, #248]	; (800f27c <ip_reass_free_complete_datagram+0x12c>)
 800f184:	22ad      	movs	r2, #173	; 0xad
 800f186:	4940      	ldr	r1, [pc, #256]	; (800f288 <ip_reass_free_complete_datagram+0x138>)
 800f188:	483e      	ldr	r0, [pc, #248]	; (800f284 <ip_reass_free_complete_datagram+0x134>)
 800f18a:	f001 fc2f 	bl	80109ec <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	889b      	ldrh	r3, [r3, #4]
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d12a      	bne.n	800f1f6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f1ae:	69bb      	ldr	r3, [r7, #24]
 800f1b0:	6858      	ldr	r0, [r3, #4]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	3308      	adds	r3, #8
 800f1b6:	2214      	movs	r2, #20
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	f001 fd30 	bl	8010c1e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f1be:	2101      	movs	r1, #1
 800f1c0:	69b8      	ldr	r0, [r7, #24]
 800f1c2:	f7ff fc47 	bl	800ea54 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f1c6:	69b8      	ldr	r0, [r7, #24]
 800f1c8:	f7f8 fd7e 	bl	8007cc8 <pbuf_clen>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f1d0:	8bfa      	ldrh	r2, [r7, #30]
 800f1d2:	8a7b      	ldrh	r3, [r7, #18]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1da:	db05      	blt.n	800f1e8 <ip_reass_free_complete_datagram+0x98>
 800f1dc:	4b27      	ldr	r3, [pc, #156]	; (800f27c <ip_reass_free_complete_datagram+0x12c>)
 800f1de:	22bc      	movs	r2, #188	; 0xbc
 800f1e0:	492a      	ldr	r1, [pc, #168]	; (800f28c <ip_reass_free_complete_datagram+0x13c>)
 800f1e2:	4828      	ldr	r0, [pc, #160]	; (800f284 <ip_reass_free_complete_datagram+0x134>)
 800f1e4:	f001 fc02 	bl	80109ec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f1e8:	8bfa      	ldrh	r2, [r7, #30]
 800f1ea:	8a7b      	ldrh	r3, [r7, #18]
 800f1ec:	4413      	add	r3, r2
 800f1ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f1f0:	69b8      	ldr	r0, [r7, #24]
 800f1f2:	f7f8 fce1 	bl	8007bb8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	685b      	ldr	r3, [r3, #4]
 800f1fa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f1fc:	e01f      	b.n	800f23e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f1fe:	69bb      	ldr	r3, [r7, #24]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f204:	69bb      	ldr	r3, [r7, #24]
 800f206:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	f7f8 fd5a 	bl	8007cc8 <pbuf_clen>
 800f214:	4603      	mov	r3, r0
 800f216:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f218:	8bfa      	ldrh	r2, [r7, #30]
 800f21a:	8a7b      	ldrh	r3, [r7, #18]
 800f21c:	4413      	add	r3, r2
 800f21e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f222:	db05      	blt.n	800f230 <ip_reass_free_complete_datagram+0xe0>
 800f224:	4b15      	ldr	r3, [pc, #84]	; (800f27c <ip_reass_free_complete_datagram+0x12c>)
 800f226:	22cc      	movs	r2, #204	; 0xcc
 800f228:	4918      	ldr	r1, [pc, #96]	; (800f28c <ip_reass_free_complete_datagram+0x13c>)
 800f22a:	4816      	ldr	r0, [pc, #88]	; (800f284 <ip_reass_free_complete_datagram+0x134>)
 800f22c:	f001 fbde 	bl	80109ec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f230:	8bfa      	ldrh	r2, [r7, #30]
 800f232:	8a7b      	ldrh	r3, [r7, #18]
 800f234:	4413      	add	r3, r2
 800f236:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f238:	68f8      	ldr	r0, [r7, #12]
 800f23a:	f7f8 fcbd 	bl	8007bb8 <pbuf_free>
  while (p != NULL) {
 800f23e:	69bb      	ldr	r3, [r7, #24]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d1dc      	bne.n	800f1fe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f244:	6839      	ldr	r1, [r7, #0]
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f000 f8c2 	bl	800f3d0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f24c:	4b10      	ldr	r3, [pc, #64]	; (800f290 <ip_reass_free_complete_datagram+0x140>)
 800f24e:	881b      	ldrh	r3, [r3, #0]
 800f250:	8bfa      	ldrh	r2, [r7, #30]
 800f252:	429a      	cmp	r2, r3
 800f254:	d905      	bls.n	800f262 <ip_reass_free_complete_datagram+0x112>
 800f256:	4b09      	ldr	r3, [pc, #36]	; (800f27c <ip_reass_free_complete_datagram+0x12c>)
 800f258:	22d2      	movs	r2, #210	; 0xd2
 800f25a:	490e      	ldr	r1, [pc, #56]	; (800f294 <ip_reass_free_complete_datagram+0x144>)
 800f25c:	4809      	ldr	r0, [pc, #36]	; (800f284 <ip_reass_free_complete_datagram+0x134>)
 800f25e:	f001 fbc5 	bl	80109ec <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f262:	4b0b      	ldr	r3, [pc, #44]	; (800f290 <ip_reass_free_complete_datagram+0x140>)
 800f264:	881a      	ldrh	r2, [r3, #0]
 800f266:	8bfb      	ldrh	r3, [r7, #30]
 800f268:	1ad3      	subs	r3, r2, r3
 800f26a:	b29a      	uxth	r2, r3
 800f26c:	4b08      	ldr	r3, [pc, #32]	; (800f290 <ip_reass_free_complete_datagram+0x140>)
 800f26e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f270:	8bfb      	ldrh	r3, [r7, #30]
}
 800f272:	4618      	mov	r0, r3
 800f274:	3720      	adds	r7, #32
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop
 800f27c:	080154e8 	.word	0x080154e8
 800f280:	08015524 	.word	0x08015524
 800f284:	08015530 	.word	0x08015530
 800f288:	08015558 	.word	0x08015558
 800f28c:	0801556c 	.word	0x0801556c
 800f290:	200009a0 	.word	0x200009a0
 800f294:	0801558c 	.word	0x0801558c

0800f298 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b08a      	sub	sp, #40	; 0x28
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f2b6:	4b28      	ldr	r3, [pc, #160]	; (800f358 <ip_reass_remove_oldest_datagram+0xc0>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f2bc:	e030      	b.n	800f320 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c0:	695a      	ldr	r2, [r3, #20]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d10c      	bne.n	800f2e4 <ip_reass_remove_oldest_datagram+0x4c>
 800f2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2cc:	699a      	ldr	r2, [r3, #24]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	691b      	ldr	r3, [r3, #16]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d106      	bne.n	800f2e4 <ip_reass_remove_oldest_datagram+0x4c>
 800f2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d8:	899a      	ldrh	r2, [r3, #12]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	889b      	ldrh	r3, [r3, #4]
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d014      	beq.n	800f30e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f2ea:	6a3b      	ldr	r3, [r7, #32]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d104      	bne.n	800f2fa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f2f4:	69fb      	ldr	r3, [r7, #28]
 800f2f6:	61bb      	str	r3, [r7, #24]
 800f2f8:	e009      	b.n	800f30e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fc:	7fda      	ldrb	r2, [r3, #31]
 800f2fe:	6a3b      	ldr	r3, [r7, #32]
 800f300:	7fdb      	ldrb	r3, [r3, #31]
 800f302:	429a      	cmp	r2, r3
 800f304:	d803      	bhi.n	800f30e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f308:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f30a:	69fb      	ldr	r3, [r7, #28]
 800f30c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d001      	beq.n	800f31a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f318:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f322:	2b00      	cmp	r3, #0
 800f324:	d1cb      	bne.n	800f2be <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f326:	6a3b      	ldr	r3, [r7, #32]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d008      	beq.n	800f33e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f32c:	69b9      	ldr	r1, [r7, #24]
 800f32e:	6a38      	ldr	r0, [r7, #32]
 800f330:	f7ff ff0e 	bl	800f150 <ip_reass_free_complete_datagram>
 800f334:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f336:	697a      	ldr	r2, [r7, #20]
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	4413      	add	r3, r2
 800f33c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f33e:	697a      	ldr	r2, [r7, #20]
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	429a      	cmp	r2, r3
 800f344:	da02      	bge.n	800f34c <ip_reass_remove_oldest_datagram+0xb4>
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	2b01      	cmp	r3, #1
 800f34a:	dcac      	bgt.n	800f2a6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f34c:	697b      	ldr	r3, [r7, #20]
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3728      	adds	r7, #40	; 0x28
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}
 800f356:	bf00      	nop
 800f358:	2000099c 	.word	0x2000099c

0800f35c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b084      	sub	sp, #16
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f366:	2004      	movs	r0, #4
 800f368:	f7f7 fd40 	bl	8006dec <memp_malloc>
 800f36c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d110      	bne.n	800f396 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f374:	6839      	ldr	r1, [r7, #0]
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f7ff ff8e 	bl	800f298 <ip_reass_remove_oldest_datagram>
 800f37c:	4602      	mov	r2, r0
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	4293      	cmp	r3, r2
 800f382:	dc03      	bgt.n	800f38c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f384:	2004      	movs	r0, #4
 800f386:	f7f7 fd31 	bl	8006dec <memp_malloc>
 800f38a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d101      	bne.n	800f396 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f392:	2300      	movs	r3, #0
 800f394:	e016      	b.n	800f3c4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f396:	2220      	movs	r2, #32
 800f398:	2100      	movs	r1, #0
 800f39a:	68f8      	ldr	r0, [r7, #12]
 800f39c:	f001 fbc5 	bl	8010b2a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	220f      	movs	r2, #15
 800f3a4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f3a6:	4b09      	ldr	r3, [pc, #36]	; (800f3cc <ip_reass_enqueue_new_datagram+0x70>)
 800f3a8:	681a      	ldr	r2, [r3, #0]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f3ae:	4a07      	ldr	r2, [pc, #28]	; (800f3cc <ip_reass_enqueue_new_datagram+0x70>)
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	3308      	adds	r3, #8
 800f3b8:	2214      	movs	r2, #20
 800f3ba:	6879      	ldr	r1, [r7, #4]
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f001 fc2e 	bl	8010c1e <memcpy>
  return ipr;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3710      	adds	r7, #16
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}
 800f3cc:	2000099c 	.word	0x2000099c

0800f3d0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f3da:	4b10      	ldr	r3, [pc, #64]	; (800f41c <ip_reass_dequeue_datagram+0x4c>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d104      	bne.n	800f3ee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	4a0c      	ldr	r2, [pc, #48]	; (800f41c <ip_reass_dequeue_datagram+0x4c>)
 800f3ea:	6013      	str	r3, [r2, #0]
 800f3ec:	e00d      	b.n	800f40a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d106      	bne.n	800f402 <ip_reass_dequeue_datagram+0x32>
 800f3f4:	4b0a      	ldr	r3, [pc, #40]	; (800f420 <ip_reass_dequeue_datagram+0x50>)
 800f3f6:	f240 1245 	movw	r2, #325	; 0x145
 800f3fa:	490a      	ldr	r1, [pc, #40]	; (800f424 <ip_reass_dequeue_datagram+0x54>)
 800f3fc:	480a      	ldr	r0, [pc, #40]	; (800f428 <ip_reass_dequeue_datagram+0x58>)
 800f3fe:	f001 faf5 	bl	80109ec <iprintf>
    prev->next = ipr->next;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681a      	ldr	r2, [r3, #0]
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f40a:	6879      	ldr	r1, [r7, #4]
 800f40c:	2004      	movs	r0, #4
 800f40e:	f7f7 fd5d 	bl	8006ecc <memp_free>
}
 800f412:	bf00      	nop
 800f414:	3708      	adds	r7, #8
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	2000099c 	.word	0x2000099c
 800f420:	080154e8 	.word	0x080154e8
 800f424:	080155b0 	.word	0x080155b0
 800f428:	08015530 	.word	0x08015530

0800f42c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b08c      	sub	sp, #48	; 0x30
 800f430:	af00      	add	r7, sp, #0
 800f432:	60f8      	str	r0, [r7, #12]
 800f434:	60b9      	str	r1, [r7, #8]
 800f436:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f438:	2300      	movs	r3, #0
 800f43a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f43c:	2301      	movs	r3, #1
 800f43e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f446:	69fb      	ldr	r3, [r7, #28]
 800f448:	885b      	ldrh	r3, [r3, #2]
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7f7 f855 	bl	80064fc <lwip_htons>
 800f452:	4603      	mov	r3, r0
 800f454:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	f003 030f 	and.w	r3, r3, #15
 800f45e:	b2db      	uxtb	r3, r3
 800f460:	009b      	lsls	r3, r3, #2
 800f462:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f464:	7e7b      	ldrb	r3, [r7, #25]
 800f466:	b29b      	uxth	r3, r3
 800f468:	8b7a      	ldrh	r2, [r7, #26]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d202      	bcs.n	800f474 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f46e:	f04f 33ff 	mov.w	r3, #4294967295
 800f472:	e135      	b.n	800f6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f474:	7e7b      	ldrb	r3, [r7, #25]
 800f476:	b29b      	uxth	r3, r3
 800f478:	8b7a      	ldrh	r2, [r7, #26]
 800f47a:	1ad3      	subs	r3, r2, r3
 800f47c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f47e:	69fb      	ldr	r3, [r7, #28]
 800f480:	88db      	ldrh	r3, [r3, #6]
 800f482:	b29b      	uxth	r3, r3
 800f484:	4618      	mov	r0, r3
 800f486:	f7f7 f839 	bl	80064fc <lwip_htons>
 800f48a:	4603      	mov	r3, r0
 800f48c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f490:	b29b      	uxth	r3, r3
 800f492:	00db      	lsls	r3, r3, #3
 800f494:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49e:	2200      	movs	r2, #0
 800f4a0:	701a      	strb	r2, [r3, #0]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	705a      	strb	r2, [r3, #1]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	709a      	strb	r2, [r3, #2]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b0:	8afa      	ldrh	r2, [r7, #22]
 800f4b2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f4b4:	8afa      	ldrh	r2, [r7, #22]
 800f4b6:	8b7b      	ldrh	r3, [r7, #26]
 800f4b8:	4413      	add	r3, r2
 800f4ba:	b29a      	uxth	r2, r3
 800f4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4be:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c2:	88db      	ldrh	r3, [r3, #6]
 800f4c4:	b29b      	uxth	r3, r3
 800f4c6:	8afa      	ldrh	r2, [r7, #22]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d902      	bls.n	800f4d2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f4d0:	e106      	b.n	800f6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	685b      	ldr	r3, [r3, #4]
 800f4d6:	627b      	str	r3, [r7, #36]	; 0x24
 800f4d8:	e068      	b.n	800f5ac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e2:	889b      	ldrh	r3, [r3, #4]
 800f4e4:	b29a      	uxth	r2, r3
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	889b      	ldrh	r3, [r3, #4]
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d235      	bcs.n	800f55c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d020      	beq.n	800f53e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fe:	889b      	ldrh	r3, [r3, #4]
 800f500:	b29a      	uxth	r2, r3
 800f502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f504:	88db      	ldrh	r3, [r3, #6]
 800f506:	b29b      	uxth	r3, r3
 800f508:	429a      	cmp	r2, r3
 800f50a:	d307      	bcc.n	800f51c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f50e:	88db      	ldrh	r3, [r3, #6]
 800f510:	b29a      	uxth	r2, r3
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	889b      	ldrh	r3, [r3, #4]
 800f516:	b29b      	uxth	r3, r3
 800f518:	429a      	cmp	r2, r3
 800f51a:	d902      	bls.n	800f522 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f51c:	f04f 33ff 	mov.w	r3, #4294967295
 800f520:	e0de      	b.n	800f6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f524:	68ba      	ldr	r2, [r7, #8]
 800f526:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f52a:	88db      	ldrh	r3, [r3, #6]
 800f52c:	b29a      	uxth	r2, r3
 800f52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f530:	889b      	ldrh	r3, [r3, #4]
 800f532:	b29b      	uxth	r3, r3
 800f534:	429a      	cmp	r2, r3
 800f536:	d03d      	beq.n	800f5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f538:	2300      	movs	r3, #0
 800f53a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f53c:	e03a      	b.n	800f5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f540:	88db      	ldrh	r3, [r3, #6]
 800f542:	b29a      	uxth	r2, r3
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	889b      	ldrh	r3, [r3, #4]
 800f548:	b29b      	uxth	r3, r3
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d902      	bls.n	800f554 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f54e:	f04f 33ff 	mov.w	r3, #4294967295
 800f552:	e0c5      	b.n	800f6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	68ba      	ldr	r2, [r7, #8]
 800f558:	605a      	str	r2, [r3, #4]
      break;
 800f55a:	e02b      	b.n	800f5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f55e:	889b      	ldrh	r3, [r3, #4]
 800f560:	b29a      	uxth	r2, r3
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	889b      	ldrh	r3, [r3, #4]
 800f566:	b29b      	uxth	r3, r3
 800f568:	429a      	cmp	r2, r3
 800f56a:	d102      	bne.n	800f572 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f56c:	f04f 33ff 	mov.w	r3, #4294967295
 800f570:	e0b6      	b.n	800f6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f574:	889b      	ldrh	r3, [r3, #4]
 800f576:	b29a      	uxth	r2, r3
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	88db      	ldrh	r3, [r3, #6]
 800f57c:	b29b      	uxth	r3, r3
 800f57e:	429a      	cmp	r2, r3
 800f580:	d202      	bcs.n	800f588 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f582:	f04f 33ff 	mov.w	r3, #4294967295
 800f586:	e0ab      	b.n	800f6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d009      	beq.n	800f5a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f590:	88db      	ldrh	r3, [r3, #6]
 800f592:	b29a      	uxth	r2, r3
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	889b      	ldrh	r3, [r3, #4]
 800f598:	b29b      	uxth	r3, r3
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d001      	beq.n	800f5a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d193      	bne.n	800f4da <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f5b2:	e000      	b.n	800f5b6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f5b4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d12d      	bne.n	800f618 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d01c      	beq.n	800f5fc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c4:	88db      	ldrh	r3, [r3, #6]
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ca:	889b      	ldrh	r3, [r3, #4]
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d906      	bls.n	800f5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f5d2:	4b45      	ldr	r3, [pc, #276]	; (800f6e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f5d4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f5d8:	4944      	ldr	r1, [pc, #272]	; (800f6ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f5da:	4845      	ldr	r0, [pc, #276]	; (800f6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f5dc:	f001 fa06 	bl	80109ec <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e2:	68ba      	ldr	r2, [r7, #8]
 800f5e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e8:	88db      	ldrh	r3, [r3, #6]
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ee:	889b      	ldrh	r3, [r3, #4]
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d010      	beq.n	800f618 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	623b      	str	r3, [r7, #32]
 800f5fa:	e00d      	b.n	800f618 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d006      	beq.n	800f612 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f604:	4b38      	ldr	r3, [pc, #224]	; (800f6e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f606:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f60a:	493a      	ldr	r1, [pc, #232]	; (800f6f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f60c:	4838      	ldr	r0, [pc, #224]	; (800f6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f60e:	f001 f9ed 	bl	80109ec <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	68ba      	ldr	r2, [r7, #8]
 800f616:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d105      	bne.n	800f62a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	7f9b      	ldrb	r3, [r3, #30]
 800f622:	f003 0301 	and.w	r3, r3, #1
 800f626:	2b00      	cmp	r3, #0
 800f628:	d059      	beq.n	800f6de <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f62a:	6a3b      	ldr	r3, [r7, #32]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d04f      	beq.n	800f6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d006      	beq.n	800f646 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	889b      	ldrh	r3, [r3, #4]
 800f640:	b29b      	uxth	r3, r3
 800f642:	2b00      	cmp	r3, #0
 800f644:	d002      	beq.n	800f64c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f646:	2300      	movs	r3, #0
 800f648:	623b      	str	r3, [r7, #32]
 800f64a:	e041      	b.n	800f6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f64e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f656:	e012      	b.n	800f67e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f660:	88db      	ldrh	r3, [r3, #6]
 800f662:	b29a      	uxth	r2, r3
 800f664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f666:	889b      	ldrh	r3, [r3, #4]
 800f668:	b29b      	uxth	r3, r3
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d002      	beq.n	800f674 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f66e:	2300      	movs	r3, #0
 800f670:	623b      	str	r3, [r7, #32]
            break;
 800f672:	e007      	b.n	800f684 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f676:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f680:	2b00      	cmp	r3, #0
 800f682:	d1e9      	bne.n	800f658 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f684:	6a3b      	ldr	r3, [r7, #32]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d022      	beq.n	800f6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d106      	bne.n	800f6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f692:	4b15      	ldr	r3, [pc, #84]	; (800f6e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f694:	f240 12df 	movw	r2, #479	; 0x1df
 800f698:	4917      	ldr	r1, [pc, #92]	; (800f6f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f69a:	4815      	ldr	r0, [pc, #84]	; (800f6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f69c:	f001 f9a6 	bl	80109ec <iprintf>
          LWIP_ASSERT("sanity check",
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	685b      	ldr	r3, [r3, #4]
 800f6a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d106      	bne.n	800f6ba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f6ac:	4b0e      	ldr	r3, [pc, #56]	; (800f6e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f6ae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f6b2:	4911      	ldr	r1, [pc, #68]	; (800f6f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f6b4:	480e      	ldr	r0, [pc, #56]	; (800f6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f6b6:	f001 f999 	bl	80109ec <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d006      	beq.n	800f6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f6c2:	4b09      	ldr	r3, [pc, #36]	; (800f6e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f6c4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f6c8:	490c      	ldr	r1, [pc, #48]	; (800f6fc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f6ca:	4809      	ldr	r0, [pc, #36]	; (800f6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f6cc:	f001 f98e 	bl	80109ec <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f6d0:	6a3b      	ldr	r3, [r7, #32]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	bf14      	ite	ne
 800f6d6:	2301      	movne	r3, #1
 800f6d8:	2300      	moveq	r3, #0
 800f6da:	b2db      	uxtb	r3, r3
 800f6dc:	e000      	b.n	800f6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f6de:	2300      	movs	r3, #0
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3730      	adds	r7, #48	; 0x30
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	080154e8 	.word	0x080154e8
 800f6ec:	080155cc 	.word	0x080155cc
 800f6f0:	08015530 	.word	0x08015530
 800f6f4:	080155ec 	.word	0x080155ec
 800f6f8:	08015624 	.word	0x08015624
 800f6fc:	08015634 	.word	0x08015634

0800f700 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b08e      	sub	sp, #56	; 0x38
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	685b      	ldr	r3, [r3, #4]
 800f70c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	f003 030f 	and.w	r3, r3, #15
 800f716:	b2db      	uxtb	r3, r3
 800f718:	009b      	lsls	r3, r3, #2
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	2b14      	cmp	r3, #20
 800f71e:	f040 8171 	bne.w	800fa04 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f724:	88db      	ldrh	r3, [r3, #6]
 800f726:	b29b      	uxth	r3, r3
 800f728:	4618      	mov	r0, r3
 800f72a:	f7f6 fee7 	bl	80064fc <lwip_htons>
 800f72e:	4603      	mov	r3, r0
 800f730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f734:	b29b      	uxth	r3, r3
 800f736:	00db      	lsls	r3, r3, #3
 800f738:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f73c:	885b      	ldrh	r3, [r3, #2]
 800f73e:	b29b      	uxth	r3, r3
 800f740:	4618      	mov	r0, r3
 800f742:	f7f6 fedb 	bl	80064fc <lwip_htons>
 800f746:	4603      	mov	r3, r0
 800f748:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	f003 030f 	and.w	r3, r3, #15
 800f752:	b2db      	uxtb	r3, r3
 800f754:	009b      	lsls	r3, r3, #2
 800f756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f75a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f75e:	b29b      	uxth	r3, r3
 800f760:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f762:	429a      	cmp	r2, r3
 800f764:	f0c0 8150 	bcc.w	800fa08 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f768:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f770:	1ad3      	subs	r3, r2, r3
 800f772:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f7f8 faa7 	bl	8007cc8 <pbuf_clen>
 800f77a:	4603      	mov	r3, r0
 800f77c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f77e:	4b8c      	ldr	r3, [pc, #560]	; (800f9b0 <ip4_reass+0x2b0>)
 800f780:	881b      	ldrh	r3, [r3, #0]
 800f782:	461a      	mov	r2, r3
 800f784:	8c3b      	ldrh	r3, [r7, #32]
 800f786:	4413      	add	r3, r2
 800f788:	2b0a      	cmp	r3, #10
 800f78a:	dd10      	ble.n	800f7ae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f78c:	8c3b      	ldrh	r3, [r7, #32]
 800f78e:	4619      	mov	r1, r3
 800f790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f792:	f7ff fd81 	bl	800f298 <ip_reass_remove_oldest_datagram>
 800f796:	4603      	mov	r3, r0
 800f798:	2b00      	cmp	r3, #0
 800f79a:	f000 8137 	beq.w	800fa0c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f79e:	4b84      	ldr	r3, [pc, #528]	; (800f9b0 <ip4_reass+0x2b0>)
 800f7a0:	881b      	ldrh	r3, [r3, #0]
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	8c3b      	ldrh	r3, [r7, #32]
 800f7a6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f7a8:	2b0a      	cmp	r3, #10
 800f7aa:	f300 812f 	bgt.w	800fa0c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f7ae:	4b81      	ldr	r3, [pc, #516]	; (800f9b4 <ip4_reass+0x2b4>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	633b      	str	r3, [r7, #48]	; 0x30
 800f7b4:	e015      	b.n	800f7e2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b8:	695a      	ldr	r2, [r3, #20]
 800f7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d10c      	bne.n	800f7dc <ip4_reass+0xdc>
 800f7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c4:	699a      	ldr	r2, [r3, #24]
 800f7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c8:	691b      	ldr	r3, [r3, #16]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d106      	bne.n	800f7dc <ip4_reass+0xdc>
 800f7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d0:	899a      	ldrh	r2, [r3, #12]
 800f7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d4:	889b      	ldrh	r3, [r3, #4]
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d006      	beq.n	800f7ea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	633b      	str	r3, [r7, #48]	; 0x30
 800f7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d1e6      	bne.n	800f7b6 <ip4_reass+0xb6>
 800f7e8:	e000      	b.n	800f7ec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f7ea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d109      	bne.n	800f806 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f7f2:	8c3b      	ldrh	r3, [r7, #32]
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7f8:	f7ff fdb0 	bl	800f35c <ip_reass_enqueue_new_datagram>
 800f7fc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f800:	2b00      	cmp	r3, #0
 800f802:	d11c      	bne.n	800f83e <ip4_reass+0x13e>
      goto nullreturn;
 800f804:	e105      	b.n	800fa12 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f808:	88db      	ldrh	r3, [r3, #6]
 800f80a:	b29b      	uxth	r3, r3
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7f6 fe75 	bl	80064fc <lwip_htons>
 800f812:	4603      	mov	r3, r0
 800f814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d110      	bne.n	800f83e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81e:	89db      	ldrh	r3, [r3, #14]
 800f820:	4618      	mov	r0, r3
 800f822:	f7f6 fe6b 	bl	80064fc <lwip_htons>
 800f826:	4603      	mov	r3, r0
 800f828:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d006      	beq.n	800f83e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f832:	3308      	adds	r3, #8
 800f834:	2214      	movs	r2, #20
 800f836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f838:	4618      	mov	r0, r3
 800f83a:	f001 f9f0 	bl	8010c1e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f840:	88db      	ldrh	r3, [r3, #6]
 800f842:	b29b      	uxth	r3, r3
 800f844:	f003 0320 	and.w	r3, r3, #32
 800f848:	2b00      	cmp	r3, #0
 800f84a:	bf0c      	ite	eq
 800f84c:	2301      	moveq	r3, #1
 800f84e:	2300      	movne	r3, #0
 800f850:	b2db      	uxtb	r3, r3
 800f852:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d00e      	beq.n	800f878 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f85a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f85c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f85e:	4413      	add	r3, r2
 800f860:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f862:	8b7a      	ldrh	r2, [r7, #26]
 800f864:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f866:	429a      	cmp	r2, r3
 800f868:	f0c0 80a0 	bcc.w	800f9ac <ip4_reass+0x2ac>
 800f86c:	8b7b      	ldrh	r3, [r7, #26]
 800f86e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f872:	4293      	cmp	r3, r2
 800f874:	f200 809a 	bhi.w	800f9ac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f878:	69fa      	ldr	r2, [r7, #28]
 800f87a:	6879      	ldr	r1, [r7, #4]
 800f87c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f87e:	f7ff fdd5 	bl	800f42c <ip_reass_chain_frag_into_datagram_and_validate>
 800f882:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f88a:	f000 809b 	beq.w	800f9c4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f88e:	4b48      	ldr	r3, [pc, #288]	; (800f9b0 <ip4_reass+0x2b0>)
 800f890:	881a      	ldrh	r2, [r3, #0]
 800f892:	8c3b      	ldrh	r3, [r7, #32]
 800f894:	4413      	add	r3, r2
 800f896:	b29a      	uxth	r2, r3
 800f898:	4b45      	ldr	r3, [pc, #276]	; (800f9b0 <ip4_reass+0x2b0>)
 800f89a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f89c:	69fb      	ldr	r3, [r7, #28]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d00d      	beq.n	800f8be <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f8a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f8a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8a6:	4413      	add	r3, r2
 800f8a8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ac:	8a7a      	ldrh	r2, [r7, #18]
 800f8ae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b2:	7f9b      	ldrb	r3, [r3, #30]
 800f8b4:	f043 0301 	orr.w	r3, r3, #1
 800f8b8:	b2da      	uxtb	r2, r3
 800f8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8bc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d171      	bne.n	800f9a8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c6:	8b9b      	ldrh	r3, [r3, #28]
 800f8c8:	3314      	adds	r3, #20
 800f8ca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	685b      	ldr	r3, [r3, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d8:	685b      	ldr	r3, [r3, #4]
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e0:	3308      	adds	r3, #8
 800f8e2:	2214      	movs	r2, #20
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8e8:	f001 f999 	bl	8010c1e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f8ec:	8a3b      	ldrh	r3, [r7, #16]
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7f6 fe04 	bl	80064fc <lwip_htons>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8fa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8fe:	2200      	movs	r2, #0
 800f900:	719a      	strb	r2, [r3, #6]
 800f902:	2200      	movs	r2, #0
 800f904:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f908:	2200      	movs	r2, #0
 800f90a:	729a      	strb	r2, [r3, #10]
 800f90c:	2200      	movs	r2, #0
 800f90e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f916:	e00d      	b.n	800f934 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f91a:	685b      	ldr	r3, [r3, #4]
 800f91c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f91e:	2114      	movs	r1, #20
 800f920:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f922:	f7f8 f8c3 	bl	8007aac <pbuf_remove_header>
      pbuf_cat(p, r);
 800f926:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f7f8 fa07 	bl	8007d3c <pbuf_cat>
      r = iprh->next_pbuf;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f936:	2b00      	cmp	r3, #0
 800f938:	d1ee      	bne.n	800f918 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f93a:	4b1e      	ldr	r3, [pc, #120]	; (800f9b4 <ip4_reass+0x2b4>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f940:	429a      	cmp	r2, r3
 800f942:	d102      	bne.n	800f94a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f944:	2300      	movs	r3, #0
 800f946:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f948:	e010      	b.n	800f96c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f94a:	4b1a      	ldr	r3, [pc, #104]	; (800f9b4 <ip4_reass+0x2b4>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f950:	e007      	b.n	800f962 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f958:	429a      	cmp	r2, r3
 800f95a:	d006      	beq.n	800f96a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f964:	2b00      	cmp	r3, #0
 800f966:	d1f4      	bne.n	800f952 <ip4_reass+0x252>
 800f968:	e000      	b.n	800f96c <ip4_reass+0x26c>
          break;
 800f96a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f96c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f96e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f970:	f7ff fd2e 	bl	800f3d0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f7f8 f9a7 	bl	8007cc8 <pbuf_clen>
 800f97a:	4603      	mov	r3, r0
 800f97c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f97e:	4b0c      	ldr	r3, [pc, #48]	; (800f9b0 <ip4_reass+0x2b0>)
 800f980:	881b      	ldrh	r3, [r3, #0]
 800f982:	8c3a      	ldrh	r2, [r7, #32]
 800f984:	429a      	cmp	r2, r3
 800f986:	d906      	bls.n	800f996 <ip4_reass+0x296>
 800f988:	4b0b      	ldr	r3, [pc, #44]	; (800f9b8 <ip4_reass+0x2b8>)
 800f98a:	f240 229b 	movw	r2, #667	; 0x29b
 800f98e:	490b      	ldr	r1, [pc, #44]	; (800f9bc <ip4_reass+0x2bc>)
 800f990:	480b      	ldr	r0, [pc, #44]	; (800f9c0 <ip4_reass+0x2c0>)
 800f992:	f001 f82b 	bl	80109ec <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f996:	4b06      	ldr	r3, [pc, #24]	; (800f9b0 <ip4_reass+0x2b0>)
 800f998:	881a      	ldrh	r2, [r3, #0]
 800f99a:	8c3b      	ldrh	r3, [r7, #32]
 800f99c:	1ad3      	subs	r3, r2, r3
 800f99e:	b29a      	uxth	r2, r3
 800f9a0:	4b03      	ldr	r3, [pc, #12]	; (800f9b0 <ip4_reass+0x2b0>)
 800f9a2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	e038      	b.n	800fa1a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	e036      	b.n	800fa1a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f9ac:	bf00      	nop
 800f9ae:	e00a      	b.n	800f9c6 <ip4_reass+0x2c6>
 800f9b0:	200009a0 	.word	0x200009a0
 800f9b4:	2000099c 	.word	0x2000099c
 800f9b8:	080154e8 	.word	0x080154e8
 800f9bc:	08015658 	.word	0x08015658
 800f9c0:	08015530 	.word	0x08015530
    goto nullreturn_ipr;
 800f9c4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d106      	bne.n	800f9da <ip4_reass+0x2da>
 800f9cc:	4b15      	ldr	r3, [pc, #84]	; (800fa24 <ip4_reass+0x324>)
 800f9ce:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f9d2:	4915      	ldr	r1, [pc, #84]	; (800fa28 <ip4_reass+0x328>)
 800f9d4:	4815      	ldr	r0, [pc, #84]	; (800fa2c <ip4_reass+0x32c>)
 800f9d6:	f001 f809 	bl	80109ec <iprintf>
  if (ipr->p == NULL) {
 800f9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d116      	bne.n	800fa10 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f9e2:	4b13      	ldr	r3, [pc, #76]	; (800fa30 <ip4_reass+0x330>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d006      	beq.n	800f9fa <ip4_reass+0x2fa>
 800f9ec:	4b0d      	ldr	r3, [pc, #52]	; (800fa24 <ip4_reass+0x324>)
 800f9ee:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f9f2:	4910      	ldr	r1, [pc, #64]	; (800fa34 <ip4_reass+0x334>)
 800f9f4:	480d      	ldr	r0, [pc, #52]	; (800fa2c <ip4_reass+0x32c>)
 800f9f6:	f000 fff9 	bl	80109ec <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9fe:	f7ff fce7 	bl	800f3d0 <ip_reass_dequeue_datagram>
 800fa02:	e006      	b.n	800fa12 <ip4_reass+0x312>
    goto nullreturn;
 800fa04:	bf00      	nop
 800fa06:	e004      	b.n	800fa12 <ip4_reass+0x312>
    goto nullreturn;
 800fa08:	bf00      	nop
 800fa0a:	e002      	b.n	800fa12 <ip4_reass+0x312>
      goto nullreturn;
 800fa0c:	bf00      	nop
 800fa0e:	e000      	b.n	800fa12 <ip4_reass+0x312>
  }

nullreturn:
 800fa10:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f7f8 f8d0 	bl	8007bb8 <pbuf_free>
  return NULL;
 800fa18:	2300      	movs	r3, #0
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3738      	adds	r7, #56	; 0x38
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	bf00      	nop
 800fa24:	080154e8 	.word	0x080154e8
 800fa28:	08015674 	.word	0x08015674
 800fa2c:	08015530 	.word	0x08015530
 800fa30:	2000099c 	.word	0x2000099c
 800fa34:	08015680 	.word	0x08015680

0800fa38 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800fa3c:	2005      	movs	r0, #5
 800fa3e:	f7f7 f9d5 	bl	8006dec <memp_malloc>
 800fa42:	4603      	mov	r3, r0
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d106      	bne.n	800fa64 <ip_frag_free_pbuf_custom_ref+0x1c>
 800fa56:	4b07      	ldr	r3, [pc, #28]	; (800fa74 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800fa58:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800fa5c:	4906      	ldr	r1, [pc, #24]	; (800fa78 <ip_frag_free_pbuf_custom_ref+0x30>)
 800fa5e:	4807      	ldr	r0, [pc, #28]	; (800fa7c <ip_frag_free_pbuf_custom_ref+0x34>)
 800fa60:	f000 ffc4 	bl	80109ec <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800fa64:	6879      	ldr	r1, [r7, #4]
 800fa66:	2005      	movs	r0, #5
 800fa68:	f7f7 fa30 	bl	8006ecc <memp_free>
}
 800fa6c:	bf00      	nop
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	080154e8 	.word	0x080154e8
 800fa78:	080156a0 	.word	0x080156a0
 800fa7c:	08015530 	.word	0x08015530

0800fa80 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b084      	sub	sp, #16
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d106      	bne.n	800faa0 <ipfrag_free_pbuf_custom+0x20>
 800fa92:	4b11      	ldr	r3, [pc, #68]	; (800fad8 <ipfrag_free_pbuf_custom+0x58>)
 800fa94:	f240 22ce 	movw	r2, #718	; 0x2ce
 800fa98:	4910      	ldr	r1, [pc, #64]	; (800fadc <ipfrag_free_pbuf_custom+0x5c>)
 800fa9a:	4811      	ldr	r0, [pc, #68]	; (800fae0 <ipfrag_free_pbuf_custom+0x60>)
 800fa9c:	f000 ffa6 	bl	80109ec <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800faa0:	68fa      	ldr	r2, [r7, #12]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d006      	beq.n	800fab6 <ipfrag_free_pbuf_custom+0x36>
 800faa8:	4b0b      	ldr	r3, [pc, #44]	; (800fad8 <ipfrag_free_pbuf_custom+0x58>)
 800faaa:	f240 22cf 	movw	r2, #719	; 0x2cf
 800faae:	490d      	ldr	r1, [pc, #52]	; (800fae4 <ipfrag_free_pbuf_custom+0x64>)
 800fab0:	480b      	ldr	r0, [pc, #44]	; (800fae0 <ipfrag_free_pbuf_custom+0x60>)
 800fab2:	f000 ff9b 	bl	80109ec <iprintf>
  if (pcr->original != NULL) {
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	695b      	ldr	r3, [r3, #20]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d004      	beq.n	800fac8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	695b      	ldr	r3, [r3, #20]
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7f8 f878 	bl	8007bb8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800fac8:	68f8      	ldr	r0, [r7, #12]
 800faca:	f7ff ffbd 	bl	800fa48 <ip_frag_free_pbuf_custom_ref>
}
 800face:	bf00      	nop
 800fad0:	3710      	adds	r7, #16
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	080154e8 	.word	0x080154e8
 800fadc:	080156ac 	.word	0x080156ac
 800fae0:	08015530 	.word	0x08015530
 800fae4:	080156b8 	.word	0x080156b8

0800fae8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b094      	sub	sp, #80	; 0x50
 800faec:	af02      	add	r7, sp, #8
 800faee:	60f8      	str	r0, [r7, #12]
 800faf0:	60b9      	str	r1, [r7, #8]
 800faf2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800faf4:	2300      	movs	r3, #0
 800faf6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fafe:	3b14      	subs	r3, #20
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	da00      	bge.n	800fb06 <ip4_frag+0x1e>
 800fb04:	3307      	adds	r3, #7
 800fb06:	10db      	asrs	r3, r3, #3
 800fb08:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800fb0a:	2314      	movs	r3, #20
 800fb0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	685b      	ldr	r3, [r3, #4]
 800fb12:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800fb14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb16:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800fb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	f003 030f 	and.w	r3, r3, #15
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	009b      	lsls	r3, r3, #2
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	2b14      	cmp	r3, #20
 800fb28:	d002      	beq.n	800fb30 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800fb2a:	f06f 0305 	mvn.w	r3, #5
 800fb2e:	e110      	b.n	800fd52 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	895b      	ldrh	r3, [r3, #10]
 800fb34:	2b13      	cmp	r3, #19
 800fb36:	d809      	bhi.n	800fb4c <ip4_frag+0x64>
 800fb38:	4b88      	ldr	r3, [pc, #544]	; (800fd5c <ip4_frag+0x274>)
 800fb3a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800fb3e:	4988      	ldr	r1, [pc, #544]	; (800fd60 <ip4_frag+0x278>)
 800fb40:	4888      	ldr	r0, [pc, #544]	; (800fd64 <ip4_frag+0x27c>)
 800fb42:	f000 ff53 	bl	80109ec <iprintf>
 800fb46:	f06f 0305 	mvn.w	r3, #5
 800fb4a:	e102      	b.n	800fd52 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb4e:	88db      	ldrh	r3, [r3, #6]
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	4618      	mov	r0, r3
 800fb54:	f7f6 fcd2 	bl	80064fc <lwip_htons>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800fb5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fb5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800fb66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fb68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fb6c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	891b      	ldrh	r3, [r3, #8]
 800fb72:	3b14      	subs	r3, #20
 800fb74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800fb78:	e0e1      	b.n	800fd3e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800fb7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fb7c:	00db      	lsls	r3, r3, #3
 800fb7e:	b29b      	uxth	r3, r3
 800fb80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fb84:	4293      	cmp	r3, r2
 800fb86:	bf28      	it	cs
 800fb88:	4613      	movcs	r3, r2
 800fb8a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fb8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fb90:	2114      	movs	r1, #20
 800fb92:	200e      	movs	r0, #14
 800fb94:	f7f7 fd2c 	bl	80075f0 <pbuf_alloc>
 800fb98:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800fb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	f000 80d5 	beq.w	800fd4c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba4:	895b      	ldrh	r3, [r3, #10]
 800fba6:	2b13      	cmp	r3, #19
 800fba8:	d806      	bhi.n	800fbb8 <ip4_frag+0xd0>
 800fbaa:	4b6c      	ldr	r3, [pc, #432]	; (800fd5c <ip4_frag+0x274>)
 800fbac:	f44f 7249 	mov.w	r2, #804	; 0x324
 800fbb0:	496d      	ldr	r1, [pc, #436]	; (800fd68 <ip4_frag+0x280>)
 800fbb2:	486c      	ldr	r0, [pc, #432]	; (800fd64 <ip4_frag+0x27c>)
 800fbb4:	f000 ff1a 	bl	80109ec <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbba:	685b      	ldr	r3, [r3, #4]
 800fbbc:	2214      	movs	r2, #20
 800fbbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f001 f82c 	bl	8010c1e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800fbcc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fbce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800fbd2:	e064      	b.n	800fc9e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	895a      	ldrh	r2, [r3, #10]
 800fbd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fbda:	1ad3      	subs	r3, r2, r3
 800fbdc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	895b      	ldrh	r3, [r3, #10]
 800fbe2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d906      	bls.n	800fbf6 <ip4_frag+0x10e>
 800fbe8:	4b5c      	ldr	r3, [pc, #368]	; (800fd5c <ip4_frag+0x274>)
 800fbea:	f240 322d 	movw	r2, #813	; 0x32d
 800fbee:	495f      	ldr	r1, [pc, #380]	; (800fd6c <ip4_frag+0x284>)
 800fbf0:	485c      	ldr	r0, [pc, #368]	; (800fd64 <ip4_frag+0x27c>)
 800fbf2:	f000 fefb 	bl	80109ec <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fbf6:	8bfa      	ldrh	r2, [r7, #30]
 800fbf8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fbfc:	4293      	cmp	r3, r2
 800fbfe:	bf28      	it	cs
 800fc00:	4613      	movcs	r3, r2
 800fc02:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800fc06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d105      	bne.n	800fc1a <ip4_frag+0x132>
        poff = 0;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	60fb      	str	r3, [r7, #12]
        continue;
 800fc18:	e041      	b.n	800fc9e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800fc1a:	f7ff ff0d 	bl	800fa38 <ip_frag_alloc_pbuf_custom_ref>
 800fc1e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d103      	bne.n	800fc2e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800fc26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc28:	f7f7 ffc6 	bl	8007bb8 <pbuf_free>
        goto memerr;
 800fc2c:	e08f      	b.n	800fd4e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fc2e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fc34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fc36:	4413      	add	r3, r2
 800fc38:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800fc3c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fc40:	9201      	str	r2, [sp, #4]
 800fc42:	9300      	str	r3, [sp, #0]
 800fc44:	4603      	mov	r3, r0
 800fc46:	2241      	movs	r2, #65	; 0x41
 800fc48:	2000      	movs	r0, #0
 800fc4a:	f7f7 fdfb 	bl	8007844 <pbuf_alloced_custom>
 800fc4e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d106      	bne.n	800fc64 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fc56:	69b8      	ldr	r0, [r7, #24]
 800fc58:	f7ff fef6 	bl	800fa48 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fc5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc5e:	f7f7 ffab 	bl	8007bb8 <pbuf_free>
        goto memerr;
 800fc62:	e074      	b.n	800fd4e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800fc64:	68f8      	ldr	r0, [r7, #12]
 800fc66:	f7f8 f847 	bl	8007cf8 <pbuf_ref>
      pcr->original = p;
 800fc6a:	69bb      	ldr	r3, [r7, #24]
 800fc6c:	68fa      	ldr	r2, [r7, #12]
 800fc6e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fc70:	69bb      	ldr	r3, [r7, #24]
 800fc72:	4a3f      	ldr	r2, [pc, #252]	; (800fd70 <ip4_frag+0x288>)
 800fc74:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fc76:	6979      	ldr	r1, [r7, #20]
 800fc78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc7a:	f7f8 f85f 	bl	8007d3c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800fc7e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800fc82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fc86:	1ad3      	subs	r3, r2, r3
 800fc88:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800fc8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d004      	beq.n	800fc9e <ip4_frag+0x1b6>
        poff = 0;
 800fc94:	2300      	movs	r3, #0
 800fc96:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fc9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d196      	bne.n	800fbd4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800fca6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fca8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fcac:	4413      	add	r3, r2
 800fcae:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fcb4:	f1a3 0213 	sub.w	r2, r3, #19
 800fcb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	bfcc      	ite	gt
 800fcc0:	2301      	movgt	r3, #1
 800fcc2:	2300      	movle	r3, #0
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fcc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fcd0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800fcd2:	6a3b      	ldr	r3, [r7, #32]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d002      	beq.n	800fcde <ip4_frag+0x1f6>
 800fcd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d003      	beq.n	800fce6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800fcde:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fce0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fce4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fce6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7f6 fc07 	bl	80064fc <lwip_htons>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	461a      	mov	r2, r3
 800fcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fcf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fcf8:	3314      	adds	r3, #20
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7f6 fbfd 	bl	80064fc <lwip_htons>
 800fd02:	4603      	mov	r3, r0
 800fd04:	461a      	mov	r2, r3
 800fd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd08:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	729a      	strb	r2, [r3, #10]
 800fd10:	2200      	movs	r2, #0
 800fd12:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	695b      	ldr	r3, [r3, #20]
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd1c:	68b8      	ldr	r0, [r7, #8]
 800fd1e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fd20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd22:	f7f7 ff49 	bl	8007bb8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fd26:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fd2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fd2c:	1ad3      	subs	r3, r2, r3
 800fd2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800fd32:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fd36:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fd38:	4413      	add	r3, r2
 800fd3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800fd3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	f47f af19 	bne.w	800fb7a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	e002      	b.n	800fd52 <ip4_frag+0x26a>
      goto memerr;
 800fd4c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fd4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3748      	adds	r7, #72	; 0x48
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	080154e8 	.word	0x080154e8
 800fd60:	080156c4 	.word	0x080156c4
 800fd64:	08015530 	.word	0x08015530
 800fd68:	080156e0 	.word	0x080156e0
 800fd6c:	08015700 	.word	0x08015700
 800fd70:	0800fa81 	.word	0x0800fa81

0800fd74 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b086      	sub	sp, #24
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800fd7e:	230e      	movs	r3, #14
 800fd80:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	895b      	ldrh	r3, [r3, #10]
 800fd86:	2b0e      	cmp	r3, #14
 800fd88:	d96e      	bls.n	800fe68 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	7bdb      	ldrb	r3, [r3, #15]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d106      	bne.n	800fda0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fd98:	3301      	adds	r3, #1
 800fd9a:	b2da      	uxtb	r2, r3
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	7b1a      	ldrb	r2, [r3, #12]
 800fdaa:	7b5b      	ldrb	r3, [r3, #13]
 800fdac:	021b      	lsls	r3, r3, #8
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	f003 0301 	and.w	r3, r3, #1
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d023      	beq.n	800fe06 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	2b01      	cmp	r3, #1
 800fdc4:	d10f      	bne.n	800fde6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	785b      	ldrb	r3, [r3, #1]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d11b      	bne.n	800fe06 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fdd2:	2b5e      	cmp	r3, #94	; 0x5e
 800fdd4:	d117      	bne.n	800fe06 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	7b5b      	ldrb	r3, [r3, #13]
 800fdda:	f043 0310 	orr.w	r3, r3, #16
 800fdde:	b2da      	uxtb	r2, r3
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	735a      	strb	r2, [r3, #13]
 800fde4:	e00f      	b.n	800fe06 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	2206      	movs	r2, #6
 800fdea:	4928      	ldr	r1, [pc, #160]	; (800fe8c <ethernet_input+0x118>)
 800fdec:	4618      	mov	r0, r3
 800fdee:	f000 fe72 	bl	8010ad6 <memcmp>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d106      	bne.n	800fe06 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	7b5b      	ldrb	r3, [r3, #13]
 800fdfc:	f043 0308 	orr.w	r3, r3, #8
 800fe00:	b2da      	uxtb	r2, r3
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fe06:	89fb      	ldrh	r3, [r7, #14]
 800fe08:	2b08      	cmp	r3, #8
 800fe0a:	d003      	beq.n	800fe14 <ethernet_input+0xa0>
 800fe0c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800fe10:	d014      	beq.n	800fe3c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fe12:	e032      	b.n	800fe7a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fe1a:	f003 0308 	and.w	r3, r3, #8
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d024      	beq.n	800fe6c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fe22:	8afb      	ldrh	r3, [r7, #22]
 800fe24:	4619      	mov	r1, r3
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f7f7 fe40 	bl	8007aac <pbuf_remove_header>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d11e      	bne.n	800fe70 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fe32:	6839      	ldr	r1, [r7, #0]
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f7fe ff21 	bl	800ec7c <ip4_input>
      break;
 800fe3a:	e013      	b.n	800fe64 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fe42:	f003 0308 	and.w	r3, r3, #8
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d014      	beq.n	800fe74 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fe4a:	8afb      	ldrh	r3, [r7, #22]
 800fe4c:	4619      	mov	r1, r3
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f7f7 fe2c 	bl	8007aac <pbuf_remove_header>
 800fe54:	4603      	mov	r3, r0
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d10e      	bne.n	800fe78 <ethernet_input+0x104>
        etharp_input(p, netif);
 800fe5a:	6839      	ldr	r1, [r7, #0]
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f7fe f8c1 	bl	800dfe4 <etharp_input>
      break;
 800fe62:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fe64:	2300      	movs	r3, #0
 800fe66:	e00c      	b.n	800fe82 <ethernet_input+0x10e>
    goto free_and_return;
 800fe68:	bf00      	nop
 800fe6a:	e006      	b.n	800fe7a <ethernet_input+0x106>
        goto free_and_return;
 800fe6c:	bf00      	nop
 800fe6e:	e004      	b.n	800fe7a <ethernet_input+0x106>
        goto free_and_return;
 800fe70:	bf00      	nop
 800fe72:	e002      	b.n	800fe7a <ethernet_input+0x106>
        goto free_and_return;
 800fe74:	bf00      	nop
 800fe76:	e000      	b.n	800fe7a <ethernet_input+0x106>
        goto free_and_return;
 800fe78:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f7f7 fe9c 	bl	8007bb8 <pbuf_free>
  return ERR_OK;
 800fe80:	2300      	movs	r3, #0
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3718      	adds	r7, #24
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	0801609c 	.word	0x0801609c

0800fe90 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b086      	sub	sp, #24
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	607a      	str	r2, [r7, #4]
 800fe9c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fe9e:	8c3b      	ldrh	r3, [r7, #32]
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7f6 fb2b 	bl	80064fc <lwip_htons>
 800fea6:	4603      	mov	r3, r0
 800fea8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800feaa:	210e      	movs	r1, #14
 800feac:	68b8      	ldr	r0, [r7, #8]
 800feae:	f7f7 fded 	bl	8007a8c <pbuf_add_header>
 800feb2:	4603      	mov	r3, r0
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d125      	bne.n	800ff04 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800febe:	693b      	ldr	r3, [r7, #16]
 800fec0:	8afa      	ldrh	r2, [r7, #22]
 800fec2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	2206      	movs	r2, #6
 800fec8:	6839      	ldr	r1, [r7, #0]
 800feca:	4618      	mov	r0, r3
 800fecc:	f000 fea7 	bl	8010c1e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	3306      	adds	r3, #6
 800fed4:	2206      	movs	r2, #6
 800fed6:	6879      	ldr	r1, [r7, #4]
 800fed8:	4618      	mov	r0, r3
 800feda:	f000 fea0 	bl	8010c1e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fee4:	2b06      	cmp	r3, #6
 800fee6:	d006      	beq.n	800fef6 <ethernet_output+0x66>
 800fee8:	4b0a      	ldr	r3, [pc, #40]	; (800ff14 <ethernet_output+0x84>)
 800feea:	f44f 7299 	mov.w	r2, #306	; 0x132
 800feee:	490a      	ldr	r1, [pc, #40]	; (800ff18 <ethernet_output+0x88>)
 800fef0:	480a      	ldr	r0, [pc, #40]	; (800ff1c <ethernet_output+0x8c>)
 800fef2:	f000 fd7b 	bl	80109ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	699b      	ldr	r3, [r3, #24]
 800fefa:	68b9      	ldr	r1, [r7, #8]
 800fefc:	68f8      	ldr	r0, [r7, #12]
 800fefe:	4798      	blx	r3
 800ff00:	4603      	mov	r3, r0
 800ff02:	e002      	b.n	800ff0a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ff04:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ff06:	f06f 0301 	mvn.w	r3, #1
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3718      	adds	r7, #24
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}
 800ff12:	bf00      	nop
 800ff14:	08015710 	.word	0x08015710
 800ff18:	08015748 	.word	0x08015748
 800ff1c:	0801577c 	.word	0x0801577c

0800ff20 <rand>:
 800ff20:	4b16      	ldr	r3, [pc, #88]	; (800ff7c <rand+0x5c>)
 800ff22:	b510      	push	{r4, lr}
 800ff24:	681c      	ldr	r4, [r3, #0]
 800ff26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ff28:	b9b3      	cbnz	r3, 800ff58 <rand+0x38>
 800ff2a:	2018      	movs	r0, #24
 800ff2c:	f001 fd6a 	bl	8011a04 <malloc>
 800ff30:	4602      	mov	r2, r0
 800ff32:	6320      	str	r0, [r4, #48]	; 0x30
 800ff34:	b920      	cbnz	r0, 800ff40 <rand+0x20>
 800ff36:	4b12      	ldr	r3, [pc, #72]	; (800ff80 <rand+0x60>)
 800ff38:	4812      	ldr	r0, [pc, #72]	; (800ff84 <rand+0x64>)
 800ff3a:	2152      	movs	r1, #82	; 0x52
 800ff3c:	f000 fe7e 	bl	8010c3c <__assert_func>
 800ff40:	4911      	ldr	r1, [pc, #68]	; (800ff88 <rand+0x68>)
 800ff42:	4b12      	ldr	r3, [pc, #72]	; (800ff8c <rand+0x6c>)
 800ff44:	e9c0 1300 	strd	r1, r3, [r0]
 800ff48:	4b11      	ldr	r3, [pc, #68]	; (800ff90 <rand+0x70>)
 800ff4a:	6083      	str	r3, [r0, #8]
 800ff4c:	230b      	movs	r3, #11
 800ff4e:	8183      	strh	r3, [r0, #12]
 800ff50:	2100      	movs	r1, #0
 800ff52:	2001      	movs	r0, #1
 800ff54:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ff58:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ff5a:	480e      	ldr	r0, [pc, #56]	; (800ff94 <rand+0x74>)
 800ff5c:	690b      	ldr	r3, [r1, #16]
 800ff5e:	694c      	ldr	r4, [r1, #20]
 800ff60:	4a0d      	ldr	r2, [pc, #52]	; (800ff98 <rand+0x78>)
 800ff62:	4358      	muls	r0, r3
 800ff64:	fb02 0004 	mla	r0, r2, r4, r0
 800ff68:	fba3 3202 	umull	r3, r2, r3, r2
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	eb40 0002 	adc.w	r0, r0, r2
 800ff72:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ff76:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ff7a:	bd10      	pop	{r4, pc}
 800ff7c:	2000008c 	.word	0x2000008c
 800ff80:	080160aa 	.word	0x080160aa
 800ff84:	080160c1 	.word	0x080160c1
 800ff88:	abcd330e 	.word	0xabcd330e
 800ff8c:	e66d1234 	.word	0xe66d1234
 800ff90:	0005deec 	.word	0x0005deec
 800ff94:	5851f42d 	.word	0x5851f42d
 800ff98:	4c957f2d 	.word	0x4c957f2d

0800ff9c <__cvt>:
 800ff9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffa0:	ec55 4b10 	vmov	r4, r5, d0
 800ffa4:	2d00      	cmp	r5, #0
 800ffa6:	460e      	mov	r6, r1
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	462b      	mov	r3, r5
 800ffac:	bfbb      	ittet	lt
 800ffae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ffb2:	461d      	movlt	r5, r3
 800ffb4:	2300      	movge	r3, #0
 800ffb6:	232d      	movlt	r3, #45	; 0x2d
 800ffb8:	700b      	strb	r3, [r1, #0]
 800ffba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ffc0:	4691      	mov	r9, r2
 800ffc2:	f023 0820 	bic.w	r8, r3, #32
 800ffc6:	bfbc      	itt	lt
 800ffc8:	4622      	movlt	r2, r4
 800ffca:	4614      	movlt	r4, r2
 800ffcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ffd0:	d005      	beq.n	800ffde <__cvt+0x42>
 800ffd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ffd6:	d100      	bne.n	800ffda <__cvt+0x3e>
 800ffd8:	3601      	adds	r6, #1
 800ffda:	2102      	movs	r1, #2
 800ffdc:	e000      	b.n	800ffe0 <__cvt+0x44>
 800ffde:	2103      	movs	r1, #3
 800ffe0:	ab03      	add	r3, sp, #12
 800ffe2:	9301      	str	r3, [sp, #4]
 800ffe4:	ab02      	add	r3, sp, #8
 800ffe6:	9300      	str	r3, [sp, #0]
 800ffe8:	ec45 4b10 	vmov	d0, r4, r5
 800ffec:	4653      	mov	r3, sl
 800ffee:	4632      	mov	r2, r6
 800fff0:	f000 feca 	bl	8010d88 <_dtoa_r>
 800fff4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fff8:	4607      	mov	r7, r0
 800fffa:	d102      	bne.n	8010002 <__cvt+0x66>
 800fffc:	f019 0f01 	tst.w	r9, #1
 8010000:	d022      	beq.n	8010048 <__cvt+0xac>
 8010002:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010006:	eb07 0906 	add.w	r9, r7, r6
 801000a:	d110      	bne.n	801002e <__cvt+0x92>
 801000c:	783b      	ldrb	r3, [r7, #0]
 801000e:	2b30      	cmp	r3, #48	; 0x30
 8010010:	d10a      	bne.n	8010028 <__cvt+0x8c>
 8010012:	2200      	movs	r2, #0
 8010014:	2300      	movs	r3, #0
 8010016:	4620      	mov	r0, r4
 8010018:	4629      	mov	r1, r5
 801001a:	f7f0 fd65 	bl	8000ae8 <__aeabi_dcmpeq>
 801001e:	b918      	cbnz	r0, 8010028 <__cvt+0x8c>
 8010020:	f1c6 0601 	rsb	r6, r6, #1
 8010024:	f8ca 6000 	str.w	r6, [sl]
 8010028:	f8da 3000 	ldr.w	r3, [sl]
 801002c:	4499      	add	r9, r3
 801002e:	2200      	movs	r2, #0
 8010030:	2300      	movs	r3, #0
 8010032:	4620      	mov	r0, r4
 8010034:	4629      	mov	r1, r5
 8010036:	f7f0 fd57 	bl	8000ae8 <__aeabi_dcmpeq>
 801003a:	b108      	cbz	r0, 8010040 <__cvt+0xa4>
 801003c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010040:	2230      	movs	r2, #48	; 0x30
 8010042:	9b03      	ldr	r3, [sp, #12]
 8010044:	454b      	cmp	r3, r9
 8010046:	d307      	bcc.n	8010058 <__cvt+0xbc>
 8010048:	9b03      	ldr	r3, [sp, #12]
 801004a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801004c:	1bdb      	subs	r3, r3, r7
 801004e:	4638      	mov	r0, r7
 8010050:	6013      	str	r3, [r2, #0]
 8010052:	b004      	add	sp, #16
 8010054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010058:	1c59      	adds	r1, r3, #1
 801005a:	9103      	str	r1, [sp, #12]
 801005c:	701a      	strb	r2, [r3, #0]
 801005e:	e7f0      	b.n	8010042 <__cvt+0xa6>

08010060 <__exponent>:
 8010060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010062:	4603      	mov	r3, r0
 8010064:	2900      	cmp	r1, #0
 8010066:	bfb8      	it	lt
 8010068:	4249      	neglt	r1, r1
 801006a:	f803 2b02 	strb.w	r2, [r3], #2
 801006e:	bfb4      	ite	lt
 8010070:	222d      	movlt	r2, #45	; 0x2d
 8010072:	222b      	movge	r2, #43	; 0x2b
 8010074:	2909      	cmp	r1, #9
 8010076:	7042      	strb	r2, [r0, #1]
 8010078:	dd2a      	ble.n	80100d0 <__exponent+0x70>
 801007a:	f10d 0207 	add.w	r2, sp, #7
 801007e:	4617      	mov	r7, r2
 8010080:	260a      	movs	r6, #10
 8010082:	4694      	mov	ip, r2
 8010084:	fb91 f5f6 	sdiv	r5, r1, r6
 8010088:	fb06 1415 	mls	r4, r6, r5, r1
 801008c:	3430      	adds	r4, #48	; 0x30
 801008e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010092:	460c      	mov	r4, r1
 8010094:	2c63      	cmp	r4, #99	; 0x63
 8010096:	f102 32ff 	add.w	r2, r2, #4294967295
 801009a:	4629      	mov	r1, r5
 801009c:	dcf1      	bgt.n	8010082 <__exponent+0x22>
 801009e:	3130      	adds	r1, #48	; 0x30
 80100a0:	f1ac 0402 	sub.w	r4, ip, #2
 80100a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80100a8:	1c41      	adds	r1, r0, #1
 80100aa:	4622      	mov	r2, r4
 80100ac:	42ba      	cmp	r2, r7
 80100ae:	d30a      	bcc.n	80100c6 <__exponent+0x66>
 80100b0:	f10d 0209 	add.w	r2, sp, #9
 80100b4:	eba2 020c 	sub.w	r2, r2, ip
 80100b8:	42bc      	cmp	r4, r7
 80100ba:	bf88      	it	hi
 80100bc:	2200      	movhi	r2, #0
 80100be:	4413      	add	r3, r2
 80100c0:	1a18      	subs	r0, r3, r0
 80100c2:	b003      	add	sp, #12
 80100c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80100ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 80100ce:	e7ed      	b.n	80100ac <__exponent+0x4c>
 80100d0:	2330      	movs	r3, #48	; 0x30
 80100d2:	3130      	adds	r1, #48	; 0x30
 80100d4:	7083      	strb	r3, [r0, #2]
 80100d6:	70c1      	strb	r1, [r0, #3]
 80100d8:	1d03      	adds	r3, r0, #4
 80100da:	e7f1      	b.n	80100c0 <__exponent+0x60>

080100dc <_printf_float>:
 80100dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100e0:	ed2d 8b02 	vpush	{d8}
 80100e4:	b08d      	sub	sp, #52	; 0x34
 80100e6:	460c      	mov	r4, r1
 80100e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80100ec:	4616      	mov	r6, r2
 80100ee:	461f      	mov	r7, r3
 80100f0:	4605      	mov	r5, r0
 80100f2:	f000 fd23 	bl	8010b3c <_localeconv_r>
 80100f6:	f8d0 a000 	ldr.w	sl, [r0]
 80100fa:	4650      	mov	r0, sl
 80100fc:	f7f0 f8c8 	bl	8000290 <strlen>
 8010100:	2300      	movs	r3, #0
 8010102:	930a      	str	r3, [sp, #40]	; 0x28
 8010104:	6823      	ldr	r3, [r4, #0]
 8010106:	9305      	str	r3, [sp, #20]
 8010108:	f8d8 3000 	ldr.w	r3, [r8]
 801010c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010110:	3307      	adds	r3, #7
 8010112:	f023 0307 	bic.w	r3, r3, #7
 8010116:	f103 0208 	add.w	r2, r3, #8
 801011a:	f8c8 2000 	str.w	r2, [r8]
 801011e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010122:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010126:	9307      	str	r3, [sp, #28]
 8010128:	f8cd 8018 	str.w	r8, [sp, #24]
 801012c:	ee08 0a10 	vmov	s16, r0
 8010130:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010134:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010138:	4b9e      	ldr	r3, [pc, #632]	; (80103b4 <_printf_float+0x2d8>)
 801013a:	f04f 32ff 	mov.w	r2, #4294967295
 801013e:	f7f0 fd05 	bl	8000b4c <__aeabi_dcmpun>
 8010142:	bb88      	cbnz	r0, 80101a8 <_printf_float+0xcc>
 8010144:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010148:	4b9a      	ldr	r3, [pc, #616]	; (80103b4 <_printf_float+0x2d8>)
 801014a:	f04f 32ff 	mov.w	r2, #4294967295
 801014e:	f7f0 fcdf 	bl	8000b10 <__aeabi_dcmple>
 8010152:	bb48      	cbnz	r0, 80101a8 <_printf_float+0xcc>
 8010154:	2200      	movs	r2, #0
 8010156:	2300      	movs	r3, #0
 8010158:	4640      	mov	r0, r8
 801015a:	4649      	mov	r1, r9
 801015c:	f7f0 fcce 	bl	8000afc <__aeabi_dcmplt>
 8010160:	b110      	cbz	r0, 8010168 <_printf_float+0x8c>
 8010162:	232d      	movs	r3, #45	; 0x2d
 8010164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010168:	4a93      	ldr	r2, [pc, #588]	; (80103b8 <_printf_float+0x2dc>)
 801016a:	4b94      	ldr	r3, [pc, #592]	; (80103bc <_printf_float+0x2e0>)
 801016c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010170:	bf94      	ite	ls
 8010172:	4690      	movls	r8, r2
 8010174:	4698      	movhi	r8, r3
 8010176:	2303      	movs	r3, #3
 8010178:	6123      	str	r3, [r4, #16]
 801017a:	9b05      	ldr	r3, [sp, #20]
 801017c:	f023 0304 	bic.w	r3, r3, #4
 8010180:	6023      	str	r3, [r4, #0]
 8010182:	f04f 0900 	mov.w	r9, #0
 8010186:	9700      	str	r7, [sp, #0]
 8010188:	4633      	mov	r3, r6
 801018a:	aa0b      	add	r2, sp, #44	; 0x2c
 801018c:	4621      	mov	r1, r4
 801018e:	4628      	mov	r0, r5
 8010190:	f000 f9da 	bl	8010548 <_printf_common>
 8010194:	3001      	adds	r0, #1
 8010196:	f040 8090 	bne.w	80102ba <_printf_float+0x1de>
 801019a:	f04f 30ff 	mov.w	r0, #4294967295
 801019e:	b00d      	add	sp, #52	; 0x34
 80101a0:	ecbd 8b02 	vpop	{d8}
 80101a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101a8:	4642      	mov	r2, r8
 80101aa:	464b      	mov	r3, r9
 80101ac:	4640      	mov	r0, r8
 80101ae:	4649      	mov	r1, r9
 80101b0:	f7f0 fccc 	bl	8000b4c <__aeabi_dcmpun>
 80101b4:	b140      	cbz	r0, 80101c8 <_printf_float+0xec>
 80101b6:	464b      	mov	r3, r9
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	bfbc      	itt	lt
 80101bc:	232d      	movlt	r3, #45	; 0x2d
 80101be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80101c2:	4a7f      	ldr	r2, [pc, #508]	; (80103c0 <_printf_float+0x2e4>)
 80101c4:	4b7f      	ldr	r3, [pc, #508]	; (80103c4 <_printf_float+0x2e8>)
 80101c6:	e7d1      	b.n	801016c <_printf_float+0x90>
 80101c8:	6863      	ldr	r3, [r4, #4]
 80101ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80101ce:	9206      	str	r2, [sp, #24]
 80101d0:	1c5a      	adds	r2, r3, #1
 80101d2:	d13f      	bne.n	8010254 <_printf_float+0x178>
 80101d4:	2306      	movs	r3, #6
 80101d6:	6063      	str	r3, [r4, #4]
 80101d8:	9b05      	ldr	r3, [sp, #20]
 80101da:	6861      	ldr	r1, [r4, #4]
 80101dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80101e0:	2300      	movs	r3, #0
 80101e2:	9303      	str	r3, [sp, #12]
 80101e4:	ab0a      	add	r3, sp, #40	; 0x28
 80101e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80101ea:	ab09      	add	r3, sp, #36	; 0x24
 80101ec:	ec49 8b10 	vmov	d0, r8, r9
 80101f0:	9300      	str	r3, [sp, #0]
 80101f2:	6022      	str	r2, [r4, #0]
 80101f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80101f8:	4628      	mov	r0, r5
 80101fa:	f7ff fecf 	bl	800ff9c <__cvt>
 80101fe:	9b06      	ldr	r3, [sp, #24]
 8010200:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010202:	2b47      	cmp	r3, #71	; 0x47
 8010204:	4680      	mov	r8, r0
 8010206:	d108      	bne.n	801021a <_printf_float+0x13e>
 8010208:	1cc8      	adds	r0, r1, #3
 801020a:	db02      	blt.n	8010212 <_printf_float+0x136>
 801020c:	6863      	ldr	r3, [r4, #4]
 801020e:	4299      	cmp	r1, r3
 8010210:	dd41      	ble.n	8010296 <_printf_float+0x1ba>
 8010212:	f1ab 0302 	sub.w	r3, fp, #2
 8010216:	fa5f fb83 	uxtb.w	fp, r3
 801021a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801021e:	d820      	bhi.n	8010262 <_printf_float+0x186>
 8010220:	3901      	subs	r1, #1
 8010222:	465a      	mov	r2, fp
 8010224:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010228:	9109      	str	r1, [sp, #36]	; 0x24
 801022a:	f7ff ff19 	bl	8010060 <__exponent>
 801022e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010230:	1813      	adds	r3, r2, r0
 8010232:	2a01      	cmp	r2, #1
 8010234:	4681      	mov	r9, r0
 8010236:	6123      	str	r3, [r4, #16]
 8010238:	dc02      	bgt.n	8010240 <_printf_float+0x164>
 801023a:	6822      	ldr	r2, [r4, #0]
 801023c:	07d2      	lsls	r2, r2, #31
 801023e:	d501      	bpl.n	8010244 <_printf_float+0x168>
 8010240:	3301      	adds	r3, #1
 8010242:	6123      	str	r3, [r4, #16]
 8010244:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010248:	2b00      	cmp	r3, #0
 801024a:	d09c      	beq.n	8010186 <_printf_float+0xaa>
 801024c:	232d      	movs	r3, #45	; 0x2d
 801024e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010252:	e798      	b.n	8010186 <_printf_float+0xaa>
 8010254:	9a06      	ldr	r2, [sp, #24]
 8010256:	2a47      	cmp	r2, #71	; 0x47
 8010258:	d1be      	bne.n	80101d8 <_printf_float+0xfc>
 801025a:	2b00      	cmp	r3, #0
 801025c:	d1bc      	bne.n	80101d8 <_printf_float+0xfc>
 801025e:	2301      	movs	r3, #1
 8010260:	e7b9      	b.n	80101d6 <_printf_float+0xfa>
 8010262:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010266:	d118      	bne.n	801029a <_printf_float+0x1be>
 8010268:	2900      	cmp	r1, #0
 801026a:	6863      	ldr	r3, [r4, #4]
 801026c:	dd0b      	ble.n	8010286 <_printf_float+0x1aa>
 801026e:	6121      	str	r1, [r4, #16]
 8010270:	b913      	cbnz	r3, 8010278 <_printf_float+0x19c>
 8010272:	6822      	ldr	r2, [r4, #0]
 8010274:	07d0      	lsls	r0, r2, #31
 8010276:	d502      	bpl.n	801027e <_printf_float+0x1a2>
 8010278:	3301      	adds	r3, #1
 801027a:	440b      	add	r3, r1
 801027c:	6123      	str	r3, [r4, #16]
 801027e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010280:	f04f 0900 	mov.w	r9, #0
 8010284:	e7de      	b.n	8010244 <_printf_float+0x168>
 8010286:	b913      	cbnz	r3, 801028e <_printf_float+0x1b2>
 8010288:	6822      	ldr	r2, [r4, #0]
 801028a:	07d2      	lsls	r2, r2, #31
 801028c:	d501      	bpl.n	8010292 <_printf_float+0x1b6>
 801028e:	3302      	adds	r3, #2
 8010290:	e7f4      	b.n	801027c <_printf_float+0x1a0>
 8010292:	2301      	movs	r3, #1
 8010294:	e7f2      	b.n	801027c <_printf_float+0x1a0>
 8010296:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801029a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801029c:	4299      	cmp	r1, r3
 801029e:	db05      	blt.n	80102ac <_printf_float+0x1d0>
 80102a0:	6823      	ldr	r3, [r4, #0]
 80102a2:	6121      	str	r1, [r4, #16]
 80102a4:	07d8      	lsls	r0, r3, #31
 80102a6:	d5ea      	bpl.n	801027e <_printf_float+0x1a2>
 80102a8:	1c4b      	adds	r3, r1, #1
 80102aa:	e7e7      	b.n	801027c <_printf_float+0x1a0>
 80102ac:	2900      	cmp	r1, #0
 80102ae:	bfd4      	ite	le
 80102b0:	f1c1 0202 	rsble	r2, r1, #2
 80102b4:	2201      	movgt	r2, #1
 80102b6:	4413      	add	r3, r2
 80102b8:	e7e0      	b.n	801027c <_printf_float+0x1a0>
 80102ba:	6823      	ldr	r3, [r4, #0]
 80102bc:	055a      	lsls	r2, r3, #21
 80102be:	d407      	bmi.n	80102d0 <_printf_float+0x1f4>
 80102c0:	6923      	ldr	r3, [r4, #16]
 80102c2:	4642      	mov	r2, r8
 80102c4:	4631      	mov	r1, r6
 80102c6:	4628      	mov	r0, r5
 80102c8:	47b8      	blx	r7
 80102ca:	3001      	adds	r0, #1
 80102cc:	d12c      	bne.n	8010328 <_printf_float+0x24c>
 80102ce:	e764      	b.n	801019a <_printf_float+0xbe>
 80102d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80102d4:	f240 80e0 	bls.w	8010498 <_printf_float+0x3bc>
 80102d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80102dc:	2200      	movs	r2, #0
 80102de:	2300      	movs	r3, #0
 80102e0:	f7f0 fc02 	bl	8000ae8 <__aeabi_dcmpeq>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	d034      	beq.n	8010352 <_printf_float+0x276>
 80102e8:	4a37      	ldr	r2, [pc, #220]	; (80103c8 <_printf_float+0x2ec>)
 80102ea:	2301      	movs	r3, #1
 80102ec:	4631      	mov	r1, r6
 80102ee:	4628      	mov	r0, r5
 80102f0:	47b8      	blx	r7
 80102f2:	3001      	adds	r0, #1
 80102f4:	f43f af51 	beq.w	801019a <_printf_float+0xbe>
 80102f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102fc:	429a      	cmp	r2, r3
 80102fe:	db02      	blt.n	8010306 <_printf_float+0x22a>
 8010300:	6823      	ldr	r3, [r4, #0]
 8010302:	07d8      	lsls	r0, r3, #31
 8010304:	d510      	bpl.n	8010328 <_printf_float+0x24c>
 8010306:	ee18 3a10 	vmov	r3, s16
 801030a:	4652      	mov	r2, sl
 801030c:	4631      	mov	r1, r6
 801030e:	4628      	mov	r0, r5
 8010310:	47b8      	blx	r7
 8010312:	3001      	adds	r0, #1
 8010314:	f43f af41 	beq.w	801019a <_printf_float+0xbe>
 8010318:	f04f 0800 	mov.w	r8, #0
 801031c:	f104 091a 	add.w	r9, r4, #26
 8010320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010322:	3b01      	subs	r3, #1
 8010324:	4543      	cmp	r3, r8
 8010326:	dc09      	bgt.n	801033c <_printf_float+0x260>
 8010328:	6823      	ldr	r3, [r4, #0]
 801032a:	079b      	lsls	r3, r3, #30
 801032c:	f100 8107 	bmi.w	801053e <_printf_float+0x462>
 8010330:	68e0      	ldr	r0, [r4, #12]
 8010332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010334:	4298      	cmp	r0, r3
 8010336:	bfb8      	it	lt
 8010338:	4618      	movlt	r0, r3
 801033a:	e730      	b.n	801019e <_printf_float+0xc2>
 801033c:	2301      	movs	r3, #1
 801033e:	464a      	mov	r2, r9
 8010340:	4631      	mov	r1, r6
 8010342:	4628      	mov	r0, r5
 8010344:	47b8      	blx	r7
 8010346:	3001      	adds	r0, #1
 8010348:	f43f af27 	beq.w	801019a <_printf_float+0xbe>
 801034c:	f108 0801 	add.w	r8, r8, #1
 8010350:	e7e6      	b.n	8010320 <_printf_float+0x244>
 8010352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010354:	2b00      	cmp	r3, #0
 8010356:	dc39      	bgt.n	80103cc <_printf_float+0x2f0>
 8010358:	4a1b      	ldr	r2, [pc, #108]	; (80103c8 <_printf_float+0x2ec>)
 801035a:	2301      	movs	r3, #1
 801035c:	4631      	mov	r1, r6
 801035e:	4628      	mov	r0, r5
 8010360:	47b8      	blx	r7
 8010362:	3001      	adds	r0, #1
 8010364:	f43f af19 	beq.w	801019a <_printf_float+0xbe>
 8010368:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801036c:	4313      	orrs	r3, r2
 801036e:	d102      	bne.n	8010376 <_printf_float+0x29a>
 8010370:	6823      	ldr	r3, [r4, #0]
 8010372:	07d9      	lsls	r1, r3, #31
 8010374:	d5d8      	bpl.n	8010328 <_printf_float+0x24c>
 8010376:	ee18 3a10 	vmov	r3, s16
 801037a:	4652      	mov	r2, sl
 801037c:	4631      	mov	r1, r6
 801037e:	4628      	mov	r0, r5
 8010380:	47b8      	blx	r7
 8010382:	3001      	adds	r0, #1
 8010384:	f43f af09 	beq.w	801019a <_printf_float+0xbe>
 8010388:	f04f 0900 	mov.w	r9, #0
 801038c:	f104 0a1a 	add.w	sl, r4, #26
 8010390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010392:	425b      	negs	r3, r3
 8010394:	454b      	cmp	r3, r9
 8010396:	dc01      	bgt.n	801039c <_printf_float+0x2c0>
 8010398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801039a:	e792      	b.n	80102c2 <_printf_float+0x1e6>
 801039c:	2301      	movs	r3, #1
 801039e:	4652      	mov	r2, sl
 80103a0:	4631      	mov	r1, r6
 80103a2:	4628      	mov	r0, r5
 80103a4:	47b8      	blx	r7
 80103a6:	3001      	adds	r0, #1
 80103a8:	f43f aef7 	beq.w	801019a <_printf_float+0xbe>
 80103ac:	f109 0901 	add.w	r9, r9, #1
 80103b0:	e7ee      	b.n	8010390 <_printf_float+0x2b4>
 80103b2:	bf00      	nop
 80103b4:	7fefffff 	.word	0x7fefffff
 80103b8:	0801621a 	.word	0x0801621a
 80103bc:	0801621e 	.word	0x0801621e
 80103c0:	08016222 	.word	0x08016222
 80103c4:	08016226 	.word	0x08016226
 80103c8:	0801622a 	.word	0x0801622a
 80103cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103d0:	429a      	cmp	r2, r3
 80103d2:	bfa8      	it	ge
 80103d4:	461a      	movge	r2, r3
 80103d6:	2a00      	cmp	r2, #0
 80103d8:	4691      	mov	r9, r2
 80103da:	dc37      	bgt.n	801044c <_printf_float+0x370>
 80103dc:	f04f 0b00 	mov.w	fp, #0
 80103e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80103e4:	f104 021a 	add.w	r2, r4, #26
 80103e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103ea:	9305      	str	r3, [sp, #20]
 80103ec:	eba3 0309 	sub.w	r3, r3, r9
 80103f0:	455b      	cmp	r3, fp
 80103f2:	dc33      	bgt.n	801045c <_printf_float+0x380>
 80103f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103f8:	429a      	cmp	r2, r3
 80103fa:	db3b      	blt.n	8010474 <_printf_float+0x398>
 80103fc:	6823      	ldr	r3, [r4, #0]
 80103fe:	07da      	lsls	r2, r3, #31
 8010400:	d438      	bmi.n	8010474 <_printf_float+0x398>
 8010402:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010406:	eba2 0903 	sub.w	r9, r2, r3
 801040a:	9b05      	ldr	r3, [sp, #20]
 801040c:	1ad2      	subs	r2, r2, r3
 801040e:	4591      	cmp	r9, r2
 8010410:	bfa8      	it	ge
 8010412:	4691      	movge	r9, r2
 8010414:	f1b9 0f00 	cmp.w	r9, #0
 8010418:	dc35      	bgt.n	8010486 <_printf_float+0x3aa>
 801041a:	f04f 0800 	mov.w	r8, #0
 801041e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010422:	f104 0a1a 	add.w	sl, r4, #26
 8010426:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801042a:	1a9b      	subs	r3, r3, r2
 801042c:	eba3 0309 	sub.w	r3, r3, r9
 8010430:	4543      	cmp	r3, r8
 8010432:	f77f af79 	ble.w	8010328 <_printf_float+0x24c>
 8010436:	2301      	movs	r3, #1
 8010438:	4652      	mov	r2, sl
 801043a:	4631      	mov	r1, r6
 801043c:	4628      	mov	r0, r5
 801043e:	47b8      	blx	r7
 8010440:	3001      	adds	r0, #1
 8010442:	f43f aeaa 	beq.w	801019a <_printf_float+0xbe>
 8010446:	f108 0801 	add.w	r8, r8, #1
 801044a:	e7ec      	b.n	8010426 <_printf_float+0x34a>
 801044c:	4613      	mov	r3, r2
 801044e:	4631      	mov	r1, r6
 8010450:	4642      	mov	r2, r8
 8010452:	4628      	mov	r0, r5
 8010454:	47b8      	blx	r7
 8010456:	3001      	adds	r0, #1
 8010458:	d1c0      	bne.n	80103dc <_printf_float+0x300>
 801045a:	e69e      	b.n	801019a <_printf_float+0xbe>
 801045c:	2301      	movs	r3, #1
 801045e:	4631      	mov	r1, r6
 8010460:	4628      	mov	r0, r5
 8010462:	9205      	str	r2, [sp, #20]
 8010464:	47b8      	blx	r7
 8010466:	3001      	adds	r0, #1
 8010468:	f43f ae97 	beq.w	801019a <_printf_float+0xbe>
 801046c:	9a05      	ldr	r2, [sp, #20]
 801046e:	f10b 0b01 	add.w	fp, fp, #1
 8010472:	e7b9      	b.n	80103e8 <_printf_float+0x30c>
 8010474:	ee18 3a10 	vmov	r3, s16
 8010478:	4652      	mov	r2, sl
 801047a:	4631      	mov	r1, r6
 801047c:	4628      	mov	r0, r5
 801047e:	47b8      	blx	r7
 8010480:	3001      	adds	r0, #1
 8010482:	d1be      	bne.n	8010402 <_printf_float+0x326>
 8010484:	e689      	b.n	801019a <_printf_float+0xbe>
 8010486:	9a05      	ldr	r2, [sp, #20]
 8010488:	464b      	mov	r3, r9
 801048a:	4442      	add	r2, r8
 801048c:	4631      	mov	r1, r6
 801048e:	4628      	mov	r0, r5
 8010490:	47b8      	blx	r7
 8010492:	3001      	adds	r0, #1
 8010494:	d1c1      	bne.n	801041a <_printf_float+0x33e>
 8010496:	e680      	b.n	801019a <_printf_float+0xbe>
 8010498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801049a:	2a01      	cmp	r2, #1
 801049c:	dc01      	bgt.n	80104a2 <_printf_float+0x3c6>
 801049e:	07db      	lsls	r3, r3, #31
 80104a0:	d53a      	bpl.n	8010518 <_printf_float+0x43c>
 80104a2:	2301      	movs	r3, #1
 80104a4:	4642      	mov	r2, r8
 80104a6:	4631      	mov	r1, r6
 80104a8:	4628      	mov	r0, r5
 80104aa:	47b8      	blx	r7
 80104ac:	3001      	adds	r0, #1
 80104ae:	f43f ae74 	beq.w	801019a <_printf_float+0xbe>
 80104b2:	ee18 3a10 	vmov	r3, s16
 80104b6:	4652      	mov	r2, sl
 80104b8:	4631      	mov	r1, r6
 80104ba:	4628      	mov	r0, r5
 80104bc:	47b8      	blx	r7
 80104be:	3001      	adds	r0, #1
 80104c0:	f43f ae6b 	beq.w	801019a <_printf_float+0xbe>
 80104c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80104c8:	2200      	movs	r2, #0
 80104ca:	2300      	movs	r3, #0
 80104cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80104d0:	f7f0 fb0a 	bl	8000ae8 <__aeabi_dcmpeq>
 80104d4:	b9d8      	cbnz	r0, 801050e <_printf_float+0x432>
 80104d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80104da:	f108 0201 	add.w	r2, r8, #1
 80104de:	4631      	mov	r1, r6
 80104e0:	4628      	mov	r0, r5
 80104e2:	47b8      	blx	r7
 80104e4:	3001      	adds	r0, #1
 80104e6:	d10e      	bne.n	8010506 <_printf_float+0x42a>
 80104e8:	e657      	b.n	801019a <_printf_float+0xbe>
 80104ea:	2301      	movs	r3, #1
 80104ec:	4652      	mov	r2, sl
 80104ee:	4631      	mov	r1, r6
 80104f0:	4628      	mov	r0, r5
 80104f2:	47b8      	blx	r7
 80104f4:	3001      	adds	r0, #1
 80104f6:	f43f ae50 	beq.w	801019a <_printf_float+0xbe>
 80104fa:	f108 0801 	add.w	r8, r8, #1
 80104fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010500:	3b01      	subs	r3, #1
 8010502:	4543      	cmp	r3, r8
 8010504:	dcf1      	bgt.n	80104ea <_printf_float+0x40e>
 8010506:	464b      	mov	r3, r9
 8010508:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801050c:	e6da      	b.n	80102c4 <_printf_float+0x1e8>
 801050e:	f04f 0800 	mov.w	r8, #0
 8010512:	f104 0a1a 	add.w	sl, r4, #26
 8010516:	e7f2      	b.n	80104fe <_printf_float+0x422>
 8010518:	2301      	movs	r3, #1
 801051a:	4642      	mov	r2, r8
 801051c:	e7df      	b.n	80104de <_printf_float+0x402>
 801051e:	2301      	movs	r3, #1
 8010520:	464a      	mov	r2, r9
 8010522:	4631      	mov	r1, r6
 8010524:	4628      	mov	r0, r5
 8010526:	47b8      	blx	r7
 8010528:	3001      	adds	r0, #1
 801052a:	f43f ae36 	beq.w	801019a <_printf_float+0xbe>
 801052e:	f108 0801 	add.w	r8, r8, #1
 8010532:	68e3      	ldr	r3, [r4, #12]
 8010534:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010536:	1a5b      	subs	r3, r3, r1
 8010538:	4543      	cmp	r3, r8
 801053a:	dcf0      	bgt.n	801051e <_printf_float+0x442>
 801053c:	e6f8      	b.n	8010330 <_printf_float+0x254>
 801053e:	f04f 0800 	mov.w	r8, #0
 8010542:	f104 0919 	add.w	r9, r4, #25
 8010546:	e7f4      	b.n	8010532 <_printf_float+0x456>

08010548 <_printf_common>:
 8010548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801054c:	4616      	mov	r6, r2
 801054e:	4699      	mov	r9, r3
 8010550:	688a      	ldr	r2, [r1, #8]
 8010552:	690b      	ldr	r3, [r1, #16]
 8010554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010558:	4293      	cmp	r3, r2
 801055a:	bfb8      	it	lt
 801055c:	4613      	movlt	r3, r2
 801055e:	6033      	str	r3, [r6, #0]
 8010560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010564:	4607      	mov	r7, r0
 8010566:	460c      	mov	r4, r1
 8010568:	b10a      	cbz	r2, 801056e <_printf_common+0x26>
 801056a:	3301      	adds	r3, #1
 801056c:	6033      	str	r3, [r6, #0]
 801056e:	6823      	ldr	r3, [r4, #0]
 8010570:	0699      	lsls	r1, r3, #26
 8010572:	bf42      	ittt	mi
 8010574:	6833      	ldrmi	r3, [r6, #0]
 8010576:	3302      	addmi	r3, #2
 8010578:	6033      	strmi	r3, [r6, #0]
 801057a:	6825      	ldr	r5, [r4, #0]
 801057c:	f015 0506 	ands.w	r5, r5, #6
 8010580:	d106      	bne.n	8010590 <_printf_common+0x48>
 8010582:	f104 0a19 	add.w	sl, r4, #25
 8010586:	68e3      	ldr	r3, [r4, #12]
 8010588:	6832      	ldr	r2, [r6, #0]
 801058a:	1a9b      	subs	r3, r3, r2
 801058c:	42ab      	cmp	r3, r5
 801058e:	dc26      	bgt.n	80105de <_printf_common+0x96>
 8010590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010594:	1e13      	subs	r3, r2, #0
 8010596:	6822      	ldr	r2, [r4, #0]
 8010598:	bf18      	it	ne
 801059a:	2301      	movne	r3, #1
 801059c:	0692      	lsls	r2, r2, #26
 801059e:	d42b      	bmi.n	80105f8 <_printf_common+0xb0>
 80105a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80105a4:	4649      	mov	r1, r9
 80105a6:	4638      	mov	r0, r7
 80105a8:	47c0      	blx	r8
 80105aa:	3001      	adds	r0, #1
 80105ac:	d01e      	beq.n	80105ec <_printf_common+0xa4>
 80105ae:	6823      	ldr	r3, [r4, #0]
 80105b0:	6922      	ldr	r2, [r4, #16]
 80105b2:	f003 0306 	and.w	r3, r3, #6
 80105b6:	2b04      	cmp	r3, #4
 80105b8:	bf02      	ittt	eq
 80105ba:	68e5      	ldreq	r5, [r4, #12]
 80105bc:	6833      	ldreq	r3, [r6, #0]
 80105be:	1aed      	subeq	r5, r5, r3
 80105c0:	68a3      	ldr	r3, [r4, #8]
 80105c2:	bf0c      	ite	eq
 80105c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105c8:	2500      	movne	r5, #0
 80105ca:	4293      	cmp	r3, r2
 80105cc:	bfc4      	itt	gt
 80105ce:	1a9b      	subgt	r3, r3, r2
 80105d0:	18ed      	addgt	r5, r5, r3
 80105d2:	2600      	movs	r6, #0
 80105d4:	341a      	adds	r4, #26
 80105d6:	42b5      	cmp	r5, r6
 80105d8:	d11a      	bne.n	8010610 <_printf_common+0xc8>
 80105da:	2000      	movs	r0, #0
 80105dc:	e008      	b.n	80105f0 <_printf_common+0xa8>
 80105de:	2301      	movs	r3, #1
 80105e0:	4652      	mov	r2, sl
 80105e2:	4649      	mov	r1, r9
 80105e4:	4638      	mov	r0, r7
 80105e6:	47c0      	blx	r8
 80105e8:	3001      	adds	r0, #1
 80105ea:	d103      	bne.n	80105f4 <_printf_common+0xac>
 80105ec:	f04f 30ff 	mov.w	r0, #4294967295
 80105f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105f4:	3501      	adds	r5, #1
 80105f6:	e7c6      	b.n	8010586 <_printf_common+0x3e>
 80105f8:	18e1      	adds	r1, r4, r3
 80105fa:	1c5a      	adds	r2, r3, #1
 80105fc:	2030      	movs	r0, #48	; 0x30
 80105fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010602:	4422      	add	r2, r4
 8010604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801060c:	3302      	adds	r3, #2
 801060e:	e7c7      	b.n	80105a0 <_printf_common+0x58>
 8010610:	2301      	movs	r3, #1
 8010612:	4622      	mov	r2, r4
 8010614:	4649      	mov	r1, r9
 8010616:	4638      	mov	r0, r7
 8010618:	47c0      	blx	r8
 801061a:	3001      	adds	r0, #1
 801061c:	d0e6      	beq.n	80105ec <_printf_common+0xa4>
 801061e:	3601      	adds	r6, #1
 8010620:	e7d9      	b.n	80105d6 <_printf_common+0x8e>
	...

08010624 <_printf_i>:
 8010624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010628:	7e0f      	ldrb	r7, [r1, #24]
 801062a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801062c:	2f78      	cmp	r7, #120	; 0x78
 801062e:	4691      	mov	r9, r2
 8010630:	4680      	mov	r8, r0
 8010632:	460c      	mov	r4, r1
 8010634:	469a      	mov	sl, r3
 8010636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801063a:	d807      	bhi.n	801064c <_printf_i+0x28>
 801063c:	2f62      	cmp	r7, #98	; 0x62
 801063e:	d80a      	bhi.n	8010656 <_printf_i+0x32>
 8010640:	2f00      	cmp	r7, #0
 8010642:	f000 80d4 	beq.w	80107ee <_printf_i+0x1ca>
 8010646:	2f58      	cmp	r7, #88	; 0x58
 8010648:	f000 80c0 	beq.w	80107cc <_printf_i+0x1a8>
 801064c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010654:	e03a      	b.n	80106cc <_printf_i+0xa8>
 8010656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801065a:	2b15      	cmp	r3, #21
 801065c:	d8f6      	bhi.n	801064c <_printf_i+0x28>
 801065e:	a101      	add	r1, pc, #4	; (adr r1, 8010664 <_printf_i+0x40>)
 8010660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010664:	080106bd 	.word	0x080106bd
 8010668:	080106d1 	.word	0x080106d1
 801066c:	0801064d 	.word	0x0801064d
 8010670:	0801064d 	.word	0x0801064d
 8010674:	0801064d 	.word	0x0801064d
 8010678:	0801064d 	.word	0x0801064d
 801067c:	080106d1 	.word	0x080106d1
 8010680:	0801064d 	.word	0x0801064d
 8010684:	0801064d 	.word	0x0801064d
 8010688:	0801064d 	.word	0x0801064d
 801068c:	0801064d 	.word	0x0801064d
 8010690:	080107d5 	.word	0x080107d5
 8010694:	080106fd 	.word	0x080106fd
 8010698:	0801078f 	.word	0x0801078f
 801069c:	0801064d 	.word	0x0801064d
 80106a0:	0801064d 	.word	0x0801064d
 80106a4:	080107f7 	.word	0x080107f7
 80106a8:	0801064d 	.word	0x0801064d
 80106ac:	080106fd 	.word	0x080106fd
 80106b0:	0801064d 	.word	0x0801064d
 80106b4:	0801064d 	.word	0x0801064d
 80106b8:	08010797 	.word	0x08010797
 80106bc:	682b      	ldr	r3, [r5, #0]
 80106be:	1d1a      	adds	r2, r3, #4
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	602a      	str	r2, [r5, #0]
 80106c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80106cc:	2301      	movs	r3, #1
 80106ce:	e09f      	b.n	8010810 <_printf_i+0x1ec>
 80106d0:	6820      	ldr	r0, [r4, #0]
 80106d2:	682b      	ldr	r3, [r5, #0]
 80106d4:	0607      	lsls	r7, r0, #24
 80106d6:	f103 0104 	add.w	r1, r3, #4
 80106da:	6029      	str	r1, [r5, #0]
 80106dc:	d501      	bpl.n	80106e2 <_printf_i+0xbe>
 80106de:	681e      	ldr	r6, [r3, #0]
 80106e0:	e003      	b.n	80106ea <_printf_i+0xc6>
 80106e2:	0646      	lsls	r6, r0, #25
 80106e4:	d5fb      	bpl.n	80106de <_printf_i+0xba>
 80106e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80106ea:	2e00      	cmp	r6, #0
 80106ec:	da03      	bge.n	80106f6 <_printf_i+0xd2>
 80106ee:	232d      	movs	r3, #45	; 0x2d
 80106f0:	4276      	negs	r6, r6
 80106f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106f6:	485a      	ldr	r0, [pc, #360]	; (8010860 <_printf_i+0x23c>)
 80106f8:	230a      	movs	r3, #10
 80106fa:	e012      	b.n	8010722 <_printf_i+0xfe>
 80106fc:	682b      	ldr	r3, [r5, #0]
 80106fe:	6820      	ldr	r0, [r4, #0]
 8010700:	1d19      	adds	r1, r3, #4
 8010702:	6029      	str	r1, [r5, #0]
 8010704:	0605      	lsls	r5, r0, #24
 8010706:	d501      	bpl.n	801070c <_printf_i+0xe8>
 8010708:	681e      	ldr	r6, [r3, #0]
 801070a:	e002      	b.n	8010712 <_printf_i+0xee>
 801070c:	0641      	lsls	r1, r0, #25
 801070e:	d5fb      	bpl.n	8010708 <_printf_i+0xe4>
 8010710:	881e      	ldrh	r6, [r3, #0]
 8010712:	4853      	ldr	r0, [pc, #332]	; (8010860 <_printf_i+0x23c>)
 8010714:	2f6f      	cmp	r7, #111	; 0x6f
 8010716:	bf0c      	ite	eq
 8010718:	2308      	moveq	r3, #8
 801071a:	230a      	movne	r3, #10
 801071c:	2100      	movs	r1, #0
 801071e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010722:	6865      	ldr	r5, [r4, #4]
 8010724:	60a5      	str	r5, [r4, #8]
 8010726:	2d00      	cmp	r5, #0
 8010728:	bfa2      	ittt	ge
 801072a:	6821      	ldrge	r1, [r4, #0]
 801072c:	f021 0104 	bicge.w	r1, r1, #4
 8010730:	6021      	strge	r1, [r4, #0]
 8010732:	b90e      	cbnz	r6, 8010738 <_printf_i+0x114>
 8010734:	2d00      	cmp	r5, #0
 8010736:	d04b      	beq.n	80107d0 <_printf_i+0x1ac>
 8010738:	4615      	mov	r5, r2
 801073a:	fbb6 f1f3 	udiv	r1, r6, r3
 801073e:	fb03 6711 	mls	r7, r3, r1, r6
 8010742:	5dc7      	ldrb	r7, [r0, r7]
 8010744:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010748:	4637      	mov	r7, r6
 801074a:	42bb      	cmp	r3, r7
 801074c:	460e      	mov	r6, r1
 801074e:	d9f4      	bls.n	801073a <_printf_i+0x116>
 8010750:	2b08      	cmp	r3, #8
 8010752:	d10b      	bne.n	801076c <_printf_i+0x148>
 8010754:	6823      	ldr	r3, [r4, #0]
 8010756:	07de      	lsls	r6, r3, #31
 8010758:	d508      	bpl.n	801076c <_printf_i+0x148>
 801075a:	6923      	ldr	r3, [r4, #16]
 801075c:	6861      	ldr	r1, [r4, #4]
 801075e:	4299      	cmp	r1, r3
 8010760:	bfde      	ittt	le
 8010762:	2330      	movle	r3, #48	; 0x30
 8010764:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010768:	f105 35ff 	addle.w	r5, r5, #4294967295
 801076c:	1b52      	subs	r2, r2, r5
 801076e:	6122      	str	r2, [r4, #16]
 8010770:	f8cd a000 	str.w	sl, [sp]
 8010774:	464b      	mov	r3, r9
 8010776:	aa03      	add	r2, sp, #12
 8010778:	4621      	mov	r1, r4
 801077a:	4640      	mov	r0, r8
 801077c:	f7ff fee4 	bl	8010548 <_printf_common>
 8010780:	3001      	adds	r0, #1
 8010782:	d14a      	bne.n	801081a <_printf_i+0x1f6>
 8010784:	f04f 30ff 	mov.w	r0, #4294967295
 8010788:	b004      	add	sp, #16
 801078a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801078e:	6823      	ldr	r3, [r4, #0]
 8010790:	f043 0320 	orr.w	r3, r3, #32
 8010794:	6023      	str	r3, [r4, #0]
 8010796:	4833      	ldr	r0, [pc, #204]	; (8010864 <_printf_i+0x240>)
 8010798:	2778      	movs	r7, #120	; 0x78
 801079a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801079e:	6823      	ldr	r3, [r4, #0]
 80107a0:	6829      	ldr	r1, [r5, #0]
 80107a2:	061f      	lsls	r7, r3, #24
 80107a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80107a8:	d402      	bmi.n	80107b0 <_printf_i+0x18c>
 80107aa:	065f      	lsls	r7, r3, #25
 80107ac:	bf48      	it	mi
 80107ae:	b2b6      	uxthmi	r6, r6
 80107b0:	07df      	lsls	r7, r3, #31
 80107b2:	bf48      	it	mi
 80107b4:	f043 0320 	orrmi.w	r3, r3, #32
 80107b8:	6029      	str	r1, [r5, #0]
 80107ba:	bf48      	it	mi
 80107bc:	6023      	strmi	r3, [r4, #0]
 80107be:	b91e      	cbnz	r6, 80107c8 <_printf_i+0x1a4>
 80107c0:	6823      	ldr	r3, [r4, #0]
 80107c2:	f023 0320 	bic.w	r3, r3, #32
 80107c6:	6023      	str	r3, [r4, #0]
 80107c8:	2310      	movs	r3, #16
 80107ca:	e7a7      	b.n	801071c <_printf_i+0xf8>
 80107cc:	4824      	ldr	r0, [pc, #144]	; (8010860 <_printf_i+0x23c>)
 80107ce:	e7e4      	b.n	801079a <_printf_i+0x176>
 80107d0:	4615      	mov	r5, r2
 80107d2:	e7bd      	b.n	8010750 <_printf_i+0x12c>
 80107d4:	682b      	ldr	r3, [r5, #0]
 80107d6:	6826      	ldr	r6, [r4, #0]
 80107d8:	6961      	ldr	r1, [r4, #20]
 80107da:	1d18      	adds	r0, r3, #4
 80107dc:	6028      	str	r0, [r5, #0]
 80107de:	0635      	lsls	r5, r6, #24
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	d501      	bpl.n	80107e8 <_printf_i+0x1c4>
 80107e4:	6019      	str	r1, [r3, #0]
 80107e6:	e002      	b.n	80107ee <_printf_i+0x1ca>
 80107e8:	0670      	lsls	r0, r6, #25
 80107ea:	d5fb      	bpl.n	80107e4 <_printf_i+0x1c0>
 80107ec:	8019      	strh	r1, [r3, #0]
 80107ee:	2300      	movs	r3, #0
 80107f0:	6123      	str	r3, [r4, #16]
 80107f2:	4615      	mov	r5, r2
 80107f4:	e7bc      	b.n	8010770 <_printf_i+0x14c>
 80107f6:	682b      	ldr	r3, [r5, #0]
 80107f8:	1d1a      	adds	r2, r3, #4
 80107fa:	602a      	str	r2, [r5, #0]
 80107fc:	681d      	ldr	r5, [r3, #0]
 80107fe:	6862      	ldr	r2, [r4, #4]
 8010800:	2100      	movs	r1, #0
 8010802:	4628      	mov	r0, r5
 8010804:	f7ef fcf4 	bl	80001f0 <memchr>
 8010808:	b108      	cbz	r0, 801080e <_printf_i+0x1ea>
 801080a:	1b40      	subs	r0, r0, r5
 801080c:	6060      	str	r0, [r4, #4]
 801080e:	6863      	ldr	r3, [r4, #4]
 8010810:	6123      	str	r3, [r4, #16]
 8010812:	2300      	movs	r3, #0
 8010814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010818:	e7aa      	b.n	8010770 <_printf_i+0x14c>
 801081a:	6923      	ldr	r3, [r4, #16]
 801081c:	462a      	mov	r2, r5
 801081e:	4649      	mov	r1, r9
 8010820:	4640      	mov	r0, r8
 8010822:	47d0      	blx	sl
 8010824:	3001      	adds	r0, #1
 8010826:	d0ad      	beq.n	8010784 <_printf_i+0x160>
 8010828:	6823      	ldr	r3, [r4, #0]
 801082a:	079b      	lsls	r3, r3, #30
 801082c:	d413      	bmi.n	8010856 <_printf_i+0x232>
 801082e:	68e0      	ldr	r0, [r4, #12]
 8010830:	9b03      	ldr	r3, [sp, #12]
 8010832:	4298      	cmp	r0, r3
 8010834:	bfb8      	it	lt
 8010836:	4618      	movlt	r0, r3
 8010838:	e7a6      	b.n	8010788 <_printf_i+0x164>
 801083a:	2301      	movs	r3, #1
 801083c:	4632      	mov	r2, r6
 801083e:	4649      	mov	r1, r9
 8010840:	4640      	mov	r0, r8
 8010842:	47d0      	blx	sl
 8010844:	3001      	adds	r0, #1
 8010846:	d09d      	beq.n	8010784 <_printf_i+0x160>
 8010848:	3501      	adds	r5, #1
 801084a:	68e3      	ldr	r3, [r4, #12]
 801084c:	9903      	ldr	r1, [sp, #12]
 801084e:	1a5b      	subs	r3, r3, r1
 8010850:	42ab      	cmp	r3, r5
 8010852:	dcf2      	bgt.n	801083a <_printf_i+0x216>
 8010854:	e7eb      	b.n	801082e <_printf_i+0x20a>
 8010856:	2500      	movs	r5, #0
 8010858:	f104 0619 	add.w	r6, r4, #25
 801085c:	e7f5      	b.n	801084a <_printf_i+0x226>
 801085e:	bf00      	nop
 8010860:	0801622c 	.word	0x0801622c
 8010864:	0801623d 	.word	0x0801623d

08010868 <std>:
 8010868:	2300      	movs	r3, #0
 801086a:	b510      	push	{r4, lr}
 801086c:	4604      	mov	r4, r0
 801086e:	e9c0 3300 	strd	r3, r3, [r0]
 8010872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010876:	6083      	str	r3, [r0, #8]
 8010878:	8181      	strh	r1, [r0, #12]
 801087a:	6643      	str	r3, [r0, #100]	; 0x64
 801087c:	81c2      	strh	r2, [r0, #14]
 801087e:	6183      	str	r3, [r0, #24]
 8010880:	4619      	mov	r1, r3
 8010882:	2208      	movs	r2, #8
 8010884:	305c      	adds	r0, #92	; 0x5c
 8010886:	f000 f950 	bl	8010b2a <memset>
 801088a:	4b0d      	ldr	r3, [pc, #52]	; (80108c0 <std+0x58>)
 801088c:	6263      	str	r3, [r4, #36]	; 0x24
 801088e:	4b0d      	ldr	r3, [pc, #52]	; (80108c4 <std+0x5c>)
 8010890:	62a3      	str	r3, [r4, #40]	; 0x28
 8010892:	4b0d      	ldr	r3, [pc, #52]	; (80108c8 <std+0x60>)
 8010894:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010896:	4b0d      	ldr	r3, [pc, #52]	; (80108cc <std+0x64>)
 8010898:	6323      	str	r3, [r4, #48]	; 0x30
 801089a:	4b0d      	ldr	r3, [pc, #52]	; (80108d0 <std+0x68>)
 801089c:	6224      	str	r4, [r4, #32]
 801089e:	429c      	cmp	r4, r3
 80108a0:	d006      	beq.n	80108b0 <std+0x48>
 80108a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80108a6:	4294      	cmp	r4, r2
 80108a8:	d002      	beq.n	80108b0 <std+0x48>
 80108aa:	33d0      	adds	r3, #208	; 0xd0
 80108ac:	429c      	cmp	r4, r3
 80108ae:	d105      	bne.n	80108bc <std+0x54>
 80108b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80108b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108b8:	f000 b9ae 	b.w	8010c18 <__retarget_lock_init_recursive>
 80108bc:	bd10      	pop	{r4, pc}
 80108be:	bf00      	nop
 80108c0:	08010a51 	.word	0x08010a51
 80108c4:	08010a73 	.word	0x08010a73
 80108c8:	08010aab 	.word	0x08010aab
 80108cc:	08010acf 	.word	0x08010acf
 80108d0:	200009a4 	.word	0x200009a4

080108d4 <stdio_exit_handler>:
 80108d4:	4a02      	ldr	r2, [pc, #8]	; (80108e0 <stdio_exit_handler+0xc>)
 80108d6:	4903      	ldr	r1, [pc, #12]	; (80108e4 <stdio_exit_handler+0x10>)
 80108d8:	4803      	ldr	r0, [pc, #12]	; (80108e8 <stdio_exit_handler+0x14>)
 80108da:	f000 b869 	b.w	80109b0 <_fwalk_sglue>
 80108de:	bf00      	nop
 80108e0:	20000034 	.word	0x20000034
 80108e4:	080128a9 	.word	0x080128a9
 80108e8:	20000040 	.word	0x20000040

080108ec <cleanup_stdio>:
 80108ec:	6841      	ldr	r1, [r0, #4]
 80108ee:	4b0c      	ldr	r3, [pc, #48]	; (8010920 <cleanup_stdio+0x34>)
 80108f0:	4299      	cmp	r1, r3
 80108f2:	b510      	push	{r4, lr}
 80108f4:	4604      	mov	r4, r0
 80108f6:	d001      	beq.n	80108fc <cleanup_stdio+0x10>
 80108f8:	f001 ffd6 	bl	80128a8 <_fflush_r>
 80108fc:	68a1      	ldr	r1, [r4, #8]
 80108fe:	4b09      	ldr	r3, [pc, #36]	; (8010924 <cleanup_stdio+0x38>)
 8010900:	4299      	cmp	r1, r3
 8010902:	d002      	beq.n	801090a <cleanup_stdio+0x1e>
 8010904:	4620      	mov	r0, r4
 8010906:	f001 ffcf 	bl	80128a8 <_fflush_r>
 801090a:	68e1      	ldr	r1, [r4, #12]
 801090c:	4b06      	ldr	r3, [pc, #24]	; (8010928 <cleanup_stdio+0x3c>)
 801090e:	4299      	cmp	r1, r3
 8010910:	d004      	beq.n	801091c <cleanup_stdio+0x30>
 8010912:	4620      	mov	r0, r4
 8010914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010918:	f001 bfc6 	b.w	80128a8 <_fflush_r>
 801091c:	bd10      	pop	{r4, pc}
 801091e:	bf00      	nop
 8010920:	200009a4 	.word	0x200009a4
 8010924:	20000a0c 	.word	0x20000a0c
 8010928:	20000a74 	.word	0x20000a74

0801092c <global_stdio_init.part.0>:
 801092c:	b510      	push	{r4, lr}
 801092e:	4b0b      	ldr	r3, [pc, #44]	; (801095c <global_stdio_init.part.0+0x30>)
 8010930:	4c0b      	ldr	r4, [pc, #44]	; (8010960 <global_stdio_init.part.0+0x34>)
 8010932:	4a0c      	ldr	r2, [pc, #48]	; (8010964 <global_stdio_init.part.0+0x38>)
 8010934:	601a      	str	r2, [r3, #0]
 8010936:	4620      	mov	r0, r4
 8010938:	2200      	movs	r2, #0
 801093a:	2104      	movs	r1, #4
 801093c:	f7ff ff94 	bl	8010868 <std>
 8010940:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010944:	2201      	movs	r2, #1
 8010946:	2109      	movs	r1, #9
 8010948:	f7ff ff8e 	bl	8010868 <std>
 801094c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010950:	2202      	movs	r2, #2
 8010952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010956:	2112      	movs	r1, #18
 8010958:	f7ff bf86 	b.w	8010868 <std>
 801095c:	20000adc 	.word	0x20000adc
 8010960:	200009a4 	.word	0x200009a4
 8010964:	080108d5 	.word	0x080108d5

08010968 <__sfp_lock_acquire>:
 8010968:	4801      	ldr	r0, [pc, #4]	; (8010970 <__sfp_lock_acquire+0x8>)
 801096a:	f000 b956 	b.w	8010c1a <__retarget_lock_acquire_recursive>
 801096e:	bf00      	nop
 8010970:	20000ae5 	.word	0x20000ae5

08010974 <__sfp_lock_release>:
 8010974:	4801      	ldr	r0, [pc, #4]	; (801097c <__sfp_lock_release+0x8>)
 8010976:	f000 b951 	b.w	8010c1c <__retarget_lock_release_recursive>
 801097a:	bf00      	nop
 801097c:	20000ae5 	.word	0x20000ae5

08010980 <__sinit>:
 8010980:	b510      	push	{r4, lr}
 8010982:	4604      	mov	r4, r0
 8010984:	f7ff fff0 	bl	8010968 <__sfp_lock_acquire>
 8010988:	6a23      	ldr	r3, [r4, #32]
 801098a:	b11b      	cbz	r3, 8010994 <__sinit+0x14>
 801098c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010990:	f7ff bff0 	b.w	8010974 <__sfp_lock_release>
 8010994:	4b04      	ldr	r3, [pc, #16]	; (80109a8 <__sinit+0x28>)
 8010996:	6223      	str	r3, [r4, #32]
 8010998:	4b04      	ldr	r3, [pc, #16]	; (80109ac <__sinit+0x2c>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d1f5      	bne.n	801098c <__sinit+0xc>
 80109a0:	f7ff ffc4 	bl	801092c <global_stdio_init.part.0>
 80109a4:	e7f2      	b.n	801098c <__sinit+0xc>
 80109a6:	bf00      	nop
 80109a8:	080108ed 	.word	0x080108ed
 80109ac:	20000adc 	.word	0x20000adc

080109b0 <_fwalk_sglue>:
 80109b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109b4:	4607      	mov	r7, r0
 80109b6:	4688      	mov	r8, r1
 80109b8:	4614      	mov	r4, r2
 80109ba:	2600      	movs	r6, #0
 80109bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80109c0:	f1b9 0901 	subs.w	r9, r9, #1
 80109c4:	d505      	bpl.n	80109d2 <_fwalk_sglue+0x22>
 80109c6:	6824      	ldr	r4, [r4, #0]
 80109c8:	2c00      	cmp	r4, #0
 80109ca:	d1f7      	bne.n	80109bc <_fwalk_sglue+0xc>
 80109cc:	4630      	mov	r0, r6
 80109ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109d2:	89ab      	ldrh	r3, [r5, #12]
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	d907      	bls.n	80109e8 <_fwalk_sglue+0x38>
 80109d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80109dc:	3301      	adds	r3, #1
 80109de:	d003      	beq.n	80109e8 <_fwalk_sglue+0x38>
 80109e0:	4629      	mov	r1, r5
 80109e2:	4638      	mov	r0, r7
 80109e4:	47c0      	blx	r8
 80109e6:	4306      	orrs	r6, r0
 80109e8:	3568      	adds	r5, #104	; 0x68
 80109ea:	e7e9      	b.n	80109c0 <_fwalk_sglue+0x10>

080109ec <iprintf>:
 80109ec:	b40f      	push	{r0, r1, r2, r3}
 80109ee:	b507      	push	{r0, r1, r2, lr}
 80109f0:	4906      	ldr	r1, [pc, #24]	; (8010a0c <iprintf+0x20>)
 80109f2:	ab04      	add	r3, sp, #16
 80109f4:	6808      	ldr	r0, [r1, #0]
 80109f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80109fa:	6881      	ldr	r1, [r0, #8]
 80109fc:	9301      	str	r3, [sp, #4]
 80109fe:	f001 fdb3 	bl	8012568 <_vfiprintf_r>
 8010a02:	b003      	add	sp, #12
 8010a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a08:	b004      	add	sp, #16
 8010a0a:	4770      	bx	lr
 8010a0c:	2000008c 	.word	0x2000008c

08010a10 <siprintf>:
 8010a10:	b40e      	push	{r1, r2, r3}
 8010a12:	b500      	push	{lr}
 8010a14:	b09c      	sub	sp, #112	; 0x70
 8010a16:	ab1d      	add	r3, sp, #116	; 0x74
 8010a18:	9002      	str	r0, [sp, #8]
 8010a1a:	9006      	str	r0, [sp, #24]
 8010a1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010a20:	4809      	ldr	r0, [pc, #36]	; (8010a48 <siprintf+0x38>)
 8010a22:	9107      	str	r1, [sp, #28]
 8010a24:	9104      	str	r1, [sp, #16]
 8010a26:	4909      	ldr	r1, [pc, #36]	; (8010a4c <siprintf+0x3c>)
 8010a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a2c:	9105      	str	r1, [sp, #20]
 8010a2e:	6800      	ldr	r0, [r0, #0]
 8010a30:	9301      	str	r3, [sp, #4]
 8010a32:	a902      	add	r1, sp, #8
 8010a34:	f001 fc70 	bl	8012318 <_svfiprintf_r>
 8010a38:	9b02      	ldr	r3, [sp, #8]
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	701a      	strb	r2, [r3, #0]
 8010a3e:	b01c      	add	sp, #112	; 0x70
 8010a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a44:	b003      	add	sp, #12
 8010a46:	4770      	bx	lr
 8010a48:	2000008c 	.word	0x2000008c
 8010a4c:	ffff0208 	.word	0xffff0208

08010a50 <__sread>:
 8010a50:	b510      	push	{r4, lr}
 8010a52:	460c      	mov	r4, r1
 8010a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a58:	f000 f896 	bl	8010b88 <_read_r>
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	bfab      	itete	ge
 8010a60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010a62:	89a3      	ldrhlt	r3, [r4, #12]
 8010a64:	181b      	addge	r3, r3, r0
 8010a66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010a6a:	bfac      	ite	ge
 8010a6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8010a6e:	81a3      	strhlt	r3, [r4, #12]
 8010a70:	bd10      	pop	{r4, pc}

08010a72 <__swrite>:
 8010a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a76:	461f      	mov	r7, r3
 8010a78:	898b      	ldrh	r3, [r1, #12]
 8010a7a:	05db      	lsls	r3, r3, #23
 8010a7c:	4605      	mov	r5, r0
 8010a7e:	460c      	mov	r4, r1
 8010a80:	4616      	mov	r6, r2
 8010a82:	d505      	bpl.n	8010a90 <__swrite+0x1e>
 8010a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a88:	2302      	movs	r3, #2
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	f000 f86a 	bl	8010b64 <_lseek_r>
 8010a90:	89a3      	ldrh	r3, [r4, #12]
 8010a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a9a:	81a3      	strh	r3, [r4, #12]
 8010a9c:	4632      	mov	r2, r6
 8010a9e:	463b      	mov	r3, r7
 8010aa0:	4628      	mov	r0, r5
 8010aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa6:	f000 b881 	b.w	8010bac <_write_r>

08010aaa <__sseek>:
 8010aaa:	b510      	push	{r4, lr}
 8010aac:	460c      	mov	r4, r1
 8010aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ab2:	f000 f857 	bl	8010b64 <_lseek_r>
 8010ab6:	1c43      	adds	r3, r0, #1
 8010ab8:	89a3      	ldrh	r3, [r4, #12]
 8010aba:	bf15      	itete	ne
 8010abc:	6560      	strne	r0, [r4, #84]	; 0x54
 8010abe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010ac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ac6:	81a3      	strheq	r3, [r4, #12]
 8010ac8:	bf18      	it	ne
 8010aca:	81a3      	strhne	r3, [r4, #12]
 8010acc:	bd10      	pop	{r4, pc}

08010ace <__sclose>:
 8010ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ad2:	f000 b837 	b.w	8010b44 <_close_r>

08010ad6 <memcmp>:
 8010ad6:	b510      	push	{r4, lr}
 8010ad8:	3901      	subs	r1, #1
 8010ada:	4402      	add	r2, r0
 8010adc:	4290      	cmp	r0, r2
 8010ade:	d101      	bne.n	8010ae4 <memcmp+0xe>
 8010ae0:	2000      	movs	r0, #0
 8010ae2:	e005      	b.n	8010af0 <memcmp+0x1a>
 8010ae4:	7803      	ldrb	r3, [r0, #0]
 8010ae6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010aea:	42a3      	cmp	r3, r4
 8010aec:	d001      	beq.n	8010af2 <memcmp+0x1c>
 8010aee:	1b18      	subs	r0, r3, r4
 8010af0:	bd10      	pop	{r4, pc}
 8010af2:	3001      	adds	r0, #1
 8010af4:	e7f2      	b.n	8010adc <memcmp+0x6>

08010af6 <memmove>:
 8010af6:	4288      	cmp	r0, r1
 8010af8:	b510      	push	{r4, lr}
 8010afa:	eb01 0402 	add.w	r4, r1, r2
 8010afe:	d902      	bls.n	8010b06 <memmove+0x10>
 8010b00:	4284      	cmp	r4, r0
 8010b02:	4623      	mov	r3, r4
 8010b04:	d807      	bhi.n	8010b16 <memmove+0x20>
 8010b06:	1e43      	subs	r3, r0, #1
 8010b08:	42a1      	cmp	r1, r4
 8010b0a:	d008      	beq.n	8010b1e <memmove+0x28>
 8010b0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b10:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b14:	e7f8      	b.n	8010b08 <memmove+0x12>
 8010b16:	4402      	add	r2, r0
 8010b18:	4601      	mov	r1, r0
 8010b1a:	428a      	cmp	r2, r1
 8010b1c:	d100      	bne.n	8010b20 <memmove+0x2a>
 8010b1e:	bd10      	pop	{r4, pc}
 8010b20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b24:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010b28:	e7f7      	b.n	8010b1a <memmove+0x24>

08010b2a <memset>:
 8010b2a:	4402      	add	r2, r0
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	d100      	bne.n	8010b34 <memset+0xa>
 8010b32:	4770      	bx	lr
 8010b34:	f803 1b01 	strb.w	r1, [r3], #1
 8010b38:	e7f9      	b.n	8010b2e <memset+0x4>
	...

08010b3c <_localeconv_r>:
 8010b3c:	4800      	ldr	r0, [pc, #0]	; (8010b40 <_localeconv_r+0x4>)
 8010b3e:	4770      	bx	lr
 8010b40:	20000180 	.word	0x20000180

08010b44 <_close_r>:
 8010b44:	b538      	push	{r3, r4, r5, lr}
 8010b46:	4d06      	ldr	r5, [pc, #24]	; (8010b60 <_close_r+0x1c>)
 8010b48:	2300      	movs	r3, #0
 8010b4a:	4604      	mov	r4, r0
 8010b4c:	4608      	mov	r0, r1
 8010b4e:	602b      	str	r3, [r5, #0]
 8010b50:	f7f1 fb19 	bl	8002186 <_close>
 8010b54:	1c43      	adds	r3, r0, #1
 8010b56:	d102      	bne.n	8010b5e <_close_r+0x1a>
 8010b58:	682b      	ldr	r3, [r5, #0]
 8010b5a:	b103      	cbz	r3, 8010b5e <_close_r+0x1a>
 8010b5c:	6023      	str	r3, [r4, #0]
 8010b5e:	bd38      	pop	{r3, r4, r5, pc}
 8010b60:	20000ae0 	.word	0x20000ae0

08010b64 <_lseek_r>:
 8010b64:	b538      	push	{r3, r4, r5, lr}
 8010b66:	4d07      	ldr	r5, [pc, #28]	; (8010b84 <_lseek_r+0x20>)
 8010b68:	4604      	mov	r4, r0
 8010b6a:	4608      	mov	r0, r1
 8010b6c:	4611      	mov	r1, r2
 8010b6e:	2200      	movs	r2, #0
 8010b70:	602a      	str	r2, [r5, #0]
 8010b72:	461a      	mov	r2, r3
 8010b74:	f7f1 fb2e 	bl	80021d4 <_lseek>
 8010b78:	1c43      	adds	r3, r0, #1
 8010b7a:	d102      	bne.n	8010b82 <_lseek_r+0x1e>
 8010b7c:	682b      	ldr	r3, [r5, #0]
 8010b7e:	b103      	cbz	r3, 8010b82 <_lseek_r+0x1e>
 8010b80:	6023      	str	r3, [r4, #0]
 8010b82:	bd38      	pop	{r3, r4, r5, pc}
 8010b84:	20000ae0 	.word	0x20000ae0

08010b88 <_read_r>:
 8010b88:	b538      	push	{r3, r4, r5, lr}
 8010b8a:	4d07      	ldr	r5, [pc, #28]	; (8010ba8 <_read_r+0x20>)
 8010b8c:	4604      	mov	r4, r0
 8010b8e:	4608      	mov	r0, r1
 8010b90:	4611      	mov	r1, r2
 8010b92:	2200      	movs	r2, #0
 8010b94:	602a      	str	r2, [r5, #0]
 8010b96:	461a      	mov	r2, r3
 8010b98:	f7f1 fabc 	bl	8002114 <_read>
 8010b9c:	1c43      	adds	r3, r0, #1
 8010b9e:	d102      	bne.n	8010ba6 <_read_r+0x1e>
 8010ba0:	682b      	ldr	r3, [r5, #0]
 8010ba2:	b103      	cbz	r3, 8010ba6 <_read_r+0x1e>
 8010ba4:	6023      	str	r3, [r4, #0]
 8010ba6:	bd38      	pop	{r3, r4, r5, pc}
 8010ba8:	20000ae0 	.word	0x20000ae0

08010bac <_write_r>:
 8010bac:	b538      	push	{r3, r4, r5, lr}
 8010bae:	4d07      	ldr	r5, [pc, #28]	; (8010bcc <_write_r+0x20>)
 8010bb0:	4604      	mov	r4, r0
 8010bb2:	4608      	mov	r0, r1
 8010bb4:	4611      	mov	r1, r2
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	602a      	str	r2, [r5, #0]
 8010bba:	461a      	mov	r2, r3
 8010bbc:	f7f1 fac7 	bl	800214e <_write>
 8010bc0:	1c43      	adds	r3, r0, #1
 8010bc2:	d102      	bne.n	8010bca <_write_r+0x1e>
 8010bc4:	682b      	ldr	r3, [r5, #0]
 8010bc6:	b103      	cbz	r3, 8010bca <_write_r+0x1e>
 8010bc8:	6023      	str	r3, [r4, #0]
 8010bca:	bd38      	pop	{r3, r4, r5, pc}
 8010bcc:	20000ae0 	.word	0x20000ae0

08010bd0 <__libc_init_array>:
 8010bd0:	b570      	push	{r4, r5, r6, lr}
 8010bd2:	4d0d      	ldr	r5, [pc, #52]	; (8010c08 <__libc_init_array+0x38>)
 8010bd4:	4c0d      	ldr	r4, [pc, #52]	; (8010c0c <__libc_init_array+0x3c>)
 8010bd6:	1b64      	subs	r4, r4, r5
 8010bd8:	10a4      	asrs	r4, r4, #2
 8010bda:	2600      	movs	r6, #0
 8010bdc:	42a6      	cmp	r6, r4
 8010bde:	d109      	bne.n	8010bf4 <__libc_init_array+0x24>
 8010be0:	4d0b      	ldr	r5, [pc, #44]	; (8010c10 <__libc_init_array+0x40>)
 8010be2:	4c0c      	ldr	r4, [pc, #48]	; (8010c14 <__libc_init_array+0x44>)
 8010be4:	f002 f87c 	bl	8012ce0 <_init>
 8010be8:	1b64      	subs	r4, r4, r5
 8010bea:	10a4      	asrs	r4, r4, #2
 8010bec:	2600      	movs	r6, #0
 8010bee:	42a6      	cmp	r6, r4
 8010bf0:	d105      	bne.n	8010bfe <__libc_init_array+0x2e>
 8010bf2:	bd70      	pop	{r4, r5, r6, pc}
 8010bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bf8:	4798      	blx	r3
 8010bfa:	3601      	adds	r6, #1
 8010bfc:	e7ee      	b.n	8010bdc <__libc_init_array+0xc>
 8010bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c02:	4798      	blx	r3
 8010c04:	3601      	adds	r6, #1
 8010c06:	e7f2      	b.n	8010bee <__libc_init_array+0x1e>
 8010c08:	08016480 	.word	0x08016480
 8010c0c:	08016480 	.word	0x08016480
 8010c10:	08016480 	.word	0x08016480
 8010c14:	08016484 	.word	0x08016484

08010c18 <__retarget_lock_init_recursive>:
 8010c18:	4770      	bx	lr

08010c1a <__retarget_lock_acquire_recursive>:
 8010c1a:	4770      	bx	lr

08010c1c <__retarget_lock_release_recursive>:
 8010c1c:	4770      	bx	lr

08010c1e <memcpy>:
 8010c1e:	440a      	add	r2, r1
 8010c20:	4291      	cmp	r1, r2
 8010c22:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c26:	d100      	bne.n	8010c2a <memcpy+0xc>
 8010c28:	4770      	bx	lr
 8010c2a:	b510      	push	{r4, lr}
 8010c2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c34:	4291      	cmp	r1, r2
 8010c36:	d1f9      	bne.n	8010c2c <memcpy+0xe>
 8010c38:	bd10      	pop	{r4, pc}
	...

08010c3c <__assert_func>:
 8010c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c3e:	4614      	mov	r4, r2
 8010c40:	461a      	mov	r2, r3
 8010c42:	4b09      	ldr	r3, [pc, #36]	; (8010c68 <__assert_func+0x2c>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	4605      	mov	r5, r0
 8010c48:	68d8      	ldr	r0, [r3, #12]
 8010c4a:	b14c      	cbz	r4, 8010c60 <__assert_func+0x24>
 8010c4c:	4b07      	ldr	r3, [pc, #28]	; (8010c6c <__assert_func+0x30>)
 8010c4e:	9100      	str	r1, [sp, #0]
 8010c50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010c54:	4906      	ldr	r1, [pc, #24]	; (8010c70 <__assert_func+0x34>)
 8010c56:	462b      	mov	r3, r5
 8010c58:	f001 fe4e 	bl	80128f8 <fiprintf>
 8010c5c:	f001 ff04 	bl	8012a68 <abort>
 8010c60:	4b04      	ldr	r3, [pc, #16]	; (8010c74 <__assert_func+0x38>)
 8010c62:	461c      	mov	r4, r3
 8010c64:	e7f3      	b.n	8010c4e <__assert_func+0x12>
 8010c66:	bf00      	nop
 8010c68:	2000008c 	.word	0x2000008c
 8010c6c:	0801624e 	.word	0x0801624e
 8010c70:	0801625b 	.word	0x0801625b
 8010c74:	08016289 	.word	0x08016289

08010c78 <quorem>:
 8010c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c7c:	6903      	ldr	r3, [r0, #16]
 8010c7e:	690c      	ldr	r4, [r1, #16]
 8010c80:	42a3      	cmp	r3, r4
 8010c82:	4607      	mov	r7, r0
 8010c84:	db7e      	blt.n	8010d84 <quorem+0x10c>
 8010c86:	3c01      	subs	r4, #1
 8010c88:	f101 0814 	add.w	r8, r1, #20
 8010c8c:	f100 0514 	add.w	r5, r0, #20
 8010c90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c94:	9301      	str	r3, [sp, #4]
 8010c96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010c9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c9e:	3301      	adds	r3, #1
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010ca6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010caa:	fbb2 f6f3 	udiv	r6, r2, r3
 8010cae:	d331      	bcc.n	8010d14 <quorem+0x9c>
 8010cb0:	f04f 0e00 	mov.w	lr, #0
 8010cb4:	4640      	mov	r0, r8
 8010cb6:	46ac      	mov	ip, r5
 8010cb8:	46f2      	mov	sl, lr
 8010cba:	f850 2b04 	ldr.w	r2, [r0], #4
 8010cbe:	b293      	uxth	r3, r2
 8010cc0:	fb06 e303 	mla	r3, r6, r3, lr
 8010cc4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010cc8:	0c1a      	lsrs	r2, r3, #16
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	ebaa 0303 	sub.w	r3, sl, r3
 8010cd0:	f8dc a000 	ldr.w	sl, [ip]
 8010cd4:	fa13 f38a 	uxtah	r3, r3, sl
 8010cd8:	fb06 220e 	mla	r2, r6, lr, r2
 8010cdc:	9300      	str	r3, [sp, #0]
 8010cde:	9b00      	ldr	r3, [sp, #0]
 8010ce0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010ce4:	b292      	uxth	r2, r2
 8010ce6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010cea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010cee:	f8bd 3000 	ldrh.w	r3, [sp]
 8010cf2:	4581      	cmp	r9, r0
 8010cf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010cf8:	f84c 3b04 	str.w	r3, [ip], #4
 8010cfc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010d00:	d2db      	bcs.n	8010cba <quorem+0x42>
 8010d02:	f855 300b 	ldr.w	r3, [r5, fp]
 8010d06:	b92b      	cbnz	r3, 8010d14 <quorem+0x9c>
 8010d08:	9b01      	ldr	r3, [sp, #4]
 8010d0a:	3b04      	subs	r3, #4
 8010d0c:	429d      	cmp	r5, r3
 8010d0e:	461a      	mov	r2, r3
 8010d10:	d32c      	bcc.n	8010d6c <quorem+0xf4>
 8010d12:	613c      	str	r4, [r7, #16]
 8010d14:	4638      	mov	r0, r7
 8010d16:	f001 f9a5 	bl	8012064 <__mcmp>
 8010d1a:	2800      	cmp	r0, #0
 8010d1c:	db22      	blt.n	8010d64 <quorem+0xec>
 8010d1e:	3601      	adds	r6, #1
 8010d20:	4629      	mov	r1, r5
 8010d22:	2000      	movs	r0, #0
 8010d24:	f858 2b04 	ldr.w	r2, [r8], #4
 8010d28:	f8d1 c000 	ldr.w	ip, [r1]
 8010d2c:	b293      	uxth	r3, r2
 8010d2e:	1ac3      	subs	r3, r0, r3
 8010d30:	0c12      	lsrs	r2, r2, #16
 8010d32:	fa13 f38c 	uxtah	r3, r3, ip
 8010d36:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010d3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010d3e:	b29b      	uxth	r3, r3
 8010d40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d44:	45c1      	cmp	r9, r8
 8010d46:	f841 3b04 	str.w	r3, [r1], #4
 8010d4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010d4e:	d2e9      	bcs.n	8010d24 <quorem+0xac>
 8010d50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d58:	b922      	cbnz	r2, 8010d64 <quorem+0xec>
 8010d5a:	3b04      	subs	r3, #4
 8010d5c:	429d      	cmp	r5, r3
 8010d5e:	461a      	mov	r2, r3
 8010d60:	d30a      	bcc.n	8010d78 <quorem+0x100>
 8010d62:	613c      	str	r4, [r7, #16]
 8010d64:	4630      	mov	r0, r6
 8010d66:	b003      	add	sp, #12
 8010d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d6c:	6812      	ldr	r2, [r2, #0]
 8010d6e:	3b04      	subs	r3, #4
 8010d70:	2a00      	cmp	r2, #0
 8010d72:	d1ce      	bne.n	8010d12 <quorem+0x9a>
 8010d74:	3c01      	subs	r4, #1
 8010d76:	e7c9      	b.n	8010d0c <quorem+0x94>
 8010d78:	6812      	ldr	r2, [r2, #0]
 8010d7a:	3b04      	subs	r3, #4
 8010d7c:	2a00      	cmp	r2, #0
 8010d7e:	d1f0      	bne.n	8010d62 <quorem+0xea>
 8010d80:	3c01      	subs	r4, #1
 8010d82:	e7eb      	b.n	8010d5c <quorem+0xe4>
 8010d84:	2000      	movs	r0, #0
 8010d86:	e7ee      	b.n	8010d66 <quorem+0xee>

08010d88 <_dtoa_r>:
 8010d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d8c:	ed2d 8b04 	vpush	{d8-d9}
 8010d90:	69c5      	ldr	r5, [r0, #28]
 8010d92:	b093      	sub	sp, #76	; 0x4c
 8010d94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010d98:	ec57 6b10 	vmov	r6, r7, d0
 8010d9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010da0:	9107      	str	r1, [sp, #28]
 8010da2:	4604      	mov	r4, r0
 8010da4:	920a      	str	r2, [sp, #40]	; 0x28
 8010da6:	930d      	str	r3, [sp, #52]	; 0x34
 8010da8:	b975      	cbnz	r5, 8010dc8 <_dtoa_r+0x40>
 8010daa:	2010      	movs	r0, #16
 8010dac:	f000 fe2a 	bl	8011a04 <malloc>
 8010db0:	4602      	mov	r2, r0
 8010db2:	61e0      	str	r0, [r4, #28]
 8010db4:	b920      	cbnz	r0, 8010dc0 <_dtoa_r+0x38>
 8010db6:	4bae      	ldr	r3, [pc, #696]	; (8011070 <_dtoa_r+0x2e8>)
 8010db8:	21ef      	movs	r1, #239	; 0xef
 8010dba:	48ae      	ldr	r0, [pc, #696]	; (8011074 <_dtoa_r+0x2ec>)
 8010dbc:	f7ff ff3e 	bl	8010c3c <__assert_func>
 8010dc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010dc4:	6005      	str	r5, [r0, #0]
 8010dc6:	60c5      	str	r5, [r0, #12]
 8010dc8:	69e3      	ldr	r3, [r4, #28]
 8010dca:	6819      	ldr	r1, [r3, #0]
 8010dcc:	b151      	cbz	r1, 8010de4 <_dtoa_r+0x5c>
 8010dce:	685a      	ldr	r2, [r3, #4]
 8010dd0:	604a      	str	r2, [r1, #4]
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	4093      	lsls	r3, r2
 8010dd6:	608b      	str	r3, [r1, #8]
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f000 ff07 	bl	8011bec <_Bfree>
 8010dde:	69e3      	ldr	r3, [r4, #28]
 8010de0:	2200      	movs	r2, #0
 8010de2:	601a      	str	r2, [r3, #0]
 8010de4:	1e3b      	subs	r3, r7, #0
 8010de6:	bfbb      	ittet	lt
 8010de8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010dec:	9303      	strlt	r3, [sp, #12]
 8010dee:	2300      	movge	r3, #0
 8010df0:	2201      	movlt	r2, #1
 8010df2:	bfac      	ite	ge
 8010df4:	f8c8 3000 	strge.w	r3, [r8]
 8010df8:	f8c8 2000 	strlt.w	r2, [r8]
 8010dfc:	4b9e      	ldr	r3, [pc, #632]	; (8011078 <_dtoa_r+0x2f0>)
 8010dfe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010e02:	ea33 0308 	bics.w	r3, r3, r8
 8010e06:	d11b      	bne.n	8010e40 <_dtoa_r+0xb8>
 8010e08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8010e0e:	6013      	str	r3, [r2, #0]
 8010e10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010e14:	4333      	orrs	r3, r6
 8010e16:	f000 8593 	beq.w	8011940 <_dtoa_r+0xbb8>
 8010e1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e1c:	b963      	cbnz	r3, 8010e38 <_dtoa_r+0xb0>
 8010e1e:	4b97      	ldr	r3, [pc, #604]	; (801107c <_dtoa_r+0x2f4>)
 8010e20:	e027      	b.n	8010e72 <_dtoa_r+0xea>
 8010e22:	4b97      	ldr	r3, [pc, #604]	; (8011080 <_dtoa_r+0x2f8>)
 8010e24:	9300      	str	r3, [sp, #0]
 8010e26:	3308      	adds	r3, #8
 8010e28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010e2a:	6013      	str	r3, [r2, #0]
 8010e2c:	9800      	ldr	r0, [sp, #0]
 8010e2e:	b013      	add	sp, #76	; 0x4c
 8010e30:	ecbd 8b04 	vpop	{d8-d9}
 8010e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e38:	4b90      	ldr	r3, [pc, #576]	; (801107c <_dtoa_r+0x2f4>)
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	3303      	adds	r3, #3
 8010e3e:	e7f3      	b.n	8010e28 <_dtoa_r+0xa0>
 8010e40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e44:	2200      	movs	r2, #0
 8010e46:	ec51 0b17 	vmov	r0, r1, d7
 8010e4a:	eeb0 8a47 	vmov.f32	s16, s14
 8010e4e:	eef0 8a67 	vmov.f32	s17, s15
 8010e52:	2300      	movs	r3, #0
 8010e54:	f7ef fe48 	bl	8000ae8 <__aeabi_dcmpeq>
 8010e58:	4681      	mov	r9, r0
 8010e5a:	b160      	cbz	r0, 8010e76 <_dtoa_r+0xee>
 8010e5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e5e:	2301      	movs	r3, #1
 8010e60:	6013      	str	r3, [r2, #0]
 8010e62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	f000 8568 	beq.w	801193a <_dtoa_r+0xbb2>
 8010e6a:	4b86      	ldr	r3, [pc, #536]	; (8011084 <_dtoa_r+0x2fc>)
 8010e6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010e6e:	6013      	str	r3, [r2, #0]
 8010e70:	3b01      	subs	r3, #1
 8010e72:	9300      	str	r3, [sp, #0]
 8010e74:	e7da      	b.n	8010e2c <_dtoa_r+0xa4>
 8010e76:	aa10      	add	r2, sp, #64	; 0x40
 8010e78:	a911      	add	r1, sp, #68	; 0x44
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	eeb0 0a48 	vmov.f32	s0, s16
 8010e80:	eef0 0a68 	vmov.f32	s1, s17
 8010e84:	f001 f994 	bl	80121b0 <__d2b>
 8010e88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010e8c:	4682      	mov	sl, r0
 8010e8e:	2d00      	cmp	r5, #0
 8010e90:	d07f      	beq.n	8010f92 <_dtoa_r+0x20a>
 8010e92:	ee18 3a90 	vmov	r3, s17
 8010e96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010e9e:	ec51 0b18 	vmov	r0, r1, d8
 8010ea2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010ea6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010eaa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010eae:	4619      	mov	r1, r3
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	4b75      	ldr	r3, [pc, #468]	; (8011088 <_dtoa_r+0x300>)
 8010eb4:	f7ef f9f8 	bl	80002a8 <__aeabi_dsub>
 8010eb8:	a367      	add	r3, pc, #412	; (adr r3, 8011058 <_dtoa_r+0x2d0>)
 8010eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ebe:	f7ef fbab 	bl	8000618 <__aeabi_dmul>
 8010ec2:	a367      	add	r3, pc, #412	; (adr r3, 8011060 <_dtoa_r+0x2d8>)
 8010ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec8:	f7ef f9f0 	bl	80002ac <__adddf3>
 8010ecc:	4606      	mov	r6, r0
 8010ece:	4628      	mov	r0, r5
 8010ed0:	460f      	mov	r7, r1
 8010ed2:	f7ef fb37 	bl	8000544 <__aeabi_i2d>
 8010ed6:	a364      	add	r3, pc, #400	; (adr r3, 8011068 <_dtoa_r+0x2e0>)
 8010ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010edc:	f7ef fb9c 	bl	8000618 <__aeabi_dmul>
 8010ee0:	4602      	mov	r2, r0
 8010ee2:	460b      	mov	r3, r1
 8010ee4:	4630      	mov	r0, r6
 8010ee6:	4639      	mov	r1, r7
 8010ee8:	f7ef f9e0 	bl	80002ac <__adddf3>
 8010eec:	4606      	mov	r6, r0
 8010eee:	460f      	mov	r7, r1
 8010ef0:	f7ef fe42 	bl	8000b78 <__aeabi_d2iz>
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	4683      	mov	fp, r0
 8010ef8:	2300      	movs	r3, #0
 8010efa:	4630      	mov	r0, r6
 8010efc:	4639      	mov	r1, r7
 8010efe:	f7ef fdfd 	bl	8000afc <__aeabi_dcmplt>
 8010f02:	b148      	cbz	r0, 8010f18 <_dtoa_r+0x190>
 8010f04:	4658      	mov	r0, fp
 8010f06:	f7ef fb1d 	bl	8000544 <__aeabi_i2d>
 8010f0a:	4632      	mov	r2, r6
 8010f0c:	463b      	mov	r3, r7
 8010f0e:	f7ef fdeb 	bl	8000ae8 <__aeabi_dcmpeq>
 8010f12:	b908      	cbnz	r0, 8010f18 <_dtoa_r+0x190>
 8010f14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010f18:	f1bb 0f16 	cmp.w	fp, #22
 8010f1c:	d857      	bhi.n	8010fce <_dtoa_r+0x246>
 8010f1e:	4b5b      	ldr	r3, [pc, #364]	; (801108c <_dtoa_r+0x304>)
 8010f20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f28:	ec51 0b18 	vmov	r0, r1, d8
 8010f2c:	f7ef fde6 	bl	8000afc <__aeabi_dcmplt>
 8010f30:	2800      	cmp	r0, #0
 8010f32:	d04e      	beq.n	8010fd2 <_dtoa_r+0x24a>
 8010f34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010f38:	2300      	movs	r3, #0
 8010f3a:	930c      	str	r3, [sp, #48]	; 0x30
 8010f3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010f3e:	1b5b      	subs	r3, r3, r5
 8010f40:	1e5a      	subs	r2, r3, #1
 8010f42:	bf45      	ittet	mi
 8010f44:	f1c3 0301 	rsbmi	r3, r3, #1
 8010f48:	9305      	strmi	r3, [sp, #20]
 8010f4a:	2300      	movpl	r3, #0
 8010f4c:	2300      	movmi	r3, #0
 8010f4e:	9206      	str	r2, [sp, #24]
 8010f50:	bf54      	ite	pl
 8010f52:	9305      	strpl	r3, [sp, #20]
 8010f54:	9306      	strmi	r3, [sp, #24]
 8010f56:	f1bb 0f00 	cmp.w	fp, #0
 8010f5a:	db3c      	blt.n	8010fd6 <_dtoa_r+0x24e>
 8010f5c:	9b06      	ldr	r3, [sp, #24]
 8010f5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010f62:	445b      	add	r3, fp
 8010f64:	9306      	str	r3, [sp, #24]
 8010f66:	2300      	movs	r3, #0
 8010f68:	9308      	str	r3, [sp, #32]
 8010f6a:	9b07      	ldr	r3, [sp, #28]
 8010f6c:	2b09      	cmp	r3, #9
 8010f6e:	d868      	bhi.n	8011042 <_dtoa_r+0x2ba>
 8010f70:	2b05      	cmp	r3, #5
 8010f72:	bfc4      	itt	gt
 8010f74:	3b04      	subgt	r3, #4
 8010f76:	9307      	strgt	r3, [sp, #28]
 8010f78:	9b07      	ldr	r3, [sp, #28]
 8010f7a:	f1a3 0302 	sub.w	r3, r3, #2
 8010f7e:	bfcc      	ite	gt
 8010f80:	2500      	movgt	r5, #0
 8010f82:	2501      	movle	r5, #1
 8010f84:	2b03      	cmp	r3, #3
 8010f86:	f200 8085 	bhi.w	8011094 <_dtoa_r+0x30c>
 8010f8a:	e8df f003 	tbb	[pc, r3]
 8010f8e:	3b2e      	.short	0x3b2e
 8010f90:	5839      	.short	0x5839
 8010f92:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010f96:	441d      	add	r5, r3
 8010f98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010f9c:	2b20      	cmp	r3, #32
 8010f9e:	bfc1      	itttt	gt
 8010fa0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010fa4:	fa08 f803 	lslgt.w	r8, r8, r3
 8010fa8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010fac:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010fb0:	bfd6      	itet	le
 8010fb2:	f1c3 0320 	rsble	r3, r3, #32
 8010fb6:	ea48 0003 	orrgt.w	r0, r8, r3
 8010fba:	fa06 f003 	lslle.w	r0, r6, r3
 8010fbe:	f7ef fab1 	bl	8000524 <__aeabi_ui2d>
 8010fc2:	2201      	movs	r2, #1
 8010fc4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010fc8:	3d01      	subs	r5, #1
 8010fca:	920e      	str	r2, [sp, #56]	; 0x38
 8010fcc:	e76f      	b.n	8010eae <_dtoa_r+0x126>
 8010fce:	2301      	movs	r3, #1
 8010fd0:	e7b3      	b.n	8010f3a <_dtoa_r+0x1b2>
 8010fd2:	900c      	str	r0, [sp, #48]	; 0x30
 8010fd4:	e7b2      	b.n	8010f3c <_dtoa_r+0x1b4>
 8010fd6:	9b05      	ldr	r3, [sp, #20]
 8010fd8:	eba3 030b 	sub.w	r3, r3, fp
 8010fdc:	9305      	str	r3, [sp, #20]
 8010fde:	f1cb 0300 	rsb	r3, fp, #0
 8010fe2:	9308      	str	r3, [sp, #32]
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	930b      	str	r3, [sp, #44]	; 0x2c
 8010fe8:	e7bf      	b.n	8010f6a <_dtoa_r+0x1e2>
 8010fea:	2300      	movs	r3, #0
 8010fec:	9309      	str	r3, [sp, #36]	; 0x24
 8010fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	dc52      	bgt.n	801109a <_dtoa_r+0x312>
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	9301      	str	r3, [sp, #4]
 8010ff8:	9304      	str	r3, [sp, #16]
 8010ffa:	461a      	mov	r2, r3
 8010ffc:	920a      	str	r2, [sp, #40]	; 0x28
 8010ffe:	e00b      	b.n	8011018 <_dtoa_r+0x290>
 8011000:	2301      	movs	r3, #1
 8011002:	e7f3      	b.n	8010fec <_dtoa_r+0x264>
 8011004:	2300      	movs	r3, #0
 8011006:	9309      	str	r3, [sp, #36]	; 0x24
 8011008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801100a:	445b      	add	r3, fp
 801100c:	9301      	str	r3, [sp, #4]
 801100e:	3301      	adds	r3, #1
 8011010:	2b01      	cmp	r3, #1
 8011012:	9304      	str	r3, [sp, #16]
 8011014:	bfb8      	it	lt
 8011016:	2301      	movlt	r3, #1
 8011018:	69e0      	ldr	r0, [r4, #28]
 801101a:	2100      	movs	r1, #0
 801101c:	2204      	movs	r2, #4
 801101e:	f102 0614 	add.w	r6, r2, #20
 8011022:	429e      	cmp	r6, r3
 8011024:	d93d      	bls.n	80110a2 <_dtoa_r+0x31a>
 8011026:	6041      	str	r1, [r0, #4]
 8011028:	4620      	mov	r0, r4
 801102a:	f000 fd9f 	bl	8011b6c <_Balloc>
 801102e:	9000      	str	r0, [sp, #0]
 8011030:	2800      	cmp	r0, #0
 8011032:	d139      	bne.n	80110a8 <_dtoa_r+0x320>
 8011034:	4b16      	ldr	r3, [pc, #88]	; (8011090 <_dtoa_r+0x308>)
 8011036:	4602      	mov	r2, r0
 8011038:	f240 11af 	movw	r1, #431	; 0x1af
 801103c:	e6bd      	b.n	8010dba <_dtoa_r+0x32>
 801103e:	2301      	movs	r3, #1
 8011040:	e7e1      	b.n	8011006 <_dtoa_r+0x27e>
 8011042:	2501      	movs	r5, #1
 8011044:	2300      	movs	r3, #0
 8011046:	9307      	str	r3, [sp, #28]
 8011048:	9509      	str	r5, [sp, #36]	; 0x24
 801104a:	f04f 33ff 	mov.w	r3, #4294967295
 801104e:	9301      	str	r3, [sp, #4]
 8011050:	9304      	str	r3, [sp, #16]
 8011052:	2200      	movs	r2, #0
 8011054:	2312      	movs	r3, #18
 8011056:	e7d1      	b.n	8010ffc <_dtoa_r+0x274>
 8011058:	636f4361 	.word	0x636f4361
 801105c:	3fd287a7 	.word	0x3fd287a7
 8011060:	8b60c8b3 	.word	0x8b60c8b3
 8011064:	3fc68a28 	.word	0x3fc68a28
 8011068:	509f79fb 	.word	0x509f79fb
 801106c:	3fd34413 	.word	0x3fd34413
 8011070:	080160aa 	.word	0x080160aa
 8011074:	08016297 	.word	0x08016297
 8011078:	7ff00000 	.word	0x7ff00000
 801107c:	08016293 	.word	0x08016293
 8011080:	0801628a 	.word	0x0801628a
 8011084:	0801622b 	.word	0x0801622b
 8011088:	3ff80000 	.word	0x3ff80000
 801108c:	08016388 	.word	0x08016388
 8011090:	080162ef 	.word	0x080162ef
 8011094:	2301      	movs	r3, #1
 8011096:	9309      	str	r3, [sp, #36]	; 0x24
 8011098:	e7d7      	b.n	801104a <_dtoa_r+0x2c2>
 801109a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801109c:	9301      	str	r3, [sp, #4]
 801109e:	9304      	str	r3, [sp, #16]
 80110a0:	e7ba      	b.n	8011018 <_dtoa_r+0x290>
 80110a2:	3101      	adds	r1, #1
 80110a4:	0052      	lsls	r2, r2, #1
 80110a6:	e7ba      	b.n	801101e <_dtoa_r+0x296>
 80110a8:	69e3      	ldr	r3, [r4, #28]
 80110aa:	9a00      	ldr	r2, [sp, #0]
 80110ac:	601a      	str	r2, [r3, #0]
 80110ae:	9b04      	ldr	r3, [sp, #16]
 80110b0:	2b0e      	cmp	r3, #14
 80110b2:	f200 80a8 	bhi.w	8011206 <_dtoa_r+0x47e>
 80110b6:	2d00      	cmp	r5, #0
 80110b8:	f000 80a5 	beq.w	8011206 <_dtoa_r+0x47e>
 80110bc:	f1bb 0f00 	cmp.w	fp, #0
 80110c0:	dd38      	ble.n	8011134 <_dtoa_r+0x3ac>
 80110c2:	4bc0      	ldr	r3, [pc, #768]	; (80113c4 <_dtoa_r+0x63c>)
 80110c4:	f00b 020f 	and.w	r2, fp, #15
 80110c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80110cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80110d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80110d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80110d8:	d019      	beq.n	801110e <_dtoa_r+0x386>
 80110da:	4bbb      	ldr	r3, [pc, #748]	; (80113c8 <_dtoa_r+0x640>)
 80110dc:	ec51 0b18 	vmov	r0, r1, d8
 80110e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80110e4:	f7ef fbc2 	bl	800086c <__aeabi_ddiv>
 80110e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110ec:	f008 080f 	and.w	r8, r8, #15
 80110f0:	2503      	movs	r5, #3
 80110f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80113c8 <_dtoa_r+0x640>
 80110f6:	f1b8 0f00 	cmp.w	r8, #0
 80110fa:	d10a      	bne.n	8011112 <_dtoa_r+0x38a>
 80110fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011100:	4632      	mov	r2, r6
 8011102:	463b      	mov	r3, r7
 8011104:	f7ef fbb2 	bl	800086c <__aeabi_ddiv>
 8011108:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801110c:	e02b      	b.n	8011166 <_dtoa_r+0x3de>
 801110e:	2502      	movs	r5, #2
 8011110:	e7ef      	b.n	80110f2 <_dtoa_r+0x36a>
 8011112:	f018 0f01 	tst.w	r8, #1
 8011116:	d008      	beq.n	801112a <_dtoa_r+0x3a2>
 8011118:	4630      	mov	r0, r6
 801111a:	4639      	mov	r1, r7
 801111c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011120:	f7ef fa7a 	bl	8000618 <__aeabi_dmul>
 8011124:	3501      	adds	r5, #1
 8011126:	4606      	mov	r6, r0
 8011128:	460f      	mov	r7, r1
 801112a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801112e:	f109 0908 	add.w	r9, r9, #8
 8011132:	e7e0      	b.n	80110f6 <_dtoa_r+0x36e>
 8011134:	f000 809f 	beq.w	8011276 <_dtoa_r+0x4ee>
 8011138:	f1cb 0600 	rsb	r6, fp, #0
 801113c:	4ba1      	ldr	r3, [pc, #644]	; (80113c4 <_dtoa_r+0x63c>)
 801113e:	4fa2      	ldr	r7, [pc, #648]	; (80113c8 <_dtoa_r+0x640>)
 8011140:	f006 020f 	and.w	r2, r6, #15
 8011144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114c:	ec51 0b18 	vmov	r0, r1, d8
 8011150:	f7ef fa62 	bl	8000618 <__aeabi_dmul>
 8011154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011158:	1136      	asrs	r6, r6, #4
 801115a:	2300      	movs	r3, #0
 801115c:	2502      	movs	r5, #2
 801115e:	2e00      	cmp	r6, #0
 8011160:	d17e      	bne.n	8011260 <_dtoa_r+0x4d8>
 8011162:	2b00      	cmp	r3, #0
 8011164:	d1d0      	bne.n	8011108 <_dtoa_r+0x380>
 8011166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011168:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801116c:	2b00      	cmp	r3, #0
 801116e:	f000 8084 	beq.w	801127a <_dtoa_r+0x4f2>
 8011172:	4b96      	ldr	r3, [pc, #600]	; (80113cc <_dtoa_r+0x644>)
 8011174:	2200      	movs	r2, #0
 8011176:	4640      	mov	r0, r8
 8011178:	4649      	mov	r1, r9
 801117a:	f7ef fcbf 	bl	8000afc <__aeabi_dcmplt>
 801117e:	2800      	cmp	r0, #0
 8011180:	d07b      	beq.n	801127a <_dtoa_r+0x4f2>
 8011182:	9b04      	ldr	r3, [sp, #16]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d078      	beq.n	801127a <_dtoa_r+0x4f2>
 8011188:	9b01      	ldr	r3, [sp, #4]
 801118a:	2b00      	cmp	r3, #0
 801118c:	dd39      	ble.n	8011202 <_dtoa_r+0x47a>
 801118e:	4b90      	ldr	r3, [pc, #576]	; (80113d0 <_dtoa_r+0x648>)
 8011190:	2200      	movs	r2, #0
 8011192:	4640      	mov	r0, r8
 8011194:	4649      	mov	r1, r9
 8011196:	f7ef fa3f 	bl	8000618 <__aeabi_dmul>
 801119a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801119e:	9e01      	ldr	r6, [sp, #4]
 80111a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80111a4:	3501      	adds	r5, #1
 80111a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80111aa:	4628      	mov	r0, r5
 80111ac:	f7ef f9ca 	bl	8000544 <__aeabi_i2d>
 80111b0:	4642      	mov	r2, r8
 80111b2:	464b      	mov	r3, r9
 80111b4:	f7ef fa30 	bl	8000618 <__aeabi_dmul>
 80111b8:	4b86      	ldr	r3, [pc, #536]	; (80113d4 <_dtoa_r+0x64c>)
 80111ba:	2200      	movs	r2, #0
 80111bc:	f7ef f876 	bl	80002ac <__adddf3>
 80111c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80111c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111c8:	9303      	str	r3, [sp, #12]
 80111ca:	2e00      	cmp	r6, #0
 80111cc:	d158      	bne.n	8011280 <_dtoa_r+0x4f8>
 80111ce:	4b82      	ldr	r3, [pc, #520]	; (80113d8 <_dtoa_r+0x650>)
 80111d0:	2200      	movs	r2, #0
 80111d2:	4640      	mov	r0, r8
 80111d4:	4649      	mov	r1, r9
 80111d6:	f7ef f867 	bl	80002a8 <__aeabi_dsub>
 80111da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80111de:	4680      	mov	r8, r0
 80111e0:	4689      	mov	r9, r1
 80111e2:	f7ef fca9 	bl	8000b38 <__aeabi_dcmpgt>
 80111e6:	2800      	cmp	r0, #0
 80111e8:	f040 8296 	bne.w	8011718 <_dtoa_r+0x990>
 80111ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80111f0:	4640      	mov	r0, r8
 80111f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111f6:	4649      	mov	r1, r9
 80111f8:	f7ef fc80 	bl	8000afc <__aeabi_dcmplt>
 80111fc:	2800      	cmp	r0, #0
 80111fe:	f040 8289 	bne.w	8011714 <_dtoa_r+0x98c>
 8011202:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011206:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011208:	2b00      	cmp	r3, #0
 801120a:	f2c0 814e 	blt.w	80114aa <_dtoa_r+0x722>
 801120e:	f1bb 0f0e 	cmp.w	fp, #14
 8011212:	f300 814a 	bgt.w	80114aa <_dtoa_r+0x722>
 8011216:	4b6b      	ldr	r3, [pc, #428]	; (80113c4 <_dtoa_r+0x63c>)
 8011218:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801121c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011222:	2b00      	cmp	r3, #0
 8011224:	f280 80dc 	bge.w	80113e0 <_dtoa_r+0x658>
 8011228:	9b04      	ldr	r3, [sp, #16]
 801122a:	2b00      	cmp	r3, #0
 801122c:	f300 80d8 	bgt.w	80113e0 <_dtoa_r+0x658>
 8011230:	f040 826f 	bne.w	8011712 <_dtoa_r+0x98a>
 8011234:	4b68      	ldr	r3, [pc, #416]	; (80113d8 <_dtoa_r+0x650>)
 8011236:	2200      	movs	r2, #0
 8011238:	4640      	mov	r0, r8
 801123a:	4649      	mov	r1, r9
 801123c:	f7ef f9ec 	bl	8000618 <__aeabi_dmul>
 8011240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011244:	f7ef fc6e 	bl	8000b24 <__aeabi_dcmpge>
 8011248:	9e04      	ldr	r6, [sp, #16]
 801124a:	4637      	mov	r7, r6
 801124c:	2800      	cmp	r0, #0
 801124e:	f040 8245 	bne.w	80116dc <_dtoa_r+0x954>
 8011252:	9d00      	ldr	r5, [sp, #0]
 8011254:	2331      	movs	r3, #49	; 0x31
 8011256:	f805 3b01 	strb.w	r3, [r5], #1
 801125a:	f10b 0b01 	add.w	fp, fp, #1
 801125e:	e241      	b.n	80116e4 <_dtoa_r+0x95c>
 8011260:	07f2      	lsls	r2, r6, #31
 8011262:	d505      	bpl.n	8011270 <_dtoa_r+0x4e8>
 8011264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011268:	f7ef f9d6 	bl	8000618 <__aeabi_dmul>
 801126c:	3501      	adds	r5, #1
 801126e:	2301      	movs	r3, #1
 8011270:	1076      	asrs	r6, r6, #1
 8011272:	3708      	adds	r7, #8
 8011274:	e773      	b.n	801115e <_dtoa_r+0x3d6>
 8011276:	2502      	movs	r5, #2
 8011278:	e775      	b.n	8011166 <_dtoa_r+0x3de>
 801127a:	9e04      	ldr	r6, [sp, #16]
 801127c:	465f      	mov	r7, fp
 801127e:	e792      	b.n	80111a6 <_dtoa_r+0x41e>
 8011280:	9900      	ldr	r1, [sp, #0]
 8011282:	4b50      	ldr	r3, [pc, #320]	; (80113c4 <_dtoa_r+0x63c>)
 8011284:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011288:	4431      	add	r1, r6
 801128a:	9102      	str	r1, [sp, #8]
 801128c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801128e:	eeb0 9a47 	vmov.f32	s18, s14
 8011292:	eef0 9a67 	vmov.f32	s19, s15
 8011296:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801129a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801129e:	2900      	cmp	r1, #0
 80112a0:	d044      	beq.n	801132c <_dtoa_r+0x5a4>
 80112a2:	494e      	ldr	r1, [pc, #312]	; (80113dc <_dtoa_r+0x654>)
 80112a4:	2000      	movs	r0, #0
 80112a6:	f7ef fae1 	bl	800086c <__aeabi_ddiv>
 80112aa:	ec53 2b19 	vmov	r2, r3, d9
 80112ae:	f7ee fffb 	bl	80002a8 <__aeabi_dsub>
 80112b2:	9d00      	ldr	r5, [sp, #0]
 80112b4:	ec41 0b19 	vmov	d9, r0, r1
 80112b8:	4649      	mov	r1, r9
 80112ba:	4640      	mov	r0, r8
 80112bc:	f7ef fc5c 	bl	8000b78 <__aeabi_d2iz>
 80112c0:	4606      	mov	r6, r0
 80112c2:	f7ef f93f 	bl	8000544 <__aeabi_i2d>
 80112c6:	4602      	mov	r2, r0
 80112c8:	460b      	mov	r3, r1
 80112ca:	4640      	mov	r0, r8
 80112cc:	4649      	mov	r1, r9
 80112ce:	f7ee ffeb 	bl	80002a8 <__aeabi_dsub>
 80112d2:	3630      	adds	r6, #48	; 0x30
 80112d4:	f805 6b01 	strb.w	r6, [r5], #1
 80112d8:	ec53 2b19 	vmov	r2, r3, d9
 80112dc:	4680      	mov	r8, r0
 80112de:	4689      	mov	r9, r1
 80112e0:	f7ef fc0c 	bl	8000afc <__aeabi_dcmplt>
 80112e4:	2800      	cmp	r0, #0
 80112e6:	d164      	bne.n	80113b2 <_dtoa_r+0x62a>
 80112e8:	4642      	mov	r2, r8
 80112ea:	464b      	mov	r3, r9
 80112ec:	4937      	ldr	r1, [pc, #220]	; (80113cc <_dtoa_r+0x644>)
 80112ee:	2000      	movs	r0, #0
 80112f0:	f7ee ffda 	bl	80002a8 <__aeabi_dsub>
 80112f4:	ec53 2b19 	vmov	r2, r3, d9
 80112f8:	f7ef fc00 	bl	8000afc <__aeabi_dcmplt>
 80112fc:	2800      	cmp	r0, #0
 80112fe:	f040 80b6 	bne.w	801146e <_dtoa_r+0x6e6>
 8011302:	9b02      	ldr	r3, [sp, #8]
 8011304:	429d      	cmp	r5, r3
 8011306:	f43f af7c 	beq.w	8011202 <_dtoa_r+0x47a>
 801130a:	4b31      	ldr	r3, [pc, #196]	; (80113d0 <_dtoa_r+0x648>)
 801130c:	ec51 0b19 	vmov	r0, r1, d9
 8011310:	2200      	movs	r2, #0
 8011312:	f7ef f981 	bl	8000618 <__aeabi_dmul>
 8011316:	4b2e      	ldr	r3, [pc, #184]	; (80113d0 <_dtoa_r+0x648>)
 8011318:	ec41 0b19 	vmov	d9, r0, r1
 801131c:	2200      	movs	r2, #0
 801131e:	4640      	mov	r0, r8
 8011320:	4649      	mov	r1, r9
 8011322:	f7ef f979 	bl	8000618 <__aeabi_dmul>
 8011326:	4680      	mov	r8, r0
 8011328:	4689      	mov	r9, r1
 801132a:	e7c5      	b.n	80112b8 <_dtoa_r+0x530>
 801132c:	ec51 0b17 	vmov	r0, r1, d7
 8011330:	f7ef f972 	bl	8000618 <__aeabi_dmul>
 8011334:	9b02      	ldr	r3, [sp, #8]
 8011336:	9d00      	ldr	r5, [sp, #0]
 8011338:	930f      	str	r3, [sp, #60]	; 0x3c
 801133a:	ec41 0b19 	vmov	d9, r0, r1
 801133e:	4649      	mov	r1, r9
 8011340:	4640      	mov	r0, r8
 8011342:	f7ef fc19 	bl	8000b78 <__aeabi_d2iz>
 8011346:	4606      	mov	r6, r0
 8011348:	f7ef f8fc 	bl	8000544 <__aeabi_i2d>
 801134c:	3630      	adds	r6, #48	; 0x30
 801134e:	4602      	mov	r2, r0
 8011350:	460b      	mov	r3, r1
 8011352:	4640      	mov	r0, r8
 8011354:	4649      	mov	r1, r9
 8011356:	f7ee ffa7 	bl	80002a8 <__aeabi_dsub>
 801135a:	f805 6b01 	strb.w	r6, [r5], #1
 801135e:	9b02      	ldr	r3, [sp, #8]
 8011360:	429d      	cmp	r5, r3
 8011362:	4680      	mov	r8, r0
 8011364:	4689      	mov	r9, r1
 8011366:	f04f 0200 	mov.w	r2, #0
 801136a:	d124      	bne.n	80113b6 <_dtoa_r+0x62e>
 801136c:	4b1b      	ldr	r3, [pc, #108]	; (80113dc <_dtoa_r+0x654>)
 801136e:	ec51 0b19 	vmov	r0, r1, d9
 8011372:	f7ee ff9b 	bl	80002ac <__adddf3>
 8011376:	4602      	mov	r2, r0
 8011378:	460b      	mov	r3, r1
 801137a:	4640      	mov	r0, r8
 801137c:	4649      	mov	r1, r9
 801137e:	f7ef fbdb 	bl	8000b38 <__aeabi_dcmpgt>
 8011382:	2800      	cmp	r0, #0
 8011384:	d173      	bne.n	801146e <_dtoa_r+0x6e6>
 8011386:	ec53 2b19 	vmov	r2, r3, d9
 801138a:	4914      	ldr	r1, [pc, #80]	; (80113dc <_dtoa_r+0x654>)
 801138c:	2000      	movs	r0, #0
 801138e:	f7ee ff8b 	bl	80002a8 <__aeabi_dsub>
 8011392:	4602      	mov	r2, r0
 8011394:	460b      	mov	r3, r1
 8011396:	4640      	mov	r0, r8
 8011398:	4649      	mov	r1, r9
 801139a:	f7ef fbaf 	bl	8000afc <__aeabi_dcmplt>
 801139e:	2800      	cmp	r0, #0
 80113a0:	f43f af2f 	beq.w	8011202 <_dtoa_r+0x47a>
 80113a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80113a6:	1e6b      	subs	r3, r5, #1
 80113a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80113aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80113ae:	2b30      	cmp	r3, #48	; 0x30
 80113b0:	d0f8      	beq.n	80113a4 <_dtoa_r+0x61c>
 80113b2:	46bb      	mov	fp, r7
 80113b4:	e04a      	b.n	801144c <_dtoa_r+0x6c4>
 80113b6:	4b06      	ldr	r3, [pc, #24]	; (80113d0 <_dtoa_r+0x648>)
 80113b8:	f7ef f92e 	bl	8000618 <__aeabi_dmul>
 80113bc:	4680      	mov	r8, r0
 80113be:	4689      	mov	r9, r1
 80113c0:	e7bd      	b.n	801133e <_dtoa_r+0x5b6>
 80113c2:	bf00      	nop
 80113c4:	08016388 	.word	0x08016388
 80113c8:	08016360 	.word	0x08016360
 80113cc:	3ff00000 	.word	0x3ff00000
 80113d0:	40240000 	.word	0x40240000
 80113d4:	401c0000 	.word	0x401c0000
 80113d8:	40140000 	.word	0x40140000
 80113dc:	3fe00000 	.word	0x3fe00000
 80113e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80113e4:	9d00      	ldr	r5, [sp, #0]
 80113e6:	4642      	mov	r2, r8
 80113e8:	464b      	mov	r3, r9
 80113ea:	4630      	mov	r0, r6
 80113ec:	4639      	mov	r1, r7
 80113ee:	f7ef fa3d 	bl	800086c <__aeabi_ddiv>
 80113f2:	f7ef fbc1 	bl	8000b78 <__aeabi_d2iz>
 80113f6:	9001      	str	r0, [sp, #4]
 80113f8:	f7ef f8a4 	bl	8000544 <__aeabi_i2d>
 80113fc:	4642      	mov	r2, r8
 80113fe:	464b      	mov	r3, r9
 8011400:	f7ef f90a 	bl	8000618 <__aeabi_dmul>
 8011404:	4602      	mov	r2, r0
 8011406:	460b      	mov	r3, r1
 8011408:	4630      	mov	r0, r6
 801140a:	4639      	mov	r1, r7
 801140c:	f7ee ff4c 	bl	80002a8 <__aeabi_dsub>
 8011410:	9e01      	ldr	r6, [sp, #4]
 8011412:	9f04      	ldr	r7, [sp, #16]
 8011414:	3630      	adds	r6, #48	; 0x30
 8011416:	f805 6b01 	strb.w	r6, [r5], #1
 801141a:	9e00      	ldr	r6, [sp, #0]
 801141c:	1bae      	subs	r6, r5, r6
 801141e:	42b7      	cmp	r7, r6
 8011420:	4602      	mov	r2, r0
 8011422:	460b      	mov	r3, r1
 8011424:	d134      	bne.n	8011490 <_dtoa_r+0x708>
 8011426:	f7ee ff41 	bl	80002ac <__adddf3>
 801142a:	4642      	mov	r2, r8
 801142c:	464b      	mov	r3, r9
 801142e:	4606      	mov	r6, r0
 8011430:	460f      	mov	r7, r1
 8011432:	f7ef fb81 	bl	8000b38 <__aeabi_dcmpgt>
 8011436:	b9c8      	cbnz	r0, 801146c <_dtoa_r+0x6e4>
 8011438:	4642      	mov	r2, r8
 801143a:	464b      	mov	r3, r9
 801143c:	4630      	mov	r0, r6
 801143e:	4639      	mov	r1, r7
 8011440:	f7ef fb52 	bl	8000ae8 <__aeabi_dcmpeq>
 8011444:	b110      	cbz	r0, 801144c <_dtoa_r+0x6c4>
 8011446:	9b01      	ldr	r3, [sp, #4]
 8011448:	07db      	lsls	r3, r3, #31
 801144a:	d40f      	bmi.n	801146c <_dtoa_r+0x6e4>
 801144c:	4651      	mov	r1, sl
 801144e:	4620      	mov	r0, r4
 8011450:	f000 fbcc 	bl	8011bec <_Bfree>
 8011454:	2300      	movs	r3, #0
 8011456:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011458:	702b      	strb	r3, [r5, #0]
 801145a:	f10b 0301 	add.w	r3, fp, #1
 801145e:	6013      	str	r3, [r2, #0]
 8011460:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011462:	2b00      	cmp	r3, #0
 8011464:	f43f ace2 	beq.w	8010e2c <_dtoa_r+0xa4>
 8011468:	601d      	str	r5, [r3, #0]
 801146a:	e4df      	b.n	8010e2c <_dtoa_r+0xa4>
 801146c:	465f      	mov	r7, fp
 801146e:	462b      	mov	r3, r5
 8011470:	461d      	mov	r5, r3
 8011472:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011476:	2a39      	cmp	r2, #57	; 0x39
 8011478:	d106      	bne.n	8011488 <_dtoa_r+0x700>
 801147a:	9a00      	ldr	r2, [sp, #0]
 801147c:	429a      	cmp	r2, r3
 801147e:	d1f7      	bne.n	8011470 <_dtoa_r+0x6e8>
 8011480:	9900      	ldr	r1, [sp, #0]
 8011482:	2230      	movs	r2, #48	; 0x30
 8011484:	3701      	adds	r7, #1
 8011486:	700a      	strb	r2, [r1, #0]
 8011488:	781a      	ldrb	r2, [r3, #0]
 801148a:	3201      	adds	r2, #1
 801148c:	701a      	strb	r2, [r3, #0]
 801148e:	e790      	b.n	80113b2 <_dtoa_r+0x62a>
 8011490:	4ba3      	ldr	r3, [pc, #652]	; (8011720 <_dtoa_r+0x998>)
 8011492:	2200      	movs	r2, #0
 8011494:	f7ef f8c0 	bl	8000618 <__aeabi_dmul>
 8011498:	2200      	movs	r2, #0
 801149a:	2300      	movs	r3, #0
 801149c:	4606      	mov	r6, r0
 801149e:	460f      	mov	r7, r1
 80114a0:	f7ef fb22 	bl	8000ae8 <__aeabi_dcmpeq>
 80114a4:	2800      	cmp	r0, #0
 80114a6:	d09e      	beq.n	80113e6 <_dtoa_r+0x65e>
 80114a8:	e7d0      	b.n	801144c <_dtoa_r+0x6c4>
 80114aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114ac:	2a00      	cmp	r2, #0
 80114ae:	f000 80ca 	beq.w	8011646 <_dtoa_r+0x8be>
 80114b2:	9a07      	ldr	r2, [sp, #28]
 80114b4:	2a01      	cmp	r2, #1
 80114b6:	f300 80ad 	bgt.w	8011614 <_dtoa_r+0x88c>
 80114ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80114bc:	2a00      	cmp	r2, #0
 80114be:	f000 80a5 	beq.w	801160c <_dtoa_r+0x884>
 80114c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80114c6:	9e08      	ldr	r6, [sp, #32]
 80114c8:	9d05      	ldr	r5, [sp, #20]
 80114ca:	9a05      	ldr	r2, [sp, #20]
 80114cc:	441a      	add	r2, r3
 80114ce:	9205      	str	r2, [sp, #20]
 80114d0:	9a06      	ldr	r2, [sp, #24]
 80114d2:	2101      	movs	r1, #1
 80114d4:	441a      	add	r2, r3
 80114d6:	4620      	mov	r0, r4
 80114d8:	9206      	str	r2, [sp, #24]
 80114da:	f000 fc3d 	bl	8011d58 <__i2b>
 80114de:	4607      	mov	r7, r0
 80114e0:	b165      	cbz	r5, 80114fc <_dtoa_r+0x774>
 80114e2:	9b06      	ldr	r3, [sp, #24]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	dd09      	ble.n	80114fc <_dtoa_r+0x774>
 80114e8:	42ab      	cmp	r3, r5
 80114ea:	9a05      	ldr	r2, [sp, #20]
 80114ec:	bfa8      	it	ge
 80114ee:	462b      	movge	r3, r5
 80114f0:	1ad2      	subs	r2, r2, r3
 80114f2:	9205      	str	r2, [sp, #20]
 80114f4:	9a06      	ldr	r2, [sp, #24]
 80114f6:	1aed      	subs	r5, r5, r3
 80114f8:	1ad3      	subs	r3, r2, r3
 80114fa:	9306      	str	r3, [sp, #24]
 80114fc:	9b08      	ldr	r3, [sp, #32]
 80114fe:	b1f3      	cbz	r3, 801153e <_dtoa_r+0x7b6>
 8011500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011502:	2b00      	cmp	r3, #0
 8011504:	f000 80a3 	beq.w	801164e <_dtoa_r+0x8c6>
 8011508:	2e00      	cmp	r6, #0
 801150a:	dd10      	ble.n	801152e <_dtoa_r+0x7a6>
 801150c:	4639      	mov	r1, r7
 801150e:	4632      	mov	r2, r6
 8011510:	4620      	mov	r0, r4
 8011512:	f000 fce1 	bl	8011ed8 <__pow5mult>
 8011516:	4652      	mov	r2, sl
 8011518:	4601      	mov	r1, r0
 801151a:	4607      	mov	r7, r0
 801151c:	4620      	mov	r0, r4
 801151e:	f000 fc31 	bl	8011d84 <__multiply>
 8011522:	4651      	mov	r1, sl
 8011524:	4680      	mov	r8, r0
 8011526:	4620      	mov	r0, r4
 8011528:	f000 fb60 	bl	8011bec <_Bfree>
 801152c:	46c2      	mov	sl, r8
 801152e:	9b08      	ldr	r3, [sp, #32]
 8011530:	1b9a      	subs	r2, r3, r6
 8011532:	d004      	beq.n	801153e <_dtoa_r+0x7b6>
 8011534:	4651      	mov	r1, sl
 8011536:	4620      	mov	r0, r4
 8011538:	f000 fcce 	bl	8011ed8 <__pow5mult>
 801153c:	4682      	mov	sl, r0
 801153e:	2101      	movs	r1, #1
 8011540:	4620      	mov	r0, r4
 8011542:	f000 fc09 	bl	8011d58 <__i2b>
 8011546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011548:	2b00      	cmp	r3, #0
 801154a:	4606      	mov	r6, r0
 801154c:	f340 8081 	ble.w	8011652 <_dtoa_r+0x8ca>
 8011550:	461a      	mov	r2, r3
 8011552:	4601      	mov	r1, r0
 8011554:	4620      	mov	r0, r4
 8011556:	f000 fcbf 	bl	8011ed8 <__pow5mult>
 801155a:	9b07      	ldr	r3, [sp, #28]
 801155c:	2b01      	cmp	r3, #1
 801155e:	4606      	mov	r6, r0
 8011560:	dd7a      	ble.n	8011658 <_dtoa_r+0x8d0>
 8011562:	f04f 0800 	mov.w	r8, #0
 8011566:	6933      	ldr	r3, [r6, #16]
 8011568:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801156c:	6918      	ldr	r0, [r3, #16]
 801156e:	f000 fba5 	bl	8011cbc <__hi0bits>
 8011572:	f1c0 0020 	rsb	r0, r0, #32
 8011576:	9b06      	ldr	r3, [sp, #24]
 8011578:	4418      	add	r0, r3
 801157a:	f010 001f 	ands.w	r0, r0, #31
 801157e:	f000 8094 	beq.w	80116aa <_dtoa_r+0x922>
 8011582:	f1c0 0320 	rsb	r3, r0, #32
 8011586:	2b04      	cmp	r3, #4
 8011588:	f340 8085 	ble.w	8011696 <_dtoa_r+0x90e>
 801158c:	9b05      	ldr	r3, [sp, #20]
 801158e:	f1c0 001c 	rsb	r0, r0, #28
 8011592:	4403      	add	r3, r0
 8011594:	9305      	str	r3, [sp, #20]
 8011596:	9b06      	ldr	r3, [sp, #24]
 8011598:	4403      	add	r3, r0
 801159a:	4405      	add	r5, r0
 801159c:	9306      	str	r3, [sp, #24]
 801159e:	9b05      	ldr	r3, [sp, #20]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	dd05      	ble.n	80115b0 <_dtoa_r+0x828>
 80115a4:	4651      	mov	r1, sl
 80115a6:	461a      	mov	r2, r3
 80115a8:	4620      	mov	r0, r4
 80115aa:	f000 fcef 	bl	8011f8c <__lshift>
 80115ae:	4682      	mov	sl, r0
 80115b0:	9b06      	ldr	r3, [sp, #24]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	dd05      	ble.n	80115c2 <_dtoa_r+0x83a>
 80115b6:	4631      	mov	r1, r6
 80115b8:	461a      	mov	r2, r3
 80115ba:	4620      	mov	r0, r4
 80115bc:	f000 fce6 	bl	8011f8c <__lshift>
 80115c0:	4606      	mov	r6, r0
 80115c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d072      	beq.n	80116ae <_dtoa_r+0x926>
 80115c8:	4631      	mov	r1, r6
 80115ca:	4650      	mov	r0, sl
 80115cc:	f000 fd4a 	bl	8012064 <__mcmp>
 80115d0:	2800      	cmp	r0, #0
 80115d2:	da6c      	bge.n	80116ae <_dtoa_r+0x926>
 80115d4:	2300      	movs	r3, #0
 80115d6:	4651      	mov	r1, sl
 80115d8:	220a      	movs	r2, #10
 80115da:	4620      	mov	r0, r4
 80115dc:	f000 fb28 	bl	8011c30 <__multadd>
 80115e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80115e6:	4682      	mov	sl, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	f000 81b0 	beq.w	801194e <_dtoa_r+0xbc6>
 80115ee:	2300      	movs	r3, #0
 80115f0:	4639      	mov	r1, r7
 80115f2:	220a      	movs	r2, #10
 80115f4:	4620      	mov	r0, r4
 80115f6:	f000 fb1b 	bl	8011c30 <__multadd>
 80115fa:	9b01      	ldr	r3, [sp, #4]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	4607      	mov	r7, r0
 8011600:	f300 8096 	bgt.w	8011730 <_dtoa_r+0x9a8>
 8011604:	9b07      	ldr	r3, [sp, #28]
 8011606:	2b02      	cmp	r3, #2
 8011608:	dc59      	bgt.n	80116be <_dtoa_r+0x936>
 801160a:	e091      	b.n	8011730 <_dtoa_r+0x9a8>
 801160c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801160e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011612:	e758      	b.n	80114c6 <_dtoa_r+0x73e>
 8011614:	9b04      	ldr	r3, [sp, #16]
 8011616:	1e5e      	subs	r6, r3, #1
 8011618:	9b08      	ldr	r3, [sp, #32]
 801161a:	42b3      	cmp	r3, r6
 801161c:	bfbf      	itttt	lt
 801161e:	9b08      	ldrlt	r3, [sp, #32]
 8011620:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8011622:	9608      	strlt	r6, [sp, #32]
 8011624:	1af3      	sublt	r3, r6, r3
 8011626:	bfb4      	ite	lt
 8011628:	18d2      	addlt	r2, r2, r3
 801162a:	1b9e      	subge	r6, r3, r6
 801162c:	9b04      	ldr	r3, [sp, #16]
 801162e:	bfbc      	itt	lt
 8011630:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8011632:	2600      	movlt	r6, #0
 8011634:	2b00      	cmp	r3, #0
 8011636:	bfb7      	itett	lt
 8011638:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801163c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8011640:	1a9d      	sublt	r5, r3, r2
 8011642:	2300      	movlt	r3, #0
 8011644:	e741      	b.n	80114ca <_dtoa_r+0x742>
 8011646:	9e08      	ldr	r6, [sp, #32]
 8011648:	9d05      	ldr	r5, [sp, #20]
 801164a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801164c:	e748      	b.n	80114e0 <_dtoa_r+0x758>
 801164e:	9a08      	ldr	r2, [sp, #32]
 8011650:	e770      	b.n	8011534 <_dtoa_r+0x7ac>
 8011652:	9b07      	ldr	r3, [sp, #28]
 8011654:	2b01      	cmp	r3, #1
 8011656:	dc19      	bgt.n	801168c <_dtoa_r+0x904>
 8011658:	9b02      	ldr	r3, [sp, #8]
 801165a:	b9bb      	cbnz	r3, 801168c <_dtoa_r+0x904>
 801165c:	9b03      	ldr	r3, [sp, #12]
 801165e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011662:	b99b      	cbnz	r3, 801168c <_dtoa_r+0x904>
 8011664:	9b03      	ldr	r3, [sp, #12]
 8011666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801166a:	0d1b      	lsrs	r3, r3, #20
 801166c:	051b      	lsls	r3, r3, #20
 801166e:	b183      	cbz	r3, 8011692 <_dtoa_r+0x90a>
 8011670:	9b05      	ldr	r3, [sp, #20]
 8011672:	3301      	adds	r3, #1
 8011674:	9305      	str	r3, [sp, #20]
 8011676:	9b06      	ldr	r3, [sp, #24]
 8011678:	3301      	adds	r3, #1
 801167a:	9306      	str	r3, [sp, #24]
 801167c:	f04f 0801 	mov.w	r8, #1
 8011680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011682:	2b00      	cmp	r3, #0
 8011684:	f47f af6f 	bne.w	8011566 <_dtoa_r+0x7de>
 8011688:	2001      	movs	r0, #1
 801168a:	e774      	b.n	8011576 <_dtoa_r+0x7ee>
 801168c:	f04f 0800 	mov.w	r8, #0
 8011690:	e7f6      	b.n	8011680 <_dtoa_r+0x8f8>
 8011692:	4698      	mov	r8, r3
 8011694:	e7f4      	b.n	8011680 <_dtoa_r+0x8f8>
 8011696:	d082      	beq.n	801159e <_dtoa_r+0x816>
 8011698:	9a05      	ldr	r2, [sp, #20]
 801169a:	331c      	adds	r3, #28
 801169c:	441a      	add	r2, r3
 801169e:	9205      	str	r2, [sp, #20]
 80116a0:	9a06      	ldr	r2, [sp, #24]
 80116a2:	441a      	add	r2, r3
 80116a4:	441d      	add	r5, r3
 80116a6:	9206      	str	r2, [sp, #24]
 80116a8:	e779      	b.n	801159e <_dtoa_r+0x816>
 80116aa:	4603      	mov	r3, r0
 80116ac:	e7f4      	b.n	8011698 <_dtoa_r+0x910>
 80116ae:	9b04      	ldr	r3, [sp, #16]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	dc37      	bgt.n	8011724 <_dtoa_r+0x99c>
 80116b4:	9b07      	ldr	r3, [sp, #28]
 80116b6:	2b02      	cmp	r3, #2
 80116b8:	dd34      	ble.n	8011724 <_dtoa_r+0x99c>
 80116ba:	9b04      	ldr	r3, [sp, #16]
 80116bc:	9301      	str	r3, [sp, #4]
 80116be:	9b01      	ldr	r3, [sp, #4]
 80116c0:	b963      	cbnz	r3, 80116dc <_dtoa_r+0x954>
 80116c2:	4631      	mov	r1, r6
 80116c4:	2205      	movs	r2, #5
 80116c6:	4620      	mov	r0, r4
 80116c8:	f000 fab2 	bl	8011c30 <__multadd>
 80116cc:	4601      	mov	r1, r0
 80116ce:	4606      	mov	r6, r0
 80116d0:	4650      	mov	r0, sl
 80116d2:	f000 fcc7 	bl	8012064 <__mcmp>
 80116d6:	2800      	cmp	r0, #0
 80116d8:	f73f adbb 	bgt.w	8011252 <_dtoa_r+0x4ca>
 80116dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116de:	9d00      	ldr	r5, [sp, #0]
 80116e0:	ea6f 0b03 	mvn.w	fp, r3
 80116e4:	f04f 0800 	mov.w	r8, #0
 80116e8:	4631      	mov	r1, r6
 80116ea:	4620      	mov	r0, r4
 80116ec:	f000 fa7e 	bl	8011bec <_Bfree>
 80116f0:	2f00      	cmp	r7, #0
 80116f2:	f43f aeab 	beq.w	801144c <_dtoa_r+0x6c4>
 80116f6:	f1b8 0f00 	cmp.w	r8, #0
 80116fa:	d005      	beq.n	8011708 <_dtoa_r+0x980>
 80116fc:	45b8      	cmp	r8, r7
 80116fe:	d003      	beq.n	8011708 <_dtoa_r+0x980>
 8011700:	4641      	mov	r1, r8
 8011702:	4620      	mov	r0, r4
 8011704:	f000 fa72 	bl	8011bec <_Bfree>
 8011708:	4639      	mov	r1, r7
 801170a:	4620      	mov	r0, r4
 801170c:	f000 fa6e 	bl	8011bec <_Bfree>
 8011710:	e69c      	b.n	801144c <_dtoa_r+0x6c4>
 8011712:	2600      	movs	r6, #0
 8011714:	4637      	mov	r7, r6
 8011716:	e7e1      	b.n	80116dc <_dtoa_r+0x954>
 8011718:	46bb      	mov	fp, r7
 801171a:	4637      	mov	r7, r6
 801171c:	e599      	b.n	8011252 <_dtoa_r+0x4ca>
 801171e:	bf00      	nop
 8011720:	40240000 	.word	0x40240000
 8011724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011726:	2b00      	cmp	r3, #0
 8011728:	f000 80c8 	beq.w	80118bc <_dtoa_r+0xb34>
 801172c:	9b04      	ldr	r3, [sp, #16]
 801172e:	9301      	str	r3, [sp, #4]
 8011730:	2d00      	cmp	r5, #0
 8011732:	dd05      	ble.n	8011740 <_dtoa_r+0x9b8>
 8011734:	4639      	mov	r1, r7
 8011736:	462a      	mov	r2, r5
 8011738:	4620      	mov	r0, r4
 801173a:	f000 fc27 	bl	8011f8c <__lshift>
 801173e:	4607      	mov	r7, r0
 8011740:	f1b8 0f00 	cmp.w	r8, #0
 8011744:	d05b      	beq.n	80117fe <_dtoa_r+0xa76>
 8011746:	6879      	ldr	r1, [r7, #4]
 8011748:	4620      	mov	r0, r4
 801174a:	f000 fa0f 	bl	8011b6c <_Balloc>
 801174e:	4605      	mov	r5, r0
 8011750:	b928      	cbnz	r0, 801175e <_dtoa_r+0x9d6>
 8011752:	4b83      	ldr	r3, [pc, #524]	; (8011960 <_dtoa_r+0xbd8>)
 8011754:	4602      	mov	r2, r0
 8011756:	f240 21ef 	movw	r1, #751	; 0x2ef
 801175a:	f7ff bb2e 	b.w	8010dba <_dtoa_r+0x32>
 801175e:	693a      	ldr	r2, [r7, #16]
 8011760:	3202      	adds	r2, #2
 8011762:	0092      	lsls	r2, r2, #2
 8011764:	f107 010c 	add.w	r1, r7, #12
 8011768:	300c      	adds	r0, #12
 801176a:	f7ff fa58 	bl	8010c1e <memcpy>
 801176e:	2201      	movs	r2, #1
 8011770:	4629      	mov	r1, r5
 8011772:	4620      	mov	r0, r4
 8011774:	f000 fc0a 	bl	8011f8c <__lshift>
 8011778:	9b00      	ldr	r3, [sp, #0]
 801177a:	3301      	adds	r3, #1
 801177c:	9304      	str	r3, [sp, #16]
 801177e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011782:	4413      	add	r3, r2
 8011784:	9308      	str	r3, [sp, #32]
 8011786:	9b02      	ldr	r3, [sp, #8]
 8011788:	f003 0301 	and.w	r3, r3, #1
 801178c:	46b8      	mov	r8, r7
 801178e:	9306      	str	r3, [sp, #24]
 8011790:	4607      	mov	r7, r0
 8011792:	9b04      	ldr	r3, [sp, #16]
 8011794:	4631      	mov	r1, r6
 8011796:	3b01      	subs	r3, #1
 8011798:	4650      	mov	r0, sl
 801179a:	9301      	str	r3, [sp, #4]
 801179c:	f7ff fa6c 	bl	8010c78 <quorem>
 80117a0:	4641      	mov	r1, r8
 80117a2:	9002      	str	r0, [sp, #8]
 80117a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80117a8:	4650      	mov	r0, sl
 80117aa:	f000 fc5b 	bl	8012064 <__mcmp>
 80117ae:	463a      	mov	r2, r7
 80117b0:	9005      	str	r0, [sp, #20]
 80117b2:	4631      	mov	r1, r6
 80117b4:	4620      	mov	r0, r4
 80117b6:	f000 fc71 	bl	801209c <__mdiff>
 80117ba:	68c2      	ldr	r2, [r0, #12]
 80117bc:	4605      	mov	r5, r0
 80117be:	bb02      	cbnz	r2, 8011802 <_dtoa_r+0xa7a>
 80117c0:	4601      	mov	r1, r0
 80117c2:	4650      	mov	r0, sl
 80117c4:	f000 fc4e 	bl	8012064 <__mcmp>
 80117c8:	4602      	mov	r2, r0
 80117ca:	4629      	mov	r1, r5
 80117cc:	4620      	mov	r0, r4
 80117ce:	9209      	str	r2, [sp, #36]	; 0x24
 80117d0:	f000 fa0c 	bl	8011bec <_Bfree>
 80117d4:	9b07      	ldr	r3, [sp, #28]
 80117d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117d8:	9d04      	ldr	r5, [sp, #16]
 80117da:	ea43 0102 	orr.w	r1, r3, r2
 80117de:	9b06      	ldr	r3, [sp, #24]
 80117e0:	4319      	orrs	r1, r3
 80117e2:	d110      	bne.n	8011806 <_dtoa_r+0xa7e>
 80117e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80117e8:	d029      	beq.n	801183e <_dtoa_r+0xab6>
 80117ea:	9b05      	ldr	r3, [sp, #20]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	dd02      	ble.n	80117f6 <_dtoa_r+0xa6e>
 80117f0:	9b02      	ldr	r3, [sp, #8]
 80117f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80117f6:	9b01      	ldr	r3, [sp, #4]
 80117f8:	f883 9000 	strb.w	r9, [r3]
 80117fc:	e774      	b.n	80116e8 <_dtoa_r+0x960>
 80117fe:	4638      	mov	r0, r7
 8011800:	e7ba      	b.n	8011778 <_dtoa_r+0x9f0>
 8011802:	2201      	movs	r2, #1
 8011804:	e7e1      	b.n	80117ca <_dtoa_r+0xa42>
 8011806:	9b05      	ldr	r3, [sp, #20]
 8011808:	2b00      	cmp	r3, #0
 801180a:	db04      	blt.n	8011816 <_dtoa_r+0xa8e>
 801180c:	9907      	ldr	r1, [sp, #28]
 801180e:	430b      	orrs	r3, r1
 8011810:	9906      	ldr	r1, [sp, #24]
 8011812:	430b      	orrs	r3, r1
 8011814:	d120      	bne.n	8011858 <_dtoa_r+0xad0>
 8011816:	2a00      	cmp	r2, #0
 8011818:	dded      	ble.n	80117f6 <_dtoa_r+0xa6e>
 801181a:	4651      	mov	r1, sl
 801181c:	2201      	movs	r2, #1
 801181e:	4620      	mov	r0, r4
 8011820:	f000 fbb4 	bl	8011f8c <__lshift>
 8011824:	4631      	mov	r1, r6
 8011826:	4682      	mov	sl, r0
 8011828:	f000 fc1c 	bl	8012064 <__mcmp>
 801182c:	2800      	cmp	r0, #0
 801182e:	dc03      	bgt.n	8011838 <_dtoa_r+0xab0>
 8011830:	d1e1      	bne.n	80117f6 <_dtoa_r+0xa6e>
 8011832:	f019 0f01 	tst.w	r9, #1
 8011836:	d0de      	beq.n	80117f6 <_dtoa_r+0xa6e>
 8011838:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801183c:	d1d8      	bne.n	80117f0 <_dtoa_r+0xa68>
 801183e:	9a01      	ldr	r2, [sp, #4]
 8011840:	2339      	movs	r3, #57	; 0x39
 8011842:	7013      	strb	r3, [r2, #0]
 8011844:	462b      	mov	r3, r5
 8011846:	461d      	mov	r5, r3
 8011848:	3b01      	subs	r3, #1
 801184a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801184e:	2a39      	cmp	r2, #57	; 0x39
 8011850:	d06c      	beq.n	801192c <_dtoa_r+0xba4>
 8011852:	3201      	adds	r2, #1
 8011854:	701a      	strb	r2, [r3, #0]
 8011856:	e747      	b.n	80116e8 <_dtoa_r+0x960>
 8011858:	2a00      	cmp	r2, #0
 801185a:	dd07      	ble.n	801186c <_dtoa_r+0xae4>
 801185c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011860:	d0ed      	beq.n	801183e <_dtoa_r+0xab6>
 8011862:	9a01      	ldr	r2, [sp, #4]
 8011864:	f109 0301 	add.w	r3, r9, #1
 8011868:	7013      	strb	r3, [r2, #0]
 801186a:	e73d      	b.n	80116e8 <_dtoa_r+0x960>
 801186c:	9b04      	ldr	r3, [sp, #16]
 801186e:	9a08      	ldr	r2, [sp, #32]
 8011870:	f803 9c01 	strb.w	r9, [r3, #-1]
 8011874:	4293      	cmp	r3, r2
 8011876:	d043      	beq.n	8011900 <_dtoa_r+0xb78>
 8011878:	4651      	mov	r1, sl
 801187a:	2300      	movs	r3, #0
 801187c:	220a      	movs	r2, #10
 801187e:	4620      	mov	r0, r4
 8011880:	f000 f9d6 	bl	8011c30 <__multadd>
 8011884:	45b8      	cmp	r8, r7
 8011886:	4682      	mov	sl, r0
 8011888:	f04f 0300 	mov.w	r3, #0
 801188c:	f04f 020a 	mov.w	r2, #10
 8011890:	4641      	mov	r1, r8
 8011892:	4620      	mov	r0, r4
 8011894:	d107      	bne.n	80118a6 <_dtoa_r+0xb1e>
 8011896:	f000 f9cb 	bl	8011c30 <__multadd>
 801189a:	4680      	mov	r8, r0
 801189c:	4607      	mov	r7, r0
 801189e:	9b04      	ldr	r3, [sp, #16]
 80118a0:	3301      	adds	r3, #1
 80118a2:	9304      	str	r3, [sp, #16]
 80118a4:	e775      	b.n	8011792 <_dtoa_r+0xa0a>
 80118a6:	f000 f9c3 	bl	8011c30 <__multadd>
 80118aa:	4639      	mov	r1, r7
 80118ac:	4680      	mov	r8, r0
 80118ae:	2300      	movs	r3, #0
 80118b0:	220a      	movs	r2, #10
 80118b2:	4620      	mov	r0, r4
 80118b4:	f000 f9bc 	bl	8011c30 <__multadd>
 80118b8:	4607      	mov	r7, r0
 80118ba:	e7f0      	b.n	801189e <_dtoa_r+0xb16>
 80118bc:	9b04      	ldr	r3, [sp, #16]
 80118be:	9301      	str	r3, [sp, #4]
 80118c0:	9d00      	ldr	r5, [sp, #0]
 80118c2:	4631      	mov	r1, r6
 80118c4:	4650      	mov	r0, sl
 80118c6:	f7ff f9d7 	bl	8010c78 <quorem>
 80118ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80118ce:	9b00      	ldr	r3, [sp, #0]
 80118d0:	f805 9b01 	strb.w	r9, [r5], #1
 80118d4:	1aea      	subs	r2, r5, r3
 80118d6:	9b01      	ldr	r3, [sp, #4]
 80118d8:	4293      	cmp	r3, r2
 80118da:	dd07      	ble.n	80118ec <_dtoa_r+0xb64>
 80118dc:	4651      	mov	r1, sl
 80118de:	2300      	movs	r3, #0
 80118e0:	220a      	movs	r2, #10
 80118e2:	4620      	mov	r0, r4
 80118e4:	f000 f9a4 	bl	8011c30 <__multadd>
 80118e8:	4682      	mov	sl, r0
 80118ea:	e7ea      	b.n	80118c2 <_dtoa_r+0xb3a>
 80118ec:	9b01      	ldr	r3, [sp, #4]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	bfc8      	it	gt
 80118f2:	461d      	movgt	r5, r3
 80118f4:	9b00      	ldr	r3, [sp, #0]
 80118f6:	bfd8      	it	le
 80118f8:	2501      	movle	r5, #1
 80118fa:	441d      	add	r5, r3
 80118fc:	f04f 0800 	mov.w	r8, #0
 8011900:	4651      	mov	r1, sl
 8011902:	2201      	movs	r2, #1
 8011904:	4620      	mov	r0, r4
 8011906:	f000 fb41 	bl	8011f8c <__lshift>
 801190a:	4631      	mov	r1, r6
 801190c:	4682      	mov	sl, r0
 801190e:	f000 fba9 	bl	8012064 <__mcmp>
 8011912:	2800      	cmp	r0, #0
 8011914:	dc96      	bgt.n	8011844 <_dtoa_r+0xabc>
 8011916:	d102      	bne.n	801191e <_dtoa_r+0xb96>
 8011918:	f019 0f01 	tst.w	r9, #1
 801191c:	d192      	bne.n	8011844 <_dtoa_r+0xabc>
 801191e:	462b      	mov	r3, r5
 8011920:	461d      	mov	r5, r3
 8011922:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011926:	2a30      	cmp	r2, #48	; 0x30
 8011928:	d0fa      	beq.n	8011920 <_dtoa_r+0xb98>
 801192a:	e6dd      	b.n	80116e8 <_dtoa_r+0x960>
 801192c:	9a00      	ldr	r2, [sp, #0]
 801192e:	429a      	cmp	r2, r3
 8011930:	d189      	bne.n	8011846 <_dtoa_r+0xabe>
 8011932:	f10b 0b01 	add.w	fp, fp, #1
 8011936:	2331      	movs	r3, #49	; 0x31
 8011938:	e796      	b.n	8011868 <_dtoa_r+0xae0>
 801193a:	4b0a      	ldr	r3, [pc, #40]	; (8011964 <_dtoa_r+0xbdc>)
 801193c:	f7ff ba99 	b.w	8010e72 <_dtoa_r+0xea>
 8011940:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011942:	2b00      	cmp	r3, #0
 8011944:	f47f aa6d 	bne.w	8010e22 <_dtoa_r+0x9a>
 8011948:	4b07      	ldr	r3, [pc, #28]	; (8011968 <_dtoa_r+0xbe0>)
 801194a:	f7ff ba92 	b.w	8010e72 <_dtoa_r+0xea>
 801194e:	9b01      	ldr	r3, [sp, #4]
 8011950:	2b00      	cmp	r3, #0
 8011952:	dcb5      	bgt.n	80118c0 <_dtoa_r+0xb38>
 8011954:	9b07      	ldr	r3, [sp, #28]
 8011956:	2b02      	cmp	r3, #2
 8011958:	f73f aeb1 	bgt.w	80116be <_dtoa_r+0x936>
 801195c:	e7b0      	b.n	80118c0 <_dtoa_r+0xb38>
 801195e:	bf00      	nop
 8011960:	080162ef 	.word	0x080162ef
 8011964:	0801622a 	.word	0x0801622a
 8011968:	0801628a 	.word	0x0801628a

0801196c <_free_r>:
 801196c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801196e:	2900      	cmp	r1, #0
 8011970:	d044      	beq.n	80119fc <_free_r+0x90>
 8011972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011976:	9001      	str	r0, [sp, #4]
 8011978:	2b00      	cmp	r3, #0
 801197a:	f1a1 0404 	sub.w	r4, r1, #4
 801197e:	bfb8      	it	lt
 8011980:	18e4      	addlt	r4, r4, r3
 8011982:	f000 f8e7 	bl	8011b54 <__malloc_lock>
 8011986:	4a1e      	ldr	r2, [pc, #120]	; (8011a00 <_free_r+0x94>)
 8011988:	9801      	ldr	r0, [sp, #4]
 801198a:	6813      	ldr	r3, [r2, #0]
 801198c:	b933      	cbnz	r3, 801199c <_free_r+0x30>
 801198e:	6063      	str	r3, [r4, #4]
 8011990:	6014      	str	r4, [r2, #0]
 8011992:	b003      	add	sp, #12
 8011994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011998:	f000 b8e2 	b.w	8011b60 <__malloc_unlock>
 801199c:	42a3      	cmp	r3, r4
 801199e:	d908      	bls.n	80119b2 <_free_r+0x46>
 80119a0:	6825      	ldr	r5, [r4, #0]
 80119a2:	1961      	adds	r1, r4, r5
 80119a4:	428b      	cmp	r3, r1
 80119a6:	bf01      	itttt	eq
 80119a8:	6819      	ldreq	r1, [r3, #0]
 80119aa:	685b      	ldreq	r3, [r3, #4]
 80119ac:	1949      	addeq	r1, r1, r5
 80119ae:	6021      	streq	r1, [r4, #0]
 80119b0:	e7ed      	b.n	801198e <_free_r+0x22>
 80119b2:	461a      	mov	r2, r3
 80119b4:	685b      	ldr	r3, [r3, #4]
 80119b6:	b10b      	cbz	r3, 80119bc <_free_r+0x50>
 80119b8:	42a3      	cmp	r3, r4
 80119ba:	d9fa      	bls.n	80119b2 <_free_r+0x46>
 80119bc:	6811      	ldr	r1, [r2, #0]
 80119be:	1855      	adds	r5, r2, r1
 80119c0:	42a5      	cmp	r5, r4
 80119c2:	d10b      	bne.n	80119dc <_free_r+0x70>
 80119c4:	6824      	ldr	r4, [r4, #0]
 80119c6:	4421      	add	r1, r4
 80119c8:	1854      	adds	r4, r2, r1
 80119ca:	42a3      	cmp	r3, r4
 80119cc:	6011      	str	r1, [r2, #0]
 80119ce:	d1e0      	bne.n	8011992 <_free_r+0x26>
 80119d0:	681c      	ldr	r4, [r3, #0]
 80119d2:	685b      	ldr	r3, [r3, #4]
 80119d4:	6053      	str	r3, [r2, #4]
 80119d6:	440c      	add	r4, r1
 80119d8:	6014      	str	r4, [r2, #0]
 80119da:	e7da      	b.n	8011992 <_free_r+0x26>
 80119dc:	d902      	bls.n	80119e4 <_free_r+0x78>
 80119de:	230c      	movs	r3, #12
 80119e0:	6003      	str	r3, [r0, #0]
 80119e2:	e7d6      	b.n	8011992 <_free_r+0x26>
 80119e4:	6825      	ldr	r5, [r4, #0]
 80119e6:	1961      	adds	r1, r4, r5
 80119e8:	428b      	cmp	r3, r1
 80119ea:	bf04      	itt	eq
 80119ec:	6819      	ldreq	r1, [r3, #0]
 80119ee:	685b      	ldreq	r3, [r3, #4]
 80119f0:	6063      	str	r3, [r4, #4]
 80119f2:	bf04      	itt	eq
 80119f4:	1949      	addeq	r1, r1, r5
 80119f6:	6021      	streq	r1, [r4, #0]
 80119f8:	6054      	str	r4, [r2, #4]
 80119fa:	e7ca      	b.n	8011992 <_free_r+0x26>
 80119fc:	b003      	add	sp, #12
 80119fe:	bd30      	pop	{r4, r5, pc}
 8011a00:	20000ae8 	.word	0x20000ae8

08011a04 <malloc>:
 8011a04:	4b02      	ldr	r3, [pc, #8]	; (8011a10 <malloc+0xc>)
 8011a06:	4601      	mov	r1, r0
 8011a08:	6818      	ldr	r0, [r3, #0]
 8011a0a:	f000 b823 	b.w	8011a54 <_malloc_r>
 8011a0e:	bf00      	nop
 8011a10:	2000008c 	.word	0x2000008c

08011a14 <sbrk_aligned>:
 8011a14:	b570      	push	{r4, r5, r6, lr}
 8011a16:	4e0e      	ldr	r6, [pc, #56]	; (8011a50 <sbrk_aligned+0x3c>)
 8011a18:	460c      	mov	r4, r1
 8011a1a:	6831      	ldr	r1, [r6, #0]
 8011a1c:	4605      	mov	r5, r0
 8011a1e:	b911      	cbnz	r1, 8011a26 <sbrk_aligned+0x12>
 8011a20:	f001 f812 	bl	8012a48 <_sbrk_r>
 8011a24:	6030      	str	r0, [r6, #0]
 8011a26:	4621      	mov	r1, r4
 8011a28:	4628      	mov	r0, r5
 8011a2a:	f001 f80d 	bl	8012a48 <_sbrk_r>
 8011a2e:	1c43      	adds	r3, r0, #1
 8011a30:	d00a      	beq.n	8011a48 <sbrk_aligned+0x34>
 8011a32:	1cc4      	adds	r4, r0, #3
 8011a34:	f024 0403 	bic.w	r4, r4, #3
 8011a38:	42a0      	cmp	r0, r4
 8011a3a:	d007      	beq.n	8011a4c <sbrk_aligned+0x38>
 8011a3c:	1a21      	subs	r1, r4, r0
 8011a3e:	4628      	mov	r0, r5
 8011a40:	f001 f802 	bl	8012a48 <_sbrk_r>
 8011a44:	3001      	adds	r0, #1
 8011a46:	d101      	bne.n	8011a4c <sbrk_aligned+0x38>
 8011a48:	f04f 34ff 	mov.w	r4, #4294967295
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	bd70      	pop	{r4, r5, r6, pc}
 8011a50:	20000aec 	.word	0x20000aec

08011a54 <_malloc_r>:
 8011a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a58:	1ccd      	adds	r5, r1, #3
 8011a5a:	f025 0503 	bic.w	r5, r5, #3
 8011a5e:	3508      	adds	r5, #8
 8011a60:	2d0c      	cmp	r5, #12
 8011a62:	bf38      	it	cc
 8011a64:	250c      	movcc	r5, #12
 8011a66:	2d00      	cmp	r5, #0
 8011a68:	4607      	mov	r7, r0
 8011a6a:	db01      	blt.n	8011a70 <_malloc_r+0x1c>
 8011a6c:	42a9      	cmp	r1, r5
 8011a6e:	d905      	bls.n	8011a7c <_malloc_r+0x28>
 8011a70:	230c      	movs	r3, #12
 8011a72:	603b      	str	r3, [r7, #0]
 8011a74:	2600      	movs	r6, #0
 8011a76:	4630      	mov	r0, r6
 8011a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011b50 <_malloc_r+0xfc>
 8011a80:	f000 f868 	bl	8011b54 <__malloc_lock>
 8011a84:	f8d8 3000 	ldr.w	r3, [r8]
 8011a88:	461c      	mov	r4, r3
 8011a8a:	bb5c      	cbnz	r4, 8011ae4 <_malloc_r+0x90>
 8011a8c:	4629      	mov	r1, r5
 8011a8e:	4638      	mov	r0, r7
 8011a90:	f7ff ffc0 	bl	8011a14 <sbrk_aligned>
 8011a94:	1c43      	adds	r3, r0, #1
 8011a96:	4604      	mov	r4, r0
 8011a98:	d155      	bne.n	8011b46 <_malloc_r+0xf2>
 8011a9a:	f8d8 4000 	ldr.w	r4, [r8]
 8011a9e:	4626      	mov	r6, r4
 8011aa0:	2e00      	cmp	r6, #0
 8011aa2:	d145      	bne.n	8011b30 <_malloc_r+0xdc>
 8011aa4:	2c00      	cmp	r4, #0
 8011aa6:	d048      	beq.n	8011b3a <_malloc_r+0xe6>
 8011aa8:	6823      	ldr	r3, [r4, #0]
 8011aaa:	4631      	mov	r1, r6
 8011aac:	4638      	mov	r0, r7
 8011aae:	eb04 0903 	add.w	r9, r4, r3
 8011ab2:	f000 ffc9 	bl	8012a48 <_sbrk_r>
 8011ab6:	4581      	cmp	r9, r0
 8011ab8:	d13f      	bne.n	8011b3a <_malloc_r+0xe6>
 8011aba:	6821      	ldr	r1, [r4, #0]
 8011abc:	1a6d      	subs	r5, r5, r1
 8011abe:	4629      	mov	r1, r5
 8011ac0:	4638      	mov	r0, r7
 8011ac2:	f7ff ffa7 	bl	8011a14 <sbrk_aligned>
 8011ac6:	3001      	adds	r0, #1
 8011ac8:	d037      	beq.n	8011b3a <_malloc_r+0xe6>
 8011aca:	6823      	ldr	r3, [r4, #0]
 8011acc:	442b      	add	r3, r5
 8011ace:	6023      	str	r3, [r4, #0]
 8011ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d038      	beq.n	8011b4a <_malloc_r+0xf6>
 8011ad8:	685a      	ldr	r2, [r3, #4]
 8011ada:	42a2      	cmp	r2, r4
 8011adc:	d12b      	bne.n	8011b36 <_malloc_r+0xe2>
 8011ade:	2200      	movs	r2, #0
 8011ae0:	605a      	str	r2, [r3, #4]
 8011ae2:	e00f      	b.n	8011b04 <_malloc_r+0xb0>
 8011ae4:	6822      	ldr	r2, [r4, #0]
 8011ae6:	1b52      	subs	r2, r2, r5
 8011ae8:	d41f      	bmi.n	8011b2a <_malloc_r+0xd6>
 8011aea:	2a0b      	cmp	r2, #11
 8011aec:	d917      	bls.n	8011b1e <_malloc_r+0xca>
 8011aee:	1961      	adds	r1, r4, r5
 8011af0:	42a3      	cmp	r3, r4
 8011af2:	6025      	str	r5, [r4, #0]
 8011af4:	bf18      	it	ne
 8011af6:	6059      	strne	r1, [r3, #4]
 8011af8:	6863      	ldr	r3, [r4, #4]
 8011afa:	bf08      	it	eq
 8011afc:	f8c8 1000 	streq.w	r1, [r8]
 8011b00:	5162      	str	r2, [r4, r5]
 8011b02:	604b      	str	r3, [r1, #4]
 8011b04:	4638      	mov	r0, r7
 8011b06:	f104 060b 	add.w	r6, r4, #11
 8011b0a:	f000 f829 	bl	8011b60 <__malloc_unlock>
 8011b0e:	f026 0607 	bic.w	r6, r6, #7
 8011b12:	1d23      	adds	r3, r4, #4
 8011b14:	1af2      	subs	r2, r6, r3
 8011b16:	d0ae      	beq.n	8011a76 <_malloc_r+0x22>
 8011b18:	1b9b      	subs	r3, r3, r6
 8011b1a:	50a3      	str	r3, [r4, r2]
 8011b1c:	e7ab      	b.n	8011a76 <_malloc_r+0x22>
 8011b1e:	42a3      	cmp	r3, r4
 8011b20:	6862      	ldr	r2, [r4, #4]
 8011b22:	d1dd      	bne.n	8011ae0 <_malloc_r+0x8c>
 8011b24:	f8c8 2000 	str.w	r2, [r8]
 8011b28:	e7ec      	b.n	8011b04 <_malloc_r+0xb0>
 8011b2a:	4623      	mov	r3, r4
 8011b2c:	6864      	ldr	r4, [r4, #4]
 8011b2e:	e7ac      	b.n	8011a8a <_malloc_r+0x36>
 8011b30:	4634      	mov	r4, r6
 8011b32:	6876      	ldr	r6, [r6, #4]
 8011b34:	e7b4      	b.n	8011aa0 <_malloc_r+0x4c>
 8011b36:	4613      	mov	r3, r2
 8011b38:	e7cc      	b.n	8011ad4 <_malloc_r+0x80>
 8011b3a:	230c      	movs	r3, #12
 8011b3c:	603b      	str	r3, [r7, #0]
 8011b3e:	4638      	mov	r0, r7
 8011b40:	f000 f80e 	bl	8011b60 <__malloc_unlock>
 8011b44:	e797      	b.n	8011a76 <_malloc_r+0x22>
 8011b46:	6025      	str	r5, [r4, #0]
 8011b48:	e7dc      	b.n	8011b04 <_malloc_r+0xb0>
 8011b4a:	605b      	str	r3, [r3, #4]
 8011b4c:	deff      	udf	#255	; 0xff
 8011b4e:	bf00      	nop
 8011b50:	20000ae8 	.word	0x20000ae8

08011b54 <__malloc_lock>:
 8011b54:	4801      	ldr	r0, [pc, #4]	; (8011b5c <__malloc_lock+0x8>)
 8011b56:	f7ff b860 	b.w	8010c1a <__retarget_lock_acquire_recursive>
 8011b5a:	bf00      	nop
 8011b5c:	20000ae4 	.word	0x20000ae4

08011b60 <__malloc_unlock>:
 8011b60:	4801      	ldr	r0, [pc, #4]	; (8011b68 <__malloc_unlock+0x8>)
 8011b62:	f7ff b85b 	b.w	8010c1c <__retarget_lock_release_recursive>
 8011b66:	bf00      	nop
 8011b68:	20000ae4 	.word	0x20000ae4

08011b6c <_Balloc>:
 8011b6c:	b570      	push	{r4, r5, r6, lr}
 8011b6e:	69c6      	ldr	r6, [r0, #28]
 8011b70:	4604      	mov	r4, r0
 8011b72:	460d      	mov	r5, r1
 8011b74:	b976      	cbnz	r6, 8011b94 <_Balloc+0x28>
 8011b76:	2010      	movs	r0, #16
 8011b78:	f7ff ff44 	bl	8011a04 <malloc>
 8011b7c:	4602      	mov	r2, r0
 8011b7e:	61e0      	str	r0, [r4, #28]
 8011b80:	b920      	cbnz	r0, 8011b8c <_Balloc+0x20>
 8011b82:	4b18      	ldr	r3, [pc, #96]	; (8011be4 <_Balloc+0x78>)
 8011b84:	4818      	ldr	r0, [pc, #96]	; (8011be8 <_Balloc+0x7c>)
 8011b86:	216b      	movs	r1, #107	; 0x6b
 8011b88:	f7ff f858 	bl	8010c3c <__assert_func>
 8011b8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011b90:	6006      	str	r6, [r0, #0]
 8011b92:	60c6      	str	r6, [r0, #12]
 8011b94:	69e6      	ldr	r6, [r4, #28]
 8011b96:	68f3      	ldr	r3, [r6, #12]
 8011b98:	b183      	cbz	r3, 8011bbc <_Balloc+0x50>
 8011b9a:	69e3      	ldr	r3, [r4, #28]
 8011b9c:	68db      	ldr	r3, [r3, #12]
 8011b9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011ba2:	b9b8      	cbnz	r0, 8011bd4 <_Balloc+0x68>
 8011ba4:	2101      	movs	r1, #1
 8011ba6:	fa01 f605 	lsl.w	r6, r1, r5
 8011baa:	1d72      	adds	r2, r6, #5
 8011bac:	0092      	lsls	r2, r2, #2
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f000 ff61 	bl	8012a76 <_calloc_r>
 8011bb4:	b160      	cbz	r0, 8011bd0 <_Balloc+0x64>
 8011bb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011bba:	e00e      	b.n	8011bda <_Balloc+0x6e>
 8011bbc:	2221      	movs	r2, #33	; 0x21
 8011bbe:	2104      	movs	r1, #4
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	f000 ff58 	bl	8012a76 <_calloc_r>
 8011bc6:	69e3      	ldr	r3, [r4, #28]
 8011bc8:	60f0      	str	r0, [r6, #12]
 8011bca:	68db      	ldr	r3, [r3, #12]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d1e4      	bne.n	8011b9a <_Balloc+0x2e>
 8011bd0:	2000      	movs	r0, #0
 8011bd2:	bd70      	pop	{r4, r5, r6, pc}
 8011bd4:	6802      	ldr	r2, [r0, #0]
 8011bd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011bda:	2300      	movs	r3, #0
 8011bdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011be0:	e7f7      	b.n	8011bd2 <_Balloc+0x66>
 8011be2:	bf00      	nop
 8011be4:	080160aa 	.word	0x080160aa
 8011be8:	08016300 	.word	0x08016300

08011bec <_Bfree>:
 8011bec:	b570      	push	{r4, r5, r6, lr}
 8011bee:	69c6      	ldr	r6, [r0, #28]
 8011bf0:	4605      	mov	r5, r0
 8011bf2:	460c      	mov	r4, r1
 8011bf4:	b976      	cbnz	r6, 8011c14 <_Bfree+0x28>
 8011bf6:	2010      	movs	r0, #16
 8011bf8:	f7ff ff04 	bl	8011a04 <malloc>
 8011bfc:	4602      	mov	r2, r0
 8011bfe:	61e8      	str	r0, [r5, #28]
 8011c00:	b920      	cbnz	r0, 8011c0c <_Bfree+0x20>
 8011c02:	4b09      	ldr	r3, [pc, #36]	; (8011c28 <_Bfree+0x3c>)
 8011c04:	4809      	ldr	r0, [pc, #36]	; (8011c2c <_Bfree+0x40>)
 8011c06:	218f      	movs	r1, #143	; 0x8f
 8011c08:	f7ff f818 	bl	8010c3c <__assert_func>
 8011c0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c10:	6006      	str	r6, [r0, #0]
 8011c12:	60c6      	str	r6, [r0, #12]
 8011c14:	b13c      	cbz	r4, 8011c26 <_Bfree+0x3a>
 8011c16:	69eb      	ldr	r3, [r5, #28]
 8011c18:	6862      	ldr	r2, [r4, #4]
 8011c1a:	68db      	ldr	r3, [r3, #12]
 8011c1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011c20:	6021      	str	r1, [r4, #0]
 8011c22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011c26:	bd70      	pop	{r4, r5, r6, pc}
 8011c28:	080160aa 	.word	0x080160aa
 8011c2c:	08016300 	.word	0x08016300

08011c30 <__multadd>:
 8011c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c34:	690d      	ldr	r5, [r1, #16]
 8011c36:	4607      	mov	r7, r0
 8011c38:	460c      	mov	r4, r1
 8011c3a:	461e      	mov	r6, r3
 8011c3c:	f101 0c14 	add.w	ip, r1, #20
 8011c40:	2000      	movs	r0, #0
 8011c42:	f8dc 3000 	ldr.w	r3, [ip]
 8011c46:	b299      	uxth	r1, r3
 8011c48:	fb02 6101 	mla	r1, r2, r1, r6
 8011c4c:	0c1e      	lsrs	r6, r3, #16
 8011c4e:	0c0b      	lsrs	r3, r1, #16
 8011c50:	fb02 3306 	mla	r3, r2, r6, r3
 8011c54:	b289      	uxth	r1, r1
 8011c56:	3001      	adds	r0, #1
 8011c58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011c5c:	4285      	cmp	r5, r0
 8011c5e:	f84c 1b04 	str.w	r1, [ip], #4
 8011c62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011c66:	dcec      	bgt.n	8011c42 <__multadd+0x12>
 8011c68:	b30e      	cbz	r6, 8011cae <__multadd+0x7e>
 8011c6a:	68a3      	ldr	r3, [r4, #8]
 8011c6c:	42ab      	cmp	r3, r5
 8011c6e:	dc19      	bgt.n	8011ca4 <__multadd+0x74>
 8011c70:	6861      	ldr	r1, [r4, #4]
 8011c72:	4638      	mov	r0, r7
 8011c74:	3101      	adds	r1, #1
 8011c76:	f7ff ff79 	bl	8011b6c <_Balloc>
 8011c7a:	4680      	mov	r8, r0
 8011c7c:	b928      	cbnz	r0, 8011c8a <__multadd+0x5a>
 8011c7e:	4602      	mov	r2, r0
 8011c80:	4b0c      	ldr	r3, [pc, #48]	; (8011cb4 <__multadd+0x84>)
 8011c82:	480d      	ldr	r0, [pc, #52]	; (8011cb8 <__multadd+0x88>)
 8011c84:	21ba      	movs	r1, #186	; 0xba
 8011c86:	f7fe ffd9 	bl	8010c3c <__assert_func>
 8011c8a:	6922      	ldr	r2, [r4, #16]
 8011c8c:	3202      	adds	r2, #2
 8011c8e:	f104 010c 	add.w	r1, r4, #12
 8011c92:	0092      	lsls	r2, r2, #2
 8011c94:	300c      	adds	r0, #12
 8011c96:	f7fe ffc2 	bl	8010c1e <memcpy>
 8011c9a:	4621      	mov	r1, r4
 8011c9c:	4638      	mov	r0, r7
 8011c9e:	f7ff ffa5 	bl	8011bec <_Bfree>
 8011ca2:	4644      	mov	r4, r8
 8011ca4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011ca8:	3501      	adds	r5, #1
 8011caa:	615e      	str	r6, [r3, #20]
 8011cac:	6125      	str	r5, [r4, #16]
 8011cae:	4620      	mov	r0, r4
 8011cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cb4:	080162ef 	.word	0x080162ef
 8011cb8:	08016300 	.word	0x08016300

08011cbc <__hi0bits>:
 8011cbc:	0c03      	lsrs	r3, r0, #16
 8011cbe:	041b      	lsls	r3, r3, #16
 8011cc0:	b9d3      	cbnz	r3, 8011cf8 <__hi0bits+0x3c>
 8011cc2:	0400      	lsls	r0, r0, #16
 8011cc4:	2310      	movs	r3, #16
 8011cc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011cca:	bf04      	itt	eq
 8011ccc:	0200      	lsleq	r0, r0, #8
 8011cce:	3308      	addeq	r3, #8
 8011cd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011cd4:	bf04      	itt	eq
 8011cd6:	0100      	lsleq	r0, r0, #4
 8011cd8:	3304      	addeq	r3, #4
 8011cda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011cde:	bf04      	itt	eq
 8011ce0:	0080      	lsleq	r0, r0, #2
 8011ce2:	3302      	addeq	r3, #2
 8011ce4:	2800      	cmp	r0, #0
 8011ce6:	db05      	blt.n	8011cf4 <__hi0bits+0x38>
 8011ce8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011cec:	f103 0301 	add.w	r3, r3, #1
 8011cf0:	bf08      	it	eq
 8011cf2:	2320      	moveq	r3, #32
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	4770      	bx	lr
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	e7e4      	b.n	8011cc6 <__hi0bits+0xa>

08011cfc <__lo0bits>:
 8011cfc:	6803      	ldr	r3, [r0, #0]
 8011cfe:	f013 0207 	ands.w	r2, r3, #7
 8011d02:	d00c      	beq.n	8011d1e <__lo0bits+0x22>
 8011d04:	07d9      	lsls	r1, r3, #31
 8011d06:	d422      	bmi.n	8011d4e <__lo0bits+0x52>
 8011d08:	079a      	lsls	r2, r3, #30
 8011d0a:	bf49      	itett	mi
 8011d0c:	085b      	lsrmi	r3, r3, #1
 8011d0e:	089b      	lsrpl	r3, r3, #2
 8011d10:	6003      	strmi	r3, [r0, #0]
 8011d12:	2201      	movmi	r2, #1
 8011d14:	bf5c      	itt	pl
 8011d16:	6003      	strpl	r3, [r0, #0]
 8011d18:	2202      	movpl	r2, #2
 8011d1a:	4610      	mov	r0, r2
 8011d1c:	4770      	bx	lr
 8011d1e:	b299      	uxth	r1, r3
 8011d20:	b909      	cbnz	r1, 8011d26 <__lo0bits+0x2a>
 8011d22:	0c1b      	lsrs	r3, r3, #16
 8011d24:	2210      	movs	r2, #16
 8011d26:	b2d9      	uxtb	r1, r3
 8011d28:	b909      	cbnz	r1, 8011d2e <__lo0bits+0x32>
 8011d2a:	3208      	adds	r2, #8
 8011d2c:	0a1b      	lsrs	r3, r3, #8
 8011d2e:	0719      	lsls	r1, r3, #28
 8011d30:	bf04      	itt	eq
 8011d32:	091b      	lsreq	r3, r3, #4
 8011d34:	3204      	addeq	r2, #4
 8011d36:	0799      	lsls	r1, r3, #30
 8011d38:	bf04      	itt	eq
 8011d3a:	089b      	lsreq	r3, r3, #2
 8011d3c:	3202      	addeq	r2, #2
 8011d3e:	07d9      	lsls	r1, r3, #31
 8011d40:	d403      	bmi.n	8011d4a <__lo0bits+0x4e>
 8011d42:	085b      	lsrs	r3, r3, #1
 8011d44:	f102 0201 	add.w	r2, r2, #1
 8011d48:	d003      	beq.n	8011d52 <__lo0bits+0x56>
 8011d4a:	6003      	str	r3, [r0, #0]
 8011d4c:	e7e5      	b.n	8011d1a <__lo0bits+0x1e>
 8011d4e:	2200      	movs	r2, #0
 8011d50:	e7e3      	b.n	8011d1a <__lo0bits+0x1e>
 8011d52:	2220      	movs	r2, #32
 8011d54:	e7e1      	b.n	8011d1a <__lo0bits+0x1e>
	...

08011d58 <__i2b>:
 8011d58:	b510      	push	{r4, lr}
 8011d5a:	460c      	mov	r4, r1
 8011d5c:	2101      	movs	r1, #1
 8011d5e:	f7ff ff05 	bl	8011b6c <_Balloc>
 8011d62:	4602      	mov	r2, r0
 8011d64:	b928      	cbnz	r0, 8011d72 <__i2b+0x1a>
 8011d66:	4b05      	ldr	r3, [pc, #20]	; (8011d7c <__i2b+0x24>)
 8011d68:	4805      	ldr	r0, [pc, #20]	; (8011d80 <__i2b+0x28>)
 8011d6a:	f240 1145 	movw	r1, #325	; 0x145
 8011d6e:	f7fe ff65 	bl	8010c3c <__assert_func>
 8011d72:	2301      	movs	r3, #1
 8011d74:	6144      	str	r4, [r0, #20]
 8011d76:	6103      	str	r3, [r0, #16]
 8011d78:	bd10      	pop	{r4, pc}
 8011d7a:	bf00      	nop
 8011d7c:	080162ef 	.word	0x080162ef
 8011d80:	08016300 	.word	0x08016300

08011d84 <__multiply>:
 8011d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d88:	4691      	mov	r9, r2
 8011d8a:	690a      	ldr	r2, [r1, #16]
 8011d8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011d90:	429a      	cmp	r2, r3
 8011d92:	bfb8      	it	lt
 8011d94:	460b      	movlt	r3, r1
 8011d96:	460c      	mov	r4, r1
 8011d98:	bfbc      	itt	lt
 8011d9a:	464c      	movlt	r4, r9
 8011d9c:	4699      	movlt	r9, r3
 8011d9e:	6927      	ldr	r7, [r4, #16]
 8011da0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011da4:	68a3      	ldr	r3, [r4, #8]
 8011da6:	6861      	ldr	r1, [r4, #4]
 8011da8:	eb07 060a 	add.w	r6, r7, sl
 8011dac:	42b3      	cmp	r3, r6
 8011dae:	b085      	sub	sp, #20
 8011db0:	bfb8      	it	lt
 8011db2:	3101      	addlt	r1, #1
 8011db4:	f7ff feda 	bl	8011b6c <_Balloc>
 8011db8:	b930      	cbnz	r0, 8011dc8 <__multiply+0x44>
 8011dba:	4602      	mov	r2, r0
 8011dbc:	4b44      	ldr	r3, [pc, #272]	; (8011ed0 <__multiply+0x14c>)
 8011dbe:	4845      	ldr	r0, [pc, #276]	; (8011ed4 <__multiply+0x150>)
 8011dc0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011dc4:	f7fe ff3a 	bl	8010c3c <__assert_func>
 8011dc8:	f100 0514 	add.w	r5, r0, #20
 8011dcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011dd0:	462b      	mov	r3, r5
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	4543      	cmp	r3, r8
 8011dd6:	d321      	bcc.n	8011e1c <__multiply+0x98>
 8011dd8:	f104 0314 	add.w	r3, r4, #20
 8011ddc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011de0:	f109 0314 	add.w	r3, r9, #20
 8011de4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011de8:	9202      	str	r2, [sp, #8]
 8011dea:	1b3a      	subs	r2, r7, r4
 8011dec:	3a15      	subs	r2, #21
 8011dee:	f022 0203 	bic.w	r2, r2, #3
 8011df2:	3204      	adds	r2, #4
 8011df4:	f104 0115 	add.w	r1, r4, #21
 8011df8:	428f      	cmp	r7, r1
 8011dfa:	bf38      	it	cc
 8011dfc:	2204      	movcc	r2, #4
 8011dfe:	9201      	str	r2, [sp, #4]
 8011e00:	9a02      	ldr	r2, [sp, #8]
 8011e02:	9303      	str	r3, [sp, #12]
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d80c      	bhi.n	8011e22 <__multiply+0x9e>
 8011e08:	2e00      	cmp	r6, #0
 8011e0a:	dd03      	ble.n	8011e14 <__multiply+0x90>
 8011e0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d05b      	beq.n	8011ecc <__multiply+0x148>
 8011e14:	6106      	str	r6, [r0, #16]
 8011e16:	b005      	add	sp, #20
 8011e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e1c:	f843 2b04 	str.w	r2, [r3], #4
 8011e20:	e7d8      	b.n	8011dd4 <__multiply+0x50>
 8011e22:	f8b3 a000 	ldrh.w	sl, [r3]
 8011e26:	f1ba 0f00 	cmp.w	sl, #0
 8011e2a:	d024      	beq.n	8011e76 <__multiply+0xf2>
 8011e2c:	f104 0e14 	add.w	lr, r4, #20
 8011e30:	46a9      	mov	r9, r5
 8011e32:	f04f 0c00 	mov.w	ip, #0
 8011e36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011e3a:	f8d9 1000 	ldr.w	r1, [r9]
 8011e3e:	fa1f fb82 	uxth.w	fp, r2
 8011e42:	b289      	uxth	r1, r1
 8011e44:	fb0a 110b 	mla	r1, sl, fp, r1
 8011e48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011e4c:	f8d9 2000 	ldr.w	r2, [r9]
 8011e50:	4461      	add	r1, ip
 8011e52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011e56:	fb0a c20b 	mla	r2, sl, fp, ip
 8011e5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011e5e:	b289      	uxth	r1, r1
 8011e60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011e64:	4577      	cmp	r7, lr
 8011e66:	f849 1b04 	str.w	r1, [r9], #4
 8011e6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011e6e:	d8e2      	bhi.n	8011e36 <__multiply+0xb2>
 8011e70:	9a01      	ldr	r2, [sp, #4]
 8011e72:	f845 c002 	str.w	ip, [r5, r2]
 8011e76:	9a03      	ldr	r2, [sp, #12]
 8011e78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011e7c:	3304      	adds	r3, #4
 8011e7e:	f1b9 0f00 	cmp.w	r9, #0
 8011e82:	d021      	beq.n	8011ec8 <__multiply+0x144>
 8011e84:	6829      	ldr	r1, [r5, #0]
 8011e86:	f104 0c14 	add.w	ip, r4, #20
 8011e8a:	46ae      	mov	lr, r5
 8011e8c:	f04f 0a00 	mov.w	sl, #0
 8011e90:	f8bc b000 	ldrh.w	fp, [ip]
 8011e94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011e98:	fb09 220b 	mla	r2, r9, fp, r2
 8011e9c:	4452      	add	r2, sl
 8011e9e:	b289      	uxth	r1, r1
 8011ea0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011ea4:	f84e 1b04 	str.w	r1, [lr], #4
 8011ea8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011eac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011eb0:	f8be 1000 	ldrh.w	r1, [lr]
 8011eb4:	fb09 110a 	mla	r1, r9, sl, r1
 8011eb8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011ebc:	4567      	cmp	r7, ip
 8011ebe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011ec2:	d8e5      	bhi.n	8011e90 <__multiply+0x10c>
 8011ec4:	9a01      	ldr	r2, [sp, #4]
 8011ec6:	50a9      	str	r1, [r5, r2]
 8011ec8:	3504      	adds	r5, #4
 8011eca:	e799      	b.n	8011e00 <__multiply+0x7c>
 8011ecc:	3e01      	subs	r6, #1
 8011ece:	e79b      	b.n	8011e08 <__multiply+0x84>
 8011ed0:	080162ef 	.word	0x080162ef
 8011ed4:	08016300 	.word	0x08016300

08011ed8 <__pow5mult>:
 8011ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011edc:	4615      	mov	r5, r2
 8011ede:	f012 0203 	ands.w	r2, r2, #3
 8011ee2:	4606      	mov	r6, r0
 8011ee4:	460f      	mov	r7, r1
 8011ee6:	d007      	beq.n	8011ef8 <__pow5mult+0x20>
 8011ee8:	4c25      	ldr	r4, [pc, #148]	; (8011f80 <__pow5mult+0xa8>)
 8011eea:	3a01      	subs	r2, #1
 8011eec:	2300      	movs	r3, #0
 8011eee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011ef2:	f7ff fe9d 	bl	8011c30 <__multadd>
 8011ef6:	4607      	mov	r7, r0
 8011ef8:	10ad      	asrs	r5, r5, #2
 8011efa:	d03d      	beq.n	8011f78 <__pow5mult+0xa0>
 8011efc:	69f4      	ldr	r4, [r6, #28]
 8011efe:	b97c      	cbnz	r4, 8011f20 <__pow5mult+0x48>
 8011f00:	2010      	movs	r0, #16
 8011f02:	f7ff fd7f 	bl	8011a04 <malloc>
 8011f06:	4602      	mov	r2, r0
 8011f08:	61f0      	str	r0, [r6, #28]
 8011f0a:	b928      	cbnz	r0, 8011f18 <__pow5mult+0x40>
 8011f0c:	4b1d      	ldr	r3, [pc, #116]	; (8011f84 <__pow5mult+0xac>)
 8011f0e:	481e      	ldr	r0, [pc, #120]	; (8011f88 <__pow5mult+0xb0>)
 8011f10:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011f14:	f7fe fe92 	bl	8010c3c <__assert_func>
 8011f18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011f1c:	6004      	str	r4, [r0, #0]
 8011f1e:	60c4      	str	r4, [r0, #12]
 8011f20:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011f24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011f28:	b94c      	cbnz	r4, 8011f3e <__pow5mult+0x66>
 8011f2a:	f240 2171 	movw	r1, #625	; 0x271
 8011f2e:	4630      	mov	r0, r6
 8011f30:	f7ff ff12 	bl	8011d58 <__i2b>
 8011f34:	2300      	movs	r3, #0
 8011f36:	f8c8 0008 	str.w	r0, [r8, #8]
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	6003      	str	r3, [r0, #0]
 8011f3e:	f04f 0900 	mov.w	r9, #0
 8011f42:	07eb      	lsls	r3, r5, #31
 8011f44:	d50a      	bpl.n	8011f5c <__pow5mult+0x84>
 8011f46:	4639      	mov	r1, r7
 8011f48:	4622      	mov	r2, r4
 8011f4a:	4630      	mov	r0, r6
 8011f4c:	f7ff ff1a 	bl	8011d84 <__multiply>
 8011f50:	4639      	mov	r1, r7
 8011f52:	4680      	mov	r8, r0
 8011f54:	4630      	mov	r0, r6
 8011f56:	f7ff fe49 	bl	8011bec <_Bfree>
 8011f5a:	4647      	mov	r7, r8
 8011f5c:	106d      	asrs	r5, r5, #1
 8011f5e:	d00b      	beq.n	8011f78 <__pow5mult+0xa0>
 8011f60:	6820      	ldr	r0, [r4, #0]
 8011f62:	b938      	cbnz	r0, 8011f74 <__pow5mult+0x9c>
 8011f64:	4622      	mov	r2, r4
 8011f66:	4621      	mov	r1, r4
 8011f68:	4630      	mov	r0, r6
 8011f6a:	f7ff ff0b 	bl	8011d84 <__multiply>
 8011f6e:	6020      	str	r0, [r4, #0]
 8011f70:	f8c0 9000 	str.w	r9, [r0]
 8011f74:	4604      	mov	r4, r0
 8011f76:	e7e4      	b.n	8011f42 <__pow5mult+0x6a>
 8011f78:	4638      	mov	r0, r7
 8011f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f7e:	bf00      	nop
 8011f80:	08016450 	.word	0x08016450
 8011f84:	080160aa 	.word	0x080160aa
 8011f88:	08016300 	.word	0x08016300

08011f8c <__lshift>:
 8011f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f90:	460c      	mov	r4, r1
 8011f92:	6849      	ldr	r1, [r1, #4]
 8011f94:	6923      	ldr	r3, [r4, #16]
 8011f96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011f9a:	68a3      	ldr	r3, [r4, #8]
 8011f9c:	4607      	mov	r7, r0
 8011f9e:	4691      	mov	r9, r2
 8011fa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011fa4:	f108 0601 	add.w	r6, r8, #1
 8011fa8:	42b3      	cmp	r3, r6
 8011faa:	db0b      	blt.n	8011fc4 <__lshift+0x38>
 8011fac:	4638      	mov	r0, r7
 8011fae:	f7ff fddd 	bl	8011b6c <_Balloc>
 8011fb2:	4605      	mov	r5, r0
 8011fb4:	b948      	cbnz	r0, 8011fca <__lshift+0x3e>
 8011fb6:	4602      	mov	r2, r0
 8011fb8:	4b28      	ldr	r3, [pc, #160]	; (801205c <__lshift+0xd0>)
 8011fba:	4829      	ldr	r0, [pc, #164]	; (8012060 <__lshift+0xd4>)
 8011fbc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011fc0:	f7fe fe3c 	bl	8010c3c <__assert_func>
 8011fc4:	3101      	adds	r1, #1
 8011fc6:	005b      	lsls	r3, r3, #1
 8011fc8:	e7ee      	b.n	8011fa8 <__lshift+0x1c>
 8011fca:	2300      	movs	r3, #0
 8011fcc:	f100 0114 	add.w	r1, r0, #20
 8011fd0:	f100 0210 	add.w	r2, r0, #16
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	4553      	cmp	r3, sl
 8011fd8:	db33      	blt.n	8012042 <__lshift+0xb6>
 8011fda:	6920      	ldr	r0, [r4, #16]
 8011fdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011fe0:	f104 0314 	add.w	r3, r4, #20
 8011fe4:	f019 091f 	ands.w	r9, r9, #31
 8011fe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011fec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011ff0:	d02b      	beq.n	801204a <__lshift+0xbe>
 8011ff2:	f1c9 0e20 	rsb	lr, r9, #32
 8011ff6:	468a      	mov	sl, r1
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	6818      	ldr	r0, [r3, #0]
 8011ffc:	fa00 f009 	lsl.w	r0, r0, r9
 8012000:	4310      	orrs	r0, r2
 8012002:	f84a 0b04 	str.w	r0, [sl], #4
 8012006:	f853 2b04 	ldr.w	r2, [r3], #4
 801200a:	459c      	cmp	ip, r3
 801200c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012010:	d8f3      	bhi.n	8011ffa <__lshift+0x6e>
 8012012:	ebac 0304 	sub.w	r3, ip, r4
 8012016:	3b15      	subs	r3, #21
 8012018:	f023 0303 	bic.w	r3, r3, #3
 801201c:	3304      	adds	r3, #4
 801201e:	f104 0015 	add.w	r0, r4, #21
 8012022:	4584      	cmp	ip, r0
 8012024:	bf38      	it	cc
 8012026:	2304      	movcc	r3, #4
 8012028:	50ca      	str	r2, [r1, r3]
 801202a:	b10a      	cbz	r2, 8012030 <__lshift+0xa4>
 801202c:	f108 0602 	add.w	r6, r8, #2
 8012030:	3e01      	subs	r6, #1
 8012032:	4638      	mov	r0, r7
 8012034:	612e      	str	r6, [r5, #16]
 8012036:	4621      	mov	r1, r4
 8012038:	f7ff fdd8 	bl	8011bec <_Bfree>
 801203c:	4628      	mov	r0, r5
 801203e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012042:	f842 0f04 	str.w	r0, [r2, #4]!
 8012046:	3301      	adds	r3, #1
 8012048:	e7c5      	b.n	8011fd6 <__lshift+0x4a>
 801204a:	3904      	subs	r1, #4
 801204c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012050:	f841 2f04 	str.w	r2, [r1, #4]!
 8012054:	459c      	cmp	ip, r3
 8012056:	d8f9      	bhi.n	801204c <__lshift+0xc0>
 8012058:	e7ea      	b.n	8012030 <__lshift+0xa4>
 801205a:	bf00      	nop
 801205c:	080162ef 	.word	0x080162ef
 8012060:	08016300 	.word	0x08016300

08012064 <__mcmp>:
 8012064:	b530      	push	{r4, r5, lr}
 8012066:	6902      	ldr	r2, [r0, #16]
 8012068:	690c      	ldr	r4, [r1, #16]
 801206a:	1b12      	subs	r2, r2, r4
 801206c:	d10e      	bne.n	801208c <__mcmp+0x28>
 801206e:	f100 0314 	add.w	r3, r0, #20
 8012072:	3114      	adds	r1, #20
 8012074:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012078:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801207c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012080:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012084:	42a5      	cmp	r5, r4
 8012086:	d003      	beq.n	8012090 <__mcmp+0x2c>
 8012088:	d305      	bcc.n	8012096 <__mcmp+0x32>
 801208a:	2201      	movs	r2, #1
 801208c:	4610      	mov	r0, r2
 801208e:	bd30      	pop	{r4, r5, pc}
 8012090:	4283      	cmp	r3, r0
 8012092:	d3f3      	bcc.n	801207c <__mcmp+0x18>
 8012094:	e7fa      	b.n	801208c <__mcmp+0x28>
 8012096:	f04f 32ff 	mov.w	r2, #4294967295
 801209a:	e7f7      	b.n	801208c <__mcmp+0x28>

0801209c <__mdiff>:
 801209c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120a0:	460c      	mov	r4, r1
 80120a2:	4606      	mov	r6, r0
 80120a4:	4611      	mov	r1, r2
 80120a6:	4620      	mov	r0, r4
 80120a8:	4690      	mov	r8, r2
 80120aa:	f7ff ffdb 	bl	8012064 <__mcmp>
 80120ae:	1e05      	subs	r5, r0, #0
 80120b0:	d110      	bne.n	80120d4 <__mdiff+0x38>
 80120b2:	4629      	mov	r1, r5
 80120b4:	4630      	mov	r0, r6
 80120b6:	f7ff fd59 	bl	8011b6c <_Balloc>
 80120ba:	b930      	cbnz	r0, 80120ca <__mdiff+0x2e>
 80120bc:	4b3a      	ldr	r3, [pc, #232]	; (80121a8 <__mdiff+0x10c>)
 80120be:	4602      	mov	r2, r0
 80120c0:	f240 2137 	movw	r1, #567	; 0x237
 80120c4:	4839      	ldr	r0, [pc, #228]	; (80121ac <__mdiff+0x110>)
 80120c6:	f7fe fdb9 	bl	8010c3c <__assert_func>
 80120ca:	2301      	movs	r3, #1
 80120cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80120d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d4:	bfa4      	itt	ge
 80120d6:	4643      	movge	r3, r8
 80120d8:	46a0      	movge	r8, r4
 80120da:	4630      	mov	r0, r6
 80120dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80120e0:	bfa6      	itte	ge
 80120e2:	461c      	movge	r4, r3
 80120e4:	2500      	movge	r5, #0
 80120e6:	2501      	movlt	r5, #1
 80120e8:	f7ff fd40 	bl	8011b6c <_Balloc>
 80120ec:	b920      	cbnz	r0, 80120f8 <__mdiff+0x5c>
 80120ee:	4b2e      	ldr	r3, [pc, #184]	; (80121a8 <__mdiff+0x10c>)
 80120f0:	4602      	mov	r2, r0
 80120f2:	f240 2145 	movw	r1, #581	; 0x245
 80120f6:	e7e5      	b.n	80120c4 <__mdiff+0x28>
 80120f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80120fc:	6926      	ldr	r6, [r4, #16]
 80120fe:	60c5      	str	r5, [r0, #12]
 8012100:	f104 0914 	add.w	r9, r4, #20
 8012104:	f108 0514 	add.w	r5, r8, #20
 8012108:	f100 0e14 	add.w	lr, r0, #20
 801210c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012110:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012114:	f108 0210 	add.w	r2, r8, #16
 8012118:	46f2      	mov	sl, lr
 801211a:	2100      	movs	r1, #0
 801211c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012120:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012124:	fa11 f88b 	uxtah	r8, r1, fp
 8012128:	b299      	uxth	r1, r3
 801212a:	0c1b      	lsrs	r3, r3, #16
 801212c:	eba8 0801 	sub.w	r8, r8, r1
 8012130:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012134:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012138:	fa1f f888 	uxth.w	r8, r8
 801213c:	1419      	asrs	r1, r3, #16
 801213e:	454e      	cmp	r6, r9
 8012140:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012144:	f84a 3b04 	str.w	r3, [sl], #4
 8012148:	d8e8      	bhi.n	801211c <__mdiff+0x80>
 801214a:	1b33      	subs	r3, r6, r4
 801214c:	3b15      	subs	r3, #21
 801214e:	f023 0303 	bic.w	r3, r3, #3
 8012152:	3304      	adds	r3, #4
 8012154:	3415      	adds	r4, #21
 8012156:	42a6      	cmp	r6, r4
 8012158:	bf38      	it	cc
 801215a:	2304      	movcc	r3, #4
 801215c:	441d      	add	r5, r3
 801215e:	4473      	add	r3, lr
 8012160:	469e      	mov	lr, r3
 8012162:	462e      	mov	r6, r5
 8012164:	4566      	cmp	r6, ip
 8012166:	d30e      	bcc.n	8012186 <__mdiff+0xea>
 8012168:	f10c 0203 	add.w	r2, ip, #3
 801216c:	1b52      	subs	r2, r2, r5
 801216e:	f022 0203 	bic.w	r2, r2, #3
 8012172:	3d03      	subs	r5, #3
 8012174:	45ac      	cmp	ip, r5
 8012176:	bf38      	it	cc
 8012178:	2200      	movcc	r2, #0
 801217a:	4413      	add	r3, r2
 801217c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012180:	b17a      	cbz	r2, 80121a2 <__mdiff+0x106>
 8012182:	6107      	str	r7, [r0, #16]
 8012184:	e7a4      	b.n	80120d0 <__mdiff+0x34>
 8012186:	f856 8b04 	ldr.w	r8, [r6], #4
 801218a:	fa11 f288 	uxtah	r2, r1, r8
 801218e:	1414      	asrs	r4, r2, #16
 8012190:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012194:	b292      	uxth	r2, r2
 8012196:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801219a:	f84e 2b04 	str.w	r2, [lr], #4
 801219e:	1421      	asrs	r1, r4, #16
 80121a0:	e7e0      	b.n	8012164 <__mdiff+0xc8>
 80121a2:	3f01      	subs	r7, #1
 80121a4:	e7ea      	b.n	801217c <__mdiff+0xe0>
 80121a6:	bf00      	nop
 80121a8:	080162ef 	.word	0x080162ef
 80121ac:	08016300 	.word	0x08016300

080121b0 <__d2b>:
 80121b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80121b4:	460f      	mov	r7, r1
 80121b6:	2101      	movs	r1, #1
 80121b8:	ec59 8b10 	vmov	r8, r9, d0
 80121bc:	4616      	mov	r6, r2
 80121be:	f7ff fcd5 	bl	8011b6c <_Balloc>
 80121c2:	4604      	mov	r4, r0
 80121c4:	b930      	cbnz	r0, 80121d4 <__d2b+0x24>
 80121c6:	4602      	mov	r2, r0
 80121c8:	4b24      	ldr	r3, [pc, #144]	; (801225c <__d2b+0xac>)
 80121ca:	4825      	ldr	r0, [pc, #148]	; (8012260 <__d2b+0xb0>)
 80121cc:	f240 310f 	movw	r1, #783	; 0x30f
 80121d0:	f7fe fd34 	bl	8010c3c <__assert_func>
 80121d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80121d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80121dc:	bb2d      	cbnz	r5, 801222a <__d2b+0x7a>
 80121de:	9301      	str	r3, [sp, #4]
 80121e0:	f1b8 0300 	subs.w	r3, r8, #0
 80121e4:	d026      	beq.n	8012234 <__d2b+0x84>
 80121e6:	4668      	mov	r0, sp
 80121e8:	9300      	str	r3, [sp, #0]
 80121ea:	f7ff fd87 	bl	8011cfc <__lo0bits>
 80121ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80121f2:	b1e8      	cbz	r0, 8012230 <__d2b+0x80>
 80121f4:	f1c0 0320 	rsb	r3, r0, #32
 80121f8:	fa02 f303 	lsl.w	r3, r2, r3
 80121fc:	430b      	orrs	r3, r1
 80121fe:	40c2      	lsrs	r2, r0
 8012200:	6163      	str	r3, [r4, #20]
 8012202:	9201      	str	r2, [sp, #4]
 8012204:	9b01      	ldr	r3, [sp, #4]
 8012206:	61a3      	str	r3, [r4, #24]
 8012208:	2b00      	cmp	r3, #0
 801220a:	bf14      	ite	ne
 801220c:	2202      	movne	r2, #2
 801220e:	2201      	moveq	r2, #1
 8012210:	6122      	str	r2, [r4, #16]
 8012212:	b1bd      	cbz	r5, 8012244 <__d2b+0x94>
 8012214:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012218:	4405      	add	r5, r0
 801221a:	603d      	str	r5, [r7, #0]
 801221c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012220:	6030      	str	r0, [r6, #0]
 8012222:	4620      	mov	r0, r4
 8012224:	b003      	add	sp, #12
 8012226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801222a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801222e:	e7d6      	b.n	80121de <__d2b+0x2e>
 8012230:	6161      	str	r1, [r4, #20]
 8012232:	e7e7      	b.n	8012204 <__d2b+0x54>
 8012234:	a801      	add	r0, sp, #4
 8012236:	f7ff fd61 	bl	8011cfc <__lo0bits>
 801223a:	9b01      	ldr	r3, [sp, #4]
 801223c:	6163      	str	r3, [r4, #20]
 801223e:	3020      	adds	r0, #32
 8012240:	2201      	movs	r2, #1
 8012242:	e7e5      	b.n	8012210 <__d2b+0x60>
 8012244:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012248:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801224c:	6038      	str	r0, [r7, #0]
 801224e:	6918      	ldr	r0, [r3, #16]
 8012250:	f7ff fd34 	bl	8011cbc <__hi0bits>
 8012254:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012258:	e7e2      	b.n	8012220 <__d2b+0x70>
 801225a:	bf00      	nop
 801225c:	080162ef 	.word	0x080162ef
 8012260:	08016300 	.word	0x08016300

08012264 <__ssputs_r>:
 8012264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012268:	688e      	ldr	r6, [r1, #8]
 801226a:	461f      	mov	r7, r3
 801226c:	42be      	cmp	r6, r7
 801226e:	680b      	ldr	r3, [r1, #0]
 8012270:	4682      	mov	sl, r0
 8012272:	460c      	mov	r4, r1
 8012274:	4690      	mov	r8, r2
 8012276:	d82c      	bhi.n	80122d2 <__ssputs_r+0x6e>
 8012278:	898a      	ldrh	r2, [r1, #12]
 801227a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801227e:	d026      	beq.n	80122ce <__ssputs_r+0x6a>
 8012280:	6965      	ldr	r5, [r4, #20]
 8012282:	6909      	ldr	r1, [r1, #16]
 8012284:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012288:	eba3 0901 	sub.w	r9, r3, r1
 801228c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012290:	1c7b      	adds	r3, r7, #1
 8012292:	444b      	add	r3, r9
 8012294:	106d      	asrs	r5, r5, #1
 8012296:	429d      	cmp	r5, r3
 8012298:	bf38      	it	cc
 801229a:	461d      	movcc	r5, r3
 801229c:	0553      	lsls	r3, r2, #21
 801229e:	d527      	bpl.n	80122f0 <__ssputs_r+0x8c>
 80122a0:	4629      	mov	r1, r5
 80122a2:	f7ff fbd7 	bl	8011a54 <_malloc_r>
 80122a6:	4606      	mov	r6, r0
 80122a8:	b360      	cbz	r0, 8012304 <__ssputs_r+0xa0>
 80122aa:	6921      	ldr	r1, [r4, #16]
 80122ac:	464a      	mov	r2, r9
 80122ae:	f7fe fcb6 	bl	8010c1e <memcpy>
 80122b2:	89a3      	ldrh	r3, [r4, #12]
 80122b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80122b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122bc:	81a3      	strh	r3, [r4, #12]
 80122be:	6126      	str	r6, [r4, #16]
 80122c0:	6165      	str	r5, [r4, #20]
 80122c2:	444e      	add	r6, r9
 80122c4:	eba5 0509 	sub.w	r5, r5, r9
 80122c8:	6026      	str	r6, [r4, #0]
 80122ca:	60a5      	str	r5, [r4, #8]
 80122cc:	463e      	mov	r6, r7
 80122ce:	42be      	cmp	r6, r7
 80122d0:	d900      	bls.n	80122d4 <__ssputs_r+0x70>
 80122d2:	463e      	mov	r6, r7
 80122d4:	6820      	ldr	r0, [r4, #0]
 80122d6:	4632      	mov	r2, r6
 80122d8:	4641      	mov	r1, r8
 80122da:	f7fe fc0c 	bl	8010af6 <memmove>
 80122de:	68a3      	ldr	r3, [r4, #8]
 80122e0:	1b9b      	subs	r3, r3, r6
 80122e2:	60a3      	str	r3, [r4, #8]
 80122e4:	6823      	ldr	r3, [r4, #0]
 80122e6:	4433      	add	r3, r6
 80122e8:	6023      	str	r3, [r4, #0]
 80122ea:	2000      	movs	r0, #0
 80122ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122f0:	462a      	mov	r2, r5
 80122f2:	f000 fbe8 	bl	8012ac6 <_realloc_r>
 80122f6:	4606      	mov	r6, r0
 80122f8:	2800      	cmp	r0, #0
 80122fa:	d1e0      	bne.n	80122be <__ssputs_r+0x5a>
 80122fc:	6921      	ldr	r1, [r4, #16]
 80122fe:	4650      	mov	r0, sl
 8012300:	f7ff fb34 	bl	801196c <_free_r>
 8012304:	230c      	movs	r3, #12
 8012306:	f8ca 3000 	str.w	r3, [sl]
 801230a:	89a3      	ldrh	r3, [r4, #12]
 801230c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012310:	81a3      	strh	r3, [r4, #12]
 8012312:	f04f 30ff 	mov.w	r0, #4294967295
 8012316:	e7e9      	b.n	80122ec <__ssputs_r+0x88>

08012318 <_svfiprintf_r>:
 8012318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801231c:	4698      	mov	r8, r3
 801231e:	898b      	ldrh	r3, [r1, #12]
 8012320:	061b      	lsls	r3, r3, #24
 8012322:	b09d      	sub	sp, #116	; 0x74
 8012324:	4607      	mov	r7, r0
 8012326:	460d      	mov	r5, r1
 8012328:	4614      	mov	r4, r2
 801232a:	d50e      	bpl.n	801234a <_svfiprintf_r+0x32>
 801232c:	690b      	ldr	r3, [r1, #16]
 801232e:	b963      	cbnz	r3, 801234a <_svfiprintf_r+0x32>
 8012330:	2140      	movs	r1, #64	; 0x40
 8012332:	f7ff fb8f 	bl	8011a54 <_malloc_r>
 8012336:	6028      	str	r0, [r5, #0]
 8012338:	6128      	str	r0, [r5, #16]
 801233a:	b920      	cbnz	r0, 8012346 <_svfiprintf_r+0x2e>
 801233c:	230c      	movs	r3, #12
 801233e:	603b      	str	r3, [r7, #0]
 8012340:	f04f 30ff 	mov.w	r0, #4294967295
 8012344:	e0d0      	b.n	80124e8 <_svfiprintf_r+0x1d0>
 8012346:	2340      	movs	r3, #64	; 0x40
 8012348:	616b      	str	r3, [r5, #20]
 801234a:	2300      	movs	r3, #0
 801234c:	9309      	str	r3, [sp, #36]	; 0x24
 801234e:	2320      	movs	r3, #32
 8012350:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012354:	f8cd 800c 	str.w	r8, [sp, #12]
 8012358:	2330      	movs	r3, #48	; 0x30
 801235a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012500 <_svfiprintf_r+0x1e8>
 801235e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012362:	f04f 0901 	mov.w	r9, #1
 8012366:	4623      	mov	r3, r4
 8012368:	469a      	mov	sl, r3
 801236a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801236e:	b10a      	cbz	r2, 8012374 <_svfiprintf_r+0x5c>
 8012370:	2a25      	cmp	r2, #37	; 0x25
 8012372:	d1f9      	bne.n	8012368 <_svfiprintf_r+0x50>
 8012374:	ebba 0b04 	subs.w	fp, sl, r4
 8012378:	d00b      	beq.n	8012392 <_svfiprintf_r+0x7a>
 801237a:	465b      	mov	r3, fp
 801237c:	4622      	mov	r2, r4
 801237e:	4629      	mov	r1, r5
 8012380:	4638      	mov	r0, r7
 8012382:	f7ff ff6f 	bl	8012264 <__ssputs_r>
 8012386:	3001      	adds	r0, #1
 8012388:	f000 80a9 	beq.w	80124de <_svfiprintf_r+0x1c6>
 801238c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801238e:	445a      	add	r2, fp
 8012390:	9209      	str	r2, [sp, #36]	; 0x24
 8012392:	f89a 3000 	ldrb.w	r3, [sl]
 8012396:	2b00      	cmp	r3, #0
 8012398:	f000 80a1 	beq.w	80124de <_svfiprintf_r+0x1c6>
 801239c:	2300      	movs	r3, #0
 801239e:	f04f 32ff 	mov.w	r2, #4294967295
 80123a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123a6:	f10a 0a01 	add.w	sl, sl, #1
 80123aa:	9304      	str	r3, [sp, #16]
 80123ac:	9307      	str	r3, [sp, #28]
 80123ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80123b2:	931a      	str	r3, [sp, #104]	; 0x68
 80123b4:	4654      	mov	r4, sl
 80123b6:	2205      	movs	r2, #5
 80123b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123bc:	4850      	ldr	r0, [pc, #320]	; (8012500 <_svfiprintf_r+0x1e8>)
 80123be:	f7ed ff17 	bl	80001f0 <memchr>
 80123c2:	9a04      	ldr	r2, [sp, #16]
 80123c4:	b9d8      	cbnz	r0, 80123fe <_svfiprintf_r+0xe6>
 80123c6:	06d0      	lsls	r0, r2, #27
 80123c8:	bf44      	itt	mi
 80123ca:	2320      	movmi	r3, #32
 80123cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123d0:	0711      	lsls	r1, r2, #28
 80123d2:	bf44      	itt	mi
 80123d4:	232b      	movmi	r3, #43	; 0x2b
 80123d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123da:	f89a 3000 	ldrb.w	r3, [sl]
 80123de:	2b2a      	cmp	r3, #42	; 0x2a
 80123e0:	d015      	beq.n	801240e <_svfiprintf_r+0xf6>
 80123e2:	9a07      	ldr	r2, [sp, #28]
 80123e4:	4654      	mov	r4, sl
 80123e6:	2000      	movs	r0, #0
 80123e8:	f04f 0c0a 	mov.w	ip, #10
 80123ec:	4621      	mov	r1, r4
 80123ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80123f2:	3b30      	subs	r3, #48	; 0x30
 80123f4:	2b09      	cmp	r3, #9
 80123f6:	d94d      	bls.n	8012494 <_svfiprintf_r+0x17c>
 80123f8:	b1b0      	cbz	r0, 8012428 <_svfiprintf_r+0x110>
 80123fa:	9207      	str	r2, [sp, #28]
 80123fc:	e014      	b.n	8012428 <_svfiprintf_r+0x110>
 80123fe:	eba0 0308 	sub.w	r3, r0, r8
 8012402:	fa09 f303 	lsl.w	r3, r9, r3
 8012406:	4313      	orrs	r3, r2
 8012408:	9304      	str	r3, [sp, #16]
 801240a:	46a2      	mov	sl, r4
 801240c:	e7d2      	b.n	80123b4 <_svfiprintf_r+0x9c>
 801240e:	9b03      	ldr	r3, [sp, #12]
 8012410:	1d19      	adds	r1, r3, #4
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	9103      	str	r1, [sp, #12]
 8012416:	2b00      	cmp	r3, #0
 8012418:	bfbb      	ittet	lt
 801241a:	425b      	neglt	r3, r3
 801241c:	f042 0202 	orrlt.w	r2, r2, #2
 8012420:	9307      	strge	r3, [sp, #28]
 8012422:	9307      	strlt	r3, [sp, #28]
 8012424:	bfb8      	it	lt
 8012426:	9204      	strlt	r2, [sp, #16]
 8012428:	7823      	ldrb	r3, [r4, #0]
 801242a:	2b2e      	cmp	r3, #46	; 0x2e
 801242c:	d10c      	bne.n	8012448 <_svfiprintf_r+0x130>
 801242e:	7863      	ldrb	r3, [r4, #1]
 8012430:	2b2a      	cmp	r3, #42	; 0x2a
 8012432:	d134      	bne.n	801249e <_svfiprintf_r+0x186>
 8012434:	9b03      	ldr	r3, [sp, #12]
 8012436:	1d1a      	adds	r2, r3, #4
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	9203      	str	r2, [sp, #12]
 801243c:	2b00      	cmp	r3, #0
 801243e:	bfb8      	it	lt
 8012440:	f04f 33ff 	movlt.w	r3, #4294967295
 8012444:	3402      	adds	r4, #2
 8012446:	9305      	str	r3, [sp, #20]
 8012448:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012510 <_svfiprintf_r+0x1f8>
 801244c:	7821      	ldrb	r1, [r4, #0]
 801244e:	2203      	movs	r2, #3
 8012450:	4650      	mov	r0, sl
 8012452:	f7ed fecd 	bl	80001f0 <memchr>
 8012456:	b138      	cbz	r0, 8012468 <_svfiprintf_r+0x150>
 8012458:	9b04      	ldr	r3, [sp, #16]
 801245a:	eba0 000a 	sub.w	r0, r0, sl
 801245e:	2240      	movs	r2, #64	; 0x40
 8012460:	4082      	lsls	r2, r0
 8012462:	4313      	orrs	r3, r2
 8012464:	3401      	adds	r4, #1
 8012466:	9304      	str	r3, [sp, #16]
 8012468:	f814 1b01 	ldrb.w	r1, [r4], #1
 801246c:	4825      	ldr	r0, [pc, #148]	; (8012504 <_svfiprintf_r+0x1ec>)
 801246e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012472:	2206      	movs	r2, #6
 8012474:	f7ed febc 	bl	80001f0 <memchr>
 8012478:	2800      	cmp	r0, #0
 801247a:	d038      	beq.n	80124ee <_svfiprintf_r+0x1d6>
 801247c:	4b22      	ldr	r3, [pc, #136]	; (8012508 <_svfiprintf_r+0x1f0>)
 801247e:	bb1b      	cbnz	r3, 80124c8 <_svfiprintf_r+0x1b0>
 8012480:	9b03      	ldr	r3, [sp, #12]
 8012482:	3307      	adds	r3, #7
 8012484:	f023 0307 	bic.w	r3, r3, #7
 8012488:	3308      	adds	r3, #8
 801248a:	9303      	str	r3, [sp, #12]
 801248c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801248e:	4433      	add	r3, r6
 8012490:	9309      	str	r3, [sp, #36]	; 0x24
 8012492:	e768      	b.n	8012366 <_svfiprintf_r+0x4e>
 8012494:	fb0c 3202 	mla	r2, ip, r2, r3
 8012498:	460c      	mov	r4, r1
 801249a:	2001      	movs	r0, #1
 801249c:	e7a6      	b.n	80123ec <_svfiprintf_r+0xd4>
 801249e:	2300      	movs	r3, #0
 80124a0:	3401      	adds	r4, #1
 80124a2:	9305      	str	r3, [sp, #20]
 80124a4:	4619      	mov	r1, r3
 80124a6:	f04f 0c0a 	mov.w	ip, #10
 80124aa:	4620      	mov	r0, r4
 80124ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124b0:	3a30      	subs	r2, #48	; 0x30
 80124b2:	2a09      	cmp	r2, #9
 80124b4:	d903      	bls.n	80124be <_svfiprintf_r+0x1a6>
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d0c6      	beq.n	8012448 <_svfiprintf_r+0x130>
 80124ba:	9105      	str	r1, [sp, #20]
 80124bc:	e7c4      	b.n	8012448 <_svfiprintf_r+0x130>
 80124be:	fb0c 2101 	mla	r1, ip, r1, r2
 80124c2:	4604      	mov	r4, r0
 80124c4:	2301      	movs	r3, #1
 80124c6:	e7f0      	b.n	80124aa <_svfiprintf_r+0x192>
 80124c8:	ab03      	add	r3, sp, #12
 80124ca:	9300      	str	r3, [sp, #0]
 80124cc:	462a      	mov	r2, r5
 80124ce:	4b0f      	ldr	r3, [pc, #60]	; (801250c <_svfiprintf_r+0x1f4>)
 80124d0:	a904      	add	r1, sp, #16
 80124d2:	4638      	mov	r0, r7
 80124d4:	f7fd fe02 	bl	80100dc <_printf_float>
 80124d8:	1c42      	adds	r2, r0, #1
 80124da:	4606      	mov	r6, r0
 80124dc:	d1d6      	bne.n	801248c <_svfiprintf_r+0x174>
 80124de:	89ab      	ldrh	r3, [r5, #12]
 80124e0:	065b      	lsls	r3, r3, #25
 80124e2:	f53f af2d 	bmi.w	8012340 <_svfiprintf_r+0x28>
 80124e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80124e8:	b01d      	add	sp, #116	; 0x74
 80124ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ee:	ab03      	add	r3, sp, #12
 80124f0:	9300      	str	r3, [sp, #0]
 80124f2:	462a      	mov	r2, r5
 80124f4:	4b05      	ldr	r3, [pc, #20]	; (801250c <_svfiprintf_r+0x1f4>)
 80124f6:	a904      	add	r1, sp, #16
 80124f8:	4638      	mov	r0, r7
 80124fa:	f7fe f893 	bl	8010624 <_printf_i>
 80124fe:	e7eb      	b.n	80124d8 <_svfiprintf_r+0x1c0>
 8012500:	0801645c 	.word	0x0801645c
 8012504:	08016466 	.word	0x08016466
 8012508:	080100dd 	.word	0x080100dd
 801250c:	08012265 	.word	0x08012265
 8012510:	08016462 	.word	0x08016462

08012514 <__sfputc_r>:
 8012514:	6893      	ldr	r3, [r2, #8]
 8012516:	3b01      	subs	r3, #1
 8012518:	2b00      	cmp	r3, #0
 801251a:	b410      	push	{r4}
 801251c:	6093      	str	r3, [r2, #8]
 801251e:	da08      	bge.n	8012532 <__sfputc_r+0x1e>
 8012520:	6994      	ldr	r4, [r2, #24]
 8012522:	42a3      	cmp	r3, r4
 8012524:	db01      	blt.n	801252a <__sfputc_r+0x16>
 8012526:	290a      	cmp	r1, #10
 8012528:	d103      	bne.n	8012532 <__sfputc_r+0x1e>
 801252a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801252e:	f000 b9f5 	b.w	801291c <__swbuf_r>
 8012532:	6813      	ldr	r3, [r2, #0]
 8012534:	1c58      	adds	r0, r3, #1
 8012536:	6010      	str	r0, [r2, #0]
 8012538:	7019      	strb	r1, [r3, #0]
 801253a:	4608      	mov	r0, r1
 801253c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012540:	4770      	bx	lr

08012542 <__sfputs_r>:
 8012542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012544:	4606      	mov	r6, r0
 8012546:	460f      	mov	r7, r1
 8012548:	4614      	mov	r4, r2
 801254a:	18d5      	adds	r5, r2, r3
 801254c:	42ac      	cmp	r4, r5
 801254e:	d101      	bne.n	8012554 <__sfputs_r+0x12>
 8012550:	2000      	movs	r0, #0
 8012552:	e007      	b.n	8012564 <__sfputs_r+0x22>
 8012554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012558:	463a      	mov	r2, r7
 801255a:	4630      	mov	r0, r6
 801255c:	f7ff ffda 	bl	8012514 <__sfputc_r>
 8012560:	1c43      	adds	r3, r0, #1
 8012562:	d1f3      	bne.n	801254c <__sfputs_r+0xa>
 8012564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012568 <_vfiprintf_r>:
 8012568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801256c:	460d      	mov	r5, r1
 801256e:	b09d      	sub	sp, #116	; 0x74
 8012570:	4614      	mov	r4, r2
 8012572:	4698      	mov	r8, r3
 8012574:	4606      	mov	r6, r0
 8012576:	b118      	cbz	r0, 8012580 <_vfiprintf_r+0x18>
 8012578:	6a03      	ldr	r3, [r0, #32]
 801257a:	b90b      	cbnz	r3, 8012580 <_vfiprintf_r+0x18>
 801257c:	f7fe fa00 	bl	8010980 <__sinit>
 8012580:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012582:	07d9      	lsls	r1, r3, #31
 8012584:	d405      	bmi.n	8012592 <_vfiprintf_r+0x2a>
 8012586:	89ab      	ldrh	r3, [r5, #12]
 8012588:	059a      	lsls	r2, r3, #22
 801258a:	d402      	bmi.n	8012592 <_vfiprintf_r+0x2a>
 801258c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801258e:	f7fe fb44 	bl	8010c1a <__retarget_lock_acquire_recursive>
 8012592:	89ab      	ldrh	r3, [r5, #12]
 8012594:	071b      	lsls	r3, r3, #28
 8012596:	d501      	bpl.n	801259c <_vfiprintf_r+0x34>
 8012598:	692b      	ldr	r3, [r5, #16]
 801259a:	b99b      	cbnz	r3, 80125c4 <_vfiprintf_r+0x5c>
 801259c:	4629      	mov	r1, r5
 801259e:	4630      	mov	r0, r6
 80125a0:	f000 f9fa 	bl	8012998 <__swsetup_r>
 80125a4:	b170      	cbz	r0, 80125c4 <_vfiprintf_r+0x5c>
 80125a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80125a8:	07dc      	lsls	r4, r3, #31
 80125aa:	d504      	bpl.n	80125b6 <_vfiprintf_r+0x4e>
 80125ac:	f04f 30ff 	mov.w	r0, #4294967295
 80125b0:	b01d      	add	sp, #116	; 0x74
 80125b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125b6:	89ab      	ldrh	r3, [r5, #12]
 80125b8:	0598      	lsls	r0, r3, #22
 80125ba:	d4f7      	bmi.n	80125ac <_vfiprintf_r+0x44>
 80125bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80125be:	f7fe fb2d 	bl	8010c1c <__retarget_lock_release_recursive>
 80125c2:	e7f3      	b.n	80125ac <_vfiprintf_r+0x44>
 80125c4:	2300      	movs	r3, #0
 80125c6:	9309      	str	r3, [sp, #36]	; 0x24
 80125c8:	2320      	movs	r3, #32
 80125ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80125ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80125d2:	2330      	movs	r3, #48	; 0x30
 80125d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012788 <_vfiprintf_r+0x220>
 80125d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80125dc:	f04f 0901 	mov.w	r9, #1
 80125e0:	4623      	mov	r3, r4
 80125e2:	469a      	mov	sl, r3
 80125e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125e8:	b10a      	cbz	r2, 80125ee <_vfiprintf_r+0x86>
 80125ea:	2a25      	cmp	r2, #37	; 0x25
 80125ec:	d1f9      	bne.n	80125e2 <_vfiprintf_r+0x7a>
 80125ee:	ebba 0b04 	subs.w	fp, sl, r4
 80125f2:	d00b      	beq.n	801260c <_vfiprintf_r+0xa4>
 80125f4:	465b      	mov	r3, fp
 80125f6:	4622      	mov	r2, r4
 80125f8:	4629      	mov	r1, r5
 80125fa:	4630      	mov	r0, r6
 80125fc:	f7ff ffa1 	bl	8012542 <__sfputs_r>
 8012600:	3001      	adds	r0, #1
 8012602:	f000 80a9 	beq.w	8012758 <_vfiprintf_r+0x1f0>
 8012606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012608:	445a      	add	r2, fp
 801260a:	9209      	str	r2, [sp, #36]	; 0x24
 801260c:	f89a 3000 	ldrb.w	r3, [sl]
 8012610:	2b00      	cmp	r3, #0
 8012612:	f000 80a1 	beq.w	8012758 <_vfiprintf_r+0x1f0>
 8012616:	2300      	movs	r3, #0
 8012618:	f04f 32ff 	mov.w	r2, #4294967295
 801261c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012620:	f10a 0a01 	add.w	sl, sl, #1
 8012624:	9304      	str	r3, [sp, #16]
 8012626:	9307      	str	r3, [sp, #28]
 8012628:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801262c:	931a      	str	r3, [sp, #104]	; 0x68
 801262e:	4654      	mov	r4, sl
 8012630:	2205      	movs	r2, #5
 8012632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012636:	4854      	ldr	r0, [pc, #336]	; (8012788 <_vfiprintf_r+0x220>)
 8012638:	f7ed fdda 	bl	80001f0 <memchr>
 801263c:	9a04      	ldr	r2, [sp, #16]
 801263e:	b9d8      	cbnz	r0, 8012678 <_vfiprintf_r+0x110>
 8012640:	06d1      	lsls	r1, r2, #27
 8012642:	bf44      	itt	mi
 8012644:	2320      	movmi	r3, #32
 8012646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801264a:	0713      	lsls	r3, r2, #28
 801264c:	bf44      	itt	mi
 801264e:	232b      	movmi	r3, #43	; 0x2b
 8012650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012654:	f89a 3000 	ldrb.w	r3, [sl]
 8012658:	2b2a      	cmp	r3, #42	; 0x2a
 801265a:	d015      	beq.n	8012688 <_vfiprintf_r+0x120>
 801265c:	9a07      	ldr	r2, [sp, #28]
 801265e:	4654      	mov	r4, sl
 8012660:	2000      	movs	r0, #0
 8012662:	f04f 0c0a 	mov.w	ip, #10
 8012666:	4621      	mov	r1, r4
 8012668:	f811 3b01 	ldrb.w	r3, [r1], #1
 801266c:	3b30      	subs	r3, #48	; 0x30
 801266e:	2b09      	cmp	r3, #9
 8012670:	d94d      	bls.n	801270e <_vfiprintf_r+0x1a6>
 8012672:	b1b0      	cbz	r0, 80126a2 <_vfiprintf_r+0x13a>
 8012674:	9207      	str	r2, [sp, #28]
 8012676:	e014      	b.n	80126a2 <_vfiprintf_r+0x13a>
 8012678:	eba0 0308 	sub.w	r3, r0, r8
 801267c:	fa09 f303 	lsl.w	r3, r9, r3
 8012680:	4313      	orrs	r3, r2
 8012682:	9304      	str	r3, [sp, #16]
 8012684:	46a2      	mov	sl, r4
 8012686:	e7d2      	b.n	801262e <_vfiprintf_r+0xc6>
 8012688:	9b03      	ldr	r3, [sp, #12]
 801268a:	1d19      	adds	r1, r3, #4
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	9103      	str	r1, [sp, #12]
 8012690:	2b00      	cmp	r3, #0
 8012692:	bfbb      	ittet	lt
 8012694:	425b      	neglt	r3, r3
 8012696:	f042 0202 	orrlt.w	r2, r2, #2
 801269a:	9307      	strge	r3, [sp, #28]
 801269c:	9307      	strlt	r3, [sp, #28]
 801269e:	bfb8      	it	lt
 80126a0:	9204      	strlt	r2, [sp, #16]
 80126a2:	7823      	ldrb	r3, [r4, #0]
 80126a4:	2b2e      	cmp	r3, #46	; 0x2e
 80126a6:	d10c      	bne.n	80126c2 <_vfiprintf_r+0x15a>
 80126a8:	7863      	ldrb	r3, [r4, #1]
 80126aa:	2b2a      	cmp	r3, #42	; 0x2a
 80126ac:	d134      	bne.n	8012718 <_vfiprintf_r+0x1b0>
 80126ae:	9b03      	ldr	r3, [sp, #12]
 80126b0:	1d1a      	adds	r2, r3, #4
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	9203      	str	r2, [sp, #12]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	bfb8      	it	lt
 80126ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80126be:	3402      	adds	r4, #2
 80126c0:	9305      	str	r3, [sp, #20]
 80126c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012798 <_vfiprintf_r+0x230>
 80126c6:	7821      	ldrb	r1, [r4, #0]
 80126c8:	2203      	movs	r2, #3
 80126ca:	4650      	mov	r0, sl
 80126cc:	f7ed fd90 	bl	80001f0 <memchr>
 80126d0:	b138      	cbz	r0, 80126e2 <_vfiprintf_r+0x17a>
 80126d2:	9b04      	ldr	r3, [sp, #16]
 80126d4:	eba0 000a 	sub.w	r0, r0, sl
 80126d8:	2240      	movs	r2, #64	; 0x40
 80126da:	4082      	lsls	r2, r0
 80126dc:	4313      	orrs	r3, r2
 80126de:	3401      	adds	r4, #1
 80126e0:	9304      	str	r3, [sp, #16]
 80126e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126e6:	4829      	ldr	r0, [pc, #164]	; (801278c <_vfiprintf_r+0x224>)
 80126e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80126ec:	2206      	movs	r2, #6
 80126ee:	f7ed fd7f 	bl	80001f0 <memchr>
 80126f2:	2800      	cmp	r0, #0
 80126f4:	d03f      	beq.n	8012776 <_vfiprintf_r+0x20e>
 80126f6:	4b26      	ldr	r3, [pc, #152]	; (8012790 <_vfiprintf_r+0x228>)
 80126f8:	bb1b      	cbnz	r3, 8012742 <_vfiprintf_r+0x1da>
 80126fa:	9b03      	ldr	r3, [sp, #12]
 80126fc:	3307      	adds	r3, #7
 80126fe:	f023 0307 	bic.w	r3, r3, #7
 8012702:	3308      	adds	r3, #8
 8012704:	9303      	str	r3, [sp, #12]
 8012706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012708:	443b      	add	r3, r7
 801270a:	9309      	str	r3, [sp, #36]	; 0x24
 801270c:	e768      	b.n	80125e0 <_vfiprintf_r+0x78>
 801270e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012712:	460c      	mov	r4, r1
 8012714:	2001      	movs	r0, #1
 8012716:	e7a6      	b.n	8012666 <_vfiprintf_r+0xfe>
 8012718:	2300      	movs	r3, #0
 801271a:	3401      	adds	r4, #1
 801271c:	9305      	str	r3, [sp, #20]
 801271e:	4619      	mov	r1, r3
 8012720:	f04f 0c0a 	mov.w	ip, #10
 8012724:	4620      	mov	r0, r4
 8012726:	f810 2b01 	ldrb.w	r2, [r0], #1
 801272a:	3a30      	subs	r2, #48	; 0x30
 801272c:	2a09      	cmp	r2, #9
 801272e:	d903      	bls.n	8012738 <_vfiprintf_r+0x1d0>
 8012730:	2b00      	cmp	r3, #0
 8012732:	d0c6      	beq.n	80126c2 <_vfiprintf_r+0x15a>
 8012734:	9105      	str	r1, [sp, #20]
 8012736:	e7c4      	b.n	80126c2 <_vfiprintf_r+0x15a>
 8012738:	fb0c 2101 	mla	r1, ip, r1, r2
 801273c:	4604      	mov	r4, r0
 801273e:	2301      	movs	r3, #1
 8012740:	e7f0      	b.n	8012724 <_vfiprintf_r+0x1bc>
 8012742:	ab03      	add	r3, sp, #12
 8012744:	9300      	str	r3, [sp, #0]
 8012746:	462a      	mov	r2, r5
 8012748:	4b12      	ldr	r3, [pc, #72]	; (8012794 <_vfiprintf_r+0x22c>)
 801274a:	a904      	add	r1, sp, #16
 801274c:	4630      	mov	r0, r6
 801274e:	f7fd fcc5 	bl	80100dc <_printf_float>
 8012752:	4607      	mov	r7, r0
 8012754:	1c78      	adds	r0, r7, #1
 8012756:	d1d6      	bne.n	8012706 <_vfiprintf_r+0x19e>
 8012758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801275a:	07d9      	lsls	r1, r3, #31
 801275c:	d405      	bmi.n	801276a <_vfiprintf_r+0x202>
 801275e:	89ab      	ldrh	r3, [r5, #12]
 8012760:	059a      	lsls	r2, r3, #22
 8012762:	d402      	bmi.n	801276a <_vfiprintf_r+0x202>
 8012764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012766:	f7fe fa59 	bl	8010c1c <__retarget_lock_release_recursive>
 801276a:	89ab      	ldrh	r3, [r5, #12]
 801276c:	065b      	lsls	r3, r3, #25
 801276e:	f53f af1d 	bmi.w	80125ac <_vfiprintf_r+0x44>
 8012772:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012774:	e71c      	b.n	80125b0 <_vfiprintf_r+0x48>
 8012776:	ab03      	add	r3, sp, #12
 8012778:	9300      	str	r3, [sp, #0]
 801277a:	462a      	mov	r2, r5
 801277c:	4b05      	ldr	r3, [pc, #20]	; (8012794 <_vfiprintf_r+0x22c>)
 801277e:	a904      	add	r1, sp, #16
 8012780:	4630      	mov	r0, r6
 8012782:	f7fd ff4f 	bl	8010624 <_printf_i>
 8012786:	e7e4      	b.n	8012752 <_vfiprintf_r+0x1ea>
 8012788:	0801645c 	.word	0x0801645c
 801278c:	08016466 	.word	0x08016466
 8012790:	080100dd 	.word	0x080100dd
 8012794:	08012543 	.word	0x08012543
 8012798:	08016462 	.word	0x08016462

0801279c <__sflush_r>:
 801279c:	898a      	ldrh	r2, [r1, #12]
 801279e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127a2:	4605      	mov	r5, r0
 80127a4:	0710      	lsls	r0, r2, #28
 80127a6:	460c      	mov	r4, r1
 80127a8:	d458      	bmi.n	801285c <__sflush_r+0xc0>
 80127aa:	684b      	ldr	r3, [r1, #4]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	dc05      	bgt.n	80127bc <__sflush_r+0x20>
 80127b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	dc02      	bgt.n	80127bc <__sflush_r+0x20>
 80127b6:	2000      	movs	r0, #0
 80127b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127be:	2e00      	cmp	r6, #0
 80127c0:	d0f9      	beq.n	80127b6 <__sflush_r+0x1a>
 80127c2:	2300      	movs	r3, #0
 80127c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80127c8:	682f      	ldr	r7, [r5, #0]
 80127ca:	6a21      	ldr	r1, [r4, #32]
 80127cc:	602b      	str	r3, [r5, #0]
 80127ce:	d032      	beq.n	8012836 <__sflush_r+0x9a>
 80127d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80127d2:	89a3      	ldrh	r3, [r4, #12]
 80127d4:	075a      	lsls	r2, r3, #29
 80127d6:	d505      	bpl.n	80127e4 <__sflush_r+0x48>
 80127d8:	6863      	ldr	r3, [r4, #4]
 80127da:	1ac0      	subs	r0, r0, r3
 80127dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127de:	b10b      	cbz	r3, 80127e4 <__sflush_r+0x48>
 80127e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80127e2:	1ac0      	subs	r0, r0, r3
 80127e4:	2300      	movs	r3, #0
 80127e6:	4602      	mov	r2, r0
 80127e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127ea:	6a21      	ldr	r1, [r4, #32]
 80127ec:	4628      	mov	r0, r5
 80127ee:	47b0      	blx	r6
 80127f0:	1c43      	adds	r3, r0, #1
 80127f2:	89a3      	ldrh	r3, [r4, #12]
 80127f4:	d106      	bne.n	8012804 <__sflush_r+0x68>
 80127f6:	6829      	ldr	r1, [r5, #0]
 80127f8:	291d      	cmp	r1, #29
 80127fa:	d82b      	bhi.n	8012854 <__sflush_r+0xb8>
 80127fc:	4a29      	ldr	r2, [pc, #164]	; (80128a4 <__sflush_r+0x108>)
 80127fe:	410a      	asrs	r2, r1
 8012800:	07d6      	lsls	r6, r2, #31
 8012802:	d427      	bmi.n	8012854 <__sflush_r+0xb8>
 8012804:	2200      	movs	r2, #0
 8012806:	6062      	str	r2, [r4, #4]
 8012808:	04d9      	lsls	r1, r3, #19
 801280a:	6922      	ldr	r2, [r4, #16]
 801280c:	6022      	str	r2, [r4, #0]
 801280e:	d504      	bpl.n	801281a <__sflush_r+0x7e>
 8012810:	1c42      	adds	r2, r0, #1
 8012812:	d101      	bne.n	8012818 <__sflush_r+0x7c>
 8012814:	682b      	ldr	r3, [r5, #0]
 8012816:	b903      	cbnz	r3, 801281a <__sflush_r+0x7e>
 8012818:	6560      	str	r0, [r4, #84]	; 0x54
 801281a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801281c:	602f      	str	r7, [r5, #0]
 801281e:	2900      	cmp	r1, #0
 8012820:	d0c9      	beq.n	80127b6 <__sflush_r+0x1a>
 8012822:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012826:	4299      	cmp	r1, r3
 8012828:	d002      	beq.n	8012830 <__sflush_r+0x94>
 801282a:	4628      	mov	r0, r5
 801282c:	f7ff f89e 	bl	801196c <_free_r>
 8012830:	2000      	movs	r0, #0
 8012832:	6360      	str	r0, [r4, #52]	; 0x34
 8012834:	e7c0      	b.n	80127b8 <__sflush_r+0x1c>
 8012836:	2301      	movs	r3, #1
 8012838:	4628      	mov	r0, r5
 801283a:	47b0      	blx	r6
 801283c:	1c41      	adds	r1, r0, #1
 801283e:	d1c8      	bne.n	80127d2 <__sflush_r+0x36>
 8012840:	682b      	ldr	r3, [r5, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d0c5      	beq.n	80127d2 <__sflush_r+0x36>
 8012846:	2b1d      	cmp	r3, #29
 8012848:	d001      	beq.n	801284e <__sflush_r+0xb2>
 801284a:	2b16      	cmp	r3, #22
 801284c:	d101      	bne.n	8012852 <__sflush_r+0xb6>
 801284e:	602f      	str	r7, [r5, #0]
 8012850:	e7b1      	b.n	80127b6 <__sflush_r+0x1a>
 8012852:	89a3      	ldrh	r3, [r4, #12]
 8012854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012858:	81a3      	strh	r3, [r4, #12]
 801285a:	e7ad      	b.n	80127b8 <__sflush_r+0x1c>
 801285c:	690f      	ldr	r7, [r1, #16]
 801285e:	2f00      	cmp	r7, #0
 8012860:	d0a9      	beq.n	80127b6 <__sflush_r+0x1a>
 8012862:	0793      	lsls	r3, r2, #30
 8012864:	680e      	ldr	r6, [r1, #0]
 8012866:	bf08      	it	eq
 8012868:	694b      	ldreq	r3, [r1, #20]
 801286a:	600f      	str	r7, [r1, #0]
 801286c:	bf18      	it	ne
 801286e:	2300      	movne	r3, #0
 8012870:	eba6 0807 	sub.w	r8, r6, r7
 8012874:	608b      	str	r3, [r1, #8]
 8012876:	f1b8 0f00 	cmp.w	r8, #0
 801287a:	dd9c      	ble.n	80127b6 <__sflush_r+0x1a>
 801287c:	6a21      	ldr	r1, [r4, #32]
 801287e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012880:	4643      	mov	r3, r8
 8012882:	463a      	mov	r2, r7
 8012884:	4628      	mov	r0, r5
 8012886:	47b0      	blx	r6
 8012888:	2800      	cmp	r0, #0
 801288a:	dc06      	bgt.n	801289a <__sflush_r+0xfe>
 801288c:	89a3      	ldrh	r3, [r4, #12]
 801288e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012892:	81a3      	strh	r3, [r4, #12]
 8012894:	f04f 30ff 	mov.w	r0, #4294967295
 8012898:	e78e      	b.n	80127b8 <__sflush_r+0x1c>
 801289a:	4407      	add	r7, r0
 801289c:	eba8 0800 	sub.w	r8, r8, r0
 80128a0:	e7e9      	b.n	8012876 <__sflush_r+0xda>
 80128a2:	bf00      	nop
 80128a4:	dfbffffe 	.word	0xdfbffffe

080128a8 <_fflush_r>:
 80128a8:	b538      	push	{r3, r4, r5, lr}
 80128aa:	690b      	ldr	r3, [r1, #16]
 80128ac:	4605      	mov	r5, r0
 80128ae:	460c      	mov	r4, r1
 80128b0:	b913      	cbnz	r3, 80128b8 <_fflush_r+0x10>
 80128b2:	2500      	movs	r5, #0
 80128b4:	4628      	mov	r0, r5
 80128b6:	bd38      	pop	{r3, r4, r5, pc}
 80128b8:	b118      	cbz	r0, 80128c2 <_fflush_r+0x1a>
 80128ba:	6a03      	ldr	r3, [r0, #32]
 80128bc:	b90b      	cbnz	r3, 80128c2 <_fflush_r+0x1a>
 80128be:	f7fe f85f 	bl	8010980 <__sinit>
 80128c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d0f3      	beq.n	80128b2 <_fflush_r+0xa>
 80128ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80128cc:	07d0      	lsls	r0, r2, #31
 80128ce:	d404      	bmi.n	80128da <_fflush_r+0x32>
 80128d0:	0599      	lsls	r1, r3, #22
 80128d2:	d402      	bmi.n	80128da <_fflush_r+0x32>
 80128d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128d6:	f7fe f9a0 	bl	8010c1a <__retarget_lock_acquire_recursive>
 80128da:	4628      	mov	r0, r5
 80128dc:	4621      	mov	r1, r4
 80128de:	f7ff ff5d 	bl	801279c <__sflush_r>
 80128e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128e4:	07da      	lsls	r2, r3, #31
 80128e6:	4605      	mov	r5, r0
 80128e8:	d4e4      	bmi.n	80128b4 <_fflush_r+0xc>
 80128ea:	89a3      	ldrh	r3, [r4, #12]
 80128ec:	059b      	lsls	r3, r3, #22
 80128ee:	d4e1      	bmi.n	80128b4 <_fflush_r+0xc>
 80128f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128f2:	f7fe f993 	bl	8010c1c <__retarget_lock_release_recursive>
 80128f6:	e7dd      	b.n	80128b4 <_fflush_r+0xc>

080128f8 <fiprintf>:
 80128f8:	b40e      	push	{r1, r2, r3}
 80128fa:	b503      	push	{r0, r1, lr}
 80128fc:	4601      	mov	r1, r0
 80128fe:	ab03      	add	r3, sp, #12
 8012900:	4805      	ldr	r0, [pc, #20]	; (8012918 <fiprintf+0x20>)
 8012902:	f853 2b04 	ldr.w	r2, [r3], #4
 8012906:	6800      	ldr	r0, [r0, #0]
 8012908:	9301      	str	r3, [sp, #4]
 801290a:	f7ff fe2d 	bl	8012568 <_vfiprintf_r>
 801290e:	b002      	add	sp, #8
 8012910:	f85d eb04 	ldr.w	lr, [sp], #4
 8012914:	b003      	add	sp, #12
 8012916:	4770      	bx	lr
 8012918:	2000008c 	.word	0x2000008c

0801291c <__swbuf_r>:
 801291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801291e:	460e      	mov	r6, r1
 8012920:	4614      	mov	r4, r2
 8012922:	4605      	mov	r5, r0
 8012924:	b118      	cbz	r0, 801292e <__swbuf_r+0x12>
 8012926:	6a03      	ldr	r3, [r0, #32]
 8012928:	b90b      	cbnz	r3, 801292e <__swbuf_r+0x12>
 801292a:	f7fe f829 	bl	8010980 <__sinit>
 801292e:	69a3      	ldr	r3, [r4, #24]
 8012930:	60a3      	str	r3, [r4, #8]
 8012932:	89a3      	ldrh	r3, [r4, #12]
 8012934:	071a      	lsls	r2, r3, #28
 8012936:	d525      	bpl.n	8012984 <__swbuf_r+0x68>
 8012938:	6923      	ldr	r3, [r4, #16]
 801293a:	b31b      	cbz	r3, 8012984 <__swbuf_r+0x68>
 801293c:	6823      	ldr	r3, [r4, #0]
 801293e:	6922      	ldr	r2, [r4, #16]
 8012940:	1a98      	subs	r0, r3, r2
 8012942:	6963      	ldr	r3, [r4, #20]
 8012944:	b2f6      	uxtb	r6, r6
 8012946:	4283      	cmp	r3, r0
 8012948:	4637      	mov	r7, r6
 801294a:	dc04      	bgt.n	8012956 <__swbuf_r+0x3a>
 801294c:	4621      	mov	r1, r4
 801294e:	4628      	mov	r0, r5
 8012950:	f7ff ffaa 	bl	80128a8 <_fflush_r>
 8012954:	b9e0      	cbnz	r0, 8012990 <__swbuf_r+0x74>
 8012956:	68a3      	ldr	r3, [r4, #8]
 8012958:	3b01      	subs	r3, #1
 801295a:	60a3      	str	r3, [r4, #8]
 801295c:	6823      	ldr	r3, [r4, #0]
 801295e:	1c5a      	adds	r2, r3, #1
 8012960:	6022      	str	r2, [r4, #0]
 8012962:	701e      	strb	r6, [r3, #0]
 8012964:	6962      	ldr	r2, [r4, #20]
 8012966:	1c43      	adds	r3, r0, #1
 8012968:	429a      	cmp	r2, r3
 801296a:	d004      	beq.n	8012976 <__swbuf_r+0x5a>
 801296c:	89a3      	ldrh	r3, [r4, #12]
 801296e:	07db      	lsls	r3, r3, #31
 8012970:	d506      	bpl.n	8012980 <__swbuf_r+0x64>
 8012972:	2e0a      	cmp	r6, #10
 8012974:	d104      	bne.n	8012980 <__swbuf_r+0x64>
 8012976:	4621      	mov	r1, r4
 8012978:	4628      	mov	r0, r5
 801297a:	f7ff ff95 	bl	80128a8 <_fflush_r>
 801297e:	b938      	cbnz	r0, 8012990 <__swbuf_r+0x74>
 8012980:	4638      	mov	r0, r7
 8012982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012984:	4621      	mov	r1, r4
 8012986:	4628      	mov	r0, r5
 8012988:	f000 f806 	bl	8012998 <__swsetup_r>
 801298c:	2800      	cmp	r0, #0
 801298e:	d0d5      	beq.n	801293c <__swbuf_r+0x20>
 8012990:	f04f 37ff 	mov.w	r7, #4294967295
 8012994:	e7f4      	b.n	8012980 <__swbuf_r+0x64>
	...

08012998 <__swsetup_r>:
 8012998:	b538      	push	{r3, r4, r5, lr}
 801299a:	4b2a      	ldr	r3, [pc, #168]	; (8012a44 <__swsetup_r+0xac>)
 801299c:	4605      	mov	r5, r0
 801299e:	6818      	ldr	r0, [r3, #0]
 80129a0:	460c      	mov	r4, r1
 80129a2:	b118      	cbz	r0, 80129ac <__swsetup_r+0x14>
 80129a4:	6a03      	ldr	r3, [r0, #32]
 80129a6:	b90b      	cbnz	r3, 80129ac <__swsetup_r+0x14>
 80129a8:	f7fd ffea 	bl	8010980 <__sinit>
 80129ac:	89a3      	ldrh	r3, [r4, #12]
 80129ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80129b2:	0718      	lsls	r0, r3, #28
 80129b4:	d422      	bmi.n	80129fc <__swsetup_r+0x64>
 80129b6:	06d9      	lsls	r1, r3, #27
 80129b8:	d407      	bmi.n	80129ca <__swsetup_r+0x32>
 80129ba:	2309      	movs	r3, #9
 80129bc:	602b      	str	r3, [r5, #0]
 80129be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80129c2:	81a3      	strh	r3, [r4, #12]
 80129c4:	f04f 30ff 	mov.w	r0, #4294967295
 80129c8:	e034      	b.n	8012a34 <__swsetup_r+0x9c>
 80129ca:	0758      	lsls	r0, r3, #29
 80129cc:	d512      	bpl.n	80129f4 <__swsetup_r+0x5c>
 80129ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80129d0:	b141      	cbz	r1, 80129e4 <__swsetup_r+0x4c>
 80129d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80129d6:	4299      	cmp	r1, r3
 80129d8:	d002      	beq.n	80129e0 <__swsetup_r+0x48>
 80129da:	4628      	mov	r0, r5
 80129dc:	f7fe ffc6 	bl	801196c <_free_r>
 80129e0:	2300      	movs	r3, #0
 80129e2:	6363      	str	r3, [r4, #52]	; 0x34
 80129e4:	89a3      	ldrh	r3, [r4, #12]
 80129e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80129ea:	81a3      	strh	r3, [r4, #12]
 80129ec:	2300      	movs	r3, #0
 80129ee:	6063      	str	r3, [r4, #4]
 80129f0:	6923      	ldr	r3, [r4, #16]
 80129f2:	6023      	str	r3, [r4, #0]
 80129f4:	89a3      	ldrh	r3, [r4, #12]
 80129f6:	f043 0308 	orr.w	r3, r3, #8
 80129fa:	81a3      	strh	r3, [r4, #12]
 80129fc:	6923      	ldr	r3, [r4, #16]
 80129fe:	b94b      	cbnz	r3, 8012a14 <__swsetup_r+0x7c>
 8012a00:	89a3      	ldrh	r3, [r4, #12]
 8012a02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a0a:	d003      	beq.n	8012a14 <__swsetup_r+0x7c>
 8012a0c:	4621      	mov	r1, r4
 8012a0e:	4628      	mov	r0, r5
 8012a10:	f000 f8bb 	bl	8012b8a <__smakebuf_r>
 8012a14:	89a0      	ldrh	r0, [r4, #12]
 8012a16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012a1a:	f010 0301 	ands.w	r3, r0, #1
 8012a1e:	d00a      	beq.n	8012a36 <__swsetup_r+0x9e>
 8012a20:	2300      	movs	r3, #0
 8012a22:	60a3      	str	r3, [r4, #8]
 8012a24:	6963      	ldr	r3, [r4, #20]
 8012a26:	425b      	negs	r3, r3
 8012a28:	61a3      	str	r3, [r4, #24]
 8012a2a:	6923      	ldr	r3, [r4, #16]
 8012a2c:	b943      	cbnz	r3, 8012a40 <__swsetup_r+0xa8>
 8012a2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012a32:	d1c4      	bne.n	80129be <__swsetup_r+0x26>
 8012a34:	bd38      	pop	{r3, r4, r5, pc}
 8012a36:	0781      	lsls	r1, r0, #30
 8012a38:	bf58      	it	pl
 8012a3a:	6963      	ldrpl	r3, [r4, #20]
 8012a3c:	60a3      	str	r3, [r4, #8]
 8012a3e:	e7f4      	b.n	8012a2a <__swsetup_r+0x92>
 8012a40:	2000      	movs	r0, #0
 8012a42:	e7f7      	b.n	8012a34 <__swsetup_r+0x9c>
 8012a44:	2000008c 	.word	0x2000008c

08012a48 <_sbrk_r>:
 8012a48:	b538      	push	{r3, r4, r5, lr}
 8012a4a:	4d06      	ldr	r5, [pc, #24]	; (8012a64 <_sbrk_r+0x1c>)
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	4604      	mov	r4, r0
 8012a50:	4608      	mov	r0, r1
 8012a52:	602b      	str	r3, [r5, #0]
 8012a54:	f7ef fbcc 	bl	80021f0 <_sbrk>
 8012a58:	1c43      	adds	r3, r0, #1
 8012a5a:	d102      	bne.n	8012a62 <_sbrk_r+0x1a>
 8012a5c:	682b      	ldr	r3, [r5, #0]
 8012a5e:	b103      	cbz	r3, 8012a62 <_sbrk_r+0x1a>
 8012a60:	6023      	str	r3, [r4, #0]
 8012a62:	bd38      	pop	{r3, r4, r5, pc}
 8012a64:	20000ae0 	.word	0x20000ae0

08012a68 <abort>:
 8012a68:	b508      	push	{r3, lr}
 8012a6a:	2006      	movs	r0, #6
 8012a6c:	f000 f8f2 	bl	8012c54 <raise>
 8012a70:	2001      	movs	r0, #1
 8012a72:	f7ef fb45 	bl	8002100 <_exit>

08012a76 <_calloc_r>:
 8012a76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a78:	fba1 2402 	umull	r2, r4, r1, r2
 8012a7c:	b94c      	cbnz	r4, 8012a92 <_calloc_r+0x1c>
 8012a7e:	4611      	mov	r1, r2
 8012a80:	9201      	str	r2, [sp, #4]
 8012a82:	f7fe ffe7 	bl	8011a54 <_malloc_r>
 8012a86:	9a01      	ldr	r2, [sp, #4]
 8012a88:	4605      	mov	r5, r0
 8012a8a:	b930      	cbnz	r0, 8012a9a <_calloc_r+0x24>
 8012a8c:	4628      	mov	r0, r5
 8012a8e:	b003      	add	sp, #12
 8012a90:	bd30      	pop	{r4, r5, pc}
 8012a92:	220c      	movs	r2, #12
 8012a94:	6002      	str	r2, [r0, #0]
 8012a96:	2500      	movs	r5, #0
 8012a98:	e7f8      	b.n	8012a8c <_calloc_r+0x16>
 8012a9a:	4621      	mov	r1, r4
 8012a9c:	f7fe f845 	bl	8010b2a <memset>
 8012aa0:	e7f4      	b.n	8012a8c <_calloc_r+0x16>

08012aa2 <__ascii_mbtowc>:
 8012aa2:	b082      	sub	sp, #8
 8012aa4:	b901      	cbnz	r1, 8012aa8 <__ascii_mbtowc+0x6>
 8012aa6:	a901      	add	r1, sp, #4
 8012aa8:	b142      	cbz	r2, 8012abc <__ascii_mbtowc+0x1a>
 8012aaa:	b14b      	cbz	r3, 8012ac0 <__ascii_mbtowc+0x1e>
 8012aac:	7813      	ldrb	r3, [r2, #0]
 8012aae:	600b      	str	r3, [r1, #0]
 8012ab0:	7812      	ldrb	r2, [r2, #0]
 8012ab2:	1e10      	subs	r0, r2, #0
 8012ab4:	bf18      	it	ne
 8012ab6:	2001      	movne	r0, #1
 8012ab8:	b002      	add	sp, #8
 8012aba:	4770      	bx	lr
 8012abc:	4610      	mov	r0, r2
 8012abe:	e7fb      	b.n	8012ab8 <__ascii_mbtowc+0x16>
 8012ac0:	f06f 0001 	mvn.w	r0, #1
 8012ac4:	e7f8      	b.n	8012ab8 <__ascii_mbtowc+0x16>

08012ac6 <_realloc_r>:
 8012ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aca:	4680      	mov	r8, r0
 8012acc:	4614      	mov	r4, r2
 8012ace:	460e      	mov	r6, r1
 8012ad0:	b921      	cbnz	r1, 8012adc <_realloc_r+0x16>
 8012ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ad6:	4611      	mov	r1, r2
 8012ad8:	f7fe bfbc 	b.w	8011a54 <_malloc_r>
 8012adc:	b92a      	cbnz	r2, 8012aea <_realloc_r+0x24>
 8012ade:	f7fe ff45 	bl	801196c <_free_r>
 8012ae2:	4625      	mov	r5, r4
 8012ae4:	4628      	mov	r0, r5
 8012ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aea:	f000 f8f1 	bl	8012cd0 <_malloc_usable_size_r>
 8012aee:	4284      	cmp	r4, r0
 8012af0:	4607      	mov	r7, r0
 8012af2:	d802      	bhi.n	8012afa <_realloc_r+0x34>
 8012af4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012af8:	d812      	bhi.n	8012b20 <_realloc_r+0x5a>
 8012afa:	4621      	mov	r1, r4
 8012afc:	4640      	mov	r0, r8
 8012afe:	f7fe ffa9 	bl	8011a54 <_malloc_r>
 8012b02:	4605      	mov	r5, r0
 8012b04:	2800      	cmp	r0, #0
 8012b06:	d0ed      	beq.n	8012ae4 <_realloc_r+0x1e>
 8012b08:	42bc      	cmp	r4, r7
 8012b0a:	4622      	mov	r2, r4
 8012b0c:	4631      	mov	r1, r6
 8012b0e:	bf28      	it	cs
 8012b10:	463a      	movcs	r2, r7
 8012b12:	f7fe f884 	bl	8010c1e <memcpy>
 8012b16:	4631      	mov	r1, r6
 8012b18:	4640      	mov	r0, r8
 8012b1a:	f7fe ff27 	bl	801196c <_free_r>
 8012b1e:	e7e1      	b.n	8012ae4 <_realloc_r+0x1e>
 8012b20:	4635      	mov	r5, r6
 8012b22:	e7df      	b.n	8012ae4 <_realloc_r+0x1e>

08012b24 <__ascii_wctomb>:
 8012b24:	b149      	cbz	r1, 8012b3a <__ascii_wctomb+0x16>
 8012b26:	2aff      	cmp	r2, #255	; 0xff
 8012b28:	bf85      	ittet	hi
 8012b2a:	238a      	movhi	r3, #138	; 0x8a
 8012b2c:	6003      	strhi	r3, [r0, #0]
 8012b2e:	700a      	strbls	r2, [r1, #0]
 8012b30:	f04f 30ff 	movhi.w	r0, #4294967295
 8012b34:	bf98      	it	ls
 8012b36:	2001      	movls	r0, #1
 8012b38:	4770      	bx	lr
 8012b3a:	4608      	mov	r0, r1
 8012b3c:	4770      	bx	lr

08012b3e <__swhatbuf_r>:
 8012b3e:	b570      	push	{r4, r5, r6, lr}
 8012b40:	460c      	mov	r4, r1
 8012b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b46:	2900      	cmp	r1, #0
 8012b48:	b096      	sub	sp, #88	; 0x58
 8012b4a:	4615      	mov	r5, r2
 8012b4c:	461e      	mov	r6, r3
 8012b4e:	da0d      	bge.n	8012b6c <__swhatbuf_r+0x2e>
 8012b50:	89a3      	ldrh	r3, [r4, #12]
 8012b52:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012b56:	f04f 0100 	mov.w	r1, #0
 8012b5a:	bf0c      	ite	eq
 8012b5c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012b60:	2340      	movne	r3, #64	; 0x40
 8012b62:	2000      	movs	r0, #0
 8012b64:	6031      	str	r1, [r6, #0]
 8012b66:	602b      	str	r3, [r5, #0]
 8012b68:	b016      	add	sp, #88	; 0x58
 8012b6a:	bd70      	pop	{r4, r5, r6, pc}
 8012b6c:	466a      	mov	r2, sp
 8012b6e:	f000 f879 	bl	8012c64 <_fstat_r>
 8012b72:	2800      	cmp	r0, #0
 8012b74:	dbec      	blt.n	8012b50 <__swhatbuf_r+0x12>
 8012b76:	9901      	ldr	r1, [sp, #4]
 8012b78:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012b7c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012b80:	4259      	negs	r1, r3
 8012b82:	4159      	adcs	r1, r3
 8012b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012b88:	e7eb      	b.n	8012b62 <__swhatbuf_r+0x24>

08012b8a <__smakebuf_r>:
 8012b8a:	898b      	ldrh	r3, [r1, #12]
 8012b8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b8e:	079d      	lsls	r5, r3, #30
 8012b90:	4606      	mov	r6, r0
 8012b92:	460c      	mov	r4, r1
 8012b94:	d507      	bpl.n	8012ba6 <__smakebuf_r+0x1c>
 8012b96:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012b9a:	6023      	str	r3, [r4, #0]
 8012b9c:	6123      	str	r3, [r4, #16]
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	6163      	str	r3, [r4, #20]
 8012ba2:	b002      	add	sp, #8
 8012ba4:	bd70      	pop	{r4, r5, r6, pc}
 8012ba6:	ab01      	add	r3, sp, #4
 8012ba8:	466a      	mov	r2, sp
 8012baa:	f7ff ffc8 	bl	8012b3e <__swhatbuf_r>
 8012bae:	9900      	ldr	r1, [sp, #0]
 8012bb0:	4605      	mov	r5, r0
 8012bb2:	4630      	mov	r0, r6
 8012bb4:	f7fe ff4e 	bl	8011a54 <_malloc_r>
 8012bb8:	b948      	cbnz	r0, 8012bce <__smakebuf_r+0x44>
 8012bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bbe:	059a      	lsls	r2, r3, #22
 8012bc0:	d4ef      	bmi.n	8012ba2 <__smakebuf_r+0x18>
 8012bc2:	f023 0303 	bic.w	r3, r3, #3
 8012bc6:	f043 0302 	orr.w	r3, r3, #2
 8012bca:	81a3      	strh	r3, [r4, #12]
 8012bcc:	e7e3      	b.n	8012b96 <__smakebuf_r+0xc>
 8012bce:	89a3      	ldrh	r3, [r4, #12]
 8012bd0:	6020      	str	r0, [r4, #0]
 8012bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bd6:	81a3      	strh	r3, [r4, #12]
 8012bd8:	9b00      	ldr	r3, [sp, #0]
 8012bda:	6163      	str	r3, [r4, #20]
 8012bdc:	9b01      	ldr	r3, [sp, #4]
 8012bde:	6120      	str	r0, [r4, #16]
 8012be0:	b15b      	cbz	r3, 8012bfa <__smakebuf_r+0x70>
 8012be2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012be6:	4630      	mov	r0, r6
 8012be8:	f000 f84e 	bl	8012c88 <_isatty_r>
 8012bec:	b128      	cbz	r0, 8012bfa <__smakebuf_r+0x70>
 8012bee:	89a3      	ldrh	r3, [r4, #12]
 8012bf0:	f023 0303 	bic.w	r3, r3, #3
 8012bf4:	f043 0301 	orr.w	r3, r3, #1
 8012bf8:	81a3      	strh	r3, [r4, #12]
 8012bfa:	89a3      	ldrh	r3, [r4, #12]
 8012bfc:	431d      	orrs	r5, r3
 8012bfe:	81a5      	strh	r5, [r4, #12]
 8012c00:	e7cf      	b.n	8012ba2 <__smakebuf_r+0x18>

08012c02 <_raise_r>:
 8012c02:	291f      	cmp	r1, #31
 8012c04:	b538      	push	{r3, r4, r5, lr}
 8012c06:	4604      	mov	r4, r0
 8012c08:	460d      	mov	r5, r1
 8012c0a:	d904      	bls.n	8012c16 <_raise_r+0x14>
 8012c0c:	2316      	movs	r3, #22
 8012c0e:	6003      	str	r3, [r0, #0]
 8012c10:	f04f 30ff 	mov.w	r0, #4294967295
 8012c14:	bd38      	pop	{r3, r4, r5, pc}
 8012c16:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012c18:	b112      	cbz	r2, 8012c20 <_raise_r+0x1e>
 8012c1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c1e:	b94b      	cbnz	r3, 8012c34 <_raise_r+0x32>
 8012c20:	4620      	mov	r0, r4
 8012c22:	f000 f853 	bl	8012ccc <_getpid_r>
 8012c26:	462a      	mov	r2, r5
 8012c28:	4601      	mov	r1, r0
 8012c2a:	4620      	mov	r0, r4
 8012c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c30:	f000 b83a 	b.w	8012ca8 <_kill_r>
 8012c34:	2b01      	cmp	r3, #1
 8012c36:	d00a      	beq.n	8012c4e <_raise_r+0x4c>
 8012c38:	1c59      	adds	r1, r3, #1
 8012c3a:	d103      	bne.n	8012c44 <_raise_r+0x42>
 8012c3c:	2316      	movs	r3, #22
 8012c3e:	6003      	str	r3, [r0, #0]
 8012c40:	2001      	movs	r0, #1
 8012c42:	e7e7      	b.n	8012c14 <_raise_r+0x12>
 8012c44:	2400      	movs	r4, #0
 8012c46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012c4a:	4628      	mov	r0, r5
 8012c4c:	4798      	blx	r3
 8012c4e:	2000      	movs	r0, #0
 8012c50:	e7e0      	b.n	8012c14 <_raise_r+0x12>
	...

08012c54 <raise>:
 8012c54:	4b02      	ldr	r3, [pc, #8]	; (8012c60 <raise+0xc>)
 8012c56:	4601      	mov	r1, r0
 8012c58:	6818      	ldr	r0, [r3, #0]
 8012c5a:	f7ff bfd2 	b.w	8012c02 <_raise_r>
 8012c5e:	bf00      	nop
 8012c60:	2000008c 	.word	0x2000008c

08012c64 <_fstat_r>:
 8012c64:	b538      	push	{r3, r4, r5, lr}
 8012c66:	4d07      	ldr	r5, [pc, #28]	; (8012c84 <_fstat_r+0x20>)
 8012c68:	2300      	movs	r3, #0
 8012c6a:	4604      	mov	r4, r0
 8012c6c:	4608      	mov	r0, r1
 8012c6e:	4611      	mov	r1, r2
 8012c70:	602b      	str	r3, [r5, #0]
 8012c72:	f7ef fa94 	bl	800219e <_fstat>
 8012c76:	1c43      	adds	r3, r0, #1
 8012c78:	d102      	bne.n	8012c80 <_fstat_r+0x1c>
 8012c7a:	682b      	ldr	r3, [r5, #0]
 8012c7c:	b103      	cbz	r3, 8012c80 <_fstat_r+0x1c>
 8012c7e:	6023      	str	r3, [r4, #0]
 8012c80:	bd38      	pop	{r3, r4, r5, pc}
 8012c82:	bf00      	nop
 8012c84:	20000ae0 	.word	0x20000ae0

08012c88 <_isatty_r>:
 8012c88:	b538      	push	{r3, r4, r5, lr}
 8012c8a:	4d06      	ldr	r5, [pc, #24]	; (8012ca4 <_isatty_r+0x1c>)
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	4604      	mov	r4, r0
 8012c90:	4608      	mov	r0, r1
 8012c92:	602b      	str	r3, [r5, #0]
 8012c94:	f7ef fa93 	bl	80021be <_isatty>
 8012c98:	1c43      	adds	r3, r0, #1
 8012c9a:	d102      	bne.n	8012ca2 <_isatty_r+0x1a>
 8012c9c:	682b      	ldr	r3, [r5, #0]
 8012c9e:	b103      	cbz	r3, 8012ca2 <_isatty_r+0x1a>
 8012ca0:	6023      	str	r3, [r4, #0]
 8012ca2:	bd38      	pop	{r3, r4, r5, pc}
 8012ca4:	20000ae0 	.word	0x20000ae0

08012ca8 <_kill_r>:
 8012ca8:	b538      	push	{r3, r4, r5, lr}
 8012caa:	4d07      	ldr	r5, [pc, #28]	; (8012cc8 <_kill_r+0x20>)
 8012cac:	2300      	movs	r3, #0
 8012cae:	4604      	mov	r4, r0
 8012cb0:	4608      	mov	r0, r1
 8012cb2:	4611      	mov	r1, r2
 8012cb4:	602b      	str	r3, [r5, #0]
 8012cb6:	f7ef fa11 	bl	80020dc <_kill>
 8012cba:	1c43      	adds	r3, r0, #1
 8012cbc:	d102      	bne.n	8012cc4 <_kill_r+0x1c>
 8012cbe:	682b      	ldr	r3, [r5, #0]
 8012cc0:	b103      	cbz	r3, 8012cc4 <_kill_r+0x1c>
 8012cc2:	6023      	str	r3, [r4, #0]
 8012cc4:	bd38      	pop	{r3, r4, r5, pc}
 8012cc6:	bf00      	nop
 8012cc8:	20000ae0 	.word	0x20000ae0

08012ccc <_getpid_r>:
 8012ccc:	f7ef b9fe 	b.w	80020cc <_getpid>

08012cd0 <_malloc_usable_size_r>:
 8012cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012cd4:	1f18      	subs	r0, r3, #4
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	bfbc      	itt	lt
 8012cda:	580b      	ldrlt	r3, [r1, r0]
 8012cdc:	18c0      	addlt	r0, r0, r3
 8012cde:	4770      	bx	lr

08012ce0 <_init>:
 8012ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ce2:	bf00      	nop
 8012ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ce6:	bc08      	pop	{r3}
 8012ce8:	469e      	mov	lr, r3
 8012cea:	4770      	bx	lr

08012cec <_fini>:
 8012cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cee:	bf00      	nop
 8012cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cf2:	bc08      	pop	{r3}
 8012cf4:	469e      	mov	lr, r3
 8012cf6:	4770      	bx	lr
